<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="com.sun.beans.finder.ClassFinder"/>
        <import package="java.applet.Applet"/>
        <import package="java.applet.AppletContext"/>
        <import package="java.applet.AppletStub"/>
        <import package="java.applet.AudioClip"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Image"/>
        <import package="java.beans.beancontext.BeanContext"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.io.StreamCorruptedException"/>
        <import package="java.net.URL"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Vector"/>
        <import package="sun.awt.AppContext"/>
        <class name="Beans" line="58">
            <javadoc line="58">
                This class provides some general purpose beans control methods.                
            </javadoc>
            <declaration name="DESIGN_TIME" type="Object" line="63"/>
            <declaration name="GUI_AVAILABLE" type="Object" line="64"/>
            <javadoc line="66">
                &lt;p&gt;
                  Instantiate a JavaBean.
                  &lt;/p&gt;                
                <param>
                    cls         the class-loader from which we should create
                      the bean.  If this is null, then the system
                      class-loader is used.                    
                </param>
                <param>
                    beanName    the name of the bean within the class-loader.
                      For example "sun.beanbox.foobah"                    
                </param>
                <exception>
                    ClassNotFoundException if the class of a serialized
                      object could not be found.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="82">
                <params>
                    <param name="cls" type="ClassLoader"/>
                    <param name="beanName" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                &lt;p&gt;
                  Instantiate a JavaBean.
                  &lt;/p&gt;                
                <param>
                    cls         the class-loader from which we should create
                      the bean.  If this is null, then the system
                      class-loader is used.                    
                </param>
                <param>
                    beanName    the name of the bean within the class-loader.
                      For example "sun.beanbox.foobah"                    
                </param>
                <param>
                    beanContext The BeanContext in which to nest the new bean                    
                </param>
                <exception>
                    ClassNotFoundException if the class of a serialized
                      object could not be found.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="103">
                <params>
                    <param name="cls" type="ClassLoader"/>
                    <param name="beanName" type="String"/>
                    <param name="beanContext" type="BeanContext"/>
                </params>
            </method>
            <javadoc line="107">
                Instantiate a bean.
                  &lt;p&gt;
                  The bean is created based on a name relative to a class-loader.
                  This name should be a dot-separated name such as &quot;a.b.c&quot;.
                  &lt;p&gt;
                  In Beans 1.0 the given name can indicate either a serialized object
                  or a class.  Other mechanisms may be added in the future.  In
                  beans 1.0 we first try to treat the beanName as a serialized object
                  name then as a class name.
                  &lt;p&gt;
                  When using the beanName as a serialized object name we convert the
                  given beanName to a resource pathname and add a trailing &quot;.ser&quot; suffix.
                  We then try to load a serialized object from that resource.
                  &lt;p&gt;
                  For example, given a beanName of &quot;x.y&quot;, Beans.instantiate would first
                  try to read a serialized object from the resource &quot;x/y.ser&quot; and if
                  that failed it would try to load the class &quot;x.y&quot; and create an
                  instance of that class.
                  &lt;p&gt;
                  If the bean is a subtype of java.applet.Applet, then it is given
                  some special initialization.  First, it is supplied with a default
                  AppletStub and AppletContext.  Second, if it was instantiated from
                  a classname the applet&apos;s &quot;init&quot; method is called.  (If the bean was
                  deserialized this step is skipped.)
                  &lt;p&gt;
                  Note that for beans which are applets, it is the caller&apos;s responsiblity
                  to call &quot;start&quot; on the applet.  For correct behaviour, this should be done
                  after the applet has been added into a visible AWT container.
                  &lt;p&gt;
                  Note that applets created via beans.instantiate run in a slightly
                  different environment than applets running inside browsers.  In
                  particular, bean applets have no access to &quot;parameters&quot;, so they may
                  wish to provide property get/set methods to set parameter values.  We
                  advise bean-applet developers to test their bean-applets against both
                  the JDK appletviewer (for a reference browser environment) and the
                  BDK BeanBox (for a reference bean container).                
                <param>
                    cls         the class-loader from which we should create
                      the bean.  If this is null, then the system
                      class-loader is used.                    
                </param>
                <param>
                    beanName    the name of the bean within the class-loader.
                      For example "sun.beanbox.foobah"                    
                </param>
                <param>
                    beanContext The BeanContext in which to nest the new bean                    
                </param>
                <param>
                    initializer The AppletInitializer for the new bean                    
                </param>
                <exception>
                    ClassNotFoundException if the class of a serialized
                      object could not be found.                    
                </exception>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="159">
                <params>
                    <param name="cls" type="ClassLoader"/>
                    <param name="beanName" type="String"/>
                    <param name="beanContext" type="BeanContext"/>
                    <param name="initializer" type="AppletInitializer"/>
                </params>
                <comment line="167">
                    If the given classloader is null, we check if an                    
                </comment>
                <comment line="168">
                    system classloader is available and (if so)                    
                </comment>
                <comment line="169">
                    use that instead.                    
                </comment>
                <comment line="170">
                    Note that calls on the system class loader will                    
                </comment>
                <comment line="171">
                    look in the bootstrap class loader first.                    
                </comment>
                <comment line="176">
                    We&apos;re not allowed to access the system class loader.                    
                </comment>
                <comment line="177">
                    Drop through.                    
                </comment>
                <comment line="181">
                    Try to find a serialized object with this name                    
                </comment>
                <comment line="205">
                    Drop through and try opening the class.  But remember                    
                </comment>
                <comment line="206">
                    the exception in case we can&apos;t find the class either.                    
                </comment>
                <comment line="215">
                    No serialized object, try just instantiating the class                    
                </comment>
                <comment line="221">
                    There is no appropriate class.  If we earlier tried to                    
                </comment>
                <comment line="222">
                    deserialize an object and got an IO exception, throw that,                    
                </comment>
                <comment line="223">
                    otherwise rethrow the ClassNotFoundException.                    
                </comment>
                <comment line="230">
                    Try to instantiate the class.                    
                </comment>
                <comment line="237">
                    We have to remap the exception to one in our signature.                    
                </comment>
                <comment line="238">
                    But we pass extra information in the detail message.                    
                </comment>
                <comment line="245">
                    Ok, if the result is an applet initialize it.                    
                </comment>
                <comment line="255">
                    Figure our the codebase and docbase URLs.  We do this                    
                </comment>
                <comment line="256">
                    by locating the URL for a known resource, and then                    
                </comment>
                <comment line="257">
                    massaging the URL.                    
                </comment>
                <comment line="259">
                    First find the &quot;resource name&quot; corresponding to the bean                    
                </comment>
                <comment line="260">
                    itself.  So a serialzied bean &quot;a.b.c&quot; would imply a                    
                </comment>
                <comment line="261">
                    resource name of &quot;a/b/c.ser&quot; and a classname of &quot;x.y&quot;                    
                </comment>
                <comment line="262">
                    would imply a resource name of &quot;x/y.class&quot;.                    
                </comment>
                <comment line="267">
                    Serialized bean                    
                </comment>
                <comment line="270">
                    Regular class                    
                </comment>
                <comment line="278">
                    Now get the URL correponding to the resource name.                    
                </comment>
                <comment line="293">
                    If we found a URL, we try to locate the docbase by taking                    
                </comment>
                <comment line="294">
                    of the final path name component, and the code base by taking                    
                </comment>
                <comment line="295">
                    of the complete resourceName.                    
                </comment>
                <comment line="296">
                    So if we had a resourceName of &quot;a/b/c.class&quot; and we got an                    
                </comment>
                <comment line="297">
                    objectURL of &quot;file://bert/classes/a/b/c.class&quot; then we would                    
                </comment>
                <comment line="298">
                    want to set the codebase to &quot;file://bert/classes/&quot; and the                    
                </comment>
                <comment line="299">
                    docbase to &quot;file://bert/classes/a/b/&quot;                    
                </comment>
                <comment line="317">
                    Setup a default context and stub.                    
                </comment>
                <comment line="326">
                    now, if there is a BeanContext, add the bean, if applicable.                    
                </comment>
                <comment line="332">
                    If it was deserialized then it was already init-ed.                    
                </comment>
                <comment line="333">
                    Otherwise we need to initialize it.                    
                </comment>
                <comment line="336">
                    We need to set a reasonable initial size, as many                    
                </comment>
                <comment line="337">
                    applets are unhappy if they are started without                    
                </comment>
                <comment line="338">
                    having been explicitly sized.                    
                </comment>
                <declaration name="ins" type="InputStream" line="161"/>
                <declaration name="oins" type="ObjectInputStream" line="162"/>
                <declaration name="result" type="Object" line="163"/>
                <declaration name="serialized" type="boolean" line="164"/>
                <declaration name="serex" type="IOException" line="165"/>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="175"/>
                </scope>
                <declaration name="serName" type="String" line="182"/>
                <declaration name="loader" type="ClassLoader" line="183"/>
                <anonymous_class line="185">
                    <method name="run" type="Object" line="186"/>
                </anonymous_class>
                <scope line="193">
                    <scope line="194">
                        <scope line="195"/>
                        <scope line="197"/>
                    </scope>
                    <scope line="203"/>
                    <scope line="208"/>
                </scope>
                <scope line="214">
                    <declaration name="cl" type="Class" line="216"/>
                    <scope line="218"/>
                    <scope line="220">
                        <scope line="224"/>
                    </scope>
                    <scope line="234"/>
                    <scope line="236"/>
                </scope>
                <scope line="243">
                    <declaration name="stub" type="AppletStub" line="247"/>
                    <scope line="249">
                        <declaration name="applet" type="Applet" line="250"/>
                        <declaration name="needDummies" type="boolean" line="251"/>
                        <scope line="253">
                            <declaration name="resourceName" type="String" line="264"/>
                            <scope line="266"/>
                            <scope line="269"/>
                            <declaration name="objectUrl" type="URL" line="274"/>
                            <declaration name="codeBase" type="URL" line="275"/>
                            <declaration name="docBase" type="URL" line="276"/>
                            <declaration name="cloader" type="ClassLoader" line="280"/>
                            <anonymous_class line="283">
                                <method name="run" type="Object" line="284"/>
                            </anonymous_class>
                            <scope line="301">
                                <declaration name="s" type="String" line="302"/>
                                <scope line="304">
                                    <declaration name="ix" type="int" line="305"/>
                                    <scope line="311"/>
                                </scope>
                            </scope>
                            <declaration name="context" type="BeansAppletContext" line="318"/>
                        </scope>
                        <scope line="322"/>
                        <scope line="328"/>
                        <scope line="335"/>
                        <scope line="343"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="354">
                From a given bean, obtain an object representing a specified
                  type view of that source object.
                  &lt;p&gt;
                  The result may be the same object or a different object.  If
                  the requested target view isn&apos;t available then the given
                  bean is returned.
                  &lt;p&gt;
                  This method is provided in Beans 1.0 as a hook to allow the
                  addition of more flexible bean behaviour in the future.                
                <param>
                    bean        Object from which we want to obtain a view.                    
                </param>
                <param>
                    targetType  The type of view we'd like to get.                    
                </param>
            </javadoc>
            <method name="getInstanceOf" type="Object" line="369">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="targetType" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="373">
                Check if a bean can be viewed as a given target type.
                  The result will be true if the Beans.getInstanceof method
                  can be used on the given bean to obtain an object that
                  represents the specified targetType type view.                
                <param>
                    bean  Bean from which we want to obtain a view.                    
                </param>
                <param>
                    targetType  The type of view we'd like to get.                    
                </param>
                <return>
                    "true" if the given bean supports the given targetType.                    
                </return>
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="384">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="targetType" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="389">
                Test if we are in design-mode.                
                <return>
                    True if we are running in an application construction
                      environment.                    
                </return>
                <see>
                    DesignMode                    
                </see>
            </javadoc>
            <method name="isDesignTime" type="boolean" line="397">
                <declaration name="value" type="Object" line="398"/>
            </method>
            <javadoc line="402">
                Determines whether beans can assume a GUI is available.                
                <return>
                    True if we are running in an environment where beans
                      can assume that an interactive GUI is available, so they
                      can pop up dialog boxes, etc.  This will normally return
                      true in a windowing environment, and will normally return
                      false in a server environment or if an application is
                      running as part of a batch job.                    
                </return>
                <see>
                    Visibility                    
                </see>
            </javadoc>
            <method name="isGuiAvailable" type="boolean" line="415">
                <declaration name="value" type="Object" line="416"/>
            </method>
            <javadoc line="420">
                Used to indicate whether of not we are running in an application
                  builder environment.
                  &lt;p&gt;Note that this method is security checked
                  and is not available to (for example) untrusted applets.
                  More specifically, if there is a security manager,
                  its &lt;code&gt;checkPropertiesAccess&lt;/code&gt;
                  method is called. This could result in a SecurityException.                
                <param>
                    isDesignTime  True if we're in an application builder tool.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow setting
                      of system properties.                    
                </exception>
                <see>
                    SecurityManager#checkPropertiesAccess                    
                </see>
            </javadoc>
            <method name="setDesignTime" type="void" line="438">
                <params>
                    <param name="isDesignTime" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="439"/>
                <scope line="440"/>
            </method>
            <javadoc line="446">
                Used to indicate whether of not we are running in an environment
                  where GUI interaction is available.
                  &lt;p&gt;Note that this method is security checked
                  and is not available to (for example) untrusted applets.
                  More specifically, if there is a security manager,
                  its &lt;code&gt;checkPropertiesAccess&lt;/code&gt;
                  method is called. This could result in a SecurityException.                
                <param>
                    isGuiAvailable  True if GUI interaction is available.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow setting
                      of system properties.                    
                </exception>
                <see>
                    SecurityManager#checkPropertiesAccess                    
                </see>
            </javadoc>
            <method name="setGuiAvailable" type="void" line="464">
                <params>
                    <param name="isGuiAvailable" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="465"/>
                <scope line="466"/>
            </method>
        </class>
        <class name="ObjectInputStreamWithLoader" line="473">
            <extends class="ObjectInputStream"/>
            <javadoc line="473">
                This subclass of ObjectInputStream delegates loading of classes to
                  an existing ClassLoader.                
            </javadoc>
            <declaration name="loader" type="ClassLoader" line="480"/>
            <javadoc line="482">
                Loader must be non-null;                
            </javadoc>
            <method name="ObjectInputStreamWithLoader" type="constructor" line="487">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <scope line="490"/>
            </method>
            <javadoc line="496">
                Use the given ClassLoader rather than using the system class                
            </javadoc>
            <method name="resolveClass" type="Class" line="500">
                <params>
                    <param name="classDesc" type="ObjectStreamClass"/>
                </params>
                <declaration name="cname" type="String" line="502"/>
            </method>
        </class>
        <class name="BeansAppletContext" line="507">
            <implements interface="AppletContext"/>
            <javadoc line="507">
                Package private support class.  This provides a default AppletContext
                  for beans which are applets.                
            </javadoc>
            <declaration name="target" type="Applet" line="513"/>
            <declaration name="imageCache" type="Hashtable" line="514"/>
            <method name="BeansAppletContext" type="constructor" line="516">
                <params>
                    <param name="target" type="Applet"/>
                </params>
            </method>
            <method name="getAudioClip" type="AudioClip" line="520">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="521">
                    We don&apos;t currently support audio clips in the Beans.instantiate                    
                </comment>
                <comment line="522">
                    applet context, unless by some luck there exists a URL content                    
                </comment>
                <comment line="523">
                    class that can generate an AudioClip from the audio URL.                    
                </comment>
                <scope line="524"/>
                <scope line="526"/>
            </method>
            <method name="getImage" type="Image" line="531">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="545">
                    Otherwise it must be an ImageProducer.                    
                </comment>
                <declaration name="o" type="Object" line="532"/>
                <scope line="533"/>
                <scope line="536">
                    <scope line="538"/>
                    <scope line="541"/>
                    <declaration name="img" type="Image" line="546"/>
                </scope>
                <scope line="550"/>
            </method>
            <method name="getApplet" type="Applet" line="555">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getApplets" type="Enumeration" line="559">
                <declaration name="applets" type="Vector" line="560"/>
            </method>
            <method name="showDocument" type="void" line="565">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="566">
                    We do nothing.                    
                </comment>
            </method>
            <method name="showDocument" type="void" line="569">
                <params>
                    <param name="url" type="URL"/>
                    <param name="target" type="String"/>
                </params>
                <comment line="570">
                    We do nothing.                    
                </comment>
            </method>
            <method name="showStatus" type="void" line="573">
                <params>
                    <param name="status" type="String"/>
                </params>
                <comment line="574">
                    We do nothing.                    
                </comment>
            </method>
            <method name="setStream" type="void" line="577">
                <params>
                    <param name="key" type="String"/>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="578">
                    We do nothing.                    
                </comment>
            </method>
            <method name="getStream" type="InputStream" line="581">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="582">
                    We do nothing.                    
                </comment>
            </method>
            <method name="getStreamKeys" type="Iterator" line="586">
                <comment line="587">
                    We do nothing.                    
                </comment>
            </method>
        </class>
        <class name="BeansAppletStub" line="592">
            <implements interface="AppletStub"/>
            <javadoc line="592">
                Package private support class.  This provides an AppletStub
                  for beans which are applets.                
            </javadoc>
            <declaration name="active" type="boolean" line="597"/>
            <declaration name="target" type="Applet" line="598"/>
            <declaration name="context" type="AppletContext" line="599"/>
            <declaration name="codeBase" type="URL" line="600"/>
            <declaration name="docBase" type="URL" line="601"/>
            <method name="BeansAppletStub" type="constructor" line="605">
                <params>
                    <param name="target" type="Applet"/>
                    <param name="context" type="AppletContext"/>
                    <param name="codeBase" type="URL"/>
                    <param name="docBase" type="URL"/>
                </params>
            </method>
            <method name="isActive" type="boolean" line="612"/>
            <method name="getDocumentBase" type="URL" line="616">
                <comment line="617">
                    use the root directory of the applet&apos;s class-loader                    
                </comment>
            </method>
            <method name="getCodeBase" type="URL" line="621">
                <comment line="622">
                    use the directory where we found the class or serialized object.                    
                </comment>
            </method>
            <method name="getParameter" type="String" line="626">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getAppletContext" type="AppletContext" line="630"/>
            <method name="appletResize" type="void" line="634">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="635">
                    we do nothing.                    
                </comment>
            </method>
        </class>
    </source>