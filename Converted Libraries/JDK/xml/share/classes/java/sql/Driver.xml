<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.logging.Logger"/>
        <interface name="Driver">
            <comment line="157">
                ------------------------- JDBC 4.1 -----------------------------------                
            </comment>
            <javadoc line="30">
                The interface that every driver class must implement.
                  &lt;P&gt;The Java SQL framework allows for multiple database drivers.
                  &lt;P&gt;Each driver should supply a class that implements
                  the Driver interface.
                  &lt;P&gt;The DriverManager will try to load as many drivers as it can
                  find and then for any given connection request, it will ask each
                  driver in turn to try to connect to the target URL.
                  &lt;P&gt;It is strongly recommended that each Driver class should be
                  small and standalone so that the Driver class can be loaded and
                  queried without bringing in vast quantities of supporting code.
                  &lt;P&gt;When a Driver class is loaded, it should create an instance of
                  itself and register it with the DriverManager. This means that a
                  user can load and register a driver by calling
                  &lt;pre&gt;
                  &lt;code&gt;Class.forName(&quot;foo.bah.Driver&quot;)&lt;/code&gt;
                  &lt;/pre&gt;                
                <see>
                    DriverManager                    
                </see>
                <see>
                    Connection                    
                </see>
            </javadoc>
            <method name="connect" type="Connection" line="57"/>
            <javadoc line="57">
                Attempts to make a database connection to the given URL.
                  The driver should return &quot;null&quot; if it realizes it is the wrong kind
                  of driver to connect to the given URL.  This will be common, as when
                  the JDBC driver manager is asked to connect to a given URL it passes
                  the URL to each loaded driver in turn.
                  &lt;P&gt;The driver should throw an &lt;code&gt;SQLException&lt;/code&gt; if it is the right
                  driver to connect to the given URL but has trouble connecting to
                  the database.
                  &lt;P&gt;The &lt;code&gt;java.util.Properties&lt;/code&gt; argument can be used to pass
                  arbitrary string tag/value pairs as connection arguments.
                  Normally at least &quot;user&quot; and &quot;password&quot; properties should be
                  included in the &lt;code&gt;Properties&lt;/code&gt; object.                
                <param>
                    url the URL of the database to which to connect                    
                </param>
                <param>
                    info a list of arbitrary string tag/value pairs as
                      connection arguments. Normally at least a "user" and
                      "password" property should be included.                    
                </param>
                <return>
                    a <code>Connection</code> object that represents a
                      connection to the URL                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="acceptsURL" type="boolean" line="84"/>
            <javadoc line="84">
                Retrieves whether the driver thinks that it can open a connection
                  to the given URL.  Typically drivers will return &lt;code&gt;true&lt;/code&gt; if they
                  understand the subprotocol specified in the URL and &lt;code&gt;false&lt;/code&gt; if
                  they do not.                
                <param>
                    url the URL of the database                    
                </param>
                <return>
                    <code>true</code> if this driver understands the given URL;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getPropertyInfo" type="DriverPropertyInfo[]" line="98"/>
            <javadoc line="98">
                Gets information about the possible properties for this driver.
                  &lt;P&gt;
                  The &lt;code&gt;getPropertyInfo&lt;/code&gt; method is intended to allow a generic
                  GUI tool to discover what properties it should prompt
                  a human for in order to get
                  enough information to connect to a database.  Note that depending on
                  the values the human has supplied so far, additional values may become
                  necessary, so it may be necessary to iterate though several calls
                  to the &lt;code&gt;getPropertyInfo&lt;/code&gt; method.                
                <param>
                    url the URL of the database to which to connect                    
                </param>
                <param>
                    info a proposed list of tag/value pairs that will be sent on
                      connect open                    
                </param>
                <return>
                    an array of <code>DriverPropertyInfo</code> objects describing
                      possible properties.  This array may be an empty array if
                      no properties are required.                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMajorVersion" type="int" line="121"/>
            <javadoc line="121">
                Retrieves the driver&apos;s major version number. Initially this should be 1.                
                <return>
                    this driver's major version number                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="128"/>
            <javadoc line="128">
                Gets the driver&apos;s minor version number. Initially this should be 0.                
                <return>
                    this driver's minor version number                    
                </return>
            </javadoc>
            <method name="jdbcCompliant" type="boolean" line="135"/>
            <javadoc line="135">
                Reports whether this driver is a genuine JDBC
                  Compliant&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; driver.
                  A driver may only report &lt;code&gt;true&lt;/code&gt; here if it passes the JDBC
                  compliance tests; otherwise it is required to return &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;
                  JDBC compliance requires full support for the JDBC API and full support
                  for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will
                  be available for all the major commercial databases.
                  &lt;P&gt;
                  This method is not intended to encourage the development of non-JDBC
                  compliant drivers, but is a recognition of the fact that some vendors
                  are interested in using the JDBC API and framework for lightweight
                  databases that do not support full database functionality, or for
                  special databases such as document information retrieval where a SQL
                  implementation may not be feasible.                
                <return>
                    <code>true</code> if this driver is JDBC Compliant; <code>false</code>
                      otherwise                    
                </return>
            </javadoc>
            <method name="getParentLogger" type="Logger" line="158"/>
            <javadoc line="158">
                Return the parent Logger of all the Loggers used by this driver. This
                  should be the Logger farthest from the root Logger that is
                  still an ancestor of all of the Loggers used by this driver. Configuring
                  this Logger will affect all of the log messages generated by the driver.
                  In the worst case, this may be the root Logger.                
                <return>
                    the parent Logger for this driver                    
                </return>
                <throws>
                    SQLFeatureNotSupportedException if the driver does not use <code>java.util.logging<code>.                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>