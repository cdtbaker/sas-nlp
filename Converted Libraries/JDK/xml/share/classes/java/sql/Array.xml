<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <interface name="Array">
            <javadoc line="2">
                The mapping in the Java programming language for the SQL type
                  &lt;code&gt;ARRAY&lt;/code&gt;.
                  By default, an &lt;code&gt;Array&lt;/code&gt; value is a transaction-duration
                  reference to an SQL &lt;code&gt;ARRAY&lt;/code&gt; value.  By default, an &lt;code&gt;Array&lt;/code&gt;
                  object is implemented using an SQL LOCATOR(array) internally, which
                  means that an &lt;code&gt;Array&lt;/code&gt; object contains a logical pointer
                  to the data in the SQL &lt;code&gt;ARRAY&lt;/code&gt; value rather
                  than containing the &lt;code&gt;ARRAY&lt;/code&gt; value&apos;s data.
                  &lt;p&gt;
                  The &lt;code&gt;Array&lt;/code&gt; interface provides methods for bringing an SQL
                  &lt;code&gt;ARRAY&lt;/code&gt; value&apos;s data to the client as either an array or a
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  If the elements of the SQL &lt;code&gt;ARRAY&lt;/code&gt;
                  are a UDT, they may be custom mapped.  To create a custom mapping,
                  a programmer must do two things:
                  &lt;ul&gt;
                  &lt;li&gt;create a class that implements the {@link SQLData}interface for the UDT to be custom mapped.
                  &lt;li&gt;make an entry in a type map that contains
                  &lt;ul&gt;
                  &lt;li&gt;the fully-qualified SQL type name of the UDT
                  &lt;li&gt;the &lt;code&gt;Class&lt;/code&gt; object for the class implementing
                  &lt;code&gt;SQLData&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  When a type map with an entry for
                  the base type is supplied to the methods &lt;code&gt;getArray&lt;/code&gt;
                  and &lt;code&gt;getResultSet&lt;/code&gt;, the mapping
                  it contains will be used to map the elements of the &lt;code&gt;ARRAY&lt;/code&gt; value.
                  If no type map is supplied, which would typically be the case,
                  the connection&apos;s type map is used by default.
                  If the connection&apos;s type map or a type map supplied to a method has no entry
                  for the base type, the elements are mapped according to the standard mapping.
                  &lt;p&gt;
                  All methods on the &lt;code&gt;Array&lt;/code&gt; interface must be fully implemented if the
                  JDBC driver supports the data type.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBaseTypeName" type="String" line="42"/>
            <javadoc line="42">
                Retrieves the SQL type name of the elements in
                  the array designated by this &lt;code&gt;Array&lt;/code&gt; object.
                  If the elements are a built-in type, it returns
                  the database-specific type name of the elements.
                  If the elements are a user-defined type (UDT),
                  this method returns the fully-qualified SQL type name.                
                <return>
                    a <code>String</code> that is the database-specific
                      name for a built-in base type; or the fully-qualified SQL type
                      name for a base type that is a UDT                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting
                      to access the type name                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBaseType" type="int" line="59"/>
            <javadoc line="59">
                Retrieves the JDBC type of the elements in the array designated
                  by this &lt;code&gt;Array&lt;/code&gt; object.                
                <return>
                    a constant from the class {@link java.sql.Types} that is
                      the type code for the elements in the array designated by this
                      <code>Array</code> object                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting
                      to access the base type                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Object" line="72"/>
            <javadoc line="72">
                Retrieves the contents of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value designated
                  by this
                  &lt;code&gt;Array&lt;/code&gt; object in the form of an array in the Java
                  programming language. This version of the method &lt;code&gt;getArray&lt;/code&gt;
                  uses the type map associated with the connection for customizations of
                  the type mappings.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;getArray&lt;/code&gt; is used to materialize
                  a base type that maps to a primitive data type, then it is
                  implementation-defined whether the array returned is an array of
                  that primitive data type or an array of &lt;code&gt;Object&lt;/code&gt;.                
                <return>
                    an array in the Java programming language that contains
                      the ordered elements of the SQL <code>ARRAY</code> value
                      designated by this <code>Array</code> object                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Object" line="94"/>
            <javadoc line="94">
                Retrieves the contents of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value designated by this
                  &lt;code&gt;Array&lt;/code&gt; object.
                  This method uses
                  the specified &lt;code&gt;map&lt;/code&gt; for type map customizations
                  unless the base type of the array does not match a user-defined
                  type in &lt;code&gt;map&lt;/code&gt;, in which case it
                  uses the standard mapping. This version of the method
                  &lt;code&gt;getArray&lt;/code&gt; uses either the given type map or the standard mapping;
                  it never uses the type map associated with the connection.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;getArray&lt;/code&gt; is used to materialize
                  a base type that maps to a primitive data type, then it is
                  implementation-defined whether the array returned is an array of
                  that primitive data type or an array of &lt;code&gt;Object&lt;/code&gt;.                
                <param>
                    map a <code>java.util.Map</code> object that contains mappings
                      of SQL type names to classes in the Java programming language                    
                </param>
                <return>
                    an array in the Java programming language that contains the ordered
                      elements of the SQL array designated by this object                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Object" line="120"/>
            <javadoc line="120">
                Retrieves a slice of the SQL &lt;code&gt;ARRAY&lt;/code&gt;
                  value designated by this &lt;code&gt;Array&lt;/code&gt; object, beginning with the
                  specified &lt;code&gt;index&lt;/code&gt; and containing up to &lt;code&gt;count&lt;/code&gt;
                  successive elements of the SQL array.  This method uses the type map
                  associated with the connection for customizations of the type mappings.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;getArray&lt;/code&gt; is used to materialize
                  a base type that maps to a primitive data type, then it is
                  implementation-defined whether the array returned is an array of
                  that primitive data type or an array of &lt;code&gt;Object&lt;/code&gt;.                
                <param>
                    index the array index of the first element to retrieve;
                      the first element is at index 1                    
                </param>
                <param>
                    count the number of successive SQL array elements to retrieve                    
                </param>
                <return>
                    an array containing up to <code>count</code> consecutive elements
                      of the SQL array, beginning with element <code>index</code>                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Object" line="143"/>
            <javadoc line="143">
                Retreives a slice of the SQL &lt;code&gt;ARRAY&lt;/code&gt; value
                  designated by this &lt;code&gt;Array&lt;/code&gt; object, beginning with the specified
                  &lt;code&gt;index&lt;/code&gt; and containing up to &lt;code&gt;count&lt;/code&gt;
                  successive elements of the SQL array.
                  &lt;P&gt;
                  This method uses
                  the specified &lt;code&gt;map&lt;/code&gt; for type map customizations
                  unless the base type of the array does not match a user-defined
                  type in &lt;code&gt;map&lt;/code&gt;, in which case it
                  uses the standard mapping. This version of the method
                  &lt;code&gt;getArray&lt;/code&gt; uses either the given type map or the standard mapping;
                  it never uses the type map associated with the connection.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;getArray&lt;/code&gt; is used to materialize
                  a base type that maps to a primitive data type, then it is
                  implementation-defined whether the array returned is an array of
                  that primitive data type or an array of &lt;code&gt;Object&lt;/code&gt;.                
                <param>
                    index the array index of the first element to retrieve;
                      the first element is at index 1                    
                </param>
                <param>
                    count the number of successive SQL array elements to
                      retrieve                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object
                      that contains SQL type names and the classes in
                      the Java programming language to which they are mapped                    
                </param>
                <return>
                    an array containing up to <code>count</code>
                      consecutive elements of the SQL <code>ARRAY</code> value designated by this
                      <code>Array</code> object, beginning with element
                      <code>index</code>                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="179"/>
            <javadoc line="179">
                Retrieves a result set that contains the elements of the SQL
                  &lt;code&gt;ARRAY&lt;/code&gt; value
                  designated by this &lt;code&gt;Array&lt;/code&gt; object.  If appropriate,
                  the elements of the array are mapped using the connection&apos;s type
                  map; otherwise, the standard mapping is used.
                  &lt;p&gt;
                  The result set contains one row for each array element, with
                  two columns in each row.  The second column stores the element
                  value; the first column stores the index into the array for
                  that element (with the first array element being at index 1).
                  The rows are in ascending order corresponding to
                  the order of the indices.                
                <return>
                    a {@link ResultSet} object containing one row for each
                      of the elements in the array designated by this <code>Array</code>
                      object, with the rows in ascending order based on the indices.                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="202"/>
            <javadoc line="202">
                Retrieves a result set that contains the elements of the SQL
                  &lt;code&gt;ARRAY&lt;/code&gt; value designated by this &lt;code&gt;Array&lt;/code&gt; object.
                  This method uses
                  the specified &lt;code&gt;map&lt;/code&gt; for type map customizations
                  unless the base type of the array does not match a user-defined
                  type in &lt;code&gt;map&lt;/code&gt;, in which case it
                  uses the standard mapping. This version of the method
                  &lt;code&gt;getResultSet&lt;/code&gt; uses either the given type map or the standard mapping;
                  it never uses the type map associated with the connection.
                  &lt;p&gt;
                  The result set contains one row for each array element, with
                  two columns in each row.  The second column stores the element
                  value; the first column stores the index into the array for
                  that element (with the first array element being at index 1).
                  The rows are in ascending order corresponding to
                  the order of the indices.                
                <param>
                    map contains the mapping of SQL user-defined types to
                      classes in the Java programming language                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing one row for each
                      of the elements in the array designated by this <code>Array</code>
                      object, with the rows in ascending order based on the indices.                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="231"/>
            <javadoc line="231">
                Retrieves a result set holding the elements of the subarray that
                  starts at index &lt;code&gt;index&lt;/code&gt; and contains up to
                  &lt;code&gt;count&lt;/code&gt; successive elements.  This method uses
                  the connection&apos;s type map to map the elements of the array if
                  the map contains an entry for the base type. Otherwise, the
                  standard mapping is used.
                  &lt;P&gt;
                  The result set has one row for each element of the SQL array
                  designated by this object, with the first row containing the
                  element at index &lt;code&gt;index&lt;/code&gt;.  The result set has
                  up to &lt;code&gt;count&lt;/code&gt; rows in ascending order based on the
                  indices.  Each row has two columns:  The second column stores
                  the element value; the first column stores the index into the
                  array for that element.                
                <param>
                    index the array index of the first element to retrieve;
                      the first element is at index 1                    
                </param>
                <param>
                    count the number of successive SQL array elements to retrieve                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing up to
                      <code>count</code> consecutive elements of the SQL array
                      designated by this <code>Array</code> object, starting at
                      index <code>index</code>.                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="260"/>
            <javadoc line="260">
                Retrieves a result set holding the elements of the subarray that
                  starts at index &lt;code&gt;index&lt;/code&gt; and contains up to
                  &lt;code&gt;count&lt;/code&gt; successive elements.
                  This method uses
                  the specified &lt;code&gt;map&lt;/code&gt; for type map customizations
                  unless the base type of the array does not match a user-defined
                  type in &lt;code&gt;map&lt;/code&gt;, in which case it
                  uses the standard mapping. This version of the method
                  &lt;code&gt;getResultSet&lt;/code&gt; uses either the given type map or the standard mapping;
                  it never uses the type map associated with the connection.
                  &lt;P&gt;
                  The result set has one row for each element of the SQL array
                  designated by this object, with the first row containing the
                  element at index &lt;code&gt;index&lt;/code&gt;.  The result set has
                  up to &lt;code&gt;count&lt;/code&gt; rows in ascending order based on the
                  indices.  Each row has two columns:  The second column stores
                  the element value; the first column stroes the index into the
                  array for that element.                
                <param>
                    index the array index of the first element to retrieve;
                      the first element is at index 1                    
                </param>
                <param>
                    count the number of successive SQL array elements to retrieve                    
                </param>
                <param>
                    map the <code>Map</code> object that contains the mapping
                      of SQL type names to classes in the Java(tm) programming language                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing up to
                      <code>count</code> consecutive elements of the SQL array
                      designated by this <code>Array</code> object, starting at
                      index <code>index</code>.                    
                </return>
                <exception>
                    SQLException if an error occurs while attempting to
                      access the array                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="free" type="void" line="295"/>
            <javadoc line="295">
                This method frees the &lt;code&gt;Array&lt;/code&gt; object and releases the resources that
                  it holds. The object is invalid once the &lt;code&gt;free&lt;/code&gt;
                  method is called.
                  &lt;p&gt;
                  After &lt;code&gt;free&lt;/code&gt; has been called, any attempt to invoke a
                  method other than &lt;code&gt;free&lt;/code&gt; will result in a &lt;code&gt;SQLException&lt;/code&gt;
                  being thrown.  If &lt;code&gt;free&lt;/code&gt; is called multiple times, the subsequent
                  calls to &lt;code&gt;free&lt;/code&gt; are treated as a no-op.
                  &lt;p&gt;                
                <throws>
                    SQLException if an error occurs releasing
                      the Array's resources                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>