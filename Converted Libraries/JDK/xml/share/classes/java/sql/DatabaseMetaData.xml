<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <interface name="DatabaseMetaData">
            <implements interface="Wrapper"/>
            <comment line="75">
                ----------------------------------------------------------------------
                 First, a variety of minor information about the target database.                
            </comment>
            <comment line="385">
                --------------------------------------------------------------------
                 Functions describing which features are supported.                
            </comment>
            <comment line="903">
                ----------------------------------------------------------------------
                 The following group of methods exposes various limitations
                 based on the target database with the current driver.
                 Unless otherwise specified, a result of zero means there is no
                 limit, or the limit is not known.                
            </comment>
            <comment line="1137">
                ----------------------------------------------------------------------                
            </comment>
            <comment line="2597">
                --------------------------JDBC 2.0-----------------------------                
            </comment>
            <comment line="2832">
                ------------------- JDBC 3.0 -------------------------                
            </comment>
            <comment line="3200">
                ------------------------- JDBC 4.0 -----------------------------------                
            </comment>
            <comment line="3577">
                --------------------------JDBC 4.1 -----------------------------                
            </comment>
            <javadoc line="29">
                Comprehensive information about the database as a whole.
                  &lt;P&gt;
                  This interface is implemented by driver vendors to let users know the capabilities
                  of a Database Management System (DBMS) in combination with
                  the driver based on JDBC&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; technology
                  (&quot;JDBC driver&quot;) that is used with it.  Different relational DBMSs often support
                  different features, implement features in different ways, and use different
                  data types.  In addition, a driver may implement a feature on top of what the
                  DBMS offers.  Information returned by methods in this interface applies
                  to the capabilities of a particular driver and a particular DBMS working
                  together. Note that as used in this documentation, the term &quot;database&quot; is
                  used generically to refer to both the driver and DBMS.
                  &lt;P&gt;
                  A user for this interface is commonly a tool that needs to discover how to
                  deal with the underlying DBMS.  This is especially true for applications
                  that are intended to be used with more than one DBMS. For example, a tool might use the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt; to find out what data types can be used in a
                  &lt;code&gt;CREATE TABLE&lt;/code&gt; statement.  Or a user might call the method
                  &lt;code&gt;supportsCorrelatedSubqueries&lt;/code&gt; to see if it is possible to use
                  a correlated subquery or &lt;code&gt;supportsBatchUpdates&lt;/code&gt; to see if it is
                  possible to use batch updates.
                  &lt;P&gt;
                  Some &lt;code&gt;DatabaseMetaData&lt;/code&gt; methods return lists of information
                  in the form of &lt;code&gt;ResultSet&lt;/code&gt; objects.
                  Regular &lt;code&gt;ResultSet&lt;/code&gt; methods, such as
                  &lt;code&gt;getString&lt;/code&gt; and &lt;code&gt;getInt&lt;/code&gt;, can be used
                  to retrieve the data from these &lt;code&gt;ResultSet&lt;/code&gt; objects.  If
                  a given form of metadata is not available, an empty &lt;code&gt;ResultSet&lt;/code&gt;
                  will be returned. Additional columns beyond the columns defined to be
                  returned by the &lt;code&gt;ResultSet&lt;/code&gt; object for a given method
                  can be defined by the JDBC driver vendor and must be accessed
                  by their &lt;B&gt;column label&lt;/B&gt;.
                  &lt;P&gt;
                  Some &lt;code&gt;DatabaseMetaData&lt;/code&gt; methods take arguments that are
                  String patterns.  These arguments all have names such as fooPattern.
                  Within a pattern String, &quot;%&quot; means match any substring of 0 or more
                  characters, and &quot;_&quot; means match any one character. Only metadata
                  entries matching the search pattern are returned. If a search pattern
                  argument is set to &lt;code&gt;null&lt;/code&gt;, that argument&apos;s criterion will
                  be dropped from the search.
                  &lt;P&gt;                
            </javadoc>
            <method name="allProceduresAreCallable" type="boolean" line="77"/>
            <javadoc line="77">
                Retrieves whether the current user can call all the procedures
                  returned by the method &lt;code&gt;getProcedures&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="allTablesAreSelectable" type="boolean" line="86"/>
            <javadoc line="86">
                Retrieves whether the current user can use all the tables returned
                  by the method &lt;code&gt;getTables&lt;/code&gt; in a &lt;code&gt;SELECT&lt;/code&gt;
                  statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getURL" type="String" line="96"/>
            <javadoc line="96">
                Retrieves the URL for this DBMS.                
                <return>
                    the URL for this DBMS or <code>null</code> if it cannot be
                      generated                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getUserName" type="String" line="105"/>
            <javadoc line="105">
                Retrieves the user name as known to this database.                
                <return>
                    the database user name                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="113"/>
            <javadoc line="113">
                Retrieves whether this database is in read-only mode.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="nullsAreSortedHigh" type="boolean" line="121"/>
            <javadoc line="121">
                Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted high.
                  Sorted high means that &lt;code&gt;NULL&lt;/code&gt; values
                  sort higher than any other value in a domain.  In an ascending order,
                  if this method returns &lt;code&gt;true&lt;/code&gt;,  &lt;code&gt;NULL&lt;/code&gt; values
                  will appear at the end. By contrast, the method
                  &lt;code&gt;nullsAreSortedAtEnd&lt;/code&gt; indicates whether &lt;code&gt;NULL&lt;/code&gt; values
                  are sorted at the end regardless of sort order.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="nullsAreSortedLow" type="boolean" line="135"/>
            <javadoc line="135">
                Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted low.
                  Sorted low means that &lt;code&gt;NULL&lt;/code&gt; values
                  sort lower than any other value in a domain.  In an ascending order,
                  if this method returns &lt;code&gt;true&lt;/code&gt;,  &lt;code&gt;NULL&lt;/code&gt; values
                  will appear at the beginning. By contrast, the method
                  &lt;code&gt;nullsAreSortedAtStart&lt;/code&gt; indicates whether &lt;code&gt;NULL&lt;/code&gt; values
                  are sorted at the beginning regardless of sort order.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="nullsAreSortedAtStart" type="boolean" line="149"/>
            <javadoc line="149">
                Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted at the start regardless
                  of sort order.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="nullsAreSortedAtEnd" type="boolean" line="158"/>
            <javadoc line="158">
                Retrieves whether &lt;code&gt;NULL&lt;/code&gt; values are sorted at the end regardless of
                  sort order.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDatabaseProductName" type="String" line="167"/>
            <javadoc line="167">
                Retrieves the name of this database product.                
                <return>
                    database product name                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDatabaseProductVersion" type="String" line="175"/>
            <javadoc line="175">
                Retrieves the version number of this database product.                
                <return>
                    database version number                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDriverName" type="String" line="183"/>
            <javadoc line="183">
                Retrieves the name of this JDBC driver.                
                <return>
                    JDBC driver name                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDriverVersion" type="String" line="191"/>
            <javadoc line="191">
                Retrieves the version number of this JDBC driver as a &lt;code&gt;String&lt;/code&gt;.                
                <return>
                    JDBC driver version                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDriverMajorVersion" type="int" line="199"/>
            <javadoc line="199">
                Retrieves this JDBC driver&apos;s major version number.                
                <return>
                    JDBC driver major version                    
                </return>
            </javadoc>
            <method name="getDriverMinorVersion" type="int" line="206"/>
            <javadoc line="206">
                Retrieves this JDBC driver&apos;s minor version number.                
                <return>
                    JDBC driver minor version number                    
                </return>
            </javadoc>
            <method name="usesLocalFiles" type="boolean" line="213"/>
            <javadoc line="213">
                Retrieves whether this database stores tables in a local file.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="usesLocalFilePerTable" type="boolean" line="221"/>
            <javadoc line="221">
                Retrieves whether this database uses a file for each table.                
                <return>
                    <code>true</code> if this database uses a local file for each table;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsMixedCaseIdentifiers" type="boolean" line="230"/>
            <javadoc line="230">
                Retrieves whether this database treats mixed case unquoted SQL identifiers as
                  case sensitive and as a result stores them in mixed case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesUpperCaseIdentifiers" type="boolean" line="239"/>
            <javadoc line="239">
                Retrieves whether this database treats mixed case unquoted SQL identifiers as
                  case insensitive and stores them in upper case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesLowerCaseIdentifiers" type="boolean" line="248"/>
            <javadoc line="248">
                Retrieves whether this database treats mixed case unquoted SQL identifiers as
                  case insensitive and stores them in lower case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesMixedCaseIdentifiers" type="boolean" line="257"/>
            <javadoc line="257">
                Retrieves whether this database treats mixed case unquoted SQL identifiers as
                  case insensitive and stores them in mixed case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsMixedCaseQuotedIdentifiers" type="boolean" line="266"/>
            <javadoc line="266">
                Retrieves whether this database treats mixed case quoted SQL identifiers as
                  case sensitive and as a result stores them in mixed case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesUpperCaseQuotedIdentifiers" type="boolean" line="275"/>
            <javadoc line="275">
                Retrieves whether this database treats mixed case quoted SQL identifiers as
                  case insensitive and stores them in upper case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesLowerCaseQuotedIdentifiers" type="boolean" line="284"/>
            <javadoc line="284">
                Retrieves whether this database treats mixed case quoted SQL identifiers as
                  case insensitive and stores them in lower case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="storesMixedCaseQuotedIdentifiers" type="boolean" line="293"/>
            <javadoc line="293">
                Retrieves whether this database treats mixed case quoted SQL identifiers as
                  case insensitive and stores them in mixed case.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getIdentifierQuoteString" type="String" line="302"/>
            <javadoc line="302">
                Retrieves the string used to quote SQL identifiers.
                  This method returns a space &quot; &quot; if identifier quoting is not supported.                
                <return>
                    the quoting string or a space if quoting is not supported                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getSQLKeywords" type="String" line="311"/>
            <javadoc line="311">
                Retrieves a comma-separated list of all of this database&apos;s SQL keywords
                  that are NOT also SQL:2003 keywords.                
                <return>
                    the list of this database's keywords that are not also
                      SQL:2003 keywords                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getNumericFunctions" type="String" line="321"/>
            <javadoc line="321">
                Retrieves a comma-separated list of math functions available with
                  this database.  These are the Open /Open CLI math function names used in
                  the JDBC function escape clause.                
                <return>
                    the list of math functions supported by this database                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getStringFunctions" type="String" line="331"/>
            <javadoc line="331">
                Retrieves a comma-separated list of string functions available with
                  this database.  These are the  Open Group CLI string function names used
                  in the JDBC function escape clause.                
                <return>
                    the list of string functions supported by this database                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getSystemFunctions" type="String" line="341"/>
            <javadoc line="341">
                Retrieves a comma-separated list of system functions available with
                  this database.  These are the  Open Group CLI system function names used
                  in the JDBC function escape clause.                
                <return>
                    a list of system functions supported by this database                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getTimeDateFunctions" type="String" line="351"/>
            <javadoc line="351">
                Retrieves a comma-separated list of the time and date functions available
                  with this database.                
                <return>
                    the list of time and date functions supported by this database                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getSearchStringEscape" type="String" line="360"/>
            <javadoc line="360">
                Retrieves the string that can be used to escape wildcard characters.
                  This is the string that can be used to escape &apos;_&apos; or &apos;%&apos; in
                  the catalog search parameters that are a pattern (and therefore use one
                  of the wildcard characters).
                  &lt;P&gt;The &apos;_&apos; character represents any single character;
                  the &apos;%&apos; character represents any sequence of zero or
                  more characters.                
                <return>
                    the string used to escape wildcard characters                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getExtraNameCharacters" type="String" line="375"/>
            <javadoc line="375">
                Retrieves all the &quot;extra&quot; characters that can be used in unquoted
                  identifier names (those beyond a-z, A-Z, 0-9 and _).                
                <return>
                    the string containing the extra characters                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsAlterTableWithAddColumn" type="boolean" line="387"/>
            <javadoc line="387">
                Retrieves whether this database supports &lt;code&gt;ALTER TABLE&lt;/code&gt;
                  with add column.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsAlterTableWithDropColumn" type="boolean" line="396"/>
            <javadoc line="396">
                Retrieves whether this database supports &lt;code&gt;ALTER TABLE&lt;/code&gt;
                  with drop column.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsColumnAliasing" type="boolean" line="405"/>
            <javadoc line="405">
                Retrieves whether this database supports column aliasing.
                  &lt;P&gt;If so, the SQL AS clause can be used to provide names for
                  computed columns or to provide alias names for columns as
                  required.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="nullPlusNonNullIsNull" type="boolean" line="417"/>
            <javadoc line="417">
                Retrieves whether this database supports concatenations between
                  &lt;code&gt;NULL&lt;/code&gt; and non-&lt;code&gt;NULL&lt;/code&gt; values being
                  &lt;code&gt;NULL&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsConvert" type="boolean" line="427"/>
            <javadoc line="427">
                Retrieves whether this database supports the JDBC scalar function
                  &lt;code&gt;CONVERT&lt;/code&gt; for the conversion of one JDBC type to another.
                  The JDBC types are the generic SQL data types defined
                  in &lt;code&gt;java.sql.Types&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsConvert" type="boolean" line="438"/>
            <javadoc line="438">
                Retrieves whether this database supports the JDBC scalar function
                  &lt;code&gt;CONVERT&lt;/code&gt; for conversions between the JDBC types &lt;i&gt;fromType&lt;/i&gt;
                  and &lt;i&gt;toType&lt;/i&gt;.  The JDBC types are the generic SQL data types defined
                  in &lt;code&gt;java.sql.Types&lt;/code&gt;.                
                <param>
                    fromType the type to convert from; one of the type codes from
                      the class <code>java.sql.Types</code>                    
                </param>
                <param>
                    toType the type to convert to; one of the type codes from
                      the class <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="supportsTableCorrelationNames" type="boolean" line="454"/>
            <javadoc line="454">
                Retrieves whether this database supports table correlation names.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsDifferentTableCorrelationNames" type="boolean" line="462"/>
            <javadoc line="462">
                Retrieves whether, when table correlation names are supported, they
                  are restricted to being different from the names of the tables.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsExpressionsInOrderBy" type="boolean" line="471"/>
            <javadoc line="471">
                Retrieves whether this database supports expressions in
                  &lt;code&gt;ORDER BY&lt;/code&gt; lists.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOrderByUnrelated" type="boolean" line="480"/>
            <javadoc line="480">
                Retrieves whether this database supports using a column that is
                  not in the &lt;code&gt;SELECT&lt;/code&gt; statement in an
                  &lt;code&gt;ORDER BY&lt;/code&gt; clause.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsGroupBy" type="boolean" line="490"/>
            <javadoc line="490">
                Retrieves whether this database supports some form of
                  &lt;code&gt;GROUP BY&lt;/code&gt; clause.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsGroupByUnrelated" type="boolean" line="499"/>
            <javadoc line="499">
                Retrieves whether this database supports using a column that is
                  not in the &lt;code&gt;SELECT&lt;/code&gt; statement in a
                  &lt;code&gt;GROUP BY&lt;/code&gt; clause.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsGroupByBeyondSelect" type="boolean" line="509"/>
            <javadoc line="509">
                Retrieves whether this database supports using columns not included in
                  the &lt;code&gt;SELECT&lt;/code&gt; statement in a &lt;code&gt;GROUP BY&lt;/code&gt; clause
                  provided that all of the columns in the &lt;code&gt;SELECT&lt;/code&gt; statement
                  are included in the &lt;code&gt;GROUP BY&lt;/code&gt; clause.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsLikeEscapeClause" type="boolean" line="520"/>
            <javadoc line="520">
                Retrieves whether this database supports specifying a
                  &lt;code&gt;LIKE&lt;/code&gt; escape clause.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsMultipleResultSets" type="boolean" line="529"/>
            <javadoc line="529">
                Retrieves whether this database supports getting multiple
                  &lt;code&gt;ResultSet&lt;/code&gt; objects from a single call to the
                  method &lt;code&gt;execute&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsMultipleTransactions" type="boolean" line="539"/>
            <javadoc line="539">
                Retrieves whether this database allows having multiple
                  transactions open at once (on different connections).                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsNonNullableColumns" type="boolean" line="548"/>
            <javadoc line="548">
                Retrieves whether columns in this database may be defined as non-nullable.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsMinimumSQLGrammar" type="boolean" line="556"/>
            <javadoc line="556">
                Retrieves whether this database supports the ODBC Minimum SQL grammar.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCoreSQLGrammar" type="boolean" line="564"/>
            <javadoc line="564">
                Retrieves whether this database supports the ODBC Core SQL grammar.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsExtendedSQLGrammar" type="boolean" line="572"/>
            <javadoc line="572">
                Retrieves whether this database supports the ODBC Extended SQL grammar.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsANSI92EntryLevelSQL" type="boolean" line="580"/>
            <javadoc line="580">
                Retrieves whether this database supports the ANSI92 entry level SQL
                  grammar.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsANSI92IntermediateSQL" type="boolean" line="589"/>
            <javadoc line="589">
                Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsANSI92FullSQL" type="boolean" line="597"/>
            <javadoc line="597">
                Retrieves whether this database supports the ANSI92 full SQL grammar supported.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsIntegrityEnhancementFacility" type="boolean" line="605"/>
            <javadoc line="605">
                Retrieves whether this database supports the SQL Integrity
                  Enhancement Facility.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOuterJoins" type="boolean" line="614"/>
            <javadoc line="614">
                Retrieves whether this database supports some form of outer join.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsFullOuterJoins" type="boolean" line="622"/>
            <javadoc line="622">
                Retrieves whether this database supports full nested outer joins.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsLimitedOuterJoins" type="boolean" line="630"/>
            <javadoc line="630">
                Retrieves whether this database provides limited support for outer
                  joins.  (This will be &lt;code&gt;true&lt;/code&gt; if the method
                  &lt;code&gt;supportsFullOuterJoins&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;).                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getSchemaTerm" type="String" line="640"/>
            <javadoc line="640">
                Retrieves the database vendor&apos;s preferred term for &quot;schema&quot;.                
                <return>
                    the vendor term for "schema"                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getProcedureTerm" type="String" line="648"/>
            <javadoc line="648">
                Retrieves the database vendor&apos;s preferred term for &quot;procedure&quot;.                
                <return>
                    the vendor term for "procedure"                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getCatalogTerm" type="String" line="656"/>
            <javadoc line="656">
                Retrieves the database vendor&apos;s preferred term for &quot;catalog&quot;.                
                <return>
                    the vendor term for "catalog"                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="isCatalogAtStart" type="boolean" line="664"/>
            <javadoc line="664">
                Retrieves whether a catalog appears at the start of a fully qualified
                  table name.  If not, the catalog appears at the end.                
                <return>
                    <code>true</code> if the catalog name appears at the beginning
                      of a fully qualified table name; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getCatalogSeparator" type="String" line="674"/>
            <javadoc line="674">
                Retrieves the &lt;code&gt;String&lt;/code&gt; that this database uses as the
                  separator between a catalog and table name.                
                <return>
                    the separator string                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSchemasInDataManipulation" type="boolean" line="683"/>
            <javadoc line="683">
                Retrieves whether a schema name can be used in a data manipulation statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSchemasInProcedureCalls" type="boolean" line="691"/>
            <javadoc line="691">
                Retrieves whether a schema name can be used in a procedure call statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSchemasInTableDefinitions" type="boolean" line="699"/>
            <javadoc line="699">
                Retrieves whether a schema name can be used in a table definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSchemasInIndexDefinitions" type="boolean" line="707"/>
            <javadoc line="707">
                Retrieves whether a schema name can be used in an index definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSchemasInPrivilegeDefinitions" type="boolean" line="715"/>
            <javadoc line="715">
                Retrieves whether a schema name can be used in a privilege definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCatalogsInDataManipulation" type="boolean" line="723"/>
            <javadoc line="723">
                Retrieves whether a catalog name can be used in a data manipulation statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCatalogsInProcedureCalls" type="boolean" line="731"/>
            <javadoc line="731">
                Retrieves whether a catalog name can be used in a procedure call statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCatalogsInTableDefinitions" type="boolean" line="739"/>
            <javadoc line="739">
                Retrieves whether a catalog name can be used in a table definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCatalogsInIndexDefinitions" type="boolean" line="747"/>
            <javadoc line="747">
                Retrieves whether a catalog name can be used in an index definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCatalogsInPrivilegeDefinitions" type="boolean" line="755"/>
            <javadoc line="755">
                Retrieves whether a catalog name can be used in a privilege definition statement.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsPositionedDelete" type="boolean" line="764"/>
            <javadoc line="764">
                Retrieves whether this database supports positioned &lt;code&gt;DELETE&lt;/code&gt;
                  statements.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsPositionedUpdate" type="boolean" line="773"/>
            <javadoc line="773">
                Retrieves whether this database supports positioned &lt;code&gt;UPDATE&lt;/code&gt;
                  statements.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSelectForUpdate" type="boolean" line="782"/>
            <javadoc line="782">
                Retrieves whether this database supports &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;
                  statements.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsStoredProcedures" type="boolean" line="791"/>
            <javadoc line="791">
                Retrieves whether this database supports stored procedure calls
                  that use the stored procedure escape syntax.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSubqueriesInComparisons" type="boolean" line="800"/>
            <javadoc line="800">
                Retrieves whether this database supports subqueries in comparison
                  expressions.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSubqueriesInExists" type="boolean" line="809"/>
            <javadoc line="809">
                Retrieves whether this database supports subqueries in
                  &lt;code&gt;EXISTS&lt;/code&gt; expressions.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSubqueriesInIns" type="boolean" line="818"/>
            <javadoc line="818">
                Retrieves whether this database supports subqueries in
                  &lt;code&gt;IN&lt;/code&gt; expressions.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsSubqueriesInQuantifieds" type="boolean" line="827"/>
            <javadoc line="827">
                Retrieves whether this database supports subqueries in quantified
                  expressions.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsCorrelatedSubqueries" type="boolean" line="836"/>
            <javadoc line="836">
                Retrieves whether this database supports correlated subqueries.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsUnion" type="boolean" line="844"/>
            <javadoc line="844">
                Retrieves whether this database supports SQL &lt;code&gt;UNION&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsUnionAll" type="boolean" line="852"/>
            <javadoc line="852">
                Retrieves whether this database supports SQL &lt;code&gt;UNION ALL&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOpenCursorsAcrossCommit" type="boolean" line="860"/>
            <javadoc line="860">
                Retrieves whether this database supports keeping cursors open
                  across commits.                
                <return>
                    <code>true</code> if cursors always remain open;
                      <code>false</code> if they might not remain open                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOpenCursorsAcrossRollback" type="boolean" line="870"/>
            <javadoc line="870">
                Retrieves whether this database supports keeping cursors open
                  across rollbacks.                
                <return>
                    <code>true</code> if cursors always remain open;
                      <code>false</code> if they might not remain open                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOpenStatementsAcrossCommit" type="boolean" line="880"/>
            <javadoc line="880">
                Retrieves whether this database supports keeping statements open
                  across commits.                
                <return>
                    <code>true</code> if statements always remain open;
                      <code>false</code> if they might not remain open                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsOpenStatementsAcrossRollback" type="boolean" line="890"/>
            <javadoc line="890">
                Retrieves whether this database supports keeping statements open
                  across rollbacks.                
                <return>
                    <code>true</code> if statements always remain open;
                      <code>false</code> if they might not remain open                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxBinaryLiteralLength" type="int" line="908"/>
            <javadoc line="908">
                Retrieves the maximum number of hex characters this database allows in an
                  inline binary literal.                
                <return>
                    max the maximum length (in hex characters) for a binary literal;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxCharLiteralLength" type="int" line="919"/>
            <javadoc line="919">
                Retrieves the maximum number of characters this database allows
                  for a character literal.                
                <return>
                    the maximum number of characters allowed for a character literal;
                      a result of zero means that there is no limit or the limit is
                      not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnNameLength" type="int" line="930"/>
            <javadoc line="930">
                Retrieves the maximum number of characters this database allows
                  for a column name.                
                <return>
                    the maximum number of characters allowed for a column name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnsInGroupBy" type="int" line="941"/>
            <javadoc line="941">
                Retrieves the maximum number of columns this database allows in a
                  &lt;code&gt;GROUP BY&lt;/code&gt; clause.                
                <return>
                    the maximum number of columns allowed;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnsInIndex" type="int" line="952"/>
            <javadoc line="952">
                Retrieves the maximum number of columns this database allows in an index.                
                <return>
                    the maximum number of columns allowed;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnsInOrderBy" type="int" line="962"/>
            <javadoc line="962">
                Retrieves the maximum number of columns this database allows in an
                  &lt;code&gt;ORDER BY&lt;/code&gt; clause.                
                <return>
                    the maximum number of columns allowed;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnsInSelect" type="int" line="973"/>
            <javadoc line="973">
                Retrieves the maximum number of columns this database allows in a
                  &lt;code&gt;SELECT&lt;/code&gt; list.                
                <return>
                    the maximum number of columns allowed;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxColumnsInTable" type="int" line="984"/>
            <javadoc line="984">
                Retrieves the maximum number of columns this database allows in a table.                
                <return>
                    the maximum number of columns allowed;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxConnections" type="int" line="994"/>
            <javadoc line="994">
                Retrieves the maximum number of concurrent connections to this
                  database that are possible.                
                <return>
                    the maximum number of active connections possible at one time;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxCursorNameLength" type="int" line="1005"/>
            <javadoc line="1005">
                Retrieves the maximum number of characters that this database allows in a
                  cursor name.                
                <return>
                    the maximum number of characters allowed in a cursor name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxIndexLength" type="int" line="1016"/>
            <javadoc line="1016">
                Retrieves the maximum number of bytes this database allows for an
                  index, including all of the parts of the index.                
                <return>
                    the maximum number of bytes allowed; this limit includes the
                      composite of all the constituent parts of the index;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxSchemaNameLength" type="int" line="1028"/>
            <javadoc line="1028">
                Retrieves the maximum number of characters that this database allows in a
                  schema name.                
                <return>
                    the maximum number of characters allowed in a schema name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxProcedureNameLength" type="int" line="1039"/>
            <javadoc line="1039">
                Retrieves the maximum number of characters that this database allows in a
                  procedure name.                
                <return>
                    the maximum number of characters allowed in a procedure name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxCatalogNameLength" type="int" line="1050"/>
            <javadoc line="1050">
                Retrieves the maximum number of characters that this database allows in a
                  catalog name.                
                <return>
                    the maximum number of characters allowed in a catalog name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxRowSize" type="int" line="1061"/>
            <javadoc line="1061">
                Retrieves the maximum number of bytes this database allows in
                  a single row.                
                <return>
                    the maximum number of bytes allowed for a row; a result of
                      zero means that there is no limit or the limit is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="doesMaxRowSizeIncludeBlobs" type="boolean" line="1071"/>
            <javadoc line="1071">
                Retrieves whether the return value for the method
                  &lt;code&gt;getMaxRowSize&lt;/code&gt; includes the SQL data types
                  &lt;code&gt;LONGVARCHAR&lt;/code&gt; and &lt;code&gt;LONGVARBINARY&lt;/code&gt;.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxStatementLength" type="int" line="1081"/>
            <javadoc line="1081">
                Retrieves the maximum number of characters this database allows in
                  an SQL statement.                
                <return>
                    the maximum number of characters allowed for an SQL statement;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxStatements" type="int" line="1092"/>
            <javadoc line="1092">
                Retrieves the maximum number of active statements to this database
                  that can be open at the same time.                
                <return>
                    the maximum number of statements that can be open at one time;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxTableNameLength" type="int" line="1103"/>
            <javadoc line="1103">
                Retrieves the maximum number of characters this database allows in
                  a table name.                
                <return>
                    the maximum number of characters allowed for a table name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxTablesInSelect" type="int" line="1114"/>
            <javadoc line="1114">
                Retrieves the maximum number of tables this database allows in a
                  &lt;code&gt;SELECT&lt;/code&gt; statement.                
                <return>
                    the maximum number of tables allowed in a <code>SELECT</code>
                      statement; a result of zero means that there is no limit or
                      the limit is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMaxUserNameLength" type="int" line="1125"/>
            <javadoc line="1125">
                Retrieves the maximum number of characters this database allows in
                  a user name.                
                <return>
                    the maximum number of characters allowed for a user name;
                      a result of zero means that there is no limit or the limit
                      is not known                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDefaultTransactionIsolation" type="int" line="1138"/>
            <javadoc line="1138">
                Retrieves this database&apos;s default transaction isolation level.  The
                  possible values are defined in &lt;code&gt;java.sql.Connection&lt;/code&gt;.                
                <return>
                    the default isolation level                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Connection                    
                </see>
            </javadoc>
            <method name="supportsTransactions" type="boolean" line="1148"/>
            <javadoc line="1148">
                Retrieves whether this database supports transactions. If not, invoking the
                  method &lt;code&gt;commit&lt;/code&gt; is a noop, and the isolation level is
                  &lt;code&gt;TRANSACTION_NONE&lt;/code&gt;.                
                <return>
                    <code>true</code> if transactions are supported;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsTransactionIsolationLevel" type="boolean" line="1159"/>
            <javadoc line="1159">
                Retrieves whether this database supports the given transaction isolation level.                
                <param>
                    level one of the transaction isolation levels defined in
                      <code>java.sql.Connection</code>                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Connection                    
                </see>
            </javadoc>
            <method name="supportsDataDefinitionAndDataManipulationTransactions" type="boolean" line="1171"/>
            <javadoc line="1171">
                Retrieves whether this database supports both data definition and
                  data manipulation statements within a transaction.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="supportsDataManipulationTransactionsOnly" type="boolean" line="1180"/>
            <javadoc line="1180">
                Retrieves whether this database supports only data manipulation
                  statements within a transaction.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="dataDefinitionCausesTransactionCommit" type="boolean" line="1190"/>
            <javadoc line="1190">
                Retrieves whether a data definition statement within a transaction forces
                  the transaction to commit.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="dataDefinitionIgnoredInTransactions" type="boolean" line="1200"/>
            <javadoc line="1200">
                Retrieves whether this database ignores a data definition statement
                  within a transaction.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getProcedures" type="ResultSet" line="1210"/>
            <javadoc line="1210">
                Retrieves a description of the stored procedures available in the given
                  catalog.
                  &lt;P&gt;
                  Only procedure descriptions matching the schema and
                  procedure name criteria are returned.  They are ordered by
                  &lt;code&gt;PROCEDURE_CAT&lt;/code&gt;, &lt;code&gt;PROCEDURE_SCHEM&lt;/code&gt;,
                  &lt;code&gt;PROCEDURE_NAME&lt;/code&gt; and &lt;code&gt;SPECIFIC_ NAME&lt;/code&gt;.
                  &lt;P&gt;Each procedure description has the the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_CAT&lt;/B&gt; String =&gt; procedure catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_SCHEM&lt;/B&gt; String =&gt; procedure schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_NAME&lt;/B&gt; String =&gt; procedure name
                  &lt;LI&gt; reserved for future use
                  &lt;LI&gt; reserved for future use
                  &lt;LI&gt; reserved for future use
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the procedure
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_TYPE&lt;/B&gt; short =&gt; kind of procedure:
                  &lt;UL&gt;
                  &lt;LI&gt; procedureResultUnknown - Cannot determine if  a return value
                  will be returned
                  &lt;LI&gt; procedureNoResult - Does not return a return value
                  &lt;LI&gt; procedureReturnsResult - Returns a return value
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SPECIFIC_NAME&lt;/B&gt; String  =&gt; The name which uniquely identifies this
                  procedure within its schema.
                  &lt;/OL&gt;
                  &lt;p&gt;
                  A user may not have permissions to execute any of the procedures that are
                  returned by &lt;code&gt;getProcedures&lt;/code&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    procedureNamePattern a procedure name pattern; must match the
                      procedure name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a procedure description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <declaration name="procedureResultUnknown" type="int" line="1259"/>
            <javadoc line="1259">
                Indicates that it is not known whether the procedure returns
                  a result.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getProcedures&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureNoResult" type="int" line="1269"/>
            <javadoc line="1269">
                Indicates that the procedure does not return a result.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getProcedures&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureReturnsResult" type="int" line="1278"/>
            <javadoc line="1278">
                Indicates that the procedure returns a result.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;PROCEDURE_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getProcedures&lt;/code&gt;.                
            </javadoc>
            <method name="getProcedureColumns" type="ResultSet" line="1287"/>
            <javadoc line="1287">
                Retrieves a description of the given catalog&apos;s stored procedure parameter
                  and result columns.
                  &lt;P&gt;Only descriptions matching the schema, procedure and
                  parameter name criteria are returned.  They are ordered by
                  PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME and SPECIFIC_NAME. Within this, the return value,
                  if any, is first. Next are the parameter descriptions in call
                  order. The column descriptions follow in column number order.
                  &lt;P&gt;Each row in the &lt;code&gt;ResultSet&lt;/code&gt; is a parameter description or
                  column description with the following fields:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_CAT&lt;/B&gt; String =&gt; procedure catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_SCHEM&lt;/B&gt; String =&gt; procedure schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PROCEDURE_NAME&lt;/B&gt; String =&gt; procedure name
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column/parameter name
                  &lt;LI&gt;&lt;B&gt;COLUMN_TYPE&lt;/B&gt; Short =&gt; kind of column/parameter:
                  &lt;UL&gt;
                  &lt;LI&gt; procedureColumnUnknown - nobody knows
                  &lt;LI&gt; procedureColumnIn - IN parameter
                  &lt;LI&gt; procedureColumnInOut - INOUT parameter
                  &lt;LI&gt; procedureColumnOut - OUT parameter
                  &lt;LI&gt; procedureColumnReturn - procedure return value
                  &lt;LI&gt; procedureColumnResult - result column in &lt;code&gt;ResultSet&lt;/code&gt;
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; SQL type name, for a UDT type the
                  type name is fully qualified
                  &lt;LI&gt;&lt;B&gt;PRECISION&lt;/B&gt; int =&gt; precision
                  &lt;LI&gt;&lt;B&gt;LENGTH&lt;/B&gt; int =&gt; length in bytes of data
                  &lt;LI&gt;&lt;B&gt;SCALE&lt;/B&gt; short =&gt; scale -  null is returned for data types where
                  SCALE is not applicable.
                  &lt;LI&gt;&lt;B&gt;RADIX&lt;/B&gt; short =&gt; radix
                  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; short =&gt; can it contain NULL.
                  &lt;UL&gt;
                  &lt;LI&gt; procedureNoNulls - does not allow NULL values
                  &lt;LI&gt; procedureNullable - allows NULL values
                  &lt;LI&gt; procedureNullableUnknown - nullability unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing parameter/column
                  &lt;LI&gt;&lt;B&gt;COLUMN_DEF&lt;/B&gt; String =&gt; default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;UL&gt;
                  &lt;LI&gt; The string NULL (not enclosed in quotes) - if NULL was specified as the default value
                  &lt;LI&gt; TRUNCATE (not enclosed in quotes)        - if the specified default value cannot be represented without truncation
                  &lt;LI&gt; NULL                                     - if a default value was not specified
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int  =&gt; reserved for future use
                  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int  =&gt; reserved for future use
                  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int  =&gt; the maximum length of binary and character based columns.  For any other datatype the returned value is a
                  NULL
                  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int  =&gt; the ordinal position, starting from 1, for the input and output parameters for a procedure. A value of 0
                  is returned if this row describes the procedure&apos;s return value.  For result set columns, it is the
                  ordinal position of the column in the result set starting from 1.  If there are
                  multiple result sets, the column ordinal positions are implementation
                  defined.
                  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String  =&gt; ISO rules are used to determine the nullability for a column.
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the column can include NULLs
                  &lt;LI&gt; NO            --- if the column cannot include NULLs
                  &lt;LI&gt; empty string  --- if the nullability for the
                  column is unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SPECIFIC_NAME&lt;/B&gt; String  =&gt; the name which uniquely identifies this procedure within its schema.
                  &lt;/OL&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Some databases may not return the column
                  descriptions for a procedure.
                  &lt;p&gt;The PRECISION column represents the specified column size for the given column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    procedureNamePattern a procedure name pattern; must match the
                      procedure name as it is stored in the database                    
                </param>
                <param>
                    columnNamePattern a column name pattern; must match the column name
                      as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row describes a stored procedure parameter or
                      column                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <declaration name="procedureColumnUnknown" type="int" line="1384"/>
            <javadoc line="1384">
                Indicates that type of the column is unknown.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureColumnIn" type="int" line="1394"/>
            <javadoc line="1394">
                Indicates that the column stores IN parameters.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureColumnInOut" type="int" line="1404"/>
            <javadoc line="1404">
                Indicates that the column stores INOUT parameters.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureColumnOut" type="int" line="1414"/>
            <javadoc line="1414">
                Indicates that the column stores OUT parameters.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureColumnReturn" type="int" line="1423"/>
            <javadoc line="1423">
                Indicates that the column stores return values.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureColumnResult" type="int" line="1433"/>
            <javadoc line="1433">
                Indicates that the column stores results.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureNoNulls" type="int" line="1443"/>
            <javadoc line="1443">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values are not allowed.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureNullable" type="int" line="1453"/>
            <javadoc line="1453">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values are allowed.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="procedureNullableUnknown" type="int" line="1463"/>
            <javadoc line="1463">
                Indicates that whether &lt;code&gt;NULL&lt;/code&gt; values are allowed
                  is unknown.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getProcedureColumns&lt;/code&gt;.                
            </javadoc>
            <method name="getTables" type="ResultSet" line="1475"/>
            <javadoc line="1475">
                Retrieves a description of the tables available in the given catalog.
                  Only table descriptions matching the catalog, schema, table
                  name and type criteria are returned.  They are ordered by
                  &lt;code&gt;TABLE_TYPE&lt;/code&gt;, &lt;code&gt;TABLE_CAT&lt;/code&gt;,
                  &lt;code&gt;TABLE_SCHEM&lt;/code&gt; and &lt;code&gt;TABLE_NAME&lt;/code&gt;.
                  &lt;P&gt;
                  Each table description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;TABLE_TYPE&lt;/B&gt; String =&gt; table type.  Typical types are &quot;TABLE&quot;,
                  &quot;VIEW&quot;, &quot;SYSTEM TABLE&quot;, &quot;GLOBAL TEMPORARY&quot;,
                  &quot;LOCAL TEMPORARY&quot;, &quot;ALIAS&quot;, &quot;SYNONYM&quot;.
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the table
                  &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the types catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; the types schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;SELF_REFERENCING_COL_NAME&lt;/B&gt; String =&gt; name of the designated
                  &quot;identifier&quot; column of a typed table (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;REF_GENERATION&lt;/B&gt; String =&gt; specifies how values in
                  SELF_REFERENCING_COL_NAME are created. Values are
                  &quot;SYSTEM&quot;, &quot;USER&quot;, &quot;DERIVED&quot;. (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;/OL&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Some databases may not return information for
                  all tables.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    tableNamePattern a table name pattern; must match the
                      table name as it is stored in the database                    
                </param>
                <param>
                    types a list of table types, which must be from the list of table types
                      returned from {@link #getTableTypes},to include; <code>null</code> returns
                      all types                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a table description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <method name="getSchemas" type="ResultSet" line="1524"/>
            <javadoc line="1524">
                Retrieves the schema names available in this database.  The results
                  are ordered by &lt;code&gt;TABLE_CATALOG&lt;/code&gt; and
                  &lt;code&gt;TABLE_SCHEM&lt;/code&gt;.
                  &lt;P&gt;The schema columns are:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; schema name
                  &lt;LI&gt;&lt;B&gt;TABLE_CATALOG&lt;/B&gt; String =&gt; catalog name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;/OL&gt;                
                <return>
                    a <code>ResultSet</code> object in which each row is a
                      schema description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getCatalogs" type="ResultSet" line="1542"/>
            <javadoc line="1542">
                Retrieves the catalog names available in this database.  The results
                  are ordered by catalog name.
                  &lt;P&gt;The catalog column is:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; catalog name
                  &lt;/OL&gt;                
                <return>
                    a <code>ResultSet</code> object in which each row has a
                      single <code>String</code> column that is a catalog name                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getTableTypes" type="ResultSet" line="1557"/>
            <javadoc line="1557">
                Retrieves the table types available in this database.  The results
                  are ordered by table type.
                  &lt;P&gt;The table type is:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_TYPE&lt;/B&gt; String =&gt; table type.  Typical types are &quot;TABLE&quot;,
                  &quot;VIEW&quot;, &quot;SYSTEM TABLE&quot;, &quot;GLOBAL TEMPORARY&quot;,
                  &quot;LOCAL TEMPORARY&quot;, &quot;ALIAS&quot;, &quot;SYNONYM&quot;.
                  &lt;/OL&gt;                
                <return>
                    a <code>ResultSet</code> object in which each row has a
                      single <code>String</code> column that is a table type                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getColumns" type="ResultSet" line="1574"/>
            <javadoc line="1574">
                Retrieves a description of table columns available in
                  the specified catalog.
                  &lt;P&gt;Only column descriptions matching the catalog, schema, table
                  and column name criteria are returned.  They are ordered by
                  &lt;code&gt;TABLE_CAT&lt;/code&gt;,&lt;code&gt;TABLE_SCHEM&lt;/code&gt;,
                  &lt;code&gt;TABLE_NAME&lt;/code&gt;, and &lt;code&gt;ORDINAL_POSITION&lt;/code&gt;.
                  &lt;P&gt;Each column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name,
                  for a UDT the type name is fully qualified
                  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; column size.
                  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; is not used.
                  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; int =&gt; the number of fractional digits. Null is returned for data types where
                  DECIMAL_DIGITS is not applicable.
                  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; Radix (typically either 10 or 2)
                  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; int =&gt; is NULL allowed.
                  &lt;UL&gt;
                  &lt;LI&gt; columnNoNulls - might not allow &lt;code&gt;NULL&lt;/code&gt; values
                  &lt;LI&gt; columnNullable - definitely allows &lt;code&gt;NULL&lt;/code&gt; values
                  &lt;LI&gt; columnNullableUnknown - nullability unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;COLUMN_DEF&lt;/B&gt; String =&gt; default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int =&gt; for char types the
                  maximum number of bytes in the column
                  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int =&gt; index of column in table
                  (starting at 1)
                  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String  =&gt; ISO rules are used to determine the nullability for a column.
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the column can include NULLs
                  &lt;LI&gt; NO            --- if the column cannot include NULLs
                  &lt;LI&gt; empty string  --- if the nullability for the
                  column is unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SCOPE_CATALOG&lt;/B&gt; String =&gt; catalog of table that is the scope
                  of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SCOPE_SCHEMA&lt;/B&gt; String =&gt; schema of table that is the scope
                  of a reference attribute (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SCOPE_TABLE&lt;/B&gt; String =&gt; table name that this the scope
                  of a reference attribute (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SOURCE_DATA_TYPE&lt;/B&gt; short =&gt; source type of a distinct type or user-generated
                  Ref type, SQL type from java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE
                  isn&apos;t DISTINCT or user-generated REF)
                  &lt;LI&gt;&lt;B&gt;IS_AUTOINCREMENT&lt;/B&gt; String  =&gt; Indicates whether this column is auto incremented
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the column is auto incremented
                  &lt;LI&gt; NO            --- if the column is not auto incremented
                  &lt;LI&gt; empty string  --- if it cannot be determined whether the column is auto incremented
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;IS_GENERATEDCOLUMN&lt;/B&gt; String  =&gt; Indicates whether this is a generated column
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if this a generated column
                  &lt;LI&gt; NO            --- if this not a generated column
                  &lt;LI&gt; empty string  --- if it cannot be determined whether this is a generated column
                  &lt;/UL&gt;
                  &lt;/OL&gt;
                  &lt;p&gt;The COLUMN_SIZE column specifies the column size for the given column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    tableNamePattern a table name pattern; must match the
                      table name as it is stored in the database                    
                </param>
                <param>
                    columnNamePattern a column name pattern; must match the column
                      name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <declaration name="columnNoNulls" type="int" line="1668"/>
            <javadoc line="1668">
                Indicates that the column might not allow &lt;code&gt;NULL&lt;/code&gt; values.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method
                  &lt;code&gt;getColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="columnNullable" type="int" line="1678"/>
            <javadoc line="1678">
                Indicates that the column definitely allows &lt;code&gt;NULL&lt;/code&gt; values.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method
                  &lt;code&gt;getColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="columnNullableUnknown" type="int" line="1688"/>
            <javadoc line="1688">
                Indicates that the nullability of columns is unknown.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; returned by the method
                  &lt;code&gt;getColumns&lt;/code&gt;.                
            </javadoc>
            <method name="getColumnPrivileges" type="ResultSet" line="1698"/>
            <javadoc line="1698">
                Retrieves a description of the access rights for a table&apos;s columns.
                  &lt;P&gt;Only privileges matching the column name criteria are
                  returned.  They are ordered by COLUMN_NAME and PRIVILEGE.
                  &lt;P&gt;Each privilige description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;GRANTOR&lt;/B&gt; String =&gt; grantor of access (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;GRANTEE&lt;/B&gt; String =&gt; grantee of access
                  &lt;LI&gt;&lt;B&gt;PRIVILEGE&lt;/B&gt; String =&gt; name of access (SELECT,
                  INSERT, UPDATE, REFRENCES, ...)
                  &lt;LI&gt;&lt;B&gt;IS_GRANTABLE&lt;/B&gt; String =&gt; &quot;YES&quot; if grantee is permitted
                  to grant to others; &quot;NO&quot; if not; &lt;code&gt;null&lt;/code&gt; if unknown
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name as it is
                      stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is
                      stored in the database                    
                </param>
                <param>
                    columnNamePattern a column name pattern; must match the column
                      name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a column privilege description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <method name="getTablePrivileges" type="ResultSet" line="1737"/>
            <javadoc line="1737">
                Retrieves a description of the access rights for each table available
                  in a catalog. Note that a table privilege applies to one or
                  more columns in the table. It would be wrong to assume that
                  this privilege applies to all columns (this may be true for
                  some systems but is not true for all.)
                  &lt;P&gt;Only privileges matching the schema and table name
                  criteria are returned.  They are ordered by
                  &lt;code&gt;TABLE_CAT&lt;/code&gt;,
                  &lt;code&gt;TABLE_SCHEM&lt;/code&gt;, &lt;code&gt;TABLE_NAME&lt;/code&gt;,
                  and &lt;code&gt;PRIVILEGE&lt;/code&gt;.
                  &lt;P&gt;Each privilige description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;GRANTOR&lt;/B&gt; String =&gt; grantor of access (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;GRANTEE&lt;/B&gt; String =&gt; grantee of access
                  &lt;LI&gt;&lt;B&gt;PRIVILEGE&lt;/B&gt; String =&gt; name of access (SELECT,
                  INSERT, UPDATE, REFRENCES, ...)
                  &lt;LI&gt;&lt;B&gt;IS_GRANTABLE&lt;/B&gt; String =&gt; &quot;YES&quot; if grantee is permitted
                  to grant to others; &quot;NO&quot; if not; &lt;code&gt;null&lt;/code&gt; if unknown
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    tableNamePattern a table name pattern; must match the
                      table name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a table privilege description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
            </javadoc>
            <method name="getBestRowIdentifier" type="ResultSet" line="1780"/>
            <javadoc line="1780">
                Retrieves a description of a table&apos;s optimal set of columns that
                  uniquely identifies a row. They are ordered by SCOPE.
                  &lt;P&gt;Each column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;SCOPE&lt;/B&gt; short =&gt; actual scope of result
                  &lt;UL&gt;
                  &lt;LI&gt; bestRowTemporary - very temporary, while using row
                  &lt;LI&gt; bestRowTransaction - valid for remainder of current transaction
                  &lt;LI&gt; bestRowSession - valid for remainder of current session
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL data type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name,
                  for a UDT the type name is fully qualified
                  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; precision
                  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; int =&gt; not used
                  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; short  =&gt; scale - Null is returned for data types where
                  DECIMAL_DIGITS is not applicable.
                  &lt;LI&gt;&lt;B&gt;PSEUDO_COLUMN&lt;/B&gt; short =&gt; is this a pseudo column
                  like an Oracle ROWID
                  &lt;UL&gt;
                  &lt;LI&gt; bestRowUnknown - may or may not be pseudo column
                  &lt;LI&gt; bestRowNotPseudo - is NOT a pseudo column
                  &lt;LI&gt; bestRowPseudo - is a pseudo column
                  &lt;/UL&gt;
                  &lt;/OL&gt;
                  &lt;p&gt;The COLUMN_SIZE column represents the specified column size for the given column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in the database                    
                </param>
                <param>
                    scope the scope of interest; use same values as SCOPE                    
                </param>
                <param>
                    nullable include columns that are nullable.                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <declaration name="bestRowTemporary" type="int" line="1834"/>
            <javadoc line="1834">
                Indicates that the scope of the best row identifier is
                  very temporary, lasting only while the
                  row is being used.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;SCOPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <declaration name="bestRowTransaction" type="int" line="1846"/>
            <javadoc line="1846">
                Indicates that the scope of the best row identifier is
                  the remainder of the current transaction.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;SCOPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <declaration name="bestRowSession" type="int" line="1857"/>
            <javadoc line="1857">
                Indicates that the scope of the best row identifier is
                  the remainder of the current session.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;SCOPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <declaration name="bestRowUnknown" type="int" line="1868"/>
            <javadoc line="1868">
                Indicates that the best row identifier may or may not be a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <declaration name="bestRowNotPseudo" type="int" line="1878"/>
            <javadoc line="1878">
                Indicates that the best row identifier is NOT a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <declaration name="bestRowPseudo" type="int" line="1888"/>
            <javadoc line="1888">
                Indicates that the best row identifier is a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getBestRowIdentifier&lt;/code&gt;.                
            </javadoc>
            <method name="getVersionColumns" type="ResultSet" line="1898"/>
            <javadoc line="1898">
                Retrieves a description of a table&apos;s columns that are automatically
                  updated when any value in a row is updated.  They are
                  unordered.
                  &lt;P&gt;Each column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;SCOPE&lt;/B&gt; short =&gt; is not used
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL data type from &lt;code&gt;java.sql.Types&lt;/code&gt;
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Data source-dependent type name
                  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; precision
                  &lt;LI&gt;&lt;B&gt;BUFFER_LENGTH&lt;/B&gt; int =&gt; length of column value in bytes
                  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; short  =&gt; scale - Null is returned for data types where
                  DECIMAL_DIGITS is not applicable.
                  &lt;LI&gt;&lt;B&gt;PSEUDO_COLUMN&lt;/B&gt; short =&gt; whether this is pseudo column
                  like an Oracle ROWID
                  &lt;UL&gt;
                  &lt;LI&gt; versionColumnUnknown - may or may not be pseudo column
                  &lt;LI&gt; versionColumnNotPseudo - is NOT a pseudo column
                  &lt;LI&gt; versionColumnPseudo - is a pseudo column
                  &lt;/UL&gt;
                  &lt;/OL&gt;
                  &lt;p&gt;The COLUMN_SIZE column represents the specified column size for the given column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in the database                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which each row is a
                      column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <declaration name="versionColumnUnknown" type="int" line="1945"/>
            <javadoc line="1945">
                Indicates that this version column may or may not be a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="versionColumnNotPseudo" type="int" line="1955"/>
            <javadoc line="1955">
                Indicates that this version column is NOT a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="versionColumnPseudo" type="int" line="1965"/>
            <javadoc line="1965">
                Indicates that this version column is a pseudo column.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;PSEUDO_COLUMN&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getVersionColumns&lt;/code&gt;.                
            </javadoc>
            <method name="getPrimaryKeys" type="ResultSet" line="1975"/>
            <javadoc line="1975">
                Retrieves a description of the given table&apos;s primary key columns.  They
                  are ordered by COLUMN_NAME.
                  &lt;P&gt;Each primary key column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within primary key( a value
                  of 1 represents the first column of the primary key, a value of 2 would
                  represent the second column within the primary key).
                  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a primary key column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getImportedKeys" type="ResultSet" line="2007"/>
            <javadoc line="2007">
                Retrieves a description of the primary key columns that are
                  referenced by the given table&apos;s foreign key columns (the primary keys
                  imported by a table).  They are ordered by PKTABLE_CAT,
                  PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.
                  &lt;P&gt;Each primary key column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; primary key table catalog
                  being imported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; primary key table schema
                  being imported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; primary key table name
                  being imported
                  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; primary key column name
                  being imported
                  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name
                  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name
                  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within a foreign key( a value
                  of 1 represents the first column of the foreign key, a value of 2 would
                  represent the second column within the foreign key).
                  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to a
                  foreign key when the primary key is updated:
                  &lt;UL&gt;
                  &lt;LI&gt; importedNoAction - do not allow update of primary
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - change imported key to agree
                  with primary key update
                  &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt;
                  if its primary key has been updated
                  &lt;LI&gt; importedKeySetDefault - change imported key to default values
                  if its primary key has been updated
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to
                  the foreign key when primary is deleted.
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyNoAction - do not allow delete of primary
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key
                  &lt;LI&gt; importedKeySetNull - change imported key to NULL if
                  its primary key has been deleted
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;LI&gt; importedKeySetDefault - change imported key to default if
                  its primary key has been deleted
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key
                  constraints be deferred until commit
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition
                  &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition
                  &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition
                  &lt;/UL&gt;
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a primary key column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getExportedKeys                    
                </see>
            </javadoc>
            <declaration name="importedKeyCascade" type="int" line="2085"/>
            <javadoc line="2085">
                For the column &lt;code&gt;UPDATE_RULE&lt;/code&gt;,
                  indicates that
                  when the primary key is updated, the foreign key (imported key)
                  is changed to agree with it.
                  For the column &lt;code&gt;DELETE_RULE&lt;/code&gt;,
                  it indicates that
                  when the primary key is deleted, rows that imported that key
                  are deleted.
                  &lt;P&gt;
                  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeyRestrict" type="int" line="2103"/>
            <javadoc line="2103">
                For the column &lt;code&gt;UPDATE_RULE&lt;/code&gt;, indicates that
                  a primary key may not be updated if it has been imported by
                  another table as a foreign key.
                  For the column &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that
                  a primary key may not be deleted if it has been imported by
                  another table as a foreign key.
                  &lt;P&gt;
                  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeySetNull" type="int" line="2119"/>
            <javadoc line="2119">
                For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that
                  when the primary key is updated or deleted, the foreign key (imported key)
                  is changed to &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;
                  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeyNoAction" type="int" line="2133"/>
            <javadoc line="2133">
                For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that
                  if the primary key has been imported, it cannot be updated or deleted.
                  &lt;P&gt;
                  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeySetDefault" type="int" line="2146"/>
            <javadoc line="2146">
                For the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt;, indicates that
                  if the primary key is updated or deleted, the foreign key (imported key)
                  is set to the default value.
                  &lt;P&gt;
                  A possible value for the columns &lt;code&gt;UPDATE_RULE&lt;/code&gt;
                  and &lt;code&gt;DELETE_RULE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeyInitiallyDeferred" type="int" line="2160"/>
            <javadoc line="2160">
                Indicates deferrability.  See SQL-92 for a definition.
                  &lt;P&gt;
                  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeyInitiallyImmediate" type="int" line="2170"/>
            <javadoc line="2170">
                Indicates deferrability.  See SQL-92 for a definition.
                  &lt;P&gt;
                  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <declaration name="importedKeyNotDeferrable" type="int" line="2180"/>
            <javadoc line="2180">
                Indicates deferrability.  See SQL-92 for a definition.
                  &lt;P&gt;
                  A possible value for the column &lt;code&gt;DEFERRABILITY&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; objects returned by the methods
                  &lt;code&gt;getImportedKeys&lt;/code&gt;,  &lt;code&gt;getExportedKeys&lt;/code&gt;,
                  and &lt;code&gt;getCrossReference&lt;/code&gt;.                
            </javadoc>
            <method name="getExportedKeys" type="ResultSet" line="2190"/>
            <javadoc line="2190">
                Retrieves a description of the foreign key columns that reference the
                  given table&apos;s primary key columns (the foreign keys exported by a
                  table).  They are ordered by FKTABLE_CAT, FKTABLE_SCHEM,
                  FKTABLE_NAME, and KEY_SEQ.
                  &lt;P&gt;Each foreign key column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; primary key table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; primary key table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; primary key table name
                  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; primary key column name
                  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  being exported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  being exported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name
                  being exported
                  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name
                  being exported
                  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within foreign key( a value
                  of 1 represents the first column of the foreign key, a value of 2 would
                  represent the second column within the foreign key).
                  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to
                  foreign key when primary is updated:
                  &lt;UL&gt;
                  &lt;LI&gt; importedNoAction - do not allow update of primary
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - change imported key to agree
                  with primary key update
                  &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if
                  its primary key has been updated
                  &lt;LI&gt; importedKeySetDefault - change imported key to default values
                  if its primary key has been updated
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to
                  the foreign key when primary is deleted.
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyNoAction - do not allow delete of primary
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key
                  &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if
                  its primary key has been deleted
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;LI&gt; importedKeySetDefault - change imported key to default if
                  its primary key has been deleted
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; primary key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key
                  constraints be deferred until commit
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition
                  &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition
                  &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition
                  &lt;/UL&gt;
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in this database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in this database                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which each row is a
                      foreign key column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getImportedKeys                    
                </see>
            </javadoc>
            <method name="getCrossReference" type="ResultSet" line="2269"/>
            <javadoc line="2269">
                Retrieves a description of the foreign key columns in the given foreign key
                  table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table).
                  The number of columns returned from the parent table must match the number of
                  columns that make up the foreign key.  They
                  are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and
                  KEY_SEQ.
                  &lt;P&gt;Each foreign key column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;PKTABLE_CAT&lt;/B&gt; String =&gt; parent key table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_SCHEM&lt;/B&gt; String =&gt; parent key table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PKTABLE_NAME&lt;/B&gt; String =&gt; parent key table name
                  &lt;LI&gt;&lt;B&gt;PKCOLUMN_NAME&lt;/B&gt; String =&gt; parent key column name
                  &lt;LI&gt;&lt;B&gt;FKTABLE_CAT&lt;/B&gt; String =&gt; foreign key table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  being exported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_SCHEM&lt;/B&gt; String =&gt; foreign key table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  being exported (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FKTABLE_NAME&lt;/B&gt; String =&gt; foreign key table name
                  being exported
                  &lt;LI&gt;&lt;B&gt;FKCOLUMN_NAME&lt;/B&gt; String =&gt; foreign key column name
                  being exported
                  &lt;LI&gt;&lt;B&gt;KEY_SEQ&lt;/B&gt; short =&gt; sequence number within foreign key( a value
                  of 1 represents the first column of the foreign key, a value of 2 would
                  represent the second column within the foreign key).
                  &lt;LI&gt;&lt;B&gt;UPDATE_RULE&lt;/B&gt; short =&gt; What happens to
                  foreign key when parent key is updated:
                  &lt;UL&gt;
                  &lt;LI&gt; importedNoAction - do not allow update of parent
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - change imported key to agree
                  with parent key update
                  &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if
                  its parent key has been updated
                  &lt;LI&gt; importedKeySetDefault - change imported key to default values
                  if its parent key has been updated
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;DELETE_RULE&lt;/B&gt; short =&gt; What happens to
                  the foreign key when parent key is deleted.
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyNoAction - do not allow delete of parent
                  key if it has been imported
                  &lt;LI&gt; importedKeyCascade - delete rows that import a deleted key
                  &lt;LI&gt; importedKeySetNull - change imported key to &lt;code&gt;NULL&lt;/code&gt; if
                  its primary key has been deleted
                  &lt;LI&gt; importedKeyRestrict - same as importedKeyNoAction
                  (for ODBC 2.x compatibility)
                  &lt;LI&gt; importedKeySetDefault - change imported key to default if
                  its parent key has been deleted
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;FK_NAME&lt;/B&gt; String =&gt; foreign key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;PK_NAME&lt;/B&gt; String =&gt; parent key name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;DEFERRABILITY&lt;/B&gt; short =&gt; can the evaluation of foreign key
                  constraints be deferred until commit
                  &lt;UL&gt;
                  &lt;LI&gt; importedKeyInitiallyDeferred - see SQL92 for definition
                  &lt;LI&gt; importedKeyInitiallyImmediate - see SQL92 for definition
                  &lt;LI&gt; importedKeyNotDeferrable - see SQL92 for definition
                  &lt;/UL&gt;
                  &lt;/OL&gt;                
                <param>
                    parentCatalog a catalog name; must match the catalog name
                      as it is stored in the database; "" retrieves those without a
                      catalog; <code>null</code> means drop catalog name from the selection criteria                    
                </param>
                <param>
                    parentSchema a schema name; must match the schema name as
                      it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means drop schema name from the selection criteria                    
                </param>
                <param>
                    parentTable the name of the table that exports the key; must match
                      the table name as it is stored in the database                    
                </param>
                <param>
                    foreignCatalog a catalog name; must match the catalog name as
                      it is stored in the database; "" retrieves those without a
                      catalog; <code>null</code> means drop catalog name from the selection criteria                    
                </param>
                <param>
                    foreignSchema a schema name; must match the schema name as it
                      is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means drop schema name from the selection criteria                    
                </param>
                <param>
                    foreignTable the name of the table that imports the key; must match
                      the table name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a foreign key column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getImportedKeys                    
                </see>
            </javadoc>
            <method name="getTypeInfo" type="ResultSet" line="2357"/>
            <javadoc line="2357">
                Retrieves a description of all the data types supported by
                  this database. They are ordered by DATA_TYPE and then by how
                  closely the data type maps to the corresponding JDBC SQL type.
                  &lt;P&gt;If the database supports SQL distinct types, then getTypeInfo() will return
                  a single row with a TYPE_NAME of DISTINCT and a DATA_TYPE of Types.DISTINCT.
                  If the database supports SQL structured types, then getTypeInfo() will return
                  a single row with a TYPE_NAME of STRUCT and a DATA_TYPE of Types.STRUCT.
                  &lt;P&gt;If SQL distinct or structured types are supported, then information on the
                  individual types may be obtained from the getUDTs() method.
                  &lt;P&gt;Each type description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; Type name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL data type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;PRECISION&lt;/B&gt; int =&gt; maximum precision
                  &lt;LI&gt;&lt;B&gt;LITERAL_PREFIX&lt;/B&gt; String =&gt; prefix used to quote a literal
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;LITERAL_SUFFIX&lt;/B&gt; String =&gt; suffix used to quote a literal
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;CREATE_PARAMS&lt;/B&gt; String =&gt; parameters used in creating
                  the type (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; short =&gt; can you use NULL for this type.
                  &lt;UL&gt;
                  &lt;LI&gt; typeNoNulls - does not allow NULL values
                  &lt;LI&gt; typeNullable - allows NULL values
                  &lt;LI&gt; typeNullableUnknown - nullability unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;CASE_SENSITIVE&lt;/B&gt; boolean=&gt; is it case sensitive.
                  &lt;LI&gt;&lt;B&gt;SEARCHABLE&lt;/B&gt; short =&gt; can you use &quot;WHERE&quot; based on this type:
                  &lt;UL&gt;
                  &lt;LI&gt; typePredNone - No support
                  &lt;LI&gt; typePredChar - Only supported with WHERE .. LIKE
                  &lt;LI&gt; typePredBasic - Supported except for WHERE .. LIKE
                  &lt;LI&gt; typeSearchable - Supported for all WHERE ..
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;UNSIGNED_ATTRIBUTE&lt;/B&gt; boolean =&gt; is it unsigned.
                  &lt;LI&gt;&lt;B&gt;FIXED_PREC_SCALE&lt;/B&gt; boolean =&gt; can it be a money value.
                  &lt;LI&gt;&lt;B&gt;AUTO_INCREMENT&lt;/B&gt; boolean =&gt; can it be used for an
                  auto-increment value.
                  &lt;LI&gt;&lt;B&gt;LOCAL_TYPE_NAME&lt;/B&gt; String =&gt; localized version of type name
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;MINIMUM_SCALE&lt;/B&gt; short =&gt; minimum scale supported
                  &lt;LI&gt;&lt;B&gt;MAXIMUM_SCALE&lt;/B&gt; short =&gt; maximum scale supported
                  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; usually 2 or 10
                  &lt;/OL&gt;
                  &lt;p&gt;The PRECISION column represents the maximum column size that the server supports for the given datatype.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <return>
                    a <code>ResultSet</code> object in which each row is an SQL
                      type description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <declaration name="typeNoNulls" type="int" line="2423"/>
            <javadoc line="2423">
                Indicates that a &lt;code&gt;NULL&lt;/code&gt; value is NOT allowed for this
                  data type.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typeNullable" type="int" line="2433"/>
            <javadoc line="2433">
                Indicates that a &lt;code&gt;NULL&lt;/code&gt; value is allowed for this
                  data type.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typeNullableUnknown" type="int" line="2443"/>
            <javadoc line="2443">
                Indicates that it is not known whether a &lt;code&gt;NULL&lt;/code&gt; value
                  is allowed for this data type.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;NULLABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typePredNone" type="int" line="2453"/>
            <javadoc line="2453">
                Indicates that &lt;code&gt;WHERE&lt;/code&gt; search clauses are not supported
                  for this type.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typePredChar" type="int" line="2463"/>
            <javadoc line="2463">
                Indicates that the data type
                  can be only be used in &lt;code&gt;WHERE&lt;/code&gt; search clauses
                  that  use &lt;code&gt;LIKE&lt;/code&gt; predicates.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typePredBasic" type="int" line="2474"/>
            <javadoc line="2474">
                Indicates that the data type can be only be used in &lt;code&gt;WHERE&lt;/code&gt;
                  search clauses
                  that do not use &lt;code&gt;LIKE&lt;/code&gt; predicates.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="typeSearchable" type="int" line="2485"/>
            <javadoc line="2485">
                Indicates that all &lt;code&gt;WHERE&lt;/code&gt; search clauses can be
                  based on this type.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;SEARCHABLE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getTypeInfo&lt;/code&gt;.                
            </javadoc>
            <method name="getIndexInfo" type="ResultSet" line="2495"/>
            <javadoc line="2495">
                Retrieves a description of the given table&apos;s indices and statistics. They are
                  ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.
                  &lt;P&gt;Each index column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;NON_UNIQUE&lt;/B&gt; boolean =&gt; Can index values be non-unique.
                  false when TYPE is tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;INDEX_QUALIFIER&lt;/B&gt; String =&gt; index catalog (may be &lt;code&gt;null&lt;/code&gt;);
                  &lt;code&gt;null&lt;/code&gt; when TYPE is tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;INDEX_NAME&lt;/B&gt; String =&gt; index name; &lt;code&gt;null&lt;/code&gt; when TYPE is
                  tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;TYPE&lt;/B&gt; short =&gt; index type:
                  &lt;UL&gt;
                  &lt;LI&gt; tableIndexStatistic - this identifies table statistics that are
                  returned in conjuction with a table&apos;s index descriptions
                  &lt;LI&gt; tableIndexClustered - this is a clustered index
                  &lt;LI&gt; tableIndexHashed - this is a hashed index
                  &lt;LI&gt; tableIndexOther - this is some other style of index
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; short =&gt; column sequence number
                  within index; zero when TYPE is tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name; &lt;code&gt;null&lt;/code&gt; when TYPE is
                  tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;ASC_OR_DESC&lt;/B&gt; String =&gt; column sort sequence, &quot;A&quot; =&gt; ascending,
                  &quot;D&quot; =&gt; descending, may be &lt;code&gt;null&lt;/code&gt; if sort sequence is not supported;
                  &lt;code&gt;null&lt;/code&gt; when TYPE is tableIndexStatistic
                  &lt;LI&gt;&lt;B&gt;CARDINALITY&lt;/B&gt; int =&gt; When TYPE is tableIndexStatistic, then
                  this is the number of rows in the table; otherwise, it is the
                  number of unique values in the index.
                  &lt;LI&gt;&lt;B&gt;PAGES&lt;/B&gt; int =&gt; When TYPE is  tableIndexStatisic then
                  this is the number of pages used for the table, otherwise it
                  is the number of pages used for the current index.
                  &lt;LI&gt;&lt;B&gt;FILTER_CONDITION&lt;/B&gt; String =&gt; Filter condition, if any.
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in this database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schema a schema name; must match the schema name
                      as it is stored in this database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    table a table name; must match the table name as it is stored
                      in this database                    
                </param>
                <param>
                    unique when true, return only indices for unique values;
                      when false, return indices regardless of whether unique or not                    
                </param>
                <param>
                    approximate when true, result is allowed to reflect approximate
                      or out of data values; when false, results are requested to be
                      accurate                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is an index column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <declaration name="tableIndexStatistic" type="short" line="2557"/>
            <javadoc line="2557">
                Indicates that this column contains table statistics that
                  are returned in conjunction with a table&apos;s index descriptions.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getIndexInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="tableIndexClustered" type="short" line="2567"/>
            <javadoc line="2567">
                Indicates that this table index is a clustered index.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getIndexInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="tableIndexHashed" type="short" line="2576"/>
            <javadoc line="2576">
                Indicates that this table index is a hashed index.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getIndexInfo&lt;/code&gt;.                
            </javadoc>
            <declaration name="tableIndexOther" type="short" line="2585"/>
            <javadoc line="2585">
                Indicates that this table index is not a clustered
                  index, a hashed index, or table statistics;
                  it is something other than these.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getIndexInfo&lt;/code&gt;.                
            </javadoc>
            <method name="supportsResultSetType" type="boolean" line="2598"/>
            <javadoc line="2598">
                Retrieves whether this database supports the given result set type.                
                <param>
                    type defined in <code>java.sql.ResultSet</code>                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Connection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="supportsResultSetConcurrency" type="boolean" line="2609"/>
            <javadoc line="2609">
                Retrieves whether this database supports the given concurrency type
                  in combination with the given result set type.                
                <param>
                    type defined in <code>java.sql.ResultSet</code>                    
                </param>
                <param>
                    concurrency type defined in <code>java.sql.ResultSet</code>                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Connection                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ownUpdatesAreVisible" type="boolean" line="2623"/>
            <javadoc line="2623">
                Retrieves whether for the given type of &lt;code&gt;ResultSet&lt;/code&gt; object,
                  the result set&apos;s own updates are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if updates are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ownDeletesAreVisible" type="boolean" line="2639"/>
            <javadoc line="2639">
                Retrieves whether a result set&apos;s own deletes are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if deletes are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ownInsertsAreVisible" type="boolean" line="2653"/>
            <javadoc line="2653">
                Retrieves whether a result set&apos;s own inserts are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if inserts are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="othersUpdatesAreVisible" type="boolean" line="2667"/>
            <javadoc line="2667">
                Retrieves whether updates made by others are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if updates made by others
                      are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="othersDeletesAreVisible" type="boolean" line="2682"/>
            <javadoc line="2682">
                Retrieves whether deletes made by others are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if deletes made by others
                      are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="othersInsertsAreVisible" type="boolean" line="2697"/>
            <javadoc line="2697">
                Retrieves whether inserts made by others are visible.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if inserts made by others
                      are visible for the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updatesAreDetected" type="boolean" line="2712"/>
            <javadoc line="2712">
                Retrieves whether or not a visible row update can be detected by
                  calling the method &lt;code&gt;ResultSet.rowUpdated&lt;/code&gt;.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if changes are detected by the result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deletesAreDetected" type="boolean" line="2727"/>
            <javadoc line="2727">
                Retrieves whether or not a visible row delete can be detected by
                  calling the method &lt;code&gt;ResultSet.rowDeleted&lt;/code&gt;.  If the method
                  &lt;code&gt;deletesAreDetected&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, it means that
                  deleted rows are removed from the result set.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if deletes are detected by the given result set type;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="insertsAreDetected" type="boolean" line="2744"/>
            <javadoc line="2744">
                Retrieves whether or not a visible row insert can be detected
                  by calling the method &lt;code&gt;ResultSet.rowInserted&lt;/code&gt;.                
                <param>
                    type the <code>ResultSet</code> type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <return>
                    <code>true</code> if changes are detected by the specified result
                      set type; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="supportsBatchUpdates" type="boolean" line="2759"/>
            <javadoc line="2759">
                Retrieves whether this database supports batch updates.                
                <return>
                    <code>true</code> if this database supports batch upcates;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getUDTs" type="ResultSet" line="2769"/>
            <javadoc line="2769">
                Retrieves a description of the user-defined types (UDTs) defined
                  in a particular schema.  Schema-specific UDTs may have type
                  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;STRUCT&lt;/code&gt;,
                  or &lt;code&gt;DISTINCT&lt;/code&gt;.
                  &lt;P&gt;Only types matching the catalog, schema, type name and type
                  criteria are returned.  They are ordered by &lt;code&gt;DATA_TYPE&lt;/code&gt;,
                  &lt;code&gt;TYPE_CAT&lt;/code&gt;, &lt;code&gt;TYPE_SCHEM&lt;/code&gt;  and
                  &lt;code&gt;TYPE_NAME&lt;/code&gt;.  The type name parameter may be a fully-qualified
                  name.  In this case, the catalog and schemaPattern parameters are
                  ignored.
                  &lt;P&gt;Each type description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the type&apos;s catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; type&apos;s schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name
                  &lt;LI&gt;&lt;B&gt;CLASS_NAME&lt;/B&gt; String =&gt; Java class name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; type value defined in java.sql.Types.
                  One of JAVA_OBJECT, STRUCT, or DISTINCT
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the type
                  &lt;LI&gt;&lt;B&gt;BASE_TYPE&lt;/B&gt; short =&gt; type code of the source type of a
                  DISTINCT type or the type that implements the user-generated
                  reference type of the SELF_REFERENCING_COLUMN of a structured
                  type as defined in java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE is not
                  DISTINCT or not STRUCT with REFERENCE_GENERATION = USER_DEFINED)
                  &lt;/OL&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support UDTs, an empty
                  result set is returned.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema pattern name; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    typeNamePattern a type name pattern; must match the type name
                      as it is stored in the database; may be a fully qualified name                    
                </param>
                <param>
                    types a list of user-defined types (JAVA_OBJECT,
                      STRUCT, or DISTINCT) to include; <code>null</code> returns all types                    
                </param>
                <return>
                    <code>ResultSet</code> object in which each row describes a UDT                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getConnection" type="Connection" line="2822"/>
            <javadoc line="2822">
                Retrieves the connection that produced this metadata object.
                  &lt;P&gt;                
                <return>
                    the connection that produced this metadata object                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="supportsSavepoints" type="boolean" line="2833"/>
            <javadoc line="2833">
                Retrieves whether this database supports savepoints.                
                <return>
                    <code>true</code> if savepoints are supported;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsNamedParameters" type="boolean" line="2843"/>
            <javadoc line="2843">
                Retrieves whether this database supports named parameters to callable
                  statements.                
                <return>
                    <code>true</code> if named parameters are supported;
                      <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsMultipleOpenResults" type="boolean" line="2854"/>
            <javadoc line="2854">
                Retrieves whether it is possible to have multiple &lt;code&gt;ResultSet&lt;/code&gt; objects
                  returned from a &lt;code&gt;CallableStatement&lt;/code&gt; object
                  simultaneously.                
                <return>
                    <code>true</code> if a <code>CallableStatement</code> object
                      can return multiple <code>ResultSet</code> objects
                      simultaneously; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a datanase access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsGetGeneratedKeys" type="boolean" line="2867"/>
            <javadoc line="2867">
                Retrieves whether auto-generated keys can be retrieved after
                  a statement has been executed                
                <return>
                    <code>true</code> if auto-generated keys can be retrieved
                      after a statement has executed; <code>false</code> otherwise
                      <p>If <code>true</code> is returned, the JDBC driver must support the
                      returning of auto-generated keys for at least SQL INSERT statements
                      <p>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSuperTypes" type="ResultSet" line="2881"/>
            <javadoc line="2881">
                Retrieves a description of the user-defined type (UDT) hierarchies defined in a
                  particular schema in this database. Only the immediate super type/
                  sub type relationship is modeled.
                  &lt;P&gt;
                  Only supertype information for UDTs matching the catalog,
                  schema, and type name is returned. The type name parameter
                  may be a fully-qualified name. When the UDT name supplied is a
                  fully-qualified name, the catalog and schemaPattern parameters are
                  ignored.
                  &lt;P&gt;
                  If a UDT does not have a direct super type, it is not listed here.
                  A row of the &lt;code&gt;ResultSet&lt;/code&gt; object returned by this method
                  describes the designated UDT and a direct supertype. A row has the following
                  columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; the UDT&apos;s catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; UDT&apos;s schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name of the UDT
                  &lt;LI&gt;&lt;B&gt;SUPERTYPE_CAT&lt;/B&gt; String =&gt; the direct super type&apos;s catalog
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;SUPERTYPE_SCHEM&lt;/B&gt; String =&gt; the direct super type&apos;s schema
                  (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;SUPERTYPE_NAME&lt;/B&gt; String =&gt; the direct super type&apos;s name
                  &lt;/OL&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support type hierarchies, an
                  empty result set is returned.                
                <param>
                    catalog a catalog name; "" retrieves those without a catalog;
                      <code>null</code> means drop catalog name from the selection criteria                    
                </param>
                <param>
                    schemaPattern a schema name pattern; "" retrieves those
                      without a schema                    
                </param>
                <param>
                    typeNamePattern a UDT name pattern; may be a fully-qualified
                      name                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which a row gives information
                      about the designated UDT                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSuperTables" type="ResultSet" line="2925"/>
            <javadoc line="2925">
                Retrieves a description of the table hierarchies defined in a particular
                  schema in this database.
                  &lt;P&gt;Only supertable information for tables matching the catalog, schema
                  and table name are returned. The table name parameter may be a fully-
                  qualified name, in which case, the catalog and schemaPattern parameters
                  are ignored. If a table does not have a super table, it is not listed here.
                  Supertables have to be defined in the same catalog and schema as the
                  sub tables. Therefore, the type description does not need to include
                  this information for the supertable.
                  &lt;P&gt;Each type description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; the type&apos;s catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; type&apos;s schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; type name
                  &lt;LI&gt;&lt;B&gt;SUPERTABLE_NAME&lt;/B&gt; String =&gt; the direct super type&apos;s name
                  &lt;/OL&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If the driver does not support type hierarchies, an
                  empty result set is returned.                
                <param>
                    catalog a catalog name; "" retrieves those without a catalog;
                      <code>null</code> means drop catalog name from the selection criteria                    
                </param>
                <param>
                    schemaPattern a schema name pattern; "" retrieves those
                      without a schema                    
                </param>
                <param>
                    tableNamePattern a table name pattern; may be a fully-qualified
                      name                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which each row is a type description                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="attributeNoNulls" type="short" line="2962"/>
            <javadoc line="2962">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values might not be allowed.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt; in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.                
            </javadoc>
            <declaration name="attributeNullable" type="short" line="2971"/>
            <javadoc line="2971">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values are definitely allowed.
                  &lt;P&gt;
                  A possible value for the column &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.                
            </javadoc>
            <declaration name="attributeNullableUnknown" type="short" line="2980"/>
            <javadoc line="2980">
                Indicates that whether &lt;code&gt;NULL&lt;/code&gt; values are allowed is not
                  known.
                  &lt;P&gt;
                  A possible value for the column &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getAttributes&lt;/code&gt;.                
            </javadoc>
            <method name="getAttributes" type="ResultSet" line="2990"/>
            <javadoc line="2990">
                Retrieves a description of the given attribute of the given type
                  for a user-defined type (UDT) that is available in the given schema
                  and catalog.
                  &lt;P&gt;
                  Descriptions are returned only for attributes of UDTs matching the
                  catalog, schema, type, and attribute name criteria. They are ordered by
                  &lt;code&gt;TYPE_CAT&lt;/code&gt;, &lt;code&gt;TYPE_SCHEM&lt;/code&gt;,
                  &lt;code&gt;TYPE_NAME&lt;/code&gt; and &lt;code&gt;ORDINAL_POSITION&lt;/code&gt;. This description
                  does not contain inherited attributes.
                  &lt;P&gt;
                  The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following
                  columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TYPE_CAT&lt;/B&gt; String =&gt; type catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_SCHEM&lt;/B&gt; String =&gt; type schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; type name
                  &lt;LI&gt;&lt;B&gt;ATTR_NAME&lt;/B&gt; String =&gt; attribute name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; attribute type SQL type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;ATTR_TYPE_NAME&lt;/B&gt; String =&gt; Data source dependent type name.
                  For a UDT, the type name is fully qualified. For a REF, the type name is
                  fully qualified and represents the target type of the reference type.
                  &lt;LI&gt;&lt;B&gt;ATTR_SIZE&lt;/B&gt; int =&gt; column size.  For char or date
                  types this is the maximum number of characters; for numeric or
                  decimal types this is precision.
                  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; int =&gt; the number of fractional digits. Null is returned for data types where
                  DECIMAL_DIGITS is not applicable.
                  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; Radix (typically either 10 or 2)
                  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; int =&gt; whether NULL is allowed
                  &lt;UL&gt;
                  &lt;LI&gt; attributeNoNulls - might not allow NULL values
                  &lt;LI&gt; attributeNullable - definitely allows NULL values
                  &lt;LI&gt; attributeNullableUnknown - nullability unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;ATTR_DEF&lt;/B&gt; String =&gt; default value (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;SQL_DATA_TYPE&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;SQL_DATETIME_SUB&lt;/B&gt; int =&gt; unused
                  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int =&gt; for char types the
                  maximum number of bytes in the column
                  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int =&gt; index of the attribute in the UDT
                  (starting at 1)
                  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String  =&gt; ISO rules are used to determine
                  the nullability for a attribute.
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the attribute can include NULLs
                  &lt;LI&gt; NO            --- if the attribute cannot include NULLs
                  &lt;LI&gt; empty string  --- if the nullability for the
                  attribute is unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SCOPE_CATALOG&lt;/B&gt; String =&gt; catalog of table that is the
                  scope of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SCOPE_SCHEMA&lt;/B&gt; String =&gt; schema of table that is the
                  scope of a reference attribute (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SCOPE_TABLE&lt;/B&gt; String =&gt; table name that is the scope of a
                  reference attribute (&lt;code&gt;null&lt;/code&gt; if the DATA_TYPE isn&apos;t REF)
                  &lt;LI&gt;&lt;B&gt;SOURCE_DATA_TYPE&lt;/B&gt; short =&gt; source type of a distinct type or user-generated
                  Ref type,SQL type from java.sql.Types (&lt;code&gt;null&lt;/code&gt; if DATA_TYPE
                  isn&apos;t DISTINCT or user-generated REF)
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    typeNamePattern a type name pattern; must match the
                      type name as it is stored in the database                    
                </param>
                <param>
                    attributeNamePattern an attribute name pattern; must match the attribute
                      name as it is declared in the database                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which each row is an
                      attribute description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsResultSetHoldability" type="boolean" line="3072"/>
            <javadoc line="3072">
                Retrieves whether this database supports the given result set holdability.                
                <param>
                    holdability one of the following constants:
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    Connection                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getResultSetHoldability" type="int" line="3085"/>
            <javadoc line="3085">
                Retrieves this database&apos;s default holdability for &lt;code&gt;ResultSet&lt;/code&gt;
                  objects.                
                <return>
                    the default holdability; either
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDatabaseMajorVersion" type="int" line="3097"/>
            <javadoc line="3097">
                Retrieves the major version number of the underlying database.                
                <return>
                    the underlying database's major version                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDatabaseMinorVersion" type="int" line="3106"/>
            <javadoc line="3106">
                Retrieves the minor version number of the underlying database.                
                <return>
                    underlying database's minor version                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getJDBCMajorVersion" type="int" line="3115"/>
            <javadoc line="3115">
                Retrieves the major JDBC version number for this
                  driver.                
                <return>
                    JDBC version major number                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getJDBCMinorVersion" type="int" line="3125"/>
            <javadoc line="3125">
                Retrieves the minor JDBC version number for this
                  driver.                
                <return>
                    JDBC version minor number                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="sqlStateXOpen" type="int" line="3135"/>
            <javadoc line="3135">
                A possible return value for the method
                  &lt;code&gt;DatabaseMetaData.getSQLStateType&lt;/code&gt; which is used to indicate
                  whether the value returned by the method
                  &lt;code&gt;SQLException.getSQLState&lt;/code&gt; is an
                  X/Open (now know as Open Group) SQL CLI SQLSTATE value.
                  &lt;P&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="sqlStateSQL" type="int" line="3146"/>
            <javadoc line="3146">
                A possible return value for the method
                  &lt;code&gt;DatabaseMetaData.getSQLStateType&lt;/code&gt; which is used to indicate
                  whether the value returned by the method
                  &lt;code&gt;SQLException.getSQLState&lt;/code&gt; is an SQLSTATE value.
                  &lt;P&gt;                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="sqlStateSQL99" type="int" line="3156"/>
            <javadoc line="3156">
                A possible return value for the method
                  &lt;code&gt;DatabaseMetaData.getSQLStateType&lt;/code&gt; which is used to indicate
                  whether the value returned by the method
                  &lt;code&gt;SQLException.getSQLState&lt;/code&gt; is an SQL99 SQLSTATE value.
                  &lt;P&gt;
                  &lt;b&gt;Note:&lt;/b&gt;This constant remains only for compatibility reasons. Developers
                  should use the constant &lt;code&gt;sqlStateSQL&lt;/code&gt; instead.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSQLStateType" type="int" line="3169"/>
            <javadoc line="3169">
                Indicates whether the SQLSTATE returned by &lt;code&gt;SQLException.getSQLState&lt;/code&gt;
                  is X/Open (now known as Open Group) SQL CLI or SQL:2003.                
                <return>
                    the type of SQLSTATE; one of:
                      sqlStateXOpen or
                      sqlStateSQL                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="locatorsUpdateCopy" type="boolean" line="3180"/>
            <javadoc line="3180">
                Indicates whether updates made to a LOB are made on a copy or directly
                  to the LOB.                
                <return>
                    <code>true</code> if updates are made to a copy of the LOB;
                      <code>false</code> if updates are made directly to the LOB                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="supportsStatementPooling" type="boolean" line="3190"/>
            <javadoc line="3190">
                Retrieves whether this database supports statement pooling.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRowIdLifetime" type="RowIdLifetime" line="3201"/>
            <javadoc line="3201">
                Indicates whether or not this data source supports the SQL &lt;code&gt;ROWID&lt;/code&gt; type,
                  and if so  the lifetime for which a &lt;code&gt;RowId&lt;/code&gt; object remains valid.
                  &lt;p&gt;
                  The returned int values have the following relationship:
                  &lt;pre&gt;
                  ROWID_UNSUPPORTED &lt; ROWID_VALID_OTHER &lt; ROWID_VALID_TRANSACTION
                  &lt; ROWID_VALID_SESSION &lt; ROWID_VALID_FOREVER
                  &lt;/pre&gt;
                  so conditional logic such as
                  &lt;pre&gt;
                  if (metadata.getRowIdLifetime() &gt; DatabaseMetaData.ROWID_VALID_TRANSACTION)
                  &lt;/pre&gt;
                  can be used. Valid Forever means valid across all Sessions, and valid for
                  a Session means valid across all its contained Transactions.                
                <return>
                    the status indicating the lifetime of a <code>RowId</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSchemas" type="ResultSet" line="3223"/>
            <javadoc line="3223">
                Retrieves the schema names available in this database.  The results
                  are ordered by &lt;code&gt;TABLE_CATALOG&lt;/code&gt; and
                  &lt;code&gt;TABLE_SCHEM&lt;/code&gt;.
                  &lt;P&gt;The schema columns are:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; schema name
                  &lt;LI&gt;&lt;B&gt;TABLE_CATALOG&lt;/B&gt; String =&gt; catalog name (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;/OL&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it is stored
                      in the database;"" retrieves those without a catalog; null means catalog
                      name should not be used to narrow down the search.                    
                </param>
                <param>
                    schemaPattern a schema name; must match the schema name as it is
                      stored in the database; null means
                      schema name should not be used to narrow down the search.                    
                </param>
                <return>
                    a <code>ResultSet</code> object in which each row is a
                      schema description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="supportsStoredFunctionsUsingCallSyntax" type="boolean" line="3249"/>
            <javadoc line="3249">
                Retrieves whether this database supports invoking user-defined or vendor functions
                  using the stored procedure escape syntax.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="autoCommitFailureClosesAllResultSets" type="boolean" line="3259"/>
            <javadoc line="3259">
                Retrieves whether a &lt;code&gt;SQLException&lt;/code&gt; while autoCommit is &lt;code&gt;true&lt;/code&gt; inidcates
                  that all open ResultSets are closed, even ones that are holdable.  When a &lt;code&gt;SQLException&lt;/code&gt; occurs while
                  autocommit is &lt;code&gt;true&lt;/code&gt;, it is vendor specific whether the JDBC driver responds with a commit operation, a
                  rollback operation, or by doing neither a commit nor a rollback.  A potential result of this difference
                  is in whether or not holdable ResultSets are closed.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getClientInfoProperties" type="ResultSet" line="3271"/>
            <javadoc line="3271">
                Retrieves a list of the client info properties
                  that the driver supports.  The result set contains the following columns
                  &lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;&lt;b&gt;NAME&lt;/b&gt; String=&gt; The name of the client info property&lt;br&gt;
                  &lt;li&gt;&lt;b&gt;MAX_LEN&lt;/b&gt; int=&gt; The maximum length of the value for the property&lt;br&gt;
                  &lt;li&gt;&lt;b&gt;DEFAULT_VALUE&lt;/b&gt; String=&gt; The default value of the property&lt;br&gt;
                  &lt;li&gt;&lt;b&gt;DESCRIPTION&lt;/b&gt; String=&gt; A description of the property.  This will typically
                  contain information as to where this property is
                  stored in the database.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The &lt;code&gt;ResultSet&lt;/code&gt; is sorted by the NAME column
                  &lt;p&gt;                
                <return>
                    A <code>ResultSet</code> object; each row is a supported client info
                      property
                      <p>                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      <p>                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFunctions" type="ResultSet" line="3296"/>
            <javadoc line="3296">
                Retrieves a description of the  system and user functions available
                  in the given catalog.
                  &lt;P&gt;
                  Only system and user function descriptions matching the schema and
                  function name criteria are returned.  They are ordered by
                  &lt;code&gt;FUNCTION_CAT&lt;/code&gt;, &lt;code&gt;FUNCTION_SCHEM&lt;/code&gt;,
                  &lt;code&gt;FUNCTION_NAME&lt;/code&gt; and
                  &lt;code&gt;SPECIFIC_ NAME&lt;/code&gt;.
                  &lt;P&gt;Each function description has the the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;FUNCTION_CAT&lt;/B&gt; String =&gt; function catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FUNCTION_SCHEM&lt;/B&gt; String =&gt; function schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FUNCTION_NAME&lt;/B&gt; String =&gt; function name.  This is the name
                  used to invoke the function
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; explanatory comment on the function
                  &lt;LI&gt;&lt;B&gt;FUNCTION_TYPE&lt;/B&gt; short =&gt; kind of function:
                  &lt;UL&gt;
                  &lt;LI&gt;functionResultUnknown - Cannot determine if a return value
                  or table will be returned
                  &lt;LI&gt; functionNoTable- Does not return a table
                  &lt;LI&gt; functionReturnsTable - Returns a table
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SPECIFIC_NAME&lt;/B&gt; String  =&gt; the name which uniquely identifies
                  this function within its schema.  This is a user specified, or DBMS
                  generated, name that may be different then the &lt;code&gt;FUNCTION_NAME&lt;/code&gt;
                  for example with overload functions
                  &lt;/OL&gt;
                  &lt;p&gt;
                  A user may not have permission to execute any of the functions that are
                  returned by &lt;code&gt;getFunctions&lt;/code&gt;                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    functionNamePattern a function name pattern; must match the
                      function name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a function description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFunctionColumns" type="ResultSet" line="3346"/>
            <javadoc line="3346">
                Retrieves a description of the given catalog&apos;s system or user
                  function parameters and return type.
                  &lt;P&gt;Only descriptions matching the schema,  function and
                  parameter name criteria are returned. They are ordered by
                  &lt;code&gt;FUNCTION_CAT&lt;/code&gt;, &lt;code&gt;FUNCTION_SCHEM&lt;/code&gt;,
                  &lt;code&gt;FUNCTION_NAME&lt;/code&gt; and
                  &lt;code&gt;SPECIFIC_ NAME&lt;/code&gt;. Within this, the return value,
                  if any, is first. Next are the parameter descriptions in call
                  order. The column descriptions follow in column number order.
                  &lt;P&gt;Each row in the &lt;code&gt;ResultSet&lt;/code&gt;
                  is a parameter description, column description or
                  return type description with the following fields:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;FUNCTION_CAT&lt;/B&gt; String =&gt; function catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FUNCTION_SCHEM&lt;/B&gt; String =&gt; function schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;FUNCTION_NAME&lt;/B&gt; String =&gt; function name.  This is the name
                  used to invoke the function
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column/parameter name
                  &lt;LI&gt;&lt;B&gt;COLUMN_TYPE&lt;/B&gt; Short =&gt; kind of column/parameter:
                  &lt;UL&gt;
                  &lt;LI&gt; functionColumnUnknown - nobody knows
                  &lt;LI&gt; functionColumnIn - IN parameter
                  &lt;LI&gt; functionColumnInOut - INOUT parameter
                  &lt;LI&gt; functionColumnOut - OUT parameter
                  &lt;LI&gt; functionColumnReturn - function return value
                  &lt;LI&gt; functionColumnResult - Indicates that the parameter or column
                  is a column in the &lt;code&gt;ResultSet&lt;/code&gt;
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;TYPE_NAME&lt;/B&gt; String =&gt; SQL type name, for a UDT type the
                  type name is fully qualified
                  &lt;LI&gt;&lt;B&gt;PRECISION&lt;/B&gt; int =&gt; precision
                  &lt;LI&gt;&lt;B&gt;LENGTH&lt;/B&gt; int =&gt; length in bytes of data
                  &lt;LI&gt;&lt;B&gt;SCALE&lt;/B&gt; short =&gt; scale -  null is returned for data types where
                  SCALE is not applicable.
                  &lt;LI&gt;&lt;B&gt;RADIX&lt;/B&gt; short =&gt; radix
                  &lt;LI&gt;&lt;B&gt;NULLABLE&lt;/B&gt; short =&gt; can it contain NULL.
                  &lt;UL&gt;
                  &lt;LI&gt; functionNoNulls - does not allow NULL values
                  &lt;LI&gt; functionNullable - allows NULL values
                  &lt;LI&gt; functionNullableUnknown - nullability unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column/parameter
                  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int  =&gt; the maximum length of binary
                  and character based parameters or columns.  For any other datatype the returned value
                  is a NULL
                  &lt;LI&gt;&lt;B&gt;ORDINAL_POSITION&lt;/B&gt; int  =&gt; the ordinal position, starting
                  from 1, for the input and output parameters. A value of 0
                  is returned if this row describes the function&apos;s return value.
                  For result set columns, it is the
                  ordinal position of the column in the result set starting from 1.
                  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String  =&gt; ISO rules are used to determine
                  the nullability for a parameter or column.
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the parameter or column can include NULLs
                  &lt;LI&gt; NO            --- if the parameter or column  cannot include NULLs
                  &lt;LI&gt; empty string  --- if the nullability for the
                  parameter  or column is unknown
                  &lt;/UL&gt;
                  &lt;LI&gt;&lt;B&gt;SPECIFIC_NAME&lt;/B&gt; String  =&gt; the name which uniquely identifies
                  this function within its schema.  This is a user specified, or DBMS
                  generated, name that may be different then the &lt;code&gt;FUNCTION_NAME&lt;/code&gt;
                  for example with overload functions
                  &lt;/OL&gt;
                  &lt;p&gt;The PRECISION column represents the specified column size for the given
                  parameter or column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    functionNamePattern a procedure name pattern; must match the
                      function name as it is stored in the database                    
                </param>
                <param>
                    columnNamePattern a parameter name pattern; must match the
                      parameter or column name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row describes a
                      user function parameter, column  or return type                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getSearchStringEscape                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionColumnUnknown" type="int" line="3446"/>
            <javadoc line="3446">
                Indicates that type of the parameter or column is unknown.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
            </javadoc>
            <declaration name="functionColumnIn" type="int" line="3456"/>
            <javadoc line="3456">
                Indicates that the parameter or column is an IN parameter.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionColumnInOut" type="int" line="3467"/>
            <javadoc line="3467">
                Indicates that the parameter or column is an INOUT parameter.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionColumnOut" type="int" line="3478"/>
            <javadoc line="3478">
                Indicates that the parameter or column is an OUT parameter.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionReturn" type="int" line="3488"/>
            <javadoc line="3488">
                Indicates that the parameter or column is a return value.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionColumnResult" type="int" line="3499"/>
            <javadoc line="3499">
                Indicates that the parameter or column is a column in a result set.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;COLUMN_TYPE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt;
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionNoNulls" type="int" line="3511"/>
            <javadoc line="3511">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values are not allowed.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionNullable" type="int" line="3522"/>
            <javadoc line="3522">
                Indicates that &lt;code&gt;NULL&lt;/code&gt; values are allowed.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionNullableUnknown" type="int" line="3533"/>
            <javadoc line="3533">
                Indicates that whether &lt;code&gt;NULL&lt;/code&gt; values are allowed
                  is unknown.
                  &lt;P&gt;
                  A possible value for the column
                  &lt;code&gt;NULLABLE&lt;/code&gt;
                  in the &lt;code&gt;ResultSet&lt;/code&gt; object
                  returned by the method &lt;code&gt;getFunctionColumns&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionResultUnknown" type="int" line="3545"/>
            <javadoc line="3545">
                Indicates that it is not known whether the function returns
                  a result or a table.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;FUNCTION_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getFunctions&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionNoTable" type="int" line="3556"/>
            <javadoc line="3556">
                Indicates that the function  does not return a table.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;FUNCTION_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getFunctions&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="functionReturnsTable" type="int" line="3566"/>
            <javadoc line="3566">
                Indicates that the function  returns a table.
                  &lt;P&gt;
                  A possible value for column &lt;code&gt;FUNCTION_TYPE&lt;/code&gt; in the
                  &lt;code&gt;ResultSet&lt;/code&gt; object returned by the method
                  &lt;code&gt;getFunctions&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getPseudoColumns" type="ResultSet" line="3578"/>
            <javadoc line="3578">
                Retrieves a description of the pseudo or hidden columns available
                  in a given table within the specified catalog and schema.
                  Pseudo or hidden columns may not always be stored within
                  a table and are not visible in a ResultSet unless they are
                  specified in the query&apos;s outermost SELECT list. Pseudo or hidden
                  columns may not necessarily be able to be modified. If there are
                  no pseudo or hidden columns, an empty ResultSet is returned.
                  &lt;P&gt;Only column descriptions matching the catalog, schema, table
                  and column name criteria are returned.  They are ordered by
                  &lt;code&gt;TABLE_CAT&lt;/code&gt;,&lt;code&gt;TABLE_SCHEM&lt;/code&gt;, &lt;code&gt;TABLE_NAME&lt;/code&gt;
                  and &lt;code&gt;COLUMN_NAME&lt;/code&gt;.
                  &lt;P&gt;Each column description has the following columns:
                  &lt;OL&gt;
                  &lt;LI&gt;&lt;B&gt;TABLE_CAT&lt;/B&gt; String =&gt; table catalog (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_SCHEM&lt;/B&gt; String =&gt; table schema (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;TABLE_NAME&lt;/B&gt; String =&gt; table name
                  &lt;LI&gt;&lt;B&gt;COLUMN_NAME&lt;/B&gt; String =&gt; column name
                  &lt;LI&gt;&lt;B&gt;DATA_TYPE&lt;/B&gt; int =&gt; SQL type from java.sql.Types
                  &lt;LI&gt;&lt;B&gt;COLUMN_SIZE&lt;/B&gt; int =&gt; column size.
                  &lt;LI&gt;&lt;B&gt;DECIMAL_DIGITS&lt;/B&gt; int =&gt; the number of fractional digits. Null is returned for data types where
                  DECIMAL_DIGITS is not applicable.
                  &lt;LI&gt;&lt;B&gt;NUM_PREC_RADIX&lt;/B&gt; int =&gt; Radix (typically either 10 or 2)
                  &lt;LI&gt;&lt;B&gt;COLUMN_USAGE&lt;/B&gt; String =&gt; The allowed usage for the column.  The
                  value returned will correspond to the enum name returned by {@link PseudoColumnUsage#name PseudoColumnUsage.name()}&lt;LI&gt;&lt;B&gt;REMARKS&lt;/B&gt; String =&gt; comment describing column (may be &lt;code&gt;null&lt;/code&gt;)
                  &lt;LI&gt;&lt;B&gt;CHAR_OCTET_LENGTH&lt;/B&gt; int =&gt; for char types the
                  maximum number of bytes in the column
                  &lt;LI&gt;&lt;B&gt;IS_NULLABLE&lt;/B&gt; String  =&gt; ISO rules are used to determine the nullability for a column.
                  &lt;UL&gt;
                  &lt;LI&gt; YES           --- if the column can include NULLs
                  &lt;LI&gt; NO            --- if the column cannot include NULLs
                  &lt;LI&gt; empty string  --- if the nullability for the column is unknown
                  &lt;/UL&gt;
                  &lt;/OL&gt;
                  &lt;p&gt;The COLUMN_SIZE column specifies the column size for the given column.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. Null is returned for data types where the
                  column size is not applicable.                
                <param>
                    catalog a catalog name; must match the catalog name as it
                      is stored in the database; "" retrieves those without a catalog;
                      <code>null</code> means that the catalog name should not be used to narrow
                      the search                    
                </param>
                <param>
                    schemaPattern a schema name pattern; must match the schema name
                      as it is stored in the database; "" retrieves those without a schema;
                      <code>null</code> means that the schema name should not be used to narrow
                      the search                    
                </param>
                <param>
                    tableNamePattern a table name pattern; must match the
                      table name as it is stored in the database                    
                </param>
                <param>
                    columnNamePattern a column name pattern; must match the column
                      name as it is stored in the database                    
                </param>
                <return>
                    <code>ResultSet</code> - each row is a column description                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    PseudoColumnUsage                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="generatedKeyAlwaysReturned" type="boolean" line="3644"/>
            <javadoc line="3644">
                Retrieves whether a generated key will always be returned if the column
                  name(s) or index(es) specified for the auto generated key column(s)
                  are valid and the statement succeeds.  The key that is returned may or
                  may not be based on the column(s) for the auto generated key.
                  Consult your JDBC driver documentation for additional details.                
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>