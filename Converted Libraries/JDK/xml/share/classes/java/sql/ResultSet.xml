<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Calendar"/>
        <import package="java.io.Reader"/>
        <import package="java.io.InputStream"/>
        <interface name="ResultSet">
            <implements interface="Wrapper"/>
            <implements interface="AutoCloseable"/>
            <comment line="225">
                Methods for accessing results by column index                
            </comment>
            <comment line="510">
                Methods for accessing results by column label                
            </comment>
            <comment line="793">
                Advanced features:                
            </comment>
            <comment line="935">
                ----------------------------------------------------------------                
            </comment>
            <comment line="950">
                --------------------------JDBC 2.0-----------------------------------                
            </comment>
            <comment line="952">
                ---------------------------------------------------------------------
                 Getters and Setters
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1020">
                ---------------------------------------------------------------------
                 Traversal/Positioning
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1271">
                ---------------------------------------------------------------------
                 Properties
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1431">
                ---------------------------------------------------------------------
                 Updates
                ---------------------------------------------------------------------                
            </comment>
            <comment line="2740">
                -------------------------- JDBC 3.0 ----------------------------------------                
            </comment>
            <comment line="2946">
                ------------------------- JDBC 4.0 -----------------------------------                
            </comment>
            <comment line="3689">
                ---                
            </comment>
            <comment line="4080">
                ------------------------- JDBC 4.1 -----------------------------------                
            </comment>
            <javadoc line="33">
                A table of data representing a database result set, which
                  is usually generated by executing a statement that queries the database.
                  &lt;P&gt;A &lt;code&gt;ResultSet&lt;/code&gt; object  maintains a cursor pointing
                  to its current row of data.  Initially the cursor is positioned
                  before the first row. The &lt;code&gt;next&lt;/code&gt; method moves the
                  cursor to the next row, and because it returns &lt;code&gt;false&lt;/code&gt;
                  when there are no more rows in the &lt;code&gt;ResultSet&lt;/code&gt; object,
                  it can be used in a &lt;code&gt;while&lt;/code&gt; loop to iterate through
                  the result set.
                  &lt;P&gt;
                  A default &lt;code&gt;ResultSet&lt;/code&gt; object is not updatable and
                  has a cursor that moves forward only.  Thus, you can
                  iterate through it only once and only from the first row to the
                  last row. It is possible to
                  produce &lt;code&gt;ResultSet&lt;/code&gt; objects that are scrollable and/or
                  updatable.  The following code fragment, in which &lt;code&gt;con&lt;/code&gt;
                  is a valid &lt;code&gt;Connection&lt;/code&gt; object, illustrates how to make
                  a result set that is scrollable and insensitive to updates by others, and
                  that is updatable. See &lt;code&gt;ResultSet&lt;/code&gt; fields for other
                  options.
                  &lt;PRE&gt;
                  Statement stmt = con.createStatement(
                  ResultSet.TYPE_SCROLL_INSENSITIVE,
                  ResultSet.CONCUR_UPDATABLE);
                  ResultSet rs = stmt.executeQuery(&quot;SELECT a, b FROM TABLE2&quot;);
                  // rs will be scrollable, will not show changes made by others,
                  // and will be updatable
                  &lt;/PRE&gt;
                  The &lt;code&gt;ResultSet&lt;/code&gt; interface provides
                  &lt;i&gt;getter&lt;/i&gt; methods (&lt;code&gt;getBoolean&lt;/code&gt;, &lt;code&gt;getLong&lt;/code&gt;, and so on)
                  for retrieving column values from the current row.
                  Values can be retrieved using either the index number of the
                  column or the name of the column.  In general, using the
                  column index will be more efficient.  Columns are numbered from 1.
                  For maximum portability, result set columns within each row should be
                  read in left-to-right order, and each column should be read only once.
                  &lt;P&gt;For the getter methods, a JDBC driver attempts
                  to convert the underlying data to the Java type specified in the
                  getter method and returns a suitable Java value.  The JDBC specification
                  has a table showing the allowable mappings from SQL types to Java types
                  that can be used by the &lt;code&gt;ResultSet&lt;/code&gt; getter methods.
                  &lt;P&gt;
                  &lt;P&gt;Column names used as input to getter methods are case
                  insensitive.  When a getter method is called  with
                  a column name and several columns have the same name,
                  the value of the first matching column will be returned.
                  The column name option is
                  designed to be used when column names are used in the SQL
                  query that generated the result set.
                  For columns that are NOT explicitly named in the query, it
                  is best to use column numbers. If column names are used, the
                  programmer should take care to guarantee that they uniquely refer to
                  the intended columns, which can be assured with the SQL &lt;i&gt;AS&lt;/i&gt; clause.
                  &lt;P&gt;
                  A set of updater methods were added to this interface
                  in the JDBC 2.0 API (Java&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; 2 SDK,
                  Standard Edition, version 1.2). The comments regarding parameters
                  to the getter methods also apply to parameters to the
                  updater methods.
                  &lt;P&gt;
                  The updater methods may be used in two ways:
                  &lt;ol&gt;
                  &lt;LI&gt;to update a column value in the current row.  In a scrollable
                  &lt;code&gt;ResultSet&lt;/code&gt; object, the cursor can be moved backwards
                  and forwards, to an absolute position, or to a position
                  relative to the current row.
                  The following code fragment updates the &lt;code&gt;NAME&lt;/code&gt; column
                  in the fifth row of the &lt;code&gt;ResultSet&lt;/code&gt; object
                  &lt;code&gt;rs&lt;/code&gt; and then uses the method &lt;code&gt;updateRow&lt;/code&gt;
                  to update the data source table from which &lt;code&gt;rs&lt;/code&gt; was derived.
                  &lt;PRE&gt;
                  rs.absolute(5); // moves the cursor to the fifth row of rs
                  rs.updateString(&quot;NAME&quot;, &quot;AINSWORTH&quot;); // updates the
                  // &lt;code&gt;NAME&lt;/code&gt; column of row 5 to be &lt;code&gt;AINSWORTH&lt;/code&gt;
                  rs.updateRow(); // updates the row in the data source
                  &lt;/PRE&gt;
                  &lt;LI&gt;to insert column values into the insert row.  An updatable
                  &lt;code&gt;ResultSet&lt;/code&gt; object has a special row associated with
                  it that serves as a staging area for building a row to be inserted.
                  The following code fragment moves the cursor to the insert row, builds
                  a three-column row, and inserts it into &lt;code&gt;rs&lt;/code&gt; and into
                  the data source table using the method &lt;code&gt;insertRow&lt;/code&gt;.
                  &lt;PRE&gt;
                  rs.moveToInsertRow(); // moves cursor to the insert row
                  rs.updateString(1, &quot;AINSWORTH&quot;); // updates the
                  // first column of the insert row to be &lt;code&gt;AINSWORTH&lt;/code&gt;
                  rs.updateInt(2,35); // updates the second column to be &lt;code&gt;35&lt;/code&gt;
                  rs.updateBoolean(3, true); // updates the third column to &lt;code&gt;true&lt;/code&gt;
                  rs.insertRow();
                  rs.moveToCurrentRow();
                  &lt;/PRE&gt;
                  &lt;/ol&gt;
                  &lt;P&gt;A &lt;code&gt;ResultSet&lt;/code&gt; object is automatically closed when the
                  &lt;code&gt;Statement&lt;/code&gt; object that
                  generated it is closed, re-executed, or used
                  to retrieve the next result from a sequence of multiple results.
                  &lt;P&gt;The number, types and properties of a &lt;code&gt;ResultSet&lt;/code&gt;
                  object&apos;s columns are provided by the &lt;code&gt;ResultSetMetaData&lt;/code&gt;
                  object returned by the &lt;code&gt;ResultSet.getMetaData&lt;/code&gt; method.                
                <see>
                    Statement#executeQuery                    
                </see>
                <see>
                    Statement#getResultSet                    
                </see>
                <see>
                    ResultSetMetaData                    
                </see>
            </javadoc>
            <method name="next" type="boolean" line="150"/>
            <javadoc line="150">
                Moves the cursor froward one row from its current position.
                  A &lt;code&gt;ResultSet&lt;/code&gt; cursor is initially positioned
                  before the first row; the first call to the method
                  &lt;code&gt;next&lt;/code&gt; makes the first row the current row; the
                  second call makes the second row the current row, and so on.
                  &lt;p&gt;
                  When a call to the &lt;code&gt;next&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;,
                  the cursor is positioned after the last row. Any
                  invocation of a &lt;code&gt;ResultSet&lt;/code&gt; method which requires a
                  current row will result in a &lt;code&gt;SQLException&lt;/code&gt; being thrown.
                  If the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;, it is vendor specified
                  whether their JDBC driver implementation will return &lt;code&gt;false&lt;/code&gt; or
                  throw an &lt;code&gt;SQLException&lt;/code&gt; on a
                  subsequent call to &lt;code&gt;next&lt;/code&gt;.
                  &lt;P&gt;If an input stream is open for the current row, a call
                  to the method &lt;code&gt;next&lt;/code&gt; will
                  implicitly close it. A &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s
                  warning chain is cleared when a new row is read.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the new current row is valid;
                      &lt;code&gt;false&lt;/code&gt; if there are no more rows                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="179"/>
            <javadoc line="179">
                Releases this &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s database and
                  JDBC resources immediately instead of waiting for
                  this to happen when it is automatically closed.
                  &lt;P&gt;The closing of a &lt;code&gt;ResultSet&lt;/code&gt; object does &lt;strong&gt;not&lt;/strong&gt; close the &lt;code&gt;Blob&lt;/code&gt;,
                  &lt;code&gt;Clob&lt;/code&gt; or &lt;code&gt;NClob&lt;/code&gt; objects created by the &lt;code&gt;ResultSet&lt;/code&gt;. &lt;code&gt;Blob&lt;/code&gt;,
                  &lt;code&gt;Clob&lt;/code&gt; or &lt;code&gt;NClob&lt;/code&gt; objects remain valid for at least the duration of the
                  transaction in which they are creataed, unless their &lt;code&gt;free&lt;/code&gt; method is invoked.
                  &lt;p&gt;
                  When a &lt;code&gt;ResultSet&lt;/code&gt; is closed, any &lt;code&gt;ResultSetMetaData&lt;/code&gt;
                  instances that were created by calling the  &lt;code&gt;getMetaData&lt;/code&gt;
                  method remain accessible.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; A &lt;code&gt;ResultSet&lt;/code&gt; object
                  is automatically closed by the
                  &lt;code&gt;Statement&lt;/code&gt; object that generated it when
                  that &lt;code&gt;Statement&lt;/code&gt; object is closed,
                  re-executed, or is used to retrieve the next result from a
                  sequence of multiple results.
                  &lt;p&gt;
                  Calling the method &lt;code&gt;close&lt;/code&gt; on a &lt;code&gt;ResultSet&lt;/code&gt;
                  object that is already closed is a no-op.
                  &lt;P&gt;
                  &lt;p&gt;                
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="wasNull" type="boolean" line="209"/>
            <javadoc line="209">
                Reports whether
                  the last column read had a value of SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Note that you must first call one of the getter methods
                  on a column to try to read its value and then call
                  the method &lt;code&gt;wasNull&lt;/code&gt; to see if the value read was
                  SQL &lt;code&gt;NULL&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the last column value read was SQL
                      &lt;code&gt;NULL&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getString" type="String" line="226"/>
            <javadoc line="226">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getBoolean" type="boolean" line="240"/>
            <javadoc line="240">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                  &lt;P&gt;If the designated column has a datatype of CHAR or VARCHAR
                  and contains a &quot;0&quot; or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
                  and contains  a 0, a value of &lt;code&gt;false&lt;/code&gt; is returned.  If the designated column has a datatype
                  of CHAR or VARCHAR
                  and contains a &quot;1&quot; or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
                  and contains  a 1, a value of &lt;code&gt;true&lt;/code&gt; is returned.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getByte" type="byte" line="261"/>
            <javadoc line="261">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getShort" type="short" line="275"/>
            <javadoc line="275">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;short&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getInt" type="int" line="289"/>
            <javadoc line="289">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;int&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getLong" type="long" line="303"/>
            <javadoc line="303">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;long&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getFloat" type="float" line="317"/>
            <javadoc line="317">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;float&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getDouble" type="double" line="331"/>
            <javadoc line="331">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;double&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="345"/>
            <javadoc line="345">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt; in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBytes" type="byte[]" line="363"/>
            <javadoc line="363">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="378"/>
            <javadoc line="378">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="392"/>
            <javadoc line="392">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="406"/>
            <javadoc line="406">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="420"/>
            <javadoc line="420">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a stream of ASCII characters. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will
                  do any necessary conversion from the database format into ASCII.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream.  Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="447"/>
            <javadoc line="447">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  as a stream of two-byte 3 characters. The first byte is
                  the high byte; the second byte is the low byte.
                  The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt;values.  The
                  JDBC driver will do any necessary conversion from the database
                  format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream.
                  Also, a stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called, whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                    use &lt;code&gt;getCharacterStream&lt;/code&gt; in place of
                      &lt;code&gt;getUnicodeStream&lt;/code&gt;                    
                </deprecated>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="482"/>
            <javadoc line="482">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a  stream of
                  uninterpreted bytes. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream.  Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getString" type="String" line="511"/>
            <javadoc line="511">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getBoolean" type="boolean" line="525"/>
            <javadoc line="525">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.
                  &lt;P&gt;If the designated column has a datatype of CHAR or VARCHAR
                  and contains a &quot;0&quot; or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
                  and contains  a 0, a value of &lt;code&gt;false&lt;/code&gt; is returned.  If the designated column has a datatype
                  of CHAR or VARCHAR
                  and contains a &quot;1&quot; or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT
                  and contains  a 1, a value of &lt;code&gt;true&lt;/code&gt; is returned.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getByte" type="byte" line="546"/>
            <javadoc line="546">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getShort" type="short" line="560"/>
            <javadoc line="560">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;short&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getInt" type="int" line="574"/>
            <javadoc line="574">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;int&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getLong" type="long" line="588"/>
            <javadoc line="588">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;long&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getFloat" type="float" line="602"/>
            <javadoc line="602">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;float&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getDouble" type="double" line="616"/>
            <javadoc line="616">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;double&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="630"/>
            <javadoc line="630">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBytes" type="byte[]" line="648"/>
            <javadoc line="648">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="663"/>
            <javadoc line="663">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="677"/>
            <javadoc line="677">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="692"/>
            <javadoc line="692">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="706"/>
            <javadoc line="706">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of
                  ASCII characters. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will
                  do any necessary conversion from the database format into ASCII.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters.
                      If the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="732"/>
            <javadoc line="732">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of two-byte
                  Unicode characters. The first byte is the high byte; the second
                  byte is the low byte.
                  The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC technology-enabled driver will
                  do any necessary conversion from the database format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream.
                  Also, a stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt; is called, whether there
                  is data available or not.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.
                      If the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                    use &lt;code&gt;getCharacterStream&lt;/code&gt; instead                    
                </deprecated>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="765"/>
            <javadoc line="765">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of uninterpreted
                  &lt;code&gt;byte&lt;/code&gt;s.
                  The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a getter method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getWarnings" type="SQLWarning" line="794"/>
            <javadoc line="794">
                Retrieves the first warning reported by calls on this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  Subsequent warnings on this &lt;code&gt;ResultSet&lt;/code&gt; object
                  will be chained to the &lt;code&gt;SQLWarning&lt;/code&gt; object that
                  this method returns.
                  &lt;P&gt;The warning chain is automatically cleared each time a new
                  row is read.  This method may not be called on a &lt;code&gt;ResultSet&lt;/code&gt;
                  object that has been closed; doing so will cause an
                  &lt;code&gt;SQLException&lt;/code&gt; to be thrown.
                  &lt;P&gt;
                  &lt;B&gt;Note:&lt;/B&gt; This warning chain only covers warnings caused
                  by &lt;code&gt;ResultSet&lt;/code&gt; methods.  Any warning caused by
                  &lt;code&gt;Statement&lt;/code&gt; methods
                  (such as reading OUT parameters) will be chained on the
                  &lt;code&gt;Statement&lt;/code&gt; object.                
                <return>
                    the first &lt;code&gt;SQLWarning&lt;/code&gt; object reported or
                      &lt;code&gt;null&lt;/code&gt; if there are none                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="clearWarnings" type="void" line="819"/>
            <javadoc line="819">
                Clears all warnings reported on this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  After this method is called, the method &lt;code&gt;getWarnings&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt; until a new warning is
                  reported for this &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getCursorName" type="String" line="830"/>
            <javadoc line="830">
                Retrieves the name of the SQL cursor used by this &lt;code&gt;ResultSet&lt;/code&gt;
                  object.
                  &lt;P&gt;In SQL, a result table is retrieved through a cursor that is
                  named. The current row of a result set can be updated or deleted
                  using a positioned update/delete statement that references the
                  cursor name. To insure that the cursor has the proper isolation
                  level to support update, the cursor&apos;s &lt;code&gt;SELECT&lt;/code&gt; statement
                  should be of the form &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;. If
                  &lt;code&gt;FOR UPDATE&lt;/code&gt; is omitted, the positioned updates may fail.
                  &lt;P&gt;The JDBC API supports this SQL feature by providing the name of the
                  SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The current row of a &lt;code&gt;ResultSet&lt;/code&gt; object
                  is also the current row of this SQL cursor.                
                <return>
                    the SQL name for this &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s cursor                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
            </javadoc>
            <method name="getMetaData" type="ResultSetMetaData" line="854"/>
            <javadoc line="854">
                Retrieves the  number, types and properties of
                  this &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s columns.                
                <return>
                    the description of this &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s columns                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getObject" type="Object" line="864"/>
            <javadoc line="864">
                &lt;p&gt;Gets the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;Object&lt;/code&gt; in the Java programming language.
                  &lt;p&gt;This method will return the value of the given column as a
                  Java object.  The type of the Java object will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,
                  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;This method may also be used to read database-specific
                  abstract data types.
                  In the JDBC 2.0 API, the behavior of method
                  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize
                  data of SQL user-defined types.
                  &lt;p&gt;
                  If &lt;code&gt;Connection.getTypeMap&lt;/code&gt; does not throw a
                  &lt;code&gt;SQLFeatureNotSupportedException&lt;/code&gt;,
                  then when a column contains a structured or distinct value,
                  the behavior of this method is as
                  if it were a call to: &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.
                  If &lt;code&gt;Connection.getTypeMap&lt;/code&gt; does throw a
                  &lt;code&gt;SQLFeatureNotSupportedException&lt;/code&gt;,
                  then structured values are not supported, and distinct values
                  are mapped to the default Java class as determined by the
                  underlying SQL type of the DISTINCT type.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;java.lang.Object&lt;/code&gt; holding the column value                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getObject" type="Object" line="904"/>
            <javadoc line="904">
                &lt;p&gt;Gets the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;Object&lt;/code&gt; in the Java programming language.
                  &lt;p&gt;This method will return the value of the given column as a
                  Java object.  The type of the Java object will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,
                  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  &lt;P&gt;
                  This method may also be used to read database-specific
                  abstract data types.
                  &lt;P&gt;
                  In the JDBC 2.0 API, the behavior of the method
                  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize
                  data of SQL user-defined types.  When a column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to: &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;java.lang.Object&lt;/code&gt; holding the column value                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
            </javadoc>
            <method name="findColumn" type="int" line="936"/>
            <javadoc line="936">
                Maps the given &lt;code&gt;ResultSet&lt;/code&gt; column label to its
                  &lt;code&gt;ResultSet&lt;/code&gt; column index.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column index of the given column name                    
                </return>
                <exception>
                    SQLException if the &lt;code&gt;ResultSet&lt;/code&gt; object
                      does not contain a column labeled &lt;code&gt;columnLabel&lt;/code&gt;, a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="955"/>
            <javadoc line="955">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.                
                <return>
                    a &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the column
                      value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language.                    
                </return>
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="970"/>
            <javadoc line="970">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the column
                      value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="986"/>
            <javadoc line="986">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value (full precision);
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language.                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1002"/>
            <javadoc line="1002">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value (full precision);
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language.                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isBeforeFirst" type="boolean" line="1023"/>
            <javadoc line="1023">
                Retrieves whether the cursor is before the first row in
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isBeforeFirst&lt;/code&gt; method
                  is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result
                  set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is before the first row;
                      &lt;code&gt;false&lt;/code&gt; if the cursor is at any other position or the
                      result set contains no rows                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isAfterLast" type="boolean" line="1042"/>
            <javadoc line="1042">
                Retrieves whether the cursor is after the last row in
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isAfterLast&lt;/code&gt; method
                  is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result
                  set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is after the last row;
                      &lt;code&gt;false&lt;/code&gt; if the cursor is at any other position or the
                      result set contains no rows                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isFirst" type="boolean" line="1061"/>
            <javadoc line="1061">
                Retrieves whether the cursor is on the first row of
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;isFirst&lt;/code&gt; method
                  is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result
                  set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on the first row;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isLast" type="boolean" line="1079"/>
            <javadoc line="1079">
                Retrieves whether the cursor is on the last row of
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;strong&gt;Note:&lt;/strong&gt; Calling the method &lt;code&gt;isLast&lt;/code&gt; may be expensive
                  because the JDBC driver
                  might need to fetch ahead one row in order to determine
                  whether the current row is the last row in the result set.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;isLast&lt;/code&gt; method
                  is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result
                  set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on the last row;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs or this method is
                      called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="beforeFirst" type="void" line="1100"/>
            <javadoc line="1100">
                Moves the cursor to the front of
                  this &lt;code&gt;ResultSet&lt;/code&gt; object, just before the
                  first row. This method has no effect if the result set contains no rows.                
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set or the
                      result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="afterLast" type="void" line="1114"/>
            <javadoc line="1114">
                Moves the cursor to the end of
                  this &lt;code&gt;ResultSet&lt;/code&gt; object, just after the
                  last row. This method has no effect if the result set contains no rows.                
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set
                      or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="first" type="boolean" line="1127"/>
            <javadoc line="1127">
                Moves the cursor to the first row in
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;
                      &lt;code&gt;false&lt;/code&gt; if there are no rows in the result set                    
                </return>
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set
                      or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="last" type="boolean" line="1142"/>
            <javadoc line="1142">
                Moves the cursor to the last row in
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;
                      &lt;code&gt;false&lt;/code&gt; if there are no rows in the result set                    
                </return>
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set
                      or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRow" type="int" line="1157"/>
            <javadoc line="1157">
                Retrieves the current row number.  The first row is number 1, the
                  second number 2, and so on.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;Support for the &lt;code&gt;getRow&lt;/code&gt; method
                  is optional for &lt;code&gt;ResultSet&lt;/code&gt;s with a result
                  set type of &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                
                <return>
                    the current row number; &lt;code&gt;0&lt;/code&gt; if there is no current row                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="absolute" type="boolean" line="1174"/>
            <javadoc line="1174">
                Moves the cursor to the given row number in
                  this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;If the row number is positive, the cursor moves to
                  the given row number with respect to the
                  beginning of the result set.  The first row is row 1, the second
                  is row 2, and so on.
                  &lt;p&gt;If the given row number is negative, the cursor moves to
                  an absolute row position with respect to
                  the end of the result set.  For example, calling the method
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the
                  cursor on the last row; calling the method &lt;code&gt;absolute(-2)&lt;/code&gt;
                  moves the cursor to the next-to-last row, and so on.
                  &lt;p&gt;If the row number specified is zero, the cursor is moved to
                  before the first row.
                  &lt;p&gt;An attempt to position the cursor beyond the first/last row in
                  the result set leaves the cursor before the first row or after
                  the last row.
                  &lt;p&gt;&lt;B&gt;Note:&lt;/B&gt; Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same
                  as calling &lt;code&gt;first()&lt;/code&gt;. Calling &lt;code&gt;absolute(-1)&lt;/code&gt;
                  is the same as calling &lt;code&gt;last()&lt;/code&gt;.                
                <param>
                    row the number of the row to which the cursor should move.
                      A value of zero indicates that the cursor will be positioned
                      before the first row; a positive number indicates the row number
                      counting from the beginning of the result set; a negative number
                      indicates the row number counting from the end of the result set                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is moved to a position in this
                      &lt;code&gt;ResultSet&lt;/code&gt; object;
                      &lt;code&gt;false&lt;/code&gt; if the cursor is before the first row or after the
                      last row                    
                </return>
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set
                      or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="relative" type="boolean" line="1219"/>
            <javadoc line="1219">
                Moves the cursor a relative number of rows, either positive or negative.
                  Attempting to move beyond the first/last row in the
                  result set positions the cursor before/after the
                  the first/last row. Calling &lt;code&gt;relative(0)&lt;/code&gt; is valid, but does
                  not change the cursor position.
                  &lt;p&gt;Note: Calling the method &lt;code&gt;relative(1)&lt;/code&gt;
                  is identical to calling the method &lt;code&gt;next()&lt;/code&gt; and
                  calling the method &lt;code&gt;relative(-1)&lt;/code&gt; is identical
                  to calling the method &lt;code&gt;previous()&lt;/code&gt;.                
                <param>
                    rows an &lt;code&gt;int&lt;/code&gt; specifying the number of rows to
                      move from the current row; a positive number moves the cursor
                      forward; a negative number moves the cursor backward                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a row;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs;  this method
                      is called on a closed result set or the result set type is
                      &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="previous" type="boolean" line="1245"/>
            <javadoc line="1245">
                Moves the cursor to the previous row in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;
                  When a call to the &lt;code&gt;previous&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;,
                  the cursor is positioned before the first row.  Any invocation of a
                  &lt;code&gt;ResultSet&lt;/code&gt; method which requires a current row will result in a
                  &lt;code&gt;SQLException&lt;/code&gt; being thrown.
                  &lt;p&gt;
                  If an input stream is open for the current row, a call to the method
                  &lt;code&gt;previous&lt;/code&gt; will implicitly close it.  A &lt;code&gt;ResultSet&lt;/code&gt;
                  object&apos;s warning change is cleared when a new row is read.
                  &lt;p&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is now positioned on a valid row;
                      &lt;code&gt;false&lt;/code&gt; if the cursor is positioned before the first row                    
                </return>
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set
                      or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="FETCH_FORWARD" type="int" line="1274"/>
            <javadoc line="1274">
                The constant indicating that the rows in a result set will be
                  processed in a forward direction; first-to-last.
                  This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;
                  as a hint to the driver, which the driver may ignore.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="FETCH_REVERSE" type="int" line="1283"/>
            <javadoc line="1283">
                The constant indicating that the rows in a result set will be
                  processed in a reverse direction; last-to-first.
                  This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;
                  as a hint to the driver, which the driver may ignore.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="FETCH_UNKNOWN" type="int" line="1292"/>
            <javadoc line="1292">
                The constant indicating that the order in which rows in a
                  result set will be processed is unknown.
                  This constant is used by the method &lt;code&gt;setFetchDirection&lt;/code&gt;
                  as a hint to the driver, which the driver may ignore.                
            </javadoc>
            <method name="setFetchDirection" type="void" line="1300"/>
            <javadoc line="1300">
                Gives a hint as to the direction in which the rows in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object will be processed.
                  The initial value is determined by the
                  &lt;code&gt;Statement&lt;/code&gt; object
                  that produced this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The fetch direction may be changed at any time.                
                <param>
                    direction an &lt;code&gt;int&lt;/code&gt; specifying the suggested
                      fetch direction; one of &lt;code&gt;ResultSet.FETCH_FORWARD&lt;/code&gt;,
                      &lt;code&gt;ResultSet.FETCH_REVERSE&lt;/code&gt;, or
                      &lt;code&gt;ResultSet.FETCH_UNKNOWN&lt;/code&gt;                    
                </param>
                <exception>
                    SQLException if a database access error occurs; this
                      method is called on a closed result set or
                      the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; and the fetch
                      direction is not &lt;code&gt;FETCH_FORWARD&lt;/code&gt;                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    Statement#setFetchDirection                    
                </see>
                <see>
                    #getFetchDirection                    
                </see>
            </javadoc>
            <method name="getFetchDirection" type="int" line="1322"/>
            <javadoc line="1322">
                Retrieves the fetch direction for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    the current fetch direction for this &lt;code&gt;ResultSet&lt;/code&gt; object                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #setFetchDirection                    
                </see>
            </javadoc>
            <method name="setFetchSize" type="void" line="1334"/>
            <javadoc line="1334">
                Gives the JDBC driver a hint as to the number of rows that should
                  be fetched from the database when more rows are needed for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  If the fetch size specified is zero, the JDBC driver
                  ignores the value and is free to make its own best guess as to what
                  the fetch size should be.  The default value is set by the
                  &lt;code&gt;Statement&lt;/code&gt; object
                  that created the result set.  The fetch size may be changed at any time.                
                <param>
                    rows the number of rows to fetch                    
                </param>
                <exception>
                    SQLException if a database access error occurs; this method
                      is called on a closed result set or the
                      condition &lt;code&gt;rows &gt;= 0 &lt;/code&gt; is not satisfied                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #getFetchSize                    
                </see>
            </javadoc>
            <method name="getFetchSize" type="int" line="1353"/>
            <javadoc line="1353">
                Retrieves the fetch size for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    the current fetch size for this &lt;code&gt;ResultSet&lt;/code&gt; object                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #setFetchSize                    
                </see>
            </javadoc>
            <declaration name="TYPE_FORWARD_ONLY" type="int" line="1365"/>
            <javadoc line="1365">
                The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object
                  whose cursor may move only forward.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_SCROLL_INSENSITIVE" type="int" line="1372"/>
            <javadoc line="1372">
                The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object
                  that is scrollable but generally not sensitive to changes to the data
                  that underlies the &lt;code&gt;ResultSet&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_SCROLL_SENSITIVE" type="int" line="1380"/>
            <javadoc line="1380">
                The constant indicating the type for a &lt;code&gt;ResultSet&lt;/code&gt; object
                  that is scrollable and generally sensitive to changes to the data
                  that underlies the &lt;code&gt;ResultSet&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getType" type="int" line="1388"/>
            <javadoc line="1388">
                Retrieves the type of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The type is determined by the &lt;code&gt;Statement&lt;/code&gt; object
                  that created the result set.                
                <return>
                    &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;,
                      &lt;code&gt;ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code&gt;,
                      or &lt;code&gt;ResultSet.TYPE_SCROLL_SENSITIVE&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="CONCUR_READ_ONLY" type="int" line="1402"/>
            <javadoc line="1402">
                The constant indicating the concurrency mode for a
                  &lt;code&gt;ResultSet&lt;/code&gt; object that may NOT be updated.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="CONCUR_UPDATABLE" type="int" line="1409"/>
            <javadoc line="1409">
                The constant indicating the concurrency mode for a
                  &lt;code&gt;ResultSet&lt;/code&gt; object that may be updated.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getConcurrency" type="int" line="1416"/>
            <javadoc line="1416">
                Retrieves the concurrency mode of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The concurrency used is determined by the
                  &lt;code&gt;Statement&lt;/code&gt; object that created the result set.                
                <return>
                    the concurrency type, either
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;
                      or &lt;code&gt;ResultSet.CONCUR_UPDATABLE&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="rowUpdated" type="boolean" line="1434"/>
            <javadoc line="1434">
                Retrieves whether the current row has been updated.  The value returned
                  depends on whether or not the result set can detect updates.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowUpdated&lt;/code&gt; method is optional with a result set
                  concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current row is detected to
                      have been visibly updated by the owner or another; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="rowInserted" type="boolean" line="1451"/>
            <javadoc line="1451">
                Retrieves whether the current row has had an insertion.
                  The value returned depends on whether or not this
                  &lt;code&gt;ResultSet&lt;/code&gt; object can detect visible inserts.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowInserted&lt;/code&gt; method is optional with a result set
                  concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current row is detected to
                      have been inserted; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    DatabaseMetaData#insertsAreDetected                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="rowDeleted" type="boolean" line="1470"/>
            <javadoc line="1470">
                Retrieves whether a row has been deleted.  A deleted row may leave
                  a visible &quot;hole&quot; in a result set.  This method can be used to
                  detect holes in a result set.  The value returned depends on whether
                  or not this &lt;code&gt;ResultSet&lt;/code&gt; object can detect deletions.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt; Support for the &lt;code&gt;rowDeleted&lt;/code&gt; method is optional with a result set
                  concurrency of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current row is detected to
                      have been deleted by the owner or another; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    DatabaseMetaData#deletesAreDetected                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateNull" type="void" line="1490"/>
            <javadoc line="1490">
                Updates the designated column with a &lt;code&gt;null&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt;
                  or &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBoolean" type="void" line="1509"/>
            <javadoc line="1509">
                Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateByte" type="void" line="1528"/>
            <javadoc line="1528">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateShort" type="void" line="1548"/>
            <javadoc line="1548">
                Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateInt" type="void" line="1567"/>
            <javadoc line="1567">
                Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateLong" type="void" line="1586"/>
            <javadoc line="1586">
                Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateFloat" type="void" line="1605"/>
            <javadoc line="1605">
                Updates the designated column with a &lt;code&gt;float&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateDouble" type="void" line="1624"/>
            <javadoc line="1624">
                Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="1643"/>
            <javadoc line="1643">
                Updates the designated column with a &lt;code&gt;java.math.BigDecimal&lt;/code&gt;
                  value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateString" type="void" line="1663"/>
            <javadoc line="1663">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBytes" type="void" line="1682"/>
            <javadoc line="1682">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; array value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateDate" type="void" line="1701"/>
            <javadoc line="1701">
                Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateTime" type="void" line="1720"/>
            <javadoc line="1720">
                Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateTimestamp" type="void" line="1739"/>
            <javadoc line="1739">
                Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="1760"/>
            <javadoc line="1760">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="1783"/>
            <javadoc line="1783">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="1806"/>
            <javadoc line="1806">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateObject" type="void" line="1829"/>
            <javadoc line="1829">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;p&gt;
                  If the second argument is an &lt;code&gt;InputStream&lt;/code&gt; then the stream must contain
                  the number of bytes specified by scaleOrLength.  If the second argument is a
                  &lt;code&gt;Reader&lt;/code&gt; then the reader must contain the number of characters specified
                  by scaleOrLength. If these conditions are not true the driver will generate a
                  &lt;code&gt;SQLException&lt;/code&gt; when the statement is executed.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scaleOrLength for an object of &lt;code&gt;java.math.BigDecimal&lt;/code&gt; ,
                      this is the number of digits after the decimal point. For
                      Java Object types &lt;code&gt;InputStream&lt;/code&gt; and &lt;code&gt;Reader&lt;/code&gt;,
                      this is the length
                      of the data in the stream or reader.  For all other types,
                      this value will be ignored.                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateObject" type="void" line="1861"/>
            <javadoc line="1861">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateNull" type="void" line="1880"/>
            <javadoc line="1880">
                Updates the designated column with a &lt;code&gt;null&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBoolean" type="void" line="1898"/>
            <javadoc line="1898">
                Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateByte" type="void" line="1917"/>
            <javadoc line="1917">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateShort" type="void" line="1936"/>
            <javadoc line="1936">
                Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateInt" type="void" line="1955"/>
            <javadoc line="1955">
                Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateLong" type="void" line="1974"/>
            <javadoc line="1974">
                Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateFloat" type="void" line="1993"/>
            <javadoc line="1993">
                Updates the designated column with a &lt;code&gt;float &lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateDouble" type="void" line="2012"/>
            <javadoc line="2012">
                Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="2031"/>
            <javadoc line="2031">
                Updates the designated column with a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt;
                  value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateString" type="void" line="2051"/>
            <javadoc line="2051">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBytes" type="void" line="2070"/>
            <javadoc line="2070">
                Updates the designated column with a byte array value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt;
                  or &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateDate" type="void" line="2090"/>
            <javadoc line="2090">
                Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateTime" type="void" line="2109"/>
            <javadoc line="2109">
                Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateTimestamp" type="void" line="2128"/>
            <javadoc line="2128">
                Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="2149"/>
            <javadoc line="2149">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="2172"/>
            <javadoc line="2172">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="2195"/>
            <javadoc line="2195">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object containing
                      the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateObject" type="void" line="2219"/>
            <javadoc line="2219">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;p&gt;
                  If the second argument is an &lt;code&gt;InputStream&lt;/code&gt; then the stream must contain
                  the number of bytes specified by scaleOrLength.  If the second argument is a
                  &lt;code&gt;Reader&lt;/code&gt; then the reader must contain the number of characters specified
                  by scaleOrLength. If these conditions are not true the driver will generate a
                  &lt;code&gt;SQLException&lt;/code&gt; when the statement is executed.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scaleOrLength for an object of &lt;code&gt;java.math.BigDecimal&lt;/code&gt; ,
                      this is the number of digits after the decimal point. For
                      Java Object types &lt;code&gt;InputStream&lt;/code&gt; and &lt;code&gt;Reader&lt;/code&gt;,
                      this is the length
                      of the data in the stream or reader.  For all other types,
                      this value will be ignored.                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateObject" type="void" line="2251"/>
            <javadoc line="2251">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="insertRow" type="void" line="2270"/>
            <javadoc line="2270">
                Inserts the contents of the insert row into this
                  &lt;code&gt;ResultSet&lt;/code&gt; object and into the database.
                  The cursor must be on the insert row when this method is called.                
                <exception>
                    SQLException if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;,
                      this method is called on a closed result set,
                      if this method is called when the cursor is not on the insert row,
                      or if not all of non-nullable columns in
                      the insert row have been given a non-null value                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="updateRow" type="void" line="2287"/>
            <javadoc line="2287">
                Updates the underlying database with the new contents of the
                  current row of this &lt;code&gt;ResultSet&lt;/code&gt; object.
                  This method cannot be called when the cursor is on the insert row.                
                <exception>
                    SQLException if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;;
                      this method is called on a closed result set or
                      if this method is called when the cursor is on the insert row                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deleteRow" type="void" line="2302"/>
            <javadoc line="2302">
                Deletes the current row from this &lt;code&gt;ResultSet&lt;/code&gt; object
                  and from the underlying database.  This method cannot be called when
                  the cursor is on the insert row.                
                <exception>
                    SQLException if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;;
                      this method is called on a closed result set
                      or if this method is called when the cursor is on the insert row                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="refreshRow" type="void" line="2317"/>
            <javadoc line="2317">
                Refreshes the current row with its most recent value in
                  the database.  This method cannot be called when
                  the cursor is on the insert row.
                  &lt;P&gt;The &lt;code&gt;refreshRow&lt;/code&gt; method provides a way for an
                  application to
                  explicitly tell the JDBC driver to refetch a row(s) from the
                  database.  An application may want to call &lt;code&gt;refreshRow&lt;/code&gt; when
                  caching or prefetching is being done by the JDBC driver to
                  fetch the latest value of a row from the database.  The JDBC driver
                  may actually refresh multiple rows at once if the fetch size is
                  greater than one.
                  &lt;P&gt; All values are refetched subject to the transaction isolation
                  level and cursor sensitivity.  If &lt;code&gt;refreshRow&lt;/code&gt; is called after
                  calling an updater method, but before calling
                  the method &lt;code&gt;updateRow&lt;/code&gt;, then the
                  updates made to the row are lost.  Calling the method
                  &lt;code&gt;refreshRow&lt;/code&gt; frequently will likely slow performance.                
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set;
                      the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt; or if this
                      method is called when the cursor is on the insert row                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type and result set concurrency.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="cancelRowUpdates" type="void" line="2349"/>
            <javadoc line="2349">
                Cancels the updates made to the current row in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  This method may be called after calling an
                  updater method(s) and before calling
                  the method &lt;code&gt;updateRow&lt;/code&gt; to roll back
                  the updates made to a row.  If no updates have been made or
                  &lt;code&gt;updateRow&lt;/code&gt; has already been called, this method has no
                  effect.                
                <exception>
                    SQLException if a database access error
                      occurs; this method is called on a closed result set;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or if this method is called when the cursor is
                      on the insert row                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="moveToInsertRow" type="void" line="2370"/>
            <javadoc line="2370">
                Moves the cursor to the insert row.  The current cursor position is
                  remembered while the cursor is positioned on the insert row.
                  The insert row is a special row associated with an updatable
                  result set.  It is essentially a buffer where a new row may
                  be constructed by calling the updater methods prior to
                  inserting the row into the result set.
                  Only the updater, getter,
                  and &lt;code&gt;insertRow&lt;/code&gt; methods may be
                  called when the cursor is on the insert row.  All of the columns in
                  a result set must be given a value each time this method is
                  called before calling &lt;code&gt;insertRow&lt;/code&gt;.
                  An updater method must be called before a
                  getter method can be called on a column value.                
                <exception>
                    SQLException if a database access error occurs; this
                      method is called on a closed result set
                      or the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="moveToCurrentRow" type="void" line="2396"/>
            <javadoc line="2396">
                Moves the cursor to the remembered cursor position, usually the
                  current row.  This method has no effect if the cursor is not on
                  the insert row.                
                <exception>
                    SQLException if a database access error occurs; this
                      method is called on a closed result set
                      or the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getStatement" type="Statement" line="2410"/>
            <javadoc line="2410">
                Retrieves the &lt;code&gt;Statement&lt;/code&gt; object that produced this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  If the result set was generated some other way, such as by a
                  &lt;code&gt;DatabaseMetaData&lt;/code&gt; method, this method  may return
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;Statment&lt;/code&gt; object that produced
                      this &lt;code&gt;ResultSet&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt;
                      if the result set was produced some other way                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="2426"/>
            <javadoc line="2426">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;
                  in the Java programming language.
                  If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,
                  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  This method uses the given &lt;code&gt;Map&lt;/code&gt; object
                  for the custom mapping of the
                  SQL structured or distinct type that is being retrieved.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    map a &lt;code&gt;java.util.Map&lt;/code&gt; object that contains the mapping
                      from SQL type names to classes in the Java programming language                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; in the Java programming language
                      representing the SQL value                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRef" type="Ref" line="2451"/>
            <javadoc line="2451">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;Ref&lt;/code&gt; object representing an SQL &lt;code&gt;REF&lt;/code&gt;
                      value                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBlob" type="Blob" line="2468"/>
            <javadoc line="2468">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;Blob&lt;/code&gt; object representing the SQL
                      &lt;code&gt;BLOB&lt;/code&gt; value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getClob" type="Clob" line="2485"/>
            <javadoc line="2485">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;Clob&lt;/code&gt; object representing the SQL
                      &lt;code&gt;CLOB&lt;/code&gt; value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Array" line="2502"/>
            <javadoc line="2502">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    an &lt;code&gt;Array&lt;/code&gt; object representing the SQL
                      &lt;code&gt;ARRAY&lt;/code&gt; value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="2519"/>
            <javadoc line="2519">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;
                  in the Java programming language.
                  If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,
                  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  This method uses the specified &lt;code&gt;Map&lt;/code&gt; object for
                  custom mapping if appropriate.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    map a &lt;code&gt;java.util.Map&lt;/code&gt; object that contains the mapping
                      from SQL type names to classes in the Java programming language                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; representing the SQL value in the
                      specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRef" type="Ref" line="2543"/>
            <javadoc line="2543">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;Ref&lt;/code&gt; object representing the SQL &lt;code&gt;REF&lt;/code&gt;
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBlob" type="Blob" line="2560"/>
            <javadoc line="2560">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;Blob&lt;/code&gt; object representing the SQL &lt;code&gt;BLOB&lt;/code&gt;
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getClob" type="Clob" line="2577"/>
            <javadoc line="2577">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;Clob&lt;/code&gt; object representing the SQL &lt;code&gt;CLOB&lt;/code&gt;
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Array" line="2594"/>
            <javadoc line="2594">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    an &lt;code&gt;Array&lt;/code&gt; object representing the SQL &lt;code&gt;ARRAY&lt;/code&gt; value in
                      the specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="2611"/>
            <javadoc line="2611">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the date                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Date&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="2632"/>
            <javadoc line="2632">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the date                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Date&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="2653"/>
            <javadoc line="2653">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the time if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the time                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Time&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="2674"/>
            <javadoc line="2674">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the time if the underlying database does not store
                  timezone information.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the time                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Time&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="2695"/>
            <javadoc line="2695">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the timestamp if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the timestamp                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="2717"/>
            <javadoc line="2717">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object
                  in the Java programming language.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the timestamp if the underlying database does not store
                  timezone information.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object
                      to use in constructing the date                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid or
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="HOLD_CURSORS_OVER_COMMIT" type="int" line="2741"/>
            <javadoc line="2741">
                The constant indicating that open &lt;code&gt;ResultSet&lt;/code&gt; objects with this
                  holdability will remain open when the current transaction is commited.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="CLOSE_CURSORS_AT_COMMIT" type="int" line="2749"/>
            <javadoc line="2749">
                The constant indicating that open &lt;code&gt;ResultSet&lt;/code&gt; objects with this
                  holdability will be closed when the current transaction is commited.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="2757"/>
            <javadoc line="2757">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt;
                  object in the Java programming language.                
                <param>
                    columnIndex the index of the column 1 is the first, 2 is the second,...                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.net.URL&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs; this method
                      is called on a closed result set or if a URL is malformed                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="2775"/>
            <javadoc line="2775">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt;
                  object in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value as a &lt;code&gt;java.net.URL&lt;/code&gt; object;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the value returned is &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs; this method
                      is called on a closed result set or if a URL is malformed                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateRef" type="void" line="2793"/>
            <javadoc line="2793">
                Updates the designated column with a &lt;code&gt;java.sql.Ref&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateRef" type="void" line="2812"/>
            <javadoc line="2812">
                Updates the designated column with a &lt;code&gt;java.sql.Ref&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="2831"/>
            <javadoc line="2831">
                Updates the designated column with a &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="2850"/>
            <javadoc line="2850">
                Updates the designated column with a &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="2869"/>
            <javadoc line="2869">
                Updates the designated column with a &lt;code&gt;java.sql.Clob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="2888"/>
            <javadoc line="2888">
                Updates the designated column with a &lt;code&gt;java.sql.Clob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateArray" type="void" line="2907"/>
            <javadoc line="2907">
                Updates the designated column with a &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateArray" type="void" line="2926"/>
            <javadoc line="2926">
                Updates the designated column with a &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="2947"/>
            <javadoc line="2947">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.RowId&lt;/code&gt; object in the Java
                  programming language.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <return>
                    the column value; if the value is a SQL &lt;code&gt;NULL&lt;/code&gt; the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="2964"/>
            <javadoc line="2964">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.RowId&lt;/code&gt; object in the Java
                  programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value ; if the value is a SQL &lt;code&gt;NULL&lt;/code&gt; the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="2981"/>
            <javadoc line="2981">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    x the column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="3000"/>
            <javadoc line="3000">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getHoldability" type="int" line="3019"/>
            <javadoc line="3019">
                Retrieves the holdability of this &lt;code&gt;ResultSet&lt;/code&gt; object                
                <return>
                    either &lt;code&gt;ResultSet.HOLD_CURSORS_OVER_COMMIT&lt;/code&gt; or &lt;code&gt;ResultSet.CLOSE_CURSORS_AT_COMMIT&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this method is called on a closed result set                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="3028"/>
            <javadoc line="3028">
                Retrieves whether this &lt;code&gt;ResultSet&lt;/code&gt; object has been closed. A &lt;code&gt;ResultSet&lt;/code&gt; is closed if the
                  method close has been called on it, or if it is automatically closed.                
                <return>
                    true if this &lt;code&gt;ResultSet&lt;/code&gt; object is closed; false if it is still open                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="3038"/>
            <javadoc line="3038">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  It is intended for use when updating &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or if a database access error occurs                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="3061"/>
            <javadoc line="3061">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  It is intended for use when updating &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      the result set concurrency is &lt;CODE&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or if a database access error occurs                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="3084"/>
            <javadoc line="3084">
                Updates the designated column with a &lt;code&gt;java.sql.NClob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    nClob the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="3105"/>
            <javadoc line="3105">
                Updates the designated column with a &lt;code&gt;java.sql.NClob&lt;/code&gt; value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    nClob the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="3126"/>
            <javadoc line="3126">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;NClob&lt;/code&gt; object representing the SQL
                      &lt;code&gt;NCLOB&lt;/code&gt; value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set
                      or if a database access error occurs                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="3145"/>
            <javadoc line="3145">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;NClob&lt;/code&gt; object representing the SQL &lt;code&gt;NCLOB&lt;/code&gt;
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set
                      or if a database access error occurs                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="3164"/>
            <javadoc line="3164">
                Retrieves the value of the designated column in  the current row of
                  this &lt;code&gt;ResultSet&lt;/code&gt; as a
                  &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a &lt;code&gt;SQLXML&lt;/code&gt; object that maps an &lt;code&gt;SQL XML&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="3179"/>
            <javadoc line="3179">
                Retrieves the value of the designated column in  the current row of
                  this &lt;code&gt;ResultSet&lt;/code&gt; as a
                  &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;SQLXML&lt;/code&gt; object that maps an &lt;code&gt;SQL XML&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="3193"/>
            <javadoc line="3193">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.
                  &lt;p&gt;                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    xmlObject the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs; this method
                      is called on a closed result set;
                      the &lt;code&gt;java.xml.transform.Result&lt;/code&gt;,
                      &lt;code&gt;Writer&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; has not been closed
                      for the &lt;code&gt;SQLXML&lt;/code&gt; object;
                      if there is an error processing the XML value or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.  The &lt;code&gt;getCause&lt;/code&gt; method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="3219"/>
            <javadoc line="3219">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.
                  &lt;p&gt;                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    xmlObject the column value                    
                </param>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs; this method
                      is called on a closed result set;
                      the &lt;code&gt;java.xml.transform.Result&lt;/code&gt;,
                      &lt;code&gt;Writer&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; has not been closed
                      for the &lt;code&gt;SQLXML&lt;/code&gt; object;
                      if there is an error processing the XML value or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.  The &lt;code&gt;getCause&lt;/code&gt; method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="3246"/>
            <javadoc line="3246">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="3267"/>
            <javadoc line="3267">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      value returned is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="3288"/>
            <javadoc line="3288">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <return>
                    a &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the column
                      value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language.                    
                </return>
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="3309"/>
            <javadoc line="3309">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <return>
                    a &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the column
                      value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the value returned is
                      &lt;code&gt;null&lt;/code&gt; in the Java programming language                    
                </return>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="3330"/>
            <javadoc line="3330">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.   The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="3358"/>
            <javadoc line="3358">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.  The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object containing
                      the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="3386"/>
            <javadoc line="3386">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="3410"/>
            <javadoc line="3410">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="3434"/>
            <javadoc line="3434">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="3457"/>
            <javadoc line="3457">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="3481"/>
            <javadoc line="3481">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="3505"/>
            <javadoc line="3505">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object containing
                      the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="3529"/>
            <javadoc line="3529">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="3553"/>
            <javadoc line="3553">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="3577"/>
            <javadoc line="3577">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="3604"/>
            <javadoc line="3604">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="3630"/>
            <javadoc line="3630">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="3659"/>
            <javadoc line="3659">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the columnLabel is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="3690"/>
            <javadoc line="3690">
                Updates the designated column with a character stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="3721"/>
            <javadoc line="3721">
                Updates the designated column with a character stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="3752"/>
            <javadoc line="3752">
                Updates the designated column with an ascii stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="3779"/>
            <javadoc line="3779">
                Updates the designated column with a binary stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="3806"/>
            <javadoc line="3806">
                Updates the designated column with a character stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="3832"/>
            <javadoc line="3832">
                Updates the designated column with an ascii stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="3859"/>
            <javadoc line="3859">
                Updates the designated column with a binary stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="3886"/>
            <javadoc line="3886">
                Updates the designated column with a character stream value.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid; if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="3912"/>
            <javadoc line="3912">
                Updates the designated column using the given input stream. The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid; if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="3937"/>
            <javadoc line="3937">
                Updates the designated column using the given input stream. The data will be read from the stream
                  as needed until end-of-stream is reached.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid; if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="3962"/>
            <javadoc line="3962">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if the columnIndex is not valid;
                      if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="3991"/>
            <javadoc line="3991">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if the columnLabel is not valid; if a database access error occurs;
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="4018"/>
            <javadoc line="4018">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the columnIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="4049"/>
            <javadoc line="4049">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  The data will be read from the stream
                  as needed until end-of-stream is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the columnLabel is not valid; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getObject" type="T" line="4082"/>
            <javadoc line="4082">
                &lt;p&gt;Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object and will convert from the
                  SQL type of the column to the requested Java data type, if the
                  conversion is supported. If the conversion is not
                  supported  or null is specified for the type, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  At a minimum, an implementation must support the conversions defined in
                  Appendix B, Table B-3 and conversion of appropriate user defined SQL
                  types to a Java type which implements {@code SQLData}, or {@code Struct}.
                  Additional conversions may be supported and are vendor defined.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    type Class representing the Java data type to convert the designated
                      column to.                    
                </param>
                <return>
                    an instance of {@code type} holding the column value                    
                </return>
                <throws>
                    SQLException if conversion is not supported, type is null or
                      another error occurs. The getCause() method of the
                      exception may provide a more detailed exception, for example, if
                      a conversion error occurs                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getObject" type="T" line="4110"/>
            <javadoc line="4110">
                &lt;p&gt;Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object and will convert from the
                  SQL type of the column to the requested Java data type, if the
                  conversion is supported. If the conversion is not
                  supported  or null is specified for the type, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  At a minimum, an implementation must support the conversions defined in
                  Appendix B, Table B-3 and conversion of appropriate user defined SQL
                  types to a Java type which implements {@code SQLData}, or {@code Struct}.
                  Additional conversions may be supported and are vendor defined.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.
                      If the SQL AS clause was not specified, then the label is the name
                      of the column                    
                </param>
                <param>
                    type Class representing the Java data type to convert the designated
                      column to.                    
                </param>
                <return>
                    an instance of {@code type} holding the column value                    
                </return>
                <throws>
                    SQLException if conversion is not supported, type is null or
                      another error occurs. The getCause() method of the
                      exception may provide a more detailed exception, for example, if
                      a conversion error occurs                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>