<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <class name="DataTruncation" line="28">
            <extends class="SQLWarning"/>
            <javadoc line="28">
                An exception  thrown as a &lt;code&gt;DataTruncation&lt;/code&gt; exception
                  (on writes) or reported as a
                  &lt;code&gt;DataTruncation&lt;/code&gt; warning (on reads)
                  when a data values is unexpectedly truncated for reasons other than its having
                  execeeded &lt;code&gt;MaxFieldSize&lt;/code&gt;.
                  &lt;P&gt;The SQLstate for a &lt;code&gt;DataTruncation&lt;/code&gt; during read is &lt;code&gt;01004&lt;/code&gt;.
                  &lt;P&gt;The SQLstate for a &lt;code&gt;DataTruncation&lt;/code&gt; during write is &lt;code&gt;22001&lt;/code&gt;.                
            </javadoc>
            <javadoc line="41">
                Creates a &lt;code&gt;DataTruncation&lt;/code&gt; object
                  with the SQLState initialized
                  to 01004 when &lt;code&gt;read&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and 22001
                  when &lt;code&gt;read&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;,
                  the reason set to &quot;Data truncation&quot;, the
                  vendor code set to 0, and
                  the other fields set to the given values.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
                <param>
                    index The index of the parameter or column value                    
                </param>
                <param>
                    parameter true if a parameter value was truncated                    
                </param>
                <param>
                    read true if a read was truncated                    
                </param>
                <param>
                    dataSize the original size of the data                    
                </param>
                <param>
                    transferSize the size after truncation                    
                </param>
            </javadoc>
            <method name="DataTruncation" type="constructor" line="62">
                <params>
                    <param name="index" type="int"/>
                    <param name="parameter" type="boolean"/>
                    <param name="read" type="boolean"/>
                    <param name="dataSize" type="int"/>
                    <param name="transferSize" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Creates a &lt;code&gt;DataTruncation&lt;/code&gt; object
                  with the SQLState initialized
                  to 01004 when &lt;code&gt;read&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and 22001
                  when &lt;code&gt;read&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;,
                  the reason set to &quot;Data truncation&quot;, the
                  vendor code set to 0, and
                  the other fields set to the given values.
                  &lt;p&gt;                
                <param>
                    index The index of the parameter or column value                    
                </param>
                <param>
                    parameter true if a parameter value was truncated                    
                </param>
                <param>
                    read true if a read was truncated                    
                </param>
                <param>
                    dataSize the original size of the data                    
                </param>
                <param>
                    transferSize the size after truncation                    
                </param>
                <param>
                    cause the underlying reason for this &lt;code&gt;DataTruncation&lt;/code&gt;
                      (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method);
                      may be null indicating the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="DataTruncation" type="constructor" line="95">
                <params>
                    <param name="index" type="int"/>
                    <param name="parameter" type="boolean"/>
                    <param name="read" type="boolean"/>
                    <param name="dataSize" type="int"/>
                    <param name="transferSize" type="int"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="104">
                Retrieves the index of the column or parameter that was truncated.
                  &lt;P&gt;This may be -1 if the column or parameter index is unknown, in
                  which case the &lt;code&gt;parameter&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; fields should be ignored.                
                <return>
                    the index of the truncated paramter or column value                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="112"/>
            <javadoc line="116">
                Indicates whether the value truncated was a parameter value or
                  a column value.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the value truncated was a parameter;
                      &lt;code&gt;false&lt;/code&gt; if it was a column value                    
                </return>
            </javadoc>
            <method name="getParameter" type="boolean" line="123"/>
            <javadoc line="127">
                Indicates whether or not the value was truncated on a read.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the value was truncated when read from
                      the database; &lt;code&gt;false&lt;/code&gt; if the data was truncated on a write                    
                </return>
            </javadoc>
            <method name="getRead" type="boolean" line="133"/>
            <javadoc line="137">
                Gets the number of bytes of data that should have been transferred.
                  This number may be approximate if data conversions were being
                  performed.  The value may be &lt;code&gt;-1&lt;/code&gt; if the size is unknown.                
                <return>
                    the number of bytes of data that should have been transferred                    
                </return>
            </javadoc>
            <method name="getDataSize" type="int" line="144"/>
            <javadoc line="148">
                Gets the number of bytes of data actually transferred.
                  The value may be &lt;code&gt;-1&lt;/code&gt; if the size is unknown.                
                <return>
                    the number of bytes of data actually transferred                    
                </return>
            </javadoc>
            <method name="getTransferSize" type="int" line="154"/>
            <declaration name="index" type="int" line="158"/>
            <javadoc line="158">
                @serial                
            </javadoc>
            <declaration name="parameter" type="boolean" line="163"/>
            <javadoc line="163">
                @serial                
            </javadoc>
            <declaration name="read" type="boolean" line="168"/>
            <javadoc line="168">
                @serial                
            </javadoc>
            <declaration name="dataSize" type="int" line="173"/>
            <javadoc line="173">
                @serial                
            </javadoc>
            <declaration name="transferSize" type="int" line="178"/>
            <javadoc line="178">
                @serial                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="183"/>
            <javadoc line="183">
                @serial                
            </javadoc>
        </class>
    </source>