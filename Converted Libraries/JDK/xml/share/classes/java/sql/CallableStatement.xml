<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Calendar"/>
        <import package="java.io.Reader"/>
        <import package="java.io.InputStream"/>
        <interface name="CallableStatement">
            <implements interface="PreparedStatement"/>
            <comment line="362">
                ----------------------------------------------------------------------
                 Advanced features:                
            </comment>
            <comment line="389">
                --------------------------JDBC 2.0-----------------------------                
            </comment>
            <comment line="622">
                --------------------------JDBC 3.0-----------------------------                
            </comment>
            <comment line="1765">
                ------------------------- JDBC 4.0 -----------------------------------                
            </comment>
            <comment line="2266">
                --                
            </comment>
            <comment line="2441">
                ------------------------- JDBC 4.1 -----------------------------------                
            </comment>
            <javadoc line="33">
                The interface used to execute SQL stored procedures.  The JDBC API
                  provides a stored procedure SQL escape syntax that allows stored procedures
                  to be called in a standard way for all RDBMSs. This escape syntax has one
                  form that includes a result parameter and one that does not. If used, the result
                  parameter must be registered as an OUT parameter. The other parameters
                  can be used for input, output or both. Parameters are referred to
                  sequentially, by number, with the first parameter being 1.
                  &lt;PRE&gt;
                  {?= call &amp;lt;procedure-name&amp;gt;[(&amp;lt;arg1&amp;gt;,&amp;lt;arg2&amp;gt;, ...)]}
                  {call &amp;lt;procedure-name&amp;gt;[(&amp;lt;arg1&amp;gt;,&amp;lt;arg2&amp;gt;, ...)]}
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  IN parameter values are set using the &lt;code&gt;set&lt;/code&gt; methods inherited from{@link PreparedStatement}.  The type of all OUT parameters must be
                  registered prior to executing the stored procedure; their values
                  are retrieved after execution via the &lt;code&gt;get&lt;/code&gt; methods provided here.
                  &lt;P&gt;
                  A &lt;code&gt;CallableStatement&lt;/code&gt; can return one {@link ResultSet} object or
                  multiple &lt;code&gt;ResultSet&lt;/code&gt; objects.  Multiple
                  &lt;code&gt;ResultSet&lt;/code&gt; objects are handled using operations
                  inherited from {@link Statement}.
                  &lt;P&gt;
                  For maximum portability, a call&apos;s &lt;code&gt;ResultSet&lt;/code&gt; objects and
                  update counts should be processed prior to getting the values of output
                  parameters.
                  &lt;P&gt;                
                <see>
                    Connection#prepareCall                    
                </see>
                <see>
                    ResultSet                    
                </see>
            </javadoc>
            <method name="registerOutParameter" type="void" line="67"/>
            <javadoc line="67">
                Registers the OUT parameter in ordinal position
                  &lt;code&gt;parameterIndex&lt;/code&gt; to the JDBC type
                  &lt;code&gt;sqlType&lt;/code&gt;.  All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;
                  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT
                  parameter determines the Java type that must be used
                  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.
                  &lt;p&gt;
                  If the JDBC type expected to be returned to this output parameter
                  is specific to this particular database, &lt;code&gt;sqlType&lt;/code&gt;
                  should be &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;.  The method{@link #getObject} retrieves the value.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    sqlType the JDBC type code defined by <code>java.sql.Types</code>.
                      If the parameter is of JDBC type <code>NUMERIC</code>
                      or <code>DECIMAL</code>, the version of
                      <code>registerOutParameter</code> that accepts a scale value
                      should be used.                    
                </param>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="registerOutParameter" type="void" line="105"/>
            <javadoc line="105">
                Registers the parameter in ordinal position
                  &lt;code&gt;parameterIndex&lt;/code&gt; to be of JDBC type
                  &lt;code&gt;sqlType&lt;/code&gt;. All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;
                  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT
                  parameter determines the Java type that must be used
                  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.
                  &lt;p&gt;
                  This version of &lt;code&gt;registerOutParameter&lt;/code&gt; should be
                  used when the parameter is of JDBC type &lt;code&gt;NUMERIC&lt;/code&gt;
                  or &lt;code&gt;DECIMAL&lt;/code&gt;.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    sqlType the SQL type code defined by <code>java.sql.Types</code>.                    
                </param>
                <param>
                    scale the desired number of digits to the right of the
                      decimal point.  It must be greater than or equal to zero.                    
                </param>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="wasNull" type="boolean" line="139"/>
            <javadoc line="139">
                Retrieves whether the last OUT parameter read had the value of
                  SQL &lt;code&gt;NULL&lt;/code&gt;.  Note that this method should be called only after
                  calling a getter method; otherwise, there is no value to use in
                  determining whether it is &lt;code&gt;null&lt;/code&gt; or not.                
                <return>
                    <code>true</code> if the last parameter read was SQL
                      <code>NULL</code>; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
            </javadoc>
            <method name="getString" type="String" line="152"/>
            <javadoc line="152">
                Retrieves the value of the designated JDBC &lt;code&gt;CHAR&lt;/code&gt;,
                  &lt;code&gt;VARCHAR&lt;/code&gt;, or &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter as a
                  &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  &lt;p&gt;
                  For the fixed-length type JDBC &lt;code&gt;CHAR&lt;/code&gt;,
                  the &lt;code&gt;String&lt;/code&gt; object
                  returned has exactly the same value the SQL
                  &lt;code&gt;CHAR&lt;/code&gt; value had in the
                  database, including any padding added by the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value. If the value is SQL <code>NULL</code>,
                      the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setString                    
                </see>
            </javadoc>
            <method name="getBoolean" type="boolean" line="175"/>
            <javadoc line="175">
                Retrieves the value of the designated JDBC &lt;code&gt;BIT&lt;/code&gt;
                  or &lt;code&gt;BOOLEAN&lt;/code&gt; parameter as a
                  &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>false</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setBoolean                    
                </see>
            </javadoc>
            <method name="getByte" type="byte" line="191"/>
            <javadoc line="191">
                Retrieves the value of the designated JDBC &lt;code&gt;TINYINT&lt;/code&gt; parameter
                  as a &lt;code&gt;byte&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setByte                    
                </see>
            </javadoc>
            <method name="getShort" type="short" line="206"/>
            <javadoc line="206">
                Retrieves the value of the designated JDBC &lt;code&gt;SMALLINT&lt;/code&gt; parameter
                  as a &lt;code&gt;short&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setShort                    
                </see>
            </javadoc>
            <method name="getInt" type="int" line="221"/>
            <javadoc line="221">
                Retrieves the value of the designated JDBC &lt;code&gt;INTEGER&lt;/code&gt; parameter
                  as an &lt;code&gt;int&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setInt                    
                </see>
            </javadoc>
            <method name="getLong" type="long" line="236"/>
            <javadoc line="236">
                Retrieves the value of the designated JDBC &lt;code&gt;BIGINT&lt;/code&gt; parameter
                  as a &lt;code&gt;long&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setLong                    
                </see>
            </javadoc>
            <method name="getFloat" type="float" line="251"/>
            <javadoc line="251">
                Retrieves the value of the designated JDBC &lt;code&gt;FLOAT&lt;/code&gt; parameter
                  as a &lt;code&gt;float&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setFloat                    
                </see>
            </javadoc>
            <method name="getDouble" type="double" line="266"/>
            <javadoc line="266">
                Retrieves the value of the designated JDBC &lt;code&gt;DOUBLE&lt;/code&gt; parameter as a &lt;code&gt;double&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setDouble                    
                </see>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="280"/>
            <javadoc line="280">
                Retrieves the value of the designated JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with &lt;i&gt;scale&lt;/i&gt; digits to
                  the right of the decimal point.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                    use <code>getBigDecimal(int parameterIndex)</code>
                      or <code>getBigDecimal(String parameterName)</code>                    
                </deprecated>
                <see>
                    #setBigDecimal                    
                </see>
            </javadoc>
            <method name="getBytes" type="byte[]" line="301"/>
            <javadoc line="301">
                Retrieves the value of the designated JDBC &lt;code&gt;BINARY&lt;/code&gt; or
                  &lt;code&gt;VARBINARY&lt;/code&gt; parameter as an array of &lt;code&gt;byte&lt;/code&gt;
                  values in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setBytes                    
                </see>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="316"/>
            <javadoc line="316">
                Retrieves the value of the designated JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setDate                    
                </see>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="330"/>
            <javadoc line="330">
                Retrieves the value of the designated JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setTime                    
                </see>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="345"/>
            <javadoc line="345">
                Retrieves the value of the designated JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setTimestamp                    
                </see>
            </javadoc>
            <method name="getObject" type="Object" line="365"/>
            <javadoc line="365">
                Retrieves the value of the designated parameter as an &lt;code&gt;Object&lt;/code&gt;
                  in the Java programming language. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;,
                  the driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  This method returns a Java object whose type corresponds to the JDBC
                  type that was registered for this parameter using the method
                  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target JDBC
                  type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can be used
                  to read database-specific abstract data types.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    A <code>java.lang.Object</code> holding the OUT parameter value                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #setObject                    
                </see>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="390"/>
            <javadoc line="390">
                Retrieves the value of the designated JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with as many digits to the
                  right of the decimal point as the value contains.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value in full precision.  If the value is
                      SQL <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setBigDecimal                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="406"/>
            <javadoc line="406">
                Returns an object representing the value of OUT parameter
                  &lt;code&gt;parameterIndex&lt;/code&gt; and uses &lt;code&gt;map&lt;/code&gt; for the custom
                  mapping of the parameter value.
                  &lt;p&gt;
                  This method returns a Java object whose type corresponds to the
                  JDBC type that was registered for this parameter using the method
                  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target
                  JDBC type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can
                  be used to read database-specific abstract data types.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and so on                    
                </param>
                <param>
                    map the mapping from SQL type names to Java classes                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the OUT parameter value                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setObject                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRef" type="Ref" line="430"/>
            <javadoc line="430">
                Retrieves the value of the designated JDBC &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt;
                  parameter as a {@link java.sql.Ref} object in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <return>
                    the parameter value as a <code>Ref</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>, the value
                      <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBlob" type="Blob" line="447"/>
            <javadoc line="447">
                Retrieves the value of the designated JDBC &lt;code&gt;BLOB&lt;/code&gt; parameter as a{@link java.sql.Blob} object in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and so on                    
                </param>
                <return>
                    the parameter value as a <code>Blob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>, the value
                      <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getClob" type="Clob" line="463"/>
            <javadoc line="463">
                Retrieves the value of the designated JDBC &lt;code&gt;CLOB&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Clob&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and
                      so on                    
                </param>
                <return>
                    the parameter value as a <code>Clob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>, the
                      value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getArray" type="Array" line="480"/>
            <javadoc line="480">
                Retrieves the value of the designated JDBC &lt;code&gt;ARRAY&lt;/code&gt; parameter as an{@link java.sql.Array} object in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and
                      so on                    
                </param>
                <return>
                    the parameter value as an <code>Array</code> object in
                      the Java programming language.  If the value was SQL <code>NULL</code>, the
                      value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="498"/>
            <javadoc line="498">
                Retrieves the value of the designated JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object
                  to construct the date.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the date taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setDate                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="523"/>
            <javadoc line="523">
                Retrieves the value of the designated JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object
                  to construct the time.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the time taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <return>
                    the parameter value; if the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setTime                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="548"/>
            <javadoc line="548">
                Retrieves the value of the designated JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct
                  the &lt;code&gt;Timestamp&lt;/code&gt; object.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the timestamp taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,
                      and so on                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #setTimestamp                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="registerOutParameter" type="void" line="575"/>
            <javadoc line="575">
                Registers the designated output parameter.
                  This version of
                  the method &lt;code&gt;registerOutParameter&lt;/code&gt;
                  should be used for a user-defined or &lt;code&gt;REF&lt;/code&gt; output parameter.  Examples
                  of user-defined types include: &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;,
                  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, and named array types.
                  &lt;p&gt;
                  All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;  For a user-defined parameter, the fully-qualified SQL
                  type name of the parameter should also be given, while a &lt;code&gt;REF&lt;/code&gt;
                  parameter requires that the fully-qualified type name of the
                  referenced type be given.  A JDBC driver that does not need the
                  type code and type name information may ignore it.   To be portable,
                  however, applications should always provide these values for
                  user-defined and &lt;code&gt;REF&lt;/code&gt; parameters.
                  Although it is intended for user-defined and &lt;code&gt;REF&lt;/code&gt; parameters,
                  this method may be used to register a parameter of any JDBC type.
                  If the parameter does not have a user-defined or &lt;code&gt;REF&lt;/code&gt; type, the
                  &lt;i&gt;typeName&lt;/i&gt; parameter is ignored.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; When reading the value of an out parameter, you
                  must use the getter method whose Java type corresponds to the
                  parameter&apos;s registered SQL type.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,...                    
                </param>
                <param>
                    sqlType a value from {@link java.sql.Types}                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL structured type                    
                </param>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="registerOutParameter" type="void" line="623"/>
            <javadoc line="623">
                Registers the OUT parameter named
                  &lt;code&gt;parameterName&lt;/code&gt; to the JDBC type
                  &lt;code&gt;sqlType&lt;/code&gt;.  All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;
                  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT
                  parameter determines the Java type that must be used
                  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.
                  &lt;p&gt;
                  If the JDBC type expected to be returned to this output parameter
                  is specific to this particular database, &lt;code&gt;sqlType&lt;/code&gt;
                  should be &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;.  The method{@link #getObject} retrieves the value.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the JDBC type code defined by <code>java.sql.Types</code>.
                      If the parameter is of JDBC type <code>NUMERIC</code>
                      or <code>DECIMAL</code>, the version of
                      <code>registerOutParameter</code> that accepts a scale value
                      should be used.                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type or if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="registerOutParameter" type="void" line="660"/>
            <javadoc line="660">
                Registers the parameter named
                  &lt;code&gt;parameterName&lt;/code&gt; to be of JDBC type
                  &lt;code&gt;sqlType&lt;/code&gt;.  All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;
                  The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT
                  parameter determines the Java type that must be used
                  in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.
                  &lt;p&gt;
                  This version of &lt;code&gt;registerOutParameter&lt;/code&gt; should be
                  used when the parameter is of JDBC type &lt;code&gt;NUMERIC&lt;/code&gt;
                  or &lt;code&gt;DECIMAL&lt;/code&gt;.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType SQL type code defined by <code>java.sql.Types</code>.                    
                </param>
                <param>
                    scale the desired number of digits to the right of the
                      decimal point.  It must be greater than or equal to zero.                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type or if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="registerOutParameter" type="void" line="695"/>
            <javadoc line="695">
                Registers the designated output parameter.  This version of
                  the method &lt;code&gt;registerOutParameter&lt;/code&gt;
                  should be used for a user-named or REF output parameter.  Examples
                  of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;p&gt;
                  All OUT parameters must be registered
                  before a stored procedure is executed.
                  &lt;p&gt;
                  For a user-named parameter the fully-qualified SQL
                  type name of the parameter should also be given, while a REF
                  parameter requires that the fully-qualified type name of the
                  referenced type be given.  A JDBC driver that does not need the
                  type code and type name information may ignore it.   To be portable,
                  however, applications should always provide these values for
                  user-named and REF parameters.
                  Although it is intended for user-named and REF parameters,
                  this method may be used to register a parameter of any JDBC type.
                  If the parameter does not have a user-named or REF type, the
                  typeName parameter is ignored.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; When reading the value of an out parameter, you
                  must use the &lt;code&gt;getXXX&lt;/code&gt; method whose Java type XXX corresponds to the
                  parameter&apos;s registered SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from {@link java.sql.Types}                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL structured type                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>sqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type or if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    Types                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="742"/>
            <javadoc line="742">
                Retrieves the value of the designated JDBC &lt;code&gt;DATALINK&lt;/code&gt; parameter as a
                  &lt;code&gt;java.net.URL&lt;/code&gt; object.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,...                    
                </param>
                <return>
                    a <code>java.net.URL</code> object that represents the
                      JDBC <code>DATALINK</code> value used as the designated
                      parameter                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code>,
                      or if the URL being returned is
                      not a valid URL on the Java platform                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setURL                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="762"/>
            <javadoc line="762">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    val the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs;
                      this method is called on a closed <code>CallableStatement</code>
                      or if a URL is malformed                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getURL                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="780"/>
            <javadoc line="780">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the SQL type code defined in <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBoolean" type="void" line="796"/>
            <javadoc line="796">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #getBoolean                    
                </see>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setByte" type="void" line="813"/>
            <javadoc line="813">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getByte                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setShort" type="void" line="830"/>
            <javadoc line="830">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getShort                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setInt" type="void" line="847"/>
            <javadoc line="847">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getInt                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLong" type="void" line="864"/>
            <javadoc line="864">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getLong                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFloat" type="void" line="881"/>
            <javadoc line="881">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getFloat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDouble" type="void" line="898"/>
            <javadoc line="898">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDouble                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBigDecimal" type="void" line="915"/>
            <javadoc line="915">
                Sets the designated parameter to the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBigDecimal                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setString" type="void" line="933"/>
            <javadoc line="933">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getString                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBytes" type="void" line="953"/>
            <javadoc line="953">
                Sets the designated parameter to the given Java array of bytes.
                  The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends
                  it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBytes                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="972"/>
            <javadoc line="972">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="992"/>
            <javadoc line="992">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="1010"/>
            <javadoc line="1010">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="1029"/>
            <javadoc line="1029">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="1055"/>
            <javadoc line="1055">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1080"/>
            <javadoc line="1080">
                Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it
                  to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  Note that this method may be used to pass datatabase-
                  specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
                      this is the number of digits after the decimal point.  For all other
                      types, this value will be ignored.                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1125"/>
            <javadoc line="1125">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1150"/>
            <javadoc line="1150">
                Sets the value of the designated parameter with the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Not all databases allow for a non-typed Null to be sent to
                  the backend. For maximum portability, the &lt;code&gt;setNull&lt;/code&gt; or the
                  &lt;code&gt;setObject(String parameterName, Object x, int sqlType)&lt;/code&gt;
                  method should be used
                  instead of &lt;code&gt;setObject(String parameterName, Object x)&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code> or if the given
                      <code>Object</code> parameter is ambiguous                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="1195"/>
            <javadoc line="1195">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="1223"/>
            <javadoc line="1223">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="1248"/>
            <javadoc line="1248">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="1273"/>
            <javadoc line="1273">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="1298"/>
            <javadoc line="1298">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.
                  &lt;p&gt;
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or
                      SQL <code>REF</code> value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getString" type="String" line="1332"/>
            <javadoc line="1332">
                Retrieves the value of a JDBC &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                  or &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter as a &lt;code&gt;String&lt;/code&gt; in
                  the Java programming language.
                  &lt;p&gt;
                  For the fixed-length type JDBC &lt;code&gt;CHAR&lt;/code&gt;,
                  the &lt;code&gt;String&lt;/code&gt; object
                  returned has exactly the same value the SQL
                  &lt;code&gt;CHAR&lt;/code&gt; value had in the
                  database, including any padding added by the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value. If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setString                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1355"/>
            <javadoc line="1355">
                Retrieves the value of a JDBC &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt;
                  parameter as a
                  &lt;code&gt;boolean&lt;/code&gt; in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>false</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setBoolean                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getByte" type="byte" line="1372"/>
            <javadoc line="1372">
                Retrieves the value of a JDBC &lt;code&gt;TINYINT&lt;/code&gt; parameter as a &lt;code&gt;byte&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setByte                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getShort" type="short" line="1388"/>
            <javadoc line="1388">
                Retrieves the value of a JDBC &lt;code&gt;SMALLINT&lt;/code&gt; parameter as a &lt;code&gt;short&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setShort                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInt" type="int" line="1404"/>
            <javadoc line="1404">
                Retrieves the value of a JDBC &lt;code&gt;INTEGER&lt;/code&gt; parameter as an &lt;code&gt;int&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setInt                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLong" type="long" line="1421"/>
            <javadoc line="1421">
                Retrieves the value of a JDBC &lt;code&gt;BIGINT&lt;/code&gt; parameter as a &lt;code&gt;long&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setLong                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFloat" type="float" line="1438"/>
            <javadoc line="1438">
                Retrieves the value of a JDBC &lt;code&gt;FLOAT&lt;/code&gt; parameter as a &lt;code&gt;float&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setFloat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDouble" type="double" line="1454"/>
            <javadoc line="1454">
                Retrieves the value of a JDBC &lt;code&gt;DOUBLE&lt;/code&gt; parameter as a &lt;code&gt;double&lt;/code&gt;
                  in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>0</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setDouble                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBytes" type="byte[]" line="1470"/>
            <javadoc line="1470">
                Retrieves the value of a JDBC &lt;code&gt;BINARY&lt;/code&gt; or &lt;code&gt;VARBINARY&lt;/code&gt;
                  parameter as an array of &lt;code&gt;byte&lt;/code&gt; values in the Java
                  programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result is
                      <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setBytes                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1487"/>
            <javadoc line="1487">
                Retrieves the value of a JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1503"/>
            <javadoc line="1503">
                Retrieves the value of a JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1519"/>
            <javadoc line="1519">
                Retrieves the value of a JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result
                      is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="1535"/>
            <javadoc line="1535">
                Retrieves the value of a parameter as an &lt;code&gt;Object&lt;/code&gt; in the Java
                  programming language. If the value is an SQL &lt;code&gt;NULL&lt;/code&gt;, the
                  driver returns a Java &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  This method returns a Java object whose type corresponds to the JDBC
                  type that was registered for this parameter using the method
                  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target JDBC
                  type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can be used
                  to read database-specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    A <code>java.lang.Object</code> holding the OUT parameter value.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #setObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1558"/>
            <javadoc line="1558">
                Retrieves the value of a JDBC &lt;code&gt;NUMERIC&lt;/code&gt; parameter as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object with as many digits to the
                  right of the decimal point as the value contains.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value in full precision.  If the value is
                      SQL <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <exception>
                    SQLExceptionif parameterName does not correspond to a named
                      parameter;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setBigDecimal                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="1575"/>
            <javadoc line="1575">
                Returns an object representing the value of OUT parameter
                  &lt;code&gt;parameterName&lt;/code&gt; and uses &lt;code&gt;map&lt;/code&gt; for the custom
                  mapping of the parameter value.
                  &lt;p&gt;
                  This method returns a Java object whose type corresponds to the
                  JDBC type that was registered for this parameter using the method
                  &lt;code&gt;registerOutParameter&lt;/code&gt;.  By registering the target
                  JDBC type as &lt;code&gt;java.sql.Types.OTHER&lt;/code&gt;, this method can
                  be used to read database-specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    map the mapping from SQL type names to Java classes                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the OUT parameter value                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRef" type="Ref" line="1599"/>
            <javadoc line="1599">
                Retrieves the value of a JDBC &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt;
                  parameter as a {@link java.sql.Ref} object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as a <code>Ref</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>,
                      the value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBlob" type="Blob" line="1616"/>
            <javadoc line="1616">
                Retrieves the value of a JDBC &lt;code&gt;BLOB&lt;/code&gt; parameter as a{@link java.sql.Blob} object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as a <code>Blob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>,
                      the value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getClob" type="Clob" line="1633"/>
            <javadoc line="1633">
                Retrieves the value of a JDBC &lt;code&gt;CLOB&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Clob&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as a <code>Clob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>,
                      the value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getArray" type="Array" line="1649"/>
            <javadoc line="1649">
                Retrieves the value of a JDBC &lt;code&gt;ARRAY&lt;/code&gt; parameter as an{@link java.sql.Array} object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as an <code>Array</code> object in
                      Java programming language.  If the value was SQL <code>NULL</code>,
                      the value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1666"/>
            <javadoc line="1666">
                Retrieves the value of a JDBC &lt;code&gt;DATE&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object
                  to construct the date.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the date taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>,
                      the result is <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1692"/>
            <javadoc line="1692">
                Retrieves the value of a JDBC &lt;code&gt;TIME&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object
                  to construct the time.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the time taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <return>
                    the parameter value; if the value is SQL <code>NULL</code>, the result is
                      <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1718"/>
            <javadoc line="1718">
                Retrieves the value of a JDBC &lt;code&gt;TIMESTAMP&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using
                  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct
                  the &lt;code&gt;Timestamp&lt;/code&gt; object.
                  With a &lt;code&gt;Calendar&lt;/code&gt; object, the driver
                  can calculate the timestamp taking into account a custom timezone and locale.
                  If no &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the
                  default timezone and locale.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <return>
                    the parameter value.  If the value is SQL <code>NULL</code>, the result is
                      <code>null</code>.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="1745"/>
            <javadoc line="1745">
                Retrieves the value of a JDBC &lt;code&gt;DATALINK&lt;/code&gt; parameter as a
                  &lt;code&gt;java.net.URL&lt;/code&gt; object.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as a <code>java.net.URL</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>, the
                      value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code>,
                      or if there is a problem with the URL                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setURL                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="1766"/>
            <javadoc line="1766">
                Retrieves the value of the designated JDBC &lt;code&gt;ROWID&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.RowId&lt;/code&gt; object.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2,...                    
                </param>
                <return>
                    a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
                      value is used as the designated parameter. If the parameter contains
                      a SQL <code>NULL</code>, then a <code>null</code> value is returned.                    
                </return>
                <throws>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="1783"/>
            <javadoc line="1783">
                Retrieves the value of the designated JDBC &lt;code&gt;ROWID&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.RowId&lt;/code&gt; object.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
                      value is used as the designated parameter. If the parameter contains
                      a SQL <code>NULL</code>, then a <code>null</code> value is returned.                    
                </return>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="1800"/>
            <javadoc line="1800">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="1816"/>
            <javadoc line="1816">
                Sets the designated parameter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="1834"/>
            <javadoc line="1834">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="1854"/>
            <javadoc line="1854">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The object
                  implements the &lt;code&gt;java.sql.NClob&lt;/code&gt; interface. This &lt;code&gt;NClob&lt;/code&gt;
                  object maps to a SQL &lt;code&gt;NCLOB&lt;/code&gt;.                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1871"/>
            <javadoc line="1871">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the length specified is less than zero;
                      a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="1895"/>
            <javadoc line="1895">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The &lt;code&gt;inputstream&lt;/code&gt; must contain  the number
                  of characters specified by length, otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException  if parameterName does not correspond to a named
                      parameter; if the length specified
                      is less than zero; if the number of bytes in the inputstream does not match
                      the specfied length; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="1923"/>
            <javadoc line="1923">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the length specified is less than zero;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="1949"/>
            <javadoc line="1949">
                Retrieves the value of the designated JDBC &lt;code&gt;NCLOB&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.NClob&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and
                      so on                    
                </param>
                <return>
                    the parameter value as a <code>NClob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>, the
                      value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="1970"/>
            <javadoc line="1970">
                Retrieves the value of a JDBC &lt;code&gt;NCLOB&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.NClob&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    the parameter value as a <code>NClob</code> object in the
                      Java programming language.  If the value was SQL <code>NULL</code>,
                      the value <code>null</code> is returned.                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="1988"/>
            <javadoc line="1988">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  &lt;code&gt;SQL XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs;
                      this method is called on a closed <code>CallableStatement</code> or
                      the <code>java.xml.transform.Result</code>,
                      <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="2006"/>
            <javadoc line="2006">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </return>
                <throws>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="2020"/>
            <javadoc line="2020">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </return>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="2034"/>
            <javadoc line="2034">
                Retrieves the value of the designated &lt;code&gt;NCHAR&lt;/code&gt;,
                  &lt;code&gt;NVARCHAR&lt;/code&gt;
                  or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; parameter as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  &lt;p&gt;
                  For the fixed-length type JDBC &lt;code&gt;NCHAR&lt;/code&gt;,
                  the &lt;code&gt;String&lt;/code&gt; object
                  returned has exactly the same value the SQL
                  &lt;code&gt;NCHAR&lt;/code&gt; value had in the
                  database, including any padding added by the database.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    a <code>String</code> object that maps an
                      <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value                    
                </return>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
                <see>
                    #setNString                    
                </see>
            </javadoc>
            <method name="getNString" type="String" line="2060"/>
            <javadoc line="2060">
                Retrieves the value of the designated &lt;code&gt;NCHAR&lt;/code&gt;,
                  &lt;code&gt;NVARCHAR&lt;/code&gt;
                  or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; parameter as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  &lt;p&gt;
                  For the fixed-length type JDBC &lt;code&gt;NCHAR&lt;/code&gt;,
                  the &lt;code&gt;String&lt;/code&gt; object
                  returned has exactly the same value the SQL
                  &lt;code&gt;NCHAR&lt;/code&gt; value had in the
                  database, including any padding added by the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    a <code>String</code> object that maps an
                      <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
                <see>
                    #setNString                    
                </see>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="2086"/>
            <javadoc line="2086">
                Retrieves the value of the designated parameter as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; parameters.                
                <return>
                    a <code>java.io.Reader</code> object that contains the parameter
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language.                    
                </return>
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if the parameterIndex is not valid;
                      if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="2106"/>
            <javadoc line="2106">
                Retrieves the value of the designated parameter as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; parameters.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    a <code>java.io.Reader</code> object that contains the parameter
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="2126"/>
            <javadoc line="2126">
                Retrieves the value of the designated parameter as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object in the Java programming language.                
                <return>
                    a <code>java.io.Reader</code> object that contains the parameter
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language.                    
                </return>
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if the parameterIndex is not valid; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="2140"/>
            <javadoc line="2140">
                Retrieves the value of the designated parameter as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object in the Java programming language.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <return>
                    a <code>java.io.Reader</code> object that contains the parameter
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language                    
                </return>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="2157"/>
            <javadoc line="2157">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="2173"/>
            <javadoc line="2173">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="2188"/>
            <javadoc line="2188">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="2214"/>
            <javadoc line="2214">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="2238"/>
            <javadoc line="2238">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="2266"/>
            <javadoc line="2266">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="2291"/>
            <javadoc line="2291">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="2315"/>
            <javadoc line="2315">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="2342"/>
            <javadoc line="2342">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs; or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="2367"/>
            <javadoc line="2367">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or this method is called on
                      a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="2391"/>
            <javadoc line="2391">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2415"/>
            <javadoc line="2415">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterName does not correspond to a named
                      parameter; if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getObject" type="T" line="2443"/>
            <javadoc line="2443">
                &lt;p&gt;Returns an object representing the value of OUT parameter{@code parameterIndex} and will convert from the
                  SQL type of the parameter to the requested Java data type, if the
                  conversion is supported. If the conversion is not
                  supported or null is specified for the type, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  At a minimum, an implementation must support the conversions defined in
                  Appendix B, Table B-3 and conversion of appropriate user defined SQL
                  types to a Java type which implements {@code SQLData}, or {@code Struct}.
                  Additional conversions may be supported and are vendor defined.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, and so on                    
                </param>
                <param>
                    type Class representing the Java data type to convert the
                      designated parameter to.                    
                </param>
                <return>
                    an instance of {@code type} holding the OUT parameter value                    
                </return>
                <throws>
                    SQLException if conversion is not supported, type is null or
                      another error occurs. The getCause() method of the
                      exception may provide a more detailed exception, for example, if
                      a conversion error occurs                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getObject" type="T" line="2471"/>
            <javadoc line="2471">
                &lt;p&gt;Returns an object representing the value of OUT parameter{@code parameterName} and will convert from the
                  SQL type of the parameter to the requested Java data type, if the
                  conversion is supported. If the conversion is not
                  supported  or null is specified for the type, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  At a minimum, an implementation must support the conversions defined in
                  Appendix B, Table B-3 and conversion of appropriate user defined SQL
                  types to a Java type which implements {@code SQLData}, or {@code Struct}.
                  Additional conversions may be supported and are vendor defined.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    type Class representing the Java data type to convert
                      the designated parameter to.                    
                </param>
                <return>
                    an instance of {@code type} holding the OUT parameter
                      value                    
                </return>
                <throws>
                    SQLException if conversion is not supported, type is null or
                      another error occurs. The getCause() method of the
                      exception may provide a more detailed exception, for example, if
                      a conversion error occurs                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>