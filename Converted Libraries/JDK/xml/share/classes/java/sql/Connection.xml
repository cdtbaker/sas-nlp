<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.Properties"/>
        <import package="java.util.concurrent.Executor"/>
        <interface name="Connection">
            <implements interface="Wrapper"/>
            <implements interface="AutoCloseable"/>
            <javadoc line="4">
                &lt;P&gt;A connection (session) with a specific
                  database. SQL statements are executed and results are returned
                  within the context of a connection.
                  &lt;P&gt;
                  A &lt;code&gt;Connection&lt;/code&gt; object&apos;s database is able to provide information
                  describing its tables, its supported SQL grammar, its stored
                  procedures, the capabilities of this connection, and so on. This
                  information is obtained with the &lt;code&gt;getMetaData&lt;/code&gt; method.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; When configuring a &lt;code&gt;Connection&lt;/code&gt;, JDBC applications
                  should use the appropriate &lt;code&gt;Connection&lt;/code&gt; method such as
                  &lt;code&gt;setAutoCommit&lt;/code&gt; or &lt;code&gt;setTransactionIsolation&lt;/code&gt;.
                  Applications should not invoke SQL commands directly to change the connection&apos;s
                  configuration when there is a JDBC method available.  By default a &lt;code&gt;Connection&lt;/code&gt; object is in
                  auto-commit mode, which means that it automatically commits changes
                  after executing each statement. If auto-commit mode has been
                  disabled, the method &lt;code&gt;commit&lt;/code&gt; must be called explicitly in
                  order to commit changes; otherwise, database changes will not be saved.
                  &lt;P&gt;
                  A new &lt;code&gt;Connection&lt;/code&gt; object created using the JDBC 2.1 core API
                  has an initially empty type map associated with it. A user may enter a
                  custom mapping for a UDT in this type map.
                  When a UDT is retrieved from a data source with the
                  method &lt;code&gt;ResultSet.getObject&lt;/code&gt;, the &lt;code&gt;getObject&lt;/code&gt; method
                  will check the connection&apos;s type map to see if there is an entry for that
                  UDT.  If so, the &lt;code&gt;getObject&lt;/code&gt; method will map the UDT to the
                  class indicated.  If there is no entry, the UDT will be mapped using the
                  standard mapping.
                  &lt;p&gt;
                  A user may create a new type map, which is a &lt;code&gt;java.util.Map&lt;/code&gt;
                  object, make an entry in it, and pass it to the &lt;code&gt;java.sql&lt;/code&gt;
                  methods that can perform custom mapping.  In this case, the method
                  will use the given type map instead of the one associated with
                  the connection.
                  &lt;p&gt;
                  For example, the following code fragment specifies that the SQL
                  type &lt;code&gt;ATHLETES&lt;/code&gt; will be mapped to the class
                  &lt;code&gt;Athletes&lt;/code&gt; in the Java programming language.
                  The code fragment retrieves the type map for the &lt;code&gt;Connection
                  &lt;/code&gt; object &lt;code&gt;con&lt;/code&gt;, inserts the entry into it, and then sets
                  the type map with the new entry as the connection&apos;s type map.
                  &lt;pre&gt;
                  java.util.Map map = con.getTypeMap();
                  map.put(&quot;mySchemaName.ATHLETES&quot;, Class.forName(&quot;Athletes&quot;));
                  con.setTypeMap(map);
                  &lt;/pre&gt;                
                <see>
                    DriverManager#getConnection                    
                </see>
                <see>
                    Statement                    
                </see>
                <see>
                    ResultSet                    
                </see>
                <see>
                    DatabaseMetaData                    
                </see>
            </javadoc>
            <method name="createStatement" type="Statement" line="56"/>
            <javadoc line="56">
                Creates a &lt;code&gt;Statement&lt;/code&gt; object for sending
                  SQL statements to the database.
                  SQL statements without parameters are normally
                  executed using &lt;code&gt;Statement&lt;/code&gt; objects. If the same SQL statement
                  is executed many times, it may be more efficient to use a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;Statement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <return>
                    a new default <code>Statement</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="74"/>
            <javadoc line="74">
                Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object for sending
                  parameterized SQL statements to the database.
                  &lt;P&gt;
                  A SQL statement with or without IN parameters can be
                  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This
                  object can then be used to efficiently execute this statement
                  multiple times.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling
                  parametric SQL statements that benefit from precompilation. If
                  the driver supports precompilation,
                  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send
                  the statement to the database for precompilation. Some drivers
                  may not support precompilation. In this case, the statement may
                  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object is executed.  This has no direct effect on users; however, it does
                  affect which methods throw certain &lt;code&gt;SQLException&lt;/code&gt; objects.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql an SQL statement that may contain one or more '?' IN
                      parameter placeholders                    
                </param>
                <return>
                    a new default <code>PreparedStatement</code> object containing the
                      pre-compiled SQL statement                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="prepareCall" type="CallableStatement" line="105"/>
            <javadoc line="105">
                Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object for calling
                  database stored procedures.
                  The &lt;code&gt;CallableStatement&lt;/code&gt; object provides
                  methods for setting up its IN and OUT parameters, and
                  methods for executing the call to a stored procedure.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling stored
                  procedure call statements. Some drivers may send the call
                  statement to the database when the method &lt;code&gt;prepareCall&lt;/code&gt;
                  is done; others
                  may wait until the &lt;code&gt;CallableStatement&lt;/code&gt; object
                  is executed. This has no
                  direct effect on users; however, it does affect which method
                  throws certain SQLExceptions.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;CallableStatement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql an SQL statement that may contain one or more '?'
                      parameter placeholders. Typically this statement is specified using JDBC
                      call escape syntax.                    
                </param>
                <return>
                    a new default <code>CallableStatement</code> object containing the
                      pre-compiled SQL statement                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="nativeSQL" type="String" line="134"/>
            <javadoc line="134">
                Converts the given SQL statement into the system&apos;s native SQL grammar.
                  A driver may convert the JDBC SQL grammar into its system&apos;s
                  native SQL grammar prior to sending it. This method returns the
                  native form of the statement that the driver would have sent.                
                <param>
                    sql an SQL statement that may contain one or more '?'
                      parameter placeholders                    
                </param>
                <return>
                    the native form of this statement                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="setAutoCommit" type="void" line="146"/>
            <javadoc line="146">
                Sets this connection&apos;s auto-commit mode to the given state.
                  If a connection is in auto-commit mode, then all its SQL
                  statements will be executed and committed as individual
                  transactions.  Otherwise, its SQL statements are grouped into
                  transactions that are terminated by a call to either
                  the method &lt;code&gt;commit&lt;/code&gt; or the method &lt;code&gt;rollback&lt;/code&gt;.
                  By default, new connections are in auto-commit
                  mode.
                  &lt;P&gt;
                  The commit occurs when the statement completes. The time when the statement
                  completes depends on the type of SQL Statement:
                  &lt;ul&gt;
                  &lt;li&gt;For DML statements, such as Insert, Update or Delete, and DDL statements,
                  the statement is complete as soon as it has finished executing.
                  &lt;li&gt;For Select statements, the statement is complete when the associated result
                  set is closed.
                  &lt;li&gt;For &lt;code&gt;CallableStatement&lt;/code&gt; objects or for statements that return
                  multiple results, the statement is complete
                  when all of the associated result sets have been closed, and all update
                  counts and output parameters have been retrieved.
                  &lt;/ul&gt;
                  &lt;P&gt;
                  &lt;B&gt;NOTE:&lt;/B&gt;  If this method is called during a transaction and the
                  auto-commit mode is changed, the transaction is committed.  If
                  &lt;code&gt;setAutoCommit&lt;/code&gt; is called and the auto-commit mode is
                  not changed, the call is a no-op.                
                <param>
                    autoCommit <code>true</code> to enable auto-commit mode;
                      <code>false</code> to disable it                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      setAutoCommit(true) is called while participating in a distributed transaction,
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #getAutoCommit                    
                </see>
            </javadoc>
            <method name="getAutoCommit" type="boolean" line="181"/>
            <javadoc line="181">
                Retrieves the current auto-commit mode for this &lt;code&gt;Connection&lt;/code&gt;
                  object.                
                <return>
                    the current state of this <code>Connection</code> object's
                      auto-commit mode                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #setAutoCommit                    
                </see>
            </javadoc>
            <method name="commit" type="void" line="191"/>
            <javadoc line="191">
                Makes all changes made since the previous
                  commit/rollback permanent and releases any database locks
                  currently held by this &lt;code&gt;Connection&lt;/code&gt; object.
                  This method should be
                  used only when auto-commit mode has been disabled.                
                <exception>
                    SQLException if a database access error occurs,
                      this method is called while participating in a distributed transaction,
                      if this method is called on a closed conection or this
                      <code>Connection</code> object is in auto-commit mode                    
                </exception>
                <see>
                    #setAutoCommit                    
                </see>
            </javadoc>
            <method name="rollback" type="void" line="204"/>
            <javadoc line="204">
                Undoes all changes made in the current transaction
                  and releases any database locks currently held
                  by this &lt;code&gt;Connection&lt;/code&gt; object. This method should be
                  used only when auto-commit mode has been disabled.                
                <exception>
                    SQLException if a database access error occurs,
                      this method is called while participating in a distributed transaction,
                      this method is called on a closed connection or this
                      <code>Connection</code> object is in auto-commit mode                    
                </exception>
                <see>
                    #setAutoCommit                    
                </see>
            </javadoc>
            <method name="close" type="void" line="216"/>
            <javadoc line="216">
                Releases this &lt;code&gt;Connection&lt;/code&gt; object&apos;s database and JDBC resources
                  immediately instead of waiting for them to be automatically released.
                  &lt;P&gt;
                  Calling the method &lt;code&gt;close&lt;/code&gt; on a &lt;code&gt;Connection&lt;/code&gt;
                  object that is already closed is a no-op.
                  &lt;P&gt;
                  It is &lt;b&gt;strongly recommended&lt;/b&gt; that an application explicitly
                  commits or rolls back an active transaction prior to calling the
                  &lt;code&gt;close&lt;/code&gt; method.  If the &lt;code&gt;close&lt;/code&gt; method is called
                  and there is an active transaction, the results are implementation-defined.
                  &lt;P&gt;                
                <exception>
                    SQLException SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="isClosed" type="boolean" line="231"/>
            <javadoc line="231">
                Retrieves whether this &lt;code&gt;Connection&lt;/code&gt; object has been
                  closed.  A connection is closed if the method &lt;code&gt;close&lt;/code&gt;
                  has been called on it or if certain fatal errors have occurred.
                  This method is guaranteed to return &lt;code&gt;true&lt;/code&gt; only when
                  it is called after the method &lt;code&gt;Connection.close&lt;/code&gt; has
                  been called.
                  &lt;P&gt;
                  This method generally cannot be called to determine whether a
                  connection to a database is valid or invalid.  A typical client
                  can determine that a connection is invalid by catching any
                  exceptions that might be thrown when an operation is attempted.                
                <return>
                    <code>true</code> if this <code>Connection</code> object
                      is closed; <code>false</code> if it is still open                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getMetaData" type="DatabaseMetaData" line="248"/>
            <javadoc line="248">
                Retrieves a &lt;code&gt;DatabaseMetaData&lt;/code&gt; object that contains
                  metadata about the database to which this
                  &lt;code&gt;Connection&lt;/code&gt; object represents a connection.
                  The metadata includes information about the database&apos;s
                  tables, its supported SQL grammar, its stored
                  procedures, the capabilities of this connection, and so on.                
                <return>
                    a <code>DatabaseMetaData</code> object for this
                      <code>Connection</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="setReadOnly" type="void" line="261"/>
            <javadoc line="261">
                Puts this connection in read-only mode as a hint to the driver to enable
                  database optimizations.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This method cannot be called during a transaction.                
                <param>
                    readOnly <code>true</code> enables read-only mode;
                      <code>false</code> disables it                    
                </param>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection or this
                      method is called during a transaction                    
                </exception>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="272"/>
            <javadoc line="272">
                Retrieves whether this &lt;code&gt;Connection&lt;/code&gt;
                  object is in read-only mode.                
                <return>
                    <code>true</code> if this <code>Connection</code> object
                      is read-only; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="setCatalog" type="void" line="281"/>
            <javadoc line="281">
                Sets the given catalog name in order to select
                  a subspace of this &lt;code&gt;Connection&lt;/code&gt; object&apos;s database
                  in which to work.
                  &lt;P&gt;
                  If the driver does not support catalogs, it will
                  silently ignore this request.
                  &lt;p&gt;
                  Calling {@code setCatalog} has no effect on previously created or prepared{@code Statement} objects. It is implementation defined whether a DBMS
                  prepare operation takes place immediately when the {@code Connection}method {@code prepareStatement} or {@code prepareCall} is invoked.
                  For maximum portability, {@code setCatalog} should be called before a{@code Statement} is created or prepared.                
                <param>
                    catalog the name of a catalog (subspace in this
                      <code>Connection</code> object's database) in which to work                    
                </param>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #getCatalog                    
                </see>
            </javadoc>
            <method name="getCatalog" type="String" line="299"/>
            <javadoc line="299">
                Retrieves this &lt;code&gt;Connection&lt;/code&gt; object&apos;s current catalog name.                
                <return>
                    the current catalog name or <code>null</code> if there is none                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #setCatalog                    
                </see>
            </javadoc>
            <declaration name="TRANSACTION_NONE" type="int" line="307"/>
            <javadoc line="307">
                A constant indicating that transactions are not supported.                
            </javadoc>
            <declaration name="TRANSACTION_READ_UNCOMMITTED" type="int" line="311"/>
            <javadoc line="311">
                A constant indicating that
                  dirty reads, non-repeatable reads and phantom reads can occur.
                  This level allows a row changed by one transaction to be read
                  by another transaction before any changes in that row have been
                  committed (a &quot;dirty read&quot;).  If any of the changes are rolled back,
                  the second transaction will have retrieved an invalid row.                
            </javadoc>
            <declaration name="TRANSACTION_READ_COMMITTED" type="int" line="320"/>
            <javadoc line="320">
                A constant indicating that
                  dirty reads are prevented; non-repeatable reads and phantom
                  reads can occur.  This level only prohibits a transaction
                  from reading a row with uncommitted changes in it.                
            </javadoc>
            <declaration name="TRANSACTION_REPEATABLE_READ" type="int" line="327"/>
            <javadoc line="327">
                A constant indicating that
                  dirty reads and non-repeatable reads are prevented; phantom
                  reads can occur.  This level prohibits a transaction from
                  reading a row with uncommitted changes in it, and it also
                  prohibits the situation where one transaction reads a row,
                  a second transaction alters the row, and the first transaction
                  rereads the row, getting different values the second time
                  (a &quot;non-repeatable read&quot;).                
            </javadoc>
            <declaration name="TRANSACTION_SERIALIZABLE" type="int" line="338"/>
            <javadoc line="338">
                A constant indicating that
                  dirty reads, non-repeatable reads and phantom reads are prevented.
                  This level includes the prohibitions in
                  &lt;code&gt;TRANSACTION_REPEATABLE_READ&lt;/code&gt; and further prohibits the
                  situation where one transaction reads all rows that satisfy
                  a &lt;code&gt;WHERE&lt;/code&gt; condition, a second transaction inserts a row that
                  satisfies that &lt;code&gt;WHERE&lt;/code&gt; condition, and the first transaction
                  rereads for the same condition, retrieving the additional
                  &quot;phantom&quot; row in the second read.                
            </javadoc>
            <method name="setTransactionIsolation" type="void" line="350"/>
            <javadoc line="350">
                Attempts to change the transaction isolation level for this
                  &lt;code&gt;Connection&lt;/code&gt; object to the one given.
                  The constants defined in the interface &lt;code&gt;Connection&lt;/code&gt;
                  are the possible transaction isolation levels.
                  &lt;P&gt;
                  &lt;B&gt;Note:&lt;/B&gt; If this method is called during a transaction, the result
                  is implementation-defined.                
                <param>
                    level one of the following <code>Connection</code> constants:
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>.
                      (Note that <code>Connection.TRANSACTION_NONE</code> cannot be used
                      because it specifies that transactions are not supported.)                    
                </param>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameter is not one of the <code>Connection</code>
                      constants                    
                </exception>
                <see>
                    DatabaseMetaData#supportsTransactionIsolationLevel                    
                </see>
                <see>
                    #getTransactionIsolation                    
                </see>
            </javadoc>
            <method name="getTransactionIsolation" type="int" line="373"/>
            <javadoc line="373">
                Retrieves this &lt;code&gt;Connection&lt;/code&gt; object&apos;s current
                  transaction isolation level.                
                <return>
                    the current transaction isolation level, which will be one
                      of the following constants:
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>,
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>, or
                      <code>Connection.TRANSACTION_NONE</code>.                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #setTransactionIsolation                    
                </see>
            </javadoc>
            <method name="getWarnings" type="SQLWarning" line="388"/>
            <javadoc line="388">
                Retrieves the first warning reported by calls on this
                  &lt;code&gt;Connection&lt;/code&gt; object.  If there is more than one
                  warning, subsequent warnings will be chained to the first one
                  and can be retrieved by calling the method
                  &lt;code&gt;SQLWarning.getNextWarning&lt;/code&gt; on the warning
                  that was retrieved previously.
                  &lt;P&gt;
                  This method may not be
                  called on a closed connection; doing so will cause an
                  &lt;code&gt;SQLException&lt;/code&gt; to be thrown.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Subsequent warnings will be chained to this
                  SQLWarning.                
                <return>
                    the first <code>SQLWarning</code> object or <code>null</code>
                      if there are none                    
                </return>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed connection                    
                </exception>
                <see>
                    SQLWarning                    
                </see>
            </javadoc>
            <method name="clearWarnings" type="void" line="408"/>
            <javadoc line="408">
                Clears all warnings reported for this &lt;code&gt;Connection&lt;/code&gt; object.
                  After a call to this method, the method &lt;code&gt;getWarnings&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt; until a new warning is
                  reported for this &lt;code&gt;Connection&lt;/code&gt; object.                
                <exception>
                    SQLException SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
            </javadoc>
            <method name="createStatement" type="Statement" line="417"/>
            <javadoc line="417">
                Creates a &lt;code&gt;Statement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                  This method is the same as the &lt;code&gt;createStatement&lt;/code&gt; method
                  above, but it allows the default result set
                  type and concurrency to be overridden.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    resultSetType a result set type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency a concurrency type; one of
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <return>
                    a new <code>Statement</code> object that will generate
                      <code>ResultSet</code> objects with the given type and
                      concurrency                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type and concurrency                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type and result set concurrency.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="445"/>
            <javadoc line="445">
                Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                  This method is the same as the &lt;code&gt;prepareStatement&lt;/code&gt; method
                  above, but it allows the default result set
                  type and concurrency to be overridden.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql a <code>String</code> object that is the SQL statement to
                      be sent to the database; may contain one or more '?' IN
                      parameters                    
                </param>
                <param>
                    resultSetType a result set type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency a concurrency type; one of
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <return>
                    a new PreparedStatement object containing the
                      pre-compiled SQL statement that will produce <code>ResultSet</code>
                      objects with the given type and concurrency                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type and concurrency                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type and result set concurrency.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="prepareCall" type="CallableStatement" line="476"/>
            <javadoc line="476">
                Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                  This method is the same as the &lt;code&gt;prepareCall&lt;/code&gt; method
                  above, but it allows the default result set
                  type and concurrency to be overridden.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql a <code>String</code> object that is the SQL statement to
                      be sent to the database; may contain on or more '?' parameters                    
                </param>
                <param>
                    resultSetType a result set type; one of
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency a concurrency type; one of
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <return>
                    a new <code>CallableStatement</code> object containing the
                      pre-compiled SQL statement that will produce <code>ResultSet</code>
                      objects with the given type and concurrency                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this method
                      is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type and concurrency                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type and result set concurrency.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTypeMap" type="java.util.Map<String,Class<?>>" line="506"/>
            <javadoc line="506">
                Retrieves the &lt;code&gt;Map&lt;/code&gt; object associated with this
                  &lt;code&gt;Connection&lt;/code&gt; object.
                  Unless the application has added an entry, the type map returned
                  will be empty.
                  &lt;p&gt;
                  You must invoke &lt;code&gt;setTypeMap&lt;/code&gt; after making changes to the
                  &lt;code&gt;Map&lt;/code&gt; object returned from
                  &lt;code&gt;getTypeMap&lt;/code&gt; as a JDBC driver may create an internal
                  copy of the &lt;code&gt;Map&lt;/code&gt; object passed to &lt;code&gt;setTypeMap&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt; myMap = con.getTypeMap();
                  myMap.put(&quot;mySchemaName.ATHLETES&quot;, Athletes.class);
                  con.setTypeMap(myMap);
                  &lt;/pre&gt;                
                <return>
                    the <code>java.util.Map</code> object associated
                      with this <code>Connection</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #setTypeMap                    
                </see>
            </javadoc>
            <method name="setTypeMap" type="void" line="532"/>
            <javadoc line="532">
                Installs the given &lt;code&gt;TypeMap&lt;/code&gt; object as the type map for
                  this &lt;code&gt;Connection&lt;/code&gt; object.  The type map will be used for the
                  custom mapping of SQL structured types and distinct types.
                  &lt;p&gt;
                  You must set the the values for the &lt;code&gt;TypeMap&lt;/code&gt; prior to
                  callng &lt;code&gt;setMap&lt;/code&gt; as a JDBC driver may create an internal copy
                  of the &lt;code&gt;TypeMap&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Map myMap&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt; = new HashMap&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt;();
                  myMap.put(&quot;mySchemaName.ATHLETES&quot;, Athletes.class);
                  con.setTypeMap(myMap);
                  &lt;/pre&gt;                
                <param>
                    map the <code>java.util.Map</code> object to install
                      as the replacement for this <code>Connection</code>
                      object's default type map                    
                </param>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection or
                      the given parameter is not a <code>java.util.Map</code>
                      object                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
                <see>
                    #getTypeMap                    
                </see>
            </javadoc>
            <method name="setHoldability" type="void" line="559"/>
            <javadoc line="559">
                Changes the default holdability of &lt;code&gt;ResultSet&lt;/code&gt; objects
                  created using this &lt;code&gt;Connection&lt;/code&gt; object to the given
                  holdability.  The default holdability of &lt;code&gt;ResultSet&lt;/code&gt; objects
                  can be be determined by invoking{@link DatabaseMetaData#getResultSetHoldability}.                
                <param>
                    holdability a <code>ResultSet</code> holdability constant; one of
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </param>
                <throws>
                    SQLException if a database access occurs, this method is called
                      on a closed connection, or the given parameter
                      is not a <code>ResultSet</code> constant indicating holdability                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the given holdability is not supported                    
                </exception>
                <see>
                    #getHoldability                    
                </see>
                <see>
                    DatabaseMetaData#getResultSetHoldability                    
                </see>
                <see>
                    ResultSet                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHoldability" type="int" line="577"/>
            <javadoc line="577">
                Retrieves the current holdability of &lt;code&gt;ResultSet&lt;/code&gt; objects
                  created using this &lt;code&gt;Connection&lt;/code&gt; object.                
                <return>
                    the holdability, one of
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </throws>
                <see>
                    #setHoldability                    
                </see>
                <see>
                    DatabaseMetaData#getResultSetHoldability                    
                </see>
                <see>
                    ResultSet                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setSavepoint" type="Savepoint" line="591"/>
            <javadoc line="591">
                Creates an unnamed savepoint in the current transaction and
                  returns the new &lt;code&gt;Savepoint&lt;/code&gt; object that represents it.
                  &lt;p&gt; if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created
                  savepoint.                
                <return>
                    the new <code>Savepoint</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called while participating in a distributed transaction,
                      this method is called on a closed connection
                      or this <code>Connection</code> object is currently in
                      auto-commit mode                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    Savepoint                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setSavepoint" type="Savepoint" line="608"/>
            <javadoc line="608">
                Creates a savepoint with the given name in the current transaction
                  and returns the new &lt;code&gt;Savepoint&lt;/code&gt; object that represents it.
                  &lt;p&gt; if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created
                  savepoint.                
                <param>
                    name a <code>String</code> containing the name of the savepoint                    
                </param>
                <return>
                    the new <code>Savepoint</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called while participating in a distributed transaction,
                      this method is called on a closed connection
                      or this <code>Connection</code> object is currently in
                      auto-commit mode                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    Savepoint                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="rollback" type="void" line="626"/>
            <javadoc line="626">
                Undoes all changes made after the given &lt;code&gt;Savepoint&lt;/code&gt; object
                  was set.
                  &lt;P&gt;
                  This method should be used only when auto-commit has been disabled.                
                <param>
                    savepoint the <code>Savepoint</code> object to roll back to                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called while participating in a distributed transaction,
                      this method is called on a closed connection,
                      the <code>Savepoint</code> object is no longer valid,
                      or this <code>Connection</code> object is currently in
                      auto-commit mode                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    Savepoint                    
                </see>
                <see>
                    #rollback                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="releaseSavepoint" type="void" line="645"/>
            <javadoc line="645">
                Removes the specified &lt;code&gt;Savepoint&lt;/code&gt;  and subsequent &lt;code&gt;Savepoint&lt;/code&gt; objects from the current
                  transaction. Any reference to the savepoint after it have been removed
                  will cause an &lt;code&gt;SQLException&lt;/code&gt; to be thrown.                
                <param>
                    savepoint the <code>Savepoint</code> object to be removed                    
                </param>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection or
                      the given <code>Savepoint</code> object is not a valid
                      savepoint in the current transaction                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createStatement" type="Statement" line="659"/>
            <javadoc line="659">
                Creates a &lt;code&gt;Statement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type, concurrency,
                  and holdability.
                  This method is the same as the &lt;code&gt;createStatement&lt;/code&gt; method
                  above, but it allows the default result set
                  type, concurrency, and holdability to be overridden.                
                <param>
                    resultSetType one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <param>
                    resultSetHoldability one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </param>
                <return>
                    a new <code>Statement</code> object that will generate
                      <code>ResultSet</code> objects with the given type,
                      concurrency, and holdability                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type, concurrency, and holdability                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type, result set holdability and result set concurrency.                    
                </exception>
                <see>
                    ResultSet                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="693"/>
            <javadoc line="693">
                Creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type, concurrency,
                  and holdability.
                  &lt;P&gt;
                  This method is the same as the &lt;code&gt;prepareStatement&lt;/code&gt; method
                  above, but it allows the default result set
                  type, concurrency, and holdability to be overridden.                
                <param>
                    sql a <code>String</code> object that is the SQL statement to
                      be sent to the database; may contain one or more '?' IN
                      parameters                    
                </param>
                <param>
                    resultSetType one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <param>
                    resultSetHoldability one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </param>
                <return>
                    a new <code>PreparedStatement</code> object, containing the
                      pre-compiled SQL statement, that will generate
                      <code>ResultSet</code> objects with the given type,
                      concurrency, and holdability                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type, concurrency, and holdability                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type, result set holdability and result set concurrency.                    
                </exception>
                <see>
                    ResultSet                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="prepareCall" type="CallableStatement" line="732"/>
            <javadoc line="732">
                Creates a &lt;code&gt;CallableStatement&lt;/code&gt; object that will generate
                  &lt;code&gt;ResultSet&lt;/code&gt; objects with the given type and concurrency.
                  This method is the same as the &lt;code&gt;prepareCall&lt;/code&gt; method
                  above, but it allows the default result set
                  type, result set concurrency type and holdability to be overridden.                
                <param>
                    sql a <code>String</code> object that is the SQL statement to
                      be sent to the database; may contain on or more '?' parameters                    
                </param>
                <param>
                    resultSetType one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <param>
                    resultSetConcurrency one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <param>
                    resultSetHoldability one of the following <code>ResultSet</code>
                      constants:
                      <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
                      <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>                    
                </param>
                <return>
                    a new <code>CallableStatement</code> object, containing the
                      pre-compiled SQL statement, that will generate
                      <code>ResultSet</code> objects with the given type,
                      concurrency, and holdability                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameters are not <code>ResultSet</code>
                      constants indicating type, concurrency, and holdability                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method or this method is not supported for the specified result
                      set type, result set holdability and result set concurrency.                    
                </exception>
                <see>
                    ResultSet                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="768"/>
            <javadoc line="768">
                Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object that has
                  the capability to retrieve auto-generated keys. The given constant
                  tells the driver whether it should make auto-generated keys
                  available for retrieval.  This parameter is ignored if the SQL statement
                  is not an &lt;code&gt;INSERT&lt;/code&gt; statement, or an SQL statement able to return
                  auto-generated keys (the list of such statements is vendor-specific).
                  &lt;P&gt;
                  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling
                  parametric SQL statements that benefit from precompilation. If
                  the driver supports precompilation,
                  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send
                  the statement to the database for precompilation. Some drivers
                  may not support precompilation. In this case, the statement may
                  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object is executed.  This has no direct effect on users; however, it does
                  affect which methods throw certain SQLExceptions.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql an SQL statement that may contain one or more '?' IN
                      parameter placeholders                    
                </param>
                <param>
                    autoGeneratedKeys a flag indicating whether auto-generated keys
                      should be returned; one of
                      <code>Statement.RETURN_GENERATED_KEYS</code> or
                      <code>Statement.NO_GENERATED_KEYS</code>                    
                </param>
                <return>
                    a new <code>PreparedStatement</code> object, containing the
                      pre-compiled SQL statement, that will have the capability of
                      returning auto-generated keys                    
                </return>
                <exception>
                    SQLException if a database access error occurs, this
                      method is called on a closed connection
                      or the given parameter is not a <code>Statement</code>
                      constant indicating whether auto-generated keys should be
                      returned                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method with a constant of Statement.RETURN_GENERATED_KEYS                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="810"/>
            <javadoc line="810">
                Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object capable
                  of returning the auto-generated keys designated by the given array.
                  This array contains the indexes of the columns in the target
                  table that contain the auto-generated keys that should be made
                  available.  The driver will ignore the array if the SQL statement
                  is not an &lt;code&gt;INSERT&lt;/code&gt; statement, or an SQL statement able to return
                  auto-generated keys (the list of such statements is vendor-specific).
                  &lt;p&gt;
                  An SQL statement with or without IN parameters can be
                  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This
                  object can then be used to efficiently execute this statement
                  multiple times.
                  &lt;P&gt;
                  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling
                  parametric SQL statements that benefit from precompilation. If
                  the driver supports precompilation,
                  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send
                  the statement to the database for precompilation. Some drivers
                  may not support precompilation. In this case, the statement may
                  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object is executed.  This has no direct effect on users; however, it does
                  affect which methods throw certain SQLExceptions.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql an SQL statement that may contain one or more '?' IN
                      parameter placeholders                    
                </param>
                <param>
                    columnIndexes an array of column indexes indicating the columns
                      that should be returned from the inserted row or rows                    
                </param>
                <return>
                    a new <code>PreparedStatement</code> object, containing the
                      pre-compiled statement, that is capable of returning the
                      auto-generated keys designated by the given array of column
                      indexes                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="prepareStatement" type="PreparedStatement" line="854"/>
            <javadoc line="854">
                Creates a default &lt;code&gt;PreparedStatement&lt;/code&gt; object capable
                  of returning the auto-generated keys designated by the given array.
                  This array contains the names of the columns in the target
                  table that contain the auto-generated keys that should be returned.
                  The driver will ignore the array if the SQL statement
                  is not an &lt;code&gt;INSERT&lt;/code&gt; statement, or an SQL statement able to return
                  auto-generated keys (the list of such statements is vendor-specific).
                  &lt;P&gt;
                  An SQL statement with or without IN parameters can be
                  pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This
                  object can then be used to efficiently execute this statement
                  multiple times.
                  &lt;P&gt;
                  &lt;B&gt;Note:&lt;/B&gt; This method is optimized for handling
                  parametric SQL statements that benefit from precompilation. If
                  the driver supports precompilation,
                  the method &lt;code&gt;prepareStatement&lt;/code&gt; will send
                  the statement to the database for precompilation. Some drivers
                  may not support precompilation. In this case, the statement may
                  not be sent to the database until the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object is executed.  This has no direct effect on users; however, it does
                  affect which methods throw certain SQLExceptions.
                  &lt;P&gt;
                  Result sets created using the returned &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object will by default be type &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
                  and have a concurrency level of &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt;.
                  The holdability of the created result sets can be determined by
                  calling {@link #getHoldability}.                
                <param>
                    sql an SQL statement that may contain one or more '?' IN
                      parameter placeholders                    
                </param>
                <param>
                    columnNames an array of column names indicating the columns
                      that should be returned from the inserted row or rows                    
                </param>
                <return>
                    a new <code>PreparedStatement</code> object, containing the
                      pre-compiled statement, that is capable of returning the
                      auto-generated keys designated by the given array of column
                      names                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createClob" type="Clob" line="898"/>
            <javadoc line="898">
                Constructs an object that implements the &lt;code&gt;Clob&lt;/code&gt; interface. The object
                  returned initially contains no data.  The &lt;code&gt;setAsciiStream&lt;/code&gt;,
                  &lt;code&gt;setCharacterStream&lt;/code&gt; and &lt;code&gt;setString&lt;/code&gt; methods of
                  the &lt;code&gt;Clob&lt;/code&gt; interface may be used to add data to the &lt;code&gt;Clob&lt;/code&gt;.                
                <return>
                    An object that implements the <code>Clob</code> interface                    
                </return>
                <throws>
                    SQLException if an object that implements the
                      <code>Clob</code> interface can not be constructed, this method is
                      called on a closed connection or a database access error occurs.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this data type                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createBlob" type="Blob" line="912"/>
            <javadoc line="912">
                Constructs an object that implements the &lt;code&gt;Blob&lt;/code&gt; interface. The object
                  returned initially contains no data.  The &lt;code&gt;setBinaryStream&lt;/code&gt; and
                  &lt;code&gt;setBytes&lt;/code&gt; methods of the &lt;code&gt;Blob&lt;/code&gt; interface may be used to add data to
                  the &lt;code&gt;Blob&lt;/code&gt;.                
                <return>
                    An object that implements the <code>Blob</code> interface                    
                </return>
                <throws>
                    SQLException if an object that implements the
                      <code>Blob</code> interface can not be constructed, this method is
                      called on a closed connection or a database access error occurs.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this data type                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createNClob" type="NClob" line="926"/>
            <javadoc line="926">
                Constructs an object that implements the &lt;code&gt;NClob&lt;/code&gt; interface. The object
                  returned initially contains no data.  The &lt;code&gt;setAsciiStream&lt;/code&gt;,
                  &lt;code&gt;setCharacterStream&lt;/code&gt; and &lt;code&gt;setString&lt;/code&gt; methods of the &lt;code&gt;NClob&lt;/code&gt; interface may
                  be used to add data to the &lt;code&gt;NClob&lt;/code&gt;.                
                <return>
                    An object that implements the <code>NClob</code> interface                    
                </return>
                <throws>
                    SQLException if an object that implements the
                      <code>NClob</code> interface can not be constructed, this method is
                      called on a closed connection or a database access error occurs.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this data type                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createSQLXML" type="SQLXML" line="940"/>
            <javadoc line="940">
                Constructs an object that implements the &lt;code&gt;SQLXML&lt;/code&gt; interface. The object
                  returned initially contains no data. The &lt;code&gt;createXmlStreamWriter&lt;/code&gt; object and
                  &lt;code&gt;setString&lt;/code&gt; method of the &lt;code&gt;SQLXML&lt;/code&gt; interface may be used to add data to the &lt;code&gt;SQLXML&lt;/code&gt;
                  object.                
                <return>
                    An object that implements the <code>SQLXML</code> interface                    
                </return>
                <throws>
                    SQLException if an object that implements the <code>SQLXML</code> interface can not
                      be constructed, this method is
                      called on a closed connection or a database access error occurs.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this data type                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isValid" type="boolean" line="954"/>
            <javadoc line="954">
                Returns true if the connection has not been closed and is still valid.
                  The driver shall submit a query on the connection or use some other
                  mechanism that positively verifies the connection is still valid when
                  this method is called.
                  &lt;p&gt;
                  The query submitted by the driver to validate the connection shall be
                  executed in the context of the current transaction.                
                <param>
                    timeout -             The time in seconds to wait for the database operation
                      used to validate the connection to complete.  If
                      the timeout period expires before the operation
                      completes, this method returns false.  A value of
                      0 indicates a timeout is not applied to the
                      database operation.
                      <p>                    
                </param>
                <return>
                    true if the connection is valid, false otherwise                    
                </return>
                <exception>
                    SQLException if the value supplied for <code>timeout</code>
                      is less then 0                    
                </exception>
                <since>
                    1.6
                      <p>                    
                </since>
                <see>
                    java.sql.DatabaseMetaData#getClientInfoProperties                    
                </see>
            </javadoc>
            <method name="setClientInfo" type="void" line="977"/>
            <javadoc line="977">
                Sets the value of the client info property specified by name to the
                  value specified by value.
                  &lt;p&gt;
                  Applications may use the &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt;
                  method to determine the client info properties supported by the driver
                  and the maximum length that may be specified for each property.
                  &lt;p&gt;
                  The driver stores the value specified in a suitable location in the
                  database.  For example in a special register, session parameter, or
                  system table column.  For efficiency the driver may defer setting the
                  value in the database until the next time a statement is executed or
                  prepared.  Other than storing the client information in the appropriate
                  place in the database, these methods shall not alter the behavior of
                  the connection in anyway.  The values supplied to these methods are
                  used for accounting, diagnostics and debugging purposes only.
                  &lt;p&gt;
                  The driver shall generate a warning if the client info name specified
                  is not recognized by the driver.
                  &lt;p&gt;
                  If the value specified to this method is greater than the maximum
                  length for the property the driver may either truncate the value and
                  generate a warning or generate a &lt;code&gt;SQLClientInfoException&lt;/code&gt;.  If the driver
                  generates a &lt;code&gt;SQLClientInfoException&lt;/code&gt;, the value specified was not set on the
                  connection.
                  &lt;p&gt;
                  The following are standard client info properties.  Drivers are not
                  required to support these properties however if the driver supports a
                  client info property that can be described by one of the standard
                  properties, the standard property name should be used.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;ApplicationName  -       The name of the application currently utilizing
                  the connection&lt;/li&gt;
                  &lt;li&gt;ClientUser               -       The name of the user that the application using
                  the connection is performing work for.  This may
                  not be the same as the user name that was used
                  in establishing the connection.&lt;/li&gt;
                  &lt;li&gt;ClientHostname   -       The hostname of the computer the application
                  using the connection is running on.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <param>
                    name          The name of the client info property to set                    
                </param>
                <param>
                    value         The value to set the client info property to.  If the
                      value is null, the current value of the specified
                      property is cleared.
                      <p>                    
                </param>
                <throws>
                    SQLClientInfoException if the database server returns an error while
                      setting the client info value on the database server or this method
                      is called on a closed connection
                      <p>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClientInfo" type="void" line="1031"/>
            <javadoc line="1031">
                Sets the value of the connection&apos;s client info properties.  The
                  &lt;code&gt;Properties&lt;/code&gt; object contains the names and values of the client info
                  properties to be set.  The set of client info properties contained in
                  the properties list replaces the current set of client info properties
                  on the connection.  If a property that is currently set on the
                  connection is not present in the properties list, that property is
                  cleared.  Specifying an empty properties list will clear all of the
                  properties on the connection.  See &lt;code&gt;setClientInfo (String, String)&lt;/code&gt; for
                  more information.
                  &lt;p&gt;
                  If an error occurs in setting any of the client info properties, a
                  &lt;code&gt;SQLClientInfoException&lt;/code&gt; is thrown. The &lt;code&gt;SQLClientInfoException&lt;/code&gt;
                  contains information indicating which client info properties were not set.
                  The state of the client information is unknown because
                  some databases do not allow multiple client info properties to be set
                  atomically.  For those databases, one or more properties may have been
                  set before the error occurred.
                  &lt;p&gt;                
                <param>
                    properties                the list of client info properties to set
                      <p>                    
                </param>
                <see>
                    java.sql.Connection#setClientInfo(String,String) setClientInfo(String, String)                    
                </see>
                <since>
                    1.6
                      <p>                    
                </since>
                <throws>
                    SQLClientInfoException if the database server returns an error while
                      setting the clientInfo values on the database server or this method
                      is called on a closed connection
                      <p>                    
                </throws>
            </javadoc>
            <method name="getClientInfo" type="String" line="1061"/>
            <javadoc line="1061">
                Returns the value of the client info property specified by name.  This
                  method may return null if the specified client info property has not
                  been set and does not have a default value.  This method will also
                  return null if the specified client info property name is not supported
                  by the driver.
                  &lt;p&gt;
                  Applications may use the &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt;
                  method to determine the client info properties supported by the driver.
                  &lt;p&gt;                
                <param>
                    name          The name of the client info property to retrieve
                      <p>                    
                </param>
                <return>
                    The value of the client info property specified
                      <p>                    
                </return>
                <throws>
                    SQLException         if the database server returns an error when
                      fetching the client info value from the database
                      or this method is called on a closed connection
                      <p>                    
                </throws>
                <since>
                    1.6
                      <p>                    
                </since>
                <see>
                    java.sql.DatabaseMetaData#getClientInfoProperties                    
                </see>
            </javadoc>
            <method name="getClientInfo" type="Properties" line="1084"/>
            <javadoc line="1084">
                Returns a list containing the name and current value of each client info
                  property supported by the driver.  The value of a client info property
                  may be null if the property has not been set and does not have a
                  default value.
                  &lt;p&gt;                
                <return>
                    A <code>Properties</code> object that contains the name and current value of
                      each of the client info properties supported by the driver.
                      <p>                    
                </return>
                <throws>
                    SQLException if the database server returns an error when
                      fetching the client info values from the database
                      or this method is called on a closed connection
                      <p>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createArrayOf" type="Array" line="1100"/>
            <javadoc line="1100">
                Factory method for creating Array objects.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt;When &lt;code&gt;createArrayOf&lt;/code&gt; is used to create an array object
                  that maps to a primitive data type, then it is implementation-defined
                  whether the &lt;code&gt;Array&lt;/code&gt; object is an array of that primitive
                  data type or an array of &lt;code&gt;Object&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt;The JDBC driver is responsible for mapping the elements
                  &lt;code&gt;Object&lt;/code&gt; array to the default JDBC SQL type defined in
                  java.sql.Types for the given class of &lt;code&gt;Object&lt;/code&gt;. The default
                  mapping is specified in Appendix B of the JDBC specification.  If the
                  resulting JDBC type is not the appropriate type for the given typeName then
                  it is implementation defined whether an &lt;code&gt;SQLException&lt;/code&gt; is
                  thrown or the driver supports the resulting conversion.                
                <param>
                    typeName the SQL name of the type the elements of the array map to. The typeName is a
                      database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This
                      is the value returned by <code>Array.getBaseTypeName</code>                    
                </param>
                <param>
                    elements the elements that populate the returned object                    
                </param>
                <return>
                    an Array object whose elements map to the specified SQL type                    
                </return>
                <throws>
                    SQLException if a database error occurs, the JDBC type is not
                      appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this data type                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createStruct" type="Struct" line="1126"/>
            <javadoc line="1126">
                Factory method for creating Struct objects.                
                <param>
                    typeName the SQL type name of the SQL structured type that this <code>Struct</code>
                      object maps to. The typeName is the name of  a user-defined type that
                      has been defined for this database. It is the value returned by
                      <code>Struct.getSQLTypeName</code>.                    
                </param>
                <param>
                    attributes the attributes that populate the returned object                    
                </param>
                <return>
                    a Struct object that maps to the given SQL type and is populated with the given attributes                    
                </return>
                <throws>
                    SQLException if a database error occurs, the typeName is null or this method is called on a closed connection                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this data type                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSchema" type="void" line="1139"/>
            <javadoc line="1139">
                Sets the given schema name to access.
                  &lt;P&gt;
                  If the driver does not support schemas, it will
                  silently ignore this request.
                  &lt;p&gt;
                  Calling {@code setSchema} has no effect on previously created or prepared{@code Statement} objects. It is implementation defined whether a DBMS
                  prepare operation takes place immediately when the {@code Connection}method {@code prepareStatement} or {@code prepareCall} is invoked.
                  For maximum portability, {@code setSchema} should be called before a{@code Statement} is created or prepared.                
                <param>
                    schema the name of a schema  in which to work                    
                </param>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #getSchema                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getSchema" type="String" line="1155"/>
            <javadoc line="1155">
                Retrieves this &lt;code&gt;Connection&lt;/code&gt; object&apos;s current schema name.                
                <return>
                    the current schema name or <code>null</code> if there is none                    
                </return>
                <exception>
                    SQLException if a database access error occurs
                      or this method is called on a closed connection                    
                </exception>
                <see>
                    #setSchema                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="abort" type="void" line="1164"/>
            <javadoc line="1164">
                Terminates an open connection.  Calling &lt;code&gt;abort&lt;/code&gt; results in:
                  &lt;ul&gt;
                  &lt;li&gt;The connection marked as closed
                  &lt;li&gt;Closes any physical connection to the database
                  &lt;li&gt;Releases resources used by the connection
                  &lt;li&gt;Insures that any thread that is currently accessing the connection
                  will either progress to completion or throw an &lt;code&gt;SQLException&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Calling &lt;code&gt;abort&lt;/code&gt; marks the connection closed and releases any
                  resources. Calling &lt;code&gt;abort&lt;/code&gt; on a closed connection is a
                  no-op.
                  &lt;p&gt;
                  It is possible that the aborting and releasing of the resources that are
                  held by the connection can take an extended period of time.  When the
                  &lt;code&gt;abort&lt;/code&gt; method returns, the connection will have been marked as
                  closed and the &lt;code&gt;Executor&lt;/code&gt; that was passed as a parameter to abort
                  may still be executing tasks to release resources.
                  &lt;p&gt;
                  This method checks to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt;
                  object before allowing the method to proceed.  If a
                  &lt;code&gt;SecurityManager&lt;/code&gt; exists and its
                  &lt;code&gt;checkPermission&lt;/code&gt; method denies calling &lt;code&gt;abort&lt;/code&gt;,
                  this method throws a
                  &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.                
                <param>
                    executor  The <code>Executor</code>  implementation which will
                      be used by <code>abort</code>.                    
                </param>
                <throws>
                    java.sql.SQLException if a database access error occurs or
                      the {@code executor} is {@code null},                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager exists and its
                      <code>checkPermission</code> method denies calling <code>abort</code>                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    Executor                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setNetworkTimeout" type="void" line="1201"/>
            <javadoc line="1201">
                Sets the maximum period a &lt;code&gt;Connection&lt;/code&gt; or
                  objects created from the &lt;code&gt;Connection&lt;/code&gt;
                  will wait for the database to reply to any one request. If any
                  request remains unanswered, the waiting method will
                  return with a &lt;code&gt;SQLException&lt;/code&gt;, and the &lt;code&gt;Connection&lt;/code&gt;
                  or objects created from the &lt;code&gt;Connection&lt;/code&gt;  will be marked as
                  closed. Any subsequent use of
                  the objects, with the exception of the &lt;code&gt;close&lt;/code&gt;,
                  &lt;code&gt;isClosed&lt;/code&gt; or &lt;code&gt;Connection.isValid&lt;/code&gt;
                  methods, will result in  a &lt;code&gt;SQLException&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: This method is intended to address a rare but serious
                  condition where network partitions can cause threads issuing JDBC calls
                  to hang uninterruptedly in socket reads, until the OS TCP-TIMEOUT
                  (typically 10 minutes). This method is related to the{@link #abort abort() } method which provides an administrator
                  thread a means to free any such threads in cases where the
                  JDBC connection is accessible to the administrator thread.
                  The &lt;code&gt;setNetworkTimeout&lt;/code&gt; method will cover cases where
                  there is no administrator thread, or it has no access to the
                  connection. This method is severe in it&apos;s effects, and should be
                  given a high enough value so it is never triggered before any more
                  normal timeouts, such as transaction timeouts.
                  &lt;p&gt;
                  JDBC driver implementations  may also choose to support the{@code setNetworkTimeout} method to impose a limit on database
                  response time, in environments where no network is present.
                  &lt;p&gt;
                  Drivers may internally implement some or all of their API calls with
                  multiple internal driver-database transmissions, and it is left to the
                  driver implementation to determine whether the limit will be
                  applied always to the response to the API call, or to any
                  single  request made during the API call.
                  &lt;p&gt;
                  This method can be invoked more than once, such as to set a limit for an
                  area of JDBC code, and to reset to the default on exit from this area.
                  Invocation of this method has no impact on already outstanding
                  requests.
                  &lt;p&gt;
                  The {@code Statement.setQueryTimeout()} timeout value is independent of the
                  timeout value specified in {@code setNetworkTimeout}. If the query timeout
                  expires  before the network timeout then the
                  statement execution will be canceled. If the network is still
                  active the result will be that both the statement and connection
                  are still usable. However if the network timeout expires before
                  the query timeout or if the statement timeout fails due to network
                  problems, the connection will be marked as closed, any resources held by
                  the connection will be released and both the connection and
                  statement will be unusable.
                  &lt;p&gt;
                  When the driver determines that the {@code setNetworkTimeout} timeout
                  value has expired, the JDBC driver marks the connection
                  closed and releases any resources held by the connection.
                  &lt;p&gt;
                  This method checks to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt;
                  object before allowing the method to proceed.  If a
                  &lt;code&gt;SecurityManager&lt;/code&gt; exists and its
                  &lt;code&gt;checkPermission&lt;/code&gt; method denies calling
                  &lt;code&gt;setNetworkTimeout&lt;/code&gt;, this method throws a
                  &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.                
                <param>
                    executor  The <code>Executor</code>  implementation which will
                      be used by <code>setNetworkTimeout</code>.                    
                </param>
                <param>
                    milliseconds The time in milliseconds to wait for the database
                      operation
                      to complete.  If the JDBC driver does not support milliseconds, the
                      JDBC driver will round the value up to the nearest second.  If the
                      timeout period expires before the operation
                      completes, a SQLException will be thrown.
                      A value of 0 indicates that there is not timeout for database operations.                    
                </param>
                <throws>
                    java.sql.SQLException if a database access error occurs, this
                      method is called on a closed connection,
                      the {@code executor} is {@code null},
                      or the value specified for <code>seconds</code> is less than 0.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager exists and its
                      <code>checkPermission</code> method denies calling
                      <code>setNetworkTimeout</code>.                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    Statement#setQueryTimeout                    
                </see>
                <see>
                    #getNetworkTimeout                    
                </see>
                <see>
                    #abort                    
                </see>
                <see>
                    Executor                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getNetworkTimeout" type="int" line="1286"/>
            <javadoc line="1286">
                Retrieves the number of milliseconds the driver will
                  wait for a database request to complete.
                  If the limit is exceeded, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <return>
                    the current timeout limit in milliseconds; zero means there is
                      no limit                    
                </return>
                <throws>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>Connection</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #setNetworkTimeout                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>