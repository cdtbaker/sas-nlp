<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.Arrays"/>
        <class name="BatchUpdateException" line="30">
            <extends class="SQLException"/>
            <javadoc line="30">
                The subclass of {@link SQLException} thrown when an error
                  occurs during a batch update operation.  In addition to the
                  information provided by {@link SQLException}, a
                  &lt;code&gt;BatchUpdateException&lt;/code&gt; provides the update
                  counts for all commands that were executed successfully during the
                  batch update, that is, all commands that were executed before the error
                  occurred.  The order of elements in an array of update counts
                  corresponds to the order in which commands were added to the batch.
                  &lt;P&gt;
                  After a command in a batch update fails to execute properly
                  and a &lt;code&gt;BatchUpdateException&lt;/code&gt; is thrown, the driver
                  may or may not continue to process the remaining commands in
                  the batch.  If the driver continues processing after a failure,
                  the array returned by the method
                  &lt;code&gt;BatchUpdateException.getUpdateCounts&lt;/code&gt; will have
                  an element for every command in the batch rather than only
                  elements for the commands that executed successfully before
                  the error.  In the case where the driver continues processing
                  commands, the array element for any command
                  that failed is &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt;.
                  &lt;P&gt;                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="57">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with a given
                  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt;, &lt;code&gt;vendorCode&lt;/code&gt; and
                  &lt;code&gt;updateCounts&lt;/code&gt;.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
                <param>
                    reason a description of the error                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    vendorCode an exception code used by a particular
                      database vendor                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="81">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                    <param name="vendorCode" type="int"/>
                    <param name="updateCounts" type="int[]"/>
                </params>
            </method>
            <javadoc line="86">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with a given
                  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt; and
                  &lt;code&gt;updateCounts&lt;/code&gt;.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
                  is initialized to 0.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="109">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                    <param name="updateCounts" type="int[]"/>
                </params>
            </method>
            <javadoc line="113">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with a given
                  &lt;code&gt;reason&lt;/code&gt; and &lt;code&gt;updateCounts&lt;/code&gt;.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.  The
                  &lt;code&gt;SQLState&lt;/code&gt; is initialized to &lt;code&gt;null&lt;/code&gt;
                  and the vender code is initialized to 0.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="135">
                <params>
                    <param name="reason" type="String"/>
                    <param name="updateCounts" type="int[]"/>
                </params>
            </method>
            <javadoc line="139">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with a given
                  &lt;code&gt;updateCounts&lt;/code&gt;.
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method. The  &lt;code&gt;reason&lt;/code&gt;
                  and &lt;code&gt;SQLState&lt;/code&gt; are initialized to null and the vendor code
                  is initialized to 0.
                  &lt;p&gt;                
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="158">
                <params>
                    <param name="updateCounts" type="int[]"/>
                </params>
            </method>
            <javadoc line="162">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object.
                  The &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt; and &lt;code&gt;updateCounts&lt;/code&gt;
                  are initialized to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="173"/>
            <javadoc line="177">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with
                  a given &lt;code&gt;cause&lt;/code&gt;.
                  The &lt;code&gt;SQLState&lt;/code&gt; and &lt;code&gt;updateCounts&lt;/code&gt;
                  are initialized
                  to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.
                  The &lt;code&gt;reason&lt;/code&gt;  is initialized to &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;cause==null&lt;/code&gt; or to &lt;code&gt;cause.toString()&lt;/code&gt; if
                  &lt;code&gt;cause!=null&lt;/code&gt;.                
                <param>
                    cause the underlying reason for this &lt;code&gt;SQLException&lt;/code&gt;
                      (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method);
                      may be null indicating the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="191">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="195">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with a
                  given &lt;code&gt;cause&lt;/code&gt; and &lt;code&gt;updateCounts&lt;/code&gt;.
                  The &lt;code&gt;SQLState&lt;/code&gt; is initialized
                  to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.
                  The &lt;code&gt;reason&lt;/code&gt;  is initialized to &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;cause==null&lt;/code&gt; or to &lt;code&gt;cause.toString()&lt;/code&gt; if
                  &lt;code&gt;cause!=null&lt;/code&gt;.                
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <param>
                    cause the underlying reason for this &lt;code&gt;SQLException&lt;/code&gt;
                      (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method); may be null indicating
                      the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="217">
                <params>
                    <param name="updateCounts" type="int[]"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="221">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with
                  a given &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;cause&lt;/code&gt;
                  and &lt;code&gt;updateCounts&lt;/code&gt;. The &lt;code&gt;SQLState&lt;/code&gt; is initialized
                  to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <param>
                    cause the underlying reason for this &lt;code&gt;SQLException&lt;/code&gt; (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method);
                      may be null indicating
                      the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="241">
                <params>
                    <param name="reason" type="String"/>
                    <param name="updateCounts" type="int[]"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="245">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with
                  a given &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt;,&lt;code&gt;cause&lt;/code&gt;, and
                  &lt;code&gt;updateCounts&lt;/code&gt;. The vendor code is initialized to 0.                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <param>
                    cause the underlying reason for this &lt;code&gt;SQLException&lt;/code&gt; (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method);
                      may be null indicating
                      the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="266">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                    <param name="updateCounts" type="int[]"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="270">
                Constructs a &lt;code&gt;BatchUpdateException&lt;/code&gt; object initialized with
                  a given &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt;, &lt;code&gt;vendorCode&lt;/code&gt;
                  &lt;code&gt;cause&lt;/code&gt; and &lt;code&gt;updateCounts&lt;/code&gt;.                
                <param>
                    reason a description of the error                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    vendorCode an exception code used by a particular
                      database vendor                    
                </param>
                <param>
                    updateCounts an array of &lt;code&gt;int&lt;/code&gt;, with each element
                      indicating the update count, &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; or
                      &lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; for each SQL command in
                      the batch for JDBC drivers that continue processing
                      after a command failure; an update count or
                      &lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; for each SQL command in the batch
                      prior to the failure for JDBC drivers that stop processing after a command
                      failure                    
                </param>
                <param>
                    cause the underlying reason for this &lt;code&gt;SQLException&lt;/code&gt; (which is saved for later retrieval by the &lt;code&gt;getCause()&lt;/code&gt; method);
                      may be null indicating
                      the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="BatchUpdateException" type="constructor" line="293">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                    <param name="vendorCode" type="int"/>
                    <param name="updateCounts" type="int[]"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="298">
                Retrieves the update count for each update statement in the batch
                  update that executed successfully before this exception occurred.
                  A driver that implements batch updates may or may not continue to
                  process the remaining commands in a batch when one of the commands
                  fails to execute properly. If the driver continues processing commands,
                  the array returned by this method will have as many elements as
                  there are commands in the batch; otherwise, it will contain an
                  update count for each command that executed successfully before
                  the &lt;code&gt;BatchUpdateException&lt;/code&gt; was thrown.
                  &lt;P&gt;
                  The possible return values for this method were modified for
                  the Java 2 SDK, Standard Edition, version 1.3.  This was done to
                  accommodate the new option of continuing to process commands
                  in a batch update after a &lt;code&gt;BatchUpdateException&lt;/code&gt; object
                  has been thrown.                
                <return>
                    an array of &lt;code&gt;int&lt;/code&gt; containing the update counts
                      for the updates that were executed successfully before this error
                      occurred.  Or, if the driver continues to process commands after an
                      error, one of the following for every command in the batch:
                      &lt;OL&gt;
                      &lt;LI&gt;an update count
                      &lt;LI&gt;&lt;code&gt;Statement.SUCCESS_NO_INFO&lt;/code&gt; to indicate that the command
                      executed successfully but the number of rows affected is unknown
                      &lt;LI&gt;&lt;code&gt;Statement.EXECUTE_FAILED&lt;/code&gt; to indicate that the command
                      failed to execute successfully
                      &lt;/OL&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUpdateCounts" type="int[]" line="328"/>
            <declaration name="updateCounts" type="int[]" line="332"/>
            <javadoc line="332">
                The array that describes the outcome of a batch execution.                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="339"/>
        </class>
    </source>