<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.security"/>
        <class name="SQLPermission" line="31">
            <extends class="BasicPermission"/>
            <javadoc line="31">
                The permission for which the &lt;code&gt;SecurityManager&lt;/code&gt; will check
                  when code that is running in an applet, or an application with a
                  &lt;code&gt;SecurityManager&lt;/code&gt; enabled, calls the
                  &lt;code&gt;DriverManager.setLogWriter&lt;/code&gt; method,
                  &lt;code&gt;DriverManager.setLogStream&lt;/code&gt; (deprecated) method,{@code SyncFactory.setJNDIContext} method,{@code SyncFactory.setLogger} method,{@code Connection.setNetworktimeout} method,
                  or the &lt;code&gt;Connection.abort&lt;/code&gt; method.
                  If there is no &lt;code&gt;SQLPermission&lt;/code&gt; object, these methods
                  throw a &lt;code&gt;java.lang.SecurityException&lt;/code&gt; as a runtime exception.
                  &lt;P&gt;
                  A &lt;code&gt;SQLPermission&lt;/code&gt; object contains
                  a name (also referred to as a &quot;target name&quot;) but no actions
                  list; there is either a named permission or there is not.
                  The target name is the name of the permission (see below). The
                  naming convention follows the  hierarchical property naming convention.
                  In addition, an asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &lt;code&gt;loadLibrary.&lt;/code&gt;
                  or &lt;code&gt;&lt;/code&gt; is valid,
                  but &lt;code&gt;loadLibrary&lt;/code&gt; or &lt;code&gt;ab&lt;/code&gt; is not valid.
                  &lt;P&gt;
                  The following table lists all the possible &lt;code&gt;SQLPermission&lt;/code&gt; target names.
                  The table gives a description of what the permission allows
                  and a discussion of the risks of granting code the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5 summary=&quot;permission target name, what the permission allows, and associated risks&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setLog&lt;/td&gt;
                  &lt;td&gt;Setting of the logging stream&lt;/td&gt;
                  &lt;td&gt;This is a dangerous permission to grant.
                  The contents of the log may contain usernames and passwords,
                  SQL statements, and SQL data.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;callAbort&lt;/td&gt;
                  &lt;td&gt;Allows the invocation of the {@code Connection} method{@code abort}&lt;/td&gt;
                  &lt;td&gt;Permits an application to terminate a physical connection to a
                  database.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setSyncFactory&lt;/td&gt;
                  &lt;td&gt;Allows the invocation of the {@code SyncFactory} methods{@code setJNDIContext} and {@code setLogger}&lt;/td&gt;
                  &lt;td&gt;Permits an application to specify the JNDI context from which the{@code SyncProvider} implementations can be retrieved from and the logging
                  object to be used by the {@code SyncProvider} implementation.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setNetworkTimeout&lt;/td&gt;
                  &lt;td&gt;Allows the invocation of the {@code Connection} method{@code setNetworkTimeout}&lt;/td&gt;
                  &lt;td&gt;Permits an application to specify the maximum period a
                  &lt;code&gt;Connection&lt;/code&gt; or
                  objects created from the &lt;code&gt;Connection&lt;/code&gt;
                  will wait for the database to reply to any one request.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  The person running an applet decides what permissions to allow
                  and will run the &lt;code&gt;Policy Tool&lt;/code&gt; to create an
                  &lt;code&gt;SQLPermission&lt;/code&gt; in a policy file.  A programmer does
                  not use a constructor directly to create an instance of &lt;code&gt;SQLPermission&lt;/code&gt;
                  but rather uses a tool.                
                <since>
                    1.3                    
                </since>
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
            </javadoc>
            <javadoc line="117">
                Creates a new &lt;code&gt;SQLPermission&lt;/code&gt; object with the specified name.
                  The name is the symbolic name of the &lt;code&gt;SQLPermission&lt;/code&gt;.                
                <param>
                    name the name of this <code>SQLPermission</code> object, which must
                      be either {@code  setLog}, {@code callAbort}, {@code setSyncFactory},
                      or {@code setNetworkTimeout}                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SQLPermission" type="constructor" line="129">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="133">
                Creates a new &lt;code&gt;SQLPermission&lt;/code&gt; object with the specified name.
                  The name is the symbolic name of the &lt;code&gt;SQLPermission&lt;/code&gt;; the
                  actions &lt;code&gt;String&lt;/code&gt; is currently unused and should be
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    name the name of this <code>SQLPermission</code> object, which must
                      be either {@code  setLog}, {@code callAbort}, {@code setSyncFactory},
                      or {@code setNetworkTimeout}                    
                </param>
                <param>
                    actions should be <code>null</code>                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SQLPermission" type="constructor" line="148">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="152"/>
            <javadoc line="152">
                Private serial version unique ID to ensure serialization
                  compatibility.                
            </javadoc>
        </class>
    </source>