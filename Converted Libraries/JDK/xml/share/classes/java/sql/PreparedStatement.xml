<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.math.BigDecimal"/>
        <import package="java.util.Calendar"/>
        <import package="java.io.Reader"/>
        <import package="java.io.InputStream"/>
        <interface name="PreparedStatement">
            <implements interface="Statement"/>
            <javadoc line="6">
                An object that represents a precompiled SQL statement.
                  &lt;P&gt;A SQL statement is precompiled and stored in a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object. This object can then be used to
                  efficiently execute this statement multiple times.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; The setter methods (&lt;code&gt;setShort&lt;/code&gt;, &lt;code&gt;setString&lt;/code&gt;,
                  and so on) for setting IN parameter values
                  must specify types that are compatible with the defined SQL type of
                  the input parameter. For instance, if the IN parameter has SQL type
                  &lt;code&gt;INTEGER&lt;/code&gt;, then the method &lt;code&gt;setInt&lt;/code&gt; should be used.
                  &lt;p&gt;If arbitrary parameter type conversions are required, the method
                  &lt;code&gt;setObject&lt;/code&gt; should be used with a target SQL type.
                  &lt;P&gt;
                  In the following example of setting a parameter, &lt;code&gt;con&lt;/code&gt; represents
                  an active connection:
                  &lt;PRE&gt;
                  PreparedStatement pstmt = con.prepareStatement(&quot;UPDATE EMPLOYEES
                  SET SALARY = ? WHERE ID = ?&quot;);
                  pstmt.setBigDecimal(1, 153833.00)
                  pstmt.setInt(2, 110592)
                  &lt;/PRE&gt;                
                <see>
                    Connection#prepareStatement                    
                </see>
                <see>
                    ResultSet                    
                </see>
            </javadoc>
            <method name="executeQuery" type="ResultSet" line="31"/>
            <javadoc line="31">
                Executes the SQL query in this &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  and returns the &lt;code&gt;ResultSet&lt;/code&gt; object generated by the query.                
                <return>
                    a &lt;code&gt;ResultSet&lt;/code&gt; object that contains the data produced by the
                      query; never &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    SQLException if a database access error occurs;
                      this method is called on a closed  &lt;code&gt;PreparedStatement&lt;/code&gt; or the SQL
                      statement does not return a &lt;code&gt;ResultSet&lt;/code&gt; object                    
                </exception>
                <throws>
                    SQLTimeoutException when the driver has determined that the
                      timeout value that was specified by the {@code setQueryTimeout}method has been exceeded and has at least attempted to cancel
                      the currently running {@code Statement}                    
                </throws>
            </javadoc>
            <method name="executeUpdate" type="int" line="44"/>
            <javadoc line="44">
                Executes the SQL statement in this &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  which must be an SQL Data Manipulation Language (DML) statement, such as &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; or
                  &lt;code&gt;DELETE&lt;/code&gt;; or an SQL statement that returns nothing,
                  such as a DDL statement.                
                <return>
                    either (1) the row count for SQL Data Manipulation Language (DML) statements
                      or (2) 0 for SQL statements that return nothing                    
                </return>
                <exception>
                    SQLException if a database access error occurs;
                      this method is called on a closed  &lt;code&gt;PreparedStatement&lt;/code&gt;
                      or the SQL statement returns a &lt;code&gt;ResultSet&lt;/code&gt; object                    
                </exception>
                <throws>
                    SQLTimeoutException when the driver has determined that the
                      timeout value that was specified by the {@code setQueryTimeout}method has been exceeded and has at least attempted to cancel
                      the currently running {@code Statement}                    
                </throws>
            </javadoc>
            <method name="setNull" type="void" line="59"/>
            <javadoc line="59">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    sqlType the SQL type code defined in &lt;code&gt;java.sql.Types&lt;/code&gt;                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if &lt;code&gt;sqlType&lt;/code&gt; is
                      a &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;BLOB&lt;/code&gt;, &lt;code&gt;CLOB&lt;/code&gt;,
                      &lt;code&gt;DATALINK&lt;/code&gt;, &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;,
                      &lt;code&gt;NCLOB&lt;/code&gt;, &lt;code&gt;NVARCHAR&lt;/code&gt;, &lt;code&gt;LONGNVARCHAR&lt;/code&gt;,
                      &lt;code&gt;REF&lt;/code&gt;, &lt;code&gt;ROWID&lt;/code&gt;, &lt;code&gt;SQLXML&lt;/code&gt;
                      or  &lt;code&gt;STRUCT&lt;/code&gt; data type and the JDBC driver does not support
                      this data type                    
                </exception>
            </javadoc>
            <method name="setBoolean" type="void" line="76"/>
            <javadoc line="76">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setByte" type="void" line="88"/>
            <javadoc line="88">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setShort" type="void" line="99"/>
            <javadoc line="99">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setInt" type="void" line="110"/>
            <javadoc line="110">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setLong" type="void" line="121"/>
            <javadoc line="121">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setFloat" type="void" line="132"/>
            <javadoc line="132">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;REAL&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setDouble" type="void" line="143"/>
            <javadoc line="143">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setBigDecimal" type="void" line="154"/>
            <javadoc line="154">
                Sets the designated parameter to the given &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setString" type="void" line="165"/>
            <javadoc line="165">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setBytes" type="void" line="179"/>
            <javadoc line="179">
                Sets the designated parameter to the given Java array of bytes.  The driver converts
                  this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  (depending on the argument&apos;s size relative to the driver&apos;s limits on
                  &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setDate" type="void" line="191"/>
            <javadoc line="191">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setTime" type="void" line="204"/>
            <javadoc line="204">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setTimestamp" type="void" line="215"/>
            <javadoc line="215">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setAsciiStream" type="void" line="227"/>
            <javadoc line="227">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setUnicodeStream" type="void" line="246"/>
            <javadoc line="246">
                Sets the designated parameter to the given input stream, which
                  will have the specified number of bytes.
                  When a very large Unicode value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from Unicode to the database char format.
                  The byte format of the Unicode stream must be a Java UTF-8, as defined in the
                  Java Virtual Machine Specification.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x a &lt;code&gt;java.io.InputStream&lt;/code&gt; object that contains the
                      Unicode parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="setBinaryStream" type="void" line="271"/>
            <javadoc line="271">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="clearParameters" type="void" line="289"/>
            <javadoc line="289">
                Clears the current parameter values immediately.
                  &lt;P&gt;In general, parameter values remain in force for repeated use of a
                  statement. Setting a parameter value automatically clears its
                  previous value.  However, in some cases it is useful to immediately
                  release the resources used by the current parameter values; this can
                  be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.                
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setObject" type="void" line="300"/>
            <javadoc line="300">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if &lt;code&gt;targetSqlType&lt;/code&gt; is
                      a &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;BLOB&lt;/code&gt;, &lt;code&gt;CLOB&lt;/code&gt;,
                      &lt;code&gt;DATALINK&lt;/code&gt;, &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;,
                      &lt;code&gt;NCLOB&lt;/code&gt;, &lt;code&gt;NVARCHAR&lt;/code&gt;, &lt;code&gt;LONGNVARCHAR&lt;/code&gt;,
                      &lt;code&gt;REF&lt;/code&gt;, &lt;code&gt;ROWID&lt;/code&gt;, &lt;code&gt;SQLXML&lt;/code&gt;
                      or  &lt;code&gt;STRUCT&lt;/code&gt; data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="setObject" type="void" line="321"/>
            <javadoc line="321">
                &lt;p&gt;Sets the value of the designated parameter using the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;, &lt;code&gt;RowId&lt;/code&gt;, &lt;code&gt;SQLXML&lt;/code&gt;
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Not all databases allow for a non-typed Null to be sent to
                  the backend. For maximum portability, the &lt;code&gt;setNull&lt;/code&gt; or the
                  &lt;code&gt;setObject(int parameterIndex, Object x, int sqlType)&lt;/code&gt;
                  method should be used
                  instead of &lt;code&gt;setObject(int parameterIndex, Object x)&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;
                      or the type of the given object is ambiguous                    
                </exception>
            </javadoc>
            <method name="execute" type="boolean" line="357"/>
            <javadoc line="357">
                Executes the SQL statement in this &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  which may be any kind of SQL statement.
                  Some prepared statements return multiple results; the &lt;code&gt;execute&lt;/code&gt;
                  method handles these complex statements as well as the simpler
                  form of statements handled by the methods &lt;code&gt;executeQuery&lt;/code&gt;
                  and &lt;code&gt;executeUpdate&lt;/code&gt;.
                  &lt;P&gt;
                  The &lt;code&gt;execute&lt;/code&gt; method returns a &lt;code&gt;boolean&lt;/code&gt; to
                  indicate the form of the first result.  You must call either the method
                  &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt;
                  to retrieve the result; you must call &lt;code&gt;getMoreResults&lt;/code&gt; to
                  move to any subsequent result(s).                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the first result is a &lt;code&gt;ResultSet&lt;/code&gt;
                      object; &lt;code&gt;false&lt;/code&gt; if the first result is an update
                      count or there is no result                    
                </return>
                <exception>
                    SQLException if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;
                      or an argument is supplied to this method                    
                </exception>
                <throws>
                    SQLTimeoutException when the driver has determined that the
                      timeout value that was specified by the {@code setQueryTimeout}method has been exceeded and has at least attempted to cancel
                      the currently running {@code Statement}                    
                </throws>
                <see>
                    Statement#execute                    
                </see>
                <see>
                    Statement#getResultSet                    
                </see>
                <see>
                    Statement#getUpdateCount                    
                </see>
                <see>
                    Statement#getMoreResults                    
                </see>
            </javadoc>
            <method name="addBatch" type="void" line="385"/>
            <javadoc line="385">
                Adds a set of parameters to this &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object&apos;s batch of commands.                
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <see>
                    Statement#addBatch                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="394"/>
            <javadoc line="394">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the
                      Unicode data                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setRef" type="void" line="415"/>
            <javadoc line="415">
                Sets the designated parameter to the given
                  &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;REF&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an SQL &lt;code&gt;REF&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="429"/>
            <javadoc line="429">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x a &lt;code&gt;Blob&lt;/code&gt; object that maps an SQL &lt;code&gt;BLOB&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="442"/>
            <javadoc line="442">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x a &lt;code&gt;Clob&lt;/code&gt; object that maps an SQL &lt;code&gt;CLOB&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setArray" type="void" line="455"/>
            <javadoc line="455">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Array&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;ARRAY&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an &lt;code&gt;Array&lt;/code&gt; object that maps an SQL &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMetaData" type="ResultSetMetaData" line="468"/>
            <javadoc line="468">
                Retrieves a &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains
                  information about the columns of the &lt;code&gt;ResultSet&lt;/code&gt; object
                  that will be returned when this &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  is executed.
                  &lt;P&gt;
                  Because a &lt;code&gt;PreparedStatement&lt;/code&gt; object is precompiled, it is
                  possible to know about the &lt;code&gt;ResultSet&lt;/code&gt; object that it will
                  return without having to execute it.  Consequently, it is possible
                  to invoke the method &lt;code&gt;getMetaData&lt;/code&gt; on a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object rather than waiting to execute
                  it and then invoking the &lt;code&gt;ResultSet.getMetaData&lt;/code&gt; method
                  on the &lt;code&gt;ResultSet&lt;/code&gt; object that is returned.
                  &lt;P&gt;
                  &lt;B&gt;NOTE:&lt;/B&gt; Using this method may be expensive for some drivers due
                  to the lack of underlying DBMS support.                
                <return>
                    the description of a &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s columns or
                      &lt;code&gt;null&lt;/code&gt; if the driver cannot return a
                      &lt;code&gt;ResultSetMetaData&lt;/code&gt; object                    
                </return>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="494"/>
            <javadoc line="494">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the &lt;code&gt;Calendar&lt;/code&gt; object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="513"/>
            <javadoc line="513">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the &lt;code&gt;Calendar&lt;/code&gt; object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="532"/>
            <javadoc line="532">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the &lt;code&gt;Calendar&lt;/code&gt; object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="551"/>
            <javadoc line="551">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    sqlType a value from &lt;code&gt;java.sql.Types&lt;/code&gt;                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or REF                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if &lt;code&gt;sqlType&lt;/code&gt; is
                      a &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;BLOB&lt;/code&gt;, &lt;code&gt;CLOB&lt;/code&gt;,
                      &lt;code&gt;DATALINK&lt;/code&gt;, &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;,
                      &lt;code&gt;NCLOB&lt;/code&gt;, &lt;code&gt;NVARCHAR&lt;/code&gt;, &lt;code&gt;LONGNVARCHAR&lt;/code&gt;,
                      &lt;code&gt;REF&lt;/code&gt;, &lt;code&gt;ROWID&lt;/code&gt;, &lt;code&gt;SQLXML&lt;/code&gt;
                      or  &lt;code&gt;STRUCT&lt;/code&gt; data type and the JDBC driver does not support
                      this data type or if the JDBC driver does not support this method                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="585"/>
            <javadoc line="585">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the &lt;code&gt;java.net.URL&lt;/code&gt; object to be set                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameterMetaData" type="ParameterMetaData" line="598"/>
            <javadoc line="598">
                Retrieves the number, types and properties of this
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object&apos;s parameters.                
                <return>
                    a &lt;code&gt;ParameterMetaData&lt;/code&gt; object that contains information
                      about the number, types and properties for each
                      parameter marker of this &lt;code&gt;PreparedStatement&lt;/code&gt; object                    
                </return>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <see>
                    ParameterMetaData                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="610"/>
            <javadoc line="610">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; value when it sends it
                  to the database                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="623"/>
            <javadoc line="623">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs; or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="641"/>
            <javadoc line="641">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs; or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="658"/>
            <javadoc line="658">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The driver converts this to a
                  SQL &lt;code&gt;NCLOB&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs; or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="672"/>
            <javadoc line="672">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs; this method is called on
                      a closed &lt;code&gt;PreparedStatement&lt;/code&gt; or if the length specified is less than zero.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="691"/>
            <javadoc line="691">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The inputstream must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;;
                      if the length specified
                      is less than zero or if the number of bytes in the inputstream does not match
                      the specfied length.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="715"/>
            <javadoc line="715">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="737"/>
            <javadoc line="737">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object.
                  The driver converts this to an
                  SQL &lt;code&gt;XML&lt;/code&gt; value when it sends it to the database.
                  &lt;p&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    xmlObject a &lt;code&gt;SQLXML&lt;/code&gt; object that maps an SQL &lt;code&gt;XML&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;
                      or the &lt;code&gt;java.xml.transform.Result&lt;/code&gt;,
                      &lt;code&gt;Writer&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; has not been closed for
                      the &lt;code&gt;SQLXML&lt;/code&gt; object                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="754"/>
            <javadoc line="754">
                &lt;p&gt;Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  If the second argument is an &lt;code&gt;InputStream&lt;/code&gt; then the stream must contain
                  the number of bytes specified by scaleOrLength.  If the second argument is a
                  &lt;code&gt;Reader&lt;/code&gt; then the reader must contain the number of characters specified
                  by scaleOrLength. If these conditions are not true the driver will generate a
                  &lt;code&gt;SQLException&lt;/code&gt; when the prepared statement is executed.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to
                  write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;p&gt;Note that this method may be used to pass database-specific
                  abstract data types.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scaleOrLength for &lt;code&gt;java.sql.Types.DECIMAL&lt;/code&gt;
                      or &lt;code&gt;java.sql.Types.NUMERIC types&lt;/code&gt;,
                      this is the number of digits after the decimal point. For
                      Java Object types &lt;code&gt;InputStream&lt;/code&gt; and &lt;code&gt;Reader&lt;/code&gt;,
                      this is the length
                      of the data in the stream or reader.  For all other types,
                      this value will be ignored.                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt; or
                      if the Java Object specified by x is an InputStream
                      or Reader object and the value of the scale parameter is less
                      than zero                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if &lt;code&gt;targetSqlType&lt;/code&gt; is
                      a &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;BLOB&lt;/code&gt;, &lt;code&gt;CLOB&lt;/code&gt;,
                      &lt;code&gt;DATALINK&lt;/code&gt;, &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;,
                      &lt;code&gt;NCLOB&lt;/code&gt;, &lt;code&gt;NVARCHAR&lt;/code&gt;, &lt;code&gt;LONGNVARCHAR&lt;/code&gt;,
                      &lt;code&gt;REF&lt;/code&gt;, &lt;code&gt;ROWID&lt;/code&gt;, &lt;code&gt;SQLXML&lt;/code&gt;
                      or  &lt;code&gt;STRUCT&lt;/code&gt; data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="804"/>
            <javadoc line="804">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="824"/>
            <javadoc line="824">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="843"/>
            <javadoc line="843">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the
                      Unicode data                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="864"/>
            <javadoc line="864">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="886"/>
            <javadoc line="886">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="907"/>
            <javadoc line="907">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="931"/>
            <javadoc line="931">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs; or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="953"/>
            <javadoc line="953">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs; this method is called on
                      a closed &lt;code&gt;PreparedStatement&lt;/code&gt;or if parameterIndex does not correspond to a parameter
                      marker in the SQL statement                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="973"/>
            <javadoc line="973">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if a database access error occurs;
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt; or
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="996"/>
            <javadoc line="996">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed &lt;code&gt;PreparedStatement&lt;/code&gt;                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>