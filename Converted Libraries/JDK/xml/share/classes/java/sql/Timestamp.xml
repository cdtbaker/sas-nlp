<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.StringTokenizer"/>
        <class name="Timestamp" line="30">
            <extends class="java.util.Date"/>
            <javadoc line="30">
                &lt;P&gt;A thin wrapper around &lt;code&gt;java.util.Date&lt;/code&gt; that allows
                  the JDBC API to identify this as an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value.
                  It adds the ability
                  to hold the SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; fractional seconds value, by allowing
                  the specification of fractional seconds to a precision of nanoseconds.
                  A Timestamp also provides formatting and
                  parsing operations to support the JDBC escape syntax for timestamp values.
                  &lt;p&gt;The precision of a Timestamp object is calculated to be either:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;19 &lt;/code&gt;, which is the number of characters in yyyy-mm-dd hh:mm:ss
                  &lt;li&gt; &lt;code&gt; 20 + s &lt;/code&gt;, which is the number
                  of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and &lt;code&gt;s&lt;/code&gt; represents  the scale of the given Timestamp,
                  its fractional seconds precision.
                  &lt;/ul&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This type is a composite of a &lt;code&gt;java.util.Date&lt;/code&gt; and a
                  separate nanoseconds value. Only integral seconds are stored in the
                  &lt;code&gt;java.util.Date&lt;/code&gt; component. The fractional seconds - the nanos - are
                  separate.  The &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt; method never returns
                  &lt;code&gt;true&lt;/code&gt; when passed an object
                  that isn&apos;t an instance of &lt;code&gt;java.sql.Timestamp&lt;/code&gt;,
                  because the nanos component of a date is unknown.
                  As a result, the &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt;
                  method is not symmetric with respect to the
                  &lt;code&gt;java.util.Date.equals(Object)&lt;/code&gt;
                  method.  Also, the &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying
                  &lt;code&gt;java.util.Date&lt;/code&gt;
                  implementation and therefore does not include nanos in its computation.
                  &lt;P&gt;
                  Due to the differences between the &lt;code&gt;Timestamp&lt;/code&gt; class
                  and the &lt;code&gt;java.util.Date&lt;/code&gt;
                  class mentioned above, it is recommended that code not view
                  &lt;code&gt;Timestamp&lt;/code&gt; values generically as an instance of
                  &lt;code&gt;java.util.Date&lt;/code&gt;.  The
                  inheritance relationship between &lt;code&gt;Timestamp&lt;/code&gt;
                  and &lt;code&gt;java.util.Date&lt;/code&gt; really
                  denotes implementation inheritance, and not type inheritance.                
            </javadoc>
            <javadoc line="72">
                Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object initialized
                  with the given values.                
                <param>
                    year the year minus 1900                    
                </param>
                <param>
                    month 0 to 11                    
                </param>
                <param>
                    date 1 to 31                    
                </param>
                <param>
                    hour 0 to 23                    
                </param>
                <param>
                    minute 0 to 59                    
                </param>
                <param>
                    second 0 to 59                    
                </param>
                <param>
                    nano 0 to 999,999,999                    
                </param>
                <deprecated>
                    instead use the constructor <code>Timestamp(long millis)</code>                    
                </deprecated>
                <exception>
                    IllegalArgumentException if the nano argument is out of bounds                    
                </exception>
            </javadoc>
            <method name="Timestamp" type="constructor" line="88">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hour" type="int"/>
                    <param name="minute" type="int"/>
                    <param name="second" type="int"/>
                    <param name="nano" type="int"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object
                  using a milliseconds time value. The
                  integral seconds are stored in the underlying date value; the
                  fractional seconds are stored in the &lt;code&gt;nanos&lt;/code&gt; field of
                  the &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    time milliseconds since January 1, 1970, 00:00:00 GMT.
                      A negative number is the number of milliseconds before
                      January 1, 1970, 00:00:00 GMT.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
            </javadoc>
            <method name="Timestamp" type="constructor" line="108">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="111"/>
            </method>
            <javadoc line="117">
                Sets this &lt;code&gt;Timestamp&lt;/code&gt; object to represent a point in time that is
                  &lt;tt&gt;time&lt;/tt&gt; milliseconds after January 1, 1970 00:00:00 GMT.                
                <param>
                    time   the number of milliseconds.                    
                </param>
                <see>
                    #getTime                    
                </see>
                <see>
                    #Timestamp(long time)                    
                </see>
                <see>
                    java.util.Calendar                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="126">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="129"/>
            </method>
            <javadoc line="135">
                Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
                  represented by this &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <return>
                    the number of milliseconds since January 1, 1970, 00:00:00 GMT
                      represented by this date.                    
                </return>
                <see>
                    #setTime                    
                </see>
            </javadoc>
            <method name="getTime" type="long" line="143">
                <declaration name="time" type="long" line="144"/>
            </method>
            <declaration name="nanos" type="int" line="149"/>
            <javadoc line="149">
                @serial                
            </javadoc>
            <javadoc line="154">
                Converts a &lt;code&gt;String&lt;/code&gt; object in JDBC timestamp escape format to a
                  &lt;code&gt;Timestamp&lt;/code&gt; value.                
                <param>
                    s timestamp in format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>.  The
                      fractional seconds may be omitted. The leading zero for <code>mm</code>
                      and <code>dd</code> may also be omitted.                    
                </param>
                <return>
                    corresponding <code>Timestamp</code> value                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException if the given argument
                      does not have the format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>                    
                </exception>
            </javadoc>
            <method name="valueOf" type="Timestamp" line="166">
                <params>
                    <param name="s" type="String"/>
                </params>
                <comment line="195">
                    Split the string into date and time components                    
                </comment>
                <comment line="205">
                    Parse the date                    
                </comment>
                <comment line="209">
                    Parse the time                    
                </comment>
                <comment line="216">
                    Convert the date                    
                </comment>
                <comment line="238">
                    Convert the time; default missing nanos                    
                </comment>
                <declaration name="YEAR_LENGTH" type="int" line="167"/>
                <declaration name="MONTH_LENGTH" type="int" line="168"/>
                <declaration name="DAY_LENGTH" type="int" line="169"/>
                <declaration name="MAX_MONTH" type="int" line="170"/>
                <declaration name="MAX_DAY" type="int" line="171"/>
                <declaration name="date_s" type="String" line="172"/>
                <declaration name="time_s" type="String" line="173"/>
                <declaration name="nanos_s" type="String" line="174"/>
                <declaration name="year" type="int" line="175"/>
                <declaration name="month" type="int" line="176"/>
                <declaration name="day" type="int" line="177"/>
                <declaration name="hour" type="int" line="178"/>
                <declaration name="minute" type="int" line="179"/>
                <declaration name="second" type="int" line="180"/>
                <declaration name="a_nanos" type="int" line="181"/>
                <declaration name="firstDash" type="int" line="182"/>
                <declaration name="secondDash" type="int" line="183"/>
                <declaration name="dividingSpace" type="int" line="184"/>
                <declaration name="firstColon" type="int" line="185"/>
                <declaration name="secondColon" type="int" line="186"/>
                <declaration name="period" type="int" line="187"/>
                <declaration name="formatError" type="String" line="188"/>
                <declaration name="zeros" type="String" line="189"/>
                <declaration name="delimiterDate" type="String" line="190"/>
                <declaration name="delimiterTime" type="String" line="191"/>
                <scope line="198"/>
                <scope line="201"/>
                <declaration name="parsedDate" type="boolean" line="217"/>
                <scope line="218">
                    <declaration name="yyyy" type="String" line="219"/>
                    <declaration name="mm" type="String" line="220"/>
                    <declaration name="dd" type="String" line="221"/>
                    <scope line="224">
                        <scope line="229"/>
                    </scope>
                </scope>
                <scope line="234"/>
                <scope line="240">
                    <scope line="244"/>
                    <scope line="254"/>
                    <scope line="256"/>
                </scope>
                <scope line="259"/>
            </method>
            <javadoc line="266">
                Formats a timestamp in JDBC timestamp escape format.
                  &lt;code&gt;yyyy-mm-dd hh:mm:ss.fffffffff&lt;/code&gt;,
                  where &lt;code&gt;ffffffffff&lt;/code&gt; indicates nanoseconds.
                  &lt;P&gt;                
                <return>
                    a <code>String</code> object in
                      <code>yyyy-mm-dd hh:mm:ss.fffffffff</code> format                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="274">
                <comment line="294">
                    Add leading zeros                    
                </comment>
                <comment line="331">
                    Add leading zeros                    
                </comment>
                <comment line="335">
                    Truncate trailing zeros                    
                </comment>
                <comment line="346">
                    do a string buffer here instead.                    
                </comment>
                <declaration name="year" type="int" line="276"/>
                <declaration name="month" type="int" line="277"/>
                <declaration name="day" type="int" line="278"/>
                <declaration name="hour" type="int" line="279"/>
                <declaration name="minute" type="int" line="280"/>
                <declaration name="second" type="int" line="281"/>
                <declaration name="yearString" type="String" line="282"/>
                <declaration name="monthString" type="String" line="283"/>
                <declaration name="dayString" type="String" line="284"/>
                <declaration name="hourString" type="String" line="285"/>
                <declaration name="minuteString" type="String" line="286"/>
                <declaration name="secondString" type="String" line="287"/>
                <declaration name="nanosString" type="String" line="288"/>
                <declaration name="zeros" type="String" line="289"/>
                <declaration name="yearZeros" type="String" line="290"/>
                <declaration name="timestampBuf" type="StringBuffer" line="291"/>
                <scope line="293"/>
                <scope line="298"/>
                <scope line="301"/>
                <scope line="303"/>
                <scope line="306"/>
                <scope line="308"/>
                <scope line="311"/>
                <scope line="313"/>
                <scope line="316"/>
                <scope line="318"/>
                <scope line="321"/>
                <scope line="323"/>
                <scope line="326"/>
                <scope line="328">
                    <declaration name="nanosChar" type="char[]" line="336"/>
                    <declaration name="truncIndex" type="int" line="338"/>
                    <scope line="339"/>
                </scope>
            </method>
            <javadoc line="365">
                Gets this &lt;code&gt;Timestamp&lt;/code&gt; object&apos;s &lt;code&gt;nanos&lt;/code&gt; value.                
                <return>
                    this <code>Timestamp</code> object's fractional seconds component                    
                </return>
                <see>
                    #setNanos                    
                </see>
            </javadoc>
            <method name="getNanos" type="int" line="371"/>
            <javadoc line="375">
                Sets this &lt;code&gt;Timestamp&lt;/code&gt; object&apos;s &lt;code&gt;nanos&lt;/code&gt; field
                  to the given value.                
                <param>
                    n the new fractional seconds component                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the given argument
                      is greater than 999999999 or less than 0                    
                </exception>
                <see>
                    #getNanos                    
                </see>
            </javadoc>
            <method name="setNanos" type="void" line="384">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="385"/>
            </method>
            <javadoc line="391">
                Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  equal to the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the <code>Timestamp</code> value to compare with                    
                </param>
                <return>
                    <code>true</code> if the given <code>Timestamp</code>
                      object is equal to this <code>Timestamp</code> object;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="400">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
                <scope line="401">
                    <scope line="402"/>
                    <scope line="404"/>
                </scope>
                <scope line="407"/>
            </method>
            <javadoc line="412">
                Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  equal to the given object.
                  This version of the method &lt;code&gt;equals&lt;/code&gt; has been added
                  to fix the incorrect
                  signature of &lt;code&gt;Timestamp.equals(Timestamp)&lt;/code&gt; and to preserve backward
                  compatibility with existing class files.
                  Note: This method is not symmetric with respect to the
                  &lt;code&gt;equals(Object)&lt;/code&gt; method in the base class.                
                <param>
                    ts the <code>Object</code> value to compare with                    
                </param>
                <return>
                    <code>true</code> if the given <code>Object</code> is an instance
                      of a <code>Timestamp</code> that
                      is equal to this <code>Timestamp</code> object;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="430">
                <params>
                    <param name="ts" type="java.lang.Object"/>
                </params>
                <scope line="431"/>
                <scope line="433"/>
            </method>
            <javadoc line="438">
                Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  earlier than the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the <code>Timestamp</code> value to compare with                    
                </param>
                <return>
                    <code>true</code> if this <code>Timestamp</code> object is earlier;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="before" type="boolean" line="446">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
            </method>
            <javadoc line="450">
                Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  later than the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the <code>Timestamp</code> value to compare with                    
                </param>
                <return>
                    <code>true</code> if this <code>Timestamp</code> object is later;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="after" type="boolean" line="458">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
            </method>
            <javadoc line="462">
                Compares this &lt;code&gt;Timestamp&lt;/code&gt; object to the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts   the <code>Timestamp</code> object to be compared to
                      this <code>Timestamp</code> object                    
                </param>
                <return>
                    the value <code>0</code> if the two <code>Timestamp</code>
                      objects are equal; a value less than <code>0</code> if this
                      <code>Timestamp</code> object is before the given argument;
                      and a value greater than <code>0</code> if this
                      <code>Timestamp</code> object is after the given argument.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="475">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
                <declaration name="thisTime" type="long" line="476"/>
                <declaration name="anotherTime" type="long" line="477"/>
                <declaration name="i" type="int" line="478"/>
                <scope line="479">
                    <scope line="480"/>
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="490">
                Compares this &lt;code&gt;Timestamp&lt;/code&gt; object to the given
                  &lt;code&gt;Date&lt;/code&gt; object.                
                <param>
                    o the <code>Date</code> to be compared to
                      this <code>Timestamp</code> object                    
                </param>
                <return>
                    the value <code>0</code> if this <code>Timestamp</code> object
                      and the given object are equal; a value less than <code>0</code>
                      if this  <code>Timestamp</code> object is before the given argument;
                      and a value greater than <code>0</code> if this
                      <code>Timestamp</code> object is after the given argument.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="504">
                <params>
                    <param name="o" type="java.util.Date"/>
                </params>
                <comment line="506">
                    When Timestamp instance compare it with a Timestamp                    
                </comment>
                <comment line="507">
                    Hence it is basically calling this.compareTo((Timestamp))o);                    
                </comment>
                <comment line="508">
                    Note typecasting is safe because o is instance of Timestamp                    
                </comment>
                <comment line="511">
                    When Date doing a o.compareTo(this)                    
                </comment>
                <comment line="512">
                    will give wrong results.                    
                </comment>
                <scope line="505"/>
                <scope line="510">
                    <declaration name="ts" type="Timestamp" line="513"/>
                </scope>
            </method>
            <javadoc line="518">
                {@inheritDoc}The {@code hashCode} method uses the underlying {@code java.util.Date}implementation and therefore does not include nanos in its computation.                
            </javadoc>
            <method name="hashCode" type="int" line="526"/>
            <declaration name="serialVersionUID" type="long" line="530"/>
        </class>
    </source>