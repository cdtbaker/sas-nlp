<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.StringTokenizer"/>
        <class name="Timestamp" line="3">
            <extends class="java.util.Date"/>
            <javadoc line="3">
                &lt;P&gt;A thin wrapper around &lt;code&gt;java.util.Date&lt;/code&gt; that allows
                  the JDBC API to identify this as an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value.
                  It adds the ability
                  to hold the SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; fractional seconds value, by allowing
                  the specification of fractional seconds to a precision of nanoseconds.
                  A Timestamp also provides formatting and
                  parsing operations to support the JDBC escape syntax for timestamp values.
                  &lt;p&gt;The precision of a Timestamp object is calculated to be either:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;19 &lt;/code&gt;, which is the number of characters in yyyy-mm-dd hh:mm:ss
                  &lt;li&gt; &lt;code&gt; 20 + s &lt;/code&gt;, which is the number
                  of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and &lt;code&gt;s&lt;/code&gt; represents  the scale of the given Timestamp,
                  its fractional seconds precision.
                  &lt;/ul&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This type is a composite of a &lt;code&gt;java.util.Date&lt;/code&gt; and a
                  separate nanoseconds value. Only integral seconds are stored in the
                  &lt;code&gt;java.util.Date&lt;/code&gt; component. The fractional seconds - the nanos - are
                  separate.  The &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt; method never returns
                  &lt;code&gt;true&lt;/code&gt; when passed an object
                  that isn&apos;t an instance of &lt;code&gt;java.sql.Timestamp&lt;/code&gt;,
                  because the nanos component of a date is unknown.
                  As a result, the &lt;code&gt;Timestamp.equals(Object)&lt;/code&gt;
                  method is not symmetric with respect to the
                  &lt;code&gt;java.util.Date.equals(Object)&lt;/code&gt;
                  method.  Also, the &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying
                  &lt;code&gt;java.util.Date&lt;/code&gt;
                  implementation and therefore does not include nanos in its computation.
                  &lt;P&gt;
                  Due to the differences between the &lt;code&gt;Timestamp&lt;/code&gt; class
                  and the &lt;code&gt;java.util.Date&lt;/code&gt;
                  class mentioned above, it is recommended that code not view
                  &lt;code&gt;Timestamp&lt;/code&gt; values generically as an instance of
                  &lt;code&gt;java.util.Date&lt;/code&gt;.  The
                  inheritance relationship between &lt;code&gt;Timestamp&lt;/code&gt;
                  and &lt;code&gt;java.util.Date&lt;/code&gt; really
                  denotes implementation inheritance, and not type inheritance.                
            </javadoc>
            <javadoc line="42">
                Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object initialized
                  with the given values.                
                <param>
                    year the year minus 1900                    
                </param>
                <param>
                    month 0 to 11                    
                </param>
                <param>
                    date 1 to 31                    
                </param>
                <param>
                    hour 0 to 23                    
                </param>
                <param>
                    minute 0 to 59                    
                </param>
                <param>
                    second 0 to 59                    
                </param>
                <param>
                    nano 0 to 999,999,999                    
                </param>
                <deprecated>
                    instead use the constructor &lt;code&gt;Timestamp(long millis)&lt;/code&gt;                    
                </deprecated>
                <exception>
                    IllegalArgumentException if the nano argument is out of bounds                    
                </exception>
            </javadoc>
            <method name="Timestamp" type="constructor" line="55">
                <params>
                    <param name="year" type="int"/>
                    <param name="month" type="int"/>
                    <param name="date" type="int"/>
                    <param name="hour" type="int"/>
                    <param name="minute" type="int"/>
                    <param name="second" type="int"/>
                    <param name="nano" type="int"/>
                </params>
                <scope line="57"/>
            </method>
            <javadoc line="62">
                Constructs a &lt;code&gt;Timestamp&lt;/code&gt; object
                  using a milliseconds time value. The
                  integral seconds are stored in the underlying date value; the
                  fractional seconds are stored in the &lt;code&gt;nanos&lt;/code&gt; field of
                  the &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    time milliseconds since January 1, 1970, 00:00:00 GMT.
                      A negative number is the number of milliseconds before
                      January 1, 1970, 00:00:00 GMT.                    
                </param>
                <see>
                    java.util.Calendar                    
                </see>
            </javadoc>
            <method name="Timestamp" type="constructor" line="73">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Sets this &lt;code&gt;Timestamp&lt;/code&gt; object to represent a point in time that is
                  &lt;tt&gt;time&lt;/tt&gt; milliseconds after January 1, 1970 00:00:00 GMT.                
                <param>
                    time   the number of milliseconds.                    
                </param>
                <see>
                    #getTime                    
                </see>
                <see>
                    #Timestamp(long time)                    
                </see>
                <see>
                    java.util.Calendar                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="89">
                <params>
                    <param name="time" type="long"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
                  represented by this &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <return>
                    the number of milliseconds since January 1, 1970, 00:00:00 GMT
                      represented by this date.                    
                </return>
                <see>
                    #setTime                    
                </see>
            </javadoc>
            <method name="getTime" type="long" line="104">
                <declaration name="time" type="long" line="105"/>
            </method>
            <declaration name="nanos" type="int" line="108"/>
            <javadoc line="108">
                @serial                
            </javadoc>
            <javadoc line="112">
                Converts a &lt;code&gt;String&lt;/code&gt; object in JDBC timestamp escape format to a
                  &lt;code&gt;Timestamp&lt;/code&gt; value.                
                <param>
                    s timestamp in format &lt;code&gt;yyyy-[m]m-[d]d hh:mm:ss[.f...]&lt;/code&gt;.  The
                      fractional seconds may be omitted. The leading zero for &lt;code&gt;mm&lt;/code&gt;
                      and &lt;code&gt;dd&lt;/code&gt; may also be omitted.                    
                </param>
                <return>
                    corresponding &lt;code&gt;Timestamp&lt;/code&gt; value                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException if the given argument
                      does not have the format &lt;code&gt;yyyy-[m]m-[d]d hh:mm:ss[.f...]&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="valueOf" type="Timestamp" line="122">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="YEAR_LENGTH" type="int" line="123"/>
                <declaration name="MONTH_LENGTH" type="int" line="124"/>
                <declaration name="DAY_LENGTH" type="int" line="125"/>
                <declaration name="MAX_MONTH" type="int" line="126"/>
                <declaration name="MAX_DAY" type="int" line="127"/>
                <declaration name="date_s" type="String" line="128"/>
                <declaration name="time_s" type="String" line="129"/>
                <declaration name="nanos_s" type="String" line="130"/>
                <declaration name="year" type="int" line="131"/>
                <declaration name="month" type="int" line="132"/>
                <declaration name="day" type="int" line="133"/>
                <declaration name="hour" type="int" line="134"/>
                <declaration name="minute" type="int" line="135"/>
                <declaration name="second" type="int" line="136"/>
                <declaration name="a_nanos" type="int" line="137"/>
                <declaration name="firstDash" type="int" line="138"/>
                <declaration name="secondDash" type="int" line="139"/>
                <declaration name="dividingSpace" type="int" line="140"/>
                <declaration name="firstColon" type="int" line="141"/>
                <declaration name="secondColon" type="int" line="142"/>
                <declaration name="period" type="int" line="143"/>
                <declaration name="formatError" type="String" line="144"/>
                <declaration name="zeros" type="String" line="145"/>
                <declaration name="delimiterDate" type="String" line="146"/>
                <declaration name="delimiterTime" type="String" line="147"/>
                <scope line="151"/>
                <scope line="155"/>
                <declaration name="parsedDate" type="boolean" line="164"/>
                <scope line="165">
                    <declaration name="yyyy" type="String" line="166"/>
                    <declaration name="mm" type="String" line="167"/>
                    <declaration name="dd" type="String" line="168"/>
                    <scope line="169">
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="178"/>
                <scope line="181">
                    <scope line="184"/>
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
                <scope line="199"/>
            </method>
            <javadoc line="204">
                Formats a timestamp in JDBC timestamp escape format.
                  &lt;code&gt;yyyy-mm-dd hh:mm:ss.fffffffff&lt;/code&gt;,
                  where &lt;code&gt;ffffffffff&lt;/code&gt; indicates nanoseconds.
                  &lt;P&gt;                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; object in
                      &lt;code&gt;yyyy-mm-dd hh:mm:ss.fffffffff&lt;/code&gt; format                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="212">
                <declaration name="year" type="int" line="213"/>
                <declaration name="month" type="int" line="214"/>
                <declaration name="day" type="int" line="215"/>
                <declaration name="hour" type="int" line="216"/>
                <declaration name="minute" type="int" line="217"/>
                <declaration name="second" type="int" line="218"/>
                <declaration name="yearString" type="String" line="219"/>
                <declaration name="monthString" type="String" line="220"/>
                <declaration name="dayString" type="String" line="221"/>
                <declaration name="hourString" type="String" line="222"/>
                <declaration name="minuteString" type="String" line="223"/>
                <declaration name="secondString" type="String" line="224"/>
                <declaration name="nanosString" type="String" line="225"/>
                <declaration name="zeros" type="String" line="226"/>
                <declaration name="yearZeros" type="String" line="227"/>
                <declaration name="timestampBuf" type="StringBuffer" line="228"/>
                <scope line="229"/>
                <scope line="233"/>
                <scope line="236"/>
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="248"/>
                <scope line="251"/>
                <scope line="254"/>
                <scope line="257"/>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266"/>
                <scope line="269">
                    <declaration name="nanosChar" type="char[]" line="272"/>
                    <declaration name="truncIndex" type="int" line="274"/>
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="296">
                Gets this &lt;code&gt;Timestamp&lt;/code&gt; object&apos;s &lt;code&gt;nanos&lt;/code&gt; value.                
                <return>
                    this &lt;code&gt;Timestamp&lt;/code&gt; object&apos;s fractional seconds component                    
                </return>
                <see>
                    #setNanos                    
                </see>
            </javadoc>
            <method name="getNanos" type="int" line="301"/>
            <javadoc line="304">
                Sets this &lt;code&gt;Timestamp&lt;/code&gt; object&apos;s &lt;code&gt;nanos&lt;/code&gt; field
                  to the given value.                
                <param>
                    n the new fractional seconds component                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the given argument
                      is greater than 999999999 or less than 0                    
                </exception>
                <see>
                    #getNanos                    
                </see>
            </javadoc>
            <method name="setNanos" type="void" line="312">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  equal to the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the &lt;code&gt;Timestamp&lt;/code&gt; value to compare with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Timestamp&lt;/code&gt;
                      object is equal to this &lt;code&gt;Timestamp&lt;/code&gt; object;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="326">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
                <scope line="327">
                    <scope line="328"/>
                    <scope line="331"/>
                </scope>
                <scope line="335"/>
            </method>
            <javadoc line="339">
                Tests to see if this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  equal to the given object.
                  This version of the method &lt;code&gt;equals&lt;/code&gt; has been added
                  to fix the incorrect
                  signature of &lt;code&gt;Timestamp.equals(Timestamp)&lt;/code&gt; and to preserve backward
                  compatibility with existing class files.
                  Note: This method is not symmetric with respect to the
                  &lt;code&gt;equals(Object)&lt;/code&gt; method in the base class.                
                <param>
                    ts the &lt;code&gt;Object&lt;/code&gt; value to compare with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Object&lt;/code&gt; is an instance
                      of a &lt;code&gt;Timestamp&lt;/code&gt; that
                      is equal to this &lt;code&gt;Timestamp&lt;/code&gt; object;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="354">
                <params>
                    <param name="ts" type="java.lang.Object"/>
                </params>
                <scope line="355"/>
                <scope line="358"/>
            </method>
            <javadoc line="362">
                Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  earlier than the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the &lt;code&gt;Timestamp&lt;/code&gt; value to compare with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Timestamp&lt;/code&gt; object is earlier;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="before" type="boolean" line="369">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
            </method>
            <javadoc line="372">
                Indicates whether this &lt;code&gt;Timestamp&lt;/code&gt; object is
                  later than the given &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts the &lt;code&gt;Timestamp&lt;/code&gt; value to compare with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Timestamp&lt;/code&gt; object is later;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="after" type="boolean" line="379">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
            </method>
            <javadoc line="382">
                Compares this &lt;code&gt;Timestamp&lt;/code&gt; object to the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.                
                <param>
                    ts   the &lt;code&gt;Timestamp&lt;/code&gt; object to be compared to
                      this &lt;code&gt;Timestamp&lt;/code&gt; object                    
                </param>
                <return>
                    the value &lt;code&gt;0&lt;/code&gt; if the two &lt;code&gt;Timestamp&lt;/code&gt;
                      objects are equal; a value less than &lt;code&gt;0&lt;/code&gt; if this
                      &lt;code&gt;Timestamp&lt;/code&gt; object is before the given argument;
                      and a value greater than &lt;code&gt;0&lt;/code&gt; if this
                      &lt;code&gt;Timestamp&lt;/code&gt; object is after the given argument.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="394">
                <params>
                    <param name="ts" type="Timestamp"/>
                </params>
                <declaration name="thisTime" type="long" line="395"/>
                <declaration name="anotherTime" type="long" line="396"/>
                <declaration name="i" type="int" line="397"/>
                <scope line="398">
                    <scope line="399"/>
                    <scope line="402"/>
                </scope>
            </method>
            <javadoc line="408">
                Compares this &lt;code&gt;Timestamp&lt;/code&gt; object to the given
                  &lt;code&gt;Date&lt;/code&gt; object.                
                <param>
                    o the &lt;code&gt;Date&lt;/code&gt; to be compared to
                      this &lt;code&gt;Timestamp&lt;/code&gt; object                    
                </param>
                <return>
                    the value &lt;code&gt;0&lt;/code&gt; if this &lt;code&gt;Timestamp&lt;/code&gt; object
                      and the given object are equal; a value less than &lt;code&gt;0&lt;/code&gt;
                      if this  &lt;code&gt;Timestamp&lt;/code&gt; object is before the given argument;
                      and a value greater than &lt;code&gt;0&lt;/code&gt; if this
                      &lt;code&gt;Timestamp&lt;/code&gt; object is after the given argument.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="420">
                <params>
                    <param name="o" type="java.util.Date"/>
                </params>
                <scope line="421"/>
                <scope line="424">
                    <declaration name="ts" type="Timestamp" line="425"/>
                </scope>
            </method>
            <javadoc line="429">
                {@inheritDoc}The {@code hashCode} method uses the underlying {@code java.util.Date}implementation and therefore does not include nanos in its computation.                
            </javadoc>
            <method name="hashCode" type="int" line="432"/>
            <declaration name="serialVersionUID" type="long" line="435"/>
        </class>
    </source>