<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <interface name="ParameterMetaData">
            <implements interface="Wrapper"/>
            <javadoc line="2">
                An object that can be used to get information about the types
                  and properties for each parameter marker in a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object. For some queries and driver
                  implementations, the data that would be returned by a &lt;code&gt;ParameterMetaData&lt;/code&gt;
                  object may not be available until the &lt;code&gt;PreparedStatement&lt;/code&gt; has
                  been executed.
                  &lt;p&gt;
                  Some driver implementations may not be able to provide information about the
                  types and properties for each parameter marker in a &lt;code&gt;CallableStatement&lt;/code&gt;
                  object.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameterCount" type="int" line="16"/>
            <javadoc line="16">
                Retrieves the number of parameters in the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object for which this &lt;code&gt;ParameterMetaData&lt;/code&gt; object contains
                  information.                
                <return>
                    the number of parameters                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isNullable" type="int" line="25"/>
            <javadoc line="25">
                Retrieves whether null values are allowed in the designated parameter.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    the nullability status of the given parameter; one of
                      <code>ParameterMetaData.parameterNoNulls</code>,
                      <code>ParameterMetaData.parameterNullable</code>, or
                      <code>ParameterMetaData.parameterNullableUnknown</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="parameterNoNulls" type="int" line="36"/>
            <javadoc line="36">
                The constant indicating that a
                  parameter will not allow &lt;code&gt;NULL&lt;/code&gt; values.                
            </javadoc>
            <declaration name="parameterNullable" type="int" line="41"/>
            <javadoc line="41">
                The constant indicating that a
                  parameter will allow &lt;code&gt;NULL&lt;/code&gt; values.                
            </javadoc>
            <declaration name="parameterNullableUnknown" type="int" line="46"/>
            <javadoc line="46">
                The constant indicating that the
                  nullability of a parameter is unknown.                
            </javadoc>
            <method name="isSigned" type="boolean" line="51"/>
            <javadoc line="51">
                Retrieves whether values for the designated parameter can be signed numbers.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    <code>true</code> if so; <code>false</code> otherwise                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPrecision" type="int" line="59"/>
            <javadoc line="59">
                Retrieves the designated parameter&apos;s specified column size.
                  &lt;P&gt;The returned value represents the maximum column size for the given parameter.
                  For numeric data, this is the maximum precision.  For character data, this is the length in characters.
                  For datetime datatypes, this is the length in characters of the String representation (assuming the
                  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
                  this is the length in bytes. 0 is returned for data types where the
                  column size is not applicable.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    precision                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getScale" type="int" line="73"/>
            <javadoc line="73">
                Retrieves the designated parameter&apos;s number of digits to right of the decimal point.
                  0 is returned for data types where the scale is not applicable.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    scale                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameterType" type="int" line="82"/>
            <javadoc line="82">
                Retrieves the designated parameter&apos;s SQL type.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    SQL type from <code>java.sql.Types</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    Types                    
                </see>
            </javadoc>
            <method name="getParameterTypeName" type="String" line="91"/>
            <javadoc line="91">
                Retrieves the designated parameter&apos;s database-specific type name.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    type the name used by the database. If the parameter type is
                      a user-defined type, then a fully-qualified type name is returned.                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParameterClassName" type="String" line="100"/>
            <javadoc line="100">
                Retrieves the fully-qualified name of the Java class whose instances
                  should be passed to the method &lt;code&gt;PreparedStatement.setObject&lt;/code&gt;.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    the fully-qualified name of the class in the Java programming
                      language that would be used by the method
                      <code>PreparedStatement.setObject</code> to set the value
                      in the specified parameter. This is the class name used
                      for custom mapping.                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="parameterModeUnknown" type="int" line="113"/>
            <javadoc line="113">
                The constant indicating that the mode of the parameter is unknown.                
            </javadoc>
            <declaration name="parameterModeIn" type="int" line="117"/>
            <javadoc line="117">
                The constant indicating that the parameter&apos;s mode is IN.                
            </javadoc>
            <declaration name="parameterModeInOut" type="int" line="121"/>
            <javadoc line="121">
                The constant indicating that the parameter&apos;s mode is INOUT.                
            </javadoc>
            <declaration name="parameterModeOut" type="int" line="125"/>
            <javadoc line="125">
                The constant indicating that the parameter&apos;s mode is  OUT.                
            </javadoc>
            <method name="getParameterMode" type="int" line="129"/>
            <javadoc line="129">
                Retrieves the designated parameter&apos;s mode.                
                <param>
                    param the first parameter is 1, the second is 2, ...                    
                </param>
                <return>
                    mode of the parameter; one of
                      <code>ParameterMetaData.parameterModeIn</code>,
                      <code>ParameterMetaData.parameterModeOut</code>, or
                      <code>ParameterMetaData.parameterModeInOut</code>
                      <code>ParameterMetaData.parameterModeUnknown</code>.                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
        </interface>
    </source>