<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
        <class name="SQLException" line="5">
            <extends class="java.lang.Exception"/>
            <implements interface="Iterable">
                <type_params>
                    <type_param name="Throwable"/>
                </type_params>
            </implements>
            <javadoc line="5">
                &lt;P&gt;An exception that provides information on a database access
                  error or other errors.
                  &lt;P&gt;Each &lt;code&gt;SQLException&lt;/code&gt; provides several kinds of information:
                  &lt;UL&gt;
                  &lt;LI&gt; a string describing the error.  This is used as the Java Exception
                  message, available via the method &lt;code&gt;getMesasge&lt;/code&gt;.
                  &lt;LI&gt; a &quot;SQLstate&quot; string, which follows either the XOPEN SQLstate conventions
                  or the SQL:2003 conventions.
                  The values of the SQLState string are described in the appropriate spec.
                  The &lt;code&gt;DatabaseMetaData&lt;/code&gt; method &lt;code&gt;getSQLStateType&lt;/code&gt;
                  can be used to discover whether the driver returns the XOPEN type or
                  the SQL:2003 type.
                  &lt;LI&gt; an integer error code that is specific to each vendor.  Normally this will
                  be the actual error code returned by the underlying database.
                  &lt;LI&gt; a chain to a next Exception.  This can be used to provide additional
                  error information.
                  &lt;LI&gt; the causal relationship, if any for this &lt;code&gt;SQLException&lt;/code&gt;.
                  &lt;/UL&gt;                
            </javadoc>
            <javadoc line="26">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt;  and
                  &lt;code&gt;vendorCode&lt;/code&gt;.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    vendorCode a database vendor-specific exception code                    
                </param>
            </javadoc>
            <method name="SQLException" type="constructor" line="37">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                    <param name="vendorCode" type="int"/>
                </params>
                <scope line="41">
                    <scope line="42"/>
                </scope>
            </method>
            <javadoc line="48">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt; and &lt;code&gt;SQLState&lt;/code&gt;.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method. The vendor code
                  is initialized to 0.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    SQLState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
            </javadoc>
            <method name="SQLException" type="constructor" line="58">
                <params>
                    <param name="reason" type="String"/>
                    <param name="SQLState" type="String"/>
                </params>
                <scope line="62">
                    <scope line="63"/>
                </scope>
            </method>
            <javadoc line="69">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt;. The  &lt;code&gt;SQLState&lt;/code&gt;  is initialized to
                  &lt;code&gt;null&lt;/code&gt; and the vender code is initialized to 0.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
            </javadoc>
            <method name="SQLException" type="constructor" line="78">
                <params>
                    <param name="reason" type="String"/>
                </params>
                <scope line="82">
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="88">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object.
                  The &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt; are initialized
                  to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.
                  The &lt;code&gt;cause&lt;/code&gt; is not initialized, and may subsequently be
                  initialized by a call to the{@link Throwable#initCause(java.lang.Throwable)} method.
                  &lt;p&gt;                
            </javadoc>
            <method name="SQLException" type="constructor" line="96">
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="106">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;cause&lt;/code&gt;.
                  The &lt;code&gt;SQLState&lt;/code&gt; is initialized
                  to &lt;code&gt;null&lt;/code&gt; and the vendor code is initialized to 0.
                  The &lt;code&gt;reason&lt;/code&gt;  is initialized to &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;cause==null&lt;/code&gt; or to &lt;code&gt;cause.toString()&lt;/code&gt; if
                  &lt;code&gt;cause!=null&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    cause the underlying reason for this <code>SQLException</code>
                      (which is saved for later retrieval by the <code>getCause()</code> method);
                      may be null indicating the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="SQLException" type="constructor" line="120">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
                <scope line="122">
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="128">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt; and  &lt;code&gt;cause&lt;/code&gt;.
                  The &lt;code&gt;SQLState&lt;/code&gt; is  initialized to &lt;code&gt;null&lt;/code&gt;
                  and the vendor code is initialized to 0.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception.                    
                </param>
                <param>
                    cause the underlying reason for this <code>SQLException</code>
                      (which is saved for later retrieval by the <code>getCause()</code> method);
                      may be null indicating the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="SQLException" type="constructor" line="140">
                <params>
                    <param name="reason" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <scope line="142">
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="148">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt; and  &lt;code&gt;cause&lt;/code&gt;.
                  The vendor code is initialized to 0.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception.                    
                </param>
                <param>
                    sqlState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    cause the underlying reason for this <code>SQLException</code>
                      (which is saved for later retrieval by the
                      <code>getCause()</code> method); may be null indicating
                      the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="SQLException" type="constructor" line="161">
                <params>
                    <param name="reason" type="String"/>
                    <param name="sqlState" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="172">
                Constructs a &lt;code&gt;SQLException&lt;/code&gt; object with a given
                  &lt;code&gt;reason&lt;/code&gt;, &lt;code&gt;SQLState&lt;/code&gt;, &lt;code&gt;vendorCode&lt;/code&gt;
                  and  &lt;code&gt;cause&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    reason a description of the exception                    
                </param>
                <param>
                    sqlState an XOPEN or SQL:2003 code identifying the exception                    
                </param>
                <param>
                    vendorCode a database vendor-specific exception code                    
                </param>
                <param>
                    cause the underlying reason for this <code>SQLException</code>
                      (which is saved for later retrieval by the <code>getCause()</code> method);
                      may be null indicating the cause is non-existent or unknown.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="SQLException" type="constructor" line="185">
                <params>
                    <param name="reason" type="String"/>
                    <param name="sqlState" type="String"/>
                    <param name="vendorCode" type="int"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <scope line="189">
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="196">
                Retrieves the SQLState for this &lt;code&gt;SQLException&lt;/code&gt; object.                
                <return>
                    the SQLState value                    
                </return>
            </javadoc>
            <method name="getSQLState" type="String" line="200"/>
            <javadoc line="203">
                Retrieves the vendor-specific exception code
                  for this &lt;code&gt;SQLException&lt;/code&gt; object.                
                <return>
                    the vendor's error code                    
                </return>
            </javadoc>
            <method name="getErrorCode" type="int" line="208"/>
            <javadoc line="211">
                Retrieves the exception chained to this
                  &lt;code&gt;SQLException&lt;/code&gt; object by setNextException(SQLException ex).                
                <return>
                    the next <code>SQLException</code> object in the chain;
                      <code>null</code> if there are none                    
                </return>
                <see>
                    #setNextException                    
                </see>
            </javadoc>
            <method name="getNextException" type="SQLException" line="218"/>
            <javadoc line="221">
                Adds an &lt;code&gt;SQLException&lt;/code&gt; object to the end of the chain.                
                <param>
                    ex the new exception that will be added to the end of
                      the <code>SQLException</code> chain                    
                </param>
                <see>
                    #getNextException                    
                </see>
            </javadoc>
            <method name="setNextException" type="void" line="227">
                <params>
                    <param name="ex" type="SQLException"/>
                </params>
                <declaration name="current" type="SQLException" line="228"/>
                <scope line="229">
                    <declaration name="next" type="SQLException" line="230"/>
                    <scope line="231"/>
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="241">
                Returns an iterator over the chained SQLExceptions.  The iterator will
                  be used to iterate over each SQLException and its underlying cause
                  (if any).                
                <return>
                    an iterator over the chained SQLExceptions and causes in the proper
                      order                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="iterator" type="Iterator<Throwable>" line="249">
                <anonymous_class line="250">
                    <declaration name="firstException" type="SQLException" line="251"/>
                    <declaration name="nextException" type="SQLException" line="252"/>
                    <declaration name="cause" type="Throwable" line="253"/>
                    <method name="hasNext" type="boolean" line="254"/>
                    <method name="next" type="Throwable" line="258">
                        <declaration name="throwable" type="Throwable" line="259"/>
                        <scope line="260"/>
                        <scope line="264"/>
                        <scope line="268"/>
                    </method>
                    <method name="remove" type="void" line="276"/>
                </anonymous_class>
            </method>
            <declaration name="SQLState" type="String" line="282"/>
            <javadoc line="282">
                @serial                
            </javadoc>
            <declaration name="vendorCode" type="int" line="286"/>
            <javadoc line="286">
                @serial                
            </javadoc>
            <declaration name="next" type="SQLException" line="290"/>
            <javadoc line="290">
                @serial                
            </javadoc>
            <declaration name="nextUpdater" type="AtomicReferenceFieldUpdater&lt;SQLException,SQLException&gt;" line="294"/>
            <declaration name="serialVersionUID" type="long" line="295"/>
        </class>
    </source>