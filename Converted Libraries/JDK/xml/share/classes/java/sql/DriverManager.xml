<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.sql">
        <import package="java.util.Iterator"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <class name="DriverManager" line="7">
            <javadoc line="7">
                &lt;P&gt;The basic service for managing a set of JDBC drivers.&lt;br&gt;
                  &lt;B&gt;NOTE:&lt;/B&gt; The {@link &lt;code&gt;DataSource&lt;/code&gt;} interface, new in the
                  JDBC 2.0 API, provides another way to connect to a data source.
                  The use of a &lt;code&gt;DataSource&lt;/code&gt; object is the preferred means of
                  connecting to a data source.
                  &lt;P&gt;As part of its initialization, the &lt;code&gt;DriverManager&lt;/code&gt; class will
                  attempt to load the driver classes referenced in the &quot;jdbc.drivers&quot;
                  system property. This allows a user to customize the JDBC Drivers
                  used by their applications. For example in your
                  ~/.hotjava/properties file you might specify:
                  &lt;pre&gt;
                  &lt;CODE&gt;jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver&lt;/CODE&gt;
                  &lt;/pre&gt;
                  &lt;P&gt; The &lt;code&gt;DriverManager&lt;/code&gt; methods &lt;code&gt;getConnection&lt;/code&gt; and
                  &lt;code&gt;getDrivers&lt;/code&gt; have been enhanced to support the Java Standard Edition
                  &lt;a href=&quot;../../../technotes/guides/jar/jar.html#Service%20Provider&quot;&gt;Service Provider&lt;/a&gt; mechanism. JDBC 4.0 Drivers must
                  include the file &lt;code&gt;META-INF/services/java.sql.Driver&lt;/code&gt;. This file contains the name of the JDBC drivers
                  implementation of &lt;code&gt;java.sql.Driver&lt;/code&gt;.  For example, to load the &lt;code&gt;my.sql.Driver&lt;/code&gt; class,
                  the &lt;code&gt;META-INF/services/java.sql.Driver&lt;/code&gt; file would contain the entry:
                  &lt;pre&gt;
                  &lt;code&gt;my.sql.Driver&lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;P&gt;Applications no longer need to explictly load JDBC drivers using &lt;code&gt;Class.forName()&lt;/code&gt;. Existing programs
                  which currently load JDBC drivers using &lt;code&gt;Class.forName()&lt;/code&gt; will continue to work without
                  modification.
                  &lt;P&gt;When the method &lt;code&gt;getConnection&lt;/code&gt; is called,
                  the &lt;code&gt;DriverManager&lt;/code&gt; will attempt to
                  locate a suitable driver from amongst those loaded at
                  initialization and those loaded explicitly using the same classloader
                  as the current applet or application.
                  &lt;P&gt;
                  Starting with the Java 2 SDK, Standard Edition, version 1.3, a
                  logging stream can be set only if the proper
                  permission has been granted.  Normally this will be done with
                  the tool PolicyTool, which can be used to grant &lt;code&gt;permission
                  java.sql.SQLPermission &quot;setLog&quot;&lt;/code&gt;.                
                <see>
                    Driver                    
                </see>
                <see>
                    Connection                    
                </see>
            </javadoc>
            <declaration name="registeredDrivers" type="CopyOnWriteArrayList&lt;DriverInfo&gt;" line="48"/>
            <declaration name="loginTimeout" type="int" line="49"/>
            <declaration name="logWriter" type="java.io.PrintWriter" line="50"/>
            <declaration name="logStream" type="java.io.PrintStream" line="51"/>
            <declaration name="logSync" type="Object" line="52"/>
            <method name="DriverManager" type="constructor" line="53"/>
            <javadoc line="55">
                Load the initial JDBC drivers by checking the System property
                  jdbc.properties and then use the {@code ServiceLoader} mechanism                
            </javadoc>
            <scope line="59"/>
            <declaration name="SET_LOG_PERMISSION" type="SQLPermission" line="63"/>
            <javadoc line="63">
                The &lt;code&gt;SQLPermission&lt;/code&gt; constant that allows the
                  setting of the logging stream.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="69">
                Retrieves the log writer.
                  The &lt;code&gt;getLogWriter&lt;/code&gt; and &lt;code&gt;setLogWriter&lt;/code&gt;
                  methods should be used instead
                  of the &lt;code&gt;get/setlogStream&lt;/code&gt; methods, which are deprecated.                
                <return>
                    a <code>java.io.PrintWriter</code> object                    
                </return>
                <see>
                    #setLogWriter                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getLogWriter" type="java.io.PrintWriter" line="78"/>
            <javadoc line="81">
                Sets the logging/tracing &lt;code&gt;PrintWriter&lt;/code&gt; object
                  that is used by the &lt;code&gt;DriverManager&lt;/code&gt; and all drivers.
                  &lt;P&gt;
                  There is a minor versioning problem created by the introduction
                  of the method &lt;code&gt;setLogWriter&lt;/code&gt;.  The
                  method &lt;code&gt;setLogWriter&lt;/code&gt; cannot create a &lt;code&gt;PrintStream&lt;/code&gt; object
                  that will be returned by &lt;code&gt;getLogStream&lt;/code&gt;---the Java platform does
                  not provide a backward conversion.  As a result, a new application
                  that uses &lt;code&gt;setLogWriter&lt;/code&gt; and also uses a JDBC 1.0 driver that uses
                  &lt;code&gt;getLogStream&lt;/code&gt; will likely not see debugging information written
                  by that driver.
                  &lt;P&gt;
                  Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
                  to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt; object before setting
                  the logging stream.  If a &lt;code&gt;SecurityManager&lt;/code&gt; exists and its
                  &lt;code&gt;checkPermission&lt;/code&gt; method denies setting the log writer, this
                  method throws a &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.                
                <param>
                    out the new logging/tracing <code>PrintStream</code> object;
                      <code>null</code> to disable logging and tracing                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      <code>checkPermission</code> method denies
                      setting the log writer                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    #getLogWriter                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setLogWriter" type="void" line="108">
                <params>
                    <param name="out" type="java.io.PrintWriter"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="109"/>
                <scope line="110"/>
            </method>
            <javadoc line="116">
                Attempts to establish a connection to the given database URL.
                  The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from
                  the set of registered JDBC drivers.                
                <param>
                    url a database url of the form
                      <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>                    
                </param>
                <param>
                    info a list of arbitrary string tag/value pairs as
                      connection arguments; normally at least a "user" and
                      "password" property should be included                    
                </param>
                <return>
                    a Connection to the URL                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getConnection" type="Connection" line="128">
                <params>
                    <param name="url" type="String"/>
                    <param name="info" type="java.util.Properties"/>
                </params>
                <declaration name="callerCL" type="ClassLoader" line="129"/>
            </method>
            <javadoc line="132">
                Attempts to establish a connection to the given database URL.
                  The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from
                  the set of registered JDBC drivers.                
                <param>
                    url a database url of the form
                      <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>                    
                </param>
                <param>
                    user the database user on whose behalf the connection is being
                      made                    
                </param>
                <param>
                    password the user's password                    
                </param>
                <return>
                    a connection to the URL                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getConnection" type="Connection" line="144">
                <params>
                    <param name="url" type="String"/>
                    <param name="user" type="String"/>
                    <param name="password" type="String"/>
                </params>
                <declaration name="info" type="java.util.Properties" line="145"/>
                <declaration name="callerCL" type="ClassLoader" line="146"/>
                <scope line="147"/>
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Attempts to establish a connection to the given database URL.
                  The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from
                  the set of registered JDBC drivers.                
                <param>
                    url a database url of the form
                      <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>                    
                </param>
                <return>
                    a connection to the URL                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getConnection" type="Connection" line="164">
                <params>
                    <param name="url" type="String"/>
                </params>
                <declaration name="info" type="java.util.Properties" line="165"/>
                <declaration name="callerCL" type="ClassLoader" line="166"/>
            </method>
            <javadoc line="169">
                Attempts to locate a driver that understands the given URL.
                  The &lt;code&gt;DriverManager&lt;/code&gt; attempts to select an appropriate driver from
                  the set of registered JDBC drivers.                
                <param>
                    url a database URL of the form
                      <code>jdbc:<em>subprotocol</em>:<em>subname</em></code>                    
                </param>
                <return>
                    a <code>Driver</code> object representing a driver
                      that can connect to the given URL                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="getDriver" type="Driver" line="179">
                <params>
                    <param name="url" type="String"/>
                </params>
                <declaration name="callerCL" type="ClassLoader" line="181"/>
                <scope line="182">
                    <scope line="183">
                        <scope line="184">
                            <scope line="185"/>
                        </scope>
                        <scope line="190"/>
                    </scope>
                    <scope line="193"/>
                </scope>
            </method>
            <javadoc line="200">
                Registers the given driver with the &lt;code&gt;DriverManager&lt;/code&gt;.
                  A newly-loaded driver class should call
                  the method &lt;code&gt;registerDriver&lt;/code&gt; to make itself
                  known to the &lt;code&gt;DriverManager&lt;/code&gt;.                
                <param>
                    driver the new JDBC Driver that is to be registered with the
                      <code>DriverManager</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="registerDriver" type="void" line="209">
                <params>
                    <param name="driver" type="java.sql.Driver"/>
                </params>
                <scope line="210"/>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Drops a driver from the &lt;code&gt;DriverManager&lt;/code&gt;&apos;s list.
                  Applets can only deregister drivers from their own classloaders.                
                <param>
                    driver the JDBC Driver to drop                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="deregisterDriver" type="void" line="224">
                <params>
                    <param name="driver" type="Driver"/>
                </params>
                <scope line="225"/>
                <declaration name="callerCL" type="ClassLoader" line="228"/>
                <declaration name="aDriver" type="DriverInfo" line="230"/>
                <scope line="231">
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
                <scope line="239"/>
            </method>
            <javadoc line="243">
                Retrieves an Enumeration with all of the currently loaded JDBC drivers
                  to which the current caller has access.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; The classname of a driver can be found using
                  &lt;CODE&gt;d.getClass().getName()&lt;/CODE&gt;                
                <return>
                    the list of JDBC Drivers loaded by the caller's class loader                    
                </return>
            </javadoc>
            <method name="getDrivers" type="java.util.Enumeration<Driver>" line="250">
                <declaration name="result" type="java.util.Vector&lt;Driver&gt;" line="251"/>
                <declaration name="callerCL" type="ClassLoader" line="252"/>
                <scope line="253">
                    <scope line="254"/>
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="263">
                Sets the maximum time in seconds that a driver will wait
                  while attempting to connect to a database.                
                <param>
                    seconds the login time limit in seconds; zero means there is no limit                    
                </param>
                <see>
                    #getLoginTimeout                    
                </see>
            </javadoc>
            <method name="setLoginTimeout" type="void" line="269">
                <params>
                    <param name="seconds" type="int"/>
                </params>
            </method>
            <javadoc line="272">
                Gets the maximum time in seconds that a driver can wait
                  when attempting to log in to a database.                
                <return>
                    the driver login time limit in seconds                    
                </return>
                <see>
                    #setLoginTimeout                    
                </see>
            </javadoc>
            <method name="getLoginTimeout" type="int" line="278"/>
            <javadoc line="281">
                Sets the logging/tracing PrintStream that is used
                  by the &lt;code&gt;DriverManager&lt;/code&gt;
                  and all drivers.
                  &lt;P&gt;
                  In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
                  to see that there is an &lt;code&gt;SQLPermission&lt;/code&gt; object before setting
                  the logging stream.  If a &lt;code&gt;SecurityManager&lt;/code&gt; exists and its
                  &lt;code&gt;checkPermission&lt;/code&gt; method denies setting the log writer, this
                  method throws a &lt;code&gt;java.lang.SecurityException&lt;/code&gt;.                
                <param>
                    out the new logging/tracing PrintStream; to disable, set to <code>null</code>                    
                </param>
                <deprecated>
                                        
                </deprecated>
                <throws>
                    SecurityException if a security manager exists and its
                      <code>checkPermission</code> method denies setting the log stream                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    #getLogStream                    
                </see>
            </javadoc>
            <method name="setLogStream" type="void" line="298">
                <params>
                    <param name="out" type="java.io.PrintStream"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="299"/>
                <scope line="300"/>
            </method>
            <javadoc line="307">
                Retrieves the logging/tracing PrintStream that is used by the &lt;code&gt;DriverManager&lt;/code&gt;
                  and all drivers.                
                <return>
                    the logging/tracing PrintStream; if disabled, is <code>null</code>                    
                </return>
                <deprecated>
                                        
                </deprecated>
                <see>
                    #setLogStream                    
                </see>
            </javadoc>
            <method name="getLogStream" type="java.io.PrintStream" line="314"/>
            <javadoc line="317">
                Prints a message to the current JDBC log stream.                
                <param>
                    message a log or tracing message                    
                </param>
            </javadoc>
            <method name="println" type="void" line="321">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="322">
                    <scope line="323"/>
                </scope>
            </method>
            <method name="isDriverAllowed" type="boolean" line="329">
                <params>
                    <param name="driver" type="Driver"/>
                    <param name="classLoader" type="ClassLoader"/>
                </params>
                <declaration name="result" type="boolean" line="330"/>
                <scope line="331">
                    <declaration name="aClass" type="Class&lt;?&gt;" line="332"/>
                    <scope line="333"/>
                    <scope line="336"/>
                </scope>
            </method>
            <method name="loadInitialDrivers" type="void" line="343">
                <declaration name="drivers" type="String" line="344"/>
                <scope line="345">
                    <anonymous_class line="346">
                        <method name="run" type="String" line="347"/>
                    </anonymous_class>
                </scope>
                <scope line="353"/>
                <anonymous_class line="356">
                    <method name="run" type="Void" line="357">
                        <declaration name="loadedDrivers" type="ServiceLoader&lt;Driver&gt;" line="358"/>
                        <declaration name="driversIterator" type="Iterator" line="359"/>
                        <scope line="360">
                            <scope line="361"/>
                        </scope>
                        <scope line="365"/>
                    </method>
                </anonymous_class>
                <scope line="372"/>
                <declaration name="driversList" type="String[]" line="375"/>
                <scope line="377">
                    <scope line="378"/>
                    <scope line="382"/>
                </scope>
            </method>
            <method name="getConnection" type="Connection" line="387">
                <params>
                    <param name="url" type="String"/>
                    <param name="info" type="java.util.Properties"/>
                    <param name="callerCL" type="ClassLoader"/>
                </params>
                <scope line="388">
                    <scope line="389"/>
                </scope>
                <scope line="393"/>
                <declaration name="reason" type="SQLException" line="397"/>
                <scope line="398">
                    <scope line="399">
                        <scope line="400">
                            <declaration name="con" type="Connection" line="402"/>
                            <scope line="403"/>
                        </scope>
                        <scope line="408">
                            <scope line="409"/>
                        </scope>
                    </scope>
                    <scope line="414"/>
                </scope>
                <scope line="418"/>
            </method>
            <method name="getCallerClassLoader" type="ClassLoader" line="425"/>
        </class>
        <class name="DriverInfo" line="427">
            <declaration name="driver" type="Driver" line="428"/>
            <method name="DriverInfo" type="constructor" line="429">
                <params>
                    <param name="driver" type="Driver"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="432">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="435"/>
            <method name="toString" type="String" line="438"/>
        </class>
    </source>