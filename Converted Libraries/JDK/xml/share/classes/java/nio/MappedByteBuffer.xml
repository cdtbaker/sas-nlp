<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio">
        <import package="java.io.FileDescriptor"/>
        <import package="sun.misc.Unsafe"/>
        <class name="MappedByteBuffer" line="32">
            <extends class="ByteBuffer"/>
            <comment line="71">
                This is a little bit backwards: By rights MappedByteBuffer should be a                
            </comment>
            <comment line="72">
                subclass of DirectByteBuffer, but to keep the spec clear and simple, and                
            </comment>
            <comment line="73">
                for optimization purposes, it&apos;s easier to do it the other way around.                
            </comment>
            <comment line="74">
                This works because DirectByteBuffer is a package-private class.                
            </comment>
            <comment line="76">
                For mapped buffers, a FileDescriptor that may be used for mapping                
            </comment>
            <comment line="77">
                operations if valid; null if the buffer is not mapped.                
            </comment>
            <comment line="80">
                This should only be invoked by the DirectByteBuffer constructors                
            </comment>
            <comment line="81">
                                
            </comment>
            <comment line="100">
                Returns the distance (in bytes) of the buffer from the page aligned address                
            </comment>
            <comment line="101">
                of the mapping. Computed each time to avoid storing in every direct buffer.                
            </comment>
            <javadoc line="32">
                A direct byte buffer whose content is a memory-mapped region of a file.
                  &lt;p&gt; Mapped byte buffers are created via the {@link java.nio.channels.FileChannel#map FileChannel.map} method.  This class
                  extends the {@link ByteBuffer} class with operations that are specific to
                  memory-mapped file regions.
                  &lt;p&gt; A mapped byte buffer and the file mapping that it represents remain
                  valid until the buffer itself is garbage-collected.
                  &lt;p&gt; The content of a mapped byte buffer can change at any time, for example
                  if the content of the corresponding region of the mapped file is changed by
                  this program or another.  Whether or not such changes occur, and when they
                  occur, is operating-system dependent and therefore unspecified.
                  &lt;a name=&quot;inaccess&quot;&gt;&lt;p&gt; All or part of a mapped byte buffer may become
                  inaccessible at any time, for example if the mapped file is truncated.  An
                  attempt to access an inaccessible region of a mapped byte buffer will not
                  change the buffer&apos;s content and will cause an unspecified exception to be
                  thrown either at the time of the access or at some later time.  It is
                  therefore strongly recommended that appropriate precautions be taken to
                  avoid the manipulation of a mapped file by this program, or by a
                  concurrently running program, except to read or write the file&apos;s content.
                  &lt;p&gt; Mapped byte buffers otherwise behave no differently than ordinary direct
                  byte buffers. &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="77"/>
            <method name="MappedByteBuffer" type="constructor" line="83">
                <params>
                    <param name="mark" type="int"/>
                    <param name="pos" type="int"/>
                    <param name="lim" type="int"/>
                    <param name="cap" type="int"/>
                    <param name="fd" type="FileDescriptor"/>
                </params>
            </method>
            <method name="MappedByteBuffer" type="constructor" line="88">
                <params>
                    <param name="mark" type="int"/>
                    <param name="pos" type="int"/>
                    <param name="lim" type="int"/>
                    <param name="cap" type="int"/>
                </params>
            </method>
            <method name="checkMapped" type="void" line="93">
                <comment line="95">
                    Can only happen if a luser explicitly casts a direct byte buffer                    
                </comment>
            </method>
            <method name="mappingOffset" type="long" line="101">
                <declaration name="ps" type="int" line="102"/>
                <declaration name="offset" type="long" line="103"/>
            </method>
            <method name="mappingAddress" type="long" line="107">
                <params>
                    <param name="mappingOffset" type="long"/>
                </params>
            </method>
            <method name="mappingLength" type="long" line="111">
                <params>
                    <param name="mappingOffset" type="long"/>
                </params>
            </method>
            <javadoc line="115">
                Tells whether or not this buffer&apos;s content is resident in physical
                  memory.
                  &lt;p&gt; A return value of &lt;tt&gt;true&lt;/tt&gt; implies that it is highly likely
                  that all of the data in this buffer is resident in physical memory and
                  may therefore be accessed without incurring any virtual-memory page
                  faults or I/O operations.  A return value of &lt;tt&gt;false&lt;/tt&gt; does not
                  necessarily imply that the buffer&apos;s content is not resident in physical
                  memory.
                  &lt;p&gt; The returned value is a hint, rather than a guarantee, because the
                  underlying operating system may have paged out some of the buffer&apos;s data
                  by the time that an invocation of this method returns.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if it is likely that this buffer's content
                      is resident in physical memory                    
                </return>
            </javadoc>
            <method name="isLoaded" type="boolean" line="133">
                <declaration name="offset" type="long" line="137"/>
                <declaration name="length" type="long" line="138"/>
            </method>
            <javadoc line="142">
                Loads this buffer&apos;s content into physical memory.
                  &lt;p&gt; This method makes a best effort to ensure that, when it returns,
                  this buffer&apos;s content is resident in physical memory.  Invoking this
                  method may cause some number of page faults and I/O operations to
                  occur. &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="load" type="MappedByteBuffer" line="152">
                <comment line="160">
                    touch each page                    
                </comment>
                <declaration name="offset" type="long" line="156"/>
                <declaration name="length" type="long" line="157"/>
                <declaration name="unsafe" type="Unsafe" line="161"/>
                <declaration name="ps" type="int" line="162"/>
                <declaration name="count" type="int" line="163"/>
                <declaration name="a" type="long" line="164"/>
                <scope line="165"/>
            </method>
            <javadoc line="173">
                Forces any changes made to this buffer&apos;s content to be written to the
                  storage device containing the mapped file.
                  &lt;p&gt; If the file mapped into this buffer resides on a local storage
                  device then when this method returns it is guaranteed that all changes
                  made to the buffer since it was created, or since this method was last
                  invoked, will have been written to that device.
                  &lt;p&gt; If the file does not reside on a local device then no such guarantee
                  is made.
                  &lt;p&gt; If this buffer was not mapped in read/write mode ({@link java.nio.channels.FileChannel.MapMode#READ_WRITE}) then invoking this
                  method has no effect. &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="force" type="MappedByteBuffer" line="191">
                <scope line="193">
                    <declaration name="offset" type="long" line="194"/>
                </scope>
            </method>
            <method name="isLoaded0" type="boolean" line="200"/>
            <method name="load0" type="void" line="201"/>
            <method name="force0" type="void" line="202"/>
        </class>
    </source>