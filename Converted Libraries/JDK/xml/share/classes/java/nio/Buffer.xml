<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio">
        <class name="Buffer" line="29">
            <comment line="177">
                Invariants: mark &lt;= position &lt;= limit &lt;= capacity                
            </comment>
            <comment line="183">
                Used only by direct buffers
                 NOTE: hoisted here for speed in JNI GetDirectBufferAddress                
            </comment>
            <comment line="187">
                Creates a new buffer with the given mark, position, limit, and capacity,
                 after checking invariants.                
            </comment>
            <comment line="482">
                -- Package-private methods for bounds checking, etc. --                
            </comment>
            <javadoc line="29">
                A container for data of a specific primitive type.
                  &lt;p&gt; A buffer is a linear, finite sequence of elements of a specific
                  primitive type.  Aside from its content, the essential properties of a
                  buffer are its capacity, limit, and position: &lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;p&gt; A buffer&apos;s &lt;i&gt;capacity&lt;/i&gt; is the number of elements it contains.  The
                  capacity of a buffer is never negative and never changes.  &lt;/p&gt;
                  &lt;p&gt; A buffer&apos;s &lt;i&gt;limit&lt;/i&gt; is the index of the first element that should
                  not be read or written.  A buffer&apos;s limit is never negative and is never
                  greater than its capacity.  &lt;/p&gt;
                  &lt;p&gt; A buffer&apos;s &lt;i&gt;position&lt;/i&gt; is the index of the next element to be
                  read or written.  A buffer&apos;s position is never negative and is never
                  greater than its limit.  &lt;/p&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt; There is one subclass of this class for each non-boolean primitive type.
                  &lt;h4&gt; Transferring data &lt;/h4&gt;
                  &lt;p&gt; Each subclass of this class defines two categories of &lt;i&gt;get&lt;/i&gt; and
                  &lt;i&gt;put&lt;/i&gt; operations: &lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;p&gt; &lt;i&gt;Relative&lt;/i&gt; operations read or write one or more elements starting
                  at the current position and then increment the position by the number of
                  elements transferred.  If the requested transfer exceeds the limit then a
                  relative &lt;i&gt;get&lt;/i&gt; operation throws a {@link BufferUnderflowException}and a relative &lt;i&gt;put&lt;/i&gt; operation throws a {@link BufferOverflowException}; in either case, no data is transferred.  &lt;/p&gt;
                  &lt;p&gt; &lt;i&gt;Absolute&lt;/i&gt; operations take an explicit element index and do not
                  affect the position.  Absolute &lt;i&gt;get&lt;/i&gt; and &lt;i&gt;put&lt;/i&gt; operations throw
                  an {@link IndexOutOfBoundsException} if the index argument exceeds the
                  limit.  &lt;/p&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt; Data may also, of course, be transferred in to or out of a buffer by the
                  I/O operations of an appropriate channel, which are always relative to the
                  current position.
                  &lt;h4&gt; Marking and resetting &lt;/h4&gt;
                  &lt;p&gt; A buffer&apos;s &lt;i&gt;mark&lt;/i&gt; is the index to which its position will be reset
                  when the {@link #reset reset} method is invoked.  The mark is not always
                  defined, but when it is defined it is never negative and is never greater
                  than the position.  If the mark is defined then it is discarded when the
                  position or the limit is adjusted to a value smaller than the mark.  If the
                  mark is not defined then invoking the {@link #reset reset} method causes an{@link InvalidMarkException} to be thrown.
                  &lt;h4&gt; Invariants &lt;/h4&gt;
                  &lt;p&gt; The following invariant holds for the mark, position, limit, and
                  capacity values:
                  &lt;blockquote&gt;
                  &lt;tt&gt;0&lt;/tt&gt; &lt;tt&gt;&amp;lt;=&lt;/tt&gt;
                  &lt;i&gt;mark&lt;/i&gt; &lt;tt&gt;&amp;lt;=&lt;/tt&gt;
                  &lt;i&gt;position&lt;/i&gt; &lt;tt&gt;&amp;lt;=&lt;/tt&gt;
                  &lt;i&gt;limit&lt;/i&gt; &lt;tt&gt;&amp;lt;=&lt;/tt&gt;
                  &lt;i&gt;capacity&lt;/i&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt; A newly-created buffer always has a position of zero and a mark that is
                  undefined.  The initial limit may be zero, or it may be some other value
                  that depends upon the type of the buffer and the manner in which it is
                  constructed.  Each element of a newly-allocated buffer is initialized
                  to zero.
                  &lt;h4&gt; Clearing, flipping, and rewinding &lt;/h4&gt;
                  &lt;p&gt; In addition to methods for accessing the position, limit, and capacity
                  values and for marking and resetting, this class also defines the following
                  operations upon buffers:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt; {@link #clear} makes a buffer ready for a new sequence of
                  channel-read or relative &lt;i&gt;put&lt;/i&gt; operations: It sets the limit to the
                  capacity and the position to zero.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; {@link #flip} makes a buffer ready for a new sequence of
                  channel-write or relative &lt;i&gt;get&lt;/i&gt; operations: It sets the limit to the
                  current position and then sets the position to zero.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; {@link #rewind} makes a buffer ready for re-reading the data that
                  it already contains: It leaves the limit unchanged and sets the position
                  to zero.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;h4&gt; Read-only buffers &lt;/h4&gt;
                  &lt;p&gt; Every buffer is readable, but not every buffer is writable.  The
                  mutation methods of each buffer class are specified as &lt;i&gt;optional
                  operations&lt;/i&gt; that will throw a {@link ReadOnlyBufferException} when
                  invoked upon a read-only buffer.  A read-only buffer does not allow its
                  content to be changed, but its mark, position, and limit values are mutable.
                  Whether or not a buffer is read-only may be determined by invoking its{@link #isReadOnly isReadOnly} method.
                  &lt;h4&gt; Thread safety &lt;/h4&gt;
                  &lt;p&gt; Buffers are not safe for use by multiple concurrent threads.  If a
                  buffer is to be used by more than one thread then access to the buffer
                  should be controlled by appropriate synchronization.
                  &lt;h4&gt; Invocation chaining &lt;/h4&gt;
                  &lt;p&gt; Methods in this class that do not otherwise have a value to return are
                  specified to return the buffer upon which they are invoked.  This allows
                  method invocations to be chained; for example, the sequence of statements
                  &lt;blockquote&gt;&lt;pre&gt;
                  b.flip();
                  b.position(23);
                  b.limit(42);&lt;/pre&gt;&lt;/blockquote&gt;
                  can be replaced by the single, more compact statement
                  &lt;blockquote&gt;&lt;pre&gt;
                  b.flip().position(23).limit(42);&lt;/pre&gt;&lt;/blockquote&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="mark" type="int" line="177"/>
            <declaration name="position" type="int" line="178"/>
            <declaration name="limit" type="int" line="179"/>
            <declaration name="capacity" type="int" line="180"/>
            <declaration name="address" type="long" line="184"/>
            <method name="Buffer" type="constructor" line="189">
                <params>
                    <param name="mark" type="int"/>
                    <param name="pos" type="int"/>
                    <param name="lim" type="int"/>
                    <param name="cap" type="int"/>
                </params>
                <scope line="195"/>
            </method>
            <javadoc line="203">
                Returns this buffer&apos;s capacity. &lt;/p&gt;                
                <return>
                    The capacity of this buffer                    
                </return>
            </javadoc>
            <method name="capacity" type="int" line="208"/>
            <javadoc line="212">
                Returns this buffer&apos;s position. &lt;/p&gt;                
                <return>
                    The position of this buffer                    
                </return>
            </javadoc>
            <method name="position" type="int" line="217"/>
            <javadoc line="221">
                Sets this buffer&apos;s position.  If the mark is defined and larger than the
                  new position then it is discarded. &lt;/p&gt;                
                <param>
                    newPositionThe new position value; must be non-negative
                      and no larger than the current limit                    
                </param>
                <return>
                    This buffer                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the preconditions on &lt;tt&gt;newPosition&lt;/tt&gt; do not hold                    
                </throws>
            </javadoc>
            <method name="position" type="Buffer" line="234">
                <params>
                    <param name="newPosition" type="int"/>
                </params>
            </method>
            <javadoc line="242">
                Returns this buffer&apos;s limit. &lt;/p&gt;                
                <return>
                    The limit of this buffer                    
                </return>
            </javadoc>
            <method name="limit" type="int" line="247"/>
            <javadoc line="251">
                Sets this buffer&apos;s limit.  If the position is larger than the new limit
                  then it is set to the new limit.  If the mark is defined and larger than
                  the new limit then it is discarded. &lt;/p&gt;                
                <param>
                    newLimitThe new limit value; must be non-negative
                      and no larger than this buffer&apos;s capacity                    
                </param>
                <return>
                    This buffer                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the preconditions on &lt;tt&gt;newLimit&lt;/tt&gt; do not hold                    
                </throws>
            </javadoc>
            <method name="limit" type="Buffer" line="265">
                <params>
                    <param name="newLimit" type="int"/>
                </params>
            </method>
            <javadoc line="274">
                Sets this buffer&apos;s mark at its position. &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="mark" type="Buffer" line="279"/>
            <javadoc line="284">
                Resets this buffer&apos;s position to the previously-marked position.
                  &lt;p&gt; Invoking this method neither changes nor discards the mark&apos;s
                  value. &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
                <throws>
                    InvalidMarkExceptionIf the mark has not been set                    
                </throws>
            </javadoc>
            <method name="reset" type="Buffer" line="295">
                <declaration name="m" type="int" line="296"/>
            </method>
            <javadoc line="303">
                Clears this buffer.  The position is set to zero, the limit is set to
                  the capacity, and the mark is discarded.
                  &lt;p&gt; Invoke this method before using a sequence of channel-read or
                  &lt;i&gt;put&lt;/i&gt; operations to fill this buffer.  For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  buf.clear();     // Prepare buffer for reading
                  in.read(buf);    // Read data&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This method does not actually erase the data in the buffer, but it
                  is named as if it did because it will most often be used in situations
                  in which that might as well be the case. &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="clear" type="Buffer" line="320"/>
            <javadoc line="327">
                Flips this buffer.  The limit is set to the current position and then
                  the position is set to zero.  If the mark is defined then it is
                  discarded.
                  &lt;p&gt; After a sequence of channel-read or &lt;i&gt;put&lt;/i&gt; operations, invoke
                  this method to prepare for a sequence of channel-write or relative
                  &lt;i&gt;get&lt;/i&gt; operations.  For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  buf.put(magic);    // Prepend header
                  in.read(buf);      // Read data into rest of buffer
                  buf.flip();        // Flip buffer
                  out.write(buf);    // Write header + data to channel&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This method is often used in conjunction with the {@link java.nio.ByteBuffer#compact compact} method when transferring data from
                  one place to another.  &lt;/p&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="flip" type="Buffer" line="348"/>
            <javadoc line="355">
                Rewinds this buffer.  The position is set to zero and the mark is
                  discarded.
                  &lt;p&gt; Invoke this method before a sequence of channel-write or &lt;i&gt;get&lt;/i&gt;
                  operations, assuming that the limit has already been set
                  appropriately.  For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  out.write(buf);    // Write remaining data
                  buf.rewind();      // Rewind buffer
                  buf.get(array);    // Copy data into array&lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    This buffer                    
                </return>
            </javadoc>
            <method name="rewind" type="Buffer" line="370"/>
            <javadoc line="376">
                Returns the number of elements between the current position and the
                  limit. &lt;/p&gt;                
                <return>
                    The number of elements remaining in this buffer                    
                </return>
            </javadoc>
            <method name="remaining" type="int" line="382"/>
            <javadoc line="386">
                Tells whether there are any elements between the current position and
                  the limit. &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, there is at least one element
                      remaining in this buffer                    
                </return>
            </javadoc>
            <method name="hasRemaining" type="boolean" line="393"/>
            <method name="isReadOnly" type="boolean" line="397"/>
            <javadoc line="397">
                Tells whether or not this buffer is read-only. &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this buffer is read-only                    
                </return>
            </javadoc>
            <method name="hasArray" type="boolean" line="404"/>
            <javadoc line="404">
                Tells whether or not this buffer is backed by an accessible
                  array.
                  &lt;p&gt; If this method returns &lt;tt&gt;true&lt;/tt&gt; then the {@link #array() array}and {@link #arrayOffset() arrayOffset} methods may safely be invoked.
                  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this buffer
                      is backed by an array and is not read-only                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="array" type="Object" line="419"/>
            <javadoc line="419">
                Returns the array that backs this
                  buffer&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.
                  &lt;p&gt; This method is intended to allow array-backed buffers to be
                  passed to native code more efficiently. Concrete subclasses
                  provide more strongly-typed return values for this method.
                  &lt;p&gt; Modifications to this buffer&apos;s content will cause the returned
                  array&apos;s content to be modified, and vice versa.
                  &lt;p&gt; Invoke the {@link #hasArray hasArray} method before invoking this
                  method in order to ensure that this buffer has an accessible backing
                  array.  &lt;/p&gt;                
                <return>
                    The array that backs this buffer                    
                </return>
                <throws>
                    ReadOnlyBufferExceptionIf this buffer is backed by an array but is read-only                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf this buffer is not backed by an accessible array                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="arrayOffset" type="int" line="446"/>
            <javadoc line="446">
                Returns the offset within this buffer&apos;s backing array of the first
                  element of the buffer&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.
                  &lt;p&gt; If this buffer is backed by an array then buffer position &lt;i&gt;p&lt;/i&gt;
                  corresponds to array index &lt;i&gt;p&lt;/i&gt;&amp;nbsp;+&amp;nbsp;&lt;tt&gt;arrayOffset()&lt;/tt&gt;.
                  &lt;p&gt; Invoke the {@link #hasArray hasArray} method before invoking this
                  method in order to ensure that this buffer has an accessible backing
                  array.  &lt;/p&gt;                
                <return>
                    The offset within this buffer&apos;s array
                      of the first element of the buffer                    
                </return>
                <throws>
                    ReadOnlyBufferExceptionIf this buffer is backed by an array but is read-only                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf this buffer is not backed by an accessible array                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isDirect" type="boolean" line="470"/>
            <javadoc line="470">
                Tells whether or not this buffer is
                  &lt;a href=&quot;ByteBuffer.html#direct&quot;&gt;&lt;i&gt;direct&lt;/i&gt;&lt;/a&gt;. &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this buffer is direct                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="483">
                Checks the current position against the limit, throwing a {@link BufferUnderflowException} if it is not smaller than the limit, and then
                  increments the position. &lt;/p&gt;                
                <return>
                    The current position value, before it is incremented                    
                </return>
            </javadoc>
            <method name="nextGetIndex" type="int" line="490">
                <comment line="491">
                    package-private                    
                </comment>
            </method>
            <method name="nextGetIndex" type="int" line="496">
                <params>
                    <param name="nb" type="int"/>
                </params>
                <declaration name="p" type="int" line="499"/>
            </method>
            <javadoc line="504">
                Checks the current position against the limit, throwing a {@link BufferOverflowException} if it is not smaller than the limit, and then
                  increments the position. &lt;/p&gt;                
                <return>
                    The current position value, before it is incremented                    
                </return>
            </javadoc>
            <method name="nextPutIndex" type="int" line="511">
                <comment line="512">
                    package-private                    
                </comment>
            </method>
            <method name="nextPutIndex" type="int" line="517">
                <params>
                    <param name="nb" type="int"/>
                </params>
                <declaration name="p" type="int" line="520"/>
            </method>
            <javadoc line="525">
                Checks the given index against the limit, throwing an {@link IndexOutOfBoundsException} if it is not smaller than the limit
                  or is smaller than zero.                
            </javadoc>
            <method name="checkIndex" type="int" line="530">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="531">
                    package-private                    
                </comment>
            </method>
            <method name="checkIndex" type="int" line="536">
                <params>
                    <param name="i" type="int"/>
                    <param name="nb" type="int"/>
                </params>
            </method>
            <method name="markValue" type="int" line="542"/>
            <method name="discardMark" type="void" line="546"/>
            <method name="checkBounds" type="void" line="550">
                <params>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
        </class>
    </source>