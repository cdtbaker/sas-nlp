<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.charset">
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.nio"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <class name="CoderResult" line="34">
            <javadoc line="34">
                A description of the result state of a coder.
                  &lt;p&gt; A charset coder, that is, either a decoder or an encoder, consumes bytes
                  (or characters) from an input buffer, translates them, and writes the
                  resulting characters (or bytes) to an output buffer.  A coding process
                  terminates for one of four categories of reasons, which are described by
                  instances of this class:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt; &lt;i&gt;Underflow&lt;/i&gt; is reported when there is no more input to be
                  processed, or there is insufficient input and additional input is
                  required.  This condition is represented by the unique result object{@link #UNDERFLOW}, whose {@link #isUnderflow() isUnderflow} method
                  returns &lt;tt&gt;true&lt;/tt&gt;.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; &lt;i&gt;Overflow&lt;/i&gt; is reported when there is insufficient room
                  remaining in the output buffer.  This condition is represented by the
                  unique result object {@link #OVERFLOW}, whose {@link #isOverflow()isOverflow} method returns &lt;tt&gt;true&lt;/tt&gt;.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; A &lt;i&gt;malformed-input error&lt;/i&gt; is reported when a sequence of
                  input units is not well-formed.  Such errors are described by instances of
                  this class whose {@link #isMalformed() isMalformed} method returns
                  &lt;tt&gt;true&lt;/tt&gt; and whose {@link #length() length} method returns the length
                  of the malformed sequence.  There is one unique instance of this class for
                  all malformed-input errors of a given length.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; An &lt;i&gt;unmappable-character error&lt;/i&gt; is reported when a sequence
                  of input units denotes a character that cannot be represented in the
                  output charset.  Such errors are described by instances of this class
                  whose {@link #isUnmappable() isUnmappable} method returns &lt;tt&gt;true&lt;/tt&gt; and
                  whose {@link #length() length} method returns the length of the input
                  sequence denoting the unmappable character.  There is one unique instance
                  of this class for all unmappable-character errors of a given length.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  For convenience, the {@link #isError() isError} method returns &lt;tt&gt;true&lt;/tt&gt;
                  for result objects that describe malformed-input and unmappable-character
                  errors but &lt;tt&gt;false&lt;/tt&gt; for those that describe underflow or overflow
                  conditions.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="CR_UNDERFLOW" type="int" line="87"/>
            <declaration name="CR_OVERFLOW" type="int" line="88"/>
            <declaration name="CR_ERROR_MIN" type="int" line="89"/>
            <declaration name="CR_MALFORMED" type="int" line="90"/>
            <declaration name="CR_UNMAPPABLE" type="int" line="91"/>
            <declaration name="names" type="String[]" line="93"/>
            <declaration name="type" type="int" line="96"/>
            <declaration name="length" type="int" line="97"/>
            <method name="CoderResult" type="constructor" line="99">
                <params>
                    <param name="type" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="104">
                Returns a string describing this coder result.                
                <return>
                    A descriptive string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="109">
                <declaration name="nm" type="String" line="110"/>
            </method>
            <javadoc line="114">
                Tells whether or not this object describes an underflow condition.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this object denotes underflow                    
                </return>
            </javadoc>
            <method name="isUnderflow" type="boolean" line="119"/>
            <javadoc line="123">
                Tells whether or not this object describes an overflow condition.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this object denotes overflow                    
                </return>
            </javadoc>
            <method name="isOverflow" type="boolean" line="128"/>
            <javadoc line="132">
                Tells whether or not this object describes an error condition.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this object denotes either a
                      malformed-input error or an unmappable-character error                    
                </return>
            </javadoc>
            <method name="isError" type="boolean" line="138"/>
            <javadoc line="142">
                Tells whether or not this object describes a malformed-input error.
                  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this object denotes a
                      malformed-input error                    
                </return>
            </javadoc>
            <method name="isMalformed" type="boolean" line="149"/>
            <javadoc line="153">
                Tells whether or not this object describes an unmappable-character
                  error.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this object denotes an
                      unmappable-character error                    
                </return>
            </javadoc>
            <method name="isUnmappable" type="boolean" line="160"/>
            <javadoc line="164">
                Returns the length of the erroneous input described by this
                  object&amp;nbsp;&amp;nbsp;&lt;i&gt;(optional operation)&lt;/i&gt;.  &lt;/p&gt;                
                <return>
                    The length of the erroneous input, a positive integer                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf this object does not describe an error condition, that is,
                      if the {@link #isError() isError} does not return <tt>true</tt>                    
                </throws>
            </javadoc>
            <method name="length" type="int" line="174"/>
            <declaration name="UNDERFLOW" type="CoderResult" line="180"/>
            <javadoc line="180">
                Result object indicating underflow, meaning that either the input buffer
                  has been completely consumed or, if the input buffer is not yet empty,
                  that additional input is required.  &lt;/p&gt;                
            </javadoc>
            <declaration name="OVERFLOW" type="CoderResult" line="188"/>
            <javadoc line="188">
                Result object indicating overflow, meaning that there is insufficient
                  room in the output buffer.  &lt;/p&gt;                
            </javadoc>
            <class name="Cache" line="195">
                <declaration name="cache" type="Map&lt;Integer,WeakReference&lt;CoderResult&gt;&gt;" line="197"/>
                <method name="create" type="CoderResult" line="199"/>
                <method name="get" type="CoderResult" line="201">
                    <params>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="k" type="Integer" line="204"/>
                    <declaration name="w" type="WeakReference&lt;CoderResult&gt;" line="205"/>
                    <declaration name="e" type="CoderResult" line="206"/>
                    <scope line="207"/>
                    <scope line="209"/>
                    <scope line="212"/>
                </method>
            </class>
            <declaration name="malformedCache" type="Cache" line="221"/>
            <anonymous_class line="222">
                <method name="create" type="CoderResult" line="223">
                    <params>
                        <param name="len" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="227">
                Static factory method that returns the unique object describing a
                  malformed-input error of the given length.  &lt;/p&gt;                
                <return>
                    The requested coder-result object                    
                </return>
            </javadoc>
            <method name="malformedForLength" type="CoderResult" line="233">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <declaration name="unmappableCache" type="Cache" line="237"/>
            <anonymous_class line="238">
                <method name="create" type="CoderResult" line="239">
                    <params>
                        <param name="len" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="243">
                Static factory method that returns the unique result object describing
                  an unmappable-character error of the given length.  &lt;/p&gt;                
                <return>
                    The requested coder-result object                    
                </return>
            </javadoc>
            <method name="unmappableForLength" type="CoderResult" line="249">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="253">
                Throws an exception appropriate to the result described by this object.
                  &lt;/p&gt;                
                <throws>
                    BufferUnderflowExceptionIf this object is {@link #UNDERFLOW}                    
                </throws>
                <throws>
                    BufferOverflowExceptionIf this object is {@link #OVERFLOW}                    
                </throws>
                <throws>
                    MalformedInputExceptionIf this object represents a malformed-input error; the
                      exception's length value will be that of this object                    
                </throws>
                <throws>
                    UnmappableCharacterExceptionIf this object represents an unmappable-character error; the
                      exceptions length value will be that of this object                    
                </throws>
            </javadoc>
            <method name="throwException" type="void" line="273"/>
        </class>
    </source>