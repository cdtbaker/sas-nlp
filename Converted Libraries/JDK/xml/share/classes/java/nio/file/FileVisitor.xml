<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <import package="java.nio.file.attribute.BasicFileAttributes"/>
        <import package="java.io.IOException"/>
        <interface name="FileVisitor">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="4">
                A visitor of files. An implementation of this interface is provided to the{@link Files#walkFileTree Files.walkFileTree} methods to visit each file in
                  a file tree.
                  &lt;p&gt; &lt;b&gt;Usage Examples:&lt;/b&gt;
                  Suppose we want to delete a file tree. In that case, each directory should
                  be deleted after the entries in the directory are deleted.
                  &lt;pre&gt;
                  Path start = ...
                  Files.walkFileTree(start, new SimpleFileVisitor&amp;lt;Path&amp;gt;() {
                  &amp;#64;Override
                  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                  throws IOException
                  {
                  Files.delete(file);
                  return FileVisitResult.CONTINUE;
                  }
                  &amp;#64;Override
                  public FileVisitResult postVisitDirectory(Path dir, IOException e)
                  throws IOException
                  {
                  if (e == null) {
                  Files.delete(dir);
                  return FileVisitResult.CONTINUE;
                  } else {
                  // directory iteration failed
                  throw e;
                  }
                  }
                  });
                  &lt;/pre&gt;
                  &lt;p&gt; Furthermore, suppose we want to copy a file tree to a target location.
                  In that case, symbolic links should be followed and the target directory
                  should be created before the entries in the directory are copied.
                  &lt;pre&gt;
                  final Path source = ...
                  final Path target = ...
                  Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,
                  new SimpleFileVisitor&amp;lt;Path&amp;gt;() {
                  &amp;#64;Override
                  public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                  throws IOException
                  {
                  Path targetdir = target.resolve(source.relativize(dir));
                  try {
                  Files.copy(dir, targetdir);
                  } catch (FileAlreadyExistsException e) {
                  if (!Files.isDirectory(targetdir))
                  throw e;
                  }
                  return CONTINUE;
                  }
                  &amp;#64;Override
                  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                  throws IOException
                  {
                  Files.copy(file, target.resolve(source.relativize(file)));
                  return CONTINUE;
                  }
                  });
                  &lt;/pre&gt;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="preVisitDirectory" type="FileVisitResult" line="67"/>
            <javadoc line="67">
                Invoked for a directory before entries in the directory are visited.
                  &lt;p&gt; If this method returns {@link FileVisitResult#CONTINUE CONTINUE},
                  then entries in the directory are visited. If this method returns {@link FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE} or {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS} then entries in the
                  directory (and any descendants) will not be visited.                
                <param>
                    dira reference to the directory                    
                </param>
                <param>
                    attrsthe directory's basic attributes                    
                </param>
                <return>
                    the visit result                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="visitFile" type="FileVisitResult" line="78"/>
            <javadoc line="78">
                Invoked for a file in a directory.                
                <param>
                    filea reference to the file                    
                </param>
                <param>
                    attrsthe file's basic attributes                    
                </param>
                <return>
                    the visit result                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="visitFileFailed" type="FileVisitResult" line="86"/>
            <javadoc line="86">
                Invoked for a file that could not be visited. This method is invoked
                  if the file&apos;s attributes could not be read, the file is a directory
                  that could not be opened, and other reasons.                
                <param>
                    filea reference to the file                    
                </param>
                <param>
                    excthe I/O exception that prevented the file from being visited                    
                </param>
                <return>
                    the visit result                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="postVisitDirectory" type="FileVisitResult" line="96"/>
            <javadoc line="96">
                Invoked for a directory after entries in the directory, and all of their
                  descendants, have been visited. This method is also invoked when iteration
                  of the directory completes prematurely (by a {@link #visitFile visitFile}method returning {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS},
                  or an I/O error when iterating over the directory).                
                <param>
                    dira reference to the directory                    
                </param>
                <param>
                    exc {@code null} if the iteration of the directory completes without
                      an error; otherwise the I/O exception that caused the iteration
                      of the directory to complete prematurely                    
                </param>
                <return>
                    the visit result                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>