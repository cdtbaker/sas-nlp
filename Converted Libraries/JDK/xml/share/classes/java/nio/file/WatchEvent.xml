<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <interface name="WatchEvent">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="2">
                An event or a repeated event for an object that is registered with a {@link WatchService}.
                  &lt;p&gt; An event is classified by its {@link #kind() kind} and has a {@link #count() count} to indicate the number of times that the event has been
                  observed. This allows for efficient representation of repeated events. The{@link #context() context} method returns any context associated with
                  the event. In the case of a repeated event then the context is the same for
                  all events.
                  &lt;p&gt; Watch events are immutable and safe for use by multiple concurrent
                  threads.                
                <param>
                    &lt;T&gt;
                      The type of the context object associated with the event                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <interface name="Kind">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <javadoc line="15">
                    An event kind, for the purposes of identification.                    
                    <since>
                        1.7                        
                    </since>
                    <see>
                        StandardWatchEventKinds                        
                    </see>
                </javadoc>
                <method name="name" type="String" line="21"/>
                <javadoc line="21">
                    Returns the name of the event kind.                    
                </javadoc>
                <method name="type" type="Class&lt;T&gt;" line="25"/>
                <javadoc line="25">
                    Returns the type of the {@link WatchEvent#context context} value.                    
                </javadoc>
            </interface>
            <interface name="Modifier">
                <javadoc line="30">
                    An event modifier that qualifies how a {@link Watchable} is registered
                      with a {@link WatchService}.
                      &lt;p&gt; This release does not define any &lt;em&gt;standard&lt;/em&gt; modifiers.                    
                    <since>
                        1.7                        
                    </since>
                    <see>
                        Watchable#register                        
                    </see>
                </javadoc>
                <method name="name" type="String" line="38"/>
                <javadoc line="38">
                    Returns the name of the modifier.                    
                </javadoc>
            </interface>
            <method name="kind" type="Kind&lt;T&gt;" line="43"/>
            <javadoc line="43">
                Returns the event kind.                
                <return>
                    the event kind                    
                </return>
            </javadoc>
            <method name="count" type="int" line="48"/>
            <javadoc line="48">
                Returns the event count. If the event count is greater than {@code 1}then this is a repeated event.                
                <return>
                    the event count                    
                </return>
            </javadoc>
            <method name="context" type="T" line="53"/>
            <javadoc line="53">
                Returns the context for the event.
                  &lt;p&gt; In the case of {@link StandardWatchEventKinds#ENTRY_CREATE ENTRY_CREATE},{@link StandardWatchEventKinds#ENTRY_DELETE ENTRY_DELETE}, and {@link StandardWatchEventKinds#ENTRY_MODIFY ENTRY_MODIFY} events the context is
                  a {@code Path} that is the {@link Path#relativize relative} path between
                  the directory registered with the watch service, and the entry that is
                  created, deleted, or modified.                
                <return>
                    the event context; may be {@code null}                    
                </return>
            </javadoc>
        </interface>
    </source>