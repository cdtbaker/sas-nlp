<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <import package="java.nio.file.attribute.BasicFileAttributes"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Objects"/>
        <class name="SimpleFileVisitor" line="5">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="FileVisitor">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="5">
                A simple visitor of files with default behavior to visit all files and to
                  re-throw I/O errors.
                  &lt;p&gt; Methods in this class may be overridden subject to their general contract.                
                <param>
                    &lt;T&gt;
                      The type of reference to the files                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="14">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="SimpleFileVisitor" type="constructor" line="17"/>
            <javadoc line="19">
                Invoked for a directory before entries in the directory are visited.
                  &lt;p&gt; Unless overridden, this method returns {@link FileVisitResult#CONTINUECONTINUE}.                
            </javadoc>
            <method name="preVisitDirectory" type="FileVisitResult" line="23">
                <params>
                    <param name="dir" type="T"/>
                    <param name="attrs" type="BasicFileAttributes"/>
                </params>
            </method>
            <javadoc line="28">
                Invoked for a file in a directory.
                  &lt;p&gt; Unless overridden, this method returns {@link FileVisitResult#CONTINUECONTINUE}.                
            </javadoc>
            <method name="visitFile" type="FileVisitResult" line="32">
                <params>
                    <param name="file" type="T"/>
                    <param name="attrs" type="BasicFileAttributes"/>
                </params>
            </method>
            <javadoc line="37">
                Invoked for a file that could not be visited.
                  &lt;p&gt; Unless overridden, this method re-throws the I/O exception that prevented
                  the file from being visited.                
            </javadoc>
            <method name="visitFileFailed" type="FileVisitResult" line="42">
                <params>
                    <param name="file" type="T"/>
                    <param name="exc" type="IOException"/>
                </params>
            </method>
            <javadoc line="46">
                Invoked for a directory after entries in the directory, and all of their
                  descendants, have been visited.
                  &lt;p&gt; Unless overridden, this method returns {@link FileVisitResult#CONTINUECONTINUE} if the directory iteration completes without an I/O exception;
                  otherwise this method re-throws the I/O exception that caused the iteration
                  of the directory to terminate prematurely.                
            </javadoc>
            <method name="postVisitDirectory" type="FileVisitResult" line="53">
                <params>
                    <param name="dir" type="T"/>
                    <param name="exc" type="IOException"/>
                </params>
            </method>
        </class>
    </source>