<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.io.IOException"/>
        <interface name="BasicFileAttributeView">
            <implements interface="FileAttributeView"/>
            <javadoc line="30">
                A file attribute view that provides a view of a &lt;em&gt;basic set&lt;/em&gt; of file
                  attributes common to many file systems. The basic set of file attributes
                  consist of &lt;em&gt;mandatory&lt;/em&gt; and &lt;em&gt;optional&lt;/em&gt; file attributes as
                  defined by the {@link BasicFileAttributes} interface.
                  &lt;p&gt; The file attributes are retrieved from the file system as a &lt;em&gt;bulk
                  operation&lt;/em&gt; by invoking the {@link #readAttributes() readAttributes} method.
                  This class also defines the {@link #setTimes setTimes} method to update the
                  file&apos;s time attributes.
                  &lt;p&gt; Where dynamic access to file attributes is required, the attributes
                  supported by this attribute view have the following names and types:
                  &lt;blockquote&gt;
                  &lt;table border=&quot;1&quot; cellpadding=&quot;8&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt; Name &lt;/th&gt;
                  &lt;th&gt; Type &lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;lastModifiedTime&quot; &lt;/td&gt;
                  &lt;td&gt; {@link FileTime} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;lastAccessTime&quot; &lt;/td&gt;
                  &lt;td&gt; {@link FileTime} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;creationTime&quot; &lt;/td&gt;
                  &lt;td&gt; {@link FileTime} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;size&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Long} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;isRegularFile&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;isDirectory&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;isSymbolicLink&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;isOther&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; &quot;fileKey&quot; &lt;/td&gt;
                  &lt;td&gt; {@link Object} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt; The {@link java.nio.file.Files#getAttribute getAttribute} method may be
                  used to read any of these attributes as if by invoking the {@link #readAttributes() readAttributes()} method.
                  &lt;p&gt; The {@link java.nio.file.Files#setAttribute setAttribute} method may be
                  used to update the file&apos;s last modified time, last access time or create time
                  attributes as if by invoking the {@link #setTimes setTimes} method.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="name" type="String" line="102"/>
            <javadoc line="102">
                Returns the name of the attribute view. Attribute views of this type
                  have the name {@code &quot;basic&quot;}.                
            </javadoc>
            <method name="readAttributes" type="BasicFileAttributes" line="109"/>
            <javadoc line="109">
                Reads the basic file attributes as a bulk operation.
                  &lt;p&gt; It is implementation specific if all file attributes are read as an
                  atomic operation with respect to other file system operations.                
                <return>
                    the file attributes                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, its {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file                    
                </throws>
            </javadoc>
            <method name="setTimes" type="void" line="126"/>
            <javadoc line="126">
                Updates any or all of the file&apos;s last modified time, last access time,
                  and create time attributes.
                  &lt;p&gt; This method updates the file&apos;s timestamp attributes. The values are
                  converted to the epoch and precision supported by the file system.
                  Converting from finer to coarser granularities result in precision loss.
                  The behavior of this method when attempting to set a timestamp that is
                  not supported or to a value that is outside the range supported by the
                  underlying file store is not defined. It may or not fail by throwing an{@code IOException}.
                  &lt;p&gt; If any of the {@code lastModifiedTime}, {@code lastAccessTime},
                  or {@code createTime} parameters has the value {@code null} then the
                  corresponding timestamp is not changed. An implementation may require to
                  read the existing values of the file attributes when only some, but not
                  all, of the timestamp attributes are updated. Consequently, this method
                  may not be an atomic operation with respect to other file system
                  operations. Reading and re-writing existing values may also result in
                  precision loss. If all of the {@code lastModifiedTime}, {@codelastAccessTime} and {@code createTime} parameters are {@code null} then
                  this method has no effect.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  Suppose we want to change a file&apos;s creation time.
                  &lt;pre&gt;
                  Path path = ...
                  FileTime time = ...
                  Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, null, time);
                  &lt;/pre&gt;                
                <param>
                    lastModifiedTimethe new last modified time, or {@code null} to not change the
                      value                    
                </param>
                <param>
                    lastAccessTimethe last access time, or {@code null} to not change the value                    
                </param>
                <param>
                    createTimethe file&apos;s create time, or {@code null} to not change the value                    
                </param>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, its  {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file                    
                </throws>
                <see>
                    java.nio.file.Files#setLastModifiedTime                    
                </see>
            </javadoc>
        </interface>
    </source>