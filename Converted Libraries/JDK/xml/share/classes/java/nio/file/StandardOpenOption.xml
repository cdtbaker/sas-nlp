<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <javadoc line="28">
            Defines the standard open options.            
            <since>
                1.7                
            </since>
        </javadoc>
        <javadoc line="35">
            Open for read access.            
        </javadoc>
        <javadoc line="40">
            Open for write access.            
        </javadoc>
        <javadoc line="45">
            If the file is opened for {@link #WRITE} access then bytes will be written
              to the end of the file rather than the beginning.
              &lt;p&gt; If the file is opened for write access by other programs, then it
              is file system specific if writing to the end of the file is atomic.            
        </javadoc>
        <javadoc line="54">
            If the file already exists and it is opened for {@link #WRITE}access, then its length is truncated to 0. This option is ignored
              if the file is opened only for {@link #READ} access.            
        </javadoc>
        <javadoc line="61">
            Create a new file if it does not exist.
              This option is ignored if the {@link #CREATE_NEW} option is also set.
              The check for the existence of the file and the creation of the file
              if it does not exist is atomic with respect to other file system
              operations.            
        </javadoc>
        <javadoc line="70">
            Create a new file, failing if the file already exists.
              The check for the existence of the file and the creation of the file
              if it does not exist is atomic with respect to other file system
              operations.            
        </javadoc>
        <javadoc line="78">
            Delete on close. When this option is present then the implementation
              makes a &lt;em&gt;best effort&lt;/em&gt; attempt to delete the file when closed
              by the appropriate {@code close} method. If the {@code close} method is
              not invoked then a &lt;em&gt;best effort&lt;/em&gt; attempt is made to delete the
              file when the Java virtual machine terminates (either normally, as
              defined by the Java Language Specification, or where possible, abnormally).
              This option is primarily intended for use with &lt;em&gt;work files&lt;/em&gt; that
              are used solely by a single instance of the Java virtual machine. This
              option is not recommended for use when opening files that are open
              concurrently by other entities. Many of the details as to when and how
              the file is deleted are implementation specific and therefore not
              specified. In particular, an implementation may be unable to guarantee
              that it deletes the expected file when replaced by an attacker while the
              file is open. Consequently, security sensitive applications should take
              care when using this option.
              &lt;p&gt; For security reasons, this option may imply the {@link LinkOption#NOFOLLOW_LINKS} option. In other words, if the option is present
              when opening an existing file that is a symbolic link then it may fail
              (by throwing {@link java.io.IOException}).            
        </javadoc>
        <javadoc line="102">
            Sparse file. When used with the {@link #CREATE_NEW} option then this
              option provides a &lt;em&gt;hint&lt;/em&gt; that the new file will be sparse. The
              option is ignored when the file system does not support the creation of
              sparse files.            
        </javadoc>
        <javadoc line="110">
            Requires that every update to the file&apos;s content or metadata be written
              synchronously to the underlying storage device.            
            <see>
                &lt;a href=&quot;package-summary.html#integrity&quot;&gt;Synchronized I/O file integrity&lt;/a&gt;                
            </see>
        </javadoc>
        <javadoc line="118">
            Requires that every update to the file&apos;s content be written
              synchronously to the underlying storage device.            
            <see>
                &lt;a href=&quot;package-summary.html#integrity&quot;&gt;Synchronized I/O file integrity&lt;/a&gt;                
            </see>
        </javadoc>
    </source>