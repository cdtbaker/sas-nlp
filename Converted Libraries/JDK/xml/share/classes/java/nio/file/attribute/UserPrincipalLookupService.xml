<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.io.IOException"/>
        <class name="UserPrincipalLookupService" line="3">
            <javadoc line="3">
                An object to lookup user and group principals by name. A {@link UserPrincipal}represents an identity that may be used to determine access rights to objects
                  in a file system. A {@link GroupPrincipal} represents a &lt;em&gt;group identity&lt;/em&gt;.
                  A {@code UserPrincipalLookupService} defines methods to lookup identities by
                  name or group name (which are typically user or account names). Whether names
                  and group names are case sensitive or not depends on the implementation.
                  The exact definition of a group is implementation specific but typically a
                  group represents an identity created for administrative purposes so as to
                  determine the access rights for the members of the group. In particular it is
                  implementation specific if the &lt;em&gt;namespace&lt;/em&gt; for names and groups is the
                  same or is distinct. To ensure consistent and correct behavior across
                  platforms it is recommended that this API be used as if the namespaces are
                  distinct. In other words, the {@link #lookupPrincipalByNamelookupPrincipalByName} should be used to lookup users, and {@link #lookupPrincipalByGroupName lookupPrincipalByGroupName} should be used to
                  lookup groups.                
                <since>
                    1.7                    
                </since>
                <see>
                    java.nio.file.FileSystem#getUserPrincipalLookupService                    
                </see>
            </javadoc>
            <javadoc line="21">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="UserPrincipalLookupService" type="constructor" line="24"/>
            <method name="lookupPrincipalByName" type="UserPrincipal" line="26"/>
            <javadoc line="26">
                Lookup a user principal by name.                
                <param>
                    namethe string representation of the user principal to lookup                    
                </param>
                <return>
                    a user principal                    
                </return>
                <throws>
                    UserPrincipalNotFoundExceptionthe principal does not exist                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, it checks {@link RuntimePermission}&lt;tt&gt;(&quot;lookupUserInformation&quot;)&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="lookupPrincipalByGroupName" type="GroupPrincipal" line="36"/>
            <javadoc line="36">
                Lookup a group principal by group name.
                  &lt;p&gt; Where an implementation does not support any notion of group then
                  this method always throws {@link UserPrincipalNotFoundException}. Where
                  the namespace for user accounts and groups is the same, then this method
                  is identical to invoking {@link #lookupPrincipalByNamelookupPrincipalByName}.                
                <param>
                    groupthe string representation of the group to lookup                    
                </param>
                <return>
                    a group principal                    
                </return>
                <throws>
                    UserPrincipalNotFoundExceptionthe principal does not exist or is not a group                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, it checks {@link RuntimePermission}&lt;tt&gt;(&quot;lookupUserInformation&quot;)&lt;/tt&gt;                    
                </throws>
            </javadoc>
        </class>
    </source>