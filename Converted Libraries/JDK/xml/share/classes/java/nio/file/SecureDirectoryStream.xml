<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.channels.SeekableByteChannel"/>
        <import package="java.util.Set"/>
        <import package="java.io.IOException"/>
        <interface name="SecureDirectoryStream">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="DirectoryStream">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="6">
                A {@code DirectoryStream} that defines operations on files that are located
                  relative to an open directory. A {@code SecureDirectoryStream} is intended
                  for use by sophisticated or security sensitive applications requiring to
                  traverse file trees or otherwise operate on directories in a race-free manner.
                  Race conditions can arise when a sequence of file operations cannot be
                  carried out in isolation. Each of the file operations defined by this
                  interface specify a relative path. All access to the file is relative
                  to the open directory irrespective of if the directory is moved or replaced
                  by an attacker while the directory is open. A {@code SecureDirectoryStream}may also be used as a virtual &lt;em&gt;working directory&lt;/em&gt;.
                  &lt;p&gt; A {@code SecureDirectoryStream} requires corresponding support from the
                  underlying operating system. Where an implementation supports this features
                  then the {@code DirectoryStream} returned by the {@link Files#newDirectoryStreamnewDirectoryStream} method will be a {@code SecureDirectoryStream} and must
                  be cast to that type in order to invoke the methods defined by this interface.
                  &lt;p&gt; In the case of the default {@link java.nio.file.spi.FileSystemProviderprovider}, and a security manager is set, then the permission checks are
                  performed using the path obtained by resolving the given relative path
                  against the &lt;i&gt;original path&lt;/i&gt; of the directory (irrespective of if the
                  directory is moved since it was opened).                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="newDirectoryStream" type="SecureDirectoryStream&lt;T&gt;" line="27"/>
            <javadoc line="27">
                Opens the directory identified by the given path, returning a {@codeSecureDirectoryStream} to iterate over the entries in the directory.
                  &lt;p&gt; This method works in exactly the manner specified by the {@link Files#newDirectoryStream(Path) newDirectoryStream} method for the case that
                  the {@code path} parameter is an {@link Path#isAbsolute absolute} path.
                  When the parameter is a relative path then the directory to open is
                  relative to this open directory. The {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to
                  ensure that this method fails if the file is a symbolic link.
                  &lt;p&gt; The new directory stream, once created, is not dependent upon the
                  directory stream used to create it. Closing this directory stream has no
                  effect upon newly created directory stream.                
                <param>
                    paththe path to the directory to open                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <return>
                    a new and open {@code SecureDirectoryStream} object                    
                </return>
                <throws>
                    ClosedDirectoryStreamExceptionif the directory stream is closed                    
                </throws>
                <throws>
                    NotDirectoryExceptionif the file could not otherwise be opened because it is not
                      a directory &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the directory.                    
                </throws>
            </javadoc>
            <method name="newByteChannel" type="SeekableByteChannel" line="48"/>
            <javadoc line="48">
                Opens or creates a file in this directory, returning a seekable byte
                  channel to access the file.
                  &lt;p&gt; This method works in exactly the manner specified by the {@link Files#newByteChannel Files.newByteChannel} method for the
                  case that the {@code path} parameter is an {@link Path#isAbsolute absolute}path. When the parameter is a relative path then the file to open or
                  create is relative to this open directory. In addition to the options
                  defined by the {@code Files.newByteChannel} method, the {@link LinkOption#NOFOLLOW_LINKS NOFOLLOW_LINKS} option may be used to
                  ensure that this method fails if the file is a symbolic link.
                  &lt;p&gt; The channel, once created, is not dependent upon the directory stream
                  used to create it. Closing this directory stream has no effect upon the
                  channel.                
                <param>
                    paththe path of the file to open open or create                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <param>
                    attrsan optional list of attributes to set atomically when creating
                      the file                    
                </param>
                <throws>
                    ClosedDirectoryStreamExceptionif the directory stream is closed                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the set contains an invalid combination of options                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionif an unsupported open option is specified or the array contains
                      attributes that cannot be set atomically when creating the file                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif a file of that name already exists and the {@link StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
                      &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the path if the file
                      is opened for reading. The {@link SecurityManager#checkWrite(String)checkWrite} method is invoked to check write access to the path
                      if the file is opened for writing.                    
                </throws>
            </javadoc>
            <method name="deleteFile" type="void" line="76"/>
            <javadoc line="76">
                Deletes a file.
                  &lt;p&gt; Unlike the {@link Files#delete delete()} method, this method does
                  not first examine the file to determine if the file is a directory.
                  Whether a directory is deleted by this method is system dependent and
                  therefore not specified. If the file is a symbolic link, then the link
                  itself, not the final target of the link, is deleted. When the
                  parameter is a relative path then the file to delete is relative to
                  this open directory.                
                <param>
                    paththe path of the file to delete                    
                </param>
                <throws>
                    ClosedDirectoryStreamExceptionif the directory stream is closed                    
                </throws>
                <throws>
                    NoSuchFileExceptionif the file does not exist &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkDelete(String) checkDelete}method is invoked to check delete access to the file                    
                </throws>
            </javadoc>
            <method name="deleteDirectory" type="void" line="93"/>
            <javadoc line="93">
                Deletes a directory.
                  &lt;p&gt; Unlike the {@link Files#delete delete()} method, this method
                  does not first examine the file to determine if the file is a directory.
                  Whether non-directories are deleted by this method is system dependent and
                  therefore not specified. When the parameter is a relative path then the
                  directory to delete is relative to this open directory.                
                <param>
                    paththe path of the directory to delete                    
                </param>
                <throws>
                    ClosedDirectoryStreamExceptionif the directory stream is closed                    
                </throws>
                <throws>
                    NoSuchFileExceptionif the directory does not exist &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    DirectoryNotEmptyExceptionif the directory could not otherwise be deleted because it is
                      not empty &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkDelete(String) checkDelete}method is invoked to check delete access to the directory                    
                </throws>
            </javadoc>
            <method name="move" type="void" line="110"/>
            <javadoc line="110">
                Move a file from this directory to another directory.
                  &lt;p&gt; This method works in a similar manner to {@link Files#move move}method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option
                  is specified. That is, this method moves a file as an atomic file system
                  operation. If the {@code srcpath} parameter is an {@link Path#isAbsoluteabsolute} path then it locates the source file. If the parameter is a
                  relative path then it is located relative to this open directory. If
                  the {@code targetpath} parameter is absolute then it locates the target
                  file (the {@code targetdir} parameter is ignored). If the parameter is
                  a relative path it is located relative to the open directory identified
                  by the {@code targetdir} parameter. In all cases, if the target file
                  exists then it is implementation specific if it is replaced or this
                  method fails.                
                <param>
                    srcpaththe name of the file to move                    
                </param>
                <param>
                    targetdirthe destination directory                    
                </param>
                <param>
                    targetpaththe name to give the file in the destination directory                    
                </param>
                <throws>
                    ClosedDirectoryStreamExceptionif this or the target directory stream is closed                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif the file already exists in the target directory and cannot
                      be replaced &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    AtomicMoveNotSupportedExceptionif the file cannot be moved as an atomic file system operation                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to both the source and
                      target file.                    
                </throws>
            </javadoc>
            <method name="getFileAttributeView" type="V" line="135"/>
            <javadoc line="135">
                Returns a new file attribute view to access the file attributes of this
                  directory.
                  &lt;p&gt; The resulting file attribute view can be used to read or update the
                  attributes of this (open) directory. The {@code type} parameter specifies
                  the type of the attribute view and the method returns an instance of that
                  type if supported. Invoking this method to obtain a {@link BasicFileAttributeView} always returns an instance of that class that is
                  bound to this open directory.
                  &lt;p&gt; The state of resulting file attribute view is intimately connected
                  to this directory stream. Once the directory stream is {@link #close closed},
                  then all methods to read or update attributes will throw {@link ClosedDirectoryStreamException ClosedDirectoryStreamException}.                
                <param>
                    typethe {@code Class} object corresponding to the file attribute view                    
                </param>
                <return>
                    a new file attribute view of the specified type bound to
                      this directory stream, or {@code null} if the attribute view
                      type is not available                    
                </return>
            </javadoc>
            <method name="getFileAttributeView" type="V" line="152"/>
            <javadoc line="152">
                Returns a new file attribute view to access the file attributes of a file
                  in this directory.
                  &lt;p&gt; The resulting file attribute view can be used to read or update the
                  attributes of file in this directory. The {@code type} parameter specifies
                  the type of the attribute view and the method returns an instance of that
                  type if supported. Invoking this method to obtain a {@link BasicFileAttributeView} always returns an instance of that class that is
                  bound to the file in the directory.
                  &lt;p&gt; The state of resulting file attribute view is intimately connected
                  to this directory stream. Once the directory stream {@link #close closed},
                  then all methods to read or update attributes will throw {@link ClosedDirectoryStreamException ClosedDirectoryStreamException}. The
                  file is not required to exist at the time that the file attribute view
                  is created but methods to read or update attributes of the file will
                  fail when invoked and the file does not exist.                
                <param>
                    paththe path of the file                    
                </param>
                <param>
                    typethe {@code Class} object corresponding to the file attribute view                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <return>
                    a new file attribute view of the specified type bound to a
                      this directory stream, or {@code null} if the attribute view
                      type is not available                    
                </return>
            </javadoc>
        </interface>
    </source>