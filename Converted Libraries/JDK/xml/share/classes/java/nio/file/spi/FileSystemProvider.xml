<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.spi">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.channels"/>
        <import package="java.net.URI"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="FileSystemProvider" line="40">
            <comment line="79">
                lock using when loading providers                
            </comment>
            <comment line="82">
                installed providers                
            </comment>
            <comment line="85">
                used to avoid recursive loading of instaled providers                
            </comment>
            <comment line="112">
                loads all installed providers                
            </comment>
            <javadoc line="40">
                Service-provider class for file systems. The methods defined by the {@link java.nio.file.Files} class will typically delegate to an instance of this
                  class.
                  &lt;p&gt; A file system provider is a concrete implementation of this class that
                  implements the abstract methods defined by this class. A provider is
                  identified by a {@code URI} {@link #getScheme() scheme}. The default provider
                  is identified by the URI scheme &quot;file&quot;. It creates the {@link FileSystem} that
                  provides access to the file systems accessible to the Java virtual machine.
                  The {@link FileSystems} class defines how file system providers are located
                  and loaded. The default provider is typically a system-default provider but
                  may be overridden if the system property {@codejava.nio.file.spi.DefaultFileSystemProvider} is set. In that case, the
                  provider has a one argument constructor whose formal parameter type is {@codeFileSystemProvider}. All other providers have a zero argument constructor
                  that initializes the provider.
                  &lt;p&gt; A provider is a factory for one or more {@link FileSystem} instances. Each
                  file system is identified by a {@code URI} where the URI&apos;s scheme matches
                  the provider&apos;s {@link #getScheme scheme}. The default file system, for example,
                  is identified by the URI {@code &quot;file:///&quot;}. A memory-based file system,
                  for example, may be identified by a URI such as {@code &quot;memory:///?name=logfs&quot;}.
                  The {@link #newFileSystem newFileSystem} method may be used to create a file
                  system, and the {@link #getFileSystem getFileSystem} method may be used to
                  obtain a reference to an existing file system created by the provider. Where
                  a provider is the factory for a single file system then it is provider dependent
                  if the file system is created when the provider is initialized, or later when
                  the {@code newFileSystem} method is invoked. In the case of the default
                  provider, the {@code FileSystem} is created when the provider is initialized.
                  &lt;p&gt; All of the methods in this class are safe for use by multiple concurrent
                  threads.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="lock" type="Object" line="79"/>
            <declaration name="installedProviders" type="List&lt;FileSystemProvider&gt;" line="82"/>
            <declaration name="loadingProviders" type="boolean" line="85"/>
            <method name="checkPermission" type="Void" line="87">
                <declaration name="sm" type="SecurityManager" line="88"/>
            </method>
            <method name="FileSystemProvider" type="constructor" line="93">
                <params>
                    <param name="ignore" type="Void"/>
                </params>
            </method>
            <javadoc line="95">
                Initializes a new instance of this class.
                  &lt;p&gt; During construction a provider may safely access files associated
                  with the default provider but care needs to be taken to avoid circular
                  loading of other installed providers. If circular loading of installed
                  providers is detected then an unspecified error is thrown.                
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link RuntimePermission}&lt;tt&gt;(&quot;fileSystemProvider&quot;)&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="FileSystemProvider" type="constructor" line="107"/>
            <method name="loadInstalledProviders" type="List<FileSystemProvider>" line="112">
                <comment line="119">
                    ServiceConfigurationError may be throw here                    
                </comment>
                <comment line="123">
                    add to list if the provider is not &quot;file&quot; and isn&apos;t a duplicate                    
                </comment>
                <declaration name="list" type="List&lt;FileSystemProvider&gt;" line="113"/>
                <declaration name="sl" type="ServiceLoader&lt;FileSystemProvider&gt;" line="115"/>
                <scope line="119">
                    <declaration name="scheme" type="String" line="120"/>
                    <scope line="123">
                        <declaration name="found" type="boolean" line="124"/>
                        <scope line="125">
                            <scope line="126"/>
                        </scope>
                        <scope line="131"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="139">
                Returns a list of the installed file system providers.
                  &lt;p&gt; The first invocation of this method causes the default provider to be
                  initialized (if not already initialized) and loads any other installed
                  providers as described by the {@link FileSystems} class.                
                <return>
                    An unmodifiable list of the installed file system providers. The
                      list contains at least one element, that is the default file
                      system provider                    
                </return>
                <throws>
                    ServiceConfigurationErrorWhen an error occurs while loading a service provider                    
                </throws>
            </javadoc>
            <method name="installedProviders" type="List<FileSystemProvider>" line="153">
                <comment line="156">
                    ensure default provider is initialized                    
                </comment>
                <comment line="173">
                    insert the default provider at the start of the list                    
                </comment>
                <scope line="154">
                    <declaration name="defaultProvider" type="FileSystemProvider" line="156"/>
                    <scope line="158">
                        <scope line="159">
                            <scope line="160"/>
                            <anonymous_class line="166">
                                <method name="run" type="List<FileSystemProvider>" line="168"/>
                            </anonymous_class>
                            <declaration name="list" type="List&lt;FileSystemProvider&gt;" line="165"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getScheme" type="String" line="182"/>
            <javadoc line="182">
                Returns the URI scheme that identifies this provider.                
                <return>
                    The URI scheme                    
                </return>
            </javadoc>
            <method name="newFileSystem" type="FileSystem" line="189"/>
            <javadoc line="189">
                Constructs a new {@code FileSystem} object identified by a URI. This
                  method is invoked by the {@link FileSystems#newFileSystem(URI,Map)}method to open a new file system identified by a URI.
                  &lt;p&gt; The {@code uri} parameter is an absolute, hierarchical URI, with a
                  scheme equal (without regard to case) to the scheme supported by this
                  provider. The exact form of the URI is highly provider dependent. The{@code env} parameter is a map of provider specific properties to configure
                  the file system.
                  &lt;p&gt; This method throws {@link FileSystemAlreadyExistsException} if the
                  file system already exists because it was previously created by an
                  invocation of this method. Once a file system is {@link java.nio.file.FileSystem#close closed} it is provider-dependent if the
                  provider allows a new file system to be created with the same URI as a
                  file system it previously created.                
                <param>
                    uriURI reference                    
                </param>
                <param>
                    envA map of provider specific properties to configure the file system;
                      may be empty                    
                </param>
                <return>
                    A new file system                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the pre-conditions for the {@code uri} parameter aren&apos;t met,
                      or the {@code env} parameter does not contain properties required
                      by the provider, or a property value is invalid                    
                </throws>
                <throws>
                    IOExceptionAn I/O error occurs creating the file system                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is installed and it denies an unspecified
                      permission required by the file system provider implementation                    
                </throws>
                <throws>
                    FileSystemAlreadyExistsExceptionIf the file system has already been created                    
                </throws>
            </javadoc>
            <method name="getFileSystem" type="FileSystem" line="230"/>
            <javadoc line="230">
                Returns an existing {@code FileSystem} created by this provider.
                  &lt;p&gt; This method returns a reference to a {@code FileSystem} that was
                  created by invoking the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)}method. File systems created the {@link #newFileSystem(Path,Map)newFileSystem(Path,Map)} method are not returned by this method.
                  The file system is identified by its {@code URI}. Its exact form
                  is highly provider dependent. In the case of the default provider the URI&apos;s
                  path component is {@code &quot;/&quot;} and the authority, query and fragment components
                  are undefined (Undefined components are represented by {@code null}).
                  &lt;p&gt; Once a file system created by this provider is {@link java.nio.file.FileSystem#close closed} it is provider-dependent if this
                  method returns a reference to the closed file system or throws {@link FileSystemNotFoundException}. If the provider allows a new file system to
                  be created with the same URI as a file system it previously created then
                  this method throws the exception if invoked after the file system is
                  closed (and before a new instance is created by the {@link #newFileSystemnewFileSystem} method).
                  &lt;p&gt; If a security manager is installed then a provider implementation
                  may require to check a permission before returning a reference to an
                  existing file system. In the case of the {@link FileSystems#getDefaultdefault} file system, no permission check is required.                
                <param>
                    uriURI reference                    
                </param>
                <return>
                    The file system                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the pre-conditions for the {@code uri} parameter aren&apos;t met                    
                </throws>
                <throws>
                    FileSystemNotFoundExceptionIf the file system does not exist                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is installed and it denies an unspecified
                      permission.                    
                </throws>
            </javadoc>
            <method name="getPath" type="Path" line="271"/>
            <javadoc line="271">
                Return a {@code Path} object by converting the given {@link URI}. The
                  resulting {@code Path} is associated with a {@link FileSystem} that
                  already exists or is constructed automatically.
                  &lt;p&gt; The exact form of the URI is file system provider dependent. In the
                  case of the default provider, the URI scheme is {@code &quot;file&quot;} and the
                  given URI has a non-empty path component, and undefined query, and
                  fragment components. The resulting {@code Path} is associated with the
                  default {@link FileSystems#getDefault default} {@code FileSystem}.
                  &lt;p&gt; If a security manager is installed then a provider implementation
                  may require to check a permission. In the case of the {@link FileSystems#getDefault default} file system, no permission check is
                  required.                
                <param>
                    uriThe URI to convert                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the URI scheme does not identify this provider or other
                      preconditions on the uri parameter do not hold                    
                </throws>
                <throws>
                    FileSystemNotFoundExceptionThe file system, identified by the URI, does not exist and
                      cannot be created automatically                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is installed and it denies an unspecified
                      permission.                    
                </throws>
            </javadoc>
            <javadoc line="302">
                Constructs a new {@code FileSystem} to access the contents of a file as a
                  file system.
                  &lt;p&gt; This method is intended for specialized providers of pseudo file
                  systems where the contents of one or more files is treated as a file
                  system. The {@code env} parameter is a map of provider specific properties
                  to configure the file system.
                  &lt;p&gt; If this provider does not support the creation of such file systems
                  or if the provider does not recognize the file type of the given file then
                  it throws {@code UnsupportedOperationException}. The default implementation
                  of this method throws {@code UnsupportedOperationException}.                
                <param>
                    pathThe path to the file                    
                </param>
                <param>
                    envA map of provider specific properties to configure the file system;
                      may be empty                    
                </param>
                <return>
                    A new file system                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf this provider does not support access to the contents as a
                      file system or it does not recognize the file type of the
                      given file                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the {@code env} parameter does not contain properties required
                      by the provider, or a property value is invalid                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is installed and it denies an unspecified
                      permission.                    
                </throws>
            </javadoc>
            <method name="newFileSystem" type="FileSystem" line="339">
                <params>
                    <param name="path" type="Path"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="343">
                Opens a file, returning an input stream to read from the file. This
                  method works in exactly the manner specified by the {@link Files#newInputStream} method.
                  &lt;p&gt; The default implementation of this method opens a channel to the file
                  as if by invoking the {@link #newByteChannel} method and constructs a
                  stream that reads bytes from the channel. This method should be overridden
                  where appropriate.                
                <param>
                    paththe path to the file to open                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <return>
                    a new input stream                    
                </return>
                <throws>
                    IllegalArgumentExceptionif an invalid combination of options is specified                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionif an unsupported option is specified                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file.                    
                </throws>
            </javadoc>
            <method name="newInputStream" type="InputStream" line="373">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="OpenOption"/>
                </params>
                <scope line="374">
                    <scope line="375"/>
                </scope>
            </method>
            <javadoc line="383">
                Opens or creates a file, returning an output stream that may be used to
                  write bytes to the file. This method works in exactly the manner
                  specified by the {@link Files#newOutputStream} method.
                  &lt;p&gt; The default implementation of this method opens a channel to the file
                  as if by invoking the {@link #newByteChannel} method and constructs a
                  stream that writes bytes to the channel. This method should be overridden
                  where appropriate.                
                <param>
                    paththe path to the file to open or create                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <return>
                    a new output stream                    
                </return>
                <throws>
                    IllegalArgumentExceptionif {@code options} contains an invalid combination of options                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionif an unsupported option is specified                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the file. The {@link SecurityManager#checkDelete(String) checkDelete} method is
                      invoked to check delete access if the file is opened with the{@code DELETE_ON_CLOSE} option.                    
                </throws>
            </javadoc>
            <method name="newOutputStream" type="OutputStream" line="416">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="OpenOption"/>
                </params>
                <declaration name="len" type="int" line="417"/>
                <declaration name="opts" type="Set&lt;OpenOption&gt;" line="418"/>
                <scope line="419"/>
                <scope line="422">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="433">
                Opens or creates a file for reading and/or writing, returning a file
                  channel to access the file. This method works in exactly the manner
                  specified by the {@link FileChannel#open(Path,Set,FileAttribute[])FileChannel.open} method. A provider that does not support all the
                  features required to construct a file channel throws {@codeUnsupportedOperationException}. The default provider is required to
                  support the creation of file channels. When not overridden, the default
                  implementation throws {@code UnsupportedOperationException}.                
                <param>
                    paththe path of the file to open or create                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <param>
                    attrsan optional list of file attributes to set atomically when
                      creating the file                    
                </param>
                <return>
                    a new file channel                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the set contains an invalid combination of options                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf this provider that does not support creating file channels,
                      or an unsupported open option or file attribute is specified                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default file system, the {@link SecurityManager#checkRead(String)} method is invoked to check
                      read access if the file is opened for reading. The {@link SecurityManager#checkWrite(String)} method is invoked to check
                      write access if the file is opened for writing                    
                </throws>
            </javadoc>
            <method name="newFileChannel" type="FileChannel" line="471">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
            </method>
            <javadoc line="475">
                Opens or creates a file for reading and/or writing, returning an
                  asynchronous file channel to access the file. This method works in
                  exactly the manner specified by the {@link AsynchronousFileChannel#open(Path,Set,ExecutorService,FileAttribute[])AsynchronousFileChannel.open} method.
                  A provider that does not support all the features required to construct
                  an asynchronous file channel throws {@code UnsupportedOperationException}.
                  The default provider is required to support the creation of asynchronous
                  file channels. When not overridden, the default implementation of this
                  method throws {@code UnsupportedOperationException}.                
                <param>
                    paththe path of the file to open or create                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <param>
                    executorthe thread pool or {@code null} to associate the channel with
                      the default thread pool                    
                </param>
                <param>
                    attrsan optional list of file attributes to set atomically when
                      creating the file                    
                </param>
                <return>
                    a new asynchronous file channel                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the set contains an invalid combination of options                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf this provider that does not support creating asynchronous file
                      channels, or an unsupported open option or file attribute is
                      specified                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default file system, the {@link SecurityManager#checkRead(String)} method is invoked to check
                      read access if the file is opened for reading. The {@link SecurityManager#checkWrite(String)} method is invoked to check
                      write access if the file is opened for writing                    
                </throws>
            </javadoc>
            <method name="newAsynchronousFileChannel" type="AsynchronousFileChannel" line="520">
                <params>
                    <param name="path" type="Path"/>
                    <param name="options" type="Set<? extends OpenOption>"/>
                    <param name="executor" type="ExecutorService"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
            </method>
            <method name="newByteChannel" type="SeekableByteChannel" line="524"/>
            <javadoc line="524">
                Opens or creates a file, returning a seekable byte channel to access the
                  file. This method works in exactly the manner specified by the {@link Files#newByteChannel(Path,Set,FileAttribute[])} method.                
                <param>
                    paththe path to the file to open or create                    
                </param>
                <param>
                    optionsoptions specifying how the file is opened                    
                </param>
                <param>
                    attrsan optional list of file attributes to set atomically when
                      creating the file                    
                </param>
                <return>
                    a new seekable byte channel                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the set contains an invalid combination of options                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionif an unsupported open option is specified or the array contains
                      attributes that cannot be set atomically when creating the file                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif a file of that name already exists and the {@link StandardOpenOption#CREATE_NEW CREATE_NEW} option is specified
                      &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the path if the file is
                      opened for reading. The {@link SecurityManager#checkWrite(String)checkWrite} method is invoked to check write access to the path
                      if the file is opened for writing. The {@link SecurityManager#checkDelete(String) checkDelete} method is
                      invoked to check delete access if the file is opened with the{@code DELETE_ON_CLOSE} option.                    
                </throws>
            </javadoc>
            <method name="newDirectoryStream" type="DirectoryStream<Path>" line="564"/>
            <javadoc line="564">
                Opens a directory, returning a {@code DirectoryStream} to iterate over
                  the entries in the directory. This method works in exactly the manner
                  specified by the {@link Files#newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)}method.                
                <param>
                    dirthe path to the directory                    
                </param>
                <param>
                    filterthe directory stream filter                    
                </param>
                <return>
                    a new and open {@code DirectoryStream} object                    
                </return>
                <throws>
                    NotDirectoryExceptionif the file could not otherwise be opened because it is not
                      a directory &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the directory.                    
                </throws>
            </javadoc>
            <method name="createDirectory" type="void" line="591"/>
            <javadoc line="591">
                Creates a new directory. This method works in exactly the manner
                  specified by the {@link Files#createDirectory} method.                
                <param>
                    dirthe directory to create                    
                </param>
                <param>
                    attrsan optional list of file attributes to set atomically when
                      creating the directory                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the array contains an attribute that cannot be set atomically
                      when creating the directory                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif a directory could not otherwise be created because a file of
                      that name already exists &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs or the parent directory does not exist                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to the new directory.                    
                </throws>
            </javadoc>
            <javadoc line="617">
                Creates a symbolic link to a target. This method works in exactly the
                  manner specified by the {@link Files#createSymbolicLink} method.
                  &lt;p&gt; The default implementation of this method throws {@codeUnsupportedOperationException}.                
                <param>
                    linkthe path of the symbolic link to create                    
                </param>
                <param>
                    targetthe target of the symbolic link                    
                </param>
                <param>
                    attrsthe array of attributes to set atomically when creating the
                      symbolic link                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the implementation does not support symbolic links or the
                      array contains an attribute that cannot be set atomically when
                      creating the symbolic link                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif a file with the name already exists &lt;i&gt;(optional specific
                      exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager
                      is installed, it denies {@link LinkPermission}&lt;tt&gt;(&quot;symbolic&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the path of the symbolic link.                    
                </throws>
            </javadoc>
            <method name="createSymbolicLink" type="void" line="649">
                <params>
                    <param name="link" type="Path"/>
                    <param name="target" type="Path"/>
                    <param name="attrs" type="FileAttribute<?>"/>
                </params>
            </method>
            <javadoc line="653">
                Creates a new link (directory entry) for an existing file. This method
                  works in exactly the manner specified by the {@link Files#createLink}method.
                  &lt;p&gt; The default implementation of this method throws {@codeUnsupportedOperationException}.                
                <param>
                    linkthe link (directory entry) to create                    
                </param>
                <param>
                    existinga path to an existing file                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the implementation does not support adding an existing file
                      to a directory                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif the entry could not otherwise be created because a file of
                      that name already exists &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager
                      is installed, it denies {@link LinkPermission}&lt;tt&gt;(&quot;hard&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to either the  link or the
                      existing file.                    
                </throws>
            </javadoc>
            <method name="createLink" type="void" line="681">
                <params>
                    <param name="link" type="Path"/>
                    <param name="existing" type="Path"/>
                </params>
            </method>
            <method name="delete" type="void" line="685"/>
            <javadoc line="685">
                Deletes a file. This method works in exactly the  manner specified by the{@link Files#delete} method.                
                <param>
                    paththe path to the file to delete                    
                </param>
                <throws>
                    NoSuchFileExceptionif the file does not exist &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    DirectoryNotEmptyExceptionif the file is a directory and could not otherwise be deleted
                      because the directory is not empty &lt;i&gt;(optional specific
                      exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkDelete(String)} method
                      is invoked to check delete access to the file                    
                </throws>
            </javadoc>
            <javadoc line="707">
                Deletes a file if it exists. This method works in exactly the manner
                  specified by the {@link Files#deleteIfExists} method.
                  &lt;p&gt; The default implementation of this method simply invokes {@link #delete} ignoring the {@code NoSuchFileException} when the file does not
                  exist. It may be overridden where appropriate.                
                <param>
                    paththe path to the file to delete                    
                </param>
                <return>
                    {@code true} if the file was deleted by this method; {@codefalse} if the file could not be deleted because it did not
                      exist                    
                </return>
                <throws>
                    DirectoryNotEmptyExceptionif the file is a directory and could not otherwise be deleted
                      because the directory is not empty &lt;i&gt;(optional specific
                      exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkDelete(String)} method
                      is invoked to check delete access to the file                    
                </throws>
            </javadoc>
            <method name="deleteIfExists" type="boolean" line="733">
                <params>
                    <param name="path" type="Path"/>
                </params>
                <scope line="734"/>
                <scope line="737"/>
            </method>
            <javadoc line="742">
                Reads the target of a symbolic link. This method works in exactly the
                  manner specified by the {@link Files#readSymbolicLink} method.
                  &lt;p&gt; The default implementation of this method throws {@codeUnsupportedOperationException}.                
                <param>
                    linkthe path to the symbolic link                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the implementation does not support symbolic links                    
                </throws>
                <throws>
                    NotLinkExceptionif the target could otherwise not be read because the file
                      is not a symbolic link &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager
                      is installed, it checks that {@code FilePermission} has been
                      granted with the &quot;{@code readlink}&quot; action to read the link.                    
                </throws>
            </javadoc>
            <method name="readSymbolicLink" type="Path" line="764">
                <params>
                    <param name="link" type="Path"/>
                </params>
            </method>
            <method name="copy" type="void" line="768"/>
            <javadoc line="768">
                Copy a file to a target file. This method works in exactly the manner
                  specified by the {@link Files#copy(Path,Path,CopyOption[])} method
                  except that both the source and target paths must be associated with
                  this provider.                
                <param>
                    sourcethe path to the file to copy                    
                </param>
                <param>
                    targetthe path to the target file                    
                </param>
                <param>
                    optionsoptions specifying how the copy should be done                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the array contains a copy option that is not supported                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif the target file exists but cannot be replaced because the{@code REPLACE_EXISTING} option is not specified &lt;i&gt;(optional
                      specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    DirectoryNotEmptyExceptionthe {@code REPLACE_EXISTING} option is specified but the file
                      cannot be replaced because it is a non-empty directory
                      &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the source file, the{@link SecurityManager#checkWrite(String) checkWrite} is invoked
                      to check write access to the target file. If a symbolic link is
                      copied the security manager is invoked to check {@link LinkPermission}{@code (&quot;symbolic&quot;)}.                    
                </throws>
            </javadoc>
            <method name="move" type="void" line="805"/>
            <javadoc line="805">
                Move or rename a file to a target file. This method works in exactly the
                  manner specified by the {@link Files#move} method except that both the
                  source and target paths must be associated with this provider.                
                <param>
                    sourcethe path to the file to move                    
                </param>
                <param>
                    targetthe path to the target file                    
                </param>
                <param>
                    optionsoptions specifying how the move should be done                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the array contains a copy option that is not supported                    
                </throws>
                <throws>
                    FileAlreadyExistsExceptionif the target file exists but cannot be replaced because the{@code REPLACE_EXISTING} option is not specified &lt;i&gt;(optional
                      specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    DirectoryNotEmptyExceptionthe {@code REPLACE_EXISTING} option is specified but the file
                      cannot be replaced because it is a non-empty directory
                      &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    AtomicMoveNotSupportedExceptionif the options array contains the {@code ATOMIC_MOVE} option but
                      the file cannot be moved as an atomic file system operation.                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkWrite(String) checkWrite}method is invoked to check write access to both the source and
                      target file.                    
                </throws>
            </javadoc>
            <method name="isSameFile" type="boolean" line="841"/>
            <javadoc line="841">
                Tests if two paths locate the same file. This method works in exactly the
                  manner specified by the {@link Files#isSameFile} method.                
                <param>
                    pathone path to the file                    
                </param>
                <param>
                    path2the other path                    
                </param>
                <return>
                    {@code true} if, and only if, the two paths locate the same file                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to both files.                    
                </throws>
            </javadoc>
            <method name="isHidden" type="boolean" line="862"/>
            <javadoc line="862">
                Tells whether or not a file is considered &lt;em&gt;hidden&lt;/em&gt;. This method
                  works in exactly the manner specified by the {@link Files#isHidden}method.
                  &lt;p&gt; This method is invoked by the {@link Files#isHidden isHidden} method.                
                <param>
                    paththe path to the file to test                    
                </param>
                <return>
                    {@code true} if the file is considered hidden                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file.                    
                </throws>
            </javadoc>
            <method name="getFileStore" type="FileStore" line="883"/>
            <javadoc line="883">
                Returns the {@link FileStore} representing the file store where a file
                  is located. This method works in exactly the manner specified by the{@link Files#getFileStore} method.                
                <param>
                    paththe path to the file                    
                </param>
                <return>
                    the file store where the file is stored                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file, and in
                      addition it checks {@link RuntimePermission}&lt;tt&gt;
                      (&quot;getFileStoreAttributes&quot;)&lt;/tt&gt;                    
                </throws>
            </javadoc>
            <method name="checkAccess" type="void" line="904"/>
            <javadoc line="904">
                Checks the existence, and optionally the accessibility, of a file.
                  &lt;p&gt; This method may be used by the {@link Files#isReadable isReadable},{@link Files#isWritable isWritable} and {@link Files#isExecutableisExecutable} methods to check the accessibility of a file.
                  &lt;p&gt; This method checks the existence of a file and that this Java virtual
                  machine has appropriate privileges that would allow it access the file
                  according to all of access modes specified in the {@code modes} parameter
                  as follows:
                  &lt;table border=1 cellpadding=5 summary=&quot;&quot;&gt;
                  &lt;tr&gt; &lt;th&gt;Value&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link AccessMode#READ READ} &lt;/td&gt;
                  &lt;td&gt; Checks that the file exists and that the Java virtual machine has
                  permission to read the file. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link AccessMode#WRITE WRITE} &lt;/td&gt;
                  &lt;td&gt; Checks that the file exists and that the Java virtual machine has
                  permission to write to the file, &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link AccessMode#EXECUTE EXECUTE} &lt;/td&gt;
                  &lt;td&gt; Checks that the file exists and that the Java virtual machine has
                  permission to {@link Runtime#exec execute} the file. The semantics
                  may differ when checking access to a directory. For example, on UNIX
                  systems, checking for {@code EXECUTE} access checks that the Java
                  virtual machine has permission to search the directory in order to
                  access file or subdirectories. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt; If the {@code modes} parameter is of length zero, then the existence
                  of the file is checked.
                  &lt;p&gt; This method follows symbolic links if the file referenced by this
                  object is a symbolic link. Depending on the implementation, this method
                  may require to read file permissions, access control lists, or other
                  file attributes in order to check the effective access to the file. To
                  determine the effective access to a file may require access to several
                  attributes and so in some implementations this method may not be atomic
                  with respect to other file system operations.                
                <param>
                    paththe path to the file to check                    
                </param>
                <param>
                    modesThe access modes to check; may have zero elements                    
                </param>
                <throws>
                    UnsupportedOperationExceptionan implementation is required to support checking for{@code READ}, {@code WRITE}, and {@code EXECUTE} access. This
                      exception is specified to allow for the {@code Access} enum to
                      be extended in future releases.                    
                </throws>
                <throws>
                    NoSuchFileExceptionif a file does not exist &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    AccessDeniedExceptionthe requested access would be denied or the access cannot be
                      determined because the Java virtual machine has insufficient
                      privileges or other reasons. &lt;i&gt;(optional specific exception)&lt;/i&gt;                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, the {@link SecurityManager#checkRead(String) checkRead}is invoked when checking read access to the file or only the
                      existence of the file, the {@link SecurityManager#checkWrite(String)checkWrite} is invoked when checking write access to the file,
                      and {@link SecurityManager#checkExec(String) checkExec} is invoked
                      when checking execute access.                    
                </throws>
            </javadoc>
            <method name="getFileAttributeView" type="V" line="980"/>
            <javadoc line="980">
                Returns a file attribute view of a given type. This method works in
                  exactly the manner specified by the {@link Files#getFileAttributeView}method.                
                <param>
                    paththe path to the file                    
                </param>
                <param>
                    typethe {@code Class} object corresponding to the file attribute view                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <return>
                    a file attribute view of the specified type, or {@code null} if
                      the attribute view type is not available                    
                </return>
            </javadoc>
            <method name="readAttributes" type="A" line="998"/>
            <javadoc line="998">
                Reads a file&apos;s attributes as a bulk operation. This method works in
                  exactly the manner specified by the {@link Files#readAttributes(Path,Class,LinkOption[])} method.                
                <param>
                    paththe path to the file                    
                </param>
                <param>
                    typethe {@code Class} of the file attributes required
                      to read                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <return>
                    the file attributes                    
                </return>
                <throws>
                    UnsupportedOperationExceptionif an attributes of the given type are not supported                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, its {@link SecurityManager#checkRead(String) checkRead}method is invoked to check read access to the file                    
                </throws>
            </javadoc>
            <method name="readAttributes" type="Map<String,Object>" line="1025"/>
            <javadoc line="1025">
                Reads a set of file attributes as a bulk operation. This method works in
                  exactly the manner specified by the {@link Files#readAttributes(Path,String,LinkOption[])} method.                
                <param>
                    paththe path to the file                    
                </param>
                <param>
                    attributesthe attributes to read                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <return>
                    a map of the attributes returned; may be empty. The map&apos;s keys
                      are the attribute names, its values are the attribute values                    
                </return>
                <throws>
                    UnsupportedOperationExceptionif the attribute view is not available                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif no attributes are specified or an unrecognized attributes is
                      specified                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, its {@link SecurityManager#checkRead(String) checkRead}method denies read access to the file. If this method is invoked
                      to read security sensitive attributes then the security manager
                      may be invoke to check for additional permissions.                    
                </throws>
            </javadoc>
            <method name="setAttribute" type="void" line="1058"/>
            <javadoc line="1058">
                Sets the value of a file attribute. This method works in exactly the
                  manner specified by the {@link Files#setAttribute} method.                
                <param>
                    paththe path to the file                    
                </param>
                <param>
                    attributethe attribute to set                    
                </param>
                <param>
                    valuethe attribute value                    
                </param>
                <param>
                    optionsoptions indicating how symbolic links are handled                    
                </param>
                <throws>
                    UnsupportedOperationExceptionif the attribute view is not available                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the attribute name is not specified, or is not recognized, or
                      the attribute value is of the correct type but has an
                      inappropriate value                    
                </throws>
                <throws>
                    ClassCastExceptionIf the attribute value is not of the expected type or is a
                      collection containing elements that are not of the expected
                      type                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, and a security manager is
                      installed, its {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the file. If this method is invoked
                      to set security sensitive attributes then the security manager
                      may be invoked to check for additional permissions.                    
                </throws>
            </javadoc>
        </class>
    </source>