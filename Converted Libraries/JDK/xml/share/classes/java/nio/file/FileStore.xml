<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <import package="java.nio.file.attribute"/>
        <import package="java.io.IOException"/>
        <class name="FileStore" line="4">
            <javadoc line="4">
                Storage for files. A {@code FileStore} represents a storage pool, device,
                  partition, volume, concrete file system or other implementation specific means
                  of file storage. The {@code FileStore} for where a file is stored is obtained
                  by invoking the {@link Files#getFileStore getFileStore} method, or all file
                  stores can be enumerated by invoking the {@link FileSystem#getFileStoresgetFileStores} method.
                  &lt;p&gt; In addition to the methods defined by this class, a file store may support
                  one or more {@link FileStoreAttributeView FileStoreAttributeView} classes
                  that provide a read-only or updatable view of a set of file store attributes.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="16">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="FileStore" type="constructor" line="19"/>
            <method name="name" type="String" line="21"/>
            <javadoc line="21">
                Returns the name of this file store. The format of the name is highly
                  implementation specific. It will typically be the name of the storage
                  pool or volume.
                  &lt;p&gt; The string returned by this method may differ from the string
                  returned by the {@link Object#toString() toString} method.                
                <return>
                    the name of this file store                    
                </return>
            </javadoc>
            <method name="type" type="String" line="30"/>
            <javadoc line="30">
                Returns the &lt;em&gt;type&lt;/em&gt; of this file store. The format of the string
                  returned by this method is highly implementation specific. It may
                  indicate, for example, the format used or if the file store is local
                  or remote.                
                <return>
                    a string representing the type of this file store                    
                </return>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="38"/>
            <javadoc line="38">
                Tells whether this file store is read-only. A file store is read-only if
                  it does not support write operations or other changes to files. Any
                  attempt to create a file, open an existing file for writing etc. causes
                  an {@code IOException} to be thrown.                
                <return>
                    {@code true} if, and only if, this file store is read-only                    
                </return>
            </javadoc>
            <method name="getTotalSpace" type="long" line="46"/>
            <javadoc line="46">
                Returns the size, in bytes, of the file store.                
                <return>
                    the size of the file store, in bytes                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getUsableSpace" type="long" line="52"/>
            <javadoc line="52">
                Returns the number of bytes available to this Java virtual machine on the
                  file store.
                  &lt;p&gt; The returned number of available bytes is a hint, but not a
                  guarantee, that it is possible to use most or any of these bytes.  The
                  number of usable bytes is most likely to be accurate immediately
                  after the space attributes are obtained. It is likely to be made inaccurate
                  by any external I/O operations including those made on the system outside
                  of this Java virtual machine.                
                <return>
                    the number of bytes available                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getUnallocatedSpace" type="long" line="65"/>
            <javadoc line="65">
                Returns the number of unallocated bytes in the file store.
                  &lt;p&gt; The returned number of unallocated bytes is a hint, but not a
                  guarantee, that it is possible to use most or any of these bytes.  The
                  number of unallocated bytes is most likely to be accurate immediately
                  after the space attributes are obtained. It is likely to be
                  made inaccurate by any external I/O operations including those made on
                  the system outside of this virtual machine.                
                <return>
                    the number of unallocated bytes                    
                </return>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="supportsFileAttributeView" type="boolean" line="77"/>
            <javadoc line="77">
                Tells whether or not this file store supports the file attributes
                  identified by the given file attribute view.
                  &lt;p&gt; Invoking this method to test if the file store supports {@link BasicFileAttributeView} will always return {@code true}. In the case of
                  the default provider, this method cannot guarantee to give the correct
                  result when the file store is not a local storage device. The reasons for
                  this are implementation specific and therefore unspecified.                
                <param>
                    typethe file attribute view type                    
                </param>
                <return>
                    {@code true} if, and only if, the file attribute view is
                      supported                    
                </return>
            </javadoc>
            <method name="supportsFileAttributeView" type="boolean" line="89"/>
            <javadoc line="89">
                Tells whether or not this file store supports the file attributes
                  identified by the given file attribute view.
                  &lt;p&gt; Invoking this method to test if the file store supports {@link BasicFileAttributeView}, identified by the name &quot;{@code basic}&quot; will
                  always return {@code true}. In the case of the default provider, this
                  method cannot guarantee to give the correct result when the file store is
                  not a local storage device. The reasons for this are implementation
                  specific and therefore unspecified.                
                <param>
                    namethe {@link FileAttributeView#name name} of file attribute view                    
                </param>
                <return>
                    {@code true} if, and only if, the file attribute view is
                      supported                    
                </return>
            </javadoc>
            <method name="getFileStoreAttributeView" type="V" line="102"/>
            <javadoc line="102">
                Returns a {@code FileStoreAttributeView} of the given type.
                  &lt;p&gt; This method is intended to be used where the file store attribute
                  view defines type-safe methods to read or update the file store attributes.
                  The {@code type} parameter is the type of the attribute view required and
                  the method returns an instance of that type if supported.                
                <param>
                    typethe {@code Class} object corresponding to the attribute view                    
                </param>
                <return>
                    a file store attribute view of the specified type or{@code null} if the attribute view is not available                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Object" line="112"/>
            <javadoc line="112">
                Reads the value of a file store attribute.
                  &lt;p&gt; The {@code attribute} parameter identifies the attribute to be read
                  and takes the form:
                  &lt;blockquote&gt;
                  &lt;i&gt;view-name&lt;/i&gt;&lt;b&gt;:&lt;/b&gt;&lt;i&gt;attribute-name&lt;/i&gt;
                  &lt;/blockquote&gt;
                  where the character {@code &apos;:&apos;} stands for itself.
                  &lt;p&gt; &lt;i&gt;view-name&lt;/i&gt; is the {@link FileStoreAttributeView#name name} of
                  a {@link FileStore AttributeView} that identifies a set of file attributes.
                  &lt;i&gt;attribute-name&lt;/i&gt; is the name of the attribute.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  Suppose we want to know if ZFS compression is enabled (assuming the &quot;zfs&quot;
                  view is supported):
                  &lt;pre&gt;
                  boolean compression = (Boolean)fs.getAttribute(&quot;zfs:compression&quot;);
                  &lt;/pre&gt;                
                <param>
                    attributethe attribute to read                    
                </param>
                <return>
                    the attribute value; {@code null} may be a valid valid for some
                      attributes                    
                </return>
                <throws>
                    UnsupportedOperationExceptionif the attribute view is not available or it does not support
                      reading the attribute                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>