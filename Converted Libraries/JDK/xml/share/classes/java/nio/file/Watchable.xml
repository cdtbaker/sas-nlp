<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file">
        <import package="java.io.IOException"/>
        <interface name="Watchable">
            <javadoc line="30">
                An object that may be registered with a watch service so that it can be
                  &lt;em&gt;watched&lt;/em&gt; for changes and events.
                  &lt;p&gt; This interface defines the {@link #register register} method to register
                  the object with a {@link WatchService} returning a {@link WatchKey} to
                  represent the registration. An object may be registered with more than one
                  watch service. Registration with a watch service is cancelled by invoking the
                  key&apos;s {@link WatchKey#cancel cancel} method.                
                <since>
                    1.7                    
                </since>
                <see>
                    Path#register                    
                </see>
            </javadoc>
            <method name="register" type="WatchKey" line="47"/>
            <javadoc line="47">
                Registers an object with a watch service.
                  &lt;p&gt; If the file system object identified by this object is currently
                  registered with the watch service then the watch key, representing that
                  registration, is returned after changing the event set or modifiers to
                  those specified by the {@code events} and {@code modifiers} parameters.
                  Changing the event set does not cause pending events for the object to be
                  discarded. Objects are automatically registered for the {@link StandardWatchEventKinds#OVERFLOW OVERFLOW} event. This event is not
                  required to be present in the array of events.
                  &lt;p&gt; Otherwise the file system object has not yet been registered with the
                  given watch service, so it is registered and the resulting new key is
                  returned.
                  &lt;p&gt; Implementations of this interface should specify the events they
                  support.                
                <param>
                    watcherthe watch service to which this object is to be registered                    
                </param>
                <param>
                    eventsthe events for which this object should be registered                    
                </param>
                <param>
                    modifiersthe modifiers, if any, that modify how the object is registered                    
                </param>
                <return>
                    a key representing the registration of this object with the
                      given watch service                    
                </return>
                <throws>
                    UnsupportedOperationExceptionif unsupported events or modifiers are specified                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif an invalid of combination of events are modifiers are specified                    
                </throws>
                <throws>
                    ClosedWatchServiceExceptionif the watch service is closed                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager is installed and it denies an unspecified
                      permission required to monitor this object. Implementations of
                      this interface should specify the permission checks.                    
                </throws>
            </javadoc>
            <method name="register" type="WatchKey" line="95"/>
            <javadoc line="95">
                Registers an object with a watch service.
                  &lt;p&gt; An invocation of this method behaves in exactly the same way as the
                  invocation
                  &lt;pre&gt;
                  watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);
                  &lt;/pre&gt;                
                <param>
                    watcherthe watch service to which this object is to be registered                    
                </param>
                <param>
                    eventsthe events for which this object should be registered                    
                </param>
                <return>
                    a key representing the registration of this object with the
                      given watch service                    
                </return>
                <throws>
                    UnsupportedOperationExceptionif unsupported events are specified                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif an invalid of combination of events are specified                    
                </throws>
                <throws>
                    ClosedWatchServiceExceptionif the watch service is closed                    
                </throws>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager is installed and it denies an unspecified
                      permission required to monitor this object. Implementations of
                      this interface should specify the permission checks.                    
                </throws>
            </javadoc>
        </interface>
    </source>