<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.util.Calendar"/>
        <import package="java.util.GregorianCalendar"/>
        <import package="java.util.Date"/>
        <import package="java.util.Formatter"/>
        <import package="java.util.Locale"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <class name="FileTime" line="36">
            <implements interface="Comparable">
                <type_params>
                    <type_param name="FileTime"/>
                </type_params>
            </implements>
            <javadoc line="36">
                Represents the value of a file&apos;s time stamp attribute. For example, it may
                  represent the time that the file was last{@link BasicFileAttributes#lastModifiedTime() modified},{@link BasicFileAttributes#lastAccessTime() accessed},
                  or {@link BasicFileAttributes#creationTime() created}.
                  &lt;p&gt; Instances of this class are immutable.                
                <since>
                    1.7                    
                </since>
                <see>
                    java.nio.file.Files#setLastModifiedTime                    
                </see>
                <see>
                    java.nio.file.Files#getLastModifiedTime                    
                </see>
            </javadoc>
            <declaration name="value" type="long" line="53"/>
            <javadoc line="53">
                The value since the epoch; can be negative.                
            </javadoc>
            <declaration name="unit" type="TimeUnit" line="58"/>
            <javadoc line="58">
                The unit of granularity to interpret the value.                
            </javadoc>
            <declaration name="valueAsString" type="String" line="63"/>
            <javadoc line="63">
                The value return by toString (created lazily)                
            </javadoc>
            <declaration name="daysAndNanos" type="DaysAndNanos" line="68"/>
            <javadoc line="68">
                The value in days and excess nanos (created lazily)                
            </javadoc>
            <javadoc line="73">
                Returns a DaysAndNanos object representing the value.                
            </javadoc>
            <method name="asDaysAndNanos" type="DaysAndNanos" line="76"/>
            <javadoc line="82">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="FileTime" type="constructor" line="85">
                <params>
                    <param name="value" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="92">
                Returns a {@code FileTime} representing a value at the given unit of
                  granularity.                
                <param>
                    valuethe value since the epoch (1970-01-01T00:00:00Z); can be
                      negative                    
                </param>
                <param>
                    unitthe unit of granularity to interpret the value                    
                </param>
                <return>
                    a {@code FileTime} representing the given value                    
                </return>
            </javadoc>
            <method name="from" type="FileTime" line="104">
                <params>
                    <param name="value" type="long"/>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="108">
                Returns a {@code FileTime} representing the given value in milliseconds.                
                <param>
                    valuethe value, in milliseconds, since the epoch
                      (1970-01-01T00:00:00Z); can be negative                    
                </param>
                <return>
                    a {@code FileTime} representing the given value                    
                </return>
            </javadoc>
            <method name="fromMillis" type="FileTime" line="117">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="121">
                Returns the value at the given unit of granularity.
                  &lt;p&gt; Conversion from a coarser granularity that would numerically overflow
                  saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}if positive.                
                <param>
                    unitthe unit of granularity for the return value                    
                </param>
                <return>
                    value in the given unit of granularity, since the epoch
                      since the epoch (1970-01-01T00:00:00Z); can be negative                    
                </return>
            </javadoc>
            <method name="to" type="long" line="134">
                <params>
                    <param name="unit" type="TimeUnit"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the value in milliseconds.
                  &lt;p&gt; Conversion from a coarser granularity that would numerically overflow
                  saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}if positive.                
                <return>
                    the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)                    
                </return>
            </javadoc>
            <method name="toMillis" type="long" line="147"/>
            <javadoc line="151">
                Tests this {@code FileTime} for equality with the given object.
                  &lt;p&gt; The result is {@code true} if and only if the argument is not {@codenull} and is a {@code FileTime} that represents the same time. This
                  method satisfies the general contract of the {@code Object.equals} method.                
                <param>
                    objthe object to compare with                    
                </param>
                <return>
                    {@code true} if, and only if, the given object is a {@codeFileTime} that represents the same time                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="165">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="169">
                Computes a hash code for this file time.
                  &lt;p&gt; The hash code is based upon the value represented, and satisfies the
                  general contract of the {@link Object#hashCode} method.                
                <return>
                    the hash-code value                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="178">
                <comment line="179">
                    hashcode of days/nanos representation to satisfy contract with equals                    
                </comment>
            </method>
            <javadoc line="183">
                Compares the value of two {@code FileTime} objects for order.                
                <param>
                    otherthe other {@code FileTime} to be compared                    
                </param>
                <return>
                    {@code 0} if this {@code FileTime} is equal to {@code other}, a
                      value less than 0 if this {@code FileTime} represents a time
                      that is before {@code other}, and a value greater than 0 if this{@code FileTime} represents a time that is after {@code other}                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="195">
                <params>
                    <param name="other" type="FileTime"/>
                </params>
                <comment line="196">
                    same granularity                    
                </comment>
                <comment line="200">
                    compare using days/nanos representation when unit differs                    
                </comment>
                <scope line="197"/>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                Returns the string representation of this {@code FileTime}. The string
                  is returned in the &lt;a
                  href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO&amp;nbsp;8601&lt;/a&gt; format:
                  &lt;pre&gt;
                  YYYY-MM-DDThh:mm:ss[.s+]Z
                  &lt;/pre&gt;
                  where &quot;{@code [.s+]}&quot; represents a dot followed by one of more digits
                  for the decimal fraction of a second. It is only present when the decimal
                  fraction of a second is not zero. For example, {@codeFileTime.fromMillis(1234567890000L).toString()} yields {@code&quot;2009-02-13T23:31:30Z&quot;}, and {@code FileTime.fromMillis(1234567890123L).toString()}yields {@code &quot;2009-02-13T23:31:30.123Z&quot;}.
                  &lt;p&gt; A {@code FileTime} is primarily intended to represent the value of a
                  file&apos;s time stamp. Where used to represent &lt;i&gt;extreme values&lt;/i&gt;, where
                  the year is less than &quot;{@code 0001}&quot; or greater than &quot;{@code 9999}&quot; then
                  this method deviates from ISO 8601 in the same manner as the
                  &lt;a href=&quot;http://www.w3.org/TR/xmlschema-2/#deviantformats&quot;&gt;XML Schema
                  language&lt;/a&gt;. That is, the year may be expanded to more than four digits
                  and may be negative-signed. If more than four digits then leading zeros
                  are not present. The year before &quot;{@code 0001}&quot; is &quot;{@code -0001}&quot;.                
                <return>
                    the string representation of this file time                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="231">
                <comment line="234">
                    overflow saturates to Long.MIN_VALUE or Long.MAX_VALUE so this                    
                </comment>
                <comment line="235">
                    limits the range:                    
                </comment>
                <comment line="236">
                    [-292275056-05-16T16:47:04.192Z,292278994-08-17T07:12:55.807Z]                    
                </comment>
                <comment line="239">
                    nothing to do when seconds/minutes/hours/days                    
                </comment>
                <comment line="244">
                    fraction must be positive                    
                </comment>
                <comment line="251">
                    convert to String, adding leading zeros as required and                    
                </comment>
                <comment line="252">
                    stripping any trailing zeros                    
                </comment>
                <comment line="261">
                    drop trailing zeros                    
                </comment>
                <comment line="273">
                    create calendar to use with formatter.                    
                </comment>
                <comment line="280">
                    years are negative before common era                    
                </comment>
                <comment line="283">
                    [-]YYYY-MM-DDThh:mm:ss[.s]Z                    
                </comment>
                <declaration name="v" type="String" line="232"/>
                <scope line="233">
                    <declaration name="ms" type="long" line="237"/>
                    <declaration name="fractionAsString" type="String" line="240"/>
                    <scope line="241">
                        <declaration name="fraction" type="long" line="242"/>
                        <scope line="243">
                            <scope line="245">
                                <declaration name="MAX_FRACTION_PLUS_1" type="long" line="246"/>
                            </scope>
                            <declaration name="s" type="String" line="253"/>
                            <declaration name="len" type="int" line="254"/>
                            <declaration name="width" type="int" line="255"/>
                            <declaration name="sb" type="StringBuilder" line="256"/>
                            <scope line="257"/>
                            <scope line="260"/>
                            <scope line="266"/>
                        </scope>
                    </scope>
                    <declaration name="cal" type="GregorianCalendar" line="274"/>
                    <declaration name="sign" type="String" line="281"/>
                </scope>
            </method>
            <class name="DaysAndNanos" line="292">
                <comment line="299">
                    constants for conversion                    
                </comment>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="DaysAndNanos"/>
                    </type_params>
                </implements>
                <javadoc line="292">
                    Represents a FileTime&apos;s value as two longs: the number of days since
                      the epoch, and the excess (in nanoseconds). This is used for comparing
                      values with different units of granularity.                    
                </javadoc>
                <declaration name="C0" type="long" line="299"/>
                <declaration name="C1" type="long" line="300"/>
                <declaration name="C2" type="long" line="301"/>
                <declaration name="C3" type="long" line="302"/>
                <declaration name="C4" type="long" line="303"/>
                <declaration name="C5" type="long" line="304"/>
                <declaration name="C6" type="long" line="305"/>
                <declaration name="days" type="long" line="307"/>
                <javadoc line="307">
                    The value (in days) since the epoch; can be negative.                    
                </javadoc>
                <declaration name="excessNanos" type="long" line="312"/>
                <javadoc line="312">
                    The excess (in nanoseconds); can be negative if days &lt;= 0.                    
                </javadoc>
                <javadoc line="317">
                    Initializes a new instance of this class.                    
                </javadoc>
                <method name="DaysAndNanos" type="constructor" line="320">
                    <params>
                        <param name="value" type="long"/>
                        <param name="unit" type="TimeUnit"/>
                    </params>
                    <declaration name="scale" type="long" line="321"/>
                </method>
                <javadoc line="336">
                    Returns the fraction of a second, in nanoseconds.                    
                </javadoc>
                <method name="fractionOfSecondInNanos" type="long" line="339"/>
                <method name="equals" type="boolean" line="344">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="350"/>
                <method name="compareTo" type="int" line="356">
                    <params>
                        <param name="other" type="DaysAndNanos"/>
                    </params>
                </method>
            </class>
        </class>
    </source>