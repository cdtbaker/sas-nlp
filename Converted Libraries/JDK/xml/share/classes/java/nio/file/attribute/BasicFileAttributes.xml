<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <interface name="BasicFileAttributes">
            <javadoc line="28">
                Basic attributes associated with a file in a file system.
                  &lt;p&gt; Basic file attributes are attributes that are common to many file systems
                  and consist of mandatory and optional file attributes as defined by this
                  interface.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  &lt;pre&gt;
                  Path file = ...
                  BasicFileAttributes attrs = Files.readAttributes(file, BasicFileAttributes.class);
                  &lt;/pre&gt;                
                <since>
                    1.7                    
                </since>
                <see>
                    BasicFileAttributeView                    
                </see>
            </javadoc>
            <method name="lastModifiedTime" type="FileTime" line="48"/>
            <javadoc line="48">
                Returns the time of last modification.
                  &lt;p&gt; If the file system implementation does not support a time stamp
                  to indicate the time of last modification then this method returns an
                  implementation specific default value, typically a {@code FileTime}representing the epoch (1970-01-01T00:00:00Z).                
                <return>
                    a {@code FileTime} representing the time the file was last
                      modified                    
                </return>
            </javadoc>
            <method name="lastAccessTime" type="FileTime" line="61"/>
            <javadoc line="61">
                Returns the time of last access.
                  &lt;p&gt; If the file system implementation does not support a time stamp
                  to indicate the time of last access then this method returns
                  an implementation specific default value, typically the {@link #lastModifiedTime() last-modified-time} or a {@code FileTime}representing the epoch (1970-01-01T00:00:00Z).                
                <return>
                    a {@code FileTime} representing the time of last access                    
                </return>
            </javadoc>
            <method name="creationTime" type="FileTime" line="74"/>
            <javadoc line="74">
                Returns the creation time. The creation time is the time that the file
                  was created.
                  &lt;p&gt; If the file system implementation does not support a time stamp
                  to indicate the time when the file was created then this method returns
                  an implementation specific default value, typically the {@link #lastModifiedTime() last-modified-time} or a {@code FileTime}representing the epoch (1970-01-01T00:00:00Z).                
                <return>
                    a {@code FileTime} representing the time the file was created                    
                </return>
            </javadoc>
            <method name="isRegularFile" type="boolean" line="88"/>
            <javadoc line="88">
                Tells whether the file is a regular file with opaque content.                
            </javadoc>
            <method name="isDirectory" type="boolean" line="93"/>
            <javadoc line="93">
                Tells whether the file is a directory.                
            </javadoc>
            <method name="isSymbolicLink" type="boolean" line="98"/>
            <javadoc line="98">
                Tells whether the file is a symbolic link.                
            </javadoc>
            <method name="isOther" type="boolean" line="103"/>
            <javadoc line="103">
                Tells whether the file is something other than a regular file, directory,
                  or symbolic link.                
            </javadoc>
            <method name="size" type="long" line="109"/>
            <javadoc line="109">
                Returns the size of the file (in bytes). The size may differ from the
                  actual size on the file system due to compression, support for sparse
                  files, or other reasons. The size of files that are not {@link #isRegularFile regular} files is implementation specific and
                  therefore unspecified.                
                <return>
                    the file size, in bytes                    
                </return>
            </javadoc>
            <method name="fileKey" type="Object" line="120"/>
            <javadoc line="120">
                Returns an object that uniquely identifies the given file, or {@codenull} if a file key is not available. On some platforms or file systems
                  it is possible to use an identifier, or a combination of identifiers to
                  uniquely identify a file. Such identifiers are important for operations
                  such as file tree traversal in file systems that support &lt;a
                  href=&quot;../package-summary.html#links&quot;&gt;symbolic links&lt;/a&gt; or file systems
                  that allow a file to be an entry in more than one directory. On UNIX file
                  systems, for example, the &lt;em&gt;device ID&lt;/em&gt; and &lt;em&gt;inode&lt;/em&gt; are
                  commonly used for such purposes.
                  &lt;p&gt; The file key returned by this method can only be guaranteed to be
                  unique if the file system and files remain static. Whether a file system
                  re-uses identifiers after a file is deleted is implementation dependent and
                  therefore unspecified.
                  &lt;p&gt; File keys returned by this method can be compared for equality and are
                  suitable for use in collections. If the file system and files remain static,
                  and two files are the {@link java.nio.file.Files#isSameFile same} with
                  non-{@code null} file keys, then their file keys are equal.                
                <see>
                    java.nio.file.Files#walkFileTree                    
                </see>
            </javadoc>
        </interface>
    </source>