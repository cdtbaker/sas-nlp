<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.io.IOException"/>
        <interface name="DosFileAttributeView">
            <implements interface="BasicFileAttributeView"/>
            <javadoc line="30">
                A file attribute view that provides a view of the legacy &quot;DOS&quot; file attributes.
                  These attributes are supported by file systems such as the File Allocation
                  Table (FAT) format commonly used in &lt;em&gt;consumer devices&lt;/em&gt;.
                  &lt;p&gt; A {@code DosFileAttributeView} is a {@link BasicFileAttributeView} that
                  additionally supports access to the set of DOS attribute flags that are used
                  to indicate if the file is read-only, hidden, a system file, or archived.
                  &lt;p&gt; Where dynamic access to file attributes is required, the attributes
                  supported by this attribute view are as defined by {@codeBasicFileAttributeView}, and in addition, the following attributes are
                  supported:
                  &lt;blockquote&gt;
                  &lt;table border=&quot;1&quot; cellpadding=&quot;8&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt; Name &lt;/th&gt;
                  &lt;th&gt; Type &lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; readonly &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; hidden &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; system &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; archive &lt;/td&gt;
                  &lt;td&gt; {@link Boolean} &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt; The {@link java.nio.file.Files#getAttribute getAttribute} method may
                  be used to read any of these attributes, or any of the attributes defined by{@link BasicFileAttributeView} as if by invoking the {@link #readAttributesreadAttributes()} method.
                  &lt;p&gt; The {@link java.nio.file.Files#setAttribute setAttribute} method may
                  be used to update the file&apos;s last modified time, last access time or create
                  time attributes as defined by {@link BasicFileAttributeView}. It may also be
                  used to update the DOS attributes as if by invoking the {@link #setReadOnlysetReadOnly}, {@link #setHidden setHidden}, {@link #setSystem setSystem}, and{@link #setArchive setArchive} methods respectively.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="name" type="String" line="86"/>
            <javadoc line="86">
                Returns the name of the attribute view. Attribute views of this type
                  have the name {@code &quot;dos&quot;}.                
            </javadoc>
            <method name="readAttributes" type="DosFileAttributes" line="93"/>
            <javadoc line="93">
                @throws IOException                             {@inheritDoc}                
                <throws>
                    SecurityException                       {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="setReadOnly" type="void" line="100"/>
            <javadoc line="100">
                Updates the value of the read-only attribute.
                  &lt;p&gt; It is implementation specific if the attribute can be updated as an
                  atomic operation with respect to other file system operations. An
                  implementation may, for example, require to read the existing value of
                  the DOS attribute in order to update this attribute.                
                <param>
                    valuethe new value of the attribute                    
                </param>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default, and a security manager is installed,
                      its  {@link SecurityManager#checkWrite(String) checkWrite} method
                      is invoked to check write access to the file                    
                </throws>
            </javadoc>
            <method name="setHidden" type="void" line="120"/>
            <javadoc line="120">
                Updates the value of the hidden attribute.
                  &lt;p&gt; It is implementation specific if the attribute can be updated as an
                  atomic operation with respect to other file system operations. An
                  implementation may, for example, require to read the existing value of
                  the DOS attribute in order to update this attribute.                
                <param>
                    valuethe new value of the attribute                    
                </param>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default, and a security manager is installed,
                      its  {@link SecurityManager#checkWrite(String) checkWrite} method
                      is invoked to check write access to the file                    
                </throws>
            </javadoc>
            <method name="setSystem" type="void" line="140"/>
            <javadoc line="140">
                Updates the value of the system attribute.
                  &lt;p&gt; It is implementation specific if the attribute can be updated as an
                  atomic operation with respect to other file system operations. An
                  implementation may, for example, require to read the existing value of
                  the DOS attribute in order to update this attribute.                
                <param>
                    valuethe new value of the attribute                    
                </param>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default, and a security manager is installed,
                      its  {@link SecurityManager#checkWrite(String) checkWrite} method
                      is invoked to check write access to the file                    
                </throws>
            </javadoc>
            <method name="setArchive" type="void" line="160"/>
            <javadoc line="160">
                Updates the value of the archive attribute.
                  &lt;p&gt; It is implementation specific if the attribute can be updated as an
                  atomic operation with respect to other file system operations. An
                  implementation may, for example, require to read the existing value of
                  the DOS attribute in order to update this attribute.                
                <param>
                    valuethe new value of the attribute                    
                </param>
                <throws>
                    IOExceptionif an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default, and a security manager is installed,
                      its  {@link SecurityManager#checkWrite(String) checkWrite} method
                      is invoked to check write access to the file                    
                </throws>
            </javadoc>
        </interface>
    </source>