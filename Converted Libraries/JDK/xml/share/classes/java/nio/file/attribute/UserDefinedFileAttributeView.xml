<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.util.List"/>
        <import package="java.io.IOException"/>
        <interface name="UserDefinedFileAttributeView">
            <implements interface="FileAttributeView"/>
            <javadoc line="5">
                A file attribute view that provides a view of a file&apos;s user-defined
                  attributes, sometimes known as &lt;em&gt;extended attributes&lt;/em&gt;. User-defined
                  file attributes are used to store metadata with a file that is not meaningful
                  to the file system. It is primarily intended for file system implementations
                  that support such a capability directly but may be emulated. The details of
                  such emulation are highly implementation specific and therefore not specified.
                  &lt;p&gt; This {@code FileAttributeView} provides a view of a file&apos;s user-defined
                  attributes as a set of name/value pairs, where the attribute name is
                  represented by a {@code String}. An implementation may require to encode and
                  decode from the platform or file system representation when accessing the
                  attribute. The value has opaque content. This attribute view defines the{@link #read read} and {@link #write write} methods to read the value into
                  or write from a {@link ByteBuffer}. This {@code FileAttributeView} is not
                  intended for use where the size of an attribute value is larger than {@link Integer#MAX_VALUE}.
                  &lt;p&gt; User-defined attributes may be used in some implementations to store
                  security related attributes so consequently, in the case of the default
                  provider at least, all methods that access user-defined attributes require the{@code RuntimePermission(&quot;accessUserDefinedAttributes&quot;)} permission when a
                  security manager is installed.
                  &lt;p&gt; The {@link java.nio.file.FileStore#supportsFileAttributeViewsupportsFileAttributeView} method may be used to test if a specific {@link java.nio.file.FileStore FileStore} supports the storage of user-defined
                  attributes.
                  &lt;p&gt; Where dynamic access to file attributes is required, the {@link java.nio.file.Files#getAttribute getAttribute} method may be used to read
                  the attribute value. The attribute value is returned as a byte array (byte[]).
                  The {@link java.nio.file.Files#setAttribute setAttribute} method may be used
                  to write the value of a user-defined attribute from a buffer (as if by
                  invoking the {@link #write write} method), or byte array (byte[]).                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="name" type="String" line="33"/>
            <javadoc line="33">
                Returns the name of this attribute view. Attribute views of this type
                  have the name {@code &quot;user&quot;}.                
            </javadoc>
            <method name="list" type="List&lt;String&gt;" line="38"/>
            <javadoc line="38">
                Returns a list containing the names of the user-defined attributes.                
                <return>
                    An unmodifiable list continaing the names of the file&apos;s
                      user-defined                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, and it denies {@link RuntimePermission}&lt;tt&gt;(&quot;accessUserDefinedAttributes&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkRead(String) checkRead} method
                      denies read access to the file.                    
                </throws>
            </javadoc>
            <method name="size" type="int" line="49"/>
            <javadoc line="49">
                Returns the size of the value of a user-defined attribute.                
                <param>
                    nameThe attribute name                    
                </param>
                <return>
                    The size of the attribute value, in bytes.                    
                </return>
                <throws>
                    ArithmeticExceptionIf the size of the attribute is larger than {@link Integer#MAX_VALUE}                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, and it denies {@link RuntimePermission}&lt;tt&gt;(&quot;accessUserDefinedAttributes&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkRead(String) checkRead} method
                      denies read access to the file.                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="61"/>
            <javadoc line="61">
                Read the value of a user-defined attribute into a buffer.
                  &lt;p&gt; This method reads the value of the attribute into the given buffer
                  as a sequence of bytes, failing if the number of bytes remaining in
                  the buffer is insufficient to read the complete attribute value. The
                  number of bytes transferred into the buffer is {@code n}, where {@code n}is the size of the attribute value. The first byte in the sequence is at
                  index {@code p} and the last byte is at index {@code p + n - 1}, where{@code p} is the buffer&apos;s position. Upon return the buffer&apos;s position
                  will be equal to {@code p + n}; its limit will not have changed.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  Suppose we want to read a file&apos;s MIME type that is stored as a user-defined
                  attribute with the name &quot;{@code user.mimetype}&quot;.
                  &lt;pre&gt;
                  UserDefinedFileAttributeView view =
                  Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);
                  String name = &quot;user.mimetype&quot;;
                  ByteBuffer buf = ByteBuffer.allocate(view.size(name));
                  view.read(name, buf);
                  buf.flip();
                  String value = Charset.defaultCharset().decode(buf).toString();
                  &lt;/pre&gt;                
                <param>
                    nameThe attribute name                    
                </param>
                <param>
                    dstThe destination buffer                    
                </param>
                <return>
                    The number of bytes read, possibly zero                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the destination buffer is read-only                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs or there is insufficient space in the
                      destination buffer for the attribute value                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, and it denies {@link RuntimePermission}&lt;tt&gt;(&quot;accessUserDefinedAttributes&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkRead(String) checkRead} method
                      denies read access to the file.                    
                </throws>
                <see>
                    #size                    
                </see>
            </javadoc>
            <method name="write" type="int" line="94"/>
            <javadoc line="94">
                Writes the value of a user-defined attribute from a buffer.
                  &lt;p&gt; This method writes the value of the attribute from a given buffer as
                  a sequence of bytes. The size of the value to transfer is {@code r},
                  where {@code r} is the number of bytes remaining in the buffer, that is{@code src.remaining()}. The sequence of bytes is transferred from the
                  buffer starting at index {@code p}, where {@code p} is the buffer&apos;s
                  position. Upon return, the buffer&apos;s position will be equal to {@codep + n}, where {@code n} is the number of bytes transferred; its limit
                  will not have changed.
                  &lt;p&gt; If an attribute of the given name already exists then its value is
                  replaced. If the attribute does not exist then it is created. If it
                  implementation specific if a test to check for the existence of the
                  attribute and the creation of attribute are atomic with repect to other
                  file system activities.
                  &lt;p&gt; Where there is insufficient space to store the attribute, or the
                  attribute name or value exceed an implementation specific maximum size
                  then an {@code IOException} is thrown.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  Suppose we want to write a file&apos;s MIME type as a user-defined attribute:
                  &lt;pre&gt;
                  UserDefinedFileAttributeView view =
                  FIles.getFileAttributeView(path, UserDefinedFileAttributeView.class);
                  view.write(&quot;user.mimetype&quot;, Charset.defaultCharset().encode(&quot;text/html&quot;));
                  &lt;/pre&gt;                
                <param>
                    nameThe attribute name                    
                </param>
                <param>
                    srcThe buffer containing the attribute value                    
                </param>
                <return>
                    The number of bytes written, possibly zero                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, and it denies {@link RuntimePermission}&lt;tt&gt;(&quot;accessUserDefinedAttributes&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the file.                    
                </throws>
            </javadoc>
            <method name="delete" type="void" line="126"/>
            <javadoc line="126">
                Deletes a user-defined attribute.                
                <param>
                    nameThe attribute name                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs or the attribute does not exist                    
                </throws>
                <throws>
                    SecurityExceptionIn the case of the default provider, a security manager is
                      installed, and it denies {@link RuntimePermission}&lt;tt&gt;(&quot;accessUserDefinedAttributes&quot;)&lt;/tt&gt;
                      or its {@link SecurityManager#checkWrite(String) checkWrite}method denies write access to the file.                    
                </throws>
            </javadoc>
        </interface>
    </source>