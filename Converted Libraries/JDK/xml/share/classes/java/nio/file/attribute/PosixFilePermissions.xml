<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.file.attribute">
        <import package="java.nio.file.attribute.PosixFilePermission"/>
        <import package="java.util"/>
        <class name="PosixFilePermissions" line="31">
            <comment line="42">
                Write string representation of permission bits to {@code sb}.                
            </comment>
            <javadoc line="31">
                This class consists exclusively of static methods that operate on sets of{@link PosixFilePermission} objects.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="PosixFilePermissions" type="constructor" line="39"/>
            <method name="writeBits" type="void" line="42">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="r" type="boolean"/>
                    <param name="w" type="boolean"/>
                    <param name="x" type="boolean"/>
                </params>
                <scope line="43"/>
                <scope line="45"/>
                <scope line="48"/>
                <scope line="50"/>
                <scope line="53"/>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Returns the {@code String} representation of a set of permissions. It
                  is guaranteed that the returned {@code String} can be parsed by the{@link #fromString} method.
                  &lt;p&gt; If the set contains {@code null} or elements that are not of type{@code PosixFilePermission} then these elements are ignored.                
                <param>
                    permsthe set of permissions                    
                </param>
                <return>
                    the string representation of the permission set                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="73">
                <params>
                    <param name="perms" type="Set<PosixFilePermission>"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="74"/>
            </method>
            <method name="isSet" type="boolean" line="84">
                <params>
                    <param name="c" type="char"/>
                    <param name="setValue" type="char"/>
                </params>
            </method>
            <method name="isR" type="boolean" line="91">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isW" type="boolean" line="92">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isX" type="boolean" line="93">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="95">
                Returns the set of permissions corresponding to a given {@code String}representation.
                  &lt;p&gt; The {@code perms} parameter is a {@code String} representing the
                  permissions. It has 9 characters that are interpreted as three sets of
                  three. The first set refers to the owner&apos;s permissions; the next to the
                  group permissions and the last to others. Within each set, the first
                  character is {@code &apos;r&apos;} to indicate permission to read, the second
                  character is {@code &apos;w&apos;} to indicate permission to write, and the third
                  character is {@code &apos;x&apos;} for execute permission. Where a permission is
                  not set then the corresponding character is set to {@code &apos;-&apos;}.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  Suppose we require the set of permissions that indicate the owner has read,
                  write, and execute permissions, the group has read and execute permissions
                  and others have none.
                  &lt;pre&gt;
                  Set&amp;lt;PosixFilePermission&amp;gt; perms = PosixFilePermissions.fromString(&quot;rwxr-x---&quot;);
                  &lt;/pre&gt;                
                <param>
                    permsstring representing a set of permissions                    
                </param>
                <return>
                    the resulting set of permissions                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the string cannot be converted to a set of permissions                    
                </throws>
                <see>
                    #toString(Set)                    
                </see>
            </javadoc>
            <method name="fromString" type="Set<PosixFilePermission>" line="126">
                <params>
                    <param name="perms" type="String"/>
                </params>
                <declaration name="result" type="Set&lt;PosixFilePermission&gt;" line="129"/>
            </method>
            <javadoc line="142">
                Creates a {@link FileAttribute}, encapsulating a copy of the given file
                  permissions, suitable for passing to the {@link java.nio.file.Files#createFilecreateFile} or {@link java.nio.file.Files#createDirectory createDirectory}methods.                
                <param>
                    permsthe set of permissions                    
                </param>
                <return>
                    an attribute encapsulating the given file permissions with{@link FileAttribute#name name} {@code "posix:permissions"}                    
                </return>
                <throws>
                    ClassCastExceptionif the set contains elements that are not of type {@codePosixFilePermission}                    
                </throws>
            </javadoc>
            <method name="asFileAttribute" type="FileAttribute<Set<PosixFilePermission>>" line="160">
                <params>
                    <param name="perms" type="Set<PosixFilePermission>"/>
                </params>
                <comment line="161">
                    copy set and check for nulls (CCE will be thrown if an element is not                    
                </comment>
                <comment line="162">
                    a PosixFilePermission)                    
                </comment>
                <scope line="164"/>
                <declaration name="value" type="Set&lt;PosixFilePermission&gt;" line="168"/>
                <anonymous_class line="169">
                    <method name="name" type="String" line="171"/>
                    <method name="value" type="Set<PosixFilePermission>" line="175"/>
                </anonymous_class>
            </method>
        </class>
    </source>