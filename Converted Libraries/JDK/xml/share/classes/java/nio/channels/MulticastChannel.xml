<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.net.InetAddress"/>
        <import package="java.net.NetworkInterface"/>
        <import package="java.io.IOException"/>
        <import package="java.net.ProtocolFamily"/>
        <import package="java.net.StandardProtocolFamily"/>
        <import package="java.net.StandardSocketOptions"/>
        <interface name="MulticastChannel">
            <implements interface="NetworkChannel"/>
            <javadoc line="35">
                A network channel that supports Internet Protocol (IP) multicasting.
                  &lt;p&gt; IP multicasting is the transmission of IP datagrams to members of
                  a &lt;em&gt;group&lt;/em&gt; that is zero or more hosts identified by a single destination
                  address.
                  &lt;p&gt; In the case of a channel to an {@link StandardProtocolFamily#INET IPv4} socket,
                  the underlying operating system supports &lt;a href=&quot;http://www.ietf.org/rfc/rfc2236.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;2236: Internet Group Management Protocol, Version 2 (IGMPv2)&lt;/i&gt;&lt;/a&gt;.
                  It may optionally support source filtering as specified by &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc3376.txt&quot;&gt; &lt;i&gt;RFC&amp;nbsp;3376: Internet Group
                  Management Protocol, Version 3 (IGMPv3)&lt;/i&gt;&lt;/a&gt;.
                  For channels to an {@link StandardProtocolFamily#INET6 IPv6} socket, the equivalent
                  standards are &lt;a href=&quot;http://www.ietf.org/rfc/rfc2710.txt&quot;&gt; &lt;i&gt;RFC&amp;nbsp;2710:
                  Multicast Listener Discovery (MLD) for IPv6&lt;/i&gt;&lt;/a&gt; and &lt;a
                  href=&quot;http://www.ietf.org/rfc/rfc3810.txt&quot;&gt; &lt;i&gt;RFC&amp;nbsp;3810: Multicast Listener
                  Discovery Version 2 (MLDv2) for IPv6&lt;/i&gt;&lt;/a&gt;.
                  &lt;p&gt; The {@link #join(InetAddress,NetworkInterface)} method is used to
                  join a group and receive all multicast datagrams sent to the group. A channel
                  may join several multicast groups and may join the same group on several{@link NetworkInterface interfaces}. Membership is dropped by invoking the {@link MembershipKey#drop drop} method on the returned {@link MembershipKey}. If the
                  underlying platform supports source filtering then the {@link MembershipKey#blockblock} and {@link MembershipKey#unblock unblock} methods can be used to block or
                  unblock multicast datagrams from particular source addresses.
                  &lt;p&gt; The {@link #join(InetAddress,NetworkInterface,InetAddress)} method
                  is used to begin receiving datagrams sent to a group whose source address matches
                  a given source address. This method throws {@link UnsupportedOperationException}if the underlying platform does not support source filtering.  Membership is
                  &lt;em&gt;cumulative&lt;/em&gt; and this method may be invoked again with the same group
                  and interface to allow receiving datagrams from other source addresses. The
                  method returns a {@link MembershipKey} that represents membership to receive
                  datagrams from the given source address. Invoking the key&apos;s {@link MembershipKey#drop drop} method drops membership so that datagrams from the
                  source address can no longer be received.
                  &lt;h4&gt;Platform dependencies&lt;/h4&gt;
                  The multicast implementation is intended to map directly to the native
                  multicasting facility. Consequently, the following items should be considered
                  when developing an application that receives IP multicast datagrams:
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; The creation of the channel should specify the {@link ProtocolFamily}that corresponds to the address type of the multicast groups that the channel
                  will join. There is no guarantee that a channel to a socket in one protocol
                  family can join and receive multicast datagrams when the address of the
                  multicast group corresponds to another protocol family. For example, it is
                  implementation specific if a channel to an {@link StandardProtocolFamily#INET6 IPv6}socket can join an {@link StandardProtocolFamily#INET IPv4} multicast group and receive
                  multicast datagrams sent to the group. &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; The channel&apos;s socket should be bound to the {@link InetAddress#isAnyLocalAddress wildcard} address. If the socket is bound to
                  a specific address, rather than the wildcard address then it is implementation
                  specific if multicast datagrams are received by the socket. &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; The {@link StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} option should be
                  enabled prior to {@link NetworkChannel#bind binding} the socket. This is
                  required to allow multiple members of the group to bind to the same
                  address. &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  &lt;pre&gt;
                  // join multicast group on this interface, and also use this
                  // interface for outgoing multicast datagrams
                  NetworkInterface ni = NetworkInterface.getByName(&quot;hme0&quot;);
                  DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)
                  .setOption(StandardSocketOptions.SO_REUSEADDR, true)
                  .bind(new InetSocketAddress(5000))
                  .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni);
                  InetAddress group = InetAddress.getByName(&quot;225.4.5.6&quot;);
                  MembershipKey key = dc.join(group, ni);
                  &lt;/pre&gt;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="close" type="void" line="125"/>
            <javadoc line="125">
                Closes this channel.
                  &lt;p&gt; If the channel is a member of a multicast group then the membership
                  is {@link MembershipKey#drop dropped}. Upon return, the {@link MembershipKey membership-key} will be {@link MembershipKey#isValidinvalid}.
                  &lt;p&gt; This method otherwise behaves exactly as specified by the {@link Channel} interface.                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="join" type="MembershipKey" line="141"/>
            <javadoc line="141">
                Joins a multicast group to begin receiving all datagrams sent to the group,
                  returning a membership key.
                  &lt;p&gt; If this channel is currently a member of the group on the given
                  interface to receive all datagrams then the membership key, representing
                  that membership, is returned. Otherwise this channel joins the group and
                  the resulting new membership key is returned. The resulting membership key
                  is not {@link MembershipKey#sourceAddress source-specific}.
                  &lt;p&gt; A multicast channel may join several multicast groups, including
                  the same group on more than one interface. An implementation may impose a
                  limit on the number of groups that may be joined at the same time.                
                <param>
                    groupThe multicast address to join                    
                </param>
                <param>
                    interfThe network interface on which to join the group                    
                </param>
                <return>
                    The membership key                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the group parameter is not a {@link InetAddress#isMulticastAddressmulticast} address, or the group parameter is an address type
                      that is not supported by this channel                    
                </throws>
                <throws>
                    IllegalStateExceptionIf the channel already has source-specific membership of the
                      group on the interface                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf the channel&apos;s socket is not an Internet Protocol socket                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is set, and its{@link SecurityManager#checkMulticast(InetAddress) checkMulticast}method denies access to the multiast group                    
                </throws>
            </javadoc>
            <method name="join" type="MembershipKey" line="183"/>
            <javadoc line="183">
                Joins a multicast group to begin receiving datagrams sent to the group
                  from a given source address.
                  &lt;p&gt; If this channel is currently a member of the group on the given
                  interface to receive datagrams from the given source address then the
                  membership key, representing that membership, is returned. Otherwise this
                  channel joins the group and the resulting new membership key is returned.
                  The resulting membership key is {@link MembershipKey#sourceAddresssource-specific}.
                  &lt;p&gt; Membership is &lt;em&gt;cumulative&lt;/em&gt; and this method may be invoked
                  again with the same group and interface to allow receiving datagrams sent
                  by other source addresses to the group.                
                <param>
                    groupThe multicast address to join                    
                </param>
                <param>
                    interfThe network interface on which to join the group                    
                </param>
                <param>
                    sourceThe source address                    
                </param>
                <return>
                    The membership key                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the group parameter is not a {@link InetAddress#isMulticastAddress multicast} address, the
                      source parameter is not a unicast address, the group
                      parameter is an address type that is not supported by this channel,
                      or the source parameter is not the same address type as the group                    
                </throws>
                <throws>
                    IllegalStateExceptionIf the channel is currently a member of the group on the given
                      interface to receive all datagrams                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf the channel&apos;s socket is not an Internet Protocol socket or
                      source filtering is not supported                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is set, and its{@link SecurityManager#checkMulticast(InetAddress) checkMulticast}method denies access to the multiast group                    
                </throws>
            </javadoc>
        </interface>
    </source>