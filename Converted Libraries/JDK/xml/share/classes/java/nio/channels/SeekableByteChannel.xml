<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.io.IOException"/>
        <interface name="SeekableByteChannel">
            <implements interface="ByteChannel"/>
            <javadoc line="31">
                A byte channel that maintains a current &lt;i&gt;position&lt;/i&gt; and allows the
                  position to be changed.
                  &lt;p&gt; A seekable byte channel is connected to an entity, typically a file,
                  that contains a variable-length sequence of bytes that can be read and
                  written. The current position can be {@link #position() &lt;i&gt;queried&lt;/i&gt;} and{@link #position(long) &lt;i&gt;modified&lt;/i&gt;}. The channel also provides access to
                  the current &lt;i&gt;size&lt;/i&gt; of the entity to which the channel is connected. The
                  size increases when bytes are written beyond its current size; the size
                  decreases when it is {@link #truncate &lt;i&gt;truncated&lt;/i&gt;}.
                  &lt;p&gt; The {@link #position(long) position} and {@link #truncate truncate} methods
                  which do not otherwise have a value to return are specified to return the
                  channel upon which they are invoked. This allows method invocations to be
                  chained. Implementations of this interface should specialize the return type
                  so that method invocations on the implementation class can be chained.                
                <since>
                    1.7                    
                </since>
                <see>
                    java.nio.file.Files#newByteChannel                    
                </see>
            </javadoc>
            <method name="read" type="int" line="56"/>
            <javadoc line="56">
                Reads a sequence of bytes from this channel into the given buffer.
                  &lt;p&gt; Bytes are read starting at this channel&apos;s current position, and
                  then the position is updated with the number of bytes actually read.
                  Otherwise this method behaves exactly as specified in the {@link ReadableByteChannel} interface.                
            </javadoc>
            <method name="write" type="int" line="67"/>
            <javadoc line="67">
                Writes a sequence of bytes to this channel from the given buffer.
                  &lt;p&gt; Bytes are written starting at this channel&apos;s current position, unless
                  the channel is connected to an entity such as a file that is opened with
                  the {@link java.nio.file.StandardOpenOption#APPEND APPEND} option, in
                  which case the position is first advanced to the end. The entity to which
                  the channel is connected is grown, if necessary, to accommodate the
                  written bytes, and then the position is updated with the number of bytes
                  actually written. Otherwise this method behaves exactly as specified by
                  the {@link WritableByteChannel} interface.                
            </javadoc>
            <method name="position" type="long" line="82"/>
            <javadoc line="82">
                Returns this channel&apos;s position.                
                <return>
                    This channel's position,
                      a non-negative integer counting the number of bytes
                      from the beginning of the entity to the current position                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="position" type="SeekableByteChannel" line="96"/>
            <javadoc line="96">
                Sets this channel&apos;s position.
                  &lt;p&gt; Setting the position to a value that is greater than the current size
                  is legal but does not change the size of the entity.  A later attempt to
                  read bytes at such a position will immediately return an end-of-file
                  indication.  A later attempt to write bytes at such a position will cause
                  the entity to grow to accommodate the new bytes; the values of any bytes
                  between the previous end-of-file and the newly-written bytes are
                  unspecified.
                  &lt;p&gt; Setting the channel&apos;s position is not recommended when connected to
                  an entity, typically a file, that is opened with the {@link java.nio.file.StandardOpenOption#APPEND APPEND} option. When opened for
                  append, the position is first advanced to the end before writing.                
                <param>
                    newPositionThe new position, a non-negative integer counting
                      the number of bytes from the beginning of the entity                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the new position is negative                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="size" type="long" line="127"/>
            <javadoc line="127">
                Returns the current size of entity to which this channel is connected.                
                <return>
                    The current size, measured in bytes                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="truncate" type="SeekableByteChannel" line="139"/>
            <javadoc line="139">
                Truncates the entity, to which this channel is connected, to the given
                  size.
                  &lt;p&gt; If the given size is less than the current size then the entity is
                  truncated, discarding any bytes beyond the new end. If the given size is
                  greater than or equal to the current size then the entity is not modified.
                  In either case, if the current position is greater than the given size
                  then it is set to that size.
                  &lt;p&gt; An implementation of this interface may prohibit truncation when
                  connected to an entity, typically a file, opened with the {@link java.nio.file.StandardOpenOption#APPEND APPEND} option.                
                <param>
                    sizeThe new size, a non-negative byte count                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    NonWritableChannelExceptionIf this channel was not opened for writing                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the new size is negative                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>