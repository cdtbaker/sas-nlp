<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.spi"/>
        <class name="Pipe" line="32">
            <javadoc line="32">
                A pair of channels that implements a unidirectional pipe.
                  &lt;p&gt; A pipe consists of a pair of channels: A writable {@link Pipe.SinkChannel &lt;/code&gt;sink&lt;code&gt;} channel and a readable {@link Pipe.SourceChannel &lt;/code&gt;source&lt;code&gt;} channel.  Once some bytes are
                  written to the sink channel they can be read from source channel in exactly
                  the order in which they were written.
                  &lt;p&gt; Whether or not a thread writing bytes to a pipe will block until another
                  thread reads those bytes, or some previously-written bytes, from the pipe is
                  system-dependent and therefore unspecified.  Many pipe implementations will
                  buffer up to a certain number of bytes between the sink and source channels,
                  but such buffering should not be assumed.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <class name="SourceChannel" line="55">
                <extends class="AbstractSelectableChannel"/>
                <implements interface="ReadableByteChannel"/>
                <implements interface="ScatteringByteChannel"/>
                <javadoc line="55">
                    A channel representing the readable end of a {@link Pipe}.  &lt;/p&gt;                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <javadoc line="64">
                    Constructs a new instance of this class.                    
                </javadoc>
                <method name="SourceChannel" type="constructor" line="67">
                    <params>
                        <param name="provider" type="SelectorProvider"/>
                    </params>
                </method>
                <javadoc line="71">
                    Returns an operation set identifying this channel&apos;s supported
                      operations.
                      &lt;p&gt; Pipe-source channels only support reading, so this method
                      returns {@link SelectionKey#OP_READ}.  &lt;/p&gt;                    
                    <return>
                        The valid-operation set                        
                    </return>
                </javadoc>
                <method name="validOps" type="int" line="80"/>
            </class>
            <class name="SinkChannel" line="86">
                <extends class="AbstractSelectableChannel"/>
                <implements interface="WritableByteChannel"/>
                <implements interface="GatheringByteChannel"/>
                <javadoc line="86">
                    A channel representing the writable end of a {@link Pipe}.  &lt;/p&gt;                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <javadoc line="95">
                    Initializes a new instance of this class.                    
                </javadoc>
                <method name="SinkChannel" type="constructor" line="98">
                    <params>
                        <param name="provider" type="SelectorProvider"/>
                    </params>
                </method>
                <javadoc line="102">
                    Returns an operation set identifying this channel&apos;s supported
                      operations.
                      &lt;p&gt; Pipe-sink channels only support writing, so this method returns{@link SelectionKey#OP_WRITE}.  &lt;/p&gt;                    
                    <return>
                        The valid-operation set                        
                    </return>
                </javadoc>
                <method name="validOps" type="int" line="111"/>
            </class>
            <javadoc line="117">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="Pipe" type="constructor" line="120"/>
            <method name="source" type="SourceChannel" line="122"/>
            <javadoc line="122">
                Returns this pipe&apos;s source channel.  &lt;/p&gt;                
                <return>
                    This pipe&apos;s source channel                    
                </return>
            </javadoc>
            <method name="sink" type="SinkChannel" line="129"/>
            <javadoc line="129">
                Returns this pipe&apos;s sink channel.  &lt;/p&gt;                
                <return>
                    This pipe&apos;s sink channel                    
                </return>
            </javadoc>
            <javadoc line="136">
                Opens a pipe.
                  &lt;p&gt; The new pipe is created by invoking the {@link java.nio.channels.spi.SelectorProvider#openPipe openPipe} method of the
                  system-wide default {@link java.nio.channels.spi.SelectorProvider}object.  &lt;/p&gt;                
                <return>
                    A new pipe                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="Pipe" line="149"/>
        </class>
    </source>