<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.net.SocketOption"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.nio.channels.spi.AbstractSelectableChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <class name="ServerSocketChannel" line="8">
            <extends class="AbstractSelectableChannel"/>
            <implements interface="NetworkChannel"/>
            <javadoc line="8">
                A selectable channel for stream-oriented listening sockets.
                  &lt;p&gt; A server-socket channel is created by invoking the {@link #open() open}method of this class.  It is not possible to create a channel for an arbitrary,
                  pre-existing {@link ServerSocket}. A newly-created server-socket channel is
                  open but not yet bound.  An attempt to invoke the {@link #accept() accept}method of an unbound server-socket channel will cause a {@link NotYetBoundException}to be thrown. A server-socket channel can be bound by invoking one of the{@link #bind(java.net.SocketAddress,int) bind} methods defined by this class.
                  &lt;p&gt; Socket options are configured using the {@link #setOption(SocketOption,Object)setOption} method. Server-socket channels support the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} &lt;/td&gt;
                  &lt;td&gt; Re-use address &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported.
                  &lt;p&gt; Server-socket channels are safe for use by multiple concurrent threads.
                  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="38">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="ServerSocketChannel" type="constructor" line="41">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="44">
                Opens a server-socket channel.
                  &lt;p&gt; The new channel is created by invoking the {@link java.nio.channels.spi.SelectorProvider#openServerSocketChannelopenServerSocketChannel} method of the system-wide default {@link java.nio.channels.spi.SelectorProvider} object.
                  &lt;p&gt; The new channel&apos;s socket is initially unbound; it must be bound to a
                  specific address via one of its socket&apos;s {@link java.net.ServerSocket#bind(SocketAddress) bind} methods before
                  connections can be accepted.  &lt;/p&gt;                
                <return>
                    A new socket channel                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="ServerSocketChannel" line="53"/>
            <javadoc line="56">
                Returns an operation set identifying this channel&apos;s supported
                  operations.
                  &lt;p&gt; Server-socket channels only support the accepting of new
                  connections, so this method returns {@link SelectionKey#OP_ACCEPT}.
                  &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="64"/>
            <javadoc line="67">
                Binds the channel&apos;s socket to a local address and configures the socket
                  to listen for connections.
                  &lt;p&gt; An invocation of this method is equivalent to the following:
                  &lt;blockquote&gt;&lt;pre&gt;
                  bind(local, 0);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    localThe local address to bind the socket, or {@code null} to bind
                      to an automatically assigned socket address                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    AlreadyBoundException               {@inheritDoc}                    
                </throws>
                <throws>
                    UnsupportedAddressTypeException     {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException              {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                         {@inheritDoc}                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link SecurityManager#checkListen checkListen} method denies the
                      operation                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="bind" type="ServerSocketChannel" line="85">
                <params>
                    <param name="local" type="SocketAddress"/>
                </params>
            </method>
            <method name="bind" type="ServerSocketChannel" line="88"/>
            <javadoc line="88">
                Binds the channel&apos;s socket to a local address and configures the socket to
                  listen for connections.
                  &lt;p&gt; This method is used to establish an association between the socket and
                  a local address. Once an association is established then the socket remains
                  bound until the channel is closed.
                  &lt;p&gt; The {@code backlog} parameter is the maximum number of pending
                  connections on the socket. Its exact semantics are implementation specific.
                  In particular, an implementation may impose a maximum length or may choose
                  to ignore the parameter altogther. If the {@code backlog} parameter has
                  the value {@code 0}, or a negative value, then an implementation specific
                  default is used.                
                <param>
                    localThe address to bind the socket, or {@code null} to bind to an
                      automatically assigned socket address                    
                </param>
                <param>
                    backlogThe maximum number of pending connections                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    AlreadyBoundExceptionIf the socket is already bound                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given address is not supported                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link SecurityManager#checkListen checkListen} method denies the
                      operation                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setOption" type="ServerSocketChannel" line="113"/>
            <javadoc line="113">
                @throws UnsupportedOperationException           {@inheritDoc}                
                <throws>
                    IllegalArgumentException                {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException                  {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                             {@inheritDoc}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="socket" type="ServerSocket" line="121"/>
            <javadoc line="121">
                Retrieves a server socket associated with this channel.
                  &lt;p&gt; The returned object will not declare any public methods that are not
                  declared in the {@link java.net.ServerSocket} class.  &lt;/p&gt;                
                <return>
                    A server socket associated with this channel                    
                </return>
            </javadoc>
            <method name="accept" type="SocketChannel" line="128"/>
            <javadoc line="128">
                Accepts a connection made to this channel&apos;s socket.
                  &lt;p&gt; If this channel is in non-blocking mode then this method will
                  immediately return &lt;tt&gt;null&lt;/tt&gt; if there are no pending connections.
                  Otherwise it will block indefinitely until a new connection is available
                  or an I/O error occurs.
                  &lt;p&gt; The socket channel returned by this method, if any, will be in
                  blocking mode regardless of the blocking mode of this channel.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.ServerSocket#accept accept} method of the {@link java.net.ServerSocket} class.  That is, if a security manager has been
                  installed then for each new connection this method verifies that the
                  address and port number of the connection&apos;s remote endpoint are
                  permitted by the security manager&apos;s {@link java.lang.SecurityManager#checkAccept checkAccept} method.  &lt;/p&gt;                
                <return>
                    The socket channel for the new connection,
                      or &lt;tt&gt;null&lt;/tt&gt; if this channel is in non-blocking mode
                      and no connection is available to be accepted                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the accept operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the accept operation is in progress, thereby
                      closing the channel and setting the current thread&apos;s
                      interrupt status                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel&apos;s socket has not yet been bound                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the remote endpoint
                      of the new connection                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>