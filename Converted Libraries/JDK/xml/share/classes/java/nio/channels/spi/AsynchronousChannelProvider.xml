<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels.spi">
        <import package="java.nio.channels"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.ServiceConfigurationError"/>
        <import package="java.util.concurrent"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="AsynchronousChannelProvider" line="10">
            <javadoc line="10">
                Service-provider class for asynchronous channels.
                  &lt;p&gt; An asynchronous channel provider is a concrete subclass of this class that
                  has a zero-argument constructor and implements the abstract methods specified
                  below.  A given invocation of the Java virtual machine maintains a single
                  system-wide default provider instance, which is returned by the {@link #provider() provider} method.  The first invocation of that method will locate
                  the default provider as specified below.
                  &lt;p&gt; All of the methods in this class are safe for use by multiple concurrent
                  threads.  &lt;/p&gt;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="checkPermission" type="Void" line="22">
                <declaration name="sm" type="SecurityManager" line="23"/>
            </method>
            <method name="AsynchronousChannelProvider" type="constructor" line="27">
                <params>
                    <param name="ignore" type="Void"/>
                </params>
            </method>
            <javadoc line="29">
                Initializes a new instance of this class.                
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link RuntimePermission}<tt>("asynchronousChannelProvider")</tt>                    
                </throws>
            </javadoc>
            <method name="AsynchronousChannelProvider" type="constructor" line="33"/>
            <class name="ProviderHolder" line="36">
                <declaration name="provider" type="AsynchronousChannelProvider" line="37"/>
                <method name="load" type="AsynchronousChannelProvider" line="38">
                    <anonymous_class line="39">
                        <method name="run" type="AsynchronousChannelProvider" line="40">
                            <declaration name="p" type="AsynchronousChannelProvider" line="41"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="loadProviderFromProperty" type="AsynchronousChannelProvider" line="51">
                    <declaration name="cn" type="String" line="52"/>
                    <scope line="54">
                        <declaration name="c" type="Class&lt;?&gt;" line="55"/>
                    </scope>
                    <scope line="58"/>
                    <scope line="61"/>
                    <scope line="64"/>
                    <scope line="67"/>
                </method>
                <method name="loadProviderAsService" type="AsynchronousChannelProvider" line="71">
                    <declaration name="sl" type="ServiceLoader&lt;AsynchronousChannelProvider&gt;" line="72"/>
                    <declaration name="i" type="Iterator&lt;AsynchronousChannelProvider&gt;" line="73"/>
                    <scope line="74">
                        <scope line="75"/>
                        <scope line="78">
                            <scope line="79"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="87">
                Returns the system-wide default asynchronous channel provider for this
                  invocation of the Java virtual machine.
                  &lt;p&gt; The first invocation of this method locates the default provider
                  object as follows: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; If the system property
                  &lt;tt&gt;java.nio.channels.spi.AsynchronousChannelProvider&lt;/tt&gt; is defined
                  then it is taken to be the fully-qualified name of a concrete provider class.
                  The class is loaded and instantiated; if this process fails then an
                  unspecified error is thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If a provider class has been installed in a jar file that is
                  visible to the system class loader, and that jar file contains a
                  provider-configuration file named
                  &lt;tt&gt;java.nio.channels.spi.AsynchronousChannelProvider&lt;/tt&gt; in the resource
                  directory &lt;tt&gt;META-INF/services&lt;/tt&gt;, then the first class name
                  specified in that file is taken.  The class is loaded and
                  instantiated; if this process fails then an unspecified error is
                  thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Finally, if no provider has been specified by any of the above
                  means then the system-default provider class is instantiated and the
                  result is returned.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Subsequent invocations of this method return the provider that was
                  returned by the first invocation.  &lt;/p&gt;                
                <return>
                    The system-wide default AsynchronousChannel provider                    
                </return>
            </javadoc>
            <method name="provider" type="AsynchronousChannelProvider" line="114"/>
            <method name="openAsynchronousChannelGroup" type="AsynchronousChannelGroup" line="117"/>
            <javadoc line="117">
                Constructs a new asynchronous channel group with a fixed thread pool.                
                <param>
                    nThreadsThe number of threads in the pool                    
                </param>
                <param>
                    threadFactoryThe factory to use when creating new threads                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf {@code nThreads <= 0}                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    AsynchronousChannelGroup#withFixedThreadPool                    
                </see>
            </javadoc>
            <method name="openAsynchronousChannelGroup" type="AsynchronousChannelGroup" line="126"/>
            <javadoc line="126">
                Constructs a new asynchronous channel group with the given thread pool.                
                <param>
                    executorThe thread pool                    
                </param>
                <param>
                    initialSizeA value {@code >=0} or a negative value for implementation
                      specific default                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    AsynchronousChannelGroup#withCachedThreadPool                    
                </see>
            </javadoc>
            <method name="openAsynchronousServerSocketChannel" type="AsynchronousServerSocketChannel" line="135"/>
            <javadoc line="135">
                Opens an asynchronous server-socket channel.                
                <param>
                    groupThe group to which the channel is bound, or {@code null} to
                      bind to the default group                    
                </param>
                <return>
                    The new channel                    
                </return>
                <throws>
                    IllegalChannelGroupExceptionIf the provider that created the group differs from this provider                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionThe group is shutdown                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="openAsynchronousSocketChannel" type="AsynchronousSocketChannel" line="145"/>
            <javadoc line="145">
                Opens an asynchronous socket channel.                
                <param>
                    groupThe group to which the channel is bound, or {@code null} to
                      bind to the default group                    
                </param>
                <return>
                    The new channel                    
                </return>
                <throws>
                    IllegalChannelGroupExceptionIf the provider that created the group differs from this provider                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionThe group is shutdown                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>