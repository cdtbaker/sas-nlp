<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.net.InetAddress"/>
        <import package="java.net.NetworkInterface"/>
        <import package="java.io.IOException"/>
        <class name="MembershipKey" line="32">
            <javadoc line="32">
                A token representing the membership of an Internet Protocol (IP) multicast
                  group.
                  &lt;p&gt; A membership key may represent a membership to receive all datagrams sent
                  to the group, or it may be &lt;em&gt;source-specific&lt;/em&gt;, meaning that it
                  represents a membership that receives only datagrams from a specific source
                  address. Whether or not a membership key is source-specific may be determined
                  by invoking its {@link #sourceAddress() sourceAddress} method.
                  &lt;p&gt; A membership key is valid upon creation and remains valid until the
                  membership is dropped by invoking the {@link #drop() drop} method, or
                  the channel is closed. The validity of the membership key may be tested
                  by invoking its {@link #isValid() isValid} method.
                  &lt;p&gt; Where a membership key is not source-specific and the underlying operation
                  system supports source filtering, then the {@link #block block} and {@link #unblock unblock} methods can be used to block or unblock multicast datagrams
                  from particular source addresses.                
                <see>
                    MulticastChannel                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="58">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="MembershipKey" type="constructor" line="61"/>
            <method name="isValid" type="boolean" line="64"/>
            <javadoc line="64">
                Tells whether or not this membership is valid.
                  &lt;p&gt; A multicast group membership is valid upon creation and remains
                  valid until the membership is dropped by invoking the {@link #drop() drop}method, or the channel is closed.                
                <return>
                    {@code true} if this membership key is valid, {@code false}otherwise                    
                </return>
            </javadoc>
            <method name="drop" type="void" line="76"/>
            <javadoc line="76">
                Drop membership.
                  &lt;p&gt; If the membership key represents a membership to receive all datagrams
                  then the membership is dropped and the channel will no longer receive any
                  datagrams sent to the group. If the membership key is source-specific
                  then the channel will no longer receive datagrams sent to the group from
                  that source address.
                  &lt;p&gt; After membership is dropped it may still be possible to receive
                  datagrams sent to the group. This can arise when datagrams are waiting to
                  be received in the socket&apos;s receive buffer. After membership is dropped
                  then the channel may {@link MulticastChannel#join join} the group again
                  in which case a new membership key is returned.
                  &lt;p&gt; Upon return, this membership object will be {@link #isValid() invalid}.
                  If the multicast group membership is already invalid then invoking this
                  method has no effect. Once a multicast group membership is invalid,
                  it remains invalid forever.                
            </javadoc>
            <method name="block" type="MembershipKey" line="98"/>
            <javadoc line="98">
                Block multicast datagrams from the given source address.
                  &lt;p&gt; If this membership key is not source-specific, and the underlying
                  operating system supports source filtering, then this method blocks
                  multicast datagrams from the given source address. If the given source
                  address is already blocked then this method has no effect.
                  After a source address is blocked it may still be possible to receive
                  datagams from that source. This can arise when datagrams are waiting to
                  be received in the socket&apos;s receive buffer.                
                <param>
                    sourceThe source address to block                    
                </param>
                <return>
                    This membership key                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the {@code source} parameter is not a unicast address or
                      is not the same address type as the multicast group                    
                </throws>
                <throws>
                    IllegalStateExceptionIf this membership key is source-specific or is no longer valid                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf the underlying operating system does not support source
                      filtering                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="unblock" type="MembershipKey" line="127"/>
            <javadoc line="127">
                Unblock multicast datagrams from the given source address that was
                  previously blocked using the {@link #block(InetAddress) block} method.                
                <param>
                    sourceThe source address to unblock                    
                </param>
                <return>
                    This membership key                    
                </return>
                <throws>
                    IllegalStateExceptionIf the given source address is not currently blocked or the
                      membership key is no longer valid                    
                </throws>
            </javadoc>
            <method name="channel" type="MulticastChannel" line="142"/>
            <javadoc line="142">
                Returns the channel for which this membership key was created. This
                  method will continue to return the channel even after the membership
                  becomes {@link #isValid invalid}.                
                <return>
                    the channel                    
                </return>
            </javadoc>
            <method name="group" type="InetAddress" line="151"/>
            <javadoc line="151">
                Returns the multicast group for which this membership key was created.
                  This method will continue to return the group even after the membership
                  becomes {@link #isValid invalid}.                
                <return>
                    the multicast group                    
                </return>
            </javadoc>
            <method name="networkInterface" type="NetworkInterface" line="160"/>
            <javadoc line="160">
                Returns the network interface for which this membership key was created.
                  This method will continue to return the network interface even after the
                  membership becomes {@link #isValid invalid}.                
                <return>
                    the network interface                    
                </return>
            </javadoc>
            <method name="sourceAddress" type="InetAddress" line="169"/>
            <javadoc line="169">
                Returns the source address if this membership key is source-specific,
                  or {@code null} if this membership is not source-specific.                
                <return>
                    The source address if this membership key is source-specific,
                      otherwise {@code null}                    
                </return>
            </javadoc>
        </class>
    </source>