<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.nio.channels.spi.AsynchronousChannelProvider"/>
        <import package="java.io.IOException"/>
        <import package="java.util.concurrent.ExecutorService"/>
        <import package="java.util.concurrent.ThreadFactory"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <class name="AsynchronousChannelGroup" line="34">
            <javadoc line="34">
                A grouping of asynchronous channels for the purpose of resource sharing.
                  &lt;p&gt; An asynchronous channel group encapsulates the mechanics required to
                  handle the completion of I/O operations initiated by {@link AsynchronousChannelasynchronous channels} that are bound to the group. A group has an associated
                  thread pool to which tasks are submitted to handle I/O events and dispatch to{@link CompletionHandler completion-handlers} that consume the result of
                  asynchronous operations performed on channels in the group. In addition to
                  handling I/O events, the pooled threads may also execute other tasks required
                  to support the execution of asynchronous I/O operations.
                  &lt;p&gt; An asynchronous channel group is created by invoking the {@link #withFixedThreadPool withFixedThreadPool} or {@link #withCachedThreadPoolwithCachedThreadPool} methods defined here. Channels are bound to a group by
                  specifying the group when constructing the channel. The associated thread
                  pool is &lt;em&gt;owned&lt;/em&gt; by the group; termination of the group results in the
                  shutdown of the associated thread pool.
                  &lt;p&gt; In addition to groups created explicitly, the Java virtual machine
                  maintains a system-wide &lt;em&gt;default group&lt;/em&gt; that is constructed
                  automatically. Asynchronous channels that do not specify a group at
                  construction time are bound to the default group. The default group has an
                  associated thread pool that creates new threads as needed. The default group
                  may be configured by means of system properties defined in the table below.
                  Where the {@link java.util.concurrent.ThreadFactory ThreadFactory} for the
                  default group is not configured then the pooled threads of the default group
                  are {@link Thread#isDaemon daemon} threads.
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;System property&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code java.nio.channels.DefaultThreadPool.threadFactory} &lt;/td&gt;
                  &lt;td&gt; The value of this property is taken to be the fully-qualified name
                  of a concrete {@link java.util.concurrent.ThreadFactory ThreadFactory}class. The class is loaded using the system class loader and instantiated.
                  The factory&apos;s {@link java.util.concurrent.ThreadFactory#newThreadnewThread} method is invoked to create each thread for the default
                  group&apos;s thread pool. If the process to load and instantiate the value
                  of the property fails then an unspecified error is thrown during the
                  construction of the default group. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code java.nio.channels.DefaultThreadPool.initialSize} &lt;/td&gt;
                  &lt;td&gt; The value of the {@code initialSize} parameter for the default
                  group (see {@link #withCachedThreadPool withCachedThreadPool}).
                  The value of the property is taken to be the {@code String}representation of an {@code Integer} that is the initial size parameter.
                  If the value cannot be parsed as an {@code Integer} it causes an
                  unspecified error to be thrown during the construction of the default
                  group. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;a name=&quot;threading&quot;&gt;&lt;h4&gt;Threading&lt;/h4&gt;&lt;/a&gt;
                  &lt;p&gt; The completion handler for an I/O operation initiated on a channel bound
                  to a group is guaranteed to be invoked by one of the pooled threads in the
                  group. This ensures that the completion handler is run by a thread with the
                  expected &lt;em&gt;identity&lt;/em&gt;.
                  &lt;p&gt; Where an I/O operation completes immediately, and the initiating thread
                  is one of the pooled threads in the group then the completion handler may
                  be invoked directly by the initiating thread. To avoid stack overflow, an
                  implementation may impose a limit as to the number of activations on the
                  thread stack. Some I/O operations may prohibit invoking the completion
                  handler directly by the initiating thread (see {@link AsynchronousServerSocketChannel#accept(Object,CompletionHandler) accept}).
                  &lt;a name=&quot;shutdown&quot;&gt;&lt;h4&gt;Shutdown and Termination&lt;/h4&gt;&lt;/a&gt;
                  &lt;p&gt; The {@link #shutdown() shutdown} method is used to initiate an &lt;em&gt;orderly
                  shutdown&lt;/em&gt; of a group. An orderly shutdown marks the group as shutdown;
                  further attempts to construct a channel that binds to the group will throw{@link ShutdownChannelGroupException}. Whether or not a group is shutdown can
                  be tested using the {@link #isShutdown() isShutdown} method. Once shutdown,
                  the group &lt;em&gt;terminates&lt;/em&gt; when all asynchronous channels that are bound to
                  the group are closed, all actively executing completion handlers have run to
                  completion, and resources used by the group are released. No attempt is made
                  to stop or interrupt threads that are executing completion handlers. The{@link #isTerminated() isTerminated} method is used to test if the group has
                  terminated, and the {@link #awaitTermination awaitTermination} method can be
                  used to block until the group has terminated.
                  &lt;p&gt; The {@link #shutdownNow() shutdownNow} method can be used to initiate a
                  &lt;em&gt;forceful shutdown&lt;/em&gt; of the group. In addition to the actions performed
                  by an orderly shutdown, the {@code shutdownNow} method closes all open channels
                  in the group as if by invoking the {@link AsynchronousChannel#close close}method.                
                <since>
                    1.7                    
                </since>
                <see>
                    AsynchronousSocketChannel#open(AsynchronousChannelGroup)                    
                </see>
                <see>
                    AsynchronousServerSocketChannel#open(AsynchronousChannelGroup)                    
                </see>
            </javadoc>
            <declaration name="provider" type="AsynchronousChannelProvider" line="135"/>
            <javadoc line="137">
                Initialize a new instance of this class.                
                <param>
                    providerThe asynchronous channel provider for this group                    
                </param>
            </javadoc>
            <method name="AsynchronousChannelGroup" type="constructor" line="143">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                </params>
            </method>
            <javadoc line="147">
                Returns the provider that created this channel group.                
                <return>
                    The provider that created this channel group                    
                </return>
            </javadoc>
            <method name="provider" type="AsynchronousChannelProvider" line="152"/>
            <javadoc line="156">
                Creates an asynchronous channel group with a fixed thread pool.
                  &lt;p&gt; The resulting asynchronous channel group reuses a fixed number of
                  threads. At any point, at most {@code nThreads} threads will be active
                  processing tasks that are submitted to handle I/O events and dispatch
                  completion results for operations initiated on asynchronous channels in
                  the group.
                  &lt;p&gt; The group is created by invoking the {@link AsynchronousChannelProvider#openAsynchronousChannelGroup(int,ThreadFactory)openAsynchronousChannelGroup(int,ThreadFactory)} method of the system-wide
                  default {@link AsynchronousChannelProvider} object.                
                <param>
                    nThreadsThe number of threads in the pool                    
                </param>
                <param>
                    threadFactoryThe factory to use when creating new threads                    
                </param>
                <return>
                    A new asynchronous channel group                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf {@code nThreads &lt;= 0}                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="withFixedThreadPool" type="AsynchronousChannelGroup" line="185">
                <params>
                    <param name="nThreads" type="int"/>
                    <param name="threadFactory" type="ThreadFactory"/>
                </params>
            </method>
            <javadoc line="190">
                Creates an asynchronous channel group with a given thread pool that
                  creates new threads as needed.
                  &lt;p&gt; The {@code executor} parameter is an {@code ExecutorService} that
                  creates new threads as needed to execute tasks that are submitted to
                  handle I/O events and dispatch completion results for operations initiated
                  on asynchronous channels in the group. It may reuse previously constructed
                  threads when they are available.
                  &lt;p&gt; The {@code initialSize} parameter may be used by the implementation
                  as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For
                  example, it may be used to indictae the initial number of threads that
                  wait on I/O events.
                  &lt;p&gt; The executor is intended to be used exclusively by the resulting
                  asynchronous channel group. Termination of the group results in the
                  orderly  {@link ExecutorService#shutdown shutdown} of the executor
                  service. Shutting down the executor service by other means results in
                  unspecified behavior.
                  &lt;p&gt; The group is created by invoking the {@link AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide
                  default {@link AsynchronousChannelProvider} object.                
                <param>
                    executorThe thread pool for the resulting group                    
                </param>
                <param>
                    initialSizeA value {@code &gt;=0} or a negative value for implementation
                      specific default                    
                </param>
                <return>
                    A new asynchronous channel group                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    java.util.concurrent.Executors#newCachedThreadPool                    
                </see>
            </javadoc>
            <method name="withCachedThreadPool" type="AsynchronousChannelGroup" line="232">
                <params>
                    <param name="executor" type="ExecutorService"/>
                    <param name="initialSize" type="int"/>
                </params>
            </method>
            <javadoc line="237">
                Creates an asynchronous channel group with a given thread pool.
                  &lt;p&gt; The {@code executor} parameter is an {@code ExecutorService} that
                  executes tasks submitted to dispatch completion results for operations
                  initiated on asynchronous channels in the group.
                  &lt;p&gt; Care should be taken when configuring the executor service. It
                  should support &lt;em&gt;direct handoff&lt;/em&gt; or &lt;em&gt;unbounded queuing&lt;/em&gt; of
                  submitted tasks, and the thread that invokes the {@link ExecutorService#execute execute} method should never invoke the task
                  directly. An implementation may mandate additional constraints.
                  &lt;p&gt; The executor is intended to be used exclusively by the resulting
                  asynchronous channel group. Termination of the group results in the
                  orderly  {@link ExecutorService#shutdown shutdown} of the executor
                  service. Shutting down the executor service by other means results in
                  unspecified behavior.
                  &lt;p&gt; The group is created by invoking the {@link AsynchronousChannelProvider#openAsynchronousChannelGroup(ExecutorService,int)openAsynchronousChannelGroup(ExecutorService,int)} method of the system-wide
                  default {@link AsynchronousChannelProvider} object with an {@codeinitialSize} of {@code 0}.                
                <param>
                    executorThe thread pool for the resulting group                    
                </param>
                <return>
                    A new asynchronous channel group                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="withThreadPool" type="AsynchronousChannelGroup" line="272">
                <params>
                    <param name="executor" type="ExecutorService"/>
                </params>
            </method>
            <method name="isShutdown" type="boolean" line="277"/>
            <javadoc line="277">
                Tells whether or not this asynchronous channel group is shutdown.                
                <return>
                    {@code true} if this asynchronous channel group is shutdown or
                      has been marked for shutdown.                    
                </return>
            </javadoc>
            <method name="isTerminated" type="boolean" line="285"/>
            <javadoc line="285">
                Tells whether or not this group has terminated.
                  &lt;p&gt; Where this method returns {@code true}, then the associated thread
                  pool has also {@link ExecutorService#isTerminated terminated}.                
                <return>
                    {@code true} if this group has terminated                    
                </return>
            </javadoc>
            <method name="shutdown" type="void" line="295"/>
            <javadoc line="295">
                Initiates an orderly shutdown of the group.
                  &lt;p&gt; This method marks the group as shutdown. Further attempts to construct
                  channel that binds to this group will throw {@link ShutdownChannelGroupException}.
                  The group terminates when all asynchronous channels in the group are
                  closed, all actively executing completion handlers have run to completion,
                  and all resources have been released. This method has no effect if the
                  group is already shutdown.                
            </javadoc>
            <method name="shutdownNow" type="void" line="307"/>
            <javadoc line="307">
                Shuts down the group and closes all open channels in the group.
                  &lt;p&gt; In addition to the actions performed by the {@link #shutdown() shutdown}method, this method invokes the {@link AsynchronousChannel#close close}method on all open channels in the group. This method does not attempt to
                  stop or interrupt threads that are executing completion handlers. The
                  group terminates when all actively executing completion handlers have run
                  to completion and all resources have been released. This method may be
                  invoked at any time. If some other thread has already invoked it, then
                  another invocation will block until the first invocation is complete,
                  after which it will return without effect.                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="awaitTermination" type="boolean" line="325"/>
            <javadoc line="325">
                Awaits termination of the group.
                  &lt;p&gt; This method blocks until the group has terminated, or the timeout
                  occurs, or the current thread is interrupted, whichever happens first.                
                <param>
                    timeoutThe maximum time to wait, or zero or less to not wait                    
                </param>
                <param>
                    unitThe time unit of the timeout argument                    
                </param>
                <return>
                    {@code true} if the group has terminated; {@code false} if the
                      timeout elapsed before termination                    
                </return>
                <throws>
                    InterruptedExceptionIf interrupted while waiting                    
                </throws>
            </javadoc>
        </class>
    </source>