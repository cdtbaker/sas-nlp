<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.net.Socket"/>
        <import package="java.net.SocketOption"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.spi.AbstractSelectableChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <class name="SocketChannel" line="36">
            <extends class="AbstractSelectableChannel"/>
            <comment line="216">
                -- Socket-specific operations --                
            </comment>
            <comment line="453">
                -- ByteChannel operations --                
            </comment>
            <implements interface="ByteChannel"/>
            <implements interface="ScatteringByteChannel"/>
            <implements interface="GatheringByteChannel"/>
            <implements interface="NetworkChannel"/>
            <javadoc line="36">
                A selectable channel for stream-oriented connecting sockets.
                  &lt;p&gt; A socket channel is created by invoking one of the {@link #open open}methods of this class.  It is not possible to create a channel for an arbitrary,
                  pre-existing socket. A newly-created socket channel is open but not yet
                  connected.  An attempt to invoke an I/O operation upon an unconnected
                  channel will cause a {@link NotYetConnectedException} to be thrown.  A
                  socket channel can be connected by invoking its {@link #connect connect}method; once connected, a socket channel remains connected until it is
                  closed.  Whether or not a socket channel is connected may be determined by
                  invoking its {@link #isConnected isConnected} method.
                  &lt;p&gt; Socket channels support &lt;i&gt;non-blocking connection:&lt;/i&gt;&amp;nbsp;A socket
                  channel may be created and the process of establishing the link to the
                  remote socket may be initiated via the {@link #connect connect} method for
                  later completion by the {@link #finishConnect finishConnect} method.
                  Whether or not a connection operation is in progress may be determined by
                  invoking the {@link #isConnectionPending isConnectionPending} method.
                  &lt;p&gt; Socket channels support &lt;i&gt;asynchronous shutdown,&lt;/i&gt; which is similar
                  to the asynchronous close operation specified in the {@link Channel} class.
                  If the input side of a socket is shut down by one thread while another
                  thread is blocked in a read operation on the socket&apos;s channel, then the read
                  operation in the blocked thread will complete without reading any bytes and
                  will return &lt;tt&gt;-1&lt;/tt&gt;.  If the output side of a socket is shut down by one
                  thread while another thread is blocked in a write operation on the socket&apos;s
                  channel, then the blocked thread will receive an {@link AsynchronousCloseException}.
                  &lt;p&gt; Socket options are configured using the {@link #setOption(SocketOption,Object)setOption} method. Socket channels support the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_SNDBUF SO_SNDBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket send buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_KEEPALIVE SO_KEEPALIVE} &lt;/td&gt;
                  &lt;td&gt; Keep connection alive &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} &lt;/td&gt;
                  &lt;td&gt; Re-use address &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_LINGER SO_LINGER} &lt;/td&gt;
                  &lt;td&gt; Linger on close if data is present (when configured in blocking mode
                  only) &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#TCP_NODELAY TCP_NODELAY} &lt;/td&gt;
                  &lt;td&gt; Disable the Nagle algorithm &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported.
                  &lt;p&gt; Socket channels are safe for use by multiple concurrent threads.  They
                  support concurrent reading and writing, though at most one thread may be
                  reading and at most one thread may be writing at any given time.  The {@link #connect connect} and {@link #finishConnect finishConnect} methods are
                  mutually synchronized against each other, and an attempt to initiate a read
                  or write operation while an invocation of one of these methods is in
                  progress will block until that invocation is complete.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="121">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="SocketChannel" type="constructor" line="124">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="128">
                Opens a socket channel.
                  &lt;p&gt; The new channel is created by invoking the {@link java.nio.channels.spi.SelectorProvider#openSocketChannelopenSocketChannel} method of the system-wide default {@link java.nio.channels.spi.SelectorProvider} object.  &lt;/p&gt;                
                <return>
                    A new socket channel                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="SocketChannel" line="141"/>
            <javadoc line="145">
                Opens a socket channel and connects it to a remote address.
                  &lt;p&gt; This convenience method works as if by invoking the {@link #open()}method, invoking the {@link #connect(SocketAddress) connect} method upon
                  the resulting socket channel, passing it &lt;tt&gt;remote&lt;/tt&gt;, and then
                  returning that channel.  &lt;/p&gt;                
                <param>
                    remoteThe remote address to which the new channel is to be connected                    
                </param>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote endpoint                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="SocketChannel" line="181">
                <params>
                    <param name="remote" type="SocketAddress"/>
                </params>
                <declaration name="sc" type="SocketChannel" line="182"/>
                <scope line="183"/>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="197">
                Returns an operation set identifying this channel&apos;s supported
                  operations.
                  &lt;p&gt; Socket channels support connecting, reading, and writing, so this
                  method returns &lt;tt&gt;(&lt;/tt&gt;{@link SelectionKey#OP_CONNECT}&lt;tt&gt;|&lt;/tt&gt;&amp;nbsp;{@link SelectionKey#OP_READ} &lt;tt&gt;|&lt;/tt&gt;&amp;nbsp;{@link SelectionKey#OP_WRITE}&lt;tt&gt;)&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="208"/>
            <method name="bind" type="SocketChannel" line="217"/>
            <javadoc line="217">
                @throws ConnectionPendingExceptionIf a non-blocking connect operation is already in progress on
                  this channel                
                <throws>
                    AlreadyBoundException               {@inheritDoc}                    
                </throws>
                <throws>
                    UnsupportedAddressTypeException     {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException              {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                         {@inheritDoc}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setOption" type="SocketChannel" line="232"/>
            <javadoc line="232">
                @throws UnsupportedOperationException           {@inheritDoc}                
                <throws>
                    IllegalArgumentException                {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException                  {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                             {@inheritDoc}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="shutdownInput" type="SocketChannel" line="244"/>
            <javadoc line="244">
                Shutdown the connection for reading without closing the channel.
                  &lt;p&gt; Once shutdown for reading then further reads on the channel will
                  return {@code -1}, the end-of-stream indication. If the input side of the
                  connection is already shutdown then invoking this method has no effect.                
                <return>
                    The channel                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="shutdownOutput" type="SocketChannel" line="264"/>
            <javadoc line="264">
                Shutdown the connection for writing without closing the channel.
                  &lt;p&gt; Once shutdown for writing then further attempts to write to the
                  channel will throw {@link ClosedChannelException}. If the output side of
                  the connection is already shutdown then invoking this method has no
                  effect.                
                <return>
                    The channel                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="socket" type="Socket" line="285"/>
            <javadoc line="285">
                Retrieves a socket associated with this channel.
                  &lt;p&gt; The returned object will not declare any public methods that are not
                  declared in the {@link java.net.Socket} class.  &lt;/p&gt;                
                <return>
                    A socket associated with this channel                    
                </return>
            </javadoc>
            <method name="isConnected" type="boolean" line="295"/>
            <javadoc line="295">
                Tells whether or not this channel&apos;s network socket is connected.                
                <return>
                    <tt>true</tt> if, and only if, this channel's network socket
                      is {@link #isOpen open} and connected                    
                </return>
            </javadoc>
            <method name="isConnectionPending" type="boolean" line="303"/>
            <javadoc line="303">
                Tells whether or not a connection operation is in progress on this
                  channel.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, a connection operation has been
                      initiated on this channel but not yet completed by invoking the{@link #finishConnect finishConnect} method                    
                </return>
            </javadoc>
            <method name="connect" type="boolean" line="313"/>
            <javadoc line="313">
                Connects this channel&apos;s socket.
                  &lt;p&gt; If this channel is in non-blocking mode then an invocation of this
                  method initiates a non-blocking connection operation.  If the connection
                  is established immediately, as can happen with a local connection, then
                  this method returns &lt;tt&gt;true&lt;/tt&gt;.  Otherwise this method returns
                  &lt;tt&gt;false&lt;/tt&gt; and the connection operation must later be completed by
                  invoking the {@link #finishConnect finishConnect} method.
                  &lt;p&gt; If this channel is in blocking mode then an invocation of this
                  method will block until the connection is established or an I/O error
                  occurs.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.Socket} class.  That is, if a security manager has been
                  installed then this method verifies that its {@link java.lang.SecurityManager#checkConnect checkConnect} method permits
                  connecting to the address and port number of the given remote endpoint.
                  &lt;p&gt; This method may be invoked at any time.  If a read or write
                  operation upon this channel is invoked while an invocation of this
                  method is in progress then that operation will first block until this
                  invocation is complete.  If a connection attempt is initiated but fails,
                  that is, if an invocation of this method throws a checked exception,
                  then the channel will be closed.  &lt;/p&gt;                
                <param>
                    remoteThe remote address to which this channel is to be connected                    
                </param>
                <return>
                    <tt>true</tt> if a connection was established,
                      <tt>false</tt> if this channel is in non-blocking mode
                      and the connection operation is in progress                    
                </return>
                <throws>
                    AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    ConnectionPendingExceptionIf a non-blocking connection operation is already in progress
                      on this channel                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote endpoint                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="finishConnect" type="boolean" line="382"/>
            <javadoc line="382">
                Finishes the process of connecting a socket channel.
                  &lt;p&gt; A non-blocking connection operation is initiated by placing a socket
                  channel in non-blocking mode and then invoking its {@link #connectconnect} method.  Once the connection is established, or the attempt has
                  failed, the socket channel will become connectable and this method may
                  be invoked to complete the connection sequence.  If the connection
                  operation failed then invoking this method will cause an appropriate{@link java.io.IOException} to be thrown.
                  &lt;p&gt; If this channel is already connected then this method will not block
                  and will immediately return &lt;tt&gt;true&lt;/tt&gt;.  If this channel is in
                  non-blocking mode then this method will return &lt;tt&gt;false&lt;/tt&gt; if the
                  connection process is not yet complete.  If this channel is in blocking
                  mode then this method will block until the connection either completes
                  or fails, and will always either return &lt;tt&gt;true&lt;/tt&gt; or throw a checked
                  exception describing the failure.
                  &lt;p&gt; This method may be invoked at any time.  If a read or write
                  operation upon this channel is invoked while an invocation of this
                  method is in progress then that operation will first block until this
                  invocation is complete.  If a connection attempt fails, that is, if an
                  invocation of this method throws a checked exception, then the channel
                  will be closed.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this channel's socket is now
                      connected                    
                </return>
                <throws>
                    NoConnectionPendingExceptionIf this channel is not connected and a connection operation
                      has not been initiated                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getRemoteAddress" type="SocketAddress" line="433"/>
            <javadoc line="433">
                Returns the remote address to which this channel&apos;s socket is connected.
                  &lt;p&gt; Where the channel is bound and connected to an Internet Protocol
                  socket address then the return value from this method is of type {@link java.net.InetSocketAddress}.                
                <return>
                    The remote address; {@code null} if the channel's socket is not
                      connected                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="read" type="int" line="454"/>
            <javadoc line="454">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <method name="read" type="long" line="460"/>
            <javadoc line="460">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <javadoc line="467">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <method name="read" type="long" line="471">
                <params>
                    <param name="dsts" type="ByteBuffer[]"/>
                </params>
            </method>
            <method name="write" type="int" line="475"/>
            <javadoc line="475">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <method name="write" type="long" line="481"/>
            <javadoc line="481">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <javadoc line="488">
                @throws NotYetConnectedExceptionIf this channel is not yet connected                
            </javadoc>
            <method name="write" type="long" line="492">
                <params>
                    <param name="srcs" type="ByteBuffer[]"/>
                </params>
            </method>
        </class>
    </source>