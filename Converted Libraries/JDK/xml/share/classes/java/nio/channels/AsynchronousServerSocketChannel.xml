<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.nio.channels.spi"/>
        <import package="java.net.SocketOption"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.io.IOException"/>
        <class name="AsynchronousServerSocketChannel" line="34">
            <implements interface="AsynchronousChannel"/>
            <implements interface="NetworkChannel"/>
            <javadoc line="34">
                An asynchronous channel for stream-oriented listening sockets.
                  &lt;p&gt; An asynchronous server-socket channel is created by invoking the{@link #open open} method of this class.
                  A newly-created asynchronous server-socket channel is open but not yet bound.
                  It can be bound to a local address and configured to listen for connections
                  by invoking the {@link #bind(SocketAddress,int) bind} method. Once bound,
                  the {@link #accept(Object,CompletionHandler) accept} method
                  is used to initiate the accepting of connections to the channel&apos;s socket.
                  An attempt to invoke the &lt;tt&gt;accept&lt;/tt&gt; method on an unbound channel will
                  cause a {@link NotYetBoundException} to be thrown.
                  &lt;p&gt; Channels of this type are safe for use by multiple concurrent threads
                  though at most one accept operation can be outstanding at any time.
                  If a thread initiates an accept operation before a previous accept operation
                  has completed then an {@link AcceptPendingException} will be thrown.
                  &lt;p&gt; Socket options are configured using the {@link #setOption(SocketOption,Object)setOption} method. Channels of this type support the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} &lt;/td&gt;
                  &lt;td&gt; Re-use address &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported.
                  &lt;p&gt; &lt;b&gt;Usage Example:&lt;/b&gt;
                  &lt;pre&gt;
                  final AsynchronousServerSocketChannel listener =
                  AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(5000));
                  listener.accept(null, new CompletionHandler&amp;lt;AsynchronousSocketChannel,Void&amp;gt;() {
                  public void completed(AsynchronousSocketChannel ch, Void att) {
                  // accept the next connection
                  listener.accept(null, this);
                  // handle this connection
                  handle(ch);
                  }
                  public void failed(Throwable exc, Void att) {
                  ...
                  }
                  });
                  &lt;/pre&gt;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="provider" type="AsynchronousChannelProvider" line="97"/>
            <javadoc line="99">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="AsynchronousServerSocketChannel" type="constructor" line="102">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                </params>
            </method>
            <javadoc line="106">
                Returns the provider that created this channel.                
            </javadoc>
            <method name="provider" type="AsynchronousChannelProvider" line="109"/>
            <javadoc line="113">
                Opens an asynchronous server-socket channel.
                  &lt;p&gt; The new channel is created by invoking the {@link java.nio.channels.spi.AsynchronousChannelProvider#openAsynchronousServerSocketChannelopenAsynchronousServerSocketChannel} method on the {@link java.nio.channels.spi.AsynchronousChannelProvider} object that created
                  the given group. If the group parameter is &lt;tt&gt;null&lt;/tt&gt; then the
                  resulting channel is created by the system-wide default provider, and
                  bound to the &lt;em&gt;default group&lt;/em&gt;.                
                <param>
                    groupThe group to which the newly constructed channel should be bound,
                      or <tt>null</tt> for the default group                    
                </param>
                <return>
                    A new asynchronous server socket channel                    
                </return>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group is shutdown                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="AsynchronousServerSocketChannel" line="137">
                <params>
                    <param name="group" type="AsynchronousChannelGroup"/>
                </params>
                <declaration name="provider" type="AsynchronousChannelProvider" line="138"/>
            </method>
            <javadoc line="143">
                Opens an asynchronous server-socket channel.
                  &lt;p&gt; This method returns an asynchronous server socket channel that is
                  bound to the &lt;em&gt;default group&lt;/em&gt;. This method is equivalent to evaluating
                  the expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  open((AsynchronousChannelGroup)null);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    A new asynchronous server socket channel                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="AsynchronousServerSocketChannel" line="160"/>
            <javadoc line="164">
                Binds the channel&apos;s socket to a local address and configures the socket to
                  listen for connections.
                  &lt;p&gt; An invocation of this method is equivalent to the following:
                  &lt;blockquote&gt;&lt;pre&gt;
                  bind(local, 0);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    localThe local address to bind the socket, or <tt>null</tt> to bind
                      to an automatically assigned socket address                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    AlreadyBoundException               {@inheritDoc}                    
                </throws>
                <throws>
                    UnsupportedAddressTypeException     {@inheritDoc}                    
                </throws>
                <throws>
                    SecurityException                   {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException              {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                         {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="bind" type="AsynchronousServerSocketChannel" line="187">
                <params>
                    <param name="local" type="SocketAddress"/>
                </params>
            </method>
            <method name="bind" type="AsynchronousServerSocketChannel" line="191"/>
            <javadoc line="191">
                Binds the channel&apos;s socket to a local address and configures the socket to
                  listen for connections.
                  &lt;p&gt; This method is used to establish an association between the socket and
                  a local address. Once an association is established then the socket remains
                  bound until the associated channel is closed.
                  &lt;p&gt; The {@code backlog} parameter is the maximum number of pending
                  connections on the socket. Its exact semantics are implementation specific.
                  In particular, an implementation may impose a maximum length or may choose
                  to ignore the parameter altogther. If the {@code backlog} parameter has
                  the value {@code 0}, or a negative value, then an implementation specific
                  default is used.                
                <param>
                    localThe local address to bind the socket, or {@code null} to bind
                      to an automatically assigned socket address                    
                </param>
                <param>
                    backlogThe maximum number of pending connections                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    AlreadyBoundExceptionIf the socket is already bound                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link SecurityManager#checkListen checkListen} method denies the operation                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="setOption" type="AsynchronousServerSocketChannel" line="229"/>
            <javadoc line="229">
                @throws IllegalArgumentException                {@inheritDoc}                
                <throws>
                    ClosedChannelException                  {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                             {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="accept" type="void" line="237"/>
            <javadoc line="237">
                Accepts a connection.
                  &lt;p&gt; This method initiates an asynchronous operation to accept a
                  connection made to this channel&apos;s socket. The {@code handler} parameter is
                  a completion handler that is invoked when a connection is accepted (or
                  the operation fails). The result passed to the completion handler is
                  the {@link AsynchronousSocketChannel} to the new connection.
                  &lt;p&gt; When a new connection is accepted then the resulting {@codeAsynchronousSocketChannel} will be bound to the same {@link AsynchronousChannelGroup} as this channel. If the group is {@link AsynchronousChannelGroup#isShutdown shutdown} and a connection is accepted,
                  then the connection is closed, and the operation completes with an {@codeIOException} and cause {@link ShutdownChannelGroupException}.
                  &lt;p&gt; To allow for concurrent handling of new connections, the completion
                  handler is not invoked directly by the initiating thread when a new
                  connection is accepted immediately (see &lt;a
                  href=&quot;AsynchronousChannelGroup.html#threading&quot;&gt;Threading&lt;a&gt;).
                  &lt;p&gt; If a security manager has been installed then it verifies that the
                  address and port number of the connection&apos;s remote endpoint are permitted
                  by the security manager&apos;s {@link SecurityManager#checkAccept checkAccept}method. The permission check is performed with privileges that are restricted
                  by the calling context of this method. If the permission check fails then
                  the connection is closed and the operation completes with a {@link SecurityException}.                
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    AcceptPendingExceptionIf an accept operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel's socket has not yet been bound                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <method name="accept" type="Future<AsynchronousSocketChannel>" line="281"/>
            <javadoc line="281">
                Accepts a connection.
                  &lt;p&gt; This method initiates an asynchronous operation to accept a
                  connection made to this channel&apos;s socket. The method behaves in exactly
                  the same manner as the {@link #accept(Object,CompletionHandler)} method
                  except that instead of specifying a completion handler, this method
                  returns a {@code Future} representing the pending result. The {@codeFuture}&apos;s {@link Future#get() get} method returns the {@link AsynchronousSocketChannel} to the new connection on successful completion.                
                <return>
                    a {@code Future} object representing the pending result                    
                </return>
                <throws>
                    AcceptPendingExceptionIf an accept operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel's socket has not yet been bound                    
                </throws>
            </javadoc>
        </class>
    </source>