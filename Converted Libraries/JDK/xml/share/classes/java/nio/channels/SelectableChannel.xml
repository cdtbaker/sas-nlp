<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.spi.AbstractInterruptibleChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <class name="SelectableChannel" line="33">
            <extends class="AbstractInterruptibleChannel"/>
            <comment line="121">
                Internal state:                
            </comment>
            <comment line="122">
                keySet, may be empty but is never null, typ. a tiny array                
            </comment>
            <comment line="123">
                boolean isRegistered, protected by key set                
            </comment>
            <comment line="124">
                regLock, lock object to prevent duplicate registrations                
            </comment>
            <comment line="125">
                boolean isBlocking, protected by regLock                
            </comment>
            <comment line="139">
                                
            </comment>
            <comment line="140">
                sync(keySet) { return isRegistered; }                
            </comment>
            <comment line="151">
                                
            </comment>
            <comment line="152">
                sync(keySet) { return findKey(sel); }                
            </comment>
            <comment line="219">
                                
            </comment>
            <comment line="220">
                sync(regLock) {                
            </comment>
            <comment line="221">
                sync(keySet) { look for selector }                
            </comment>
            <comment line="222">
                if (channel found) { set interest ops -- may block in selector;                
            </comment>
            <comment line="223">
                return key; }                
            </comment>
            <comment line="224">
                create new key -- may block somewhere in selector;                
            </comment>
            <comment line="225">
                sync(keySet) { add key; }                
            </comment>
            <comment line="226">
                attach(attachment);                
            </comment>
            <comment line="227">
                return key;                
            </comment>
            <comment line="228">
                }                
            </comment>
            <comment line="315">
                                
            </comment>
            <comment line="316">
                sync(regLock) {                
            </comment>
            <comment line="317">
                sync(keySet) { throw IBME if block &amp;&amp; isRegistered; }                
            </comment>
            <comment line="318">
                change mode;                
            </comment>
            <comment line="319">
                }                
            </comment>
            <implements interface="Channel"/>
            <javadoc line="33">
                A channel that can be multiplexed via a {@link Selector}.
                  &lt;p&gt; In order to be used with a selector, an instance of this class must
                  first be &lt;i&gt;registered&lt;/i&gt; via the {@link #register(Selector,int,Object)register} method.  This method returns a new {@link SelectionKey} object
                  that represents the channel&apos;s registration with the selector.
                  &lt;p&gt; Once registered with a selector, a channel remains registered until it
                  is &lt;i&gt;deregistered&lt;/i&gt;.  This involves deallocating whatever resources were
                  allocated to the channel by the selector.
                  &lt;p&gt; A channel cannot be deregistered directly; instead, the key representing
                  its registration must be &lt;i&gt;cancelled&lt;/i&gt;.  Cancelling a key requests that
                  the channel be deregistered during the selector&apos;s next selection operation.
                  A key may be cancelled explicitly by invoking its {@link SelectionKey#cancel() cancel} method.  All of a channel&apos;s keys are cancelled
                  implicitly when the channel is closed, whether by invoking its {@link Channel#close close} method or by interrupting a thread blocked in an I/O
                  operation upon the channel.
                  &lt;p&gt; If the selector itself is closed then the channel will be deregistered,
                  and the key representing its registration will be invalidated, without
                  further delay.
                  &lt;p&gt; A channel may be registered at most once with any particular selector.
                  &lt;p&gt; Whether or not a channel is registered with one or more selectors may be
                  determined by invoking the {@link #isRegistered isRegistered} method.
                  &lt;p&gt; Selectable channels are safe for use by multiple concurrent
                  threads. &lt;/p&gt;
                  &lt;a name=&quot;bm&quot;&gt;
                  &lt;h4&gt;Blocking mode&lt;/h4&gt;
                  A selectable channel is either in &lt;i&gt;blocking&lt;/i&gt; mode or in
                  &lt;i&gt;non-blocking&lt;/i&gt; mode.  In blocking mode, every I/O operation invoked
                  upon the channel will block until it completes.  In non-blocking mode an I/O
                  operation will never block and may transfer fewer bytes than were requested
                  or possibly no bytes at all.  The blocking mode of a selectable channel may
                  be determined by invoking its {@link #isBlocking isBlocking} method.
                  &lt;p&gt; Newly-created selectable channels are always in blocking mode.
                  Non-blocking mode is most useful in conjunction with selector-based
                  multiplexing.  A channel must be placed into non-blocking mode before being
                  registered with a selector, and may not be returned to blocking mode until
                  it has been deregistered.                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
                <see>
                    SelectionKey                    
                </see>
                <see>
                    Selector                    
                </see>
            </javadoc>
            <javadoc line="97">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="SelectableChannel" type="constructor" line="100"/>
            <method name="provider" type="SelectorProvider" line="102"/>
            <javadoc line="102">
                Returns the provider that created this channel.                
                <return>
                    The provider that created this channel                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="109"/>
            <javadoc line="109">
                Returns an &lt;a href=&quot;SelectionKey.html#opsets&quot;&gt;operation set&lt;/a&gt;
                  identifying this channel&apos;s supported operations.  The bits that are set
                  in this integer value denote exactly the operations that are valid for
                  this channel.  This method always returns the same value for a given
                  concrete channel class. &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="isRegistered" type="boolean" line="126"/>
            <javadoc line="126">
                Tells whether or not this channel is currently registered with any
                  selectors.  A newly-created channel is not registered.
                  &lt;p&gt; Due to the inherent delay between key cancellation and channel
                  deregistration, a channel may remain registered for some time after all
                  of its keys have been cancelled.  A channel may also remain registered
                  for some time after it is closed.  &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this channel is registered                    
                </return>
            </javadoc>
            <method name="keyFor" type="SelectionKey" line="141"/>
            <javadoc line="141">
                Retrieves the key representing the channel&apos;s registration with the given
                  selector.  &lt;/p&gt;                
                <return>
                    The key returned when this channel was last registered with the
                      given selector, or <tt>null</tt> if this channel is not
                      currently registered with that selector                    
                </return>
            </javadoc>
            <method name="register" type="SelectionKey" line="153"/>
            <javadoc line="153">
                Registers this channel with the given selector, returning a selection
                  key.
                  &lt;p&gt; If this channel is currently registered with the given selector then
                  the selection key representing that registration is returned.  The key&apos;s
                  interest set will have been changed to &lt;tt&gt;ops&lt;/tt&gt;, as if by invoking
                  the {@link SelectionKey#interestOps(int) interestOps(int)} method.  If
                  the &lt;tt&gt;att&lt;/tt&gt; argument is not &lt;tt&gt;null&lt;/tt&gt; then the key&apos;s attachment
                  will have been set to that value.  A {@link CancelledKeyException} will
                  be thrown if the key has already been cancelled.
                  &lt;p&gt; Otherwise this channel has not yet been registered with the given
                  selector, so it is registered and the resulting new key is returned.
                  The key&apos;s initial interest set will be &lt;tt&gt;ops&lt;/tt&gt; and its attachment
                  will be &lt;tt&gt;att&lt;/tt&gt;.
                  &lt;p&gt; This method may be invoked at any time.  If this method is invoked
                  while another invocation of this method or of the {@link #configureBlocking(boolean) configureBlocking} method is in progress
                  then it will first block until the other operation is complete.  This
                  method will then synchronize on the selector&apos;s key set and therefore may
                  block if invoked concurrently with another registration or selection
                  operation involving the same selector. &lt;/p&gt;
                  &lt;p&gt; If this channel is closed while this operation is in progress then
                  the key returned by this method will have been cancelled and will
                  therefore be invalid. &lt;/p&gt;                
                <param>
                    selThe selector with which this channel is to be registered                    
                </param>
                <param>
                    opsThe interest set for the resulting key                    
                </param>
                <param>
                    attThe attachment for the resulting key; may be <tt>null</tt>                    
                </param>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    ClosedSelectorExceptionIf the selector is closed                    
                </throws>
                <throws>
                    IllegalBlockingModeExceptionIf this channel is in blocking mode                    
                </throws>
                <throws>
                    IllegalSelectorExceptionIf this channel was not created by the same provider
                      as the given selector                    
                </throws>
                <throws>
                    CancelledKeyExceptionIf this channel is currently registered with the given selector
                      but the corresponding key has already been cancelled                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf a bit in the <tt>ops</tt> set does not correspond to an
                      operation that is supported by this channel, that is, if
                      <tt>set & ~validOps() != 0</tt>                    
                </throws>
                <return>
                    A key representing the registration of this channel with
                      the given selector                    
                </return>
            </javadoc>
            <javadoc line="229">
                Registers this channel with the given selector, returning a selection
                  key.
                  &lt;p&gt; An invocation of this convenience method of the form
                  &lt;blockquote&gt;&lt;tt&gt;sc.register(sel, ops)&lt;/tt&gt;&lt;/blockquote&gt;
                  behaves in exactly the same way as the invocation
                  &lt;blockquote&gt;&lt;tt&gt;sc.{@link #register(java.nio.channels.Selector,int,java.lang.Object)register}(sel, ops, null)&lt;/tt&gt;&lt;/blockquote&gt;                
                <param>
                    selThe selector with which this channel is to be registered                    
                </param>
                <param>
                    opsThe interest set for the resulting key                    
                </param>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    ClosedSelectorExceptionIf the selector is closed                    
                </throws>
                <throws>
                    IllegalBlockingModeExceptionIf this channel is in blocking mode                    
                </throws>
                <throws>
                    IllegalSelectorExceptionIf this channel was not created by the same provider
                      as the given selector                    
                </throws>
                <throws>
                    CancelledKeyExceptionIf this channel is currently registered with the given selector
                      but the corresponding key has already been cancelled                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf a bit in <tt>ops</tt> does not correspond to an operation
                      that is supported by this channel, that is, if <tt>set &
                      ~validOps() != 0</tt>                    
                </throws>
                <return>
                    A key representing the registration of this channel with
                      the given selector                    
                </return>
            </javadoc>
            <method name="register" type="SelectionKey" line="276">
                <params>
                    <param name="sel" type="Selector"/>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <method name="configureBlocking" type="SelectableChannel" line="280"/>
            <javadoc line="280">
                Adjusts this channel&apos;s blocking mode.
                  &lt;p&gt; If this channel is registered with one or more selectors then an
                  attempt to place it into blocking mode will cause an {@link IllegalBlockingModeException} to be thrown.
                  &lt;p&gt; This method may be invoked at any time.  The new blocking mode will
                  only affect I/O operations that are initiated after this method returns.
                  For some implementations this may require blocking until all pending I/O
                  operations are complete.
                  &lt;p&gt; If this method is invoked while another invocation of this method or
                  of the {@link #register(Selector,int) register} method is in progress
                  then it will first block until the other operation is complete. &lt;/p&gt;                
                <param>
                    block  If <tt>true</tt> then this channel will be placed in
                      blocking mode; if <tt>false</tt> then it will be placed
                      non-blocking mode                    
                </param>
                <return>
                    This selectable channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IllegalBlockingModeExceptionIf <tt>block</tt> is <tt>true</tt> and this channel is
                      registered with one or more selectors                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="isBlocking" type="boolean" line="320"/>
            <javadoc line="320">
                Tells whether or not every I/O operation on this channel will block
                  until it completes.  A newly-created channel is always in blocking mode.
                  &lt;p&gt; If this channel is closed then the value returned by this method is
                  not specified. &lt;/p&gt;                
                <return>
                    <tt>true</tt> if, and only if, this channel is in blocking mode                    
                </return>
            </javadoc>
            <method name="blockingLock" type="Object" line="331"/>
            <javadoc line="331">
                Retrieves the object upon which the {@link #configureBlockingconfigureBlocking} and {@link #register register} methods synchronize.
                  This is often useful in the implementation of adaptors that require a
                  specific blocking mode to be maintained for a short period of time.
                  &lt;/p&gt;                
                <return>
                    The blocking-mode lock object                    
                </return>
            </javadoc>
        </class>
    </source>