<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
        <import package="java.io.IOException"/>
        <class name="SelectionKey" line="4">
            <javadoc line="4">
                A token representing the registration of a {@link SelectableChannel} with a{@link Selector}.
                  &lt;p&gt; A selection key is created each time a channel is registered with a
                  selector.  A key remains valid until it is &lt;i&gt;cancelled&lt;/i&gt; by invoking its{@link #cancel cancel} method, by closing its channel, or by closing its
                  selector.  Cancelling a key does not immediately remove it from its
                  selector; it is instead added to the selector&apos;s &lt;a
                  href=&quot;Selector.html#ks&quot;&gt;&lt;i&gt;cancelled-key set&lt;/i&gt;&lt;/a&gt; for removal during the
                  next selection operation.  The validity of a key may be tested by invoking
                  its {@link #isValid isValid} method.
                  &lt;a name=&quot;opsets&quot;&gt;
                  &lt;p&gt; A selection key contains two &lt;i&gt;operation sets&lt;/i&gt; represented as
                  integer values.  Each bit of an operation set denotes a category of
                  selectable operations that are supported by the key&apos;s channel.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt; The &lt;i&gt;interest set&lt;/i&gt; determines which operation categories will
                  be tested for readiness the next time one of the selector&apos;s selection
                  methods is invoked.  The interest set is initialized with the value given
                  when the key is created; it may later be changed via the {@link #interestOps(int)} method. &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; The &lt;i&gt;ready set&lt;/i&gt; identifies the operation categories for which
                  the key&apos;s channel has been detected to be ready by the key&apos;s selector.
                  The ready set is initialized to zero when the key is created; it may later
                  be updated by the selector during a selection operation, but it cannot be
                  updated directly. &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; That a selection key&apos;s ready set indicates that its channel is ready for
                  some operation category is a hint, but not a guarantee, that an operation in
                  such a category may be performed by a thread without causing the thread to
                  block.  A ready set is most likely to be accurate immediately after the
                  completion of a selection operation.  It is likely to be made inaccurate by
                  external events and by I/O operations that are invoked upon the
                  corresponding channel.
                  &lt;p&gt; This class defines all known operation-set bits, but precisely which
                  bits are supported by a given channel depends upon the type of the channel.
                  Each subclass of {@link SelectableChannel} defines an {@link SelectableChannel#validOps() validOps()} method which returns a set
                  identifying just those operations that are supported by the channel.  An
                  attempt to set or test an operation-set bit that is not supported by a key&apos;s
                  channel will result in an appropriate run-time exception.
                  &lt;p&gt; It is often necessary to associate some application-specific data with a
                  selection key, for example an object that represents the state of a
                  higher-level protocol and handles readiness notifications in order to
                  implement that protocol.  Selection keys therefore support the
                  &lt;i&gt;attachment&lt;/i&gt; of a single arbitrary object to a key.  An object can be
                  attached via the {@link #attach attach} method and then later retrieved via
                  the {@link #attachment() attachment} method.
                  &lt;p&gt; Selection keys are safe for use by multiple concurrent threads.  The
                  operations of reading and writing the interest set will, in general, be
                  synchronized with certain operations of the selector.  Exactly how this
                  synchronization is performed is implementation-dependent: In a naive
                  implementation, reading or writing the interest set may block indefinitely
                  if a selection operation is already in progress; in a high-performance
                  implementation, reading or writing the interest set may block briefly, if at
                  all.  In any case, a selection operation will always use the interest-set
                  value that was current at the moment that the operation began.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
                <see>
                    SelectableChannel                    
                </see>
                <see>
                    Selector                    
                </see>
            </javadoc>
            <javadoc line="64">
                Constructs an instance of this class.                
            </javadoc>
            <method name="SelectionKey" type="constructor" line="67"/>
            <method name="channel" type="SelectableChannel" line="69"/>
            <javadoc line="69">
                Returns the channel for which this key was created.  This method will
                  continue to return the channel even after the key is cancelled.  &lt;/p&gt;                
                <return>
                    This key&apos;s channel                    
                </return>
            </javadoc>
            <method name="selector" type="Selector" line="75"/>
            <javadoc line="75">
                Returns the selector for which this key was created.  This method will
                  continue to return the selector even after the key is cancelled.  &lt;/p&gt;                
                <return>
                    This key&apos;s selector                    
                </return>
            </javadoc>
            <method name="isValid" type="boolean" line="81"/>
            <javadoc line="81">
                Tells whether or not this key is valid.
                  &lt;p&gt; A key is valid upon creation and remains so until it is cancelled,
                  its channel is closed, or its selector is closed.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this key is valid                    
                </return>
            </javadoc>
            <method name="cancel" type="void" line="88"/>
            <javadoc line="88">
                Requests that the registration of this key&apos;s channel with its selector
                  be cancelled.  Upon return the key will be invalid and will have been
                  added to its selector&apos;s cancelled-key set.  The key will be removed from
                  all of the selector&apos;s key sets during the next selection operation.
                  &lt;p&gt; If this key has already been cancelled then invoking this method has
                  no effect.  Once cancelled, a key remains forever invalid. &lt;/p&gt;
                  &lt;p&gt; This method may be invoked at any time.  It synchronizes on the
                  selector&apos;s cancelled-key set, and therefore may block briefly if invoked
                  concurrently with a cancellation or selection operation involving the
                  same selector.  &lt;/p&gt;                
            </javadoc>
            <method name="interestOps" type="int" line="101"/>
            <javadoc line="101">
                Retrieves this key&apos;s interest set.
                  &lt;p&gt; It is guaranteed that the returned set will only contain operation
                  bits that are valid for this key&apos;s channel.
                  &lt;p&gt; This method may be invoked at any time.  Whether or not it blocks,
                  and for how long, is implementation-dependent.  &lt;/p&gt;                
                <return>
                    This key&apos;s interest set                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="interestOps" type="SelectionKey" line="111"/>
            <javadoc line="111">
                Sets this key&apos;s interest set to the given value.
                  &lt;p&gt; This method may be invoked at any time.  Whether or not it blocks,
                  and for how long, is implementation-dependent.  &lt;/p&gt;                
                <param>
                    ops  The new interest set                    
                </param>
                <return>
                    This selection key                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf a bit in the set does not correspond to an operation that
                      is supported by this key&apos;s channel, that is, if
                      &lt;tt&gt;(ops &amp; ~channel().validOps()) != 0&lt;/tt&gt;                    
                </throws>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="readyOps" type="int" line="123"/>
            <javadoc line="123">
                Retrieves this key&apos;s ready-operation set.
                  &lt;p&gt; It is guaranteed that the returned set will only contain operation
                  bits that are valid for this key&apos;s channel.  &lt;/p&gt;                
                <return>
                    This key&apos;s ready-operation set                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <declaration name="OP_READ" type="int" line="131"/>
            <javadoc line="131">
                Operation-set bit for read operations.
                  &lt;p&gt; Suppose that a selection key&apos;s interest set contains
                  &lt;tt&gt;OP_READ&lt;/tt&gt; at the start of a &lt;a
                  href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector
                  detects that the corresponding channel is ready for reading, has reached
                  end-of-stream, has been remotely shut down for further reading, or has
                  an error pending, then it will add &lt;tt&gt;OP_READ&lt;/tt&gt; to the key&apos;s
                  ready-operation set and add the key to its selected-key&amp;nbsp;set.  &lt;/p&gt;                
            </javadoc>
            <declaration name="OP_WRITE" type="int" line="142"/>
            <javadoc line="142">
                Operation-set bit for write operations.  &lt;/p&gt;
                  &lt;p&gt; Suppose that a selection key&apos;s interest set contains
                  &lt;tt&gt;OP_WRITE&lt;/tt&gt; at the start of a &lt;a
                  href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector
                  detects that the corresponding channel is ready for writing, has been
                  remotely shut down for further writing, or has an error pending, then it
                  will add &lt;tt&gt;OP_WRITE&lt;/tt&gt; to the key&apos;s ready set and add the key to its
                  selected-key&amp;nbsp;set.  &lt;/p&gt;                
            </javadoc>
            <declaration name="OP_CONNECT" type="int" line="153"/>
            <javadoc line="153">
                Operation-set bit for socket-connect operations.  &lt;/p&gt;
                  &lt;p&gt; Suppose that a selection key&apos;s interest set contains
                  &lt;tt&gt;OP_CONNECT&lt;/tt&gt; at the start of a &lt;a
                  href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector
                  detects that the corresponding socket channel is ready to complete its
                  connection sequence, or has an error pending, then it will add
                  &lt;tt&gt;OP_CONNECT&lt;/tt&gt; to the key&apos;s ready set and add the key to its
                  selected-key&amp;nbsp;set.  &lt;/p&gt;                
            </javadoc>
            <declaration name="OP_ACCEPT" type="int" line="164"/>
            <javadoc line="164">
                Operation-set bit for socket-accept operations.  &lt;/p&gt;
                  &lt;p&gt; Suppose that a selection key&apos;s interest set contains
                  &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; at the start of a &lt;a
                  href=&quot;Selector.html#selop&quot;&gt;selection operation&lt;/a&gt;.  If the selector
                  detects that the corresponding server-socket channel is ready to accept
                  another connection, or has an error pending, then it will add
                  &lt;tt&gt;OP_ACCEPT&lt;/tt&gt; to the key&apos;s ready set and add the key to its
                  selected-key&amp;nbsp;set.  &lt;/p&gt;                
            </javadoc>
            <javadoc line="175">
                Tests whether this key&apos;s channel is ready for reading.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;k.isReadable()&lt;/tt&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  k.readyOps()&amp;nbsp;&amp;amp;&amp;nbsp;OP_READ&amp;nbsp;!=&amp;nbsp;0&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; If this key&apos;s channel does not support read operations then this
                  method always returns &lt;tt&gt;false&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if,
                      &lt;tt&gt;readyOps()&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;OP_READ&lt;/tt&gt; is
                      nonzero                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="isReadable" type="boolean" line="188"/>
            <javadoc line="191">
                Tests whether this key&apos;s channel is ready for writing.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;k.isWritable()&lt;/tt&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  k.readyOps()&amp;nbsp;&amp;amp;&amp;nbsp;OP_WRITE&amp;nbsp;!=&amp;nbsp;0&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; If this key&apos;s channel does not support write operations then this
                  method always returns &lt;tt&gt;false&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if,
                      &lt;tt&gt;readyOps()&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;OP_WRITE&lt;/tt&gt;
                      is nonzero                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="isWritable" type="boolean" line="204"/>
            <javadoc line="207">
                Tests whether this key&apos;s channel has either finished, or failed to
                  finish, its socket-connection operation.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;k.isConnectable()&lt;/tt&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  k.readyOps()&amp;nbsp;&amp;amp;&amp;nbsp;OP_CONNECT&amp;nbsp;!=&amp;nbsp;0&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; If this key&apos;s channel does not support socket-connect operations
                  then this method always returns &lt;tt&gt;false&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if,
                      &lt;tt&gt;readyOps()&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;OP_CONNECT&lt;/tt&gt;
                      is nonzero                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="isConnectable" type="boolean" line="221"/>
            <javadoc line="224">
                Tests whether this key&apos;s channel is ready to accept a new socket
                  connection.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;k.isAcceptable()&lt;/tt&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  k.readyOps()&amp;nbsp;&amp;amp;&amp;nbsp;OP_ACCEPT&amp;nbsp;!=&amp;nbsp;0&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; If this key&apos;s channel does not support socket-accept operations then
                  this method always returns &lt;tt&gt;false&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if,
                      &lt;tt&gt;readyOps()&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;OP_ACCEPT&lt;/tt&gt;
                      is nonzero                    
                </return>
                <throws>
                    CancelledKeyExceptionIf this key has been cancelled                    
                </throws>
            </javadoc>
            <method name="isAcceptable" type="boolean" line="238"/>
            <declaration name="attachment" type="Object" line="241"/>
            <declaration name="attachmentUpdater" type="AtomicReferenceFieldUpdater&amp;lt;SelectionKey,Object&amp;gt;" line="242"/>
            <javadoc line="243">
                Attaches the given object to this key.
                  &lt;p&gt; An attached object may later be retrieved via the {@link #attachment()attachment} method.  Only one object may be attached at a time; invoking
                  this method causes any previous attachment to be discarded.  The current
                  attachment may be discarded by attaching &lt;tt&gt;null&lt;/tt&gt;.  &lt;/p&gt;                
                <param>
                    obThe object to be attached; may be &lt;tt&gt;null&lt;/tt&gt;                    
                </param>
                <return>
                    The previously-attached object, if any,
                      otherwise &lt;tt&gt;null&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="attach" type="Object" line="252">
                <params>
                    <param name="ob" type="Object"/>
                </params>
            </method>
            <javadoc line="255">
                Retrieves the current attachment.  &lt;/p&gt;                
                <return>
                    The object currently attached to this key,
                      or &lt;tt&gt;null&lt;/tt&gt; if there is no attachment                    
                </return>
            </javadoc>
            <method name="attachment" type="Object" line="260"/>
        </class>
    </source>