<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels.spi">
        <import package="java.io.IOException"/>
        <import package="java.net.ProtocolFamily"/>
        <import package="java.nio.channels"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.ServiceConfigurationError"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="SelectorProvider" line="39">
            <javadoc line="39">
                Service-provider class for selectors and selectable channels.
                  &lt;p&gt; A selector provider is a concrete subclass of this class that has a
                  zero-argument constructor and implements the abstract methods specified
                  below.  A given invocation of the Java virtual machine maintains a single
                  system-wide default provider instance, which is returned by the {@link #provider() provider} method.  The first invocation of that method will locate
                  the default provider as specified below.
                  &lt;p&gt; The system-wide default provider is used by the static &lt;tt&gt;open&lt;/tt&gt;
                  methods of the {@link java.nio.channels.DatagramChannel#openDatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link java.nio.channels.Selector#open Selector}, {@link java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also
                  used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}method. A program may make use of a provider other than the default provider
                  by instantiating that provider and then directly invoking the &lt;tt&gt;open&lt;/tt&gt;
                  methods defined in this class.
                  &lt;p&gt; All of the methods in this class are safe for use by multiple concurrent
                  threads.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="lock" type="Object" line="71"/>
            <declaration name="provider" type="SelectorProvider" line="72"/>
            <javadoc line="74">
                Initializes a new instance of this class.  &lt;/p&gt;                
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link RuntimePermission}<tt>("selectorProvider")</tt>                    
                </throws>
            </javadoc>
            <method name="SelectorProvider" type="constructor" line="81">
                <declaration name="sm" type="SecurityManager" line="82"/>
            </method>
            <method name="loadProviderFromProperty" type="boolean" line="87">
                <declaration name="cn" type="String" line="88"/>
                <scope line="91">
                    <declaration name="c" type="Class&lt;?&gt;" line="92"/>
                </scope>
                <scope line="96"/>
                <scope line="98"/>
                <scope line="100"/>
                <scope line="102"/>
            </method>
            <method name="loadProviderAsService" type="boolean" line="107">
                <comment line="121">
                    Ignore the security exception, try the next provider                    
                </comment>
                <declaration name="sl" type="ServiceLoader&lt;SelectorProvider&gt;" line="109"/>
                <declaration name="i" type="Iterator&lt;SelectorProvider&gt;" line="112"/>
                <scope line="113">
                    <scope line="114"/>
                    <scope line="119">
                        <scope line="120"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="129">
                Returns the system-wide default selector provider for this invocation of
                  the Java virtual machine.
                  &lt;p&gt; The first invocation of this method locates the default provider
                  object as follows: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; If the system property
                  &lt;tt&gt;java.nio.channels.spi.SelectorProvider&lt;/tt&gt; is defined then it is
                  taken to be the fully-qualified name of a concrete provider class.
                  The class is loaded and instantiated; if this process fails then an
                  unspecified error is thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If a provider class has been installed in a jar file that is
                  visible to the system class loader, and that jar file contains a
                  provider-configuration file named
                  &lt;tt&gt;java.nio.channels.spi.SelectorProvider&lt;/tt&gt; in the resource
                  directory &lt;tt&gt;META-INF/services&lt;/tt&gt;, then the first class name
                  specified in that file is taken.  The class is loaded and
                  instantiated; if this process fails then an unspecified error is
                  thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Finally, if no provider has been specified by any of the above
                  means then the system-default provider class is instantiated and the
                  result is returned.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Subsequent invocations of this method return the provider that was
                  returned by the first invocation.  &lt;/p&gt;                
                <return>
                    The system-wide default selector provider                    
                </return>
            </javadoc>
            <method name="provider" type="SelectorProvider" line="164">
                <scope line="165">
                    <anonymous_class line="169">
                        <method name="run" type="SelectorProvider" line="170"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="openDatagramChannel" type="DatagramChannel" line="182"/>
            <javadoc line="182">
                Opens a datagram channel.  &lt;/p&gt;                
                <return>
                    The new channel                    
                </return>
            </javadoc>
            <method name="openDatagramChannel" type="DatagramChannel" line="190"/>
            <javadoc line="190">
                Opens a datagram channel.                
                <param>
                    familyThe protocol family                    
                </param>
                <return>
                    A new datagram channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the specified protocol family is not supported                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="openPipe" type="Pipe" line="208"/>
            <javadoc line="208">
                Opens a pipe. &lt;/p&gt;                
                <return>
                    The new pipe                    
                </return>
            </javadoc>
            <method name="openSelector" type="AbstractSelector" line="216"/>
            <javadoc line="216">
                Opens a selector.  &lt;/p&gt;                
                <return>
                    The new selector                    
                </return>
            </javadoc>
            <method name="openServerSocketChannel" type="ServerSocketChannel" line="224"/>
            <javadoc line="224">
                Opens a server-socket channel.  &lt;/p&gt;                
                <return>
                    The new channel                    
                </return>
            </javadoc>
            <method name="openSocketChannel" type="SocketChannel" line="232"/>
            <javadoc line="232">
                Opens a socket channel. &lt;/p&gt;                
                <return>
                    The new channel                    
                </return>
            </javadoc>
            <javadoc line="240">
                Returns the channel inherited from the entity that created this
                  Java virtual machine.
                  &lt;p&gt; On many operating systems a process, such as a Java virtual
                  machine, can be started in a manner that allows the process to
                  inherit a channel from the entity that created the process. The
                  manner in which this is done is system dependent, as are the
                  possible entities to which the channel may be connected. For example,
                  on UNIX systems, the Internet services daemon (&lt;i&gt;inetd&lt;/i&gt;) is used to
                  start programs to service requests when a request arrives on an
                  associated network port. In this example, the process that is started,
                  inherits a channel representing a network socket.
                  &lt;p&gt; In cases where the inherited channel represents a network socket
                  then the {@link java.nio.channels.Channel Channel} type returned
                  by this method is determined as follows:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt; If the inherited channel represents a stream-oriented connected
                  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is
                  returned. The socket channel is, at least initially, in blocking
                  mode, bound to a socket address, and connected to a peer.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If the inherited channel represents a stream-oriented listening
                  socket then a {@link java.nio.channels.ServerSocketChannelServerSocketChannel} is returned. The server-socket channel is, at
                  least initially, in blocking mode, and bound to a socket address.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If the inherited channel is a datagram-oriented socket
                  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is
                  returned. The datagram channel is, at least initially, in blocking
                  mode, and bound to a socket address.
                  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; In addition to the network-oriented channels described, this method
                  may return other kinds of channels in the future.
                  &lt;p&gt; The first invocation of this method creates the channel that is
                  returned. Subsequent invocations of this method return the same
                  channel. &lt;/p&gt;                
                <return>
                    The inherited channel, if any, otherwise <tt>null</tt>.                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link RuntimePermission}<tt>("inheritedChannel")</tt>                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="inheritedChannel" type="Channel" line="298"/>
        </class>
    </source>