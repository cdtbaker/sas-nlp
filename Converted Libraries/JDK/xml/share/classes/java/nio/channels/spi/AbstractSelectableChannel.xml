<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels.spi">
        <import package="java.io.IOException"/>
        <import package="java.nio.channels"/>
        <class name="AbstractSelectableChannel" line="32">
            <extends class="SelectableChannel"/>
            <comment line="55">
                The provider that created this channel                
            </comment>
            <comment line="58">
                Keys that have been created by registering this channel with selectors.                
            </comment>
            <comment line="59">
                They are saved because if this channel is closed the keys must be                
            </comment>
            <comment line="60">
                deregistered.  Protected by keyLock.                
            </comment>
            <comment line="61">
                                
            </comment>
            <comment line="65">
                Lock for key set and count                
            </comment>
            <comment line="68">
                Lock for registration and configureBlocking operations                
            </comment>
            <comment line="71">
                Blocking mode, protected by regLock                
            </comment>
            <comment line="91">
                -- Utility methods for the key set --                
            </comment>
            <comment line="152">
                -- Registration --                
            </comment>
            <comment line="216">
                -- Closing --                
            </comment>
            <comment line="256">
                -- Blocking --                
            </comment>
            <javadoc line="32">
                Base implementation class for selectable channels.
                  &lt;p&gt; This class defines methods that handle the mechanics of channel
                  registration, deregistration, and closing.  It maintains the current
                  blocking mode of this channel as well as its current set of selection keys.
                  It performs all of the synchronization required to implement the {@link java.nio.channels.SelectableChannel} specification.  Implementations of the
                  abstract protected methods defined in this class need not synchronize
                  against other threads that might be engaged in the same operations.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    Mike McCloskey                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="provider" type="SelectorProvider" line="55"/>
            <declaration name="keys" type="SelectionKey[]" line="61"/>
            <declaration name="keyCount" type="int" line="62"/>
            <declaration name="keyLock" type="Object" line="65"/>
            <declaration name="regLock" type="Object" line="68"/>
            <declaration name="blocking" type="boolean" line="71"/>
            <javadoc line="73">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="AbstractSelectableChannel" type="constructor" line="76">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="80">
                Returns the provider that created this channel.                
                <return>
                    The provider that created this channel                    
                </return>
            </javadoc>
            <method name="provider" type="SelectorProvider" line="85"/>
            <method name="addKey" type="void" line="92">
                <params>
                    <param name="k" type="SelectionKey"/>
                </params>
                <comment line="96">
                    Find empty element of key array                    
                </comment>
                <comment line="103">
                    Grow key array                    
                </comment>
                <scope line="93">
                    <declaration name="i" type="int" line="94"/>
                    <scope line="95"/>
                    <scope line="100"/>
                    <scope line="102">
                        <declaration name="n" type="int" line="104"/>
                        <declaration name="ks" type="SelectionKey[]" line="105"/>
                    </scope>
                </scope>
            </method>
            <method name="findKey" type="SelectionKey" line="116">
                <params>
                    <param name="sel" type="Selector"/>
                </params>
                <scope line="117"/>
            </method>
            <method name="removeKey" type="void" line="127">
                <params>
                    <param name="k" type="SelectionKey"/>
                </params>
                <scope line="128">
                    <scope line="130"/>
                </scope>
            </method>
            <method name="haveValidKeys" type="boolean" line="138">
                <scope line="139">
                    <scope line="142"/>
                </scope>
            </method>
            <method name="isRegistered" type="boolean" line="153">
                <scope line="154"/>
            </method>
            <method name="keyFor" type="SelectionKey" line="159">
                <params>
                    <param name="sel" type="Selector"/>
                </params>
            </method>
            <javadoc line="163">
                Registers this channel with the given selector, returning a selection key.
                  &lt;p&gt;  This method first verifies that this channel is open and that the
                  given initial interest set is valid.
                  &lt;p&gt; If this channel is already registered with the given selector then
                  the selection key representing that registration is returned after
                  setting its interest set to the given value.
                  &lt;p&gt; Otherwise this channel has not yet been registered with the given
                  selector, so the {@link AbstractSelector#register register} method of
                  the selector is invoked while holding the appropriate locks.  The
                  resulting key is added to this channel&apos;s key set before being returned.
                  &lt;/p&gt;                
                <throws>
                    ClosedSelectorException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalBlockingModeException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalSelectorException {@inheritDoc}                    
                </throws>
                <throws>
                    CancelledKeyException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="register" type="SelectionKey" line="192">
                <params>
                    <param name="sel" type="Selector"/>
                    <param name="ops" type="int"/>
                    <param name="att" type="Object"/>
                </params>
                <comment line="206">
                    New registration                    
                </comment>
                <scope line="197">
                    <declaration name="k" type="SelectionKey" line="200"/>
                    <scope line="201"/>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="217">
                Closes this channel.
                  &lt;p&gt; This method, which is specified in the {@link AbstractInterruptibleChannel} class and is invoked by the {@link java.nio.channels.Channel#close close} method, in turn invokes the{@link #implCloseSelectableChannel implCloseSelectableChannel} method in
                  order to perform the actual work of closing this channel.  It then
                  cancels all of this channel&apos;s keys.  &lt;/p&gt;                
            </javadoc>
            <method name="implCloseChannel" type="void" line="227">
                <scope line="229">
                    <declaration name="count" type="int" line="230"/>
                    <scope line="231">
                        <declaration name="k" type="SelectionKey" line="232"/>
                    </scope>
                </scope>
            </method>
            <method name="implCloseSelectableChannel" type="void" line="239"/>
            <javadoc line="239">
                Closes this selectable channel.
                  &lt;p&gt; This method is invoked by the {@link java.nio.channels.Channel#closeclose} method in order to perform the actual work of closing the
                  channel.  This method is only invoked if the channel has not yet been
                  closed, and it is never invoked more than once.
                  &lt;p&gt; An implementation of this method must arrange for any other thread
                  that is blocked in an I/O operation upon this channel to return
                  immediately, either by throwing an exception or by returning normally.
                  &lt;/p&gt;                
            </javadoc>
            <method name="isBlocking" type="boolean" line="257">
                <scope line="258"/>
            </method>
            <method name="blockingLock" type="Object" line="263"/>
            <javadoc line="267">
                Adjusts this channel&apos;s blocking mode.
                  &lt;p&gt; If the given blocking mode is different from the current blocking
                  mode then this method invokes the {@link #implConfigureBlockingimplConfigureBlocking} method, while holding the appropriate locks, in
                  order to change the mode.  &lt;/p&gt;                
            </javadoc>
            <method name="configureBlocking" type="SelectableChannel" line="277">
                <params>
                    <param name="block" type="boolean"/>
                </params>
                <scope line="280"/>
            </method>
            <method name="implConfigureBlocking" type="void" line="291"/>
            <javadoc line="291">
                Adjusts this channel&apos;s blocking mode.
                  &lt;p&gt; This method is invoked by the {@link #configureBlockingconfigureBlocking} method in order to perform the actual work of
                  changing the blocking mode.  This method is only invoked if the new mode
                  is different from the current mode.  &lt;/p&gt;                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>