<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <interface name="ScatteringByteChannel">
            <implements interface="ReadableByteChannel"/>
            <javadoc line="4">
                A channel that can read bytes into a sequence of buffers.
                  &lt;p&gt; A &lt;i&gt;scattering&lt;/i&gt; read operation reads, in a single invocation, a
                  sequence of bytes into one or more of a given sequence of buffers.
                  Scattering reads are often useful when implementing network protocols or
                  file formats that, for example, group data into segments consisting of one
                  or more fixed-length headers followed by a variable-length body.  Similar
                  &lt;i&gt;gathering&lt;/i&gt; write operations are defined in the {@link GatheringByteChannel} interface.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="read" type="long" line="17"/>
            <javadoc line="17">
                Reads a sequence of bytes from this channel into a subsequence of the
                  given buffers.
                  &lt;p&gt; An invocation of this method attempts to read up to &lt;i&gt;r&lt;/i&gt; bytes
                  from this channel, where &lt;i&gt;r&lt;/i&gt; is the total number of bytes remaining
                  the specified subsequence of the given buffer array, that is,
                  &lt;blockquote&gt;&lt;pre&gt;
                  dsts[offset].remaining()
                  + dsts[offset+1].remaining()
                  + ... + dsts[offset+length-1].remaining()&lt;/pre&gt;&lt;/blockquote&gt;
                  at the moment that this method is invoked.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is read, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  Up to the first &lt;tt&gt;dsts[offset].remaining()&lt;/tt&gt; bytes of this sequence
                  are transferred into buffer &lt;tt&gt;dsts[offset]&lt;/tt&gt;, up to the next
                  &lt;tt&gt;dsts[offset+1].remaining()&lt;/tt&gt; bytes are transferred into buffer
                  &lt;tt&gt;dsts[offset+1]&lt;/tt&gt;, and so forth, until the entire byte sequence
                  is transferred into the given buffers.  As many bytes as possible are
                  transferred into each buffer, hence the final position of each updated
                  buffer, except the last updated buffer, is guaranteed to be equal to
                  that buffer&apos;s limit.
                  &lt;p&gt; This method may be invoked at any time.  If another thread has
                  already initiated a read operation upon this channel, however, then an
                  invocation of this method will block until the first operation is
                  complete. &lt;/p&gt;                
                <param>
                    dstsThe buffers into which bytes are to be transferred                    
                </param>
                <param>
                    offsetThe offset within the buffer array of the first buffer into
                      which bytes are to be transferred; must be non-negative and no
                      larger than <tt>dsts.length</tt>                    
                </param>
                <param>
                    lengthThe maximum number of buffers to be accessed; must be
                      non-negative and no larger than
                      <tt>dsts.length</tt>&nbsp;-&nbsp;<tt>offset</tt>                    
                </param>
                <return>
                    The number of bytes read, possibly zero,
                      or <tt>-1</tt> if the channel has reached end-of-stream                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf the preconditions on the <tt>offset</tt> and <tt>length</tt>
                      parameters do not hold                    
                </throws>
                <throws>
                    NonReadableChannelExceptionIf this channel was not opened for reading                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="read" type="long" line="64"/>
            <javadoc line="64">
                Reads a sequence of bytes from this channel into the given buffers.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;c.read(dsts)&lt;/tt&gt;
                  behaves in exactly the same manner as the invocation
                  &lt;blockquote&gt;&lt;pre&gt;
                  c.read(dsts, 0, dsts.length);&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    dstsThe buffers into which bytes are to be transferred                    
                </param>
                <return>
                    The number of bytes read, possibly zero,
                      or <tt>-1</tt> if the channel has reached end-of-stream                    
                </return>
                <throws>
                    NonReadableChannelExceptionIf this channel was not opened for reading                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>