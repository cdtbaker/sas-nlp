<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <interface name="WritableByteChannel">
            <implements interface="Channel"/>
            <javadoc line="4">
                A channel that can write bytes.
                  &lt;p&gt; Only one write operation upon a writable channel may be in progress at
                  any given time.  If one thread initiates a write operation upon a channel
                  then any other thread that attempts to initiate another write operation will
                  block until the first operation is complete.  Whether or not other kinds of
                  I/O operations may proceed concurrently with a write operation depends upon
                  the type of the channel. &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="write" type="int" line="17"/>
            <javadoc line="17">
                Writes a sequence of bytes to this channel from the given buffer.
                  &lt;p&gt; An attempt is made to write up to &lt;i&gt;r&lt;/i&gt; bytes to the channel,
                  where &lt;i&gt;r&lt;/i&gt; is the number of bytes remaining in the buffer, that is,
                  &lt;tt&gt;src.remaining()&lt;/tt&gt;, at the moment this method is invoked.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is written, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  This byte sequence will be transferred from the buffer starting at index
                  &lt;i&gt;p&lt;/i&gt;, where &lt;i&gt;p&lt;/i&gt; is the buffer&apos;s position at the moment this
                  method is invoked; the index of the last byte written will be
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;-&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;1&lt;/tt&gt;.
                  Upon return the buffer&apos;s position will be equal to
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;; its limit will not have changed.
                  &lt;p&gt; Unless otherwise specified, a write operation will return only after
                  writing all of the &lt;i&gt;r&lt;/i&gt; requested bytes.  Some types of channels,
                  depending upon their state, may write only some of the bytes or possibly
                  none at all.  A socket channel in non-blocking mode, for example, cannot
                  write any more bytes than are free in the socket&apos;s output buffer.
                  &lt;p&gt; This method may be invoked at any time.  If another thread has
                  already initiated a write operation upon this channel, however, then an
                  invocation of this method will block until the first operation is
                  complete. &lt;/p&gt;                
                <param>
                    srcThe buffer from which bytes are to be retrieved                    
                </param>
                <return>
                    The number of bytes written, possibly zero                    
                </return>
                <throws>
                    NonWritableChannelExceptionIf this channel was not opened for writing                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the write operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the write operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>