<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <class name="FileLock" line="3">
            <implements interface="AutoCloseable"/>
            <javadoc line="3">
                A token representing a lock on a region of a file.
                  &lt;p&gt; A file-lock object is created each time a lock is acquired on a file via
                  one of the {@link FileChannel#lock(long,long,boolean) lock} or {@link FileChannel#tryLock(long,long,boolean) tryLock} methods of the{@link FileChannel} class, or the {@link AsynchronousFileChannel#lock(long,long,boolean,Object,CompletionHandler) lock}or {@link AsynchronousFileChannel#tryLock(long,long,boolean) tryLock}methods of the {@link AsynchronousFileChannel} class.
                  &lt;p&gt; A file-lock object is initially valid.  It remains valid until the lock
                  is released by invoking the {@link #release release} method, by closing the
                  channel that was used to acquire it, or by the termination of the Java
                  virtual machine, whichever comes first.  The validity of a lock may be
                  tested by invoking its {@link #isValid isValid} method.
                  &lt;p&gt; A file lock is either &lt;i&gt;exclusive&lt;/i&gt; or &lt;i&gt;shared&lt;/i&gt;.  A shared lock
                  prevents other concurrently-running programs from acquiring an overlapping
                  exclusive lock, but does allow them to acquire overlapping shared locks.  An
                  exclusive lock prevents other programs from acquiring an overlapping lock of
                  either type.  Once it is released, a lock has no further effect on the locks
                  that may be acquired by other programs.
                  &lt;p&gt; Whether a lock is exclusive or shared may be determined by invoking its{@link #isShared isShared} method.  Some platforms do not support shared
                  locks, in which case a request for a shared lock is automatically converted
                  into a request for an exclusive lock.
                  &lt;p&gt; The locks held on a particular file by a single Java virtual machine do
                  not overlap.  The {@link #overlaps overlaps} method may be used to test
                  whether a candidate lock range overlaps an existing lock.
                  &lt;p&gt; A file-lock object records the file channel upon whose file the lock is
                  held, the type and validity of the lock, and the position and size of the
                  locked region.  Only the validity of a lock is subject to change over time;
                  all other aspects of a lock&apos;s state are immutable.
                  &lt;p&gt; File locks are held on behalf of the entire Java virtual machine.
                  They are not suitable for controlling access to a file by multiple
                  threads within the same virtual machine.
                  &lt;p&gt; File-lock objects are safe for use by multiple concurrent threads.
                  &lt;a name=&quot;pdep&quot;&gt;&lt;h4&gt; Platform dependencies &lt;/h4&gt;&lt;/a&gt;
                  &lt;p&gt; This file-locking API is intended to map directly to the native locking
                  facility of the underlying operating system.  Thus the locks held on a file
                  should be visible to all programs that have access to the file, regardless
                  of the language in which those programs are written.
                  &lt;p&gt; Whether or not a lock actually prevents another program from accessing
                  the content of the locked region is system-dependent and therefore
                  unspecified.  The native file-locking facilities of some systems are merely
                  &lt;i&gt;advisory&lt;/i&gt;, meaning that programs must cooperatively observe a known
                  locking protocol in order to guarantee data integrity.  On other systems
                  native file locks are &lt;i&gt;mandatory&lt;/i&gt;, meaning that if one program locks a
                  region of a file then other programs are actually prevented from accessing
                  that region in a way that would violate the lock.  On yet other systems,
                  whether native file locks are advisory or mandatory is configurable on a
                  per-file basis.  To ensure consistent and correct behavior across platforms,
                  it is strongly recommended that the locks provided by this API be used as if
                  they were advisory locks.
                  &lt;p&gt; On some systems, acquiring a mandatory lock on a region of a file
                  prevents that region from being {@link java.nio.channels.FileChannel#map&lt;i&gt;mapped into memory&lt;/i&gt;}, and vice versa.  Programs that combine
                  locking and mapping should be prepared for this combination to fail.
                  &lt;p&gt; On some systems, closing a channel releases all locks held by the Java
                  virtual machine on the underlying file regardless of whether the locks were
                  acquired via that channel or via another channel open on the same file.  It
                  is strongly recommended that, within a program, a unique channel be used to
                  acquire all locks on any given file.
                  &lt;p&gt; Some network filesystems permit file locking to be used with
                  memory-mapped files only when the locked regions are page-aligned and a
                  whole multiple of the underlying hardware&apos;s page size.  Some network
                  filesystems do not implement file locks on regions that extend past a
                  certain position, often 2&lt;sup&gt;30&lt;/sup&gt; or 2&lt;sup&gt;31&lt;/sup&gt;.  In general, great
                  care should be taken when locking files that reside on network filesystems.                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="channel" type="Channel" line="68"/>
            <declaration name="position" type="long" line="69"/>
            <declaration name="size" type="long" line="70"/>
            <declaration name="shared" type="boolean" line="71"/>
            <javadoc line="72">
                Initializes a new instance of this class.  &lt;/p&gt;                
                <param>
                    channelThe file channel upon whose file this lock is held                    
                </param>
                <param>
                    positionThe position within the file at which the locked region starts;
                      must be non-negative                    
                </param>
                <param>
                    sizeThe size of the locked region; must be non-negative, and the sum
                      &lt;tt&gt;position&lt;/tt&gt;&amp;nbsp;+&amp;nbsp;&lt;tt&gt;size&lt;/tt&gt; must be non-negative                    
                </param>
                <param>
                    shared&lt;tt&gt;true&lt;/tt&gt; if this lock is shared,
                      &lt;tt&gt;false&lt;/tt&gt; if it is exclusive                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the preconditions on the parameters do not hold                    
                </throws>
            </javadoc>
            <method name="FileLock" type="constructor" line="83">
                <params>
                    <param name="channel" type="FileChannel"/>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                </params>
            </method>
            <javadoc line="92">
                Initializes a new instance of this class.                
                <param>
                    channelThe channel upon whose file this lock is held                    
                </param>
                <param>
                    positionThe position within the file at which the locked region starts;
                      must be non-negative                    
                </param>
                <param>
                    sizeThe size of the locked region; must be non-negative, and the sum
                      &lt;tt&gt;position&lt;/tt&gt;&amp;nbsp;+&amp;nbsp;&lt;tt&gt;size&lt;/tt&gt; must be non-negative                    
                </param>
                <param>
                    shared&lt;tt&gt;true&lt;/tt&gt; if this lock is shared,
                      &lt;tt&gt;false&lt;/tt&gt; if it is exclusive                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the preconditions on the parameters do not hold                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="FileLock" type="constructor" line="104">
                <params>
                    <param name="channel" type="AsynchronousFileChannel"/>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                    <param name="shared" type="boolean"/>
                </params>
            </method>
            <javadoc line="113">
                Returns the file channel upon whose file this lock was acquired.
                  &lt;p&gt; This method has been superseded by the {@link #acquiredBy acquiredBy}method.                
                <return>
                    The file channel, or {@code null} if the file lock was not
                      acquired by a file channel.                    
                </return>
            </javadoc>
            <method name="channel" type="FileChannel" line="119"/>
            <javadoc line="122">
                Returns the channel upon whose file this lock was acquired.                
                <return>
                    The channel upon whose file this lock was acquired.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="acquiredBy" type="Channel" line="127"/>
            <javadoc line="130">
                Returns the position within the file of the first byte of the locked
                  region.
                  &lt;p&gt; A locked region need not be contained within, or even overlap, the
                  actual underlying file, so the value returned by this method may exceed
                  the file&apos;s current size.  &lt;/p&gt;                
                <return>
                    The position                    
                </return>
            </javadoc>
            <method name="position" type="long" line="138"/>
            <javadoc line="141">
                Returns the size of the locked region in bytes.
                  &lt;p&gt; A locked region need not be contained within, or even overlap, the
                  actual underlying file, so the value returned by this method may exceed
                  the file&apos;s current size.  &lt;/p&gt;                
                <return>
                    The size of the locked region                    
                </return>
            </javadoc>
            <method name="size" type="long" line="148"/>
            <javadoc line="151">
                Tells whether this lock is shared.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if lock is shared,
                      &lt;tt&gt;false&lt;/tt&gt; if it is exclusive                    
                </return>
            </javadoc>
            <method name="isShared" type="boolean" line="156"/>
            <javadoc line="159">
                Tells whether or not this lock overlaps the given lock range.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this lock and the given lock
                      range overlap by at least one byte                    
                </return>
            </javadoc>
            <method name="overlaps" type="boolean" line="164">
                <params>
                    <param name="position" type="long"/>
                    <param name="size" type="long"/>
                </params>
            </method>
            <method name="isValid" type="boolean" line="169"/>
            <javadoc line="169">
                Tells whether or not this lock is valid.
                  &lt;p&gt; A lock object remains valid until it is released or the associated
                  file channel is closed, whichever comes first.  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this lock is valid                    
                </return>
            </javadoc>
            <method name="release" type="void" line="176"/>
            <javadoc line="176">
                Releases this lock.
                  &lt;p&gt; If this lock object is valid then invoking this method releases the
                  lock and renders the object invalid.  If this lock object is invalid
                  then invoking this method has no effect.  &lt;/p&gt;                
                <throws>
                    ClosedChannelExceptionIf the channel that was used to acquire this lock
                      is no longer open                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <javadoc line="186">
                This method invokes the {@link #release} method. It was added
                  to the class so that it could be used in conjunction with the
                  automatic resource management block construct.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="close" type="void" line="192"/>
            <javadoc line="195">
                Returns a string describing the range, type, and validity of this lock.                
                <return>
                    A descriptive string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="199"/>
        </class>
    </source>