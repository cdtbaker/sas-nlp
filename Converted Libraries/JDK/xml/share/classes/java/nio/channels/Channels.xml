<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Reader"/>
        <import package="java.io.Writer"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetDecoder"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <import package="java.nio.channels.spi.AbstractInterruptibleChannel"/>
        <import package="java.util.concurrent.ExecutionException"/>
        <import package="sun.nio.ch.ChannelInputStream"/>
        <import package="sun.nio.cs.StreamDecoder"/>
        <import package="sun.nio.cs.StreamEncoder"/>
        <class name="Channels" line="47">
            <comment line="64">
                No instantiation                
            </comment>
            <comment line="106">
                -- Byte streams from channels --                
            </comment>
            <comment line="333">
                -- Channels from streams --                
            </comment>
            <comment line="476">
                -- Character streams from channels --                
            </comment>
            <javadoc line="47">
                Utility methods for channels and streams.
                  &lt;p&gt; This class defines static methods that support the interoperation of the
                  stream classes of the &lt;tt&gt;{@link java.io}&lt;/tt&gt; package with the channel
                  classes of this package.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    Mike McCloskey                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Channels" type="constructor" line="63"/>
            <method name="checkNotNull" type="void" line="65">
                <params>
                    <param name="o" type="Object"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="70">
                Write all remaining bytes in buffer to the given channel.
                  If the channel is selectable then it must be configured blocking.                
            </javadoc>
            <method name="writeFullyImpl" type="void" line="76">
                <params>
                    <param name="ch" type="WritableByteChannel"/>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <scope line="77">
                    <declaration name="n" type="int" line="78"/>
                </scope>
            </method>
            <javadoc line="84">
                Write all remaining bytes in buffer to the given channel.                
                <throws>
                    IllegalBlockingExceptionIf the channel is selectable and configured non-blocking.                    
                </throws>
            </javadoc>
            <method name="writeFully" type="void" line="92">
                <params>
                    <param name="ch" type="WritableByteChannel"/>
                    <param name="bb" type="ByteBuffer"/>
                </params>
                <scope line="93">
                    <declaration name="sc" type="SelectableChannel" line="94"/>
                    <scope line="95"/>
                </scope>
                <scope line="100"/>
            </method>
            <javadoc line="107">
                Constructs a stream that reads bytes from the given channel.
                  &lt;p&gt; The &lt;tt&gt;read&lt;/tt&gt; methods of the resulting stream will throw an{@link IllegalBlockingModeException} if invoked while the underlying
                  channel is in non-blocking mode.  The stream will not be buffered, and
                  it will not support the {@link InputStream#mark mark} or {@link InputStream#reset reset} methods.  The stream will be safe for access by
                  multiple concurrent threads.  Closing the stream will in turn cause the
                  channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel from which bytes will be read                    
                </param>
                <return>
                    A new input stream                    
                </return>
            </javadoc>
            <method name="newInputStream" type="InputStream" line="123">
                <params>
                    <param name="ch" type="ReadableByteChannel"/>
                </params>
            </method>
            <javadoc line="128">
                Constructs a stream that writes bytes to the given channel.
                  &lt;p&gt; The &lt;tt&gt;write&lt;/tt&gt; methods of the resulting stream will throw an{@link IllegalBlockingModeException} if invoked while the underlying
                  channel is in non-blocking mode.  The stream will not be buffered.  The
                  stream will be safe for access by multiple concurrent threads.  Closing
                  the stream will in turn cause the channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel to which bytes will be written                    
                </param>
                <return>
                    A new output stream                    
                </return>
            </javadoc>
            <method name="newOutputStream" type="OutputStream" line="142">
                <params>
                    <param name="ch" type="WritableByteChannel"/>
                </params>
                <comment line="148">
                    Invoker&apos;s previous array                    
                </comment>
                <anonymous_class line="145">
                    <declaration name="bb" type="ByteBuffer" line="147"/>
                    <declaration name="bs" type="byte[]" line="148"/>
                    <declaration name="b1" type="byte[]" line="149"/>
                    <method name="write" type="void" line="151">
                        <params>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="160">
                        <params>
                            <param name="bs" type="byte[]"/>
                            <param name="off" type="int"/>
                            <param name="len" type="int"/>
                        </params>
                        <scope line="162"/>
                        <scope line="164"/>
                        <declaration name="bb" type="ByteBuffer" line="167"/>
                    </method>
                    <method name="close" type="void" line="177"/>
                </anonymous_class>
            </method>
            <javadoc line="184">
                Constructs a stream that reads bytes from the given channel.
                  &lt;p&gt; The stream will not be buffered, and it will not support the {@link InputStream#mark mark} or {@link InputStream#reset reset} methods.  The
                  stream will be safe for access by multiple concurrent threads.  Closing
                  the stream will in turn cause the channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel from which bytes will be read                    
                </param>
                <return>
                    A new input stream                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="newInputStream" type="InputStream" line="199">
                <params>
                    <param name="ch" type="AsynchronousByteChannel"/>
                </params>
                <comment line="204">
                    Invoker&apos;s previous array                    
                </comment>
                <anonymous_class line="201">
                    <declaration name="bb" type="ByteBuffer" line="203"/>
                    <declaration name="bs" type="byte[]" line="204"/>
                    <declaration name="b1" type="byte[]" line="205"/>
                    <method name="read" type="int" line="208">
                        <declaration name="n" type="int" line="211"/>
                    </method>
                    <method name="read" type="int" line="220">
                        <params>
                            <param name="bs" type="byte[]"/>
                            <param name="off" type="int"/>
                            <param name="len" type="int"/>
                        </params>
                        <scope line="222"/>
                        <declaration name="bb" type="ByteBuffer" line="227"/>
                        <declaration name="interrupted" type="boolean" line="235"/>
                        <scope line="236">
                            <scope line="237">
                                <scope line="238"/>
                                <scope line="240"/>
                                <scope line="242"/>
                            </scope>
                        </scope>
                        <scope line="246"/>
                    </method>
                    <method name="close" type="void" line="253"/>
                </anonymous_class>
            </method>
            <javadoc line="259">
                Constructs a stream that writes bytes to the given channel.
                  &lt;p&gt; The stream will not be buffered. The stream will be safe for access
                  by multiple concurrent threads.  Closing the stream will in turn cause
                  the channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel to which bytes will be written                    
                </param>
                <return>
                    A new output stream                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="newOutputStream" type="OutputStream" line="273">
                <params>
                    <param name="ch" type="AsynchronousByteChannel"/>
                </params>
                <comment line="278">
                    Invoker&apos;s previous array                    
                </comment>
                <anonymous_class line="275">
                    <declaration name="bb" type="ByteBuffer" line="277"/>
                    <declaration name="bs" type="byte[]" line="278"/>
                    <declaration name="b1" type="byte[]" line="279"/>
                    <method name="write" type="void" line="282">
                        <params>
                            <param name="b" type="int"/>
                        </params>
                    </method>
                    <method name="write" type="void" line="292">
                        <params>
                            <param name="bs" type="byte[]"/>
                            <param name="off" type="int"/>
                            <param name="len" type="int"/>
                        </params>
                        <scope line="294"/>
                        <scope line="296"/>
                        <declaration name="bb" type="ByteBuffer" line="299"/>
                        <declaration name="interrupted" type="boolean" line="307"/>
                        <scope line="308">
                            <scope line="309">
                                <scope line="310"/>
                                <scope line="312"/>
                                <scope line="314"/>
                            </scope>
                        </scope>
                        <scope line="318"/>
                    </method>
                    <method name="close" type="void" line="325"/>
                </anonymous_class>
            </method>
            <javadoc line="334">
                Constructs a channel that reads bytes from the given stream.
                  &lt;p&gt; The resulting channel will not be buffered; it will simply redirect
                  its I/O operations to the given stream.  Closing the channel will in
                  turn cause the stream to be closed.  &lt;/p&gt;                
                <param>
                    inThe stream from which bytes are to be read                    
                </param>
                <return>
                    A new readable byte channel                    
                </return>
            </javadoc>
            <method name="newChannel" type="ReadableByteChannel" line="346">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="350"/>
            </method>
            <class name="ReadableByteChannelImpl" line="357">
                <extends class="AbstractInterruptibleChannel"/>
                <comment line="359">
                    Not really interruptible                    
                </comment>
                <comment line="434">
                    Not really interruptible                    
                </comment>
                <implements interface="ReadableByteChannel"/>
                <declaration name="in" type="InputStream" line="361"/>
                <declaration name="TRANSFER_SIZE" type="int" line="362"/>
                <declaration name="buf" type="byte" line="363"/>
                <declaration name="open" type="boolean" line="364"/>
                <declaration name="readLock" type="Object" line="365"/>
                <method name="ReadableByteChannelImpl" type="constructor" line="367">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                </method>
                <method name="read" type="int" line="371">
                    <params>
                        <param name="dst" type="ByteBuffer"/>
                    </params>
                    <comment line="382">
                        block at most once                        
                    </comment>
                    <declaration name="len" type="int" line="372"/>
                    <declaration name="totalRead" type="int" line="373"/>
                    <declaration name="bytesRead" type="int" line="374"/>
                    <scope line="375">
                        <scope line="376">
                            <declaration name="bytesToRead" type="int" line="377"/>
                            <scope line="383"/>
                            <scope line="386"/>
                        </scope>
                    </scope>
                </method>
                <method name="implCloseChannel" type="void" line="402"/>
            </class>
            <javadoc line="409">
                Constructs a channel that writes bytes to the given stream.
                  &lt;p&gt; The resulting channel will not be buffered; it will simply redirect
                  its I/O operations to the given stream.  Closing the channel will in
                  turn cause the stream to be closed.  &lt;/p&gt;                
                <param>
                    outThe stream to which bytes are to be written                    
                </param>
                <return>
                    A new writable byte channel                    
                </return>
            </javadoc>
            <method name="newChannel" type="WritableByteChannel" line="421">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="425"/>
            </method>
            <class name="WritableByteChannelImpl" line="432">
                <extends class="AbstractInterruptibleChannel"/>
                <comment line="359">
                    Not really interruptible                    
                </comment>
                <comment line="434">
                    Not really interruptible                    
                </comment>
                <implements interface="WritableByteChannel"/>
                <declaration name="out" type="OutputStream" line="436"/>
                <declaration name="TRANSFER_SIZE" type="int" line="437"/>
                <declaration name="buf" type="byte" line="438"/>
                <declaration name="open" type="boolean" line="439"/>
                <declaration name="writeLock" type="Object" line="440"/>
                <method name="WritableByteChannelImpl" type="constructor" line="442">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
                <method name="write" type="int" line="446">
                    <params>
                        <param name="src" type="ByteBuffer"/>
                    </params>
                    <declaration name="len" type="int" line="447"/>
                    <declaration name="totalWritten" type="int" line="448"/>
                    <scope line="449">
                        <scope line="450">
                            <declaration name="bytesToWrite" type="int" line="451"/>
                            <scope line="456"/>
                            <scope line="459"/>
                        </scope>
                    </scope>
                </method>
                <method name="implCloseChannel" type="void" line="468"/>
            </class>
            <javadoc line="477">
                Constructs a reader that decodes bytes from the given channel using the
                  given decoder.
                  &lt;p&gt; The resulting stream will contain an internal input buffer of at
                  least &lt;tt&gt;minBufferCap&lt;/tt&gt; bytes.  The stream&apos;s &lt;tt&gt;read&lt;/tt&gt; methods
                  will, as needed, fill the buffer by reading bytes from the underlying
                  channel; if the channel is in non-blocking mode when bytes are to be
                  read then an {@link IllegalBlockingModeException} will be thrown.  The
                  resulting stream will not otherwise be buffered, and it will not support
                  the {@link Reader#mark mark} or {@link Reader#reset reset} methods.
                  Closing the stream will in turn cause the channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel from which bytes will be read                    
                </param>
                <param>
                    decThe charset decoder to be used                    
                </param>
                <param>
                    minBufferCapThe minimum capacity of the internal byte buffer,
                      or <tt>-1</tt> if an implementation-dependent
                      default capacity is to be used                    
                </param>
                <return>
                    A new reader                    
                </return>
            </javadoc>
            <method name="newReader" type="Reader" line="506">
                <params>
                    <param name="ch" type="ReadableByteChannel"/>
                    <param name="dec" type="CharsetDecoder"/>
                    <param name="minBufferCap" type="int"/>
                </params>
            </method>
            <javadoc line="511">
                Constructs a reader that decodes bytes from the given channel according
                  to the named charset.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;blockquote&gt;&lt;pre&gt;
                  Channels.newReader(ch, csname)&lt;/pre&gt;&lt;/blockquote&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  Channels.newReader(ch,
                  Charset.forName(csName)
                  .newDecoder(),
                  -1);&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    chThe channel from which bytes will be read                    
                </param>
                <param>
                    csNameThe name of the charset to be used                    
                </param>
                <return>
                    A new reader                    
                </return>
                <throws>
                    UnsupportedCharsetExceptionIf no support for the named charset is available
                      in this instance of the Java virtual machine                    
                </throws>
            </javadoc>
            <method name="newReader" type="Reader" line="542">
                <params>
                    <param name="ch" type="ReadableByteChannel"/>
                    <param name="csName" type="String"/>
                </params>
            </method>
            <javadoc line="547">
                Constructs a writer that encodes characters using the given encoder and
                  writes the resulting bytes to the given channel.
                  &lt;p&gt; The resulting stream will contain an internal output buffer of at
                  least &lt;tt&gt;minBufferCap&lt;/tt&gt; bytes.  The stream&apos;s &lt;tt&gt;write&lt;/tt&gt; methods
                  will, as needed, flush the buffer by writing bytes to the underlying
                  channel; if the channel is in non-blocking mode when bytes are to be
                  written then an {@link IllegalBlockingModeException} will be thrown.
                  The resulting stream will not otherwise be buffered.  Closing the stream
                  will in turn cause the channel to be closed.  &lt;/p&gt;                
                <param>
                    chThe channel to which bytes will be written                    
                </param>
                <param>
                    encThe charset encoder to be used                    
                </param>
                <param>
                    minBufferCapThe minimum capacity of the internal byte buffer,
                      or <tt>-1</tt> if an implementation-dependent
                      default capacity is to be used                    
                </param>
                <return>
                    A new writer                    
                </return>
            </javadoc>
            <method name="newWriter" type="Writer" line="575">
                <params>
                    <param name="ch" type="WritableByteChannel"/>
                    <param name="enc" type="CharsetEncoder"/>
                    <param name="minBufferCap" type="int"/>
                </params>
            </method>
            <javadoc line="580">
                Constructs a writer that encodes characters according to the named
                  charset and writes the resulting bytes to the given channel.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;blockquote&gt;&lt;pre&gt;
                  Channels.newWriter(ch, csname)&lt;/pre&gt;&lt;/blockquote&gt;
                  behaves in exactly the same way as the expression
                  &lt;blockquote&gt;&lt;pre&gt;
                  Channels.newWriter(ch,
                  Charset.forName(csName)
                  .newEncoder(),
                  -1);&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    chThe channel to which bytes will be written                    
                </param>
                <param>
                    csNameThe name of the charset to be used                    
                </param>
                <return>
                    A new writer                    
                </return>
                <throws>
                    UnsupportedCharsetExceptionIf no support for the named charset is available
                      in this instance of the Java virtual machine                    
                </throws>
            </javadoc>
            <method name="newWriter" type="Writer" line="611">
                <params>
                    <param name="ch" type="WritableByteChannel"/>
                    <param name="csName" type="String"/>
                </params>
            </method>
        </class>
    </source>