<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <interface name="InterruptibleChannel">
            <implements interface="Channel"/>
            <javadoc line="3">
                A channel that can be asynchronously closed and interrupted.
                  &lt;p&gt; A channel that implements this interface is &lt;i&gt;asynchronously
                  closeable:&lt;/i&gt; If a thread is blocked in an I/O operation on an
                  interruptible channel then another thread may invoke the channel&apos;s {@link #close close} method.  This will cause the blocked thread to receive an{@link AsynchronousCloseException}.
                  &lt;p&gt; A channel that implements this interface is also &lt;i&gt;interruptible:&lt;/i&gt;
                  If a thread is blocked in an I/O operation on an interruptible channel then
                  another thread may invoke the blocked thread&apos;s {@link Thread#interrupt()interrupt} method.  This will cause the channel to be closed, the blocked
                  thread to receive a {@link ClosedByInterruptException}, and the blocked
                  thread&apos;s interrupt status to be set.
                  &lt;p&gt; If a thread&apos;s interrupt status is already set and it invokes a blocking
                  I/O operation upon a channel then the channel will be closed and the thread
                  will immediately receive a {@link ClosedByInterruptException}; its interrupt
                  status will remain set.
                  &lt;p&gt; A channel supports asynchronous closing and interruption if, and only
                  if, it implements this interface.  This can be tested at runtime, if
                  necessary, via the &lt;tt&gt;instanceof&lt;/tt&gt; operator.                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="close" type="void" line="25"/>
            <javadoc line="25">
                Closes this channel.
                  &lt;p&gt; Any thread currently blocked in an I/O operation upon this channel
                  will receive an {@link AsynchronousCloseException}.
                  &lt;p&gt; This method otherwise behaves exactly as specified by the {@link Channel#close Channel} interface.  &lt;/p&gt;                
                <throws>
                    IOException  If an I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>