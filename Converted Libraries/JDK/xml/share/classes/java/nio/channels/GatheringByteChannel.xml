<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <interface name="GatheringByteChannel">
            <implements interface="WritableByteChannel"/>
            <javadoc line="32">
                A channel that can write bytes from a sequence of buffers.
                  &lt;p&gt; A &lt;i&gt;gathering&lt;/i&gt; write operation writes, in a single invocation, a
                  sequence of bytes from one or more of a given sequence of buffers.
                  Gathering writes are often useful when implementing network protocols or
                  file formats that, for example, group data into segments consisting of one
                  or more fixed-length headers followed by a variable-length body.  Similar
                  &lt;i&gt;scattering&lt;/i&gt; read operations are defined in the {@link ScatteringByteChannel} interface.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="write" type="long" line="53"/>
            <javadoc line="53">
                Writes a sequence of bytes to this channel from a subsequence of the
                  given buffers.
                  &lt;p&gt; An attempt is made to write up to &lt;i&gt;r&lt;/i&gt; bytes to this channel,
                  where &lt;i&gt;r&lt;/i&gt; is the total number of bytes remaining in the specified
                  subsequence of the given buffer array, that is,
                  &lt;blockquote&gt;&lt;pre&gt;
                  srcs[offset].remaining()
                  + srcs[offset+1].remaining()
                  + ... + srcs[offset+length-1].remaining()&lt;/pre&gt;&lt;/blockquote&gt;
                  at the moment that this method is invoked.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is written, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  Up to the first &lt;tt&gt;srcs[offset].remaining()&lt;/tt&gt; bytes of this sequence
                  are written from buffer &lt;tt&gt;srcs[offset]&lt;/tt&gt;, up to the next
                  &lt;tt&gt;srcs[offset+1].remaining()&lt;/tt&gt; bytes are written from buffer
                  &lt;tt&gt;srcs[offset+1]&lt;/tt&gt;, and so forth, until the entire byte sequence is
                  written.  As many bytes as possible are written from each buffer, hence
                  the final position of each updated buffer, except the last updated
                  buffer, is guaranteed to be equal to that buffer&apos;s limit.
                  &lt;p&gt; Unless otherwise specified, a write operation will return only after
                  writing all of the &lt;i&gt;r&lt;/i&gt; requested bytes.  Some types of channels,
                  depending upon their state, may write only some of the bytes or possibly
                  none at all.  A socket channel in non-blocking mode, for example, cannot
                  write any more bytes than are free in the socket&apos;s output buffer.
                  &lt;p&gt; This method may be invoked at any time.  If another thread has
                  already initiated a write operation upon this channel, however, then an
                  invocation of this method will block until the first operation is
                  complete. &lt;/p&gt;                
                <param>
                    srcsThe buffers from which bytes are to be retrieved                    
                </param>
                <param>
                    offsetThe offset within the buffer array of the first buffer from
                      which bytes are to be retrieved; must be non-negative and no
                      larger than <tt>srcs.length</tt>                    
                </param>
                <param>
                    lengthThe maximum number of buffers to be accessed; must be
                      non-negative and no larger than
                      <tt>srcs.length</tt>&nbsp;-&nbsp;<tt>offset</tt>                    
                </param>
                <return>
                    The number of bytes written, possibly zero                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf the preconditions on the <tt>offset</tt> and <tt>length</tt>
                      parameters do not hold                    
                </throws>
                <throws>
                    NonWritableChannelExceptionIf this channel was not opened for writing                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the write operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the write operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="long" line="131"/>
            <javadoc line="131">
                Writes a sequence of bytes to this channel from the given buffers.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;c.write(srcs)&lt;/tt&gt;
                  behaves in exactly the same manner as the invocation
                  &lt;blockquote&gt;&lt;pre&gt;
                  c.write(srcs, 0, srcs.length);&lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    srcsThe buffers from which bytes are to be retrieved                    
                </param>
                <return>
                    The number of bytes written, possibly zero                    
                </return>
                <throws>
                    NonWritableChannelExceptionIf this channel was not opened for writing                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the write operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the write operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </interface>
    </source>