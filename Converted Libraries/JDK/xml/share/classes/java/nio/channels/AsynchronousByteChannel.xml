<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.nio.ByteBuffer"/>
        <import package="java.util.concurrent.Future"/>
        <interface name="AsynchronousByteChannel">
            <implements interface="AsynchronousChannel"/>
            <javadoc line="31">
                An asynchronous channel that can read and write bytes.
                  &lt;p&gt; Some channels may not allow more than one read or write to be outstanding
                  at any given time. If a thread invokes a read method before a previous read
                  operation has completed then a {@link ReadPendingException} will be thrown.
                  Similarly, if a write method is invoked before a previous write has completed
                  then {@link WritePendingException} is thrown. Whether or not other kinds of
                  I/O operations may proceed concurrently with a read operation depends upon
                  the type of the channel.
                  &lt;p&gt; Note that {@link java.nio.ByteBuffer ByteBuffers} are not safe for use by
                  multiple concurrent threads. When a read or write operation is initiated then
                  care must be taken to ensure that the buffer is not accessed until the
                  operation completes.                
                <see>
                    Channels#newInputStream(AsynchronousByteChannel)                    
                </see>
                <see>
                    Channels#newOutputStream(AsynchronousByteChannel)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="read" type="void" line="56"/>
            <javadoc line="56">
                Reads a sequence of bytes from this channel into the given buffer.
                  &lt;p&gt; This method initiates an asynchronous read operation to read a
                  sequence of bytes from this channel into the given buffer. The {@codehandler} parameter is a completion handler that is invoked when the read
                  operation completes (or fails). The result passed to the completion
                  handler is the number of bytes read or {@code -1} if no bytes could be
                  read because the channel has reached end-of-stream.
                  &lt;p&gt; The read operation may read up to &lt;i&gt;r&lt;/i&gt; bytes from the channel,
                  where &lt;i&gt;r&lt;/i&gt; is the number of bytes remaining in the buffer, that is,{@code dst.remaining()} at the time that the read is attempted. Where
                  &lt;i&gt;r&lt;/i&gt; is 0, the read operation completes immediately with a result of{@code 0} without initiating an I/O operation.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is read, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  This byte sequence will be transferred into the buffer so that the first
                  byte in the sequence is at index &lt;i&gt;p&lt;/i&gt; and the last byte is at index
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;-&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;1&lt;/tt&gt;,
                  where &lt;i&gt;p&lt;/i&gt; is the buffer&apos;s position at the moment the read is
                  performed. Upon completion the buffer&apos;s position will be equal to
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;; its limit will not have changed.
                  &lt;p&gt; Buffers are not safe for use by multiple concurrent threads so care
                  should be taken to not access the buffer until the operation has
                  completed.
                  &lt;p&gt; This method may be invoked at any time. Some channel types may not
                  allow more than one read to be outstanding at any given time. If a thread
                  initiates a read operation before a previous read operation has
                  completed then a {@link ReadPendingException} will be thrown.                
                <param>
                    dstThe buffer into which bytes are to be transferred                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe completion handler                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the buffer is read-only                    
                </throws>
                <throws>
                    ReadPendingExceptionIf the channel does not allow more than one read to be outstanding
                      and a previous read has not completed                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel is associated with a {@link AsynchronousChannelGroupgroup} that has terminated                    
                </throws>
            </javadoc>
            <method name="read" type="Future<Integer>" line="110"/>
            <javadoc line="110">
                Reads a sequence of bytes from this channel into the given buffer.
                  &lt;p&gt; This method initiates an asynchronous read operation to read a
                  sequence of bytes from this channel into the given buffer. The method
                  behaves in exactly the same manner as the {@link #read(ByteBuffer,Object,CompletionHandler)read(ByteBuffer,Object,CompletionHandler)} method except that instead
                  of specifying a completion handler, this method returns a {@code Future}representing the pending result. The {@code Future}&apos;s {@link Future#get()get} method returns the number of bytes read or {@code -1} if no bytes
                  could be read because the channel has reached end-of-stream.                
                <param>
                    dstThe buffer into which bytes are to be transferred                    
                </param>
                <return>
                    A Future representing the result of the operation                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the buffer is read-only                    
                </throws>
                <throws>
                    ReadPendingExceptionIf the channel does not allow more than one read to be outstanding
                      and a previous read has not completed                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="136"/>
            <javadoc line="136">
                Writes a sequence of bytes to this channel from the given buffer.
                  &lt;p&gt; This method initiates an asynchronous write operation to write a
                  sequence of bytes to this channel from the given buffer. The {@codehandler} parameter is a completion handler that is invoked when the write
                  operation completes (or fails). The result passed to the completion
                  handler is the number of bytes written.
                  &lt;p&gt; The write operation may write up to &lt;i&gt;r&lt;/i&gt; bytes to the channel,
                  where &lt;i&gt;r&lt;/i&gt; is the number of bytes remaining in the buffer, that is,{@code src.remaining()} at the time that the write is attempted. Where
                  &lt;i&gt;r&lt;/i&gt; is 0, the write operation completes immediately with a result of{@code 0} without initiating an I/O operation.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is written, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  This byte sequence will be transferred from the buffer starting at index
                  &lt;i&gt;p&lt;/i&gt;, where &lt;i&gt;p&lt;/i&gt; is the buffer&apos;s position at the moment the
                  write is performed; the index of the last byte written will be
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;-&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;1&lt;/tt&gt;.
                  Upon completion the buffer&apos;s position will be equal to
                  &lt;i&gt;p&lt;/i&gt;&amp;nbsp;&lt;tt&gt;+&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;; its limit will not have changed.
                  &lt;p&gt; Buffers are not safe for use by multiple concurrent threads so care
                  should be taken to not access the buffer until the operation has
                  completed.
                  &lt;p&gt; This method may be invoked at any time. Some channel types may not
                  allow more than one write to be outstanding at any given time. If a thread
                  initiates a write operation before a previous write operation has
                  completed then a {@link WritePendingException} will be thrown.                
                <param>
                    srcThe buffer from which bytes are to be retrieved                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe completion handler object                    
                </param>
                <throws>
                    WritePendingExceptionIf the channel does not allow more than one write to be outstanding
                      and a previous write has not completed                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel is associated with a {@link AsynchronousChannelGroupgroup} that has terminated                    
                </throws>
            </javadoc>
            <method name="write" type="Future<Integer>" line="187"/>
            <javadoc line="187">
                Writes a sequence of bytes to this channel from the given buffer.
                  &lt;p&gt; This method initiates an asynchronous write operation to write a
                  sequence of bytes to this channel from the given buffer. The method
                  behaves in exactly the same manner as the {@link #write(ByteBuffer,Object,CompletionHandler)write(ByteBuffer,Object,CompletionHandler)} method except that instead
                  of specifying a completion handler, this method returns a {@code Future}representing the pending result. The {@code Future}&apos;s {@link Future#get()get} method returns the number of bytes written.                
                <param>
                    srcThe buffer from which bytes are to be retrieved                    
                </param>
                <return>
                    A Future representing the result of the operation                    
                </return>
                <throws>
                    WritePendingExceptionIf the channel does not allow more than one write to be outstanding
                      and a previous write has not completed                    
                </throws>
            </javadoc>
        </interface>
    </source>