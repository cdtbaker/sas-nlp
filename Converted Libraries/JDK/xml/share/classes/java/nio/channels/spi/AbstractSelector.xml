<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels.spi">
        <import package="java.io.IOException"/>
        <import package="java.nio.channels.SelectionKey"/>
        <import package="java.nio.channels.Selector"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="sun.nio.ch.Interruptible"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <class name="AbstractSelector" line="9">
            <extends class="Selector"/>
            <javadoc line="9">
                Base implementation class for selectors.
                  &lt;p&gt; This class encapsulates the low-level machinery required to implement
                  the interruption of selection operations.  A concrete selector class must
                  invoke the {@link #begin begin} and {@link #end end} methods before and
                  after, respectively, invoking an I/O operation that might block
                  indefinitely.  In order to ensure that the {@link #end end} method is always
                  invoked, these methods should be used within a
                  &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block: &lt;a name=&quot;be&quot;&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  try {
                  begin();
                  // Perform blocking I/O operation here
                  ...
                  } finally {
                  end();
                  }&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This class also defines methods for maintaining a selector&apos;s
                  cancelled-key set and for removing a key from its channel&apos;s key set, and
                  declares the abstract {@link #register register} method that is invoked by a
                  selectable channel&apos;s {@link AbstractSelectableChannel#register register}method in order to perform the actual work of registering a channel.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="selectorOpen" type="AtomicBoolean" line="35"/>
            <declaration name="provider" type="SelectorProvider" line="36"/>
            <javadoc line="37">
                Initializes a new instance of this class.  &lt;/p&gt;                
            </javadoc>
            <method name="AbstractSelector" type="constructor" line="40">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <declaration name="cancelledKeys" type="Set&lt;SelectionKey&gt;" line="43"/>
            <method name="cancel" type="void" line="44">
                <params>
                    <param name="k" type="SelectionKey"/>
                </params>
                <scope line="45"/>
            </method>
            <javadoc line="49">
                Closes this selector.
                  &lt;p&gt; If the selector has already been closed then this method returns
                  immediately.  Otherwise it marks the selector as closed and then invokes
                  the {@link #implCloseSelector implCloseSelector} method in order to
                  complete the close operation.  &lt;/p&gt;                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="57">
                <declaration name="open" type="boolean" line="58"/>
            </method>
            <method name="implCloseSelector" type="void" line="62"/>
            <javadoc line="62">
                Closes this selector.
                  &lt;p&gt; This method is invoked by the {@link #close close} method in order
                  to perform the actual work of closing the selector.  This method is only
                  invoked if the selector has not yet been closed, and it is never invoked
                  more than once.
                  &lt;p&gt; An implementation of this method must arrange for any other thread
                  that is blocked in a selection operation upon this selector to return
                  immediately as if by invoking the {@link java.nio.channels.Selector#wakeup wakeup} method. &lt;/p&gt;                
                <throws>
                    IOExceptionIf an I/O error occurs while closing the selector                    
                </throws>
            </javadoc>
            <method name="isOpen" type="boolean" line="74"/>
            <javadoc line="77">
                Returns the provider that created this channel.                
                <return>
                    The provider that created this channel                    
                </return>
            </javadoc>
            <method name="provider" type="SelectorProvider" line="81"/>
            <javadoc line="84">
                Retrieves this selector&apos;s cancelled-key set.
                  &lt;p&gt; This set should only be used while synchronized upon it.  &lt;/p&gt;                
                <return>
                    The cancelled-key set                    
                </return>
            </javadoc>
            <method name="cancelledKeys" type="Set<SelectionKey>" line="89"/>
            <method name="register" type="SelectionKey" line="92"/>
            <javadoc line="92">
                Registers the given channel with this selector.
                  &lt;p&gt; This method is invoked by a channel&apos;s {@link AbstractSelectableChannel#register register} method in order to perform
                  the actual work of registering the channel with this selector.  &lt;/p&gt;                
                <param>
                    chThe channel to be registered                    
                </param>
                <param>
                    opsThe initial interest set, which must be valid                    
                </param>
                <param>
                    attThe initial attachment for the resulting key                    
                </param>
                <return>
                    A new key representing the registration of the given channel
                      with this selector                    
                </return>
            </javadoc>
            <javadoc line="103">
                Removes the given key from its channel&apos;s key set.
                  &lt;p&gt; This method must be invoked by the selector for each channel that it
                  deregisters.  &lt;/p&gt;                
                <param>
                    keyThe selection key to be removed                    
                </param>
            </javadoc>
            <method name="deregister" type="void" line="109">
                <params>
                    <param name="key" type="AbstractSelectionKey"/>
                </params>
            </method>
            <declaration name="interruptor" type="Interruptible" line="112"/>
            <javadoc line="113">
                Marks the beginning of an I/O operation that might block indefinitely.
                  &lt;p&gt; This method should be invoked in tandem with the {@link #end end}method, using a &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block as
                  shown &lt;a href=&quot;#be&quot;&gt;above&lt;/a&gt;, in order to implement interruption for
                  this selector.
                  &lt;p&gt; Invoking this method arranges for the selector&apos;s {@link Selector#wakeup wakeup} method to be invoked if a thread&apos;s {@link Thread#interrupt interrupt} method is invoked while the thread is
                  blocked in an I/O operation upon the selector.  &lt;/p&gt;                
            </javadoc>
            <method name="begin" type="void" line="121">
                <scope line="122">
                    <anonymous_class line="123">
                        <method name="interrupt" type="void" line="124">
                            <params>
                                <param name="ignore" type="Thread"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <declaration name="me" type="Thread" line="131"/>
            </method>
            <javadoc line="134">
                Marks the end of an I/O operation that might block indefinitely.
                  &lt;p&gt; This method should be invoked in tandem with the {@link #begin begin}method, using a &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block as
                  shown &lt;a href=&quot;#be&quot;&gt;above&lt;/a&gt;, in order to implement interruption for
                  this selector.  &lt;/p&gt;                
            </javadoc>
            <method name="end" type="void" line="140"/>
        </class>
    </source>