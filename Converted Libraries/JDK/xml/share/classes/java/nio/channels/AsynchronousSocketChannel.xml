<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.nio.channels.spi"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.io.IOException"/>
        <import package="java.net.SocketOption"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="AsynchronousSocketChannel" line="9">
            <implements interface="AsynchronousByteChannel"/>
            <implements interface="NetworkChannel"/>
            <javadoc line="9">
                An asynchronous channel for stream-oriented connecting sockets.
                  &lt;p&gt; Asynchronous socket channels are created in one of two ways. A newly-created{@code AsynchronousSocketChannel} is created by invoking one of the {@link #open open} methods defined by this class. A newly-created channel is open but
                  not yet connected. A connected {@code AsynchronousSocketChannel} is created
                  when a connection is made to the socket of an {@link AsynchronousServerSocketChannel}.
                  It is not possible to create an asynchronous socket channel for an arbitrary,
                  pre-existing {@link java.net.Socket socket}.
                  &lt;p&gt; A newly-created channel is connected by invoking its {@link #connect connect}method; once connected, a channel remains connected until it is closed.  Whether
                  or not a socket channel is connected may be determined by invoking its {@link #getRemoteAddress getRemoteAddress} method. An attempt to invoke an I/O
                  operation upon an unconnected channel will cause a {@link NotYetConnectedException}to be thrown.
                  &lt;p&gt; Channels of this type are safe for use by multiple concurrent threads.
                  They support concurrent reading and writing, though at most one read operation
                  and one write operation can be outstanding at any time.
                  If a thread initiates a read operation before a previous read operation has
                  completed then a {@link ReadPendingException} will be thrown. Similarly, an
                  attempt to initiate a write operation before a previous write has completed
                  will throw a {@link WritePendingException}.
                  &lt;p&gt; Socket options are configured using the {@link #setOption(SocketOption,Object)setOption} method. Asynchronous socket channels support the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_SNDBUF SO_SNDBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket send buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_KEEPALIVE SO_KEEPALIVE} &lt;/td&gt;
                  &lt;td&gt; Keep connection alive &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} &lt;/td&gt;
                  &lt;td&gt; Re-use address &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#TCP_NODELAY TCP_NODELAY} &lt;/td&gt;
                  &lt;td&gt; Disable the Nagle algorithm &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported.
                  &lt;h4&gt;Timeouts&lt;/h4&gt;
                  &lt;p&gt; The {@link #read(ByteBuffer,long,TimeUnit,Object,CompletionHandler) read}and {@link #write(ByteBuffer,long,TimeUnit,Object,CompletionHandler) write}methods defined by this class allow a timeout to be specified when initiating
                  a read or write operation. If the timeout elapses before an operation completes
                  then the operation completes with the exception {@link InterruptedByTimeoutException}. A timeout may leave the channel, or the
                  underlying connection, in an inconsistent state. Where the implementation
                  cannot guarantee that bytes have not been read from the channel then it puts
                  the channel into an implementation specific &lt;em&gt;error state&lt;/em&gt;. A subsequent
                  attempt to initiate a {@code read} operation causes an unspecified runtime
                  exception to be thrown. Similarly if a {@code write} operation times out and
                  the implementation cannot guarantee bytes have not been written to the
                  channel then further attempts to {@code write} to the channel cause an
                  unspecified runtime exception to be thrown. When a timeout elapses then the
                  state of the {@link ByteBuffer}, or the sequence of buffers, for the I/O
                  operation is not defined. Buffers should be discarded or at least care must
                  be taken to ensure that the buffers are not accessed while the channel remains
                  open. All methods that accept timeout parameters treat values less than or
                  equal to zero to mean that the I/O operation does not timeout.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="provider" type="AsynchronousChannelProvider" line="76"/>
            <javadoc line="77">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="AsynchronousSocketChannel" type="constructor" line="80">
                <params>
                    <param name="provider" type="AsynchronousChannelProvider"/>
                </params>
            </method>
            <javadoc line="83">
                Returns the provider that created this channel.                
            </javadoc>
            <method name="provider" type="AsynchronousChannelProvider" line="86"/>
            <javadoc line="89">
                Opens an asynchronous socket channel.
                  &lt;p&gt; The new channel is created by invoking the {@link AsynchronousChannelProvider#openAsynchronousSocketChannelopenAsynchronousSocketChannel} method on the {@link AsynchronousChannelProvider} that created the group. If the group parameter
                  is {@code null} then the resulting channel is created by the system-wide
                  default provider, and bound to the &lt;em&gt;default group&lt;/em&gt;.                
                <param>
                    groupThe group to which the newly constructed channel should be bound,
                      or {@code null} for the default group                    
                </param>
                <return>
                    A new asynchronous socket channel                    
                </return>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group is shutdown                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="AsynchronousSocketChannel" line="100">
                <params>
                    <param name="group" type="AsynchronousChannelGroup"/>
                </params>
                <declaration name="provider" type="AsynchronousChannelProvider" line="101"/>
            </method>
            <javadoc line="104">
                Opens an asynchronous socket channel.
                  &lt;p&gt; This method returns an asynchronous socket channel that is bound to
                  the &lt;em&gt;default group&lt;/em&gt;.This method is equivalent to evaluating the
                  expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  open((AsynchronousChannelGroup)null);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    A new asynchronous socket channel                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="AsynchronousSocketChannel" line="115"/>
            <method name="bind" type="AsynchronousSocketChannel" line="118"/>
            <javadoc line="118">
                @throws ConnectionPendingExceptionIf a connection operation is already in progress on this channel                
                <throws>
                    AlreadyBoundException               {@inheritDoc}                    
                </throws>
                <throws>
                    UnsupportedAddressTypeException     {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException              {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                         {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="setOption" type="AsynchronousSocketChannel" line="126"/>
            <javadoc line="126">
                @throws IllegalArgumentException                {@inheritDoc}                
                <throws>
                    ClosedChannelException                  {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                             {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="shutdownInput" type="AsynchronousSocketChannel" line="132"/>
            <javadoc line="132">
                Shutdown the connection for reading without closing the channel.
                  &lt;p&gt; Once shutdown for reading then further reads on the channel will
                  return {@code -1}, the end-of-stream indication. If the input side of the
                  connection is already shutdown then invoking this method has no effect.
                  The effect on an outstanding read operation is system dependent and
                  therefore not specified. The effect, if any, when there is data in the
                  socket receive buffer that has not been read, or data arrives subsequently,
                  is also system dependent.                
                <return>
                    The channel                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="shutdownOutput" type="AsynchronousSocketChannel" line="147"/>
            <javadoc line="147">
                Shutdown the connection for writing without closing the channel.
                  &lt;p&gt; Once shutdown for writing then further attempts to write to the
                  channel will throw {@link ClosedChannelException}. If the output side of
                  the connection is already shutdown then invoking this method has no
                  effect. The effect on an outstanding write operation is system dependent
                  and therefore not specified.                
                <return>
                    The channel                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getRemoteAddress" type="SocketAddress" line="160"/>
            <javadoc line="160">
                Returns the remote address to which this channel&apos;s socket is connected.
                  &lt;p&gt; Where the channel is bound and connected to an Internet Protocol
                  socket address then the return value from this method is of type {@link java.net.InetSocketAddress}.                
                <return>
                    The remote address; {@code null} if the channel's socket is not
                      connected                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="connect" type="void" line="170"/>
            <javadoc line="170">
                Connects this channel.
                  &lt;p&gt; This method initiates an operation to connect this channel. The{@code handler} parameter is a completion handler that is invoked when
                  the connection is successfully established or connection cannot be
                  established. If the connection cannot be established then the channel is
                  closed.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.Socket} class.  That is, if a security manager has been
                  installed then this method verifies that its {@link java.lang.SecurityManager#checkConnect checkConnect} method permits
                  connecting to the address and port number of the given remote endpoint.                
                <param>
                    remoteThe remote address to which this channel is to be connected                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    ConnectionPendingExceptionIf a connection operation is already in progress on this channel                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote endpoint                    
                </throws>
                <see>
                    #getRemoteAddress                    
                </see>
            </javadoc>
            <method name="connect" type="Future<Void>" line="192"/>
            <javadoc line="192">
                Connects this channel.
                  &lt;p&gt; This method initiates an operation to connect this channel. This
                  method behaves in exactly the same manner as the {@link #connect(SocketAddress,Object,CompletionHandler)} method except that
                  instead of specifying a completion handler, this method returns a {@codeFuture} representing the pending result. The {@code Future}&apos;s {@link Future#get() get} method returns {@code null} on successful completion.                
                <param>
                    remoteThe remote address to which this channel is to be connected                    
                </param>
                <return>
                    A {@code Future} object representing the pending result                    
                </return>
                <throws>
                    UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    ConnectionPendingExceptionIf a connection operation is already in progress on this channel                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote endpoint                    
                </throws>
            </javadoc>
            <method name="read" type="void" line="207"/>
            <javadoc line="207">
                Reads a sequence of bytes from this channel into the given buffer.
                  &lt;p&gt; This method initiates an asynchronous read operation to read a
                  sequence of bytes from this channel into the given buffer. The {@codehandler} parameter is a completion handler that is invoked when the read
                  operation completes (or fails). The result passed to the completion
                  handler is the number of bytes read or {@code -1} if no bytes could be
                  read because the channel has reached end-of-stream.
                  &lt;p&gt; If a timeout is specified and the timeout elapses before the operation
                  completes then the operation completes with the exception {@link InterruptedByTimeoutException}. Where a timeout occurs, and the
                  implementation cannot guarantee that bytes have not been read, or will not
                  be read from the channel into the given buffer, then further attempts to
                  read from the channel will cause an unspecific runtime exception to be
                  thrown.
                  &lt;p&gt; Otherwise this method works in the same manner as the {@link AsynchronousByteChannel#read(ByteBuffer,Object,CompletionHandler)}method.                
                <param>
                    dstThe buffer into which bytes are to be transferred                    
                </param>
                <param>
                    timeoutThe maximum time for the I/O operation to complete                    
                </param>
                <param>
                    unitThe time unit of the {@code timeout} argument                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the buffer is read-only                    
                </throws>
                <throws>
                    ReadPendingExceptionIf a read operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <javadoc line="232">
                @throws IllegalArgumentException        {@inheritDoc}                
                <throws>
                    ReadPendingException            {@inheritDoc}                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <method name="read" type="void" line="238">
                <params>
                    <param name="dst" type="ByteBuffer"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Integer,? super A>"/>
                </params>
            </method>
            <method name="read" type="Future<Integer>" line="241"/>
            <javadoc line="241">
                @throws IllegalArgumentException        {@inheritDoc}                
                <throws>
                    ReadPendingException            {@inheritDoc}                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
            </javadoc>
            <method name="read" type="void" line="247"/>
            <javadoc line="247">
                Reads a sequence of bytes from this channel into a subsequence of the
                  given buffers. This operation, sometimes called a &lt;em&gt;scattering read&lt;/em&gt;,
                  is often useful when implementing network protocols that group data into
                  segments consisting of one or more fixed-length headers followed by a
                  variable-length body. The {@code handler} parameter is a completion
                  handler that is invoked when the read operation completes (or fails). The
                  result passed to the completion handler is the number of bytes read or{@code -1} if no bytes could be read because the channel has reached
                  end-of-stream.
                  &lt;p&gt; This method initiates a read of up to &lt;i&gt;r&lt;/i&gt; bytes from this channel,
                  where &lt;i&gt;r&lt;/i&gt; is the total number of bytes remaining in the specified
                  subsequence of the given buffer array, that is,
                  &lt;blockquote&gt;&lt;pre&gt;
                  dsts[offset].remaining()
                  + dsts[offset+1].remaining()
                  + ... + dsts[offset+length-1].remaining()&lt;/pre&gt;&lt;/blockquote&gt;
                  at the moment that the read is attempted.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is read, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  Up to the first &lt;tt&gt;dsts[offset].remaining()&lt;/tt&gt; bytes of this sequence
                  are transferred into buffer &lt;tt&gt;dsts[offset]&lt;/tt&gt;, up to the next
                  &lt;tt&gt;dsts[offset+1].remaining()&lt;/tt&gt; bytes are transferred into buffer
                  &lt;tt&gt;dsts[offset+1]&lt;/tt&gt;, and so forth, until the entire byte sequence
                  is transferred into the given buffers.  As many bytes as possible are
                  transferred into each buffer, hence the final position of each updated
                  buffer, except the last updated buffer, is guaranteed to be equal to
                  that buffer&apos;s limit. The underlying operating system may impose a limit
                  on the number of buffers that may be used in an I/O operation. Where the
                  number of buffers (with bytes remaining), exceeds this limit, then the
                  I/O operation is performed with the maximum number of buffers allowed by
                  the operating system.
                  &lt;p&gt; If a timeout is specified and the timeout elapses before the operation
                  completes then it completes with the exception {@link InterruptedByTimeoutException}. Where a timeout occurs, and the
                  implementation cannot guarantee that bytes have not been read, or will not
                  be read from the channel into the given buffers, then further attempts to
                  read from the channel will cause an unspecific runtime exception to be
                  thrown.                
                <param>
                    dstsThe buffers into which bytes are to be transferred                    
                </param>
                <param>
                    offsetThe offset within the buffer array of the first buffer into which
                      bytes are to be transferred; must be non-negative and no larger than{@code dsts.length}                    
                </param>
                <param>
                    lengthThe maximum number of buffers to be accessed; must be non-negative
                      and no larger than {@code dsts.length - offset}                    
                </param>
                <param>
                    timeoutThe maximum time for the I/O operation to complete                    
                </param>
                <param>
                    unitThe time unit of the {@code timeout} argument                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the pre-conditions for the {@code offset}  and {@code length}parameter aren't met                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the buffer is read-only                    
                </throws>
                <throws>
                    ReadPendingExceptionIf a read operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="300"/>
            <javadoc line="300">
                Writes a sequence of bytes to this channel from the given buffer.
                  &lt;p&gt; This method initiates an asynchronous write operation to write a
                  sequence of bytes to this channel from the given buffer. The {@codehandler} parameter is a completion handler that is invoked when the write
                  operation completes (or fails). The result passed to the completion
                  handler is the number of bytes written.
                  &lt;p&gt; If a timeout is specified and the timeout elapses before the operation
                  completes then it completes with the exception {@link InterruptedByTimeoutException}. Where a timeout occurs, and the
                  implementation cannot guarantee that bytes have not been written, or will
                  not be written to the channel from the given buffer, then further attempts
                  to write to the channel will cause an unspecific runtime exception to be
                  thrown.
                  &lt;p&gt; Otherwise this method works in the same manner as the {@link AsynchronousByteChannel#write(ByteBuffer,Object,CompletionHandler)}method.                
                <param>
                    srcThe buffer from which bytes are to be retrieved                    
                </param>
                <param>
                    timeoutThe maximum time for the I/O operation to complete                    
                </param>
                <param>
                    unitThe time unit of the {@code timeout} argument                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    WritePendingExceptionIf a write operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <javadoc line="323">
                @throws WritePendingException          {@inheritDoc}                
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="328">
                <params>
                    <param name="src" type="ByteBuffer"/>
                    <param name="attachment" type="A"/>
                    <param name="handler" type="CompletionHandler<Integer,? super A>"/>
                </params>
            </method>
            <method name="write" type="Future<Integer>" line="331"/>
            <javadoc line="331">
                @throws WritePendingException       {@inheritDoc}                
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="336"/>
            <javadoc line="336">
                Writes a sequence of bytes to this channel from a subsequence of the given
                  buffers. This operation, sometimes called a &lt;em&gt;gathering write&lt;/em&gt;, is
                  often useful when implementing network protocols that group data into
                  segments consisting of one or more fixed-length headers followed by a
                  variable-length body. The {@code handler} parameter is a completion
                  handler that is invoked when the write operation completes (or fails).
                  The result passed to the completion handler is the number of bytes written.
                  &lt;p&gt; This method initiates a write of up to &lt;i&gt;r&lt;/i&gt; bytes to this channel,
                  where &lt;i&gt;r&lt;/i&gt; is the total number of bytes remaining in the specified
                  subsequence of the given buffer array, that is,
                  &lt;blockquote&gt;&lt;pre&gt;
                  srcs[offset].remaining()
                  + srcs[offset+1].remaining()
                  + ... + srcs[offset+length-1].remaining()&lt;/pre&gt;&lt;/blockquote&gt;
                  at the moment that the write is attempted.
                  &lt;p&gt; Suppose that a byte sequence of length &lt;i&gt;n&lt;/i&gt; is written, where
                  &lt;tt&gt;0&lt;/tt&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&amp;nbsp;&lt;tt&gt;&amp;lt;=&lt;/tt&gt;&amp;nbsp;&lt;i&gt;r&lt;/i&gt;.
                  Up to the first &lt;tt&gt;srcs[offset].remaining()&lt;/tt&gt; bytes of this sequence
                  are written from buffer &lt;tt&gt;srcs[offset]&lt;/tt&gt;, up to the next
                  &lt;tt&gt;srcs[offset+1].remaining()&lt;/tt&gt; bytes are written from buffer
                  &lt;tt&gt;srcs[offset+1]&lt;/tt&gt;, and so forth, until the entire byte sequence is
                  written.  As many bytes as possible are written from each buffer, hence
                  the final position of each updated buffer, except the last updated
                  buffer, is guaranteed to be equal to that buffer&apos;s limit. The underlying
                  operating system may impose a limit on the number of buffers that may be
                  used in an I/O operation. Where the number of buffers (with bytes
                  remaining), exceeds this limit, then the I/O operation is performed with
                  the maximum number of buffers allowed by the operating system.
                  &lt;p&gt; If a timeout is specified and the timeout elapses before the operation
                  completes then it completes with the exception {@link InterruptedByTimeoutException}. Where a timeout occurs, and the
                  implementation cannot guarantee that bytes have not been written, or will
                  not be written to the channel from the given buffers, then further attempts
                  to write to the channel will cause an unspecific runtime exception to be
                  thrown.                
                <param>
                    srcsThe buffers from which bytes are to be retrieved                    
                </param>
                <param>
                    offsetThe offset within the buffer array of the first buffer from which
                      bytes are to be retrieved; must be non-negative and no larger
                      than {@code srcs.length}                    
                </param>
                <param>
                    lengthThe maximum number of buffers to be accessed; must be non-negative
                      and no larger than {@code srcs.length - offset}                    
                </param>
                <param>
                    timeoutThe maximum time for the I/O operation to complete                    
                </param>
                <param>
                    unitThe time unit of the {@code timeout} argument                    
                </param>
                <param>
                    attachmentThe object to attach to the I/O operation; can be {@code null}                    
                </param>
                <param>
                    handlerThe handler for consuming the result                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the pre-conditions for the {@code offset}  and {@code length}parameter aren't met                    
                </throws>
                <throws>
                    WritePendingExceptionIf a write operation is already in progress on this channel                    
                </throws>
                <throws>
                    NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    ShutdownChannelGroupExceptionIf the channel group has terminated                    
                </throws>
            </javadoc>
        </class>
    </source>