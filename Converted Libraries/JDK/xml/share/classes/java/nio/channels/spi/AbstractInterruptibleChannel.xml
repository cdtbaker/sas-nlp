<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels.spi">
        <import package="java.io.IOException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.nio.channels"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.nio.ch.Interruptible"/>
        <class name="AbstractInterruptibleChannel" line="9">
            <implements interface="Channel"/>
            <implements interface="InterruptibleChannel"/>
            <javadoc line="9">
                Base implementation class for interruptible channels.
                  &lt;p&gt; This class encapsulates the low-level machinery required to implement
                  the asynchronous closing and interruption of channels.  A concrete channel
                  class must invoke the {@link #begin begin} and {@link #end end} methods
                  before and after, respectively, invoking an I/O operation that might block
                  indefinitely.  In order to ensure that the {@link #end end} method is always
                  invoked, these methods should be used within a
                  &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block: &lt;a name=&quot;be&quot;&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  boolean completed = false;
                  try {
                  begin();
                  completed = ...;    // Perform blocking I/O operation
                  return ...;         // Return result
                  } finally {
                  end(completed);
                  }&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The &lt;tt&gt;completed&lt;/tt&gt; argument to the {@link #end end} method tells
                  whether or not the I/O operation actually completed, that is, whether it had
                  any effect that would be visible to the invoker.  In the case of an
                  operation that reads bytes, for example, this argument should be
                  &lt;tt&gt;true&lt;/tt&gt; if, and only if, some bytes were actually transferred into the
                  invoker&apos;s target buffer.
                  &lt;p&gt; A concrete channel class must also implement the {@link #implCloseChannel implCloseChannel} method in such a way that if it is
                  invoked while another thread is blocked in a native I/O operation upon the
                  channel then that operation will immediately return, either by throwing an
                  exception or by returning normally.  If a thread is interrupted or the
                  channel upon which it is blocked is asynchronously closed then the channel&apos;s{@link #end end} method will throw the appropriate exception.
                  &lt;p&gt; This class performs the synchronization required to implement the {@link java.nio.channels.Channel} specification.  Implementations of the {@link #implCloseChannel implCloseChannel} method need not synchronize against
                  other threads that might be attempting to close the channel.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="closeLock" type="Object" line="45"/>
            <declaration name="open" type="boolean" line="46"/>
            <javadoc line="47">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="AbstractInterruptibleChannel" type="constructor" line="50"/>
            <javadoc line="52">
                Closes this channel.
                  &lt;p&gt; If the channel has already been closed then this method returns
                  immediately.  Otherwise it marks the channel as closed and then invokes
                  the {@link #implCloseChannel implCloseChannel} method in order to
                  complete the close operation.  &lt;/p&gt;                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="60">
                <scope line="61"/>
            </method>
            <method name="implCloseChannel" type="void" line="67"/>
            <javadoc line="67">
                Closes this channel.
                  &lt;p&gt; This method is invoked by the {@link #close close} method in order
                  to perform the actual work of closing the channel.  This method is only
                  invoked if the channel has not yet been closed, and it is never invoked
                  more than once.
                  &lt;p&gt; An implementation of this method must arrange for any other thread
                  that is blocked in an I/O operation upon this channel to return
                  immediately, either by throwing an exception or by returning normally.
                  &lt;/p&gt;                
                <throws>
                    IOExceptionIf an I/O error occurs while closing the channel                    
                </throws>
            </javadoc>
            <method name="isOpen" type="boolean" line="80"/>
            <declaration name="interruptor" type="Interruptible" line="83"/>
            <declaration name="interrupted" type="Thread" line="84"/>
            <javadoc line="85">
                Marks the beginning of an I/O operation that might block indefinitely.
                  &lt;p&gt; This method should be invoked in tandem with the {@link #end end}method, using a &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block as
                  shown &lt;a href=&quot;#be&quot;&gt;above&lt;/a&gt;, in order to implement asynchronous
                  closing and interruption for this channel.  &lt;/p&gt;                
            </javadoc>
            <method name="begin" type="void" line="91">
                <scope line="92">
                    <anonymous_class line="93">
                        <method name="interrupt" type="void" line="94">
                            <params>
                                <param name="target" type="Thread"/>
                            </params>
                            <scope line="95">
                                <scope line="99"/>
                                <scope line="102"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
                <declaration name="me" type="Thread" line="110"/>
            </method>
            <javadoc line="113">
                Marks the end of an I/O operation that might block indefinitely.
                  &lt;p&gt; This method should be invoked in tandem with the {@link #beginbegin} method, using a &lt;tt&gt;try&lt;/tt&gt;&amp;nbsp;...&amp;nbsp;&lt;tt&gt;finally&lt;/tt&gt; block
                  as shown &lt;a href=&quot;#be&quot;&gt;above&lt;/a&gt;, in order to implement asynchronous
                  closing and interruption for this channel.  &lt;/p&gt;                
                <param>
                    completed&lt;tt&gt;true&lt;/tt&gt; if, and only if, the I/O operation completed
                      successfully, that is, had some effect that would be visible to
                      the operation&apos;s invoker                    
                </param>
                <throws>
                    AsynchronousCloseExceptionIf the channel was asynchronously closed                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf the thread blocked in the I/O operation was interrupted                    
                </throws>
            </javadoc>
            <method name="end" type="void" line="124">
                <params>
                    <param name="completed" type="boolean"/>
                </params>
                <declaration name="interrupted" type="Thread" line="126"/>
                <scope line="127"/>
            </method>
            <method name="blockedOn" type="void" line="133">
                <params>
                    <param name="intr" type="Interruptible"/>
                </params>
            </method>
        </class>
    </source>