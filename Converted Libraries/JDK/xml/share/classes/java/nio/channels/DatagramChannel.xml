<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.nio.channels">
        <import package="java.io.IOException"/>
        <import package="java.net.ProtocolFamily"/>
        <import package="java.net.DatagramSocket"/>
        <import package="java.net.SocketOption"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.spi.AbstractSelectableChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <class name="DatagramChannel" line="37">
            <extends class="AbstractSelectableChannel"/>
            <comment line="199">
                -- Socket-specific operations --                
            </comment>
            <comment line="465">
                -- ByteChannel operations --                
            </comment>
            <implements interface="ByteChannel"/>
            <implements interface="ScatteringByteChannel"/>
            <implements interface="GatheringByteChannel"/>
            <implements interface="MulticastChannel"/>
            <javadoc line="37">
                A selectable channel for datagram-oriented sockets.
                  &lt;p&gt; A datagram channel is created by invoking one of the {@link #open open} methods
                  of this class. It is not possible to create a channel for an arbitrary,
                  pre-existing datagram socket. A newly-created datagram channel is open but not
                  connected. A datagram channel need not be connected in order for the {@link #sendsend} and {@link #receive receive} methods to be used.  A datagram channel may be
                  connected, by invoking its {@link #connect connect} method, in order to
                  avoid the overhead of the security checks are otherwise performed as part of
                  every send and receive operation.  A datagram channel must be connected in
                  order to use the {@link #read(java.nio.ByteBuffer) read} and {@link #write(java.nio.ByteBuffer) write} methods, since those methods do not
                  accept or return socket addresses.
                  &lt;p&gt; Once connected, a datagram channel remains connected until it is
                  disconnected or closed.  Whether or not a datagram channel is connected may
                  be determined by invoking its {@link #isConnected isConnected} method.
                  &lt;p&gt; Socket options are configured using the {@link #setOption(SocketOption,Object)setOption} method. A datagram channel to an Internet Protocol socket supports
                  the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_SNDBUF SO_SNDBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket send buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_RCVBUF SO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_REUSEADDR SO_REUSEADDR} &lt;/td&gt;
                  &lt;td&gt; Re-use address &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#SO_BROADCAST SO_BROADCAST} &lt;/td&gt;
                  &lt;td&gt; Allow transmission of broadcast datagrams &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#IP_TOS IP_TOS} &lt;/td&gt;
                  &lt;td&gt; The Type of Service (ToS) octet in the Internet Protocol (IP) header &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#IP_MULTICAST_IF IP_MULTICAST_IF} &lt;/td&gt;
                  &lt;td&gt; The network interface for Internet Protocol (IP) multicast datagrams &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#IP_MULTICAST_TTLIP_MULTICAST_TTL} &lt;/td&gt;
                  &lt;td&gt; The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast
                  datagrams &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link java.net.StandardSocketOptions#IP_MULTICAST_LOOPIP_MULTICAST_LOOP} &lt;/td&gt;
                  &lt;td&gt; Loopback for Internet Protocol (IP) multicast datagrams &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported.
                  &lt;p&gt; Datagram channels are safe for use by multiple concurrent threads.  They
                  support concurrent reading and writing, though at most one thread may be
                  reading and at most one thread may be writing at any given time.  &lt;/p&gt;                
                <author>
                    Mark Reinhold                    
                </author>
                <author>
                    JSR-51 Expert Group                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="118">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="DatagramChannel" type="constructor" line="121">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="125">
                Opens a datagram channel.
                  &lt;p&gt; The new channel is created by invoking the {@link java.nio.channels.spi.SelectorProvider#openDatagramChannel()openDatagramChannel} method of the system-wide default {@link java.nio.channels.spi.SelectorProvider} object.  The channel will not be
                  connected.
                  &lt;p&gt; The {@link ProtocolFamily ProtocolFamily} of the channel&apos;s socket
                  is platform (and possibly configuration) dependent and therefore unspecified.
                  The {@link #open(ProtocolFamily) open} allows the protocol family to be
                  selected when opening a datagram channel, and should be used to open
                  datagram channels that are intended for Internet Protocol multicasting.                
                <return>
                    A new datagram channel                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="DatagramChannel" line="145"/>
            <javadoc line="149">
                Opens a datagram channel.
                  &lt;p&gt; The {@code family} parameter is used to specify the {@link ProtocolFamily}. If the datagram channel is to be used for IP multicasing
                  then this should correspond to the address type of the multicast groups
                  that this channel will join.
                  &lt;p&gt; The new channel is created by invoking the {@link java.nio.channels.spi.SelectorProvider#openDatagramChannel(ProtocolFamily)openDatagramChannel} method of the system-wide default {@link java.nio.channels.spi.SelectorProvider} object.  The channel will not be
                  connected.                
                <param>
                    familyThe protocol family                    
                </param>
                <return>
                    A new datagram channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the specified protocol family is not supported. For example,
                      suppose the parameter is specified as {@link java.net.StandardProtocolFamily#INET6 StandardProtocolFamily.INET6}but IPv6 is not enabled on the platform.                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="open" type="DatagramChannel" line="178">
                <params>
                    <param name="family" type="ProtocolFamily"/>
                </params>
            </method>
            <javadoc line="182">
                Returns an operation set identifying this channel&apos;s supported
                  operations.
                  &lt;p&gt; Datagram channels support reading and writing, so this method
                  returns &lt;tt&gt;(&lt;/tt&gt;{@link SelectionKey#OP_READ} &lt;tt&gt;|&lt;/tt&gt;&amp;nbsp;{@link SelectionKey#OP_WRITE}&lt;tt&gt;)&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="192"/>
            <method name="bind" type="DatagramChannel" line="200"/>
            <javadoc line="200">
                @throws AlreadyBoundException               {@inheritDoc}                
                <throws>
                    UnsupportedAddressTypeException     {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException              {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                         {@inheritDoc}                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link SecurityManager#checkListen checkListen} method denies the
                      operation                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setOption" type="DatagramChannel" line="215"/>
            <javadoc line="215">
                @throws UnsupportedOperationException           {@inheritDoc}                
                <throws>
                    IllegalArgumentException                {@inheritDoc}                    
                </throws>
                <throws>
                    ClosedChannelException                  {@inheritDoc}                    
                </throws>
                <throws>
                    IOException                             {@inheritDoc}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="socket" type="DatagramSocket" line="226"/>
            <javadoc line="226">
                Retrieves a datagram socket associated with this channel.
                  &lt;p&gt; The returned object will not declare any public methods that are not
                  declared in the {@link java.net.DatagramSocket} class.  &lt;/p&gt;                
                <return>
                    A datagram socket associated with this channel                    
                </return>
            </javadoc>
            <method name="isConnected" type="boolean" line="236"/>
            <javadoc line="236">
                Tells whether or not this channel&apos;s socket is connected.                
                <return>
                    {@code true} if, and only if, this channel's socket
                      is {@link #isOpen open} and connected                    
                </return>
            </javadoc>
            <method name="connect" type="DatagramChannel" line="244"/>
            <javadoc line="244">
                Connects this channel&apos;s socket.
                  &lt;p&gt; The channel&apos;s socket is configured so that it only receives
                  datagrams from, and sends datagrams to, the given remote &lt;i&gt;peer&lt;/i&gt;
                  address.  Once connected, datagrams may not be received from or sent to
                  any other address.  A datagram socket remains connected until it is
                  explicitly disconnected or until it is closed.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.DatagramSocket#connect connect} method of the {@link java.net.DatagramSocket} class.  That is, if a security manager has been
                  installed then this method verifies that its {@link java.lang.SecurityManager#checkAccept checkAccept} and {@link java.lang.SecurityManager#checkConnect checkConnect} methods permit
                  datagrams to be received from and sent to, respectively, the given
                  remote address.
                  &lt;p&gt; This method may be invoked at any time.  It will not have any effect
                  on read or write operations that are already in progress at the moment
                  that it is invoked. If this channel&apos;s socket is not bound then this method
                  will first cause the socket to be bound to an address that is assigned
                  automatically, as if invoking the {@link #bind bind} method with a
                  parameter of {@code null}. &lt;/p&gt;                
                <param>
                    remoteThe remote address to which this channel is to be connected                    
                </param>
                <return>
                    This datagram channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="disconnect" type="DatagramChannel" line="297"/>
            <javadoc line="297">
                Disconnects this channel&apos;s socket.
                  &lt;p&gt; The channel&apos;s socket is configured so that it can receive datagrams
                  from, and sends datagrams to, any remote address so long as the security
                  manager, if installed, permits it.
                  &lt;p&gt; This method may be invoked at any time.  It will not have any effect
                  on read or write operations that are already in progress at the moment
                  that it is invoked.
                  &lt;p&gt; If this channel&apos;s socket is not connected, or if the channel is
                  closed, then invoking this method has no effect.  &lt;/p&gt;                
                <return>
                    This datagram channel                    
                </return>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getRemoteAddress" type="SocketAddress" line="318"/>
            <javadoc line="318">
                Returns the remote address to which this channel&apos;s socket is connected.                
                <return>
                    The remote address; {@code null} if the channel's socket is not
                      connected                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="receive" type="SocketAddress" line="333"/>
            <javadoc line="333">
                Receives a datagram via this channel.
                  &lt;p&gt; If a datagram is immediately available, or if this channel is in
                  blocking mode and one eventually becomes available, then the datagram is
                  copied into the given byte buffer and its source address is returned.
                  If this channel is in non-blocking mode and a datagram is not
                  immediately available then this method immediately returns
                  &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt; The datagram is transferred into the given byte buffer starting at
                  its current position, as if by a regular {@link ReadableByteChannel#read(java.nio.ByteBuffer) read} operation.  If there
                  are fewer bytes remaining in the buffer than are required to hold the
                  datagram then the remainder of the datagram is silently discarded.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.DatagramSocket#receive receive} method of the {@link java.net.DatagramSocket} class.  That is, if the socket is not connected
                  to a specific remote address and a security manager has been installed
                  then for each datagram received this method verifies that the source&apos;s
                  address and port number are permitted by the security manager&apos;s {@link java.lang.SecurityManager#checkAccept checkAccept} method.  The overhead
                  of this security check can be avoided by first connecting the socket via
                  the {@link #connect connect} method.
                  &lt;p&gt; This method may be invoked at any time.  If another thread has
                  already initiated a read operation upon this channel, however, then an
                  invocation of this method will block until the first operation is
                  complete. If this channel&apos;s socket is not bound then this method will
                  first cause the socket to be bound to an address that is assigned
                  automatically, as if invoking the {@link #bind bind} method with a
                  parameter of {@code null}. &lt;/p&gt;                
                <param>
                    dstThe buffer into which the datagram is to be transferred                    
                </param>
                <return>
                    The datagram's source address,
                      or <tt>null</tt> if this channel is in non-blocking mode
                      and no datagram was immediately available                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit datagrams to be accepted
                      from the datagram's sender                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="send" type="int" line="397"/>
            <javadoc line="397">
                Sends a datagram via this channel.
                  &lt;p&gt; If this channel is in non-blocking mode and there is sufficient room
                  in the underlying output buffer, or if this channel is in blocking mode
                  and sufficient room becomes available, then the remaining bytes in the
                  given buffer are transmitted as a single datagram to the given target
                  address.
                  &lt;p&gt; The datagram is transferred from the byte buffer as if by a regular{@link WritableByteChannel#write(java.nio.ByteBuffer) write} operation.
                  &lt;p&gt; This method performs exactly the same security checks as the {@link java.net.DatagramSocket#send send} method of the {@link java.net.DatagramSocket} class.  That is, if the socket is not connected
                  to a specific remote address and a security manager has been installed
                  then for each datagram sent this method verifies that the target address
                  and port number are permitted by the security manager&apos;s {@link java.lang.SecurityManager#checkConnect checkConnect} method.  The
                  overhead of this security check can be avoided by first connecting the
                  socket via the {@link #connect connect} method.
                  &lt;p&gt; This method may be invoked at any time.  If another thread has
                  already initiated a write operation upon this channel, however, then an
                  invocation of this method will block until the first operation is
                  complete. If this channel&apos;s socket is not bound then this method will
                  first cause the socket to be bound to an address that is assigned
                  automatically, as if by invoking the {@link #bind bind} method with a
                  parameter of {@code null}. &lt;/p&gt;                
                <param>
                    srcThe buffer containing the datagram to be sent                    
                </param>
                <param>
                    targetThe address to which the datagram is to be sent                    
                </param>
                <return>
                    The number of bytes sent, which will be either the number
                      of bytes that were remaining in the source buffer when this
                      method was invoked or, if this channel is non-blocking, may be
                      zero if there was insufficient room for the datagram in the
                      underlying output buffer                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit datagrams to be sent
                      to the given address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="466"/>
            <javadoc line="466">
                Reads a datagram from this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, and it only accepts datagrams from the socket&apos;s peer.  If
                  there are more bytes in the datagram than remain in the given buffer
                  then the remainder of the datagram is silently discarded.  Otherwise
                  this method behaves exactly as specified in the {@link ReadableByteChannel} interface.  &lt;/p&gt;                
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <method name="read" type="long" line="481"/>
            <javadoc line="481">
                Reads a datagram from this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, and it only accepts datagrams from the socket&apos;s peer.  If
                  there are more bytes in the datagram than remain in the given buffers
                  then the remainder of the datagram is silently discarded.  Otherwise
                  this method behaves exactly as specified in the {@link ScatteringByteChannel} interface.  &lt;/p&gt;                
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <javadoc line="497">
                Reads a datagram from this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, and it only accepts datagrams from the socket&apos;s peer.  If
                  there are more bytes in the datagram than remain in the given buffers
                  then the remainder of the datagram is silently discarded.  Otherwise
                  this method behaves exactly as specified in the {@link ScatteringByteChannel} interface.  &lt;/p&gt;                
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <method name="read" type="long" line="510">
                <params>
                    <param name="dsts" type="ByteBuffer[]"/>
                </params>
            </method>
            <method name="write" type="int" line="514"/>
            <javadoc line="514">
                Writes a datagram to this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, in which case it sends datagrams directly to the socket&apos;s
                  peer.  Otherwise it behaves exactly as specified in the {@link WritableByteChannel} interface.  &lt;/p&gt;                
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <method name="write" type="long" line="527"/>
            <javadoc line="527">
                Writes a datagram to this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, in which case it sends datagrams directly to the socket&apos;s
                  peer.  Otherwise it behaves exactly as specified in the {@link GatheringByteChannel} interface.  &lt;/p&gt;                
                <return>
                    The number of bytes sent, which will be either the number
                      of bytes that were remaining in the source buffer when this
                      method was invoked or, if this channel is non-blocking, may be
                      zero if there was insufficient room for the datagram in the
                      underlying output buffer                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <javadoc line="547">
                Writes a datagram to this channel.
                  &lt;p&gt; This method may only be invoked if this channel&apos;s socket is
                  connected, in which case it sends datagrams directly to the socket&apos;s
                  peer.  Otherwise it behaves exactly as specified in the {@link GatheringByteChannel} interface.  &lt;/p&gt;                
                <return>
                    The number of bytes sent, which will be either the number
                      of bytes that were remaining in the source buffer when this
                      method was invoked or, if this channel is non-blocking, may be
                      zero if there was insufficient room for the datagram in the
                      underlying output buffer                    
                </return>
                <throws>
                    NotYetConnectedExceptionIf this channel's socket is not connected                    
                </throws>
            </javadoc>
            <method name="write" type="long" line="564">
                <params>
                    <param name="srcs" type="ByteBuffer[]"/>
                </params>
            </method>
        </class>
    </source>