<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.activation">
        <import package="java.rmi.MarshalledObject"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.activation.UnknownObjectException"/>
        <interface name="Activator">
            <implements interface="Remote"/>
            <javadoc line="33">
                The &lt;code&gt;Activator&lt;/code&gt; facilitates remote object activation. A
                  &quot;faulting&quot; remote reference calls the activator&apos;s
                  &lt;code&gt;activate&lt;/code&gt; method to obtain a &quot;live&quot; reference to a
                  &quot;activatable&quot; remote object. Upon receiving a request for activation,
                  the activator looks up the activation descriptor for the activation
                  identifier, &lt;code&gt;id&lt;/code&gt;, determines the group in which the
                  object should be activated initiates object re-creation via the
                  group&apos;s &lt;code&gt;ActivationInstantiator&lt;/code&gt; (via a call to the
                  &lt;code&gt;newInstance&lt;/code&gt; method). The activator initiates the
                  execution of activation groups as necessary. For example, if an
                  activation group for a specific group identifier is not already
                  executing, the activator initiates the execution of a VM for the
                  group. &lt;p&gt;
                  The &lt;code&gt;Activator&lt;/code&gt; works closely with
                  &lt;code&gt;ActivationSystem&lt;/code&gt;, which provides a means for registering
                  groups and objects within those groups, and &lt;code&gt;ActivationMonitor&lt;/code&gt;,
                  which recives information about active and inactive objects and inactive
                  groups. &lt;p&gt;
                  The activator is responsible for monitoring and detecting when
                  activation groups fail so that it can remove stale remote references
                  to groups and active object&apos;s within those groups.&lt;p&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <see>
                    ActivationInstantiator                    
                </see>
                <see>
                    ActivationGroupDesc                    
                </see>
                <see>
                    ActivationGroupID                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="activate" type="MarshalledObject<? extends Remote>" line="65"/>
            <javadoc line="65">
                Activate the object associated with the activation identifier,
                  &lt;code&gt;id&lt;/code&gt;. If the activator knows the object to be active
                  already, and &lt;code&gt;force&lt;/code&gt; is false , the stub with a
                  &quot;live&quot; reference is returned immediately to the caller;
                  otherwise, if the activator does not know that corresponding
                  the remote object is active, the activator uses the activation
                  descriptor information (previously registered) to determine the
                  group (VM) in which the object should be activated. If an
                  &lt;code&gt;ActivationInstantiator&lt;/code&gt; corresponding to the
                  object&apos;s group descriptor already exists, the activator invokes
                  the activation group&apos;s &lt;code&gt;newInstance&lt;/code&gt; method passing
                  it the object&apos;s id and descriptor. &lt;p&gt;
                  If the activation group for the object&apos;s group descriptor does
                  not yet exist, the activator starts an
                  &lt;code&gt;ActivationInstantiator&lt;/code&gt; executing (by spawning a
                  child process, for example). When the activator receives the
                  activation group&apos;s call back (via the
                  &lt;code&gt;ActivationSystem&lt;/code&gt;&apos;s &lt;code&gt;activeGroup&lt;/code&gt;
                  method) specifying the activation group&apos;s reference, the
                  activator can then invoke that activation instantiator&apos;s
                  &lt;code&gt;newInstance&lt;/code&gt; method to forward each pending
                  activation request to the activation group and return the
                  result (a marshalled remote object reference, a stub) to the
                  caller.&lt;p&gt;
                  Note that the activator receives a &quot;marshalled&quot; object instead of a
                  Remote object so that the activator does not need to load the
                  code for that object, or participate in distributed garbage
                  collection for that object. If the activator kept a strong
                  reference to the remote object, the activator would then
                  prevent the object from being garbage collected under the
                  normal distributed garbage collection mechanism. &lt;p&gt;                
                <param>
                    id the activation identifier for the object being activated                    
                </param>
                <param>
                    force if true, the activator contacts the group to obtain
                      the remote object's reference; if false, returning the cached value
                      is allowed.                    
                </param>
                <return>
                    the remote object (a stub) in a marshalled form                    
                </return>
                <exception>
                    ActivationException if object activation fails                    
                </exception>
                <exception>
                    UnknownObjectException if object is unknown (not registered)                    
                </exception>
                <exception>
                    RemoteException if remote call fails                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
        </interface>
    </source>