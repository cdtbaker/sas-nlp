<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.activation">
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.rmi.MarshalledObject"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RemoteObjectInvocationHandler"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.UID"/>
        <class name="ActivationID" line="17">
            <implements interface="Serializable"/>
            <javadoc line="17">
                Activation makes use of special identifiers to denote remote
                  objects that can be activated over time. An activation identifier
                  (an instance of the class &lt;code&gt;ActivationID&lt;/code&gt;) contains several
                  pieces of information needed for activating an object:
                  &lt;ul&gt;
                  &lt;li&gt; a remote reference to the object&apos;s activator (a {@link java.rmi.server.RemoteRef RemoteRef}instance), and
                  &lt;li&gt; a unique identifier (a {@link java.rmi.server.UID UID}instance) for the object. &lt;/ul&gt; &lt;p&gt;
                  An activation identifier for an object can be obtained by registering
                  an object with the activation system. Registration is accomplished
                  in a few ways: &lt;ul&gt;
                  &lt;li&gt;via the &lt;code&gt;Activatable.register&lt;/code&gt; method
                  &lt;li&gt;via the first &lt;code&gt;Activatable&lt;/code&gt; constructor (that takes
                  three arguments and both registers and exports the object, and
                  &lt;li&gt;via the first &lt;code&gt;Activatable.exportObject&lt;/code&gt; method
                  that takes the activation descriptor, object and port as arguments;
                  this method both registers and exports the object. &lt;/ul&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <see>
                    Activatable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="activator" type="Activator" line="39"/>
            <javadoc line="39">
                the object&apos;s activator                
            </javadoc>
            <declaration name="uid" type="UID" line="43"/>
            <javadoc line="43">
                the object&apos;s unique id                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <javadoc line="47">
                indicate compatibility with the Java 2 SDK v1.2 version of class                
            </javadoc>
            <javadoc line="51">
                The constructor for &lt;code&gt;ActivationID&lt;/code&gt; takes a single
                  argument, activator, that specifies a remote reference to the
                  activator responsible for activating the object associated with
                  this identifier. An instance of &lt;code&gt;ActivationID&lt;/code&gt; is globally
                  unique.                
                <param>
                    activator reference to the activator responsible for
                      activating the object                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ActivationID" type="constructor" line="61">
                <params>
                    <param name="activator" type="Activator"/>
                </params>
            </method>
            <javadoc line="64">
                Activate the object for this id.                
                <param>
                    force if true, forces the activator to contact the group
                      when activating the object (instead of returning a cached reference);
                      if false, returning a cached value is acceptable.                    
                </param>
                <return>
                    the reference to the active remote object                    
                </return>
                <exception>
                    ActivationException if activation fails                    
                </exception>
                <exception>
                    UnknownObjectException if the object is unknown                    
                </exception>
                <exception>
                    RemoteException if remote call fails                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="activate" type="Remote" line="75">
                <params>
                    <param name="force" type="boolean"/>
                </params>
                <scope line="76">
                    <declaration name="mobj" type="MarshalledObject&amp;lt;? extends Remote&amp;gt;" line="77"/>
                </scope>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86"/>
            </method>
            <javadoc line="90">
                Returns a hashcode for the activation id.  Two identifiers that
                  refer to the same remote object will have the same hash code.                
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="96"/>
            <javadoc line="99">
                Compares two activation ids for content equality.
                  Returns true if both of the following conditions are true:
                  1) the unique identifiers equivalent (by content), and
                  2) the activator specified in each identifier
                  refers to the same remote object.                
                <param>
                    obj     the Object to compare with                    
                </param>
                <return>
                    true if these Objects are equal; false otherwise.                    
                </return>
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="110">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="111">
                    <declaration name="id" type="ActivationID" line="112"/>
                </scope>
                <scope line="115"/>
            </method>
            <javadoc line="119">
                &lt;code&gt;writeObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method writes this object&apos;s serialized form for
                  this class as follows:
                  &lt;p&gt;The &lt;code&gt;writeObject&lt;/code&gt; method is invoked on
                  &lt;code&gt;out&lt;/code&gt; passing this object&apos;s unique identifier
                  (a {@link java.rmi.server.UID UID} instance) as the argument.
                  &lt;p&gt;Next, the {@link java.rmi.server.RemoteRef#getRefClass(java.io.ObjectOutput)getRefClass} method is invoked on the activator&apos;s
                  &lt;code&gt;RemoteRef&lt;/code&gt; instance to obtain its external ref
                  type name.  Next, the &lt;code&gt;writeUTF&lt;/code&gt; method is
                  invoked on &lt;code&gt;out&lt;/code&gt; with the value returned by
                  &lt;code&gt;getRefClass&lt;/code&gt;, and then the
                  &lt;code&gt;writeExternal&lt;/code&gt; method is invoked on the
                  &lt;code&gt;RemoteRef&lt;/code&gt; instance passing &lt;code&gt;out&lt;/code&gt;
                  as the argument.                
                <serialData>
                    The serialized data for this class comprises a
                      &lt;code&gt;java.rmi.server.UID&lt;/code&gt; (written with
                      &lt;code&gt;ObjectOutput.writeObject&lt;/code&gt;) followed by the
                      external ref type name of the activator&apos;s
                      &lt;code&gt;RemoteRef&lt;/code&gt; instance (a string written with
                      &lt;code&gt;ObjectOutput.writeUTF&lt;/code&gt;), followed by the
                      external form of the &lt;code&gt;RemoteRef&lt;/code&gt; instance as
                      written by its &lt;code&gt;writeExternal&lt;/code&gt; method.
                      &lt;p&gt;The external ref type name of the
                      &lt;code&gt;RemoteRef&lt;/Code&gt; instance is
                      determined using the definitions of external ref type
                      names specified in the {@link java.rmi.server.RemoteObjectRemoteObject} &lt;code&gt;writeObject&lt;/code&gt; method
                      &lt;b&gt;serialData&lt;/b&gt; specification.  Similarly, the data
                      written by the &lt;code&gt;writeExternal&lt;/code&gt; method and read
                      by the &lt;code&gt;readExternal&lt;/code&gt; method of
                      &lt;code&gt;RemoteRef&lt;/code&gt; implementation classes
                      corresponding to each of the defined external ref type
                      names is specified in the {@link java.rmi.server.RemoteObject RemoteObject}&lt;code&gt;writeObject&lt;/code&gt; method &lt;b&gt;serialData&lt;/b&gt;
                      specification.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="154">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="ref" type="RemoteRef" line="156"/>
                <scope line="157"/>
                <scope line="160">
                    <declaration name="handler" type="InvocationHandler" line="161"/>
                    <scope line="162"/>
                </scope>
                <scope line="167"/>
            </method>
            <javadoc line="173">
                &lt;code&gt;readObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method reads this object&apos;s serialized form for this
                  class as follows:
                  &lt;p&gt;The &lt;code&gt;readObject&lt;/code&gt; method is invoked on
                  &lt;code&gt;in&lt;/code&gt; to read this object&apos;s unique identifier
                  (a {@link java.rmi.server.UID UID} instance).
                  &lt;p&gt;Next, the &lt;code&gt;readUTF&lt;/code&gt; method is invoked on
                  &lt;code&gt;in&lt;/code&gt; to read the external ref type name of the
                  &lt;code&gt;RemoteRef&lt;/code&gt; instance for this object&apos;s
                  activator.  Next, the &lt;code&gt;RemoteRef&lt;/code&gt;
                  instance is created of an implementation-specific class
                  corresponding to the external ref type name (returned by
                  &lt;code&gt;readUTF&lt;/code&gt;), and the &lt;code&gt;readExternal&lt;/code&gt;
                  method is invoked on that &lt;code&gt;RemoteRef&lt;/code&gt; instance
                  to read the external form corresponding to the external
                  ref type name.
                  &lt;p&gt;Note: If the external ref type name is
                  &lt;code&gt;&quot;UnicastRef&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef&quot;&lt;/code&gt;,
                  &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef2&quot;&lt;/code&gt;,
                  or &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt;, a corresponding
                  implementation-specific class must be found, and its
                  &lt;code&gt;readExternal&lt;/code&gt; method must read the serial data
                  for that external ref type name as specified to be written
                  in the &lt;b&gt;serialData&lt;/b&gt; documentation for this class.
                  If the external ref type name is any other string (of non-zero
                  length), a &lt;code&gt;ClassNotFoundException&lt;/code&gt; will be thrown,
                  unless the implementation provides an implementation-specific
                  class corresponding to that external ref type name, in which
                  case the &lt;code&gt;RemoteRef&lt;/code&gt; will be an instance of
                  that implementation-specific class.                
            </javadoc>
            <method name="readObject" type="void" line="205">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="207">
                    <declaration name="refClass" type="Class&amp;lt;? extends RemoteRef&amp;gt;" line="208"/>
                    <declaration name="ref" type="RemoteRef" line="209"/>
                </scope>
                <scope line="213"/>
                <scope line="216"/>
            </method>
        </class>
    </source>