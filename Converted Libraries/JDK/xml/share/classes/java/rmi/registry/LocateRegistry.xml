<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.registry">
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.server.ObjID"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.rmi.server.UnicastRemoteObject"/>
        <import package="sun.rmi.registry.RegistryImpl"/>
        <import package="sun.rmi.server.UnicastRef2"/>
        <import package="sun.rmi.server.UnicastRef"/>
        <import package="sun.rmi.server.Util"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <import package="sun.rmi.transport.tcp.TCPEndpoint"/>
        <class name="LocateRegistry" line="14">
            <javadoc line="14">
                &lt;code&gt;LocateRegistry&lt;/code&gt; is used to obtain a reference to a bootstrap
                  remote object registry on a particular host (including the local host), or
                  to create a remote object registry that accepts calls on a specific port.
                  &lt;p&gt; Note that a &lt;code&gt;getRegistry&lt;/code&gt; call does not actually make a
                  connection to the remote host.  It simply creates a local reference to
                  the remote registry and will succeed even if no registry is running on
                  the remote host.  Therefore, a subsequent method invocation to a remote
                  registry returned as a result of this method may fail.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    java.rmi.registry.Registry                    
                </see>
            </javadoc>
            <javadoc line="29">
                Private constructor to disable public construction.                
            </javadoc>
            <method name="LocateRegistry" type="constructor" line="32"/>
            <javadoc line="34">
                Returns a reference to the the remote object &lt;code&gt;Registry&lt;/code&gt; for
                  the local host on the default registry port of 1099.                
                <return>
                    reference (a stub) to the remote object registry                    
                </return>
                <exception>
                    RemoteException if the reference could not be created                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getRegistry" type="Registry" line="41"/>
            <javadoc line="44">
                Returns a reference to the the remote object &lt;code&gt;Registry&lt;/code&gt; for
                  the local host on the specified &lt;code&gt;port&lt;/code&gt;.                
                <param>
                    port port on which the registry accepts requests                    
                </param>
                <return>
                    reference (a stub) to the remote object registry                    
                </return>
                <exception>
                    RemoteException if the reference could not be created                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getRegistry" type="Registry" line="52">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Returns a reference to the remote object &lt;code&gt;Registry&lt;/code&gt; on the
                  specified &lt;code&gt;host&lt;/code&gt; on the default registry port of 1099.  If
                  &lt;code&gt;host&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the local host is used.                
                <param>
                    host host for the remote registry                    
                </param>
                <return>
                    reference (a stub) to the remote object registry                    
                </return>
                <exception>
                    RemoteException if the reference could not be created                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getRegistry" type="Registry" line="64">
                <params>
                    <param name="host" type="String"/>
                </params>
            </method>
            <javadoc line="67">
                Returns a reference to the remote object &lt;code&gt;Registry&lt;/code&gt; on the
                  specified &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;. If &lt;code&gt;host&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, the local host is used.                
                <param>
                    host host for the remote registry                    
                </param>
                <param>
                    port port on which the registry accepts requests                    
                </param>
                <return>
                    reference (a stub) to the remote object registry                    
                </return>
                <exception>
                    RemoteException if the reference could not be created                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getRegistry" type="Registry" line="77">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Returns a locally created remote reference to the remote object
                  &lt;code&gt;Registry&lt;/code&gt; on the specified &lt;code&gt;host&lt;/code&gt; and
                  &lt;code&gt;port&lt;/code&gt;.  Communication with this remote registry will
                  use the supplied &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; &lt;code&gt;csf&lt;/code&gt;
                  to create &lt;code&gt;Socket&lt;/code&gt; connections to the registry on the
                  remote &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.                
                <param>
                    host host for the remote registry                    
                </param>
                <param>
                    port port on which the registry accepts requests                    
                </param>
                <param>
                    csf  client-side &lt;code&gt;Socket&lt;/code&gt; factory used to
                      make connections to the registry.  If &lt;code&gt;csf&lt;/code&gt;
                      is null, then the default client-side &lt;code&gt;Socket&lt;/code&gt;
                      factory will be used in the registry stub.                    
                </param>
                <return>
                    reference (a stub) to the remote registry                    
                </return>
                <exception>
                    RemoteException if the reference could not be created                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRegistry" type="Registry" line="97">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                </params>
                <declaration name="registry" type="Registry" line="98"/>
                <scope line="100">
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
                <declaration name="liveRef" type="LiveRef" line="108"/>
                <declaration name="ref" type="RemoteRef" line="109"/>
            </method>
            <javadoc line="112">
                Creates and exports a &lt;code&gt;Registry&lt;/code&gt; instance on the local
                  host that accepts requests on the specified &lt;code&gt;port&lt;/code&gt;.
                  &lt;p&gt;The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static{@link UnicastRemoteObject#exportObject(Remote,int)UnicastRemoteObject.exportObject} method is invoked, passing the
                  &lt;code&gt;Registry&lt;/code&gt; instance and the specified &lt;code&gt;port&lt;/code&gt; as
                  arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is
                  exported with a well-known object identifier, an {@link ObjID}instance constructed with the value {@link ObjID#REGISTRY_ID}.                
                <param>
                    port the port on which the registry accepts requests                    
                </param>
                <return>
                    the registry                    
                </return>
                <exception>
                    RemoteException if the registry could not be exported                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="createRegistry" type="Registry" line="124">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Creates and exports a &lt;code&gt;Registry&lt;/code&gt; instance on the local
                  host that uses custom socket factories for communication with that
                  instance.  The registry that is created listens for incoming
                  requests on the given &lt;code&gt;port&lt;/code&gt; using a
                  &lt;code&gt;ServerSocket&lt;/code&gt; created from the supplied
                  &lt;code&gt;RMIServerSocketFactory&lt;/code&gt;.
                  &lt;p&gt;The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if
                  the static {@link UnicastRemoteObject#exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory)UnicastRemoteObject.exportObject} method is invoked, passing the
                  &lt;code&gt;Registry&lt;/code&gt; instance, the specified &lt;code&gt;port&lt;/code&gt;, the
                  specified &lt;code&gt;RMIClientSocketFactory&lt;/code&gt;, and the specified
                  &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; as arguments, except that the
                  &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object
                  identifier, an {@link ObjID} instance constructed with the value{@link ObjID#REGISTRY_ID}.                
                <param>
                    port port on which the registry accepts requests                    
                </param>
                <param>
                    csf  client-side &lt;code&gt;Socket&lt;/code&gt; factory used to
                      make connections to the registry                    
                </param>
                <param>
                    ssf  server-side &lt;code&gt;ServerSocket&lt;/code&gt; factory
                      used to accept connections to the registry                    
                </param>
                <return>
                    the registry                    
                </return>
                <exception>
                    RemoteException if the registry could not be exported                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createRegistry" type="Registry" line="150">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
            </method>
        </class>
    </source>