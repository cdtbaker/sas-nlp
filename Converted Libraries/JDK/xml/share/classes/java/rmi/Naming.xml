<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi">
        <import package="java.rmi.registry"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URI"/>
        <import package="java.net.URISyntaxException"/>
        <class name="Naming" line="32">
            <javadoc line="32">
                The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining
                  references to remote objects in a remote object registry.  Each method of
                  the &lt;code&gt;Naming&lt;/code&gt; class takes as one of its arguments a name that
                  is a &lt;code&gt;java.lang.String&lt;/code&gt; in URL format (without the
                  scheme component) of the form:
                  &lt;PRE&gt;
                  //host:port/name
                  &lt;/PRE&gt;
                  &lt;P&gt;where &lt;code&gt;host&lt;/code&gt; is the host (remote or local) where the registry
                  is located, &lt;code&gt;port&lt;/code&gt; is the port number on which the registry
                  accepts calls, and where &lt;code&gt;name&lt;/code&gt; is a simple string uninterpreted
                  by the registry. Both &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are optional.
                  If &lt;code&gt;host&lt;/code&gt; is omitted, the host defaults to the local host. If
                  &lt;code&gt;port&lt;/code&gt; is omitted, then the port defaults to 1099, the
                  &quot;well-known&quot; port that RMI&apos;s registry, &lt;code&gt;rmiregistry&lt;/code&gt;, uses.
                  &lt;P&gt;&lt;em&gt;Binding&lt;/em&gt; a name for a remote object is associating or
                  registering a name for a remote object that can be used at a later time to
                  look up that remote object.  A remote object can be associated with a name
                  using the &lt;code&gt;Naming&lt;/code&gt; class&apos;s &lt;code&gt;bind&lt;/code&gt; or
                  &lt;code&gt;rebind&lt;/code&gt; methods.
                  &lt;P&gt;Once a remote object is registered (bound) with the RMI registry on the
                  local host, callers on a remote (or local) host can lookup the remote
                  object by name, obtain its reference, and then invoke remote methods on the
                  object.  A registry may be shared by all servers running on a host or an
                  individual server process may create and use its own registry if desired
                  (see &lt;code&gt;java.rmi.registry.LocateRegistry.createRegistry&lt;/code&gt; method
                  for details).                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Roger Riggs                    
                </author>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    java.rmi.registry.Registry                    
                </see>
                <see>
                    java.rmi.registry.LocateRegistry                    
                </see>
                <see>
                    java.rmi.registry.LocateRegistry#createRegistry(int)                    
                </see>
            </javadoc>
            <javadoc line="73">
                Disallow anyone from creating one of these                
            </javadoc>
            <method name="Naming" type="constructor" line="76"/>
            <javadoc line="78">
                Returns a reference, a stub, for the remote object associated
                  with the specified &lt;code&gt;name&lt;/code&gt;.                
                <param>
                    name a name in URL format (without the scheme component)                    
                </param>
                <return>
                    a reference for a remote object                    
                </return>
                <exception>
                    NotBoundException if name is not currently bound                    
                </exception>
                <exception>
                    RemoteException if registry could not be contacted                    
                </exception>
                <exception>
                    AccessException if this operation is not permitted                    
                </exception>
                <exception>
                    MalformedURLException if the name is not an appropriately
                      formatted URL                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="lookup" type="Remote" line="95">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="parsed" type="ParsedNamingURL" line="96"/>
                <declaration name="registry" type="Registry" line="97"/>
            </method>
            <javadoc line="104">
                Binds the specified &lt;code&gt;name&lt;/code&gt; to a remote object.                
                <param>
                    name a name in URL format (without the scheme component)                    
                </param>
                <param>
                    obj a reference for the remote object (usually a stub)                    
                </param>
                <exception>
                    AlreadyBoundException if name is already bound                    
                </exception>
                <exception>
                    MalformedURLException if the name is not an appropriately
                      formatted URL                    
                </exception>
                <exception>
                    RemoteException if registry could not be contacted                    
                </exception>
                <exception>
                    AccessException if this operation is not permitted (if
                      originating from a non-local host, for example)                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="bind" type="void" line="121">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
                <declaration name="parsed" type="ParsedNamingURL" line="122"/>
                <declaration name="registry" type="Registry" line="123"/>
            </method>
            <javadoc line="131">
                Destroys the binding for the specified name that is associated
                  with a remote object.                
                <param>
                    name a name in URL format (without the scheme component)                    
                </param>
                <exception>
                    NotBoundException if name is not currently bound                    
                </exception>
                <exception>
                    MalformedURLException if the name is not an appropriately
                      formatted URL                    
                </exception>
                <exception>
                    RemoteException if registry could not be contacted                    
                </exception>
                <exception>
                    AccessException if this operation is not permitted (if
                      originating from a non-local host, for example)                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="unbind" type="void" line="148">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="parsed" type="ParsedNamingURL" line="149"/>
                <declaration name="registry" type="Registry" line="150"/>
            </method>
            <javadoc line="155">
                Rebinds the specified name to a new remote object. Any existing
                  binding for the name is replaced.                
                <param>
                    name a name in URL format (without the scheme component)                    
                </param>
                <param>
                    obj new remote object to associate with the name                    
                </param>
                <exception>
                    MalformedURLException if the name is not an appropriately
                      formatted URL                    
                </exception>
                <exception>
                    RemoteException if registry could not be contacted                    
                </exception>
                <exception>
                    AccessException if this operation is not permitted (if
                      originating from a non-local host, for example)                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="rebind" type="void" line="170">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Remote"/>
                </params>
                <declaration name="parsed" type="ParsedNamingURL" line="171"/>
                <declaration name="registry" type="Registry" line="172"/>
            </method>
            <javadoc line="180">
                Returns an array of the names bound in the registry.  The names are
                  URL-formatted (without the scheme component) strings. The array contains
                  a snapshot of the names present in the registry at the time of the
                  call.                
                <param>
                    name a registry name in URL format (without the scheme
                      component)                    
                </param>
                <return>
                    an array of names (in the appropriate format) bound
                      in the registry                    
                </return>
                <exception>
                    MalformedURLException if the name is not an appropriately
                      formatted URL                    
                </exception>
                <exception>
                    RemoteException if registry could not be contacted.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="list" type="String[]" line="197">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="parsed" type="ParsedNamingURL" line="198"/>
                <declaration name="registry" type="Registry" line="199"/>
                <declaration name="prefix" type="String" line="201"/>
                <declaration name="names" type="String[]" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="215">
                Returns a registry reference obtained from information in the URL.                
            </javadoc>
            <method name="getRegistry" type="Registry" line="220">
                <params>
                    <param name="parsed" type="ParsedNamingURL"/>
                </params>
            </method>
            <javadoc line="224">
                Dissect Naming URL strings to obtain referenced host, port and
                  object name.                
                <return>
                    an object which contains each of the above
                      components.                    
                </return>
                <exception>
                    MalformedURLException if given url string is malformed                    
                </exception>
            </javadoc>
            <method name="parseURL" type="ParsedNamingURL" line="235">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="240">
                    With RFC 3986 URI handling, &apos;rmi::&lt;port&gt;&apos; and
                     &apos;:&lt;port&gt;&apos; forms will result in a URI syntax exception
                     Convert the authority to a localhost:&lt;port&gt; form                    
                </comment>
                <scope line="236"/>
                <scope line="238">
                    <declaration name="mue" type="MalformedURLException" line="243"/>
                    <declaration name="indexSchemeEnd" type="int" line="246"/>
                    <declaration name="indexAuthorityBegin" type="int" line="247"/>
                    <scope line="248"/>
                    <scope line="253">
                        <declaration name="indexHostBegin" type="int" line="254"/>
                        <declaration name="newStr" type="String" line="255"/>
                        <scope line="258"/>
                        <scope line="260"/>
                        <scope line="262"/>
                    </scope>
                </scope>
            </method>
            <method name="intParseURL" type="ParsedNamingURL" line="272">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="308">
                    With 2396 URI handling, forms such as &apos;rmi:host:bar&apos;
                     or &apos;rmi::&lt;port&gt;&apos; are parsed into a registry based
                     authority. We only want to allow server based naming
                     authorities.                    
                </comment>
                <comment line="316">
                    Check if the authority is of form &apos;:&lt;port&gt;&apos;                    
                </comment>
                <comment line="319">
                    Convert the authority to &apos;localhost:&lt;port&gt;&apos; form                    
                </comment>
                <comment line="323">
                    Make sure it now parses to a valid server based
                     naming authority                    
                </comment>
                <declaration name="uri" type="URI" line="273"/>
                <scope line="274"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="284"/>
                <declaration name="scheme" type="String" line="288"/>
                <scope line="289"/>
                <declaration name="name" type="String" line="293"/>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="298"/>
                </scope>
                <declaration name="host" type="String" line="303"/>
                <scope line="304">
                    <scope line="306"/>
                    <scope line="314">
                        <declaration name="authority" type="String" line="316"/>
                        <scope line="317">
                            <scope line="320"/>
                            <scope line="325"/>
                        </scope>
                        <scope line="329"/>
                    </scope>
                </scope>
                <declaration name="port" type="int" line="335"/>
                <scope line="336"/>
            </method>
            <class name="ParsedNamingURL" line="342">
                <javadoc line="342">
                    Simple class to enable multiple URL return values.                    
                </javadoc>
                <declaration name="host" type="String" line="346"/>
                <declaration name="port" type="int" line="347"/>
                <declaration name="name" type="String" line="348"/>
                <method name="ParsedNamingURL" type="constructor" line="350">
                    <params>
                        <param name="host" type="String"/>
                        <param name="port" type="int"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>