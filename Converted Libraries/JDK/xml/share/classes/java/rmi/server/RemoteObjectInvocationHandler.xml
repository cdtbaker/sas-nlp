<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.UnexpectedException"/>
        <import package="java.rmi.activation.Activatable"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.rmi.server.Util"/>
        <import package="sun.rmi.server.WeakClassHashMap"/>
        <class name="RemoteObjectInvocationHandler" line="39">
            <extends class="RemoteObject"/>
            <implements interface="InvocationHandler"/>
            <javadoc line="39">
                An implementation of the &lt;code&gt;InvocationHandler&lt;/code&gt; interface for
                  use with Java Remote Method Invocation (Java RMI).  This invocation
                  handler can be used in conjunction with a dynamic proxy instance as a
                  replacement for a pregenerated stub class.
                  &lt;p&gt;Applications are not expected to use this class directly.  A remote
                  object exported to use a dynamic proxy with {@link UnicastRemoteObject}or {@link Activatable} has an instance of this class as that proxy&apos;s
                  invocation handler.                
                <author>
                    Ann Wollrath                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <declaration name="methodToHash_Maps" type="MethodToHash_Maps" line="59"/>
            <javadoc line="59">
                A weak hash map, mapping classes to weak hash maps that map
                  method objects to method hashes.                
            </javadoc>
            <javadoc line="66">
                Creates a new &lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt; constructed
                  with the specified &lt;code&gt;RemoteRef&lt;/code&gt;.                
                <param>
                    ref the remote ref                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;ref&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="RemoteObjectInvocationHandler" type="constructor" line="74">
                <params>
                    <param name="ref" type="RemoteRef"/>
                </params>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Processes a method invocation made on the encapsulating
                  proxy instance, &lt;code&gt;proxy&lt;/code&gt;, and returns the result.
                  &lt;p&gt;&lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt; implements this method
                  as follows:
                  &lt;p&gt;If &lt;code&gt;method&lt;/code&gt; is one of the following methods, it
                  is processed as described below:
                  &lt;ul&gt;
                  &lt;li&gt;{@link Object#hashCode Object.hashCode}: Returns the hash
                  code value for the proxy.
                  &lt;li&gt;{@link Object#equals Object.equals}: Returns &lt;code&gt;true&lt;/code&gt;
                  if the argument (&lt;code&gt;args[0]&lt;/code&gt;) is an instance of a dynamic
                  proxy class and this invocation handler is equal to the invocation
                  handler of that argument, and returns &lt;code&gt;false&lt;/code&gt; otherwise.
                  &lt;li&gt;{@link Object#toString Object.toString}: Returns a string
                  representation of the proxy.
                  &lt;/ul&gt;
                  &lt;p&gt;Otherwise, a remote call is made as follows:
                  &lt;ul&gt;
                  &lt;li&gt;If &lt;code&gt;proxy&lt;/code&gt; is not an instance of the interface{@link Remote}, then an {@link IllegalArgumentException} is thrown.
                  &lt;li&gt;Otherwise, the {@link RemoteRef#invoke invoke} method is invoked
                  on this invocation handler&apos;s &lt;code&gt;RemoteRef&lt;/code&gt;, passing
                  &lt;code&gt;proxy&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, and the
                  method hash (defined in section 8.3 of the &quot;Java Remote Method
                  Invocation (RMI) Specification&quot;) for &lt;code&gt;method&lt;/code&gt;, and the
                  result is returned.
                  &lt;li&gt;If an exception is thrown by &lt;code&gt;RemoteRef.invoke&lt;/code&gt; and
                  that exception is a checked exception that is not assignable to any
                  exception in the &lt;code&gt;throws&lt;/code&gt; clause of the method
                  implemented by the &lt;code&gt;proxy&lt;/code&gt;&apos;s class, then that exception
                  is wrapped in an {@link UnexpectedException} and the wrapped
                  exception is thrown.  Otherwise, the exception thrown by
                  &lt;code&gt;invoke&lt;/code&gt; is thrown by this method.
                  &lt;/ul&gt;
                  &lt;p&gt;The semantics of this method are unspecified if the
                  arguments could not have been produced by an instance of some
                  valid dynamic proxy class containing this invocation handler.                
                <param>
                    proxy the proxy instance that the method was invoked on                    
                </param>
                <param>
                    method the &lt;code&gt;Method&lt;/code&gt; instance corresponding to the
                      interface method invoked on the proxy instance                    
                </param>
                <param>
                    args an array of objects containing the values of the
                      arguments passed in the method invocation on the proxy instance, or
                      &lt;code&gt;null&lt;/code&gt; if the method takes no arguments                    
                </param>
                <return>
                    the value to return from the method invocation on the proxy
                      instance                    
                </return>
                <throws>
                    Throwable the exception to throw from the method invocation
                      on the proxy instance                    
                </throws>
            </javadoc>
            <method name="invoke" type="Object" line="144">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <scope line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="152">
                Handles java.lang.Object methods.                
            </javadoc>
            <method name="invokeObjectMethod" type="Object" line="158">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <declaration name="name" type="String" line="159"/>
                <scope line="161"/>
                <scope line="164">
                    <declaration name="obj" type="Object" line="165"/>
                </scope>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <javadoc line="181">
                Handles remote methods.                
            </javadoc>
            <method name="invokeRemoteMethod" type="Object" line="188">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <scope line="189">
                    <scope line="190"/>
                </scope>
                <scope line="196">
                    <scope line="197">
                        <declaration name="cl" type="Class&lt;?&gt;" line="198"/>
                        <scope line="199"/>
                        <scope line="202"/>
                        <declaration name="thrownType" type="Class&lt;?&gt;" line="206"/>
                        <scope line="207">
                            <scope line="208"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="218">
                Returns a string representation for a proxy that uses this invocation
                  handler.                
            </javadoc>
            <method name="proxyToString" type="String" line="222">
                <params>
                    <param name="proxy" type="Object"/>
                </params>
                <declaration name="interfaces" type="Class&lt;?&gt;[]" line="223"/>
                <scope line="224"/>
                <declaration name="iface" type="String" line="227"/>
                <scope line="228"/>
                <declaration name="dot" type="int" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="238">
                @throws InvalidObjectException unconditionally                
            </javadoc>
            <method name="readObjectNoData" type="void" line="241"/>
            <javadoc line="246">
                Returns the method hash for the specified method.  Subsequent calls
                  to &quot;getMethodHash&quot; passing the same method argument should be faster
                  since this method caches internally the result of the method to
                  method hash mapping.  The method hash is calculated using the
                  &quot;computeMethodHash&quot; method.                
                <param>
                    method the remote method                    
                </param>
                <return>
                    the method hash for the specified method                    
                </return>
            </javadoc>
            <method name="getMethodHash" type="long" line="256">
                <params>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <class name="MethodToHash_Maps" line="260">
                <extends class="WeakClassHashMap">
                    <type_params>
                        <type_param name="Map<Method,Long>"/>
                    </type_params>
                </extends>
                <javadoc line="260">
                    A weak hash map, mapping classes to weak hash maps that map
                      method objects to method hashes.                    
                </javadoc>
                <method name="MethodToHash_Maps" type="constructor" line="267"/>
                <method name="computeValue" type="Map<Method,Long>" line="269">
                    <params>
                        <param name="remoteClass" type="Class<?>"/>
                    </params>
                    <anonymous_class line="270">
                        <method name="get" type="Long" line="271">
                            <params>
                                <param name="key" type="Object"/>
                            </params>
                            <declaration name="hash" type="Long" line="272"/>
                            <scope line="273">
                                <declaration name="method" type="Method" line="274"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </method>
            </class>
        </class>
    </source>