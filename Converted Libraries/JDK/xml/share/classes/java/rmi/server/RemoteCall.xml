<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.StreamCorruptedException"/>
        <import package="java.io.IOException"/>
        <interface name="RemoteCall">
            <javadoc line="7">
                &lt;code&gt;RemoteCall&lt;/code&gt; is an abstraction used solely by the RMI runtime
                  (in conjunction with stubs and skeletons of remote objects) to carry out a
                  call to a remote object.  The &lt;code&gt;RemoteCall&lt;/code&gt; interface is
                  deprecated because it is only used by deprecated methods of
                  &lt;code&gt;java.rmi.server.RemoteRef&lt;/code&gt;.                
                <since>
                    JDK1.1                    
                </since>
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Roger Riggs                    
                </author>
                <see>
                    java.rmi.server.RemoteRef                    
                </see>
                <deprecated>
                    no replacement.                    
                </deprecated>
            </javadoc>
            <method name="getOutputStream" type="ObjectOutput" line="20"/>
            <javadoc line="20">
                Return the output stream the stub/skeleton should put arguments/results
                  into.                
                <return>
                    output stream for arguments/results                    
                </return>
                <exception>
                    java.io.IOException if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="releaseOutputStream" type="void" line="29"/>
            <javadoc line="29">
                Release the output stream; in some transports this would release
                  the stream.                
                <exception>
                    java.io.IOException if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="getInputStream" type="ObjectInput" line="37"/>
            <javadoc line="37">
                Get the InputStream that the stub/skeleton should get
                  results/arguments from.                
                <return>
                    input stream for reading arguments/results                    
                </return>
                <exception>
                    java.io.IOException if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="releaseInputStream" type="void" line="46"/>
            <javadoc line="46">
                Release the input stream. This would allow some transports to release
                  the channel early.                
                <exception>
                    java.io.IOException if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="getResultStream" type="ObjectOutput" line="54"/>
            <javadoc line="54">
                Returns an output stream (may put out header information
                  relating to the success of the call). Should only succeed
                  once per remote call.                
                <param>
                    success If true, indicates normal return, else indicates
                      exceptional return.                    
                </param>
                <return>
                    output stream for writing call result                    
                </return>
                <exception>
                    java.io.IOException              if an I/O error occurs.                    
                </exception>
                <exception>
                    java.io.StreamCorruptedException If already been called.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="executeCall" type="void" line="67"/>
            <javadoc line="67">
                Do whatever it takes to execute the call.                
                <exception>
                    java.lang.Exception if a general exception occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
            <method name="done" type="void" line="74"/>
            <javadoc line="74">
                Allow cleanup after the remote call has completed.                
                <exception>
                    java.io.IOException if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    no replacement                    
                </deprecated>
            </javadoc>
        </interface>
    </source>