<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.io.DataInput"/>
        <import package="java.io.DataOutput"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.SecureRandom"/>
        <class name="UID" line="7">
            <implements interface="Serializable"/>
            <javadoc line="7">
                A &lt;code&gt;UID&lt;/code&gt; represents an identifier that is unique over time
                  with respect to the host it is generated on, or one of 2&lt;sup&gt;16&lt;/sup&gt;
                  &quot;well-known&quot; identifiers.
                  &lt;p&gt;The {@link #UID()} constructor can be used to generate an
                  identifier that is unique over time with respect to the host it is
                  generated on.  The {@link #UID(short)} constructor can be used to
                  create one of 2&lt;sup&gt;16&lt;/sup&gt; well-known identifiers.
                  &lt;p&gt;A &lt;code&gt;UID&lt;/code&gt; instance contains three primitive values:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;unique&lt;/code&gt;, an &lt;code&gt;int&lt;/code&gt; that uniquely identifies
                  the VM that this &lt;code&gt;UID&lt;/code&gt; was generated in, with respect to its
                  host and at the time represented by the &lt;code&gt;time&lt;/code&gt; value (an
                  example implementation of the &lt;code&gt;unique&lt;/code&gt; value would be a
                  process identifier),
                  or zero for a well-known &lt;code&gt;UID&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;time&lt;/code&gt;, a &lt;code&gt;long&lt;/code&gt; equal to a time (as returned
                  by {@link System#currentTimeMillis()}) at which the VM that this
                  &lt;code&gt;UID&lt;/code&gt; was generated in was alive,
                  or zero for a well-known &lt;code&gt;UID&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;count&lt;/code&gt;, a &lt;code&gt;short&lt;/code&gt; to distinguish
                  &lt;code&gt;UID&lt;/code&gt;s generated in the same VM with the same
                  &lt;code&gt;time&lt;/code&gt; value
                  &lt;/ul&gt;
                  &lt;p&gt;An independently generated &lt;code&gt;UID&lt;/code&gt; instance is unique
                  over time with respect to the host it is generated on as long as
                  the host requires more than one millisecond to reboot and its system
                  clock is never set backward.  A globally unique identifier can be
                  constructed by pairing a &lt;code&gt;UID&lt;/code&gt; instance with a unique host
                  identifier, such as an IP address.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="hostUnique" type="int" line="42"/>
            <declaration name="hostUniqueSet" type="boolean" line="43"/>
            <declaration name="lock" type="Object" line="44"/>
            <declaration name="lastTime" type="long" line="45"/>
            <declaration name="lastCount" type="short" line="46"/>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <javadoc line="47">
                indicate compatibility with JDK 1.1.x version of class                
            </javadoc>
            <declaration name="unique" type="int" line="51"/>
            <javadoc line="51">
                number that uniquely identifies the VM that this &lt;code&gt;UID&lt;/code&gt;
                  was generated in with respect to its host and at the given time                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="time" type="long" line="57"/>
            <javadoc line="57">
                a time (as returned by {@link System#currentTimeMillis()}) at which
                  the VM that this &lt;code&gt;UID&lt;/code&gt; was generated in was alive                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="count" type="short" line="63"/>
            <javadoc line="63">
                16-bit number to distinguish &lt;code&gt;UID&lt;/code&gt; instances created
                  in the same VM with the same time value                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="69">
                Generates a &lt;code&gt;UID&lt;/code&gt; that is unique over time with
                  respect to the host that it was generated on.                
            </javadoc>
            <method name="UID" type="constructor" line="73">
                <scope line="74">
                    <scope line="75"/>
                    <scope line="80">
                        <declaration name="interrupted" type="boolean" line="81"/>
                        <declaration name="done" type="boolean" line="82"/>
                        <scope line="83">
                            <declaration name="now" type="long" line="84"/>
                            <scope line="85">
                                <scope line="86"/>
                                <scope line="89"/>
                            </scope>
                            <scope line="93"/>
                        </scope>
                        <scope line="99"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="107">
                Creates a &quot;well-known&quot; &lt;code&gt;UID&lt;/code&gt;.
                  There are 2&lt;sup&gt;16&lt;/sup&gt; possible such well-known ids.
                  &lt;p&gt;A &lt;code&gt;UID&lt;/code&gt; created via this constructor will not
                  clash with any &lt;code&gt;UID&lt;/code&gt;s generated via the no-arg
                  constructor.                
                <param>
                    num number for well-known &lt;code&gt;UID&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="UID" type="constructor" line="115">
                <params>
                    <param name="num" type="short"/>
                </params>
            </method>
            <javadoc line="120">
                Constructs a &lt;code&gt;UID&lt;/code&gt; given data read from a stream.                
            </javadoc>
            <method name="UID" type="constructor" line="123">
                <params>
                    <param name="unique" type="int"/>
                    <param name="time" type="long"/>
                    <param name="count" type="short"/>
                </params>
            </method>
            <javadoc line="128">
                Returns the hash code value for this &lt;code&gt;UID&lt;/code&gt;.                
                <return>
                    the hash code value for this &lt;code&gt;UID&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="132"/>
            <javadoc line="135">
                Compares the specified object with this &lt;code&gt;UID&lt;/code&gt; for
                  equality.
                  This method returns &lt;code&gt;true&lt;/code&gt; if and only if the
                  specified object is a &lt;code&gt;UID&lt;/code&gt; instance with the same
                  &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and &lt;code&gt;count&lt;/code&gt;
                  values as this one.                
                <param>
                    obj the object to compare this &lt;code&gt;UID&lt;/code&gt; to                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given object is equivalent to
                      this one, and &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="146">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="147">
                    <declaration name="uid" type="UID" line="148"/>
                </scope>
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Returns a string representation of this &lt;code&gt;UID&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;UID&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="159"/>
            <javadoc line="162">
                Marshals a binary representation of this &lt;code&gt;UID&lt;/code&gt; to
                  a &lt;code&gt;DataOutput&lt;/code&gt; instance.
                  &lt;p&gt;Specifically, this method first invokes the given stream&apos;s{@link DataOutput#writeInt(int)} method with this &lt;code&gt;UID&lt;/code&gt;&apos;s
                  &lt;code&gt;unique&lt;/code&gt; value, then it invokes the stream&apos;s{@link DataOutput#writeLong(long)} method with this &lt;code&gt;UID&lt;/code&gt;&apos;s
                  &lt;code&gt;time&lt;/code&gt; value, and then it invokes the stream&apos;s{@link DataOutput#writeShort(int)} method with this &lt;code&gt;UID&lt;/code&gt;&apos;s
                  &lt;code&gt;count&lt;/code&gt; value.                
                <param>
                    out the &lt;code&gt;DataOutput&lt;/code&gt; instance to write
                      this &lt;code&gt;UID&lt;/code&gt; to                    
                </param>
                <throws>
                    IOException if an I/O error occurs while performing
                      this operation                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="174">
                <params>
                    <param name="out" type="DataOutput"/>
                </params>
            </method>
            <javadoc line="179">
                Constructs and returns a new &lt;code&gt;UID&lt;/code&gt; instance by
                  unmarshalling a binary representation from an
                  &lt;code&gt;DataInput&lt;/code&gt; instance.
                  &lt;p&gt;Specifically, this method first invokes the given stream&apos;s{@link DataInput#readInt()} method to read a &lt;code&gt;unique&lt;/code&gt; value,
                  then it invoke&apos;s the stream&apos;s{@link DataInput#readLong()} method to read a &lt;code&gt;time&lt;/code&gt; value,
                  then it invoke&apos;s the stream&apos;s{@link DataInput#readShort()} method to read a &lt;code&gt;count&lt;/code&gt; value,
                  and then it creates and returns a new &lt;code&gt;UID&lt;/code&gt; instance
                  that contains the &lt;code&gt;unique&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and
                  &lt;code&gt;count&lt;/code&gt; values that were read from the stream.                
                <param>
                    in the &lt;code&gt;DataInput&lt;/code&gt; instance to read
                      &lt;code&gt;UID&lt;/code&gt; from                    
                </param>
                <return>
                    unmarshalled &lt;code&gt;UID&lt;/code&gt; instance                    
                </return>
                <throws>
                    IOException if an I/O error occurs while performing
                      this operation                    
                </throws>
            </javadoc>
            <method name="read" type="UID" line="195">
                <params>
                    <param name="in" type="DataInput"/>
                </params>
                <declaration name="unique" type="int" line="196"/>
                <declaration name="time" type="long" line="197"/>
                <declaration name="count" type="short" line="198"/>
            </method>
        </class>
    </source>