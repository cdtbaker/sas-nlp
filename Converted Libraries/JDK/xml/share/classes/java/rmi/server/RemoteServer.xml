<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.runtime.Log"/>
        <class name="RemoteServer" line="31">
            <extends class="RemoteObject"/>
            <comment line="45">
                                
            </comment>
            <comment line="114">
                initialize log status                
            </comment>
            <javadoc line="31">
                The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server
                  implementations and provides the framework to support a wide range
                  of remote reference semantics.  Specifically, the functions needed
                  to create and export remote objects (i.e. to make them remotely
                  available) are provided abstractly by &lt;code&gt;RemoteServer&lt;/code&gt; and
                  concretely by its subclass(es).                
                <author>
                    Ann Wollrath                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <javadoc line="47">
                Constructs a &lt;code&gt;RemoteServer&lt;/code&gt;.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="RemoteServer" type="constructor" line="51"/>
            <javadoc line="55">
                Constructs a &lt;code&gt;RemoteServer&lt;/code&gt; with the given reference type.                
                <param>
                    ref the remote reference                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="RemoteServer" type="constructor" line="61">
                <params>
                    <param name="ref" type="RemoteRef"/>
                </params>
            </method>
            <javadoc line="65">
                Returns a string representation of the client host for the
                  remote method invocation being processed in the current thread.                
                <return>
                    a string representation of the client host                    
                </return>
                <throws>
                    ServerNotActiveException if no remote method invocation
                      is being processed in the current thread                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getClientHost" type="String" line="76"/>
            <javadoc line="80">
                Log RMI calls to the output stream &lt;code&gt;out&lt;/code&gt;. If
                  &lt;code&gt;out&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, call logging is turned off.
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkPermission&lt;/code&gt; method will be invoked with a
                  &lt;code&gt;java.util.logging.LoggingPermission(&quot;control&quot;)&lt;/code&gt;
                  permission; this could result in a &lt;code&gt;SecurityException&lt;/code&gt;.                
                <param>
                    out the output stream to which RMI calls should be logged                    
                </param>
                <throws>
                    SecurityException  if there is a security manager and
                      the invocation of its &lt;code&gt;checkPermission&lt;/code&gt; method
                      fails                    
                </throws>
                <see>
                    #getLog                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setLog" type="void" line="97">
                <params>
                    <param name="out" type="java.io.OutputStream"/>
                </params>
            </method>
            <javadoc line="102">
                Returns stream for the RMI call log.                
                <return>
                    the call log                    
                </return>
                <see>
                    #setLog                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLog" type="java.io.PrintStream" line="109"/>
            <declaration name="logNull" type="boolean" line="114"/>
        </class>
    </source>