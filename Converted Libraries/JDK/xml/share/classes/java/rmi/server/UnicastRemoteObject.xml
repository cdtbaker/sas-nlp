<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <class name="UnicastRemoteObject" line="31">
            <extends class="RemoteServer"/>
            <comment line="126">
                                
            </comment>
            <comment line="206">
                Exports this UnicastRemoteObject using its initialized fields because
                 its creation bypassed running its constructors (via deserialization
                 or cloning, for example).                
            </comment>
            <javadoc line="31">
                Used for exporting a remote object with JRMP and obtaining a stub
                  that communicates to the remote object.
                  &lt;p&gt;For the constructors and static &lt;code&gt;exportObject&lt;/code&gt; methods
                  below, the stub for a remote object being exported is obtained as
                  follows:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;If the remote object is exported using the {@link #exportObject(Remote) UnicastRemoteObject.exportObject(Remote)} method,
                  a stub class (typically pregenerated from the remote object&apos;s class
                  using the &lt;code&gt;rmic&lt;/code&gt; tool) is loaded and an instance of that stub
                  class is constructed as follows.
                  &lt;ul&gt;
                  &lt;li&gt;A &quot;root class&quot; is determined as follows:  if the remote object&apos;s
                  class directly implements an interface that extends {@link Remote}, then
                  the remote object&apos;s class is the root class; otherwise, the root class is
                  the most derived superclass of the remote object&apos;s class that directly
                  implements an interface that extends &lt;code&gt;Remote&lt;/code&gt;.
                  &lt;li&gt;The name of the stub class to load is determined by concatenating
                  the binary name of the root class with the suffix &lt;code&gt;&quot;_Stub&quot;&lt;/code&gt;.
                  &lt;li&gt;The stub class is loaded by name using the class loader of the root
                  class.  The stub class must extend {@link RemoteStub} and must have a
                  public constructor that has one parameter, of type {@link RemoteRef}.
                  &lt;li&gt;Finally, an instance of the stub class is constructed with a{@link RemoteRef}.
                  &lt;/ul&gt;
                  &lt;li&gt;If the appropriate stub class could not be found, or the stub class
                  could not be loaded, or a problem occurs creating the stub instance, a{@link StubNotFoundException} is thrown.
                  &lt;p&gt;
                  &lt;li&gt;For all other means of exporting:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;If the remote object&apos;s stub class (as defined above) could not be
                  loaded or the system property
                  &lt;code&gt;java.rmi.server.ignoreStubClasses&lt;/code&gt; is set to
                  &lt;code&gt;&quot;true&quot;&lt;/code&gt; (case insensitive), a {@link java.lang.reflect.Proxy} instance is constructed with the following
                  properties:
                  &lt;ul&gt;
                  &lt;li&gt;The proxy&apos;s class is defined by the class loader of the remote
                  object&apos;s class.
                  &lt;li&gt;The proxy implements all the remote interfaces implemented by the
                  remote object&apos;s class.
                  &lt;li&gt;The proxy&apos;s invocation handler is a {@link RemoteObjectInvocationHandler} instance constructed with a{@link RemoteRef}.
                  &lt;li&gt;If the proxy could not be created, a {@link StubNotFoundException}will be thrown.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;li&gt;Otherwise, an instance of the remote object&apos;s stub class (as
                  described above) is used as the stub.
                  &lt;/ul&gt;
                  &lt;/ul&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="port" type="int" line="109"/>
            <javadoc line="109">
                @serial port number on which to export object                
            </javadoc>
            <declaration name="csf" type="RMIClientSocketFactory" line="114"/>
            <javadoc line="114">
                @serial client-side socket factory (if any)                
            </javadoc>
            <declaration name="ssf" type="RMIServerSocketFactory" line="119"/>
            <javadoc line="119">
                @serial server-side socket factory (if any) to use when
                  exporting object                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="126"/>
            <javadoc line="128">
                Creates and exports a new UnicastRemoteObject object using an
                  anonymous port.                
                <throws>
                    RemoteException if failed to export object                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="UnicastRemoteObject" type="constructor" line="135"/>
            <javadoc line="139">
                Creates and exports a new UnicastRemoteObject object using the
                  particular supplied port.                
                <param>
                    port the port number on which the remote object receives calls
                      (if <code>port</code> is zero, an anonymous port is chosen)                    
                </param>
                <throws>
                    RemoteException if failed to export object                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="UnicastRemoteObject" type="constructor" line="148">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="153">
                Creates and exports a new UnicastRemoteObject object using the
                  particular supplied port and socket factories.                
                <param>
                    port the port number on which the remote object receives calls
                      (if <code>port</code> is zero, an anonymous port is chosen)                    
                </param>
                <param>
                    csf the client-side socket factory for making calls to the
                      remote object                    
                </param>
                <param>
                    ssf the server-side socket factory for receiving remote calls                    
                </param>
                <throws>
                    RemoteException if failed to export object                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="UnicastRemoteObject" type="constructor" line="168">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
            </method>
            <javadoc line="175">
                Re-export the remote object when it is deserialized.                
            </javadoc>
            <method name="readObject" type="void" line="180">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="185">
                Returns a clone of the remote object that is distinct from
                  the original.                
                <exception>
                    CloneNotSupportedException if clone failed due to
                      a RemoteException.                    
                </exception>
                <return>
                    the new remote object                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="195">
                <scope line="196">
                    <declaration name="cloned" type="UnicastRemoteObject" line="197"/>
                </scope>
                <scope line="200"/>
            </method>
            <method name="reexport" type="void" line="211">
                <scope line="212"/>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Exports the remote object to make it available to receive incoming
                  calls using an anonymous port.                
                <param>
                    obj the remote object to be exported                    
                </param>
                <return>
                    remote object stub                    
                </return>
                <exception>
                    RemoteException if export fails                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="exportObject" type="RemoteStub" line="229">
                <params>
                    <param name="obj" type="Remote"/>
                </params>
                <comment line="231">
                    Use UnicastServerRef constructor passing the boolean value true
                     to indicate that only a generated stub class should be used.  A
                     generated stub class must be used instead of a dynamic proxy
                     because the return value of this method is RemoteStub which a
                     dynamic proxy class cannot extend.                    
                </comment>
            </method>
            <javadoc line="240">
                Exports the remote object to make it available to receive incoming
                  calls, using the particular supplied port.                
                <param>
                    obj the remote object to be exported                    
                </param>
                <param>
                    port the port to export the object on                    
                </param>
                <return>
                    remote object stub                    
                </return>
                <exception>
                    RemoteException if export fails                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="exportObject" type="Remote" line="251">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="255">
                Exports the remote object to make it available to receive incoming
                  calls, using a transport specified by the given socket factory.                
                <param>
                    obj the remote object to be exported                    
                </param>
                <param>
                    port the port to export the object on                    
                </param>
                <param>
                    csf the client-side socket factory for making calls to the
                      remote object                    
                </param>
                <param>
                    ssf the server-side socket factory for receiving remote calls                    
                </param>
                <return>
                    remote object stub                    
                </return>
                <exception>
                    RemoteException if export fails                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="exportObject" type="Remote" line="271">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                </params>
            </method>
            <javadoc line="276">
                Removes the remote object, obj, from the RMI runtime. If
                  successful, the object can no longer accept incoming RMI calls.
                  If the force parameter is true, the object is forcibly unexported
                  even if there are pending calls to the remote object or the
                  remote object still has calls in progress.  If the force
                  parameter is false, the object is only unexported if there are
                  no pending or in progress calls to the object.                
                <param>
                    obj the remote object to be unexported                    
                </param>
                <param>
                    force if true, unexports the object even if there are
                      pending or in-progress calls; if false, only unexports the object
                      if there are no pending or in-progress calls                    
                </param>
                <return>
                    true if operation is successful, false otherwise                    
                </return>
                <exception>
                    NoSuchObjectException if the remote object is not
                      currently exported                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="unexportObject" type="boolean" line="296">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="force" type="boolean"/>
                </params>
            </method>
            <javadoc line="300">
                Exports the specified object using the specified server ref.                
            </javadoc>
            <method name="exportObject" type="Remote" line="305">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="sref" type="UnicastServerRef"/>
                </params>
                <comment line="307">
                    if obj extends UnicastRemoteObject, set its ref.                    
                </comment>
                <scope line="307"/>
            </method>
        </class>
    </source>