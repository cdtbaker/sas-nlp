<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi"/>
        <interface name="RemoteRef">
            <implements interface="java.io.Externalizable"/>
            <javadoc line="30">
                &lt;code&gt;RemoteRef&lt;/code&gt; represents the handle for a remote object. A
                  &lt;code&gt;RemoteStub&lt;/code&gt; uses a remote reference to carry out a
                  remote method invocation to a remote object.                
                <author>
                    Ann Wollrath                    
                </author>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    java.rmi.server.RemoteStub                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="41">
                indicate compatibility with JDK 1.1.x version of class.                
            </javadoc>
            <declaration name="packagePrefix" type="String" line="44"/>
            <javadoc line="44">
                Initialize the server package prefix: assumes that the
                  implementation of server ref classes (e.g., UnicastRef,
                  UnicastServerRef) are located in the package defined by the
                  prefix.                
            </javadoc>
            <method name="invoke" type="Object" line="52"/>
            <javadoc line="52">
                Invoke a method. This form of delegating method invocation
                  to the reference allows the reference to take care of
                  setting up the connection to the remote host, marshaling
                  some representation for the method and parameters, then
                  communicating the method invocation to the remote host.
                  This method either returns the result of a method invocation
                  on the remote object which resides on the remote host or
                  throws a RemoteException if the call failed or an
                  application-level exception if the remote invocation throws
                  an exception.                
                <param>
                    obj the object that contains the RemoteRef (e.g., the
                      RemoteStub for the object.                    
                </param>
                <param>
                    method the method to be invoked                    
                </param>
                <param>
                    params the parameter list                    
                </param>
                <param>
                    opnum  a hash that may be used to represent the method                    
                </param>
                <return>
                    result of remote method invocation                    
                </return>
                <exception>
                    Exception if any exception occurs during remote method
                      invocation                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="newCall" type="RemoteCall" line="80"/>
            <javadoc line="80">
                Creates an appropriate call object for a new remote method
                  invocation on this object.  Passing operation array and index,
                  allows the stubs generator to assign the operation indexes and
                  interpret them. The remote reference may need the operation to
                  encode in the call.                
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    1.2 style stubs no longer use this method. Instead of
                      using a sequence of method calls on the stub&apos;s the remote reference
                      (&lt;code&gt;newCall&lt;/code&gt;, &lt;code&gt;invoke&lt;/code&gt;, and &lt;code&gt;done&lt;/code&gt;), a
                      stub uses a single method, &lt;code&gt;invoke(Remote, Method, Object[],
                      int)&lt;/code&gt;, on the remote reference to carry out parameter
                      marshalling, remote method executing and unmarshalling of the return
                      value.                    
                </deprecated>
                <param>
                    obj remote stub through which to make call                    
                </param>
                <param>
                    op array of stub operations                    
                </param>
                <param>
                    opnum operation number                    
                </param>
                <param>
                    hash stub/skeleton interface hash                    
                </param>
                <return>
                    call object representing remote call                    
                </return>
                <throws>
                    RemoteException if failed to initiate new remote call                    
                </throws>
                <see>
                    #invoke(Remote,java.lang.reflect.Method,Object[],long)                    
                </see>
            </javadoc>
            <method name="invoke" type="void" line="108"/>
            <javadoc line="108">
                Executes the remote call.
                  Invoke will raise any &quot;user&quot; exceptions which
                  should pass through and not be caught by the stub.  If any
                  exception is raised during the remote invocation, invoke should
                  take care of cleaning up the connection before raising the
                  &quot;user&quot; or remote exception.                
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    1.2 style stubs no longer use this method. Instead of
                      using a sequence of method calls to the remote reference
                      (&lt;code&gt;newCall&lt;/code&gt;, &lt;code&gt;invoke&lt;/code&gt;, and &lt;code&gt;done&lt;/code&gt;), a
                      stub uses a single method, &lt;code&gt;invoke(Remote, Method, Object[],
                      int)&lt;/code&gt;, on the remote reference to carry out parameter
                      marshalling, remote method executing and unmarshalling of the return
                      value.                    
                </deprecated>
                <param>
                    call object representing remote call                    
                </param>
                <throws>
                    Exception if any exception occurs during remote method                    
                </throws>
                <see>
                    #invoke(Remote,java.lang.reflect.Method,Object[],long)                    
                </see>
            </javadoc>
            <method name="done" type="void" line="133"/>
            <javadoc line="133">
                Allows the remote reference to clean up (or reuse) the connection.
                  Done should only be called if the invoke returns successfully
                  (non-exceptionally) to the stub.                
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    1.2 style stubs no longer use this method. Instead of
                      using a sequence of method calls to the remote reference
                      (&lt;code&gt;newCall&lt;/code&gt;, &lt;code&gt;invoke&lt;/code&gt;, and &lt;code&gt;done&lt;/code&gt;), a
                      stub uses a single method, &lt;code&gt;invoke(Remote, Method, Object[],
                      int)&lt;/code&gt;, on the remote reference to carry out parameter
                      marshalling, remote method executing and unmarshalling of the return
                      value.                    
                </deprecated>
                <param>
                    call object representing remote call                    
                </param>
                <throws>
                    RemoteException if remote error occurs during call cleanup                    
                </throws>
                <see>
                    #invoke(Remote,java.lang.reflect.Method,Object[],long)                    
                </see>
            </javadoc>
            <method name="getRefClass" type="String" line="154"/>
            <javadoc line="154">
                Returns the class name of the ref type to be serialized onto
                  the stream &apos;out&apos;.                
                <param>
                    out the output stream to which the reference will be serialized                    
                </param>
                <return>
                    the class name (without package qualification) of the reference
                      type                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remoteHashCode" type="int" line="164"/>
            <javadoc line="164">
                Returns a hashcode for a remote object.  Two remote object stubs
                  that refer to the same remote object will have the same hash code
                  (in order to support remote objects as keys in hash tables).                
                <return>
                    remote object hashcode                    
                </return>
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remoteEquals" type="boolean" line="175"/>
            <javadoc line="175">
                Compares two remote objects for equality.
                  Returns a boolean that indicates whether this remote object is
                  equivalent to the specified Object. This method is used when a
                  remote object is stored in a hashtable.                
                <param>
                    obj     the Object to compare with                    
                </param>
                <return>
                    true if these Objects are equal; false otherwise.                    
                </return>
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remoteToString" type="String" line="187"/>
            <javadoc line="187">
                Returns a String that represents the reference of this remote
                  object.                
                <return>
                    string representing remote object reference                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
        </interface>
    </source>