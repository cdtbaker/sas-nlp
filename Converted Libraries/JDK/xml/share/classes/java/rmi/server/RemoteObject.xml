<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="sun.rmi.server.Util"/>
        <class name="RemoteObject" line="6">
            <implements interface="Remote"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="6">
                The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the
                  &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects.
                  &lt;code&gt;RemoteObject&lt;/code&gt; provides the remote semantics of Object by
                  implementing methods for hashCode, equals, and toString.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Laird Dornin                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="ref" type="RemoteRef" line="17"/>
            <javadoc line="17">
                The object&apos;s remote reference.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                indicate compatibility with JDK 1.1.x version of class                
            </javadoc>
            <javadoc line="25">
                Creates a remote object.                
            </javadoc>
            <method name="RemoteObject" type="constructor" line="28"/>
            <javadoc line="31">
                Creates a remote object, initialized with the specified remote
                  reference.                
                <param>
                    newref remote reference                    
                </param>
            </javadoc>
            <method name="RemoteObject" type="constructor" line="36">
                <params>
                    <param name="newref" type="RemoteRef"/>
                </params>
            </method>
            <javadoc line="39">
                Returns the remote reference for the remote object.
                  &lt;p&gt;Note: The object returned from this method may be an instance of
                  an implementation-specific class.  The &lt;code&gt;RemoteObject&lt;/code&gt;
                  class ensures serialization portability of its instances&apos; remote
                  references through the behavior of its custom
                  &lt;code&gt;writeObject&lt;/code&gt; and &lt;code&gt;readObject&lt;/code&gt; methods.  An
                  instance of &lt;code&gt;RemoteRef&lt;/code&gt; should not be serialized outside
                  of its &lt;code&gt;RemoteObject&lt;/code&gt; wrapper instance or the result may
                  be unportable.                
                <return>
                    remote reference for the remote object                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRef" type="RemoteRef" line="52"/>
            <javadoc line="55">
                Returns the stub for the remote object &lt;code&gt;obj&lt;/code&gt; passed
                  as a parameter. This operation is only valid &lt;i&gt;after&lt;/i&gt;
                  the object has been exported.                
                <param>
                    obj the remote object whose stub is needed                    
                </param>
                <return>
                    the stub for the remote object, <code>obj</code>.                    
                </return>
                <exception>
                    NoSuchObjectException if the stub for the
                      remote object could not be found.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toStub" type="Remote" line="65">
                <params>
                    <param name="obj" type="Remote"/>
                </params>
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <javadoc line="73">
                Returns a hashcode for a remote object.  Two remote object stubs
                  that refer to the same remote object will have the same hash code
                  (in order to support remote objects as keys in hash tables).                
                <see>
                    java.util.Hashtable                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="79"/>
            <javadoc line="82">
                Compares two remote objects for equality.
                  Returns a boolean that indicates whether this remote object is
                  equivalent to the specified Object. This method is used when a
                  remote object is stored in a hashtable.
                  If the specified Object is not itself an instance of RemoteObject,
                  then this method delegates by returning the result of invoking the
                  &lt;code&gt;equals&lt;/code&gt; method of its parameter with this remote object
                  as the argument.                
                <param>
                    obj     the Object to compare with                    
                </param>
                <return>
                    true if these Objects are equal; false otherwise.                    
                </return>
                <see>
                    java.util.Hashtable                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="95">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="96">
                    <scope line="97"/>
                    <scope line="100"/>
                </scope>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <javadoc line="111">
                Returns a String that represents the value of this remote object.                
            </javadoc>
            <method name="toString" type="String" line="114">
                <declaration name="classname" type="String" line="115"/>
            </method>
            <javadoc line="118">
                &lt;code&gt;writeObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method writes this object&apos;s serialized form for this class
                  as follows:
                  &lt;p&gt;The {@link RemoteRef#getRefClass(java.io.ObjectOutput) getRefClass}method is invoked on this object&apos;s &lt;code&gt;ref&lt;/code&gt; field
                  to obtain its external ref type name.
                  If the value returned by &lt;code&gt;getRefClass&lt;/code&gt; was
                  a non-&lt;code&gt;null&lt;/code&gt; string of length greater than zero,
                  the &lt;code&gt;writeUTF&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  with the value returned by &lt;code&gt;getRefClass&lt;/code&gt;, and then
                  the &lt;code&gt;writeExternal&lt;/code&gt; method is invoked on
                  this object&apos;s &lt;code&gt;ref&lt;/code&gt; field passing &lt;code&gt;out&lt;/code&gt;
                  as the argument; otherwise,
                  the &lt;code&gt;writeUTF&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  with a zero-length string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), and then
                  the &lt;code&gt;writeObject&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  passing this object&apos;s &lt;code&gt;ref&lt;/code&gt; field as the argument.                
                <serialDataThe>
                    serialized data for this class comprises a string (written with
                      <code>ObjectOutput.writeUTF</code>) that is either the external
                      ref type name of the contained <code>RemoteRef</code> instance
                      (the <code>ref</code> field) or a zero-length string, followed by
                      either the external form of the <code>ref</code> field as written by
                      its <code>writeExternal</code> method if the string was of non-zero
                      length, or the serialized form of the <code>ref</code> field as
                      written by passing it to the serialization stream's
                      <code>writeObject</code> if the string was of zero length.
                      <p>If this object is an instance of{@link RemoteStub} or {@link RemoteObjectInvocationHandler}that was returned from any of
                      the <code>UnicastRemoteObject.exportObject</code> methods
                      and custom socket factories are not used,
                      the external ref type name is <code>"UnicastRef"</code>.
                      If this object is an instance of
                      <code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
                      that was returned from any of
                      the <code>UnicastRemoteObject.exportObject</code> methods
                      and custom socket factories are used,
                      the external ref type name is <code>"UnicastRef2"</code>.
                      If this object is an instance of
                      <code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
                      that was returned from any of
                      the <code>java.rmi.activation.Activatable.exportObject</code> methods,
                      the external ref type name is <code>"ActivatableRef"</code>.
                      If this object is an instance of
                      <code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
                      that was returned from
                      the <code>RemoteObject.toStub</code> method (and the argument passed
                      to <code>toStub</code> was not itself a <code>RemoteStub</code>),
                      the external ref type name is a function of how the remote object
                      passed to <code>toStub</code> was exported, as described above.
                      If this object is an instance of
                      <code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
                      that was originally created via deserialization,
                      the external ref type name is the same as that which was read
                      when this object was deserialized.
                      <p>If this object is an instance of
                      <code>java.rmi.server.UnicastRemoteObject</code> that does not
                      use custom socket factories,
                      the external ref type name is <code>"UnicastServerRef"</code>.
                      If this object is an instance of
                      <code>UnicastRemoteObject</code> that does
                      use custom socket factories,
                      the external ref type name is <code>"UnicastServerRef2"</code>.
                      <p>Following is the data that must be written by the
                      <code>writeExternal</code> method and read by the
                      <code>readExternal</code> method of <code>RemoteRef</code>
                      implementation classes that correspond to the each of the
                      defined external ref type names:
                      <p>For <code>"UnicastRef"</code>:
                      <ul>
                      <li>the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}<li>the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}<li>the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the <code>ObjID</code> instance contained in the reference
                      <li>the boolean value <code>false</code>,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}</ul>
                      <p>For <code>"UnicastRef2"</code> with a
                      <code>null</code> client socket factory:
                      <ul>
                      <li>the byte value <code>0x00</code>
                      (indicating <code>null</code> client socket factory),
                      written by {@link java.io.ObjectOutput#writeByte(int)}<li>the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}<li>the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}<li>the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the <code>ObjID</code> instance contained in the reference
                      <li>the boolean value <code>false</code>,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}</ul>
                      <p>For <code>"UnicastRef2"</code> with a
                      non-<code>null</code> client socket factory:
                      <ul>
                      <li>the byte value <code>0x01</code>
                      (indicating non-<code>null</code> client socket factory),
                      written by {@link java.io.ObjectOutput#writeByte(int)}<li>the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}<li>the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}<li>a client socket factory (object of type
                      <code>java.rmi.server.RMIClientSocketFactory</code>),
                      written by passing it to an invocation of
                      <code>writeObject</code> on the stream instance
                      <li>the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the <code>ObjID</code> instance contained in the reference
                      <li>the boolean value <code>false</code>,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}</ul>
                      <p>For <code>"ActivatableRef"</code> with a
                      <code>null</code> nested remote reference:
                      <ul>
                      <li>an instance of
                      <code>java.rmi.activation.ActivationID</code>,
                      written by passing it to an invocation of
                      <code>writeObject</code> on the stream instance
                      <li>a zero-length string (<code>""</code>),
                      written by {@link java.io.ObjectOutput#writeUTF(String)}</ul>
                      <p>For <code>"ActivatableRef"</code> with a
                      non-<code>null</code> nested remote reference:
                      <ul>
                      <li>an instance of
                      <code>java.rmi.activation.ActivationID</code>,
                      written by passing it to an invocation of
                      <code>writeObject</code> on the stream instance
                      <li>the external ref type name of the nested remote reference,
                      which must be <code>"UnicastRef2"</code>,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}<li>the external form of the nested remote reference,
                      written by invoking its <code>writeExternal</code> method
                      with the stream instance
                      (see the description of the external form for
                      <code>"UnicastRef2"</code> above)
                      </ul>
                      <p>For <code>"UnicastServerRef"</code> and
                      <code>"UnicastServerRef2"</code>, no data is written by the
                      <code>writeExternal</code> method or read by the
                      <code>readExternal</code> method.                    
                </serialDataThe>
            </javadoc>
            <method name="writeObject" type="void" line="250">
                <params>
                    <param name="out" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="251"/>
                <scope line="254">
                    <declaration name="refClassName" type="String" line="255"/>
                    <scope line="256"/>
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="266">
                &lt;code&gt;readObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method reads this object&apos;s serialized form for this class
                  as follows:
                  &lt;p&gt;The &lt;code&gt;readUTF&lt;/code&gt; method is invoked on &lt;code&gt;in&lt;/code&gt;
                  to read the external ref type name for the &lt;code&gt;RemoteRef&lt;/code&gt;
                  instance to be filled in to this object&apos;s &lt;code&gt;ref&lt;/code&gt; field.
                  If the string returned by &lt;code&gt;readUTF&lt;/code&gt; has length zero,
                  the &lt;code&gt;readObject&lt;/code&gt; method is invoked on &lt;code&gt;in&lt;/code&gt;,
                  and than the value returned by &lt;code&gt;readObject&lt;/code&gt; is cast to
                  &lt;code&gt;RemoteRef&lt;/code&gt; and this object&apos;s &lt;code&gt;ref&lt;/code&gt; field is
                  set to that value.
                  Otherwise, this object&apos;s &lt;code&gt;ref&lt;/code&gt; field is set to a
                  &lt;code&gt;RemoteRef&lt;/code&gt; instance that is created of an
                  implementation-specific class corresponding to the external ref
                  type name returned by &lt;code&gt;readUTF&lt;/code&gt;, and then
                  the &lt;code&gt;readExternal&lt;/code&gt; method is invoked on
                  this object&apos;s &lt;code&gt;ref&lt;/code&gt; field.
                  &lt;p&gt;If the external ref type name is
                  &lt;code&gt;&quot;UnicastRef&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef&quot;&lt;/code&gt;,
                  &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef2&quot;&lt;/code&gt;,
                  or &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt;, a corresponding
                  implementation-specific class must be found, and its
                  &lt;code&gt;readExternal&lt;/code&gt; method must read the serial data
                  for that external ref type name as specified to be written
                  in the &lt;b&gt;serialData&lt;/b&gt; documentation for this class.
                  If the external ref type name is any other string (of non-zero
                  length), a &lt;code&gt;ClassNotFoundException&lt;/code&gt; will be thrown,
                  unless the implementation provides an implementation-specific
                  class corresponding to that external ref type name, in which
                  case this object&apos;s &lt;code&gt;ref&lt;/code&gt; field will be set to an
                  instance of that implementation-specific class.                
            </javadoc>
            <method name="readObject" type="void" line="299">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
                <declaration name="refClassName" type="String" line="300"/>
                <scope line="301"/>
                <scope line="304">
                    <declaration name="internalRefClassName" type="String" line="305"/>
                    <declaration name="refClass" type="Class" line="306"/>
                    <scope line="307"/>
                    <scope line="310"/>
                    <scope line="313"/>
                    <scope line="316"/>
                </scope>
            </method>
        </class>
    </source>