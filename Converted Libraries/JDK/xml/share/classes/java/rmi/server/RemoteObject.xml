<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="sun.rmi.server.Util"/>
        <class name="RemoteObject" line="33">
            <implements interface="Remote"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="33">
                The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the
                  &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects.
                  &lt;code&gt;RemoteObject&lt;/code&gt; provides the remote semantics of Object by
                  implementing methods for hashCode, equals, and toString.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Laird Dornin                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="ref" type="RemoteRef" line="46"/>
            <javadoc line="46">
                The object&apos;s remote reference.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                indicate compatibility with JDK 1.1.x version of class                
            </javadoc>
            <javadoc line="52">
                Creates a remote object.                
            </javadoc>
            <method name="RemoteObject" type="constructor" line="55"/>
            <javadoc line="59">
                Creates a remote object, initialized with the specified remote
                  reference.                
                <param>
                    newref remote reference                    
                </param>
            </javadoc>
            <method name="RemoteObject" type="constructor" line="64">
                <params>
                    <param name="newref" type="RemoteRef"/>
                </params>
            </method>
            <javadoc line="68">
                Returns the remote reference for the remote object.
                  &lt;p&gt;Note: The object returned from this method may be an instance of
                  an implementation-specific class.  The &lt;code&gt;RemoteObject&lt;/code&gt;
                  class ensures serialization portability of its instances&apos; remote
                  references through the behavior of its custom
                  &lt;code&gt;writeObject&lt;/code&gt; and &lt;code&gt;readObject&lt;/code&gt; methods.  An
                  instance of &lt;code&gt;RemoteRef&lt;/code&gt; should not be serialized outside
                  of its &lt;code&gt;RemoteObject&lt;/code&gt; wrapper instance or the result may
                  be unportable.                
                <return>
                    remote reference for the remote object                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRef" type="RemoteRef" line="83"/>
            <javadoc line="87">
                Returns the stub for the remote object &lt;code&gt;obj&lt;/code&gt; passed
                  as a parameter. This operation is only valid &lt;i&gt;after&lt;/i&gt;
                  the object has been exported.                
                <param>
                    obj the remote object whose stub is needed                    
                </param>
                <return>
                    the stub for the remote object, &lt;code&gt;obj&lt;/code&gt;.                    
                </return>
                <exception>
                    NoSuchObjectException if the stub for the
                      remote object could not be found.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toStub" type="Remote" line="97">
                <params>
                    <param name="obj" type="Remote"/>
                </params>
                <scope line="103"/>
                <scope line="105"/>
            </method>
            <javadoc line="110">
                Returns a hashcode for a remote object.  Two remote object stubs
                  that refer to the same remote object will have the same hash code
                  (in order to support remote objects as keys in hash tables).                
                <see>
                    java.util.Hashtable                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="117"/>
            <javadoc line="121">
                Compares two remote objects for equality.
                  Returns a boolean that indicates whether this remote object is
                  equivalent to the specified Object. This method is used when a
                  remote object is stored in a hashtable.
                  If the specified Object is not itself an instance of RemoteObject,
                  then this method delegates by returning the result of invoking the
                  &lt;code&gt;equals&lt;/code&gt; method of its parameter with this remote object
                  as the argument.                
                <param>
                    obj     the Object to compare with                    
                </param>
                <return>
                    true if these Objects are equal; false otherwise.                    
                </return>
                <see>
                    java.util.Hashtable                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="134">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="143">
                    Fix for 4099660: if object is not an instance of RemoteObject,
                     use the result of its equals method, to support symmetry is a
                     remote object implementation class that does not extend
                     RemoteObject wishes to support equality with its stub objects.                    
                </comment>
                <scope line="135">
                    <scope line="136"/>
                    <scope line="138"/>
                </scope>
                <scope line="141"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Returns a String that represents the value of this remote object.                
            </javadoc>
            <method name="toString" type="String" line="157">
                <declaration name="classname" type="String" line="158"/>
            </method>
            <javadoc line="163">
                &lt;code&gt;writeObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method writes this object&apos;s serialized form for this class
                  as follows:
                  &lt;p&gt;The {@link RemoteRef#getRefClass(java.io.ObjectOutput) getRefClass}method is invoked on this object&apos;s &lt;code&gt;ref&lt;/code&gt; field
                  to obtain its external ref type name.
                  If the value returned by &lt;code&gt;getRefClass&lt;/code&gt; was
                  a non-&lt;code&gt;null&lt;/code&gt; string of length greater than zero,
                  the &lt;code&gt;writeUTF&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  with the value returned by &lt;code&gt;getRefClass&lt;/code&gt;, and then
                  the &lt;code&gt;writeExternal&lt;/code&gt; method is invoked on
                  this object&apos;s &lt;code&gt;ref&lt;/code&gt; field passing &lt;code&gt;out&lt;/code&gt;
                  as the argument; otherwise,
                  the &lt;code&gt;writeUTF&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  with a zero-length string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), and then
                  the &lt;code&gt;writeObject&lt;/code&gt; method is invoked on &lt;code&gt;out&lt;/code&gt;
                  passing this object&apos;s &lt;code&gt;ref&lt;/code&gt; field as the argument.                
                <serialData>
                    The serialized data for this class comprises a string (written with
                      &lt;code&gt;ObjectOutput.writeUTF&lt;/code&gt;) that is either the external
                      ref type name of the contained &lt;code&gt;RemoteRef&lt;/code&gt; instance
                      (the &lt;code&gt;ref&lt;/code&gt; field) or a zero-length string, followed by
                      either the external form of the &lt;code&gt;ref&lt;/code&gt; field as written by
                      its &lt;code&gt;writeExternal&lt;/code&gt; method if the string was of non-zero
                      length, or the serialized form of the &lt;code&gt;ref&lt;/code&gt; field as
                      written by passing it to the serialization stream&apos;s
                      &lt;code&gt;writeObject&lt;/code&gt; if the string was of zero length.
                      &lt;p&gt;If this object is an instance of{@link RemoteStub} or {@link RemoteObjectInvocationHandler}that was returned from any of
                      the &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; methods
                      and custom socket factories are not used,
                      the external ref type name is &lt;code&gt;&quot;UnicastRef&quot;&lt;/code&gt;.
                      If this object is an instance of
                      &lt;code&gt;RemoteStub&lt;/code&gt; or &lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt;
                      that was returned from any of
                      the &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; methods
                      and custom socket factories are used,
                      the external ref type name is &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt;.
                      If this object is an instance of
                      &lt;code&gt;RemoteStub&lt;/code&gt; or &lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt;
                      that was returned from any of
                      the &lt;code&gt;java.rmi.activation.Activatable.exportObject&lt;/code&gt; methods,
                      the external ref type name is &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt;.
                      If this object is an instance of
                      &lt;code&gt;RemoteStub&lt;/code&gt; or &lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt;
                      that was returned from
                      the &lt;code&gt;RemoteObject.toStub&lt;/code&gt; method (and the argument passed
                      to &lt;code&gt;toStub&lt;/code&gt; was not itself a &lt;code&gt;RemoteStub&lt;/code&gt;),
                      the external ref type name is a function of how the remote object
                      passed to &lt;code&gt;toStub&lt;/code&gt; was exported, as described above.
                      If this object is an instance of
                      &lt;code&gt;RemoteStub&lt;/code&gt; or &lt;code&gt;RemoteObjectInvocationHandler&lt;/code&gt;
                      that was originally created via deserialization,
                      the external ref type name is the same as that which was read
                      when this object was deserialized.
                      &lt;p&gt;If this object is an instance of
                      &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; that does not
                      use custom socket factories,
                      the external ref type name is &lt;code&gt;&quot;UnicastServerRef&quot;&lt;/code&gt;.
                      If this object is an instance of
                      &lt;code&gt;UnicastRemoteObject&lt;/code&gt; that does
                      use custom socket factories,
                      the external ref type name is &lt;code&gt;&quot;UnicastServerRef2&quot;&lt;/code&gt;.
                      &lt;p&gt;Following is the data that must be written by the
                      &lt;code&gt;writeExternal&lt;/code&gt; method and read by the
                      &lt;code&gt;readExternal&lt;/code&gt; method of &lt;code&gt;RemoteRef&lt;/code&gt;
                      implementation classes that correspond to the each of the
                      defined external ref type names:
                      &lt;p&gt;For &lt;code&gt;&quot;UnicastRef&quot;&lt;/code&gt;:
                      &lt;ul&gt;
                      &lt;li&gt;the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}&lt;li&gt;the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}&lt;li&gt;the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the &lt;code&gt;ObjID&lt;/code&gt; instance contained in the reference
                      &lt;li&gt;the boolean value &lt;code&gt;false&lt;/code&gt;,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&lt;/ul&gt;
                      &lt;p&gt;For &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt; with a
                      &lt;code&gt;null&lt;/code&gt; client socket factory:
                      &lt;ul&gt;
                      &lt;li&gt;the byte value &lt;code&gt;0x00&lt;/code&gt;
                      (indicating &lt;code&gt;null&lt;/code&gt; client socket factory),
                      written by {@link java.io.ObjectOutput#writeByte(int)}&lt;li&gt;the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}&lt;li&gt;the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}&lt;li&gt;the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the &lt;code&gt;ObjID&lt;/code&gt; instance contained in the reference
                      &lt;li&gt;the boolean value &lt;code&gt;false&lt;/code&gt;,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&lt;/ul&gt;
                      &lt;p&gt;For &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt; with a
                      non-&lt;code&gt;null&lt;/code&gt; client socket factory:
                      &lt;ul&gt;
                      &lt;li&gt;the byte value &lt;code&gt;0x01&lt;/code&gt;
                      (indicating non-&lt;code&gt;null&lt;/code&gt; client socket factory),
                      written by {@link java.io.ObjectOutput#writeByte(int)}&lt;li&gt;the hostname of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}&lt;li&gt;the port of the referenced remote object,
                      written by {@link java.io.ObjectOutput#writeInt(int)}&lt;li&gt;a client socket factory (object of type
                      &lt;code&gt;java.rmi.server.RMIClientSocketFactory&lt;/code&gt;),
                      written by passing it to an invocation of
                      &lt;code&gt;writeObject&lt;/code&gt; on the stream instance
                      &lt;li&gt;the data written as a result of calling
                      {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
                      on the &lt;code&gt;ObjID&lt;/code&gt; instance contained in the reference
                      &lt;li&gt;the boolean value &lt;code&gt;false&lt;/code&gt;,
                      written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&lt;/ul&gt;
                      &lt;p&gt;For &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt; with a
                      &lt;code&gt;null&lt;/code&gt; nested remote reference:
                      &lt;ul&gt;
                      &lt;li&gt;an instance of
                      &lt;code&gt;java.rmi.activation.ActivationID&lt;/code&gt;,
                      written by passing it to an invocation of
                      &lt;code&gt;writeObject&lt;/code&gt; on the stream instance
                      &lt;li&gt;a zero-length string (&lt;code&gt;&quot;&quot;&lt;/code&gt;),
                      written by {@link java.io.ObjectOutput#writeUTF(String)}&lt;/ul&gt;
                      &lt;p&gt;For &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt; with a
                      non-&lt;code&gt;null&lt;/code&gt; nested remote reference:
                      &lt;ul&gt;
                      &lt;li&gt;an instance of
                      &lt;code&gt;java.rmi.activation.ActivationID&lt;/code&gt;,
                      written by passing it to an invocation of
                      &lt;code&gt;writeObject&lt;/code&gt; on the stream instance
                      &lt;li&gt;the external ref type name of the nested remote reference,
                      which must be &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt;,
                      written by {@link java.io.ObjectOutput#writeUTF(String)}&lt;li&gt;the external form of the nested remote reference,
                      written by invoking its &lt;code&gt;writeExternal&lt;/code&gt; method
                      with the stream instance
                      (see the description of the external form for
                      &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt; above)
                      &lt;/ul&gt;
                      &lt;p&gt;For &lt;code&gt;&quot;UnicastServerRef&quot;&lt;/code&gt; and
                      &lt;code&gt;&quot;UnicastServerRef2&quot;&lt;/code&gt;, no data is written by the
                      &lt;code&gt;writeExternal&lt;/code&gt; method or read by the
                      &lt;code&gt;readExternal&lt;/code&gt; method.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="362">
                <params>
                    <param name="out" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="369">
                    No reference class name specified, so serialize
                     remote reference.                    
                </comment>
                <comment line="376">
                    Built-in reference class specified, so delegate
                     to reference to write out its external form.                    
                </comment>
                <scope line="363"/>
                <scope line="365">
                    <declaration name="refClassName" type="String" line="366"/>
                    <scope line="367"/>
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="385">
                &lt;code&gt;readObject&lt;/code&gt; for custom serialization.
                  &lt;p&gt;This method reads this object&apos;s serialized form for this class
                  as follows:
                  &lt;p&gt;The &lt;code&gt;readUTF&lt;/code&gt; method is invoked on &lt;code&gt;in&lt;/code&gt;
                  to read the external ref type name for the &lt;code&gt;RemoteRef&lt;/code&gt;
                  instance to be filled in to this object&apos;s &lt;code&gt;ref&lt;/code&gt; field.
                  If the string returned by &lt;code&gt;readUTF&lt;/code&gt; has length zero,
                  the &lt;code&gt;readObject&lt;/code&gt; method is invoked on &lt;code&gt;in&lt;/code&gt;,
                  and than the value returned by &lt;code&gt;readObject&lt;/code&gt; is cast to
                  &lt;code&gt;RemoteRef&lt;/code&gt; and this object&apos;s &lt;code&gt;ref&lt;/code&gt; field is
                  set to that value.
                  Otherwise, this object&apos;s &lt;code&gt;ref&lt;/code&gt; field is set to a
                  &lt;code&gt;RemoteRef&lt;/code&gt; instance that is created of an
                  implementation-specific class corresponding to the external ref
                  type name returned by &lt;code&gt;readUTF&lt;/code&gt;, and then
                  the &lt;code&gt;readExternal&lt;/code&gt; method is invoked on
                  this object&apos;s &lt;code&gt;ref&lt;/code&gt; field.
                  &lt;p&gt;If the external ref type name is
                  &lt;code&gt;&quot;UnicastRef&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef&quot;&lt;/code&gt;,
                  &lt;code&gt;&quot;UnicastRef2&quot;&lt;/code&gt;, &lt;code&gt;&quot;UnicastServerRef2&quot;&lt;/code&gt;,
                  or &lt;code&gt;&quot;ActivatableRef&quot;&lt;/code&gt;, a corresponding
                  implementation-specific class must be found, and its
                  &lt;code&gt;readExternal&lt;/code&gt; method must read the serial data
                  for that external ref type name as specified to be written
                  in the &lt;b&gt;serialData&lt;/b&gt; documentation for this class.
                  If the external ref type name is any other string (of non-zero
                  length), a &lt;code&gt;ClassNotFoundException&lt;/code&gt; will be thrown,
                  unless the implementation provides an implementation-specific
                  class corresponding to that external ref type name, in which
                  case this object&apos;s &lt;code&gt;ref&lt;/code&gt; field will be set to an
                  instance of that implementation-specific class.                
            </javadoc>
            <method name="readObject" type="void" line="423">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="427">
                    No reference class name specified, so construct
                     remote reference from its serialized form.                    
                </comment>
                <comment line="433">
                    Built-in reference class specified, so delegate to
                     internal reference class to initialize its fields from
                     its external form.                    
                </comment>
                <comment line="444">
                    If this step fails, assume we found an internal
                     class that is not meant to be a serializable ref
                     type.                    
                </comment>
                <declaration name="refClassName" type="String" line="424"/>
                <scope line="425"/>
                <scope line="431">
                    <declaration name="internalRefClassName" type="String" line="437"/>
                    <declaration name="refClass" type="Class" line="439"/>
                    <scope line="440"/>
                    <scope line="448"/>
                    <scope line="450"/>
                    <scope line="452"/>
                </scope>
            </method>
        </class>
    </source>