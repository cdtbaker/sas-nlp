<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="RMISocketFactory" line="31">
            <implements interface="RMIClientSocketFactory"/>
            <implements interface="RMIServerSocketFactory"/>
            <javadoc line="31">
                An &lt;code&gt;RMISocketFactory&lt;/code&gt; instance is used by the RMI runtime
                  in order to obtain client and server sockets for RMI calls.  An
                  application may use the &lt;code&gt;setSocketFactory&lt;/code&gt; method to
                  request that the RMI runtime use its socket factory instance
                  instead of the default implementation.&lt;p&gt;
                  The default socket factory implementation used goes through a
                  three-tiered approach to creating client sockets. First, a direct
                  socket connection to the remote VM is attempted.  If that fails
                  (due to a firewall), the runtime uses HTTP with the explicit port
                  number of the server.  If the firewall does not allow this type of
                  communication, then HTTP to a cgi-bin script on the server is used
                  to POST the RMI call.&lt;p&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="factory" type="RMISocketFactory" line="54"/>
            <javadoc line="54">
                Client/server socket factory to be used by RMI runtime                
            </javadoc>
            <declaration name="defaultSocketFactory" type="RMISocketFactory" line="56"/>
            <javadoc line="56">
                default socket factory used by this RMI implementation                
            </javadoc>
            <declaration name="handler" type="RMIFailureHandler" line="58"/>
            <javadoc line="58">
                Handler for socket creation failure                
            </javadoc>
            <javadoc line="61">
                Constructs an &lt;code&gt;RMISocketFactory&lt;/code&gt;.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="RMISocketFactory" type="constructor" line="65"/>
            <method name="createSocket" type="Socket" line="69"/>
            <javadoc line="69">
                Creates a client socket connected to the specified host and port.                
                <param>
                    host   the host name                    
                </param>
                <param>
                    port   the port number                    
                </param>
                <return>
                    a socket connected to the specified host and port.                    
                </return>
                <exception>
                    IOException if an I/O error occurs during socket creation                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="createServerSocket" type="ServerSocket" line="80"/>
            <javadoc line="80">
                Create a server socket on the specified port (port 0 indicates
                  an anonymous port).                
                <param>
                    port the port number                    
                </param>
                <return>
                    the server socket on the specified port                    
                </return>
                <exception>
                    IOException if an I/O error occurs during server socket
                      creation                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="92">
                Set the global socket factory from which RMI gets sockets (if the
                  remote object is not associated with a specific client and/or server
                  socket factory). The RMI socket factory can only be set once. Note: The
                  RMISocketFactory may only be set if the current security manager allows
                  setting a socket factory; if disallowed, a SecurityException will be
                  thrown.                
                <param>
                    fac the socket factory                    
                </param>
                <exception>
                    IOException if the RMI socket factory is already set                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the operation.                    
                </exception>
                <see>
                    #getSocketFactory                    
                </see>
                <see>
                    java.lang.SecurityManager#checkSetFactory()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSocketFactory" type="void" line="109">
                <params>
                    <param name="fac" type="RMISocketFactory"/>
                </params>
                <scope line="110"/>
                <declaration name="security" type="SecurityManager" line="113"/>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Returns the socket factory set by the &lt;code&gt;setSocketFactory&lt;/code&gt;
                  method. Returns &lt;code&gt;null&lt;/code&gt; if no socket factory has been
                  set.                
                <return>
                    the socket factory                    
                </return>
                <see>
                    #setSocketFactory(RMISocketFactory)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getSocketFactory" type="RMISocketFactory" line="129"/>
            <javadoc line="133">
                Returns a reference to the default socket factory used
                  by this RMI implementation.  This will be the factory used
                  by the RMI runtime when &lt;code&gt;getSocketFactory&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the default RMI socket factory                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDefaultSocketFactory" type="RMISocketFactory" line="141">
                <scope line="142"/>
            </method>
            <javadoc line="149">
                Sets the failure handler to be called by the RMI runtime if server
                  socket creation fails.  By default, if no failure handler is installed
                  and server socket creation fails, the RMI runtime does attempt to
                  recreate the server socket.
                  &lt;p&gt;If there is a security manager, this method first calls
                  the security manager&apos;s &lt;code&gt;checkSetFactory&lt;/code&gt; method
                  to ensure the operation is allowed.
                  This could result in a &lt;code&gt;SecurityException&lt;/code&gt;.                
                <param>
                    fh the failure handler                    
                </param>
                <throws>
                    SecurityException  if a security manager exists and its
                      <code>checkSetFactory</code> method doesn't allow the
                      operation.                    
                </throws>
                <see>
                    #getFailureHandler                    
                </see>
                <see>
                    java.rmi.server.RMIFailureHandler#failure(Exception)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setFailureHandler" type="void" line="169">
                <params>
                    <param name="fh" type="RMIFailureHandler"/>
                </params>
                <declaration name="security" type="SecurityManager" line="170"/>
                <scope line="171"/>
            </method>
            <javadoc line="177">
                Returns the handler for socket creation failure set by the
                  &lt;code&gt;setFailureHandler&lt;/code&gt; method.                
                <return>
                    the failure handler                    
                </return>
                <see>
                    #setFailureHandler(RMIFailureHandler)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getFailureHandler" type="RMIFailureHandler" line="185"/>
        </class>
    </source>