<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.io.DataInput"/>
        <import package="java.io.DataOutput"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="ObjID" line="12">
            <implements interface="Serializable"/>
            <javadoc line="12">
                An &lt;code&gt;ObjID&lt;/code&gt; is used to identify a remote object exported
                  to an RMI runtime.  When a remote object is exported, it is assigned
                  an object identifier either implicitly or explicitly, depending on
                  the API used to export.
                  &lt;p&gt;The {@link #ObjID()} constructor can be used to generate a unique
                  object identifier.  Such an &lt;code&gt;ObjID&lt;/code&gt; is unique over time
                  with respect to the host it is generated on.
                  The {@link #ObjID(int)} constructor can be used to create a
                  &quot;well-known&quot; object identifier.  The scope of a well-known
                  &lt;code&gt;ObjID&lt;/code&gt; depends on the RMI runtime it is exported to.
                  &lt;p&gt;An &lt;code&gt;ObjID&lt;/code&gt; instance contains an object number (of type
                  &lt;code&gt;long&lt;/code&gt;) and an address space identifier (of type{@link UID}).  In a unique &lt;code&gt;ObjID&lt;/code&gt;, the address space
                  identifier is unique with respect to a given host over time.  In a
                  well-known &lt;code&gt;ObjID&lt;/code&gt;, the address space identifier is
                  equivalent to one returned by invoking the {@link UID#UID(short)}constructor with the value zero.
                  &lt;p&gt;If the system property &lt;code&gt;java.rmi.server.randomIDs&lt;/code&gt;
                  is defined to equal the string &lt;code&gt;&quot;true&quot;&lt;/code&gt; (case insensitive),
                  then the {@link #ObjID()} constructor will use a cryptographically
                  strong random number generator to choose the object number of the
                  returned &lt;code&gt;ObjID&lt;/code&gt;.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="REGISTRY_ID" type="int" line="38"/>
            <javadoc line="38">
                Object number for well-known &lt;code&gt;ObjID&lt;/code&gt; of the registry.                
            </javadoc>
            <declaration name="ACTIVATOR_ID" type="int" line="42"/>
            <javadoc line="42">
                Object number for well-known &lt;code&gt;ObjID&lt;/code&gt; of the activator.                
            </javadoc>
            <declaration name="DGC_ID" type="int" line="46"/>
            <javadoc line="46">
                Object number for well-known &lt;code&gt;ObjID&lt;/code&gt; of
                  the distributed garbage collector.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="51">
                indicate compatibility with JDK 1.1.x version of class                
            </javadoc>
            <declaration name="nextObjNum" type="AtomicLong" line="55"/>
            <declaration name="mySpace" type="UID" line="56"/>
            <declaration name="secureRandom" type="SecureRandom" line="57"/>
            <declaration name="objNum" type="long" line="58"/>
            <javadoc line="58">
                @serial object number                
                <see>
                    #hashCode                    
                </see>
            </javadoc>
            <declaration name="space" type="UID" line="63"/>
            <javadoc line="63">
                @serial address space identifier (unique to host over time)                
            </javadoc>
            <javadoc line="67">
                Generates a unique object identifier.
                  &lt;p&gt;If the system property &lt;code&gt;java.rmi.server.randomIDs&lt;/code&gt;
                  is defined to equal the string &lt;code&gt;&quot;true&quot;&lt;/code&gt; (case insensitive),
                  then this constructor will use a cryptographically
                  strong random number generator to choose the object number of the
                  returned &lt;code&gt;ObjID&lt;/code&gt;.                
            </javadoc>
            <method name="ObjID" type="constructor" line="75">
                <scope line="76"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Creates a &quot;well-known&quot; object identifier.
                  &lt;p&gt;An &lt;code&gt;ObjID&lt;/code&gt; created via this constructor will not
                  clash with any &lt;code&gt;ObjID&lt;/code&gt;s generated via the no-arg
                  constructor.                
                <param>
                    objNum object number for well-known object identifier                    
                </param>
            </javadoc>
            <method name="ObjID" type="constructor" line="92">
                <params>
                    <param name="objNum" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Constructs an object identifier given data read from a stream.                
            </javadoc>
            <method name="ObjID" type="constructor" line="99">
                <params>
                    <param name="objNum" type="long"/>
                    <param name="space" type="UID"/>
                </params>
            </method>
            <javadoc line="103">
                Marshals a binary representation of this &lt;code&gt;ObjID&lt;/code&gt; to
                  an &lt;code&gt;ObjectOutput&lt;/code&gt; instance.
                  &lt;p&gt;Specifically, this method first invokes the given stream&apos;s{@link ObjectOutput#writeLong(long)} method with this object
                  identifier&apos;s object number, and then it writes its address
                  space identifier by invoking its {@link UID#write(DataOutput)}method with the stream.                
                <param>
                    out the &lt;code&gt;ObjectOutput&lt;/code&gt; instance to write
                      this &lt;code&gt;ObjID&lt;/code&gt; to                    
                </param>
                <throws>
                    IOException if an I/O error occurs while performing
                      this operation                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="114">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="118">
                Constructs and returns a new &lt;code&gt;ObjID&lt;/code&gt; instance by
                  unmarshalling a binary representation from an
                  &lt;code&gt;ObjectInput&lt;/code&gt; instance.
                  &lt;p&gt;Specifically, this method first invokes the given stream&apos;s{@link ObjectInput#readLong()} method to read an object number,
                  then it invokes {@link UID#read(DataInput)} with the
                  stream to read an address space identifier, and then it
                  creates and returns a new &lt;code&gt;ObjID&lt;/code&gt; instance that
                  contains the object number and address space identifier that
                  were read from the stream.                
                <param>
                    in the &lt;code&gt;ObjectInput&lt;/code&gt; instance to read
                      &lt;code&gt;ObjID&lt;/code&gt; from                    
                </param>
                <return>
                    unmarshalled &lt;code&gt;ObjID&lt;/code&gt; instance                    
                </return>
                <throws>
                    IOException if an I/O error occurs while performing
                      this operation                    
                </throws>
            </javadoc>
            <method name="read" type="ObjID" line="134">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <declaration name="num" type="long" line="135"/>
                <declaration name="space" type="UID" line="136"/>
            </method>
            <javadoc line="139">
                Returns the hash code value for this object identifier, the
                  object number.                
                <return>
                    the hash code value for this object identifier                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="144"/>
            <javadoc line="147">
                Compares the specified object with this &lt;code&gt;ObjID&lt;/code&gt; for
                  equality.
                  This method returns &lt;code&gt;true&lt;/code&gt; if and only if the
                  specified object is an &lt;code&gt;ObjID&lt;/code&gt; instance with the same
                  object number and address space identifier as this one.                
                <param>
                    obj the object to compare this &lt;code&gt;ObjID&lt;/code&gt; to                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the given object is equivalent to
                      this one, and &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="157">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="158">
                    <declaration name="id" type="ObjID" line="159"/>
                </scope>
                <scope line="162"/>
            </method>
            <javadoc line="166">
                Returns a string representation of this object identifier.                
                <return>
                    a string representation of this object identifier                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="170"/>
            <method name="useRandomIDs" type="boolean" line="173">
                <declaration name="value" type="String" line="174"/>
            </method>
        </class>
    </source>