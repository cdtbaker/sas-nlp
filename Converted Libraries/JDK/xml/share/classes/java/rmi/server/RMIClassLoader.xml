<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ServiceLoader"/>
        <class name="RMIClassLoader" line="35">
            <comment line="124">
                Disallow anyone from creating one of these.                
            </comment>
            <javadoc line="35">
                &lt;code&gt;RMIClassLoader&lt;/code&gt; comprises static methods to support
                  dynamic class loading with RMI.  Included are methods for loading
                  classes from a network location (one or more URLs) and obtaining
                  the location from which an existing class should be loaded by
                  remote parties.  These methods are used by the RMI runtime when
                  marshalling and unmarshalling classes contained in the arguments
                  and return values of remote method calls, and they also may be
                  invoked directly by applications in order to mimic RMI&apos;s dynamic
                  class loading behavior.
                  &lt;p&gt;The implementation of the following static methods
                  &lt;ul&gt;
                  &lt;li&gt;{@link #loadClass(URL,String)}&lt;li&gt;{@link #loadClass(String,String)}&lt;li&gt;{@link #loadClass(String,String,ClassLoader)}&lt;li&gt;{@link #loadProxyClass(String,String[],ClassLoader)}&lt;li&gt;{@link #getClassLoader(String)}&lt;li&gt;{@link #getClassAnnotation(Class)}&lt;/ul&gt;
                  is provided by an instance of {@link RMIClassLoaderSpi}, the
                  service provider interface for those methods.  When one of the
                  methods is invoked, its behavior is to delegate to a corresponding
                  method on the service provider instance.  The details of how each
                  method delegates to the provider instance is described in the
                  documentation for each particular method.
                  &lt;p&gt;The service provider instance is chosen as follows:
                  &lt;ul&gt;
                  &lt;li&gt;If the system property
                  &lt;code&gt;java.rmi.server.RMIClassLoaderSpi&lt;/code&gt; is defined, then if
                  its value equals the string &lt;code&gt;&quot;default&quot;&lt;/code&gt;, the provider
                  instance will be the value returned by an invocation of the {@link #getDefaultProviderInstance()} method, and for any other value, if
                  a class named with the value of the property can be loaded by the
                  system class loader (see {@link ClassLoader#getSystemClassLoader})
                  and that class is assignable to {@link RMIClassLoaderSpi} and has a
                  public no-argument constructor, then that constructor will be
                  invoked to create the provider instance.  If the property is
                  defined but any other of those conditions are not true, then an
                  unspecified &lt;code&gt;Error&lt;/code&gt; will be thrown to code that attempts
                  to use &lt;code&gt;RMIClassLoader&lt;/code&gt;, indicating the failure to
                  obtain a provider instance.
                  &lt;li&gt;If a resource named
                  &lt;code&gt;META-INF/services/java.rmi.server.RMIClassLoaderSpi&lt;/code&gt; is
                  visible to the system class loader, then the contents of that
                  resource are interpreted as a provider-configuration file, and the
                  first class name specified in that file is used as the provider
                  class name.  If a class with that name can be loaded by the system
                  class loader and that class is assignable to {@link RMIClassLoaderSpi} and has a public no-argument constructor, then
                  that constructor will be invoked to create the provider instance.
                  If the resource is found but a provider cannot be instantiated as
                  described, then an unspecified &lt;code&gt;Error&lt;/code&gt; will be thrown to
                  code that attempts to use &lt;code&gt;RMIClassLoader&lt;/code&gt;, indicating
                  the failure to obtain a provider instance.
                  &lt;li&gt;Otherwise, the provider instance will be the value returned by
                  an invocation of the {@link #getDefaultProviderInstance()} method.
                  &lt;/ul&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <author>
                    Laird Dornin                    
                </author>
                <see>
                    RMIClassLoaderSpi                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="defaultProvider" type="RMIClassLoaderSpi" line="112"/>
            <javadoc line="112">
                &quot;default&quot; provider instance                
            </javadoc>
            <declaration name="provider" type="RMIClassLoaderSpi" line="116"/>
            <javadoc line="116">
                provider instance                
            </javadoc>
            <anonymous_class line="119">
                <method name="run" type="RMIClassLoaderSpi" line="120"/>
            </anonymous_class>
            <method name="RMIClassLoader" type="constructor" line="126"/>
            <javadoc line="128">
                Loads the class with the specified &lt;code&gt;name&lt;/code&gt;.
                  &lt;p&gt;This method delegates to {@link #loadClass(String,String)},
                  passing &lt;code&gt;null&lt;/code&gt; as the first argument and
                  &lt;code&gt;name&lt;/code&gt; as the second argument.                
                <param>
                    name the name of the class to load                    
                </param>
                <return>
                    the <code>Class</code> object representing the loaded class                    
                </return>
                <throws>
                    MalformedURLException if a provider-specific URL used
                      to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for the class
                      could not be found at the codebase location                    
                </throws>
                <deprecated>
                    replaced by <code>loadClass(String,String)</code> method                    
                </deprecated>
                <see>
                    #loadClass(String,String)                    
                </see>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="151">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="155">
                Loads a class from a codebase URL.
                  If &lt;code&gt;codebase&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then this method
                  will behave the same as {@link #loadClass(String,String)} with a
                  &lt;code&gt;null&lt;/code&gt; &lt;code&gt;codebase&lt;/code&gt; and the given class name.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}method of the provider instance, passing the result of invoking{@link URL#toString} on the given URL (or &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;codebase&lt;/code&gt; is null) as the first argument,
                  &lt;code&gt;name&lt;/code&gt; as the second argument,
                  and &lt;code&gt;null&lt;/code&gt; as the third argument.                
                <param>
                    codebase the URL to load the class from, or <code>null</code>                    
                </param>
                <param>
                    name the name of the class to load                    
                </param>
                <return>
                    the <code>Class</code> object representing the loaded class                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      <code>null</code> and a provider-specific URL used
                      to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for the class
                      could not be found at the specified URL                    
                </throws>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="185">
                <params>
                    <param name="codebase" type="URL"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="190">
                Loads a class from a codebase URL path.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}method of the provider instance, passing &lt;code&gt;codebase&lt;/code&gt;
                  as the first argument, &lt;code&gt;name&lt;/code&gt; as the second argument,
                  and &lt;code&gt;null&lt;/code&gt; as the third argument.                
                <param>
                    codebase the list of URLs (separated by spaces) to load
                      the class from, or <code>null</code>                    
                </param>
                <param>
                    name the name of the class to load                    
                </param>
                <return>
                    the <code>Class</code> object representing the loaded class                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or if
                      <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for the class
                      could not be found at the specified location                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="218">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="222">
                Loads a class from a codebase URL path, optionally using the
                  supplied loader.
                  This method should be used when the caller would like to make
                  available to the provider implementation an additional contextual
                  class loader to consider, such as the loader of a caller on the
                  stack.  Typically, a provider implementation will attempt to
                  resolve the named class using the given &lt;code&gt;defaultLoader&lt;/code&gt;,
                  if specified, before attempting to resolve the class from the
                  codebase URL path.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}method of the provider instance, passing &lt;code&gt;codebase&lt;/code&gt;
                  as the first argument, &lt;code&gt;name&lt;/code&gt; as the second argument,
                  and &lt;code&gt;defaultLoader&lt;/code&gt; as the third argument.                
                <param>
                    codebase the list of URLs (separated by spaces) to load
                      the class from, or <code>null</code>                    
                </param>
                <param>
                    name the name of the class to load                    
                </param>
                <param>
                    defaultLoader additional contextual class loader
                      to use, or <code>null</code>                    
                </param>
                <return>
                    the <code>Class</code> object representing the loaded class                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or if
                      <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for the class
                      could not be found at the specified location                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="263">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="name" type="String"/>
                    <param name="defaultLoader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="267">
                Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy})
                  that implements a set of interfaces with the given names
                  from a codebase URL path.
                  &lt;p&gt;The interfaces will be resolved similar to classes loaded via
                  the {@link #loadClass(String,String)} method using the given
                  &lt;code&gt;codebase&lt;/code&gt;.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)}method of the provider instance, passing &lt;code&gt;codebase&lt;/code&gt;
                  as the first argument, &lt;code&gt;interfaces&lt;/code&gt; as the second argument,
                  and &lt;code&gt;defaultLoader&lt;/code&gt; as the third argument.                
                <param>
                    codebase the list of URLs (space-separated) to load
                      classes from, or <code>null</code>                    
                </param>
                <param>
                    interfaces the names of the interfaces for the proxy class
                      to implement                    
                </param>
                <param>
                    defaultLoader additional contextual class loader
                      to use, or <code>null</code>                    
                </param>
                <return>
                    a dynamic proxy class that implements the named interfaces                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or
                      if <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for one of
                      the named interfaces could not be found at the specified location,
                      or if creation of the dynamic proxy class failed (such as if{@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}would throw an <code>IllegalArgumentException</code> for the given
                      interface list)                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="loadProxyClass" type="Class<?>" line="310">
                <params>
                    <param name="codebase" type="String"/>
                    <param name="interfaces" type="String[]"/>
                    <param name="defaultLoader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="314">
                Returns a class loader that loads classes from the given codebase
                  URL path.
                  &lt;p&gt;The class loader returned is the class loader that the{@link #loadClass(String,String)} method would use to load classes
                  for the same &lt;code&gt;codebase&lt;/code&gt; argument.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#getClassLoader(String)} method
                  of the provider instance, passing &lt;code&gt;codebase&lt;/code&gt; as the argument.
                  &lt;p&gt;If there is a security manger, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method will be invoked with a
                  &lt;code&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/code&gt; permission;
                  this could result in a &lt;code&gt;SecurityException&lt;/code&gt;.
                  The provider implementation of this method may also perform further
                  security checks to verify that the calling context has permission to
                  connect to all of the URLs in the codebase URL path.                
                <param>
                    codebase the list of URLs (space-separated) from which
                      the returned class loader will load classes from, or <code>null</code>                    
                </param>
                <return>
                    a class loader that loads classes from the given codebase URL
                      path                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or
                      if <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to identify the class loader is invalid                    
                </throws>
                <throws>
                    SecurityException if there is a security manager and the
                      invocation of its <code>checkPermission</code> method fails, or
                      if the caller does not have permission to connect to all of the
                      URLs in the codebase URL path                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="354">
                <params>
                    <param name="codebase" type="String"/>
                </params>
            </method>
            <javadoc line="358">
                Returns the annotation string (representing a location for
                  the class definition) that RMI will use to annotate the class
                  descriptor when marshalling objects of the given class.
                  &lt;p&gt;This method delegates to the{@link RMIClassLoaderSpi#getClassAnnotation(Class)} method
                  of the provider instance, passing &lt;code&gt;cl&lt;/code&gt; as the argument.                
                <param>
                    cl the class to obtain the annotation for                    
                </param>
                <return>
                    a string to be used to annotate the given class when
                      it gets marshalled, or <code>null</code>                    
                </return>
                <throws>
                    NullPointerException if <code>cl</code> is <code>null</code>                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getClassAnnotation" type="String" line="380">
                <params>
                    <param name="cl" type="Class<?>"/>
                </params>
                <comment line="376">
                    REMIND: Should we say that the returned class annotation will or
                     should be a (space-separated) list of URLs?                    
                </comment>
            </method>
            <javadoc line="384">
                Returns the canonical instance of the default provider
                  for the service provider interface {@link RMIClassLoaderSpi}.
                  If the system property &lt;code&gt;java.rmi.server.RMIClassLoaderSpi&lt;/code&gt;
                  is not defined, then the &lt;code&gt;RMIClassLoader&lt;/code&gt; static
                  methods
                  &lt;ul&gt;
                  &lt;li&gt;{@link #loadClass(URL,String)}&lt;li&gt;{@link #loadClass(String,String)}&lt;li&gt;{@link #loadClass(String,String,ClassLoader)}&lt;li&gt;{@link #loadProxyClass(String,String[],ClassLoader)}&lt;li&gt;{@link #getClassLoader(String)}&lt;li&gt;{@link #getClassAnnotation(Class)}&lt;/ul&gt;
                  will use the canonical instance of the default provider
                  as the service provider instance.
                  &lt;p&gt;If there is a security manager, its
                  &lt;code&gt;checkPermission&lt;/code&gt; method will be invoked with a
                  &lt;code&gt;RuntimePermission(&quot;setFactory&quot;)&lt;/code&gt; permission; this
                  could result in a &lt;code&gt;SecurityException&lt;/code&gt;.
                  &lt;p&gt;The default service provider instance implements{@link RMIClassLoaderSpi} as follows:
                  &lt;blockquote&gt;
                  &lt;p&gt;The &lt;b&gt;{@link RMIClassLoaderSpi#getClassAnnotation(Class)getClassAnnotation}&lt;/b&gt; method returns a &lt;code&gt;String&lt;/code&gt;
                  representing the codebase URL path that a remote party should
                  use to download the definition for the specified class.  The
                  format of the returned string is a path of URLs separated by
                  spaces.
                  The codebase string returned depends on the defining class
                  loader of the specified class:
                  &lt;ul&gt;
                  &lt;p&gt;&lt;li&gt;If the class loader is the system class loader (see{@link ClassLoader#getSystemClassLoader}), a parent of the
                  system class loader such as the loader used for installed
                  extensions, or the bootstrap class loader (which may be
                  represented by &lt;code&gt;null&lt;/code&gt;), then the value of the
                  &lt;code&gt;java.rmi.server.codebase&lt;/code&gt; property (or possibly an
                  earlier cached value) is returned, or
                  &lt;code&gt;null&lt;/code&gt; is returned if that property is not set.
                  &lt;p&gt;&lt;li&gt;Otherwise, if the class loader is an instance of
                  &lt;code&gt;URLClassLoader&lt;/code&gt;, then the returned string is a
                  space-separated list of the external forms of the URLs returned
                  by invoking the &lt;code&gt;getURLs&lt;/code&gt; methods of the loader.  If
                  the &lt;code&gt;URLClassLoader&lt;/code&gt; was created by this provider to
                  service an invocation of its &lt;code&gt;loadClass&lt;/code&gt; or
                  &lt;code&gt;loadProxyClass&lt;/code&gt; methods, then no permissions are
                  required to get the associated codebase string.  If it is an
                  arbitrary other &lt;code&gt;URLClassLoader&lt;/code&gt; instance, then if
                  there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method will be invoked once for each URL returned by the
                  &lt;code&gt;getURLs&lt;/code&gt; method, with the permission returned by
                  invoking &lt;code&gt;openConnection().getPermission()&lt;/code&gt; on each
                  URL; if any of those invocations throws a
                  &lt;code&gt;SecurityException&lt;/code&gt; or an &lt;code&gt;IOException&lt;/code&gt;,
                  then the value of the &lt;code&gt;java.rmi.server.codebase&lt;/code&gt;
                  property (or possibly an earlier cached value) is returned, or
                  &lt;code&gt;null&lt;/code&gt; is returned if that property is not set.
                  &lt;p&gt;&lt;li&gt;Finally, if the class loader is not an instance of
                  &lt;code&gt;URLClassLoader&lt;/code&gt;, then the value of the
                  &lt;code&gt;java.rmi.server.codebase&lt;/code&gt; property (or possibly an
                  earlier cached value) is returned, or
                  &lt;code&gt;null&lt;/code&gt; is returned if that property is not set.
                  &lt;/ul&gt;
                  &lt;p&gt;For the implementations of the methods described below,
                  which all take a &lt;code&gt;String&lt;/code&gt; parameter named
                  &lt;code&gt;codebase&lt;/code&gt; that is a space-separated list of URLs,
                  each invocation has an associated &lt;i&gt;codebase loader&lt;/i&gt; that
                  is identified using the &lt;code&gt;codebase&lt;/code&gt; argument in
                  conjunction with the current thread&apos;s context class loader (see{@link Thread#getContextClassLoader()}).  When there is a
                  security manager, this provider maintains an internal table of
                  class loader instances (which are at least instances of {@link java.net.URLClassLoader}) keyed by the pair of their parent
                  class loader and their codebase URL path (an ordered list of
                  URLs).  If the &lt;code&gt;codebase&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt;,
                  the codebase URL path is the value of the system property
                  &lt;code&gt;java.rmi.server.codebase&lt;/code&gt; or possibly an
                  earlier cached value.  For a given codebase URL path passed as the
                  &lt;code&gt;codebase&lt;/code&gt; argument to an invocation of one of the
                  below methods in a given context, the codebase loader is the
                  loader in the table with the specified codebase URL path and
                  the current thread&apos;s context class loader as its parent.  If no
                  such loader exists, then one is created and added to the table.
                  The table does not maintain strong references to its contained
                  loaders, in order to allow them and their defined classes to be
                  garbage collected when not otherwise reachable.  In order to
                  prevent arbitrary untrusted code from being implicitly loaded
                  into a virtual machine with no security manager, if there is no
                  security manager set, the codebase loader is just the current
                  thread&apos;s context class loader (the supplied codebase URL path
                  is ignored, so remote class loading is disabled).
                  &lt;p&gt;The &lt;b&gt;{@link RMIClassLoaderSpi#getClassLoader(String)getClassLoader}&lt;/b&gt; method returns the codebase loader for the
                  specified codebase URL path.  If there is a security manager,
                  then if the calling context does not have permission to connect
                  to all of the URLs in the codebase URL path, a
                  &lt;code&gt;SecurityException&lt;/code&gt; will be thrown.
                  &lt;p&gt;The &lt;b&gt;{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)loadClass}&lt;/b&gt; method attempts to load the class with the
                  specified name as follows:
                  &lt;blockquote&gt;
                  If the &lt;code&gt;defaultLoader&lt;/code&gt; argument is
                  non-&lt;code&gt;null&lt;/code&gt;, it first attempts to load the class with the
                  specified &lt;code&gt;name&lt;/code&gt; using the
                  &lt;code&gt;defaultLoader&lt;/code&gt;, such as by evaluating
                  &lt;pre&gt;
                  Class.forName(name, false, defaultLoader)
                  &lt;/pre&gt;
                  If the class is successfully loaded from the
                  &lt;code&gt;defaultLoader&lt;/code&gt;, that class is returned.  If an
                  exception other than &lt;code&gt;ClassNotFoundException&lt;/code&gt; is
                  thrown, that exception is thrown to the caller.
                  &lt;p&gt;Next, the &lt;code&gt;loadClass&lt;/code&gt; method attempts to load the
                  class with the specified &lt;code&gt;name&lt;/code&gt; using the codebase
                  loader for the specified codebase URL path.
                  If there is a security manager, then the calling context
                  must have permission to connect to all of the URLs in the
                  codebase URL path; otherwise, the current thread&apos;s context
                  class loader will be used instead of the codebase loader.
                  &lt;/blockquote&gt;
                  &lt;p&gt;The &lt;b&gt;{@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)loadProxyClass}&lt;/b&gt; method attempts to return a dynamic proxy
                  class with the named interface as follows:
                  &lt;blockquote&gt;
                  &lt;p&gt;If the &lt;code&gt;defaultLoader&lt;/code&gt; argument is
                  non-&lt;code&gt;null&lt;/code&gt; and all of the named interfaces can be
                  resolved through that loader, then,
                  &lt;ul&gt;
                  &lt;li&gt;if all of the resolved interfaces are &lt;code&gt;public&lt;/code&gt;,
                  then it first attempts to obtain a dynamic proxy class (using{@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])Proxy.getProxyClass}) for the resolved interfaces defined in
                  the codebase loader; if that attempt throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt;, it then attempts to
                  obtain a dynamic proxy class for the resolved interfaces
                  defined in the &lt;code&gt;defaultLoader&lt;/code&gt;.  If both attempts
                  throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;, then this method
                  throws a &lt;code&gt;ClassNotFoundException&lt;/code&gt;.  If any other
                  exception is thrown, that exception is thrown to the caller.
                  &lt;li&gt;if all of the non-&lt;code&gt;public&lt;/code&gt; resolved interfaces
                  are defined in the same class loader, then it attempts to
                  obtain a dynamic proxy class for the resolved interfaces
                  defined in that loader.
                  &lt;li&gt;otherwise, a &lt;code&gt;LinkageError&lt;/code&gt; is thrown (because a
                  class that implements all of the specified interfaces cannot be
                  defined in any loader).
                  &lt;/ul&gt;
                  &lt;p&gt;Otherwise, if all of the named interfaces can be resolved
                  through the codebase loader, then,
                  &lt;ul&gt;
                  &lt;li&gt;if all of the resolved interfaces are &lt;code&gt;public&lt;/code&gt;,
                  then it attempts to obtain a dynamic proxy class for the
                  resolved interfaces in the codebase loader.  If the attempt
                  throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;, then this
                  method throws a &lt;code&gt;ClassNotFoundException&lt;/code&gt;.
                  &lt;li&gt;if all of the non-&lt;code&gt;public&lt;/code&gt; resolved interfaces
                  are defined in the same class loader, then it attempts to
                  obtain a dynamic proxy class for the resolved interfaces
                  defined in that loader.
                  &lt;li&gt;otherwise, a &lt;code&gt;LinkageError&lt;/code&gt; is thrown (because a
                  class that implements all of the specified interfaces cannot be
                  defined in any loader).
                  &lt;/ul&gt;
                  &lt;p&gt;Otherwise, a &lt;code&gt;ClassNotFoundException&lt;/code&gt; is thrown
                  for one of the named interfaces that could not be resolved.
                  &lt;/blockquote&gt;
                  &lt;/blockquote&gt;                
                <return>
                    the canonical instance of the default service provider                    
                </return>
                <throws>
                    SecurityException if there is a security manager and the
                      invocation of its <code>checkPermission</code> method fails                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultProviderInstance" type="RMIClassLoaderSpi" line="603">
                <declaration name="sm" type="SecurityManager" line="604"/>
                <scope line="605"/>
            </method>
            <javadoc line="611">
                Returns the security context of the given class loader.                
                <param>
                    loader a class loader from which to get the security context                    
                </param>
                <return>
                    the security context                    
                </return>
                <deprecated>
                    no replacement.  As of the Java 2 platform v1.2, RMI no
                      longer uses this method to obtain a class loader's security context.                    
                </deprecated>
                <see>
                    java.lang.SecurityManager#getSecurityContext()                    
                </see>
            </javadoc>
            <method name="getSecurityContext" type="Object" line="624">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="628">
                Creates an instance of the default provider class.                
            </javadoc>
            <method name="newDefaultProviderInstance" type="RMIClassLoaderSpi" line="631">
                <anonymous_class line="632">
                    <method name="loadClass" type="Class<?>" line="636">
                        <params>
                            <param name="codebase" type="String"/>
                            <param name="name" type="String"/>
                            <param name="defaultLoader" type="ClassLoader"/>
                        </params>
                    </method>
                    <method name="loadProxyClass" type="Class<?>" line="645">
                        <params>
                            <param name="codebase" type="String"/>
                            <param name="interfaces" type="String[]"/>
                            <param name="defaultLoader" type="ClassLoader"/>
                        </params>
                    </method>
                    <method name="getClassLoader" type="ClassLoader" line="652">
                        <params>
                            <param name="codebase" type="String"/>
                        </params>
                    </method>
                    <method name="getClassAnnotation" type="String" line="656">
                        <params>
                            <param name="cl" type="Class<?>"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="662">
                Chooses provider instance, following above documentation.
                  This method assumes that it has been invoked in a privileged block.                
            </javadoc>
            <method name="initializeProvider" type="RMIClassLoaderSpi" line="667">
                <comment line="668">
                    First check for the system property being set:                    
                </comment>
                <comment line="700">
                    Next look for a provider configuration file installed:                    
                </comment>
                <comment line="717">
                    Finally, return the canonical instance of the default provider.                    
                </comment>
                <declaration name="providerClassName" type="String" line="671"/>
                <scope line="674">
                    <scope line="675"/>
                    <scope line="679">
                        <declaration name="providerClass" type="Class&lt;? extends RMIClassLoaderSpi&gt;" line="680"/>
                    </scope>
                    <scope line="686"/>
                    <scope line="688"/>
                    <scope line="690"/>
                    <scope line="692">
                        <declaration name="error" type="Error" line="693"/>
                    </scope>
                </scope>
                <declaration name="iter" type="Iterator&lt;RMIClassLoaderSpi&gt;" line="703"/>
                <scope line="706">
                    <scope line="707"/>
                    <scope line="709">
                        <declaration name="error" type="Error" line="710"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>