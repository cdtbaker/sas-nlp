<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.server">
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <class name="RMIClassLoaderSpi" line="31">
            <comment line="175">
                SecurityException                
            </comment>
            <javadoc line="31">
                &lt;code&gt;RMIClassLoaderSpi&lt;/code&gt; is the service provider interface for
                  &lt;code&gt;RMIClassLoader&lt;/code&gt;.
                  In particular, an &lt;code&gt;RMIClassLoaderSpi&lt;/code&gt; instance provides an
                  implementation of the following static methods of
                  &lt;code&gt;RMIClassLoader&lt;/code&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;{@link RMIClassLoader#loadClass(URL,String)}&lt;li&gt;{@link RMIClassLoader#loadClass(String,String)}&lt;li&gt;{@link RMIClassLoader#loadClass(String,String,ClassLoader)}&lt;li&gt;{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}&lt;li&gt;{@link RMIClassLoader#getClassLoader(String)}&lt;li&gt;{@link RMIClassLoader#getClassAnnotation(Class)}&lt;/ul&gt;
                  When one of those methods is invoked, its behavior is to delegate
                  to a corresponding method on an instance of this class.
                  The details of how each method delegates to the provider instance is
                  described in the documentation for each particular method.
                  See the documentation for {@link RMIClassLoader} for a description
                  of how a provider instance is chosen.                
                <author>
                    Peter Jones                    
                </author>
                <author>
                    Laird Dornin                    
                </author>
                <see>
                    RMIClassLoader                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="64"/>
            <javadoc line="64">
                Provides the implementation for{@link RMIClassLoader#loadClass(URL,String)},{@link RMIClassLoader#loadClass(String,String)}, and{@link RMIClassLoader#loadClass(String,String,ClassLoader)}.
                  Loads a class from a codebase URL path, optionally using the
                  supplied loader.
                  Typically, a provider implementation will attempt to
                  resolve the named class using the given &lt;code&gt;defaultLoader&lt;/code&gt;,
                  if specified, before attempting to resolve the class from the
                  codebase URL path.
                  &lt;p&gt;An implementation of this method must either return a class
                  with the given name or throw an exception.                
                <param>
                    codebase the list of URLs (separated by spaces) to load
                      the class from, or <code>null</code>                    
                </param>
                <param>
                    name the name of the class to load                    
                </param>
                <param>
                    defaultLoader additional contextual class loader
                      to use, or <code>null</code>                    
                </param>
                <return>
                    the <code>Class</code> object representing the loaded class                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or
                      if <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for the class
                      could not be found at the specified location                    
                </throws>
            </javadoc>
            <method name="loadProxyClass" type="Class<?>" line="103"/>
            <javadoc line="103">
                Provides the implementation for{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}.
                  Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy}that implements a set of interfaces with the given names
                  from a codebase URL path, optionally using the supplied loader.
                  &lt;p&gt;An implementation of this method must either return a proxy
                  class that implements the named interfaces or throw an exception.                
                <param>
                    codebase the list of URLs (space-separated) to load
                      classes from, or <code>null</code>                    
                </param>
                <param>
                    interfaces the names of the interfaces for the proxy class
                      to implement                    
                </param>
                <return>
                    a dynamic proxy class that implements the named interfaces                    
                </return>
                <param>
                    defaultLoader additional contextual class loader
                      to use, or <code>null</code>                    
                </param>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or
                      if <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to load classes is invalid                    
                </throws>
                <throws>
                    ClassNotFoundException if a definition for one of
                      the named interfaces could not be found at the specified location,
                      or if creation of the dynamic proxy class failed (such as if{@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}would throw an <code>IllegalArgumentException</code> for the given
                      interface list)                    
                </throws>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="142"/>
            <javadoc line="142">
                Provides the implementation for{@link RMIClassLoader#getClassLoader(String)}.
                  Returns a class loader that loads classes from the given codebase
                  URL path.
                  &lt;p&gt;If there is a security manger, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method will be invoked with a
                  &lt;code&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/code&gt; permission;
                  this could result in a &lt;code&gt;SecurityException&lt;/code&gt;.
                  The implementation of this method may also perform further security
                  checks to verify that the calling context has permission to connect
                  to all of the URLs in the codebase URL path.                
                <param>
                    codebase the list of URLs (space-separated) from which
                      the returned class loader will load classes from, or <code>null</code>                    
                </param>
                <return>
                    a class loader that loads classes from the given codebase URL
                      path                    
                </return>
                <throws>
                    MalformedURLException if <code>codebase</code> is
                      non-<code>null</code> and contains an invalid URL, or
                      if <code>codebase</code> is <code>null</code> and a provider-specific
                      URL used to identify the class loader is invalid                    
                </throws>
                <throws>
                    SecurityException if there is a security manager and the
                      invocation of its <code>checkPermission</code> method fails, or
                      if the caller does not have permission to connect to all of the
                      URLs in the codebase URL path                    
                </throws>
            </javadoc>
            <method name="getClassAnnotation" type="String" line="176"/>
            <javadoc line="176">
                Provides the implementation for{@link RMIClassLoader#getClassAnnotation(Class)}.
                  Returns the annotation string (representing a location for
                  the class definition) that RMI will use to annotate the class
                  descriptor when marshalling objects of the given class.                
                <param>
                    cl the class to obtain the annotation for                    
                </param>
                <return>
                    a string to be used to annotate the given class when
                      it gets marshalled, or <code>null</code>                    
                </return>
                <throws>
                    NullPointerException if <code>cl</code> is <code>null</code>                    
                </throws>
            </javadoc>
        </class>
    </source>