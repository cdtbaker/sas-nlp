<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamConstants"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="sun.rmi.server.MarshalInputStream"/>
        <import package="sun.rmi.server.MarshalOutputStream"/>
        <class name="MarshalledObject" line="13">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="13">
                A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized
                  representation of an object given to its constructor.  The &lt;code&gt;get&lt;/code&gt;
                  method returns a new copy of the original object, as deserialized from
                  the contained byte stream.  The contained object is serialized and
                  deserialized with the same serialization semantics used for marshaling
                  and unmarshaling parameters and return values of RMI calls:  When the
                  serialized form is created:
                  &lt;ul&gt;
                  &lt;li&gt; classes are annotated with a codebase URL from where the class
                  can be loaded (if available), and
                  &lt;li&gt; any remote object in the &lt;code&gt;MarshalledObject&lt;/code&gt; is
                  represented by a serialized instance of its stub.
                  &lt;/ul&gt;
                  &lt;p&gt;When copy of the object is retrieved (via the &lt;code&gt;get&lt;/code&gt; method),
                  if the class is not available locally, it will be loaded from the
                  appropriate location (specified the URL annotated with the class descriptor
                  when the class was serialized.
                  &lt;p&gt;&lt;code&gt;MarshalledObject&lt;/code&gt; facilitates passing objects in RMI calls
                  that are not automatically deserialized immediately by the remote peer.                
                <param>
                    &lt;T&gt;
                      the type of the object contained in this
                      &lt;code&gt;MarshalledObject&lt;/code&gt;                    
                </param>
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="objBytes" type="byte[]" line="41"/>
            <javadoc line="41">
                @serial Bytes of serialized representation.  If &lt;code&gt;objBytes&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt; then the object marshalled was a &lt;code&gt;null&lt;/code&gt;
                  reference.                
            </javadoc>
            <declaration name="locBytes" type="byte[]" line="47"/>
            <javadoc line="47">
                @serial Bytes of location annotations, which are ignored by
                  &lt;code&gt;equals&lt;/code&gt;.  If &lt;code&gt;locBytes&lt;/code&gt; is null, there were no
                  non-&lt;code&gt;null&lt;/code&gt; annotations during marshalling.                
            </javadoc>
            <declaration name="hash" type="int" line="53"/>
            <javadoc line="53">
                @serial Stored hash code of contained object.                
                <see>
                    #hashCode                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <javadoc line="58">
                Indicate compatibility with 1.2 version of class.                
            </javadoc>
            <javadoc line="62">
                Creates a new &lt;code&gt;MarshalledObject&lt;/code&gt; that contains the
                  serialized representation of the current state of the supplied object.
                  The object is serialized with the semantics used for marshaling
                  parameters for RMI calls.                
                <param>
                    obj the object to be serialized (must be serializable)                    
                </param>
                <exception>
                    IOException if an &lt;code&gt;IOException&lt;/code&gt; occurs; an
                      &lt;code&gt;IOException&lt;/code&gt; may occur if &lt;code&gt;obj&lt;/code&gt; is not
                      serializable.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="MarshalledObject" type="constructor" line="73">
                <params>
                    <param name="obj" type="T"/>
                </params>
                <scope line="74"/>
                <declaration name="bout" type="ByteArrayOutputStream" line="78"/>
                <declaration name="lout" type="ByteArrayOutputStream" line="79"/>
                <declaration name="out" type="MarshalledObjectOutputStream" line="80"/>
                <declaration name="h" type="int" line="85"/>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Returns a new copy of the contained marshalledobject.  The internal
                  representation is deserialized with the semantics used for
                  unmarshaling paramters for RMI calls.                
                <return>
                    a copy of the contained object                    
                </return>
                <exception>
                    IOException if an &lt;code&gt;IOException&lt;/code&gt; occurs while
                      deserializing the object from its internal representation.                    
                </exception>
                <exception>
                    ClassNotFoundException if a
                      &lt;code&gt;ClassNotFoundException&lt;/code&gt; occurs while deserializing the
                      object from its internal representation.
                      could not be found                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="get" type="T" line="104">
                <declaration name="bin" type="ByteArrayInputStream" line="106"/>
                <declaration name="lin" type="ByteArrayInputStream" line="107"/>
                <declaration name="in" type="MarshalledObjectInputStream" line="108"/>
                <declaration name="obj" type="T" line="109"/>
            </method>
            <javadoc line="113">
                Return a hash code for this &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <return>
                    a hash code                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="117"/>
            <javadoc line="120">
                Compares this &lt;code&gt;MarshalledObject&lt;/code&gt; to another object.
                  Returns true if and only if the argument refers to a
                  &lt;code&gt;MarshalledObject&lt;/code&gt; that contains exactly the same
                  serialized representation of an object as this one does. The
                  comparison ignores any class codebase annotation, meaning that
                  two objects are equivalent if they have the same serialized
                  representation &lt;i&gt;except&lt;/i&gt; for the codebase of each class
                  in the serialized representation.                
                <param>
                    obj the object to compare with this &lt;code&gt;MarshalledObject&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the argument contains an equaivalent
                      serialized object; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="134">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="136">
                    <declaration name="other" type="MarshalledObject" line="137"/>
                    <scope line="140"/>
                </scope>
                <scope line="145"/>
            </method>
            <class name="MarshalledObjectOutputStream" line="149">
                <extends class="MarshalOutputStream"/>
                <javadoc line="149">
                    This class is used to marshal objects for
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.  It places the location annotations
                      to one side so that two &lt;code&gt;MarshalledObject&lt;/code&gt;s can be
                      compared for equality if they differ only in location
                      annotations.  Objects written using this stream should be read back
                      from a &lt;code&gt;MarshalledObjectInputStream&lt;/code&gt;.                    
                    <see>
                        java.rmi.MarshalledObject                        
                    </see>
                    <see>
                        MarshalledObjectInputStream                        
                    </see>
                </javadoc>
                <declaration name="locOut" type="ObjectOutputStream" line="160"/>
                <javadoc line="160">
                    The stream on which location objects are written.                    
                </javadoc>
                <declaration name="hadAnnotations" type="boolean" line="164"/>
                <javadoc line="164">
                    &lt;code&gt;true&lt;/code&gt; if non-&lt;code&gt;null&lt;/code&gt; annotations are
                      written.                    
                </javadoc>
                <javadoc line="169">
                    Creates a new &lt;code&gt;MarshalledObjectOutputStream&lt;/code&gt; whose
                      non-location bytes will be written to &lt;code&gt;objOut&lt;/code&gt; and whose
                      location annotations (if any) will be written to
                      &lt;code&gt;locOut&lt;/code&gt;.                    
                </javadoc>
                <method name="MarshalledObjectOutputStream" type="constructor" line="175">
                    <params>
                        <param name="objOut" type="OutputStream"/>
                        <param name="locOut" type="OutputStream"/>
                    </params>
                </method>
                <javadoc line="181">
                    Returns &lt;code&gt;true&lt;/code&gt; if any non-&lt;code&gt;null&lt;/code&gt; location
                      annotations have been written to this stream.                    
                </javadoc>
                <method name="hadAnnotations" type="boolean" line="185"/>
                <javadoc line="188">
                    Overrides MarshalOutputStream.writeLocation implementation to write
                      annotations to the location stream.                    
                </javadoc>
                <method name="writeLocation" type="void" line="192">
                    <params>
                        <param name="loc" type="String"/>
                    </params>
                </method>
                <method name="flush" type="void" line="196"/>
            </class>
            <class name="MarshalledObjectInputStream" line="201">
                <extends class="MarshalInputStream"/>
                <javadoc line="201">
                    The counterpart to &lt;code&gt;MarshalledObjectOutputStream&lt;/code&gt;.                    
                    <see>
                        MarshalledObjectOutputStream                        
                    </see>
                </javadoc>
                <declaration name="locIn" type="ObjectInputStream" line="206"/>
                <javadoc line="206">
                    The stream from which annotations will be read.  If this is
                      &lt;code&gt;null&lt;/code&gt;, then all annotations were &lt;code&gt;null&lt;/code&gt;.                    
                </javadoc>
                <javadoc line="211">
                    Creates a new &lt;code&gt;MarshalledObjectInputStream&lt;/code&gt; that
                      reads its objects from &lt;code&gt;objIn&lt;/code&gt; and annotations
                      from &lt;code&gt;locIn&lt;/code&gt;.  If &lt;code&gt;locIn&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;, then all annotations will be
                      &lt;code&gt;null&lt;/code&gt;.                    
                </javadoc>
                <method name="MarshalledObjectInputStream" type="constructor" line="218">
                    <params>
                        <param name="objIn" type="InputStream"/>
                        <param name="locIn" type="InputStream"/>
                    </params>
                </method>
                <javadoc line="222">
                    Overrides MarshalInputStream.readLocation to return locations from
                      the stream we were given, or &lt;code&gt;null&lt;/code&gt; if we were given a
                      &lt;code&gt;null&lt;/code&gt; location stream.                    
                </javadoc>
                <method name="readLocation" type="Object" line="227"/>
            </class>
        </class>
    </source>