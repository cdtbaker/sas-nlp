<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.rmi.dgc">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.rmi.server.UID"/>
        <import package="java.security"/>
        <class name="VMID" line="6">
            <implements interface="java.io.Serializable"/>
            <javadoc line="6">
                A VMID is a identifier that is unique across all Java virtual
                  machines.  VMIDs are used by the distributed garbage collector
                  to identify client VMs.                
                <author>
                    Ann Wollrath                    
                </author>
                <author>
                    Peter Jones                    
                </author>
            </javadoc>
            <declaration name="localAddr" type="byte[]" line="14"/>
            <javadoc line="14">
                array of bytes uniquely identifying this host                
            </javadoc>
            <declaration name="addr" type="byte[]" line="18"/>
            <javadoc line="18">
                @serial array of bytes uniquely identifying host created on                
            </javadoc>
            <declaration name="uid" type="UID" line="22"/>
            <javadoc line="22">
                @serial unique identifier with respect to host created on                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <javadoc line="26">
                indicate compatibility with JDK 1.1.x version of class                
            </javadoc>
            <javadoc line="30">
                Create a new VMID.  Each new VMID returned from this constructor
                  is unique for all Java virtual machines under the following
                  conditions: a) the conditions for uniqueness for objects of
                  the class &lt;code&gt;java.rmi.server.UID&lt;/code&gt; are satisfied, and b) an
                  address can be obtained for this host that is unique and constant
                  for the lifetime of this object.  &lt;p&gt;                
            </javadoc>
            <method name="VMID" type="constructor" line="38"/>
            <javadoc line="42">
                Return true if an accurate address can be determined for this
                  host.  If false, reliable VMID cannot be generated from this host                
                <return>
                    true if host address can be determined, false otherwise                    
                </return>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="isUnique" type="boolean" line="48"/>
            <javadoc line="51">
                Compute hash code for this VMID.                
            </javadoc>
            <method name="hashCode" type="int" line="54"/>
            <javadoc line="57">
                Compare this VMID to another, and return true if they are the
                  same identifier.                
            </javadoc>
            <method name="equals" type="boolean" line="61">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="62">
                    <declaration name="vmid" type="VMID" line="63"/>
                    <scope line="66"/>
                </scope>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Return string representation of this VMID.                
            </javadoc>
            <method name="toString" type="String" line="79">
                <declaration name="result" type="StringBuffer" line="80"/>
                <scope line="81">
                    <declaration name="x" type="int" line="82"/>
                </scope>
            </method>
            <javadoc line="89">
                Compute the hash an IP address.  The hash is the first 8 bytes
                  of the SHA digest of the IP address.                
            </javadoc>
            <method name="computeAddressHash" type="byte[]" line="93">
                <anonymous_class line="94">
                    <method name="run" type="byte[]" line="95">
                        <scope line="96"/>
                        <scope line="99"/>
                    </method>
                </anonymous_class>
                <declaration name="addr" type="byte[]" line="94"/>
                <declaration name="addrHash" type="byte[]" line="105"/>
                <declaration name="ADDR_HASH_LENGTH" type="int" line="106"/>
                <scope line="107">
                    <declaration name="md" type="MessageDigest" line="108"/>
                    <declaration name="sink" type="ByteArrayOutputStream" line="109"/>
                    <declaration name="out" type="DataOutputStream" line="110"/>
                    <declaration name="digest" type="byte" line="113"/>
                    <declaration name="hashlength" type="int" line="114"/>
                </scope>
                <scope line="118"/>
                <scope line="121"/>
            </method>
        </class>
    </source>