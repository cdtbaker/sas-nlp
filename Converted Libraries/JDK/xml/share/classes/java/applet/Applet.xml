<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.applet">
        <import package="java.awt"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Locale"/>
        <import package="javax.accessibility"/>
        <class name="Applet" line="11">
            <extends class="Panel"/>
            <javadoc line="11">
                An applet is a small program that is intended not to be run on
                  its own, but rather to be embedded inside another application.
                  &lt;p&gt;
                  The &lt;code&gt;Applet&lt;/code&gt; class must be the superclass of any
                  applet that is to be embedded in a Web page or viewed by the Java
                  Applet Viewer. The &lt;code&gt;Applet&lt;/code&gt; class provides a standard
                  interface between applets and their environment.                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Chris Warth                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <javadoc line="24">
                Constructs a new Applet.
                  &lt;p&gt;
                  Note: Many methods in &lt;code&gt;java.applet.Applet&lt;/code&gt;
                  may be invoked by the applet only after the applet is
                  fully constructed; applet should avoid calling methods
                  in &lt;code&gt;java.applet.Applet&lt;/code&gt; in the constructor.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Applet" type="constructor" line="36">
                <scope line="37"/>
            </method>
            <declaration name="stub" type="AppletStub" line="41"/>
            <javadoc line="41">
                Applets can be serialized but the following conventions MUST be followed:
                  Before Serialization:
                  An applet must be in STOPPED state.
                  After Deserialization:
                  The applet will be restored in STOPPED state (and most clients will
                  likely move it into RUNNING state).
                  The stub field will be restored by the reader.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="52">
                Read an applet from an object input stream.                
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <serial>
                                        
                </serial>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="61">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="62"/>
            </method>
            <javadoc line="67">
                Sets this applet&apos;s stub. This is done automatically by the system.
                  &lt;p&gt;If there is a security manager, its &lt;code&gt; checkPermission &lt;/code&gt;
                  method is called with the
                  &lt;code&gt;AWTPermission(&quot;setAppletStub&quot;)&lt;/code&gt;
                  permission if a stub has already been set.                
                <param>
                    stub   the new stub.                    
                </param>
                <exception>
                    SecurityException if the caller cannot set the stub                    
                </exception>
            </javadoc>
            <method name="setStub" type="void" line="76">
                <params>
                    <param name="stub" type="AppletStub"/>
                </params>
                <scope line="77">
                    <declaration name="s" type="SecurityManager" line="78"/>
                    <scope line="79"/>
                </scope>
            </method>
            <javadoc line="85">
                Determines if this applet is active. An applet is marked active
                  just before its &lt;code&gt;start&lt;/code&gt; method is called. It becomes
                  inactive just before its &lt;code&gt;stop&lt;/code&gt; method is called.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the applet is active;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.applet.Applet#start()                    
                </see>
                <see>
                    java.applet.Applet#stop()                    
                </see>
            </javadoc>
            <method name="isActive" type="boolean" line="94">
                <scope line="95"/>
                <scope line="98"/>
            </method>
            <javadoc line="102">
                Gets the URL of the document in which this applet is embedded.
                  For example, suppose an applet is contained
                  within the document:
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://java.sun.com/products/jdk/1.2/index.html
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  The document base is:
                  &lt;blockquote&gt;&lt;pre&gt;
                  http://java.sun.com/products/jdk/1.2/index.html
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the {@link java.net.URL} of the document that contains this
                      applet.                    
                </return>
                <see>
                    java.applet.Applet#getCodeBase()                    
                </see>
            </javadoc>
            <method name="getDocumentBase" type="URL" line="117"/>
            <javadoc line="120">
                Gets the base URL. This is the URL of the directory which contains this applet.                
                <return>
                    the base {@link java.net.URL} of
                      the directory which contains this applet.                    
                </return>
                <see>
                    java.applet.Applet#getDocumentBase()                    
                </see>
            </javadoc>
            <method name="getCodeBase" type="URL" line="126"/>
            <javadoc line="129">
                Returns the value of the named parameter in the HTML tag. For
                  example, if this applet is specified as
                  &lt;blockquote&gt;&lt;pre&gt;
                  &amp;lt;applet code=&quot;Clock&quot; width=50 height=50&amp;gt;
                  &amp;lt;param name=Color value=&quot;blue&quot;&amp;gt;
                  &amp;lt;/applet&amp;gt;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  then a call to &lt;code&gt;getParameter(&quot;Color&quot;)&lt;/code&gt; returns the
                  value &lt;code&gt;&quot;blue&quot;&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; argument is case insensitive.                
                <param>
                    name   a parameter name.                    
                </param>
                <return>
                    the value of the named parameter,
                      or &lt;code&gt;null&lt;/code&gt; if not set.                    
                </return>
            </javadoc>
            <method name="getParameter" type="String" line="146">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="149">
                Determines this applet&apos;s context, which allows the applet to
                  query and affect the environment in which it runs.
                  &lt;p&gt;
                  This environment of an applet represents the document that
                  contains the applet.                
                <return>
                    the applet&apos;s context.                    
                </return>
            </javadoc>
            <method name="getAppletContext" type="AppletContext" line="157"/>
            <javadoc line="160">
                Requests that this applet be resized.                
                <param>
                    width    the new requested width for the applet.                    
                </param>
                <param>
                    height   the new requested height for the applet.                    
                </param>
            </javadoc>
            <method name="resize" type="void" line="165">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="d" type="Dimension" line="166"/>
                <scope line="167">
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="174">
                Requests that this applet be resized.                
                <param>
                    d   an object giving the new width and height.                    
                </param>
            </javadoc>
            <method name="resize" type="void" line="178">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="181">
                Indicates if this container is a validate root.
                  &lt;p&gt;{@code Applet} objects are the validate roots, and, therefore, they
                  override this method to return {@code true}.                
                <return>
                    {@code true}                    
                </return>
                <since>
                    1.7                    
                </since>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="189"/>
            <javadoc line="192">
                Requests that the argument string be displayed in the
                  &quot;status window&quot;. Many browsers and applet viewers
                  provide such a window, where the application can inform users of
                  its current state.                
                <param>
                    msg   a string to display in the status window.                    
                </param>
            </javadoc>
            <method name="showStatus" type="void" line="199">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="202">
                Returns an &lt;code&gt;Image&lt;/code&gt; object that can then be painted on
                  the screen. The &lt;code&gt;url&lt;/code&gt; that is passed as an argument
                  must specify an absolute URL.
                  &lt;p&gt;
                  This method always returns immediately, whether or not the image
                  exists. When this applet attempts to draw the image on the screen,
                  the data will be loaded. The graphics primitives that draw the
                  image will incrementally paint on the screen.                
                <param>
                    url   an absolute URL giving the location of the image.                    
                </param>
                <return>
                    the image at the specified URL.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
            </javadoc>
            <method name="getImage" type="Image" line="215">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="218">
                Returns an &lt;code&gt;Image&lt;/code&gt; object that can then be painted on
                  the screen. The &lt;code&gt;url&lt;/code&gt; argument must specify an absolute
                  URL. The &lt;code&gt;name&lt;/code&gt; argument is a specifier that is
                  relative to the &lt;code&gt;url&lt;/code&gt; argument.
                  &lt;p&gt;
                  This method always returns immediately, whether or not the image
                  exists. When this applet attempts to draw the image on the screen,
                  the data will be loaded. The graphics primitives that draw the
                  image will incrementally paint on the screen.                
                <param>
                    url    an absolute URL giving the base location of the image.                    
                </param>
                <param>
                    name   the location of the image, relative to the
                      &lt;code&gt;url&lt;/code&gt; argument.                    
                </param>
                <return>
                    the image at the specified URL.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
            </javadoc>
            <method name="getImage" type="Image" line="234">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
            </method>
            <javadoc line="242">
                Get an audio clip from the given URL.                
                <param>
                    url points to the audio clip                    
                </param>
                <return>
                    the audio clip at the specified URL.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="newAudioClip" type="AudioClip" line="248">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="251">
                Returns the &lt;code&gt;AudioClip&lt;/code&gt; object specified by the
                  &lt;code&gt;URL&lt;/code&gt; argument.
                  &lt;p&gt;
                  This method always returns immediately, whether or not the audio
                  clip exists. When this applet attempts to play the audio clip, the
                  data will be loaded.                
                <param>
                    url  an absolute URL giving the location of the audio clip.                    
                </param>
                <return>
                    the audio clip at the specified URL.                    
                </return>
                <see>
                    java.applet.AudioClip                    
                </see>
            </javadoc>
            <method name="getAudioClip" type="AudioClip" line="262">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="265">
                Returns the &lt;code&gt;AudioClip&lt;/code&gt; object specified by the
                  &lt;code&gt;URL&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments.
                  &lt;p&gt;
                  This method always returns immediately, whether or not the audio
                  clip exists. When this applet attempts to play the audio clip, the
                  data will be loaded.                
                <param>
                    url    an absolute URL giving the base location of the
                      audio clip.                    
                </param>
                <param>
                    name   the location of the audio clip, relative to the
                      &lt;code&gt;url&lt;/code&gt; argument.                    
                </param>
                <return>
                    the audio clip at the specified URL.                    
                </return>
                <see>
                    java.applet.AudioClip                    
                </see>
            </javadoc>
            <method name="getAudioClip" type="AudioClip" line="279">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="280"/>
                <scope line="283"/>
            </method>
            <javadoc line="287">
                Returns information about this applet. An applet should override
                  this method to return a &lt;code&gt;String&lt;/code&gt; containing information
                  about the author, version, and copyright of the applet.
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string containing information about the author, version, and
                      copyright of the applet.                    
                </return>
            </javadoc>
            <method name="getAppletInfo" type="String" line="297"/>
            <javadoc line="300">
                Gets the locale of the applet. It allows the applet
                  to maintain its own locale separated from the locale
                  of the browser or appletviewer.                
                <return>
                    the locale of the applet; if no locale has
                      been set, the default locale is returned.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLocale" type="Locale" line="308">
                <declaration name="locale" type="Locale" line="309"/>
                <scope line="310"/>
            </method>
            <javadoc line="315">
                Returns information about the parameters that are understood by
                  this applet. An applet should override this method to return an
                  array of &lt;code&gt;Strings&lt;/code&gt; describing these parameters.
                  &lt;p&gt;
                  Each element of the array should be a set of three
                  &lt;code&gt;Strings&lt;/code&gt; containing the name, the type, and a
                  description. For example:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  String pinfo[][] = {
                  {&quot;fps&quot;,    &quot;1-10&quot;,    &quot;frames per second&quot;},
                  {&quot;repeat&quot;, &quot;boolean&quot;, &quot;repeat image loop&quot;},
                  {&quot;imgs&quot;,   &quot;url&quot;,     &quot;images directory&quot;}
                  };
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    an array describing the parameters this applet looks for.                    
                </return>
            </javadoc>
            <method name="getParameterInfo" type="String[][]" line="335"/>
            <javadoc line="338">
                Plays the audio clip at the specified absolute URL. Nothing
                  happens if the audio clip cannot be found.                
                <param>
                    url   an absolute URL giving the location of the audio clip.                    
                </param>
            </javadoc>
            <method name="play" type="void" line="343">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="clip" type="AudioClip" line="344"/>
                <scope line="345"/>
            </method>
            <javadoc line="349">
                Plays the audio clip given the URL and a specifier that is
                  relative to it. Nothing happens if the audio clip cannot be found.                
                <param>
                    url    an absolute URL giving the base location of the
                      audio clip.                    
                </param>
                <param>
                    name   the location of the audio clip, relative to the
                      &lt;code&gt;url&lt;/code&gt; argument.                    
                </param>
            </javadoc>
            <method name="play" type="void" line="357">
                <params>
                    <param name="url" type="URL"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="clip" type="AudioClip" line="358"/>
                <scope line="359"/>
            </method>
            <javadoc line="363">
                Called by the browser or applet viewer to inform
                  this applet that it has been loaded into the system. It is always
                  called before the first time that the &lt;code&gt;start&lt;/code&gt; method is
                  called.
                  &lt;p&gt;
                  A subclass of &lt;code&gt;Applet&lt;/code&gt; should override this method if
                  it has initialization to perform. For example, an applet with
                  threads would use the &lt;code&gt;init&lt;/code&gt; method to create the
                  threads and the &lt;code&gt;destroy&lt;/code&gt; method to kill them.
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class does nothing.                
                <see>
                    java.applet.Applet#destroy()                    
                </see>
                <see>
                    java.applet.Applet#start()                    
                </see>
                <see>
                    java.applet.Applet#stop()                    
                </see>
            </javadoc>
            <method name="init" type="void" line="380"/>
            <javadoc line="382">
                Called by the browser or applet viewer to inform
                  this applet that it should start its execution. It is called after
                  the &lt;code&gt;init&lt;/code&gt; method and each time the applet is revisited
                  in a Web page.
                  &lt;p&gt;
                  A subclass of &lt;code&gt;Applet&lt;/code&gt; should override this method if
                  it has any operation that it wants to perform each time the Web
                  page containing it is visited. For example, an applet with
                  animation might want to use the &lt;code&gt;start&lt;/code&gt; method to
                  resume animation, and the &lt;code&gt;stop&lt;/code&gt; method to suspend the
                  animation.
                  &lt;p&gt;
                  Note: some methods, such as &lt;code&gt;getLocationOnScreen&lt;/code&gt;, can only
                  provide meaningful results if the applet is showing.  Because
                  &lt;code&gt;isShowing&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; when the applet&apos;s
                  &lt;code&gt;start&lt;/code&gt; is first called, methods requiring
                  &lt;code&gt;isShowing&lt;/code&gt; to return &lt;code&gt;true&lt;/code&gt; should be called from
                  a &lt;code&gt;ComponentListener&lt;/code&gt;.
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class does nothing.                
                <see>
                    java.applet.Applet#destroy()                    
                </see>
                <see>
                    java.applet.Applet#init()                    
                </see>
                <see>
                    java.applet.Applet#stop()                    
                </see>
                <see>
                    java.awt.Component#isShowing()                    
                </see>
                <see>
                    java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)                    
                </see>
            </javadoc>
            <method name="start" type="void" line="410"/>
            <javadoc line="412">
                Called by the browser or applet viewer to inform
                  this applet that it should stop its execution. It is called when
                  the Web page that contains this applet has been replaced by
                  another page, and also just before the applet is to be destroyed.
                  &lt;p&gt;
                  A subclass of &lt;code&gt;Applet&lt;/code&gt; should override this method if
                  it has any operation that it wants to perform each time the Web
                  page containing it is no longer visible. For example, an applet
                  with animation might want to use the &lt;code&gt;start&lt;/code&gt; method to
                  resume animation, and the &lt;code&gt;stop&lt;/code&gt; method to suspend the
                  animation.
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class does nothing.                
                <see>
                    java.applet.Applet#destroy()                    
                </see>
                <see>
                    java.applet.Applet#init()                    
                </see>
            </javadoc>
            <method name="stop" type="void" line="430"/>
            <javadoc line="432">
                Called by the browser or applet viewer to inform
                  this applet that it is being reclaimed and that it should destroy
                  any resources that it has allocated. The &lt;code&gt;stop&lt;/code&gt; method
                  will always be called before &lt;code&gt;destroy&lt;/code&gt;.
                  &lt;p&gt;
                  A subclass of &lt;code&gt;Applet&lt;/code&gt; should override this method if
                  it has any operation that it wants to perform before it is
                  destroyed. For example, an applet with threads would use the
                  &lt;code&gt;init&lt;/code&gt; method to create the threads and the
                  &lt;code&gt;destroy&lt;/code&gt; method to kill them.
                  &lt;p&gt;
                  The implementation of this method provided by the
                  &lt;code&gt;Applet&lt;/code&gt; class does nothing.                
                <see>
                    java.applet.Applet#init()                    
                </see>
                <see>
                    java.applet.Applet#start()                    
                </see>
                <see>
                    java.applet.Applet#stop()                    
                </see>
            </javadoc>
            <method name="destroy" type="void" line="450"/>
            <declaration name="accessibleContext" type="AccessibleContext" line="452"/>
            <javadoc line="453">
                Gets the AccessibleContext associated with this Applet.
                  For applets, the AccessibleContext takes the form of an
                  AccessibleApplet.
                  A new AccessibleApplet instance is created if necessary.                
                <return>
                    an AccessibleApplet that serves as the
                      AccessibleContext of this Applet                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="462">
                <scope line="463"/>
            </method>
            <class name="AccessibleApplet" line="468">
                <extends class="AccessibleAWTPanel"/>
                <javadoc line="468">
                    This class implements accessibility support for the
                      &lt;code&gt;Applet&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to applet user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="475"/>
                <javadoc line="476">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="481"/>
                <javadoc line="484">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="490">
                    <declaration name="states" type="AccessibleStateSet" line="491"/>
                </method>
            </class>
        </class>
    </source>