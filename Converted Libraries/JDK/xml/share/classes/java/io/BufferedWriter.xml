<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="BufferedWriter" line="2">
            <extends class="Writer"/>
            <javadoc line="2">
                Writes text to a character-output stream, buffering characters so as to
                  provide for the efficient writing of single characters, arrays, and strings.
                  &lt;p&gt; The buffer size may be specified, or the default size may be accepted.
                  The default is large enough for most purposes.
                  &lt;p&gt; A newLine() method is provided, which uses the platform&apos;s own notion of
                  line separator as defined by the system property &lt;tt&gt;line.separator&lt;/tt&gt;.
                  Not all platforms use the newline character (&apos;\n&apos;) to terminate lines.
                  Calling this method to terminate each output line is therefore preferred to
                  writing a newline character directly.
                  &lt;p&gt; In general, a Writer sends its output immediately to the underlying
                  character or byte stream.  Unless prompt output is required, it is advisable
                  to wrap a BufferedWriter around any Writer whose write() operations may be
                  costly, such as FileWriters and OutputStreamWriters.  For example,
                  &lt;pre&gt;
                  PrintWriter out
                  = new PrintWriter(new BufferedWriter(new FileWriter(&quot;foo.out&quot;)));
                  &lt;/pre&gt;
                  will buffer the PrintWriter&apos;s output to the file.  Without buffering, each
                  invocation of a print() method would cause characters to be converted into
                  bytes that would then be written immediately to the file, which can be very
                  inefficient.                
                <see>
                    PrintWriter                    
                </see>
                <see>
                    FileWriter                    
                </see>
                <see>
                    OutputStreamWriter                    
                </see>
                <see>
                    java.nio.file.Files#newBufferedWriter                    
                </see>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="out" type="Writer" line="32"/>
            <declaration name="cb" type="char" line="33"/>
            <declaration name="nChars" type="int" line="34"/>
            <declaration name="defaultCharBufferSize" type="int" line="35"/>
            <declaration name="lineSeparator" type="String" line="36"/>
            <javadoc line="36">
                Line separator string.  This is the value of the line.separator
                  property at the moment that the stream was created.                
            </javadoc>
            <javadoc line="41">
                Creates a buffered character-output stream that uses a default-sized
                  output buffer.                
                <param>
                    out  A Writer                    
                </param>
            </javadoc>
            <method name="BufferedWriter" type="constructor" line="46">
                <params>
                    <param name="out" type="Writer"/>
                </params>
            </method>
            <javadoc line="49">
                Creates a new buffered character-output stream that uses an output
                  buffer of the given size.                
                <param>
                    out  A Writer                    
                </param>
                <param>
                    sz   Output-buffer size, a positive integer                    
                </param>
                <exception>
                    IllegalArgumentException  If sz is <= 0                    
                </exception>
            </javadoc>
            <method name="BufferedWriter" type="constructor" line="56">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Checks to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="68"/>
            <javadoc line="71">
                Flushes the output buffer to the underlying character stream, without
                  flushing the stream itself.  This method is non-private only so that it
                  may be invoked by PrintStream.                
            </javadoc>
            <method name="flushBuffer" type="void" line="76">
                <scope line="77"/>
            </method>
            <javadoc line="84">
                Writes a single character.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="88">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="89"/>
            </method>
            <javadoc line="95">
                Our own little min method, to avoid loading java.lang.Math if we&apos;ve run
                  out of file descriptors and we&apos;re trying to print a stack trace.                
            </javadoc>
            <method name="min" type="int" line="99">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Writes a portion of an array of characters.
                  &lt;p&gt; Ordinarily this method stores characters from the given array into
                  this stream&apos;s buffer, flushing the buffer to the underlying stream as
                  needed.  If the requested length is at least as large as the buffer,
                  however, then this method will flush the buffer and write the characters
                  directly to the underlying stream.  Thus redundant
                  &lt;code&gt;BufferedWriter&lt;/code&gt;s will not copy data unnecessarily.                
                <param>
                    cbuf  A character array                    
                </param>
                <param>
                    off   Offset from which to start reading characters                    
                </param>
                <param>
                    len   Number of characters to write                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="116">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="117">
                    <scope line="119"/>
                    <scope line="122"/>
                    <scope line="125"/>
                    <declaration name="b" type="int" line="130"/>
                    <scope line="131">
                        <declaration name="d" type="int" line="132"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="140">
                Writes a portion of a String.
                  &lt;p&gt; If the value of the &lt;tt&gt;len&lt;/tt&gt; parameter is negative then no
                  characters are written.  This is contrary to the specification of this
                  method in the {@linkplain java.io.Writer#write(java.lang.String,int,int)superclass}, which requires that an {@link IndexOutOfBoundsException} be
                  thrown.                
                <param>
                    s     String to be written                    
                </param>
                <param>
                    off   Offset from which to start reading characters                    
                </param>
                <param>
                    len   Number of characters to be written                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="151">
                <params>
                    <param name="s" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="152">
                    <declaration name="b" type="int" line="154"/>
                    <scope line="155">
                        <declaration name="d" type="int" line="156"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="164">
                Writes a line separator.  The line separator string is defined by the
                  system property &lt;tt&gt;line.separator&lt;/tt&gt;, and is not necessarily a single
                  newline (&apos;\n&apos;) character.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="newLine" type="void" line="170"/>
            <javadoc line="173">
                Flushes the stream.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="flush" type="void" line="177">
                <scope line="178"/>
            </method>
            <method name="close" type="void" line="183">
                <scope line="184">
                    <scope line="185"/>
                    <scope line="188"/>
                    <scope line="191"/>
                </scope>
            </method>
        </class>
    </source>