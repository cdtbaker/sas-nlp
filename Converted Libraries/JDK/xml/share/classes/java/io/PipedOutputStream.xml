<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.io"/>
        <class name="PipedOutputStream" line="30">
            <extends class="OutputStream"/>
            <comment line="50">
                REMIND: identification of the read and write sides needs to be
                more sophisticated.  Either using thread groups (but what about
                pipes within a thread?) or using finalization (but it may be a                
            </comment>
            <javadoc line="30">
                A piped output stream can be connected to a piped input stream
                  to create a communications pipe. The piped output stream is the
                  sending end of the pipe. Typically, data is written to a
                  &lt;code&gt;PipedOutputStream&lt;/code&gt; object by one thread and data is
                  read from the connected &lt;code&gt;PipedInputStream&lt;/code&gt; by some
                  other thread. Attempting to use both objects from a single thread
                  is not recommended as it may deadlock the thread.
                  The pipe is said to be &lt;a name=BROKEN&gt; &lt;i&gt;broken&lt;/i&gt; &lt;/a&gt; if a
                  thread that was reading data bytes from the connected piped input
                  stream is no longer alive.                
                <author>
                    James Gosling                    
                </author>
                <see>
                    java.io.PipedInputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="sink" type="PipedInputStream" line="53"/>
            <javadoc line="55">
                Creates a piped output stream connected to the specified piped
                  input stream. Data bytes written to this stream will then be
                  available as input from &lt;code&gt;snk&lt;/code&gt;.                
                <param>
                    snk   The piped input stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="PipedOutputStream" type="constructor" line="63">
                <params>
                    <param name="snk" type="PipedInputStream"/>
                </params>
            </method>
            <javadoc line="67">
                Creates a piped output stream that is not yet connected to a
                  piped input stream. It must be connected to a piped input stream,
                  either by the receiver or the sender, before being used.                
                <see>
                    java.io.PipedInputStream#connect(java.io.PipedOutputStream)                    
                </see>
                <see>
                    java.io.PipedOutputStream#connect(java.io.PipedInputStream)                    
                </see>
            </javadoc>
            <method name="PipedOutputStream" type="constructor" line="75"/>
            <javadoc line="78">
                Connects this piped output stream to a receiver. If this object
                  is already connected to some other piped input stream, an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;snk&lt;/code&gt; is an unconnected piped input stream and
                  &lt;code&gt;src&lt;/code&gt; is an unconnected piped output stream, they may
                  be connected by either the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  src.connect(snk)&lt;/pre&gt;&lt;/blockquote&gt;
                  or the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  snk.connect(src)&lt;/pre&gt;&lt;/blockquote&gt;
                  The two calls have the same effect.                
                <param>
                    snk   the piped input stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="96">
                <params>
                    <param name="snk" type="PipedInputStream"/>
                </params>
                <scope line="97"/>
                <scope line="99"/>
            </method>
            <javadoc line="108">
                Writes the specified &lt;code&gt;byte&lt;/code&gt; to the piped output stream.
                  &lt;p&gt;
                  Implements the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt;.                
                <param>
                    b   the &lt;code&gt;byte&lt;/code&gt; to be written.                    
                </param>
                <exception>
                    IOException if the pipe is &lt;a href=#BROKEN&gt; broken&lt;/a&gt;,{@link #connect(java.io.PipedInputStream) unconnected},
                      closed, or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="118">
                <params>
                    <param name="b" type="int"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this piped output stream.
                  This method blocks until all the bytes are written to the output
                  stream.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException if the pipe is &lt;a href=#BROKEN&gt; broken&lt;/a&gt;,{@link #connect(java.io.PipedInputStream) unconnected},
                      closed, or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="138">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="139"/>
                <scope line="141"/>
                <scope line="144"/>
                <scope line="146"/>
            </method>
            <javadoc line="152">
                Flushes this output stream and forces any buffered output bytes
                  to be written out.
                  This will notify any readers that bytes are waiting in the pipe.                
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="flush" type="void" line="159">
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="167">
                Closes this piped output stream and releases any system resources
                  associated with this stream. This stream may no longer be used for
                  writing bytes.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="174">
                <scope line="175"/>
            </method>
        </class>
    </source>