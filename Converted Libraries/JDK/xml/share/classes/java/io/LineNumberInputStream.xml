<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="LineNumberInputStream" line="28">
            <extends class="FilterInputStream"/>
            <javadoc line="28">
                This class is an input stream filter that provides the added
                  functionality of keeping track of the current line number.
                  &lt;p&gt;
                  A line is a sequence of bytes ending with a carriage return
                  character (&lt;code&gt;&apos;&amp;#92;r&apos;&lt;/code&gt;), a newline character
                  (&lt;code&gt;&apos;&amp;#92;n&apos;&lt;/code&gt;), or a carriage return character followed
                  immediately by a linefeed character. In all three cases, the line
                  terminating character(s) are returned as a single newline character.
                  &lt;p&gt;
                  The line number begins at &lt;code&gt;0&lt;/code&gt;, and is incremented by
                  &lt;code&gt;1&lt;/code&gt; when a &lt;code&gt;read&lt;/code&gt; returns a newline character.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.LineNumberReader                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <deprecated>
                    This class incorrectly assumes that bytes adequately represent
                      characters.  As of JDK&nbsp;1.1, the preferred way to operate on
                      character streams is via the new character-stream classes, which
                      include a class for counting line numbers.                    
                </deprecated>
            </javadoc>
            <declaration name="pushBack" type="int" line="52"/>
            <declaration name="lineNumber" type="int" line="53"/>
            <declaration name="markLineNumber" type="int" line="54"/>
            <declaration name="markPushBack" type="int" line="55"/>
            <javadoc line="57">
                Constructs a newline number input stream that reads its input
                  from the specified input stream.                
                <param>
                    in   the underlying input stream.                    
                </param>
            </javadoc>
            <method name="LineNumberInputStream" type="constructor" line="63">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="67">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data
                  is available, the end of the stream is detected, or an exception
                  is thrown.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of
                  &lt;code&gt;LineNumberInputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt;
                  method of the underlying input stream. It checks for carriage
                  returns and newline characters in the input, and modifies the
                  current line number as appropriate. A carriage-return character or
                  a carriage return followed by a newline character are both
                  converted into a single newline character.                
                <return>
                    the next byte of data, or <code>-1</code> if the end of this
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.LineNumberInputStream#getLineNumber()                    
                </see>
            </javadoc>
            <method name="read" type="int" line="90">
                <declaration name="c" type="int" line="91"/>
                <scope line="93"/>
                <scope line="95"/>
                <scope line="102"/>
            </method>
            <javadoc line="112">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes. This method blocks until some input is available.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of
                  &lt;code&gt;LineNumberInputStream&lt;/code&gt; repeatedly calls the
                  &lt;code&gt;read&lt;/code&gt; method of zero arguments to fill in the byte array.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      this stream has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.LineNumberInputStream#read()                    
                </see>
            </javadoc>
            <method name="read" type="int" line="129">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="135"/>
                <declaration name="c" type="int" line="139"/>
                <scope line="140"/>
                <declaration name="i" type="int" line="145"/>
                <scope line="146">
                    <scope line="147">
                        <scope line="149"/>
                        <scope line="152"/>
                    </scope>
                </scope>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this
                  input stream. The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of
                  reasons, end up skipping over some smaller number of bytes,
                  possibly &lt;code&gt;0&lt;/code&gt;. The actual number of bytes skipped is
                  returned.  If &lt;code&gt;n&lt;/code&gt; is negative, no bytes are skipped.
                  &lt;p&gt;
                  The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; creates
                  a byte array and then repeatedly reads into it until
                  &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has
                  been reached.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="skip" type="long" line="178">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="chunk" type="int" line="179"/>
                <declaration name="remaining" type="long" line="180"/>
                <declaration name="data" type="byte" line="181"/>
                <declaration name="nr" type="int" line="182"/>
                <scope line="184"/>
                <scope line="189">
                    <scope line="191"/>
                </scope>
            </method>
            <javadoc line="200">
                Sets the line number to the specified argument.                
                <param>
                    lineNumber   the new line number.                    
                </param>
                <see>
                    #getLineNumber                    
                </see>
            </javadoc>
            <method name="setLineNumber" type="void" line="206">
                <params>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Returns the current line number.                
                <return>
                    the current line number.                    
                </return>
                <see>
                    #setLineNumber                    
                </see>
            </javadoc>
            <method name="getLineNumber" type="int" line="216"/>
            <javadoc line="221">
                Returns the number of bytes that can be read from this input
                  stream without blocking.
                  &lt;p&gt;
                  Note that if the underlying input stream is able to supply
                  &lt;i&gt;k&lt;/i&gt; input characters without blocking, the
                  &lt;code&gt;LineNumberInputStream&lt;/code&gt; can guarantee only to provide
                  &lt;i&gt;k&lt;/i&gt;/2 characters without blocking, because the
                  &lt;i&gt;k&lt;/i&gt; characters from the underlying input stream might
                  consist of &lt;i&gt;k&lt;/i&gt;/2 pairs of &lt;code&gt;&apos;&amp;#92;r&apos;&lt;/code&gt; and
                  &lt;code&gt;&apos;&amp;#92;n&apos;&lt;/code&gt;, which are converted to just
                  &lt;i&gt;k&lt;/i&gt;/2 &lt;code&gt;&apos;&amp;#92;n&apos;&lt;/code&gt; characters.                
                <return>
                    the number of bytes that can be read from this input stream
                      without blocking.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="available" type="int" line="239"/>
            <javadoc line="243">
                Marks the current position in this input stream. A subsequent
                  call to the &lt;code&gt;reset&lt;/code&gt; method repositions this stream at
                  the last marked position so that subsequent reads re-read the same bytes.
                  &lt;p&gt;
                  The &lt;code&gt;mark&lt;/code&gt; method of
                  &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line
                  number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt;
                  method of the underlying input stream.                
                <param>
                    readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.LineNumberInputStream#reset()                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="258">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="264">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                  &lt;p&gt;
                  The &lt;code&gt;reset&lt;/code&gt; method of
                  &lt;code&gt;LineNumberInputStream&lt;/code&gt; resets the line number to be
                  the line number at the time the &lt;code&gt;mark&lt;/code&gt; method was
                  called, and then calls the &lt;code&gt;reset&lt;/code&gt; method of the
                  underlying input stream.
                  &lt;p&gt;
                  Stream marks are intended to be used in
                  situations where you need to read ahead a little to see what&apos;s in
                  the stream. Often this is most easily done by invoking some
                  general parser. If the stream is of the type handled by the
                  parser, it just chugs along happily. If the stream is not of
                  that type, the parser should toss an exception when it fails,
                  which, if it happens within readlimit bytes, allows the outer
                  code to reset the stream and try another parser.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.LineNumberInputStream#mark(int)                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="287"/>
        </class>
    </source>