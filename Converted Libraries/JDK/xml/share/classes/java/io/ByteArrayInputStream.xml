<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="ByteArrayInputStream" line="28">
            <extends class="InputStream"/>
            <javadoc line="28">
                A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains
                  an internal buffer that contains bytes that
                  may be read from the stream. An internal
                  counter keeps track of the next byte to
                  be supplied by the &lt;code&gt;read&lt;/code&gt; method.
                  &lt;p&gt;
                  Closing a &lt;tt&gt;ByteArrayInputStream&lt;/tt&gt; has no effect. The methods in
                  this class can be called after the stream has been closed without
                  generating an &lt;tt&gt;IOException&lt;/tt&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.StringBufferInputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="buf" type="byte" line="46"/>
            <javadoc line="46">
                An array of bytes that was provided
                  by the creator of the stream. Elements &lt;code&gt;buf[0]&lt;/code&gt;
                  through &lt;code&gt;buf[count-1]&lt;/code&gt; are the
                  only bytes that can ever be read from the
                  stream;  element &lt;code&gt;buf[pos]&lt;/code&gt; is
                  the next byte to be read.                
            </javadoc>
            <declaration name="pos" type="int" line="56"/>
            <javadoc line="56">
                The index of the next character to read from the input stream buffer.
                  This value should always be nonnegative
                  and not larger than the value of &lt;code&gt;count&lt;/code&gt;.
                  The next byte to be read from the input stream buffer
                  will be &lt;code&gt;buf[pos]&lt;/code&gt;.                
            </javadoc>
            <declaration name="mark" type="int" line="65"/>
            <javadoc line="65">
                The currently marked position in the stream.
                  ByteArrayInputStream objects are marked at position zero by
                  default when constructed.  They may be marked at another
                  position within the buffer by the &lt;code&gt;mark()&lt;/code&gt; method.
                  The current buffer position is set to this point by the
                  &lt;code&gt;reset()&lt;/code&gt; method.
                  &lt;p&gt;
                  If no mark has been set, then the value of mark is the offset
                  passed to the constructor (or 0 if the offset was not supplied).                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="count" type="int" line="80"/>
            <javadoc line="80">
                The index one greater than the last valid character in the input
                  stream buffer.
                  This value should always be nonnegative
                  and not larger than the length of &lt;code&gt;buf&lt;/code&gt;.
                  It  is one greater than the position of
                  the last byte within &lt;code&gt;buf&lt;/code&gt; that
                  can ever be read  from the input stream buffer.                
            </javadoc>
            <javadoc line="91">
                Creates a &lt;code&gt;ByteArrayInputStream&lt;/code&gt;
                  so that it  uses &lt;code&gt;buf&lt;/code&gt; as its
                  buffer array.
                  The buffer array is not copied.
                  The initial value of &lt;code&gt;pos&lt;/code&gt;
                  is &lt;code&gt;0&lt;/code&gt; and the initial value
                  of  &lt;code&gt;count&lt;/code&gt; is the length of
                  &lt;code&gt;buf&lt;/code&gt;.                
                <param>
                    buf   the input buffer.                    
                </param>
            </javadoc>
            <method name="ByteArrayInputStream" type="constructor" line="103">
                <params>
                    <param name="buf" type="byte"/>
                </params>
            </method>
            <javadoc line="109">
                Creates &lt;code&gt;ByteArrayInputStream&lt;/code&gt;
                  that uses &lt;code&gt;buf&lt;/code&gt; as its
                  buffer array. The initial value of &lt;code&gt;pos&lt;/code&gt;
                  is &lt;code&gt;offset&lt;/code&gt; and the initial value
                  of &lt;code&gt;count&lt;/code&gt; is the minimum of &lt;code&gt;offset+length&lt;/code&gt;
                  and &lt;code&gt;buf.length&lt;/code&gt;.
                  The buffer array is not copied. The buffer&apos;s mark is
                  set to the specified offset.                
                <param>
                    buf      the input buffer.                    
                </param>
                <param>
                    offset   the offset in the buffer of the first byte to read.                    
                </param>
                <param>
                    length   the maximum number of bytes to read from the buffer.                    
                </param>
            </javadoc>
            <method name="ByteArrayInputStream" type="constructor" line="123">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="130">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt;
                  This &lt;code&gt;read&lt;/code&gt; method
                  cannot block.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream has been reached.                    
                </return>
            </javadoc>
            <method name="read" type="int" line="143"/>
            <javadoc line="147">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data into an array of bytes
                  from this input stream.
                  If &lt;code&gt;pos&lt;/code&gt; equals &lt;code&gt;count&lt;/code&gt;,
                  then &lt;code&gt;-1&lt;/code&gt; is returned to indicate
                  end of file. Otherwise, the  number &lt;code&gt;k&lt;/code&gt;
                  of bytes read is equal to the smaller of
                  &lt;code&gt;len&lt;/code&gt; and &lt;code&gt;count-pos&lt;/code&gt;.
                  If &lt;code&gt;k&lt;/code&gt; is positive, then bytes
                  &lt;code&gt;buf[pos]&lt;/code&gt; through &lt;code&gt;buf[pos+k-1]&lt;/code&gt;
                  are copied into &lt;code&gt;b[off]&lt;/code&gt;  through
                  &lt;code&gt;b[off+k-1]&lt;/code&gt; in the manner performed
                  by &lt;code&gt;System.arraycopy&lt;/code&gt;. The
                  value &lt;code&gt;k&lt;/code&gt; is added into &lt;code&gt;pos&lt;/code&gt;
                  and &lt;code&gt;k&lt;/code&gt; is returned.
                  &lt;p&gt;
                  This &lt;code&gt;read&lt;/code&gt; method cannot block.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array &lt;code&gt;b&lt;/code&gt;                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;b.length - off&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="176">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="177"/>
                <scope line="179"/>
                <scope line="183"/>
                <declaration name="avail" type="int" line="187"/>
                <scope line="188"/>
                <scope line="191"/>
            </method>
            <javadoc line="199">
                Skips &lt;code&gt;n&lt;/code&gt; bytes of input from this input stream. Fewer
                  bytes might be skipped if the end of the input stream is reached.
                  The actual number &lt;code&gt;k&lt;/code&gt;
                  of bytes to be skipped is equal to the smaller
                  of &lt;code&gt;n&lt;/code&gt; and  &lt;code&gt;count-pos&lt;/code&gt;.
                  The value &lt;code&gt;k&lt;/code&gt; is added into &lt;code&gt;pos&lt;/code&gt;
                  and &lt;code&gt;k&lt;/code&gt; is returned.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
            </javadoc>
            <method name="skip" type="long" line="211">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="k" type="long" line="212"/>
                <scope line="213"/>
            </method>
            <javadoc line="221">
                Returns the number of remaining bytes that can be read (or skipped over)
                  from this input stream.
                  &lt;p&gt;
                  The value returned is &lt;code&gt;count&amp;nbsp;- pos&lt;/code&gt;,
                  which is the number of bytes remaining to be read from the input buffer.                
                <return>
                    the number of remaining bytes that can be read (or skipped
                      over) from this input stream without blocking.                    
                </return>
            </javadoc>
            <method name="available" type="int" line="231"/>
            <javadoc line="235">
                Tests if this &lt;code&gt;InputStream&lt;/code&gt; supports mark/reset. The
                  &lt;code&gt;markSupported&lt;/code&gt; method of &lt;code&gt;ByteArrayInputStream&lt;/code&gt;
                  always returns &lt;code&gt;true&lt;/code&gt;.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="markSupported" type="boolean" line="242"/>
            <javadoc line="246">
                Set the current marked position in the stream.
                  ByteArrayInputStream objects are marked at position zero by
                  default when constructed.  They may be marked at another
                  position within the buffer by this method.
                  &lt;p&gt;
                  If no mark has been set, then the value of the mark is the
                  offset passed to the constructor (or 0 if the offset was not
                  supplied).
                  &lt;p&gt; Note: The &lt;code&gt;readAheadLimit&lt;/code&gt; for this class
                  has no meaning.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="mark" type="void" line="261">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                Resets the buffer to the marked position.  The marked position
                  is 0 unless another position was marked or an offset was specified
                  in the constructor.                
            </javadoc>
            <method name="reset" type="void" line="270"/>
            <javadoc line="274">
                Closing a &lt;tt&gt;ByteArrayInputStream&lt;/tt&gt; has no effect. The methods in
                  this class can be called after the stream has been closed without
                  generating an &lt;tt&gt;IOException&lt;/tt&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="close" type="void" line="280"/>
        </class>
    </source>