<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.io.InputStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <class name="SequenceInputStream" line="32">
            <extends class="InputStream"/>
            <javadoc line="32">
                A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents
                  the logical concatenation of other input
                  streams. It starts out with an ordered
                  collection of input streams and reads from
                  the first one until end of file is reached,
                  whereupon it reads from the second one,
                  and so on, until end of file is reached
                  on the last of the contained input streams.                
                <author>
                    Author van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="e" type="Enumeration" line="47"/>
            <declaration name="in" type="InputStream" line="48"/>
            <javadoc line="50">
                Initializes a newly created &lt;code&gt;SequenceInputStream&lt;/code&gt;
                  by remembering the argument, which must
                  be an &lt;code&gt;Enumeration&lt;/code&gt;  that produces
                  objects whose run-time type is &lt;code&gt;InputStream&lt;/code&gt;.
                  The input streams that are  produced by
                  the enumeration will be read, in order,
                  to provide the bytes to be read  from this
                  &lt;code&gt;SequenceInputStream&lt;/code&gt;. After
                  each input stream from the enumeration
                  is exhausted, it is closed by calling its
                  &lt;code&gt;close&lt;/code&gt; method.                
                <param>
                    e   an enumeration of input streams.                    
                </param>
                <see>
                    java.util.Enumeration                    
                </see>
            </javadoc>
            <method name="SequenceInputStream" type="constructor" line="66">
                <params>
                    <param name="e" type="Enumeration<? extends InputStream>"/>
                </params>
                <comment line="72">
                    This should never happen                    
                </comment>
                <scope line="68"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                Initializes a newly
                  created &lt;code&gt;SequenceInputStream&lt;/code&gt;
                  by remembering the two arguments, which
                  will be read in order, first &lt;code&gt;s1&lt;/code&gt;
                  and then &lt;code&gt;s2&lt;/code&gt;, to provide the
                  bytes to be read from this &lt;code&gt;SequenceInputStream&lt;/code&gt;.                
                <param>
                    s1   the first input stream to read.                    
                </param>
                <param>
                    s2   the second input stream to read.                    
                </param>
            </javadoc>
            <method name="SequenceInputStream" type="constructor" line="87">
                <params>
                    <param name="s1" type="InputStream"/>
                    <param name="s2" type="InputStream"/>
                </params>
                <comment line="97">
                    This should never happen                    
                </comment>
                <declaration name="v" type="Vector" line="88"/>
                <scope line="93"/>
                <scope line="95"/>
            </method>
            <javadoc line="101">
                Continues reading in the next stream if an EOF is reached.                
            </javadoc>
            <method name="nextStream" type="void" line="104">
                <scope line="105"/>
                <scope line="109"/>
            </method>
            <javadoc line="118">
                Returns an estimate of the number of bytes that can be read (or
                  skipped over) from the current underlying input stream without
                  blocking by the next invocation of a method for the current
                  underlying input stream. The next invocation might be
                  the same thread or another thread.  A single read or skip of this
                  many bytes will not block, but may read or skip fewer bytes.
                  &lt;p&gt;
                  This method simply calls {@code available} of the current underlying
                  input stream and returns the result.                
                <return>
                    an estimate of the number of bytes that can be read (or
                      skipped over) from the current underlying input stream
                      without blocking or {@code 0} if this input stream
                      has been closed by invoking its {@link #close()} method                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="available" type="int" line="137">
                <comment line="140">
                    no way to signal EOF from available()                    
                </comment>
                <scope line="138"/>
            </method>
            <javadoc line="144">
                Reads the next byte of data from this input stream. The byte is
                  returned as an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0&lt;/code&gt; to
                  &lt;code&gt;255&lt;/code&gt;. If no byte is available because the end of the
                  stream has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned.
                  This method blocks until input data is available, the end of the
                  stream is detected, or an exception is thrown.
                  &lt;p&gt;
                  This method
                  tries to read one character from the current substream. If it
                  reaches the end of the stream, it calls the &lt;code&gt;close&lt;/code&gt;
                  method of the current substream and begins reading from the next
                  substream.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="162">
                <scope line="163"/>
                <declaration name="c" type="int" line="166"/>
                <scope line="167"/>
            </method>
            <javadoc line="174">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes.  If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until at least 1 byte of input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;SequenceInputStream&lt;/code&gt;
                  tries to read the data from the current substream. If it fails to
                  read any characters because the substream has reached the end of
                  the stream, it calls the &lt;code&gt;close&lt;/code&gt; method of the current
                  substream and begins reading from the next substream.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in array &lt;code&gt;b&lt;/code&gt;
                      at which the data is written.                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    int   the number of bytes read.                    
                </return>
                <exception>
                    NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;b.length - off&lt;/code&gt;                    
                </exception>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="197">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="198"/>
                <scope line="200"/>
                <scope line="202"/>
                <scope line="204"/>
                <declaration name="n" type="int" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="216">
                Closes this input stream and releases any system resources
                  associated with the stream.
                  A closed &lt;code&gt;SequenceInputStream&lt;/code&gt;
                  cannot  perform input operations and cannot
                  be reopened.
                  &lt;p&gt;
                  If this stream was created
                  from an enumeration, all remaining elements
                  are requested from the enumeration and closed
                  before the &lt;code&gt;close&lt;/code&gt; method returns.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="230">
                <scope line="231"/>
            </method>
        </class>
    </source>