<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <interface name="ObjectInput">
            <implements interface="DataInput"/>
            <implements interface="AutoCloseable"/>
            <javadoc line="28">
                ObjectInput extends the DataInput interface to include the reading of
                  objects. DataInput includes methods for the input of primitive types,
                  ObjectInput extends that interface to include objects, arrays, and Strings.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.io.InputStream                    
                </see>
                <see>
                    java.io.ObjectOutputStream                    
                </see>
                <see>
                    java.io.ObjectInputStream                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="readObject" type="Object" line="40"/>
            <javadoc line="40">
                Read and return an object. The class that implements this interface
                  defines where the object is &quot;read&quot; from.                
                <return>
                    the object read from the stream                    
                </return>
                <exception>
                    java.lang.ClassNotFoundException If the class of a serialized
                      object cannot be found.                    
                </exception>
                <exception>
                    IOException If any of the usual Input/Output
                      related exceptions occur.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="53"/>
            <javadoc line="53">
                Reads a byte of data. This method will block if no input is
                  available.                
                <return>
                    the byte read, or -1 if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="62"/>
            <javadoc line="62">
                Reads into an array of bytes.  This method will
                  block until some input is available.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="72"/>
            <javadoc line="72">
                Reads into an array of bytes.  This method will
                  block until some input is available.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes read                    
                </param>
                <return>
                    the actual number of bytes read, -1 is
                      returned when the end of the stream is reached.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="84"/>
            <javadoc line="84">
                Skips n bytes of input.                
                <param>
                    n the number of bytes to be skipped                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="92"/>
            <javadoc line="92">
                Returns the number of bytes that can be read
                  without blocking.                
                <return>
                    the number of available bytes.                    
                </return>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="100"/>
            <javadoc line="100">
                Closes the input stream. Must be called
                  to release any resources associated with
                  the stream.                
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
        </interface>
    </source>