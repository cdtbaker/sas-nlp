<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.Formatter"/>
        <import package="java.util.Locale"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.IllegalCharsetNameException"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <class name="PrintStream" line="34">
            <extends class="FilterOutputStream"/>
            <comment line="101">
                                
            </comment>
            <comment line="116">
                Variant of the private constructor so that the given charset name
                 can be verified before evaluating the OutputStream argument. Used
                 by constructors creating a FileOutputStream that also take a
                 charset name.                
            </comment>
            <comment line="347">
                                
            </comment>
            <comment line="427">
                Exception-catching, synchronized output operations,
                 which also implement the write() methods of OutputStream                
            </comment>
            <comment line="494">
                The following private methods on the text- and character-output streams
                 always flush the stream buffers, so that writes to the underlying byte
                 stream occur as promptly as with the original PrintStream.                
            </comment>
            <comment line="560">
                                
            </comment>
            <comment line="688">
                                
            </comment>
            <implements interface="Appendable"/>
            <implements interface="Closeable"/>
            <javadoc line="34">
                A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream,
                  namely the ability to print representations of various data values
                  conveniently.  Two other features are provided as well.  Unlike other output
                  streams, a &lt;code&gt;PrintStream&lt;/code&gt; never throws an
                  &lt;code&gt;IOException&lt;/code&gt;; instead, exceptional situations merely set an
                  internal flag that can be tested via the &lt;code&gt;checkError&lt;/code&gt; method.
                  Optionally, a &lt;code&gt;PrintStream&lt;/code&gt; can be created so as to flush
                  automatically; this means that the &lt;code&gt;flush&lt;/code&gt; method is
                  automatically invoked after a byte array is written, one of the
                  &lt;code&gt;println&lt;/code&gt; methods is invoked, or a newline character or byte
                  (&lt;code&gt;&apos;\n&apos;&lt;/code&gt;) is written.
                  &lt;p&gt; All characters printed by a &lt;code&gt;PrintStream&lt;/code&gt; are converted into
                  bytes using the platform&apos;s default character encoding.  The &lt;code&gt;{@link PrintWriter}&lt;/code&gt; class should be used in situations that require writing
                  characters rather than bytes.                
                <author>
                    Frank Yellin                    
                </author>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="autoFlush" type="boolean" line="61"/>
            <declaration name="trouble" type="boolean" line="62"/>
            <declaration name="formatter" type="Formatter" line="63"/>
            <declaration name="textOut" type="BufferedWriter" line="65"/>
            <javadoc line="65">
                Track both the text- and character-output streams, so that their buffers
                  can be flushed without flushing the entire stream.                
            </javadoc>
            <declaration name="charOut" type="OutputStreamWriter" line="70"/>
            <javadoc line="72">
                requireNonNull is explicitly declared here so as not to create an extra
                  dependency on java.util.Objects.requireNonNull. PrintStream is loaded
                  early during system initialization.                
            </javadoc>
            <method name="requireNonNull" type="T" line="77">
                <params>
                    <param name="obj" type="T"/>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="83">
                Returns a charset object for the given charset name.                
                <throws>
                    NullPointerException          is csn is null                    
                </throws>
                <throws>
                    UnsupportedEncodingException  if the charset is not supported                    
                </throws>
            </javadoc>
            <method name="toCharset" type="Charset" line="90">
                <params>
                    <param name="csn" type="String"/>
                </params>
                <comment line="96">
                    UnsupportedEncodingException should be thrown                    
                </comment>
                <scope line="92"/>
                <scope line="94"/>
            </method>
            <method name="PrintStream" type="constructor" line="101">
                <params>
                    <param name="autoFlush" type="boolean"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="PrintStream" type="constructor" line="108">
                <params>
                    <param name="autoFlush" type="boolean"/>
                    <param name="out" type="OutputStream"/>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <method name="PrintStream" type="constructor" line="122">
                <params>
                    <param name="autoFlush" type="boolean"/>
                    <param name="charset" type="Charset"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="126">
                Creates a new print stream.  This stream will not flush automatically.                
                <param>
                    out        The output stream to which values and objects will be
                      printed                    
                </param>
                <see>
                    java.io.PrintWriter#PrintWriter(java.io.OutputStream)                    
                </see>
            </javadoc>
            <method name="PrintStream" type="constructor" line="134">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="138">
                Creates a new print stream.                
                <param>
                    out        The output stream to which values and objects will be
                      printed                    
                </param>
                <param>
                    autoFlush  A boolean; if true, the output buffer will be flushed
                      whenever a byte array is written, one of the
                      <code>println</code> methods is invoked, or a newline
                      character or byte (<code>'\n'</code>) is written                    
                </param>
                <see>
                    java.io.PrintWriter#PrintWriter(java.io.OutputStream,boolean)                    
                </see>
            </javadoc>
            <method name="PrintStream" type="constructor" line="150">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="autoFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="154">
                Creates a new print stream.                
                <param>
                    out        The output stream to which values and objects will be
                      printed                    
                </param>
                <param>
                    autoFlush  A boolean; if true, the output buffer will be flushed
                      whenever a byte array is written, one of the
                      <code>println</code> methods is invoked, or a newline
                      character or byte (<code>'\n'</code>) is written                    
                </param>
                <param>
                    encoding   The name of a supported
                      <a href="../lang/package-summary.html#charenc">
                      character encoding</a>                    
                </param>
                <throws>
                    UnsupportedEncodingExceptionIf the named encoding is not supported                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="PrintStream" type="constructor" line="174">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="autoFlush" type="boolean"/>
                    <param name="encoding" type="String"/>
                </params>
            </method>
            <javadoc line="180">
                Creates a new print stream, without automatic line flushing, with the
                  specified file name.  This convenience constructor creates
                  the necessary intermediate {@link java.io.OutputStreamWriterOutputStreamWriter}, which will encode characters using the{@linkplain java.nio.charset.Charset#defaultCharset() default charset}for this instance of the Java virtual machine.                
                <param>
                    fileNameThe name of the file to use as the destination of this print
                      stream.  If the file exists, then it will be truncated to
                      zero size; otherwise, a new file will be created.  The output
                      will be written to the file and is buffered.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintStream" type="constructor" line="207">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="211">
                Creates a new print stream, without automatic line flushing, with the
                  specified file name and charset.  This convenience constructor creates
                  the necessary intermediate {@link java.io.OutputStreamWriterOutputStreamWriter}, which will encode characters using the provided
                  charset.                
                <param>
                    fileNameThe name of the file to use as the destination of this print
                      stream.  If the file exists, then it will be truncated to
                      zero size; otherwise, a new file will be created.  The output
                      will be written to the file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintStream" type="constructor" line="246">
                <params>
                    <param name="fileName" type="String"/>
                    <param name="csn" type="String"/>
                </params>
                <comment line="248">
                    ensure charset is checked before the file is opened                    
                </comment>
            </method>
            <javadoc line="251">
                Creates a new print stream, without automatic line flushing, with the
                  specified file.  This convenience constructor creates the necessary
                  intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
                  which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.                
                <param>
                    fileThe file to use as the destination of this print stream.  If the
                      file exists, then it will be truncated to zero size; otherwise,
                      a new file will be created.  The output will be written to the
                      file and is buffered.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())}denies write access to the file                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintStream" type="constructor" line="278">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="282">
                Creates a new print stream, without automatic line flushing, with the
                  specified file and charset.  This convenience constructor creates
                  the necessary intermediate {@link java.io.OutputStreamWriterOutputStreamWriter}, which will encode characters using the provided
                  charset.                
                <param>
                    fileThe file to use as the destination of this print stream.  If the
                      file exists, then it will be truncated to zero size; otherwise,
                      a new file will be created.  The output will be written to the
                      file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is presentand {@link SecurityManager#checkWrite checkWrite(file.getPath())}denies write access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintStream" type="constructor" line="317">
                <params>
                    <param name="file" type="File"/>
                    <param name="csn" type="String"/>
                </params>
                <comment line="319">
                    ensure charset is checked before the file is opened                    
                </comment>
            </method>
            <javadoc line="322">
                Check to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="323"/>
            <javadoc line="328">
                Flushes the stream.  This is done by writing any buffered output bytes to
                  the underlying output stream and then flushing that stream.                
                <see>
                    java.io.OutputStream#flush()                    
                </see>
            </javadoc>
            <method name="flush" type="void" line="334">
                <scope line="335">
                    <scope line="336"/>
                    <scope line="340"/>
                </scope>
            </method>
            <declaration name="closing" type="boolean" line="346"/>
            <javadoc line="348">
                Closes the stream.  This is done by flushing the stream and then closing
                  the underlying output stream.                
                <see>
                    java.io.OutputStream#close()                    
                </see>
            </javadoc>
            <method name="close" type="void" line="354">
                <scope line="355">
                    <scope line="356">
                        <scope line="358"/>
                        <scope line="362"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="372">
                Flushes the stream and checks its error state. The internal error state
                  is set to &lt;code&gt;true&lt;/code&gt; when the underlying output stream throws an
                  &lt;code&gt;IOException&lt;/code&gt; other than &lt;code&gt;InterruptedIOException&lt;/code&gt;,
                  and when the &lt;code&gt;setError&lt;/code&gt; method is invoked.  If an operation
                  on the underlying output stream throws an
                  &lt;code&gt;InterruptedIOException&lt;/code&gt;, then the &lt;code&gt;PrintStream&lt;/code&gt;
                  converts the exception back into an interrupt by doing:
                  &lt;pre&gt;
                  Thread.currentThread().interrupt();
                  &lt;/pre&gt;
                  or the equivalent.                
                <return>
                    <code>true</code> if and only if this stream has encountered an
                      <code>IOException</code> other than
                      <code>InterruptedIOException</code>, or the
                      <code>setError</code> method has been invoked                    
                </return>
            </javadoc>
            <method name="checkError" type="boolean" line="390">
                <scope line="393">
                    <declaration name="ps" type="PrintStream" line="394"/>
                </scope>
            </method>
            <javadoc line="400">
                Sets the error state of the stream to &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt; This method will cause subsequent invocations of {@link #checkError()} to return &lt;tt&gt;true&lt;/tt&gt; until {@link #clearError()} is invoked.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setError" type="void" line="409"/>
            <javadoc line="413">
                Clears the internal error state of this stream.
                  &lt;p&gt; This method will cause subsequent invocations of {@link #checkError()} to return &lt;tt&gt;false&lt;/tt&gt; until another write
                  operation fails and invokes {@link #setError()}.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="clearError" type="void" line="422"/>
            <javadoc line="431">
                Writes the specified byte to this stream.  If the byte is a newline and
                  automatic flushing is enabled then the &lt;code&gt;flush&lt;/code&gt; method will be
                  invoked.
                  &lt;p&gt; Note that the byte is written as given; to write a character that
                  will be translated according to the platform&apos;s default character
                  encoding, use the &lt;code&gt;print(char)&lt;/code&gt; or &lt;code&gt;println(char)&lt;/code&gt;
                  methods.                
                <param>
                    b  The byte to be written                    
                </param>
                <see>
                    #print(char)                    
                </see>
                <see>
                    #println(char)                    
                </see>
            </javadoc>
            <method name="write" type="void" line="445">
                <params>
                    <param name="b" type="int"/>
                </params>
                <scope line="446">
                    <scope line="447"/>
                </scope>
                <scope line="454"/>
                <scope line="457"/>
            </method>
            <javadoc line="462">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array starting at
                  offset &lt;code&gt;off&lt;/code&gt; to this stream.  If automatic flushing is
                  enabled then the &lt;code&gt;flush&lt;/code&gt; method will be invoked.
                  &lt;p&gt; Note that the bytes will be written as given; to write characters
                  that will be translated according to the platform&apos;s default character
                  encoding, use the &lt;code&gt;print(char)&lt;/code&gt; or &lt;code&gt;println(char)&lt;/code&gt;
                  methods.                
                <param>
                    buf   A byte array                    
                </param>
                <param>
                    off   Offset from which to start taking bytes                    
                </param>
                <param>
                    len   Number of bytes to write                    
                </param>
            </javadoc>
            <method name="write" type="void" line="476">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="477">
                    <scope line="478"/>
                </scope>
                <scope line="485"/>
                <scope line="488"/>
            </method>
            <method name="write" type="void" line="499">
                <params>
                    <param name="buf" type="char"/>
                </params>
                <scope line="500">
                    <scope line="501">
                        <scope line="506"/>
                    </scope>
                </scope>
                <scope line="513"/>
                <scope line="516"/>
            </method>
            <method name="write" type="void" line="521">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="522">
                    <scope line="523"/>
                </scope>
                <scope line="532"/>
                <scope line="535"/>
            </method>
            <method name="newLine" type="void" line="540">
                <scope line="541">
                    <scope line="542"/>
                </scope>
                <scope line="551"/>
                <scope line="554"/>
            </method>
            <javadoc line="561">
                Prints a boolean value.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(boolean)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    b   The <code>boolean</code> to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="570">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="574">
                Prints a character.  The character is translated into one or more bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    c   The <code>char</code> to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="582">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="586">
                Prints an integer.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(int)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    i   The <code>int</code> to be printed                    
                </param>
                <see>
                    java.lang.Integer#toString(int)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="596">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="600">
                Prints a long integer.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(long)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    l   The <code>long</code> to be printed                    
                </param>
                <see>
                    java.lang.Long#toString(long)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="610">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="614">
                Prints a floating-point number.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(float)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    f   The <code>float</code> to be printed                    
                </param>
                <see>
                    java.lang.Float#toString(float)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="624">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="628">
                Prints a double-precision floating-point number.  The string produced by
                  &lt;code&gt;{@link java.lang.String#valueOf(double)}&lt;/code&gt; is translated into
                  bytes according to the platform&apos;s default character encoding, and these
                  bytes are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    d   The <code>double</code> to be printed                    
                </param>
                <see>
                    java.lang.Double#toString(double)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="638">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="642">
                Prints an array of characters.  The characters are converted into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    s   The array of chars to be printed                    
                </param>
                <throws>
                    NullPointerException  If <code>s</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="print" type="void" line="652">
                <params>
                    <param name="s" type="char"/>
                </params>
            </method>
            <javadoc line="656">
                Prints a string.  If the argument is &lt;code&gt;null&lt;/code&gt; then the string
                  &lt;code&gt;&quot;null&quot;&lt;/code&gt; is printed.  Otherwise, the string&apos;s characters are
                  converted into bytes according to the platform&apos;s default character
                  encoding, and these bytes are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    s   The <code>String</code> to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="665">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="666"/>
            </method>
            <javadoc line="672">
                Prints an object.  The string produced by the &lt;code&gt;{@link java.lang.String#valueOf(Object)}&lt;/code&gt; method is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    obj   The <code>Object</code> to be printed                    
                </param>
                <see>
                    java.lang.Object#toString()                    
                </see>
            </javadoc>
            <method name="print" type="void" line="682">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="689">
                Terminates the current line by writing the line separator string.  The
                  line separator string is defined by the system property
                  &lt;code&gt;line.separator&lt;/code&gt;, and is not necessarily a single newline
                  character (&lt;code&gt;&apos;\n&apos;&lt;/code&gt;).                
            </javadoc>
            <method name="println" type="void" line="695"/>
            <javadoc line="699">
                Prints a boolean and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(boolean)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>boolean</code> to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="706">
                <params>
                    <param name="x" type="boolean"/>
                </params>
                <scope line="707"/>
            </method>
            <javadoc line="713">
                Prints a character and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(char)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>char</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="720">
                <params>
                    <param name="x" type="char"/>
                </params>
                <scope line="721"/>
            </method>
            <javadoc line="727">
                Prints an integer and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(int)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>int</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="734">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="735"/>
            </method>
            <javadoc line="741">
                Prints a long and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(long)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  a The <code>long</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="748">
                <params>
                    <param name="x" type="long"/>
                </params>
                <scope line="749"/>
            </method>
            <javadoc line="755">
                Prints a float and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(float)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>float</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="762">
                <params>
                    <param name="x" type="float"/>
                </params>
                <scope line="763"/>
            </method>
            <javadoc line="769">
                Prints a double and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(double)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>double</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="776">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="777"/>
            </method>
            <javadoc line="783">
                Prints an array of characters and then terminate the line.  This method
                  behaves as though it invokes &lt;code&gt;{@link #print(char[])}&lt;/code&gt; and
                  then &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  an array of chars to print.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="790">
                <params>
                    <param name="x" type="char"/>
                </params>
                <scope line="791"/>
            </method>
            <javadoc line="797">
                Prints a String and then terminate the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(String)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>String</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="804">
                <params>
                    <param name="x" type="String"/>
                </params>
                <scope line="805"/>
            </method>
            <javadoc line="811">
                Prints an Object and then terminate the line.  This method calls
                  at first String.valueOf(x) to get the printed object&apos;s string value,
                  then behaves as
                  though it invokes &lt;code&gt;{@link #print(String)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The <code>Object</code> to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="820">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="s" type="String" line="821"/>
                <scope line="822"/>
            </method>
            <javadoc line="829">
                A convenience method to write a formatted string to this output stream
                  using the specified format string and arguments.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.printf(format,
                  args)&lt;/tt&gt; behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.format(format, args) &lt;/pre&gt;                
                <param>
                    formatA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the <tt>format</tt> is <tt>null</tt>                    
                </throws>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="printf" type="PrintStream" line="870">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="874">
                A convenience method to write a formatted string to this output stream
                  using the specified format string and arguments.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.printf(l, format,
                  args)&lt;/tt&gt; behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.format(l, format, args) &lt;/pre&gt;                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
                      is applied.                    
                </param>
                <param>
                    formatA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the <tt>format</tt> is <tt>null</tt>                    
                </throws>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="printf" type="PrintStream" line="920">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="924">
                Writes a formatted string to this output stream using the specified
                  format string and arguments.
                  &lt;p&gt; The locale always used is the one returned by {@link java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
                  previous invocations of other formatting methods on this object.                
                <param>
                    formatA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the <tt>format</tt> is <tt>null</tt>                    
                </throws>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="PrintStream" line="963">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="964">
                    <scope line="965"/>
                </scope>
                <scope line="972"/>
                <scope line="974"/>
            </method>
            <javadoc line="980">
                Writes a formatted string to this output stream using the specified
                  format string and arguments.                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
                      is applied.                    
                </param>
                <param>
                    formatA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the <tt>format</tt> is <tt>null</tt>                    
                </throws>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="PrintStream" line="1020">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="1021">
                    <scope line="1022"/>
                </scope>
                <scope line="1029"/>
                <scope line="1031"/>
            </method>
            <javadoc line="1037">
                Appends the specified character sequence to this output stream.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.print(csq.toString()) &lt;/pre&gt;
                  &lt;p&gt; Depending on the specification of &lt;tt&gt;toString&lt;/tt&gt; for the
                  character sequence &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be
                  appended.  For instance, invoking then &lt;tt&gt;toString&lt;/tt&gt; method of a
                  character buffer will return a subsequence whose content depends upon
                  the buffer&apos;s position and limit.                
                <param>
                    csqThe character sequence to append.  If <tt>csq</tt> is
                      <tt>null</tt>, then the four characters <tt>"null"</tt> are
                      appended to this output stream.                    
                </param>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintStream" line="1061">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="1069">
                Appends a subsequence of the specified character sequence to this output
                  stream.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,
                  end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, behaves in
                  exactly the same way as the invocation
                  &lt;pre&gt;
                  out.print(csq.subSequence(start, end).toString()) &lt;/pre&gt;                
                <param>
                    csqThe character sequence from which a subsequence will be
                      appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
                      will be appended as if <tt>csq</tt> contained the four
                      characters <tt>"null"</tt>.                    
                </param>
                <param>
                    startThe index of the first character in the subsequence                    
                </param>
                <param>
                    endThe index of the character following the last character in the
                      subsequence                    
                </param>
                <return>
                    This output stream                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
                      is greater than <tt>end</tt>, or <tt>end</tt> is greater than
                      <tt>csq.length()</tt>                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintStream" line="1102">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="cs" type="CharSequence" line="1103"/>
            </method>
            <javadoc line="1108">
                Appends the specified character to this output stream.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(c)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.print(c) &lt;/pre&gt;                
                <param>
                    cThe 16-bit character to append                    
                </param>
                <return>
                    This output stream                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintStream" line="1124">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
        </class>
    </source>