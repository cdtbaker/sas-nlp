<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util"/>
        <import package="java.nio.charset.Charset"/>
        <import package="sun.nio.cs.StreamDecoder"/>
        <import package="sun.nio.cs.StreamEncoder"/>
        <class name="Console" line="33">
            <comment line="515">
                Set up JavaIOAccess in SharedSecrets                
            </comment>
            <implements interface="Flushable"/>
            <javadoc line="33">
                Methods to access the character-based console device, if any, associated
                  with the current Java virtual machine.
                  &lt;p&gt; Whether a virtual machine has a console is dependent upon the
                  underlying platform and also upon the manner in which the virtual
                  machine is invoked.  If the virtual machine is started from an
                  interactive command line without redirecting the standard input and
                  output streams then its console will exist and will typically be
                  connected to the keyboard and display from which the virtual machine
                  was launched.  If the virtual machine is started automatically, for
                  example by a background job scheduler, then it will typically not
                  have a console.
                  &lt;p&gt;
                  If this virtual machine has a console then it is represented by a
                  unique instance of this class which can be obtained by invoking the{@link java.lang.System#console()} method.  If no console device is
                  available then an invocation of that method will return &lt;tt&gt;null&lt;/tt&gt;.
                  &lt;p&gt;
                  Read and write operations are synchronized to guarantee the atomic
                  completion of critical operations; therefore invoking methods{@link #readLine()}, {@link #readPassword()}, {@link #format format()},{@link #printf printf()} as well as the read, format and write operations
                  on the objects returned by {@link #reader()} and {@link #writer()} may
                  block in multithreaded scenarios.
                  &lt;p&gt;
                  Invoking &lt;tt&gt;close()&lt;/tt&gt; on the objects returned by the {@link #reader()}and the {@link #writer()} will not close the underlying stream of those
                  objects.
                  &lt;p&gt;
                  The console-read methods return &lt;tt&gt;null&lt;/tt&gt; when the end of the
                  console input stream is reached, for example by typing control-D on
                  Unix or control-Z on Windows.  Subsequent read operations will succeed
                  if additional characters are later entered on the console&apos;s input
                  device.
                  &lt;p&gt;
                  Unless otherwise specified, passing a &lt;tt&gt;null&lt;/tt&gt; argument to any method
                  in this class will cause a {@link NullPointerException} to be thrown.
                  &lt;p&gt;
                  &lt;b&gt;Security note:&lt;/b&gt;
                  If an application needs to read a password or other secure data, it should
                  use {@link #readPassword()} or {@link #readPassword(String,Object...)} and
                  manually zero the returned character array after processing to minimize the
                  lifetime of sensitive data in memory.
                  &lt;blockquote&gt;&lt;pre&gt;
                  Console cons;
                  char[] passwd;
                  if ((cons = System.console()) != null &amp;&amp;
                  (passwd = cons.readPassword(&quot;[%s]&quot;, &quot;Password:&quot;)) != null) {
                  ...
                  java.util.Arrays.fill(passwd, &apos; &apos;);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <author>
                    Xueming Shen                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="94">
                Retrieves the unique {@link java.io.PrintWriter PrintWriter} object
                  associated with this console.                
                <return>
                    The printwriter associated with this console                    
                </return>
            </javadoc>
            <method name="writer" type="PrintWriter" line="100"/>
            <javadoc line="104">
                Retrieves the unique {@link java.io.Reader Reader} object associated
                  with this console.
                  &lt;p&gt;
                  This method is intended to be used by sophisticated applications, for
                  example, a {@link java.util.Scanner} object which utilizes the rich
                  parsing/scanning functionality provided by the &lt;tt&gt;Scanner&lt;/tt&gt;:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Console con = System.console();
                  if (con != null) {
                  Scanner sc = new Scanner(con.reader());
                  ...
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  For simple applications requiring only line-oriented reading, use
                  &lt;tt&gt;{@link #readLine}&lt;/tt&gt;.
                  &lt;p&gt;
                  The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },{@link java.io.Reader#read(char[],int,int) read(char[], int, int) } and{@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}on the returned object will not read in characters beyond the line
                  bound for each invocation, even if the destination buffer has space for
                  more characters. A line bound is considered to be any one of a line feed
                  (&lt;tt&gt;&apos;\n&apos;&lt;/tt&gt;), a carriage return (&lt;tt&gt;&apos;\r&apos;&lt;/tt&gt;), a carriage return
                  followed immediately by a linefeed, or an end of stream.                
                <return>
                    The reader associated with this console                    
                </return>
            </javadoc>
            <method name="reader" type="Reader" line="133"/>
            <javadoc line="137">
                Writes a formatted string to this console&apos;s output stream using
                  the specified format string and arguments.                
                <param>
                    fmtA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section
                      of the formatter class specification.                    
                </throws>
                <return>
                    This console                    
                </return>
            </javadoc>
            <method name="format" type="Console" line="167">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="172">
                A convenience method to write a formatted string to this console&apos;s
                  output stream using the specified format string and arguments.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;con.printf(format,
                  args)&lt;/tt&gt; behaves in exactly the same way as the invocation of
                  &lt;pre&gt;con.format(format, args)&lt;/pre&gt;.                
                <param>
                    formatA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.
                      The behaviour on a
                      <tt>null</tt> argument depends on the <a
                      href="../util/Formatter.html#syntax">conversion</a>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section of the
                      formatter class specification.                    
                </throws>
                <return>
                    This console                    
                </return>
            </javadoc>
            <method name="printf" type="Console" line="206">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="210">
                Provides a formatted prompt, then reads a single line of text from the
                  console.                
                <param>
                    fmtA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a> section
                      of the formatter class specification.                    
                </throws>
                <throws>
                    IOErrorIf an I/O error occurs.                    
                </throws>
                <return>
                    A string containing the line read from the console, not
                      including any line-termination characters, or <tt>null</tt>
                      if an end of stream has been reached.                    
                </return>
            </javadoc>
            <method name="readLine" type="String" line="241">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="line" type="String" line="242"/>
                <scope line="243">
                    <scope line="244">
                        <scope line="247">
                            <declaration name="ca" type="char[]" line="248"/>
                        </scope>
                        <scope line="251"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="259">
                Reads a single line of text from the console.                
                <throws>
                    IOErrorIf an I/O error occurs.                    
                </throws>
                <return>
                    A string containing the line read from the console, not
                      including any line-termination characters, or <tt>null</tt>
                      if an end of stream has been reached.                    
                </return>
            </javadoc>
            <method name="readLine" type="String" line="269"/>
            <javadoc line="273">
                Provides a formatted prompt, then reads a password or passphrase from
                  the console with echoing disabled.                
                <param>
                    fmtA format string as described in <a
                      href="../util/Formatter.html#syntax">Format string syntax</a>
                      for the prompt text.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the <a
                      href="../util/Formatter.html#detail">Details</a>
                      section of the formatter class specification.                    
                </throws>
                <throws>
                    IOErrorIf an I/O error occurs.                    
                </throws>
                <return>
                    A character array containing the password or passphrase read
                      from the console, not including any line-termination characters,
                      or <tt>null</tt> if an end of stream has been reached.                    
                </return>
            </javadoc>
            <method name="readPassword" type="char[]" line="305">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="passwd" type="char[]" line="306"/>
                <scope line="307">
                    <scope line="308">
                        <scope line="309"/>
                        <scope line="311"/>
                        <declaration name="ioe" type="IOError" line="314"/>
                        <scope line="315"/>
                        <scope line="319"/>
                        <scope line="321">
                            <scope line="322"/>
                            <scope line="324"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="339">
                Reads a password or passphrase from the console with echoing disabled                
                <throws>
                    IOErrorIf an I/O error occurs.                    
                </throws>
                <return>
                    A character array containing the password or passphrase read
                      from the console, not including any line-termination characters,
                      or <tt>null</tt> if an end of stream has been reached.                    
                </return>
            </javadoc>
            <method name="readPassword" type="char[]" line="349"/>
            <javadoc line="353">
                Flushes the console and forces any buffered output to be written
                  immediately .                
            </javadoc>
            <method name="flush" type="void" line="357"/>
            <declaration name="readLock" type="Object" line="361"/>
            <declaration name="writeLock" type="Object" line="362"/>
            <declaration name="reader" type="Reader" line="363"/>
            <declaration name="out" type="Writer" line="364"/>
            <declaration name="pw" type="PrintWriter" line="365"/>
            <declaration name="formatter" type="Formatter" line="366"/>
            <declaration name="cs" type="Charset" line="367"/>
            <declaration name="rcb" type="char[]" line="368"/>
            <method name="encoding" type="String" line="369"/>
            <method name="echo" type="boolean" line="370"/>
            <declaration name="echoOff" type="boolean" line="371"/>
            <method name="readline" type="char[]" line="373">
                <params>
                    <param name="zeroOut" type="boolean"/>
                </params>
                <comment line="376">
                    EOL                    
                </comment>
                <comment line="378">
                    remove CR at end;                    
                </comment>
                <comment line="380">
                    remove LF at end;                    
                </comment>
                <comment line="382">
                    remove the CR, if there is one                    
                </comment>
                <declaration name="len" type="int" line="374"/>
                <scope line="379"/>
                <declaration name="b" type="char[]" line="384"/>
                <scope line="385">
                    <scope line="387"/>
                </scope>
            </method>
            <method name="grow" type="char[]" line="394">
                <declaration name="t" type="char[]" line="396"/>
            </method>
            <class name="LineReader" line="402">
                <extends class="Reader"/>
                <declaration name="in" type="Reader" line="403"/>
                <declaration name="cb" type="char[]" line="404"/>
                <declaration name="nChars" type="int" line="405"/>
                <declaration name="leftoverLF" type="boolean" line="406"/>
                <method name="LineReader" type="constructor" line="407">
                    <params>
                        <param name="in" type="Reader"/>
                    </params>
                </method>
                <method name="close" type="void" line="413"/>
                <method name="ready" type="boolean" line="414">
                    <comment line="415">
                        in.ready synchronizes on readLock already                        
                    </comment>
                </method>
                <method name="read" type="int" line="421">
                    <params>
                        <param name="cbuf" type="char"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <comment line="432">
                        fill                        
                    </comment>
                    <comment line="442">
                        we&apos;re in canonical mode so each &quot;fill&quot; should
                         come back with an eol. if there no lf or nl at
                         the end of returned bytes we reached an eof.                        
                    </comment>
                    <comment line="449">
                                                
                    </comment>
                    <comment line="456">
                        if invoked by our readline, skip the leftover, otherwise
                         return the LF.                        
                    </comment>
                    <comment line="470">
                        no space left even the next is LF, so return
                         whatever we have if the invoker is not our
                         readLine()                        
                    </comment>
                    <comment line="483">
                        we have a CR and we reached the end of
                         the read in buffer, fill to make sure we
                         don&apos;t miss a LF, if there is one, it&apos;s possible
                         that it got cut off during last round reading
                         simply because the read in buffer was full.                        
                    </comment>
                    <declaration name="off" type="int" line="422"/>
                    <declaration name="end" type="int" line="423"/>
                    <scope line="425"/>
                    <scope line="428">
                        <declaration name="eof" type="boolean" line="429"/>
                        <declaration name="c" type="char" line="430"/>
                        <scope line="431">
                            <scope line="432">
                                <declaration name="n" type="int" line="433"/>
                                <scope line="434"/>
                                <scope line="437">
                                    <scope line="441"/>
                                </scope>
                                <scope line="449"/>
                            </scope>
                            <scope line="455"/>
                            <scope line="463">
                                <scope line="466"/>
                                <scope line="468">
                                    <scope line="469">
                                        <scope line="474"/>
                                        <scope line="477"/>
                                    </scope>
                                    <scope line="482"/>
                                    <scope line="493"/>
                                </scope>
                                <scope line="498">
                                    <scope line="499"/>
                                    <scope line="502"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <scope line="515">
                <scope line="516">
                    <anonymous_class line="522">
                        <method name="run" type="void" line="523">
                            <scope line="524">
                                <scope line="525"/>
                            </scope>
                            <scope line="528"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="531"/>
                <anonymous_class line="536">
                    <method name="console" type="Console" line="537">
                        <scope line="538"/>
                    </method>
                    <method name="charset" type="Charset" line="546">
                        <comment line="547">
                            This method is called in sun.security.util.Password,                            
                        </comment>
                        <comment line="548">
                            cons already exists when this method is called                            
                        </comment>
                    </method>
                </anonymous_class>
            </scope>
            <declaration name="cons" type="Console" line="553"/>
            <method name="istty" type="boolean" line="554"/>
            <method name="Console" type="constructor" line="555">
                <declaration name="csname" type="String" line="558"/>
                <scope line="559">
                    <scope line="560"/>
                    <scope line="562"/>
                </scope>
                <anonymous_class line="570">
                    <method name="close" type="void" line="570"/>
                </anonymous_class>
            </method>
        </class>
    </source>