<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="OutputStream" line="28">
            <implements interface="Closeable"/>
            <implements interface="Flushable"/>
            <javadoc line="28">
                This abstract class is the superclass of all classes representing
                  an output stream of bytes. An output stream accepts output bytes
                  and sends them to some sink.
                  &lt;p&gt;
                  Applications that need to define a subclass of
                  &lt;code&gt;OutputStream&lt;/code&gt; must always provide at least a method
                  that writes one byte of output.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.BufferedOutputStream                    
                </see>
                <see>
                    java.io.ByteArrayOutputStream                    
                </see>
                <see>
                    java.io.DataOutputStream                    
                </see>
                <see>
                    java.io.FilterOutputStream                    
                </see>
                <see>
                    java.io.InputStream                    
                </see>
                <see>
                    java.io.OutputStream#write(int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="write" type="void" line="47"/>
            <javadoc line="47">
                Writes the specified byte to this output stream. The general
                  contract for &lt;code&gt;write&lt;/code&gt; is that one byte is written
                  to the output stream. The byte to be written is the eight
                  low-order bits of the argument &lt;code&gt;b&lt;/code&gt;. The 24
                  high-order bits of &lt;code&gt;b&lt;/code&gt; are ignored.
                  &lt;p&gt;
                  Subclasses of &lt;code&gt;OutputStream&lt;/code&gt; must provide an
                  implementation for this method.                
                <param>
                    b   the &lt;code&gt;byte&lt;/code&gt;.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs. In particular,
                      an &lt;code&gt;IOException&lt;/code&gt; may be thrown if the
                      output stream has been closed.                    
                </exception>
            </javadoc>
            <javadoc line="64">
                Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array
                  to this output stream. The general contract for &lt;code&gt;write(b)&lt;/code&gt;
                  is that it should have exactly the same effect as the call
                  &lt;code&gt;write(b, 0, b.length)&lt;/code&gt;.                
                <param>
                    b   the data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.OutputStream#write(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="write" type="void" line="74">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="78">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this output stream.
                  The general contract for &lt;code&gt;write(b, off, len)&lt;/code&gt; is that
                  some of the bytes in the array &lt;code&gt;b&lt;/code&gt; are written to the
                  output stream in order; element &lt;code&gt;b[off]&lt;/code&gt; is the first
                  byte written and &lt;code&gt;b[off+len-1]&lt;/code&gt; is the last byte written
                  by this operation.
                  &lt;p&gt;
                  The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; calls
                  the write method of one argument on each of the bytes to be
                  written out. Subclasses are encouraged to override this method and
                  provide a more efficient implementation.
                  &lt;p&gt;
                  If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;off&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is negative, or
                  &lt;code&gt;off+len&lt;/code&gt; is greater than the length of the array
                  &lt;code&gt;b&lt;/code&gt;, then an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt; is thrown.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs. In particular,
                      an &lt;code&gt;IOException&lt;/code&gt; is thrown if the output
                      stream is closed.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="106">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="112"/>
                <scope line="115"/>
            </method>
            <javadoc line="120">
                Flushes this output stream and forces any buffered output bytes
                  to be written out. The general contract of &lt;code&gt;flush&lt;/code&gt; is
                  that calling it is an indication that, if any bytes previously
                  written have been buffered by the implementation of the output
                  stream, such bytes should immediately be written to their
                  intended destination.
                  &lt;p&gt;
                  If the intended destination of this stream is an abstraction provided by
                  the underlying operating system, for example a file, then flushing the
                  stream guarantees only that bytes previously written to the stream are
                  passed to the operating system for writing; it does not guarantee that
                  they are actually written to a physical device such as a disk drive.
                  &lt;p&gt;
                  The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="flush" type="void" line="138"/>
            <javadoc line="141">
                Closes this output stream and releases any system resources
                  associated with this stream. The general contract of &lt;code&gt;close&lt;/code&gt;
                  is that it closes the output stream. A closed stream cannot perform
                  output operations and cannot be reopened.
                  &lt;p&gt;
                  The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="151"/>
        </class>
    </source>