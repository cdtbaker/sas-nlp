<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="SerialCallbackContext" line="8">
            <javadoc line="8">
                Context during upcalls from object stream to class-defined
                  readObject/writeObject methods.
                  Holds object currently being deserialized and descriptor for current class.
                  This context keeps track of the thread it was constructed on, and allows
                  only a single call of defaultReadObject, readFields, defaultWriteObject
                  or writeFields which must be invoked on the same thread before the class&apos;s
                  readObject/writeObject method has returned.
                  If not set to the current thread, the getObj method throws NotActiveException.                
            </javadoc>
            <declaration name="obj" type="Object" line="20"/>
            <declaration name="desc" type="ObjectStreamClass" line="21"/>
            <declaration name="thread" type="Thread" line="22"/>
            <javadoc line="22">
                Thread this context is in use by.
                  As this only works in one thread, we do not need to worry about thread-safety.                
            </javadoc>
            <method name="SerialCallbackContext" type="constructor" line="28">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="desc" type="ObjectStreamClass"/>
                </params>
            </method>
            <method name="getObj" type="Object" line="34"/>
            <method name="getDesc" type="ObjectStreamClass" line="39"/>
            <method name="checkAndSetUsed" type="void" line="43">
                <scope line="44"/>
            </method>
            <method name="setUsed" type="void" line="51"/>
        </class>
    </source>