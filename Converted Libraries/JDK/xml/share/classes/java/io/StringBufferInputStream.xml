<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="StringBufferInputStream" line="28">
            <extends class="InputStream"/>
            <javadoc line="28">
                This class allows an application to create an input stream in
                  which the bytes read are supplied by the contents of a string.
                  Applications can also read bytes from a byte array by using a
                  &lt;code&gt;ByteArrayInputStream&lt;/code&gt;.
                  &lt;p&gt;
                  Only the low eight bits of each character in the string are used by
                  this class.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.ByteArrayInputStream                    
                </see>
                <see>
                    java.io.StringReader                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <deprecated>
                    This class does not properly convert characters into bytes.  As
                      of JDK&amp;nbsp;1.1, the preferred way to create a stream from a
                      string is via the &lt;code&gt;StringReader&lt;/code&gt; class.                    
                </deprecated>
            </javadoc>
            <declaration name="buffer" type="String" line="48"/>
            <javadoc line="48">
                The string from which bytes are read.                
            </javadoc>
            <declaration name="pos" type="int" line="53"/>
            <javadoc line="53">
                The index of the next character to read from the input stream buffer.                
                <see>
                    java.io.StringBufferInputStream#buffer                    
                </see>
            </javadoc>
            <declaration name="count" type="int" line="60"/>
            <javadoc line="60">
                The number of valid characters in the input stream buffer.                
                <see>
                    java.io.StringBufferInputStream#buffer                    
                </see>
            </javadoc>
            <javadoc line="67">
                Creates a string input stream to read data from the specified string.                
                <param>
                    s   the underlying input buffer.                    
                </param>
            </javadoc>
            <method name="StringBufferInputStream" type="constructor" line="72">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="77">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of
                  &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It returns the
                  low eight bits of the next character in this input stream&apos;s buffer.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
            </javadoc>
            <method name="read" type="int" line="91"/>
            <javadoc line="95">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes.
                  &lt;p&gt;
                  The &lt;code&gt;read&lt;/code&gt; method of
                  &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It copies the
                  low eight bits from the characters in this input stream&apos;s buffer into
                  the byte array argument.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
            </javadoc>
            <method name="read" type="int" line="111">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="124"/>
                <declaration name="s" type="String" line="127"/>
                <declaration name="cnt" type="int" line="128"/>
                <scope line="129"/>
            </method>
            <javadoc line="136">
                Skips &lt;code&gt;n&lt;/code&gt; bytes of input from this input stream. Fewer
                  bytes might be skipped if the end of the input stream is reached.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
            </javadoc>
            <method name="skip" type="long" line="143">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="154">
                Returns the number of bytes that can be read from the input
                  stream without blocking.                
                <return>
                    the value of &lt;code&gt;count&amp;nbsp;-&amp;nbsp;pos&lt;/code&gt;, which is the
                      number of bytes remaining to be read from the input buffer.                    
                </return>
            </javadoc>
            <method name="available" type="int" line="161"/>
            <javadoc line="165">
                Resets the input stream to begin reading from the first character
                  of this input stream&apos;s underlying buffer.                
            </javadoc>
            <method name="reset" type="void" line="169"/>
        </class>
    </source>