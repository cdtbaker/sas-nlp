<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="DataInputStream" line="2">
            <extends class="FilterInputStream"/>
            <implements interface="DataInput"/>
            <javadoc line="2">
                A data input stream lets an application read primitive Java data
                  types from an underlying input stream in a machine-independent
                  way. An application uses a data output stream to write data that
                  can later be read by a data input stream.
                  &lt;p&gt;
                  DataInputStream is not necessarily safe for multithreaded access.
                  Thread safety is optional and is the responsibility of users of
                  methods in this class.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.DataOutputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <javadoc line="16">
                Creates a DataInputStream that uses the specified
                  underlying InputStream.                
                <param>
                    in   the specified input stream                    
                </param>
            </javadoc>
            <method name="DataInputStream" type="constructor" line="21">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <declaration name="bytearr" type="byte" line="24"/>
            <javadoc line="24">
                working arrays initialized on demand by readUTF                
            </javadoc>
            <declaration name="chararr" type="char" line="28"/>
            <javadoc line="29">
                Reads some number of bytes from the contained input stream and
                  stores them into the buffer array &lt;code&gt;b&lt;/code&gt;. The number of
                  bytes actually read is returned as an integer. This method blocks
                  until input data is available, end of file is detected, or an
                  exception is thrown.
                  &lt;p&gt;If &lt;code&gt;b&lt;/code&gt; is null, a &lt;code&gt;NullPointerException&lt;/code&gt; is
                  thrown. If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are
                  read and &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt
                  to read at least one byte. If no byte is available because the
                  stream is at end of file, the value &lt;code&gt;-1&lt;/code&gt; is returned;
                  otherwise, at least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt;The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the
                  next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read
                  is, at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;code&gt;k&lt;/code&gt;
                  be the number of bytes actually read; these bytes will be stored in
                  elements &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[k-1]&lt;/code&gt;, leaving
                  elements &lt;code&gt;b[k]&lt;/code&gt; through &lt;code&gt;b[b.length-1]&lt;/code&gt;
                  unaffected.
                  &lt;p&gt;The &lt;code&gt;read(b)&lt;/code&gt; method has the same effect as:
                  &lt;blockquote&gt;&lt;pre&gt;
                  read(b, 0, b.length)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end
                      of the stream has been reached.                    
                </return>
                <exception>
                    IOException if the first byte cannot be read for any reason
                      other than end of file, the stream has been closed and the underlying
                      input stream does not support reading after close, or another I/O
                      error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.InputStream#read(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="read" type="int" line="63">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="66">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from the contained
                  input stream into an array of bytes.  An attempt is made to read
                  as many as &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read,
                  possibly zero. The number of bytes actually read is returned as an
                  integer.
                  &lt;p&gt; This method blocks until input data is available, end of file is
                  detected, or an exception is thrown.
                  &lt;p&gt; If &lt;code&gt;len&lt;/code&gt; is zero, then no bytes are read and
                  &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at
                  least one byte. If no byte is available because the stream is at end of
                  file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at least one
                  byte is read and stored into &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;, the
                  next one into &lt;code&gt;b[off+1]&lt;/code&gt;, and so on. The number of bytes read
                  is, at most, equal to &lt;code&gt;len&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the number of
                  bytes actually read; these bytes will be stored in elements
                  &lt;code&gt;b[off]&lt;/code&gt; through &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,
                  leaving elements &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through
                  &lt;code&gt;b[off+len-1]&lt;/code&gt; unaffected.
                  &lt;p&gt; In every case, elements &lt;code&gt;b[0]&lt;/code&gt; through
                  &lt;code&gt;b[off]&lt;/code&gt; and elements &lt;code&gt;b[off+len]&lt;/code&gt; through
                  &lt;code&gt;b[b.length-1]&lt;/code&gt; are unaffected.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end
                      of the stream has been reached.                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    IOException if the first byte cannot be read for any reason
                      other than end of file, the stream has been closed and the underlying
                      input stream does not support reading after close, or another I/O
                      error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.InputStream#read(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="read" type="int" line="106">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                See the general contract of the &lt;code&gt;readFully&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading all the bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readFully" type="void" line="124">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="127">
                See the general contract of the &lt;code&gt;readFully&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the number of bytes to read.                    
                </param>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading all the bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readFully" type="void" line="144">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="146"/>
                <scope line="147">
                    <declaration name="count" type="int" line="148"/>
                </scope>
            </method>
            <javadoc line="153">
                See the general contract of the &lt;code&gt;skipBytes&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes for this operation are read from the contained
                  input stream.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if the contained input stream does not support
                      seek, or the stream has been closed and
                      the contained input stream does not support
                      reading after close, or another I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="int" line="166">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="total" type="int" line="167"/>
                <declaration name="cur" type="int" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                See the general contract of the &lt;code&gt;readBoolean&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes for this operation are read from the contained
                  input stream.                
                <return>
                    the <code>boolean</code> value read.                    
                </return>
                <exception>
                    EOFException  if this input stream has reached the end.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readBoolean" type="boolean" line="187">
                <declaration name="ch" type="int" line="188"/>
            </method>
            <javadoc line="192">
                See the general contract of the &lt;code&gt;readByte&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next byte of this input stream as a signed 8-bit
                      <code>byte</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream has reached the end.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readByte" type="byte" line="207">
                <declaration name="ch" type="int" line="208"/>
            </method>
            <javadoc line="212">
                See the general contract of the &lt;code&gt;readUnsignedByte&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next byte of this input stream, interpreted as an
                      unsigned 8-bit number.                    
                </return>
                <exception>
                    EOFException  if this input stream has reached the end.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readUnsignedByte" type="int" line="227">
                <declaration name="ch" type="int" line="228"/>
            </method>
            <javadoc line="232">
                See the general contract of the &lt;code&gt;readShort&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next two bytes of this input stream, interpreted as a
                      signed 16-bit number.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading two bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readShort" type="short" line="248">
                <declaration name="ch1" type="int" line="249"/>
                <declaration name="ch2" type="int" line="250"/>
            </method>
            <javadoc line="254">
                See the general contract of the &lt;code&gt;readUnsignedShort&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next two bytes of this input stream, interpreted as an
                      unsigned 16-bit integer.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading two bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readUnsignedShort" type="int" line="270">
                <declaration name="ch1" type="int" line="271"/>
                <declaration name="ch2" type="int" line="272"/>
            </method>
            <javadoc line="276">
                See the general contract of the &lt;code&gt;readChar&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next two bytes of this input stream, interpreted as a
                      <code>char</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading two bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readChar" type="char" line="292">
                <declaration name="ch1" type="int" line="293"/>
                <declaration name="ch2" type="int" line="294"/>
            </method>
            <javadoc line="298">
                See the general contract of the &lt;code&gt;readInt&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next four bytes of this input stream, interpreted as an
                      <code>int</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading four bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readInt" type="int" line="314">
                <declaration name="ch1" type="int" line="315"/>
                <declaration name="ch2" type="int" line="316"/>
                <declaration name="ch3" type="int" line="317"/>
                <declaration name="ch4" type="int" line="318"/>
            </method>
            <declaration name="readBuffer" type="byte" line="322"/>
            <javadoc line="323">
                See the general contract of the &lt;code&gt;readLong&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next eight bytes of this input stream, interpreted as a
                      <code>long</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading eight bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readLong" type="long" line="339"/>
            <javadoc line="343">
                See the general contract of the &lt;code&gt;readFloat&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next four bytes of this input stream, interpreted as a
                      <code>float</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading four bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.DataInputStream#readInt()                    
                </see>
                <see>
                    java.lang.Float#intBitsToFloat(int)                    
                </see>
            </javadoc>
            <method name="readFloat" type="float" line="360"/>
            <javadoc line="363">
                See the general contract of the &lt;code&gt;readDouble&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    the next eight bytes of this input stream, interpreted as a
                      <code>double</code>.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading eight bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <see>
                    java.io.DataInputStream#readLong()                    
                </see>
                <see>
                    java.lang.Double#longBitsToDouble(long)                    
                </see>
            </javadoc>
            <method name="readDouble" type="double" line="380"/>
            <declaration name="lineBuffer" type="char" line="383"/>
            <javadoc line="384">
                See the general contract of the &lt;code&gt;readLine&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <deprecated>
                    This method does not properly convert bytes to characters.
                      As of JDK&nbsp;1.1, the preferred way to read lines of text is via the
                      <code>BufferedReader.readLine()</code> method.  Programs that use the
                      <code>DataInputStream</code> class to read lines can be converted to use
                      the <code>BufferedReader</code> class by replacing code of the form:
                      <blockquote><pre>
                      DataInputStream d =&nbsp;new&nbsp;DataInputStream(in);
                      </pre></blockquote>
                      with:
                      <blockquote><pre>
                      BufferedReader d
                      =&nbsp;new&nbsp;BufferedReader(new&nbsp;InputStreamReader(in));
                      </pre></blockquote>                    
                </deprecated>
                <return>
                    the next line of text from this input stream.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.BufferedReader#readLine()                    
                </see>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="readLine" type="String" line="409">
                <declaration name="buf" type="char" line="410"/>
                <scope line="411"/>
                <declaration name="room" type="int" line="414"/>
                <declaration name="offset" type="int" line="415"/>
                <declaration name="c" type="int" line="416"/>
                <scope line="417">
                    <declaration name="c2" type="int" line="423"/>
                    <scope line="424">
                        <scope line="425"/>
                    </scope>
                    <scope line="432"/>
                </scope>
                <scope line="442"/>
            </method>
            <javadoc line="447">
                See the general contract of the &lt;code&gt;readUTF&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.
                  &lt;p&gt;
                  Bytes
                  for this operation are read from the contained
                  input stream.                
                <return>
                    a Unicode string.                    
                </return>
                <exception>
                    EOFException  if this input stream reaches the end before
                      reading all the bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <exception>
                    UTFDataFormatException if the bytes do not represent a valid
                      modified UTF-8 encoding of a string.                    
                </exception>
                <see>
                    java.io.DataInputStream#readUTF(java.io.DataInput)                    
                </see>
            </javadoc>
            <method name="readUTF" type="String" line="464"/>
            <javadoc line="467">
                Reads from the
                  stream &lt;code&gt;in&lt;/code&gt; a representation
                  of a Unicode  character string encoded in
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt; format;
                  this string of characters is then returned as a &lt;code&gt;String&lt;/code&gt;.
                  The details of the modified UTF-8 representation
                  are  exactly the same as for the &lt;code&gt;readUTF&lt;/code&gt;
                  method of &lt;code&gt;DataInput&lt;/code&gt;.                
                <param>
                    in   a data input stream.                    
                </param>
                <return>
                    a Unicode string.                    
                </return>
                <exception>
                    EOFException            if the input stream reaches the end
                      before all the bytes.                    
                </exception>
                <exception>
                    IOException   the stream has been closed and the contained
                      input stream does not support reading after close, or
                      another I/O error occurs.                    
                </exception>
                <exception>
                    UTFDataFormatException  if the bytes do not represent a
                      valid modified UTF-8 encoding of a Unicode string.                    
                </exception>
                <see>
                    java.io.DataInputStream#readUnsignedShort()                    
                </see>
            </javadoc>
            <method name="readUTF" type="String" line="487">
                <params>
                    <param name="in" type="DataInput"/>
                </params>
                <declaration name="utflen" type="int" line="488"/>
                <declaration name="bytearr" type="byte[]" line="489"/>
                <declaration name="chararr" type="char[]" line="490"/>
                <scope line="491">
                    <declaration name="dis" type="DataInputStream" line="492"/>
                    <scope line="493"/>
                </scope>
                <scope line="500"/>
                <declaration name="c" type="int" line="504"/>
                <declaration name="count" type="int" line="505"/>
                <declaration name="chararr_count" type="int" line="506"/>
                <scope line="508"/>
                <scope line="514"/>
            </method>
        </class>
    </source>