<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <class name="FileOutputStream" line="4">
            <extends class="OutputStream"/>
            <javadoc line="4">
                A file output stream is an output stream for writing data to a
                  &lt;code&gt;File&lt;/code&gt; or to a &lt;code&gt;FileDescriptor&lt;/code&gt;. Whether or not
                  a file is available or may be created depends upon the underlying
                  platform.  Some platforms, in particular, allow a file to be opened
                  for writing by only one &lt;tt&gt;FileOutputStream&lt;/tt&gt; (or other
                  file-writing object) at a time.  In such situations the constructors in
                  this class will fail if the file involved is already open.
                  &lt;p&gt;&lt;code&gt;FileOutputStream&lt;/code&gt; is meant for writing streams of raw bytes
                  such as image data. For writing streams of characters, consider using
                  &lt;code&gt;FileWriter&lt;/code&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.File                    
                </see>
                <see>
                    java.io.FileDescriptor                    
                </see>
                <see>
                    java.io.FileInputStream                    
                </see>
                <see>
                    java.nio.file.Files#newOutputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="23"/>
            <javadoc line="23">
                The system dependent file descriptor.                
            </javadoc>
            <declaration name="append" type="boolean" line="27"/>
            <javadoc line="27">
                True if the file is opened for append.                
            </javadoc>
            <declaration name="channel" type="FileChannel" line="31"/>
            <javadoc line="31">
                The associated channel, initalized lazily.                
            </javadoc>
            <declaration name="closeLock" type="Object" line="35"/>
            <declaration name="closed" type="boolean" line="36"/>
            <declaration name="runningFinalize" type="ThreadLocal&lt;Boolean&gt;" line="37"/>
            <method name="isRunningFinalize" type="boolean" line="38">
                <declaration name="val" type="Boolean" line="39"/>
            </method>
            <javadoc line="43">
                Creates a file output stream to write to the file with the
                  specified name. A new &lt;code&gt;FileDescriptor&lt;/code&gt; object is
                  created to represent this file connection.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkWrite&lt;/code&gt;
                  method is called with &lt;code&gt;name&lt;/code&gt; as its argument.
                  &lt;p&gt;
                  If the file exists but is a directory rather than a regular file, does
                  not exist but cannot be created, or cannot be opened for any other
                  reason then a &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    name   the system-dependent filename                    
                </param>
                <exception>
                    FileNotFoundException  if the file exists but is a directory
                      rather than a regular file, does not exist but cannot
                      be created, or cannot be opened for any other reason                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkWrite</code> method denies write access
                      to the file.                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
            </javadoc>
            <method name="FileOutputStream" type="constructor" line="63">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="66">
                Creates a file output stream to write to the file with the specified
                  name.  If the second argument is &lt;code&gt;true&lt;/code&gt;, then
                  bytes will be written to the end of the file rather than the beginning.
                  A new &lt;code&gt;FileDescriptor&lt;/code&gt; object is created to represent this
                  file connection.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkWrite&lt;/code&gt;
                  method is called with &lt;code&gt;name&lt;/code&gt; as its argument.
                  &lt;p&gt;
                  If the file exists but is a directory rather than a regular file, does
                  not exist but cannot be created, or cannot be opened for any other
                  reason then a &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    name        the system-dependent file name                    
                </param>
                <param>
                    append      if <code>true</code>, then bytes will be written
                      to the end of the file rather than the beginning                    
                </param>
                <exception>
                    FileNotFoundException  if the file exists but is a directory
                      rather than a regular file, does not exist but cannot
                      be created, or cannot be opened for any other reason.                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkWrite</code> method denies write access
                      to the file.                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="FileOutputStream" type="constructor" line="91">
                <params>
                    <param name="name" type="String"/>
                    <param name="append" type="boolean"/>
                </params>
            </method>
            <javadoc line="94">
                Creates a file output stream to write to the file represented by
                  the specified &lt;code&gt;File&lt;/code&gt; object. A new
                  &lt;code&gt;FileDescriptor&lt;/code&gt; object is created to represent this
                  file connection.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkWrite&lt;/code&gt;
                  method is called with the path represented by the &lt;code&gt;file&lt;/code&gt;
                  argument as its argument.
                  &lt;p&gt;
                  If the file exists but is a directory rather than a regular file, does
                  not exist but cannot be created, or cannot be opened for any other
                  reason then a &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    file               the file to be opened for writing.                    
                </param>
                <exception>
                    FileNotFoundException  if the file exists but is a directory
                      rather than a regular file, does not exist but cannot
                      be created, or cannot be opened for any other reason                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkWrite</code> method denies write access
                      to the file.                    
                </exception>
                <see>
                    java.io.File#getPath()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
            </javadoc>
            <method name="FileOutputStream" type="constructor" line="118">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="121">
                Creates a file output stream to write to the file represented by
                  the specified &lt;code&gt;File&lt;/code&gt; object. If the second argument is
                  &lt;code&gt;true&lt;/code&gt;, then bytes will be written to the end of the file
                  rather than the beginning. A new &lt;code&gt;FileDescriptor&lt;/code&gt; object is
                  created to represent this file connection.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkWrite&lt;/code&gt;
                  method is called with the path represented by the &lt;code&gt;file&lt;/code&gt;
                  argument as its argument.
                  &lt;p&gt;
                  If the file exists but is a directory rather than a regular file, does
                  not exist but cannot be created, or cannot be opened for any other
                  reason then a &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    file               the file to be opened for writing.                    
                </param>
                <param>
                    append      if <code>true</code>, then bytes will be written
                      to the end of the file rather than the beginning                    
                </param>
                <exception>
                    FileNotFoundException  if the file exists but is a directory
                      rather than a regular file, does not exist but cannot
                      be created, or cannot be opened for any other reason                    
                </exception>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkWrite</code> method denies write access
                      to the file.                    
                </exception>
                <see>
                    java.io.File#getPath()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="FileOutputStream" type="constructor" line="149">
                <params>
                    <param name="file" type="File"/>
                    <param name="append" type="boolean"/>
                </params>
                <declaration name="name" type="String" line="150"/>
                <declaration name="security" type="SecurityManager" line="151"/>
                <scope line="152"/>
                <scope line="155"/>
            </method>
            <javadoc line="163">
                Creates a file output stream to write to the specified file
                  descriptor, which represents an existing connection to an actual
                  file in the file system.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkWrite&lt;/code&gt;
                  method is called with the file descriptor &lt;code&gt;fdObj&lt;/code&gt;
                  argument as its argument.
                  &lt;p&gt;
                  If &lt;code&gt;fdObj&lt;/code&gt; is null then a &lt;code&gt;NullPointerException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  This constructor does not throw an exception if &lt;code&gt;fdObj&lt;/code&gt;
                  is {@link java.io.FileDescriptor#valid() invalid}.
                  However, if the methods are invoked on the resulting stream to attempt
                  I/O on the stream, an &lt;code&gt;IOException&lt;/code&gt; is thrown.                
                <param>
                    fdObj   the file descriptor to be opened for writing                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkWrite</code> method denies
                      write access to the file descriptor                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)                    
                </see>
            </javadoc>
            <method name="FileOutputStream" type="constructor" line="185">
                <params>
                    <param name="fdObj" type="FileDescriptor"/>
                </params>
                <declaration name="security" type="SecurityManager" line="186"/>
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <method name="open" type="void" line="197"/>
            <javadoc line="197">
                Opens a file, with the specified name, for overwriting or appending.                
                <param>
                    name name of file to be opened                    
                </param>
                <param>
                    append whether the file is to be opened in append mode                    
                </param>
            </javadoc>
            <method name="write" type="void" line="203"/>
            <javadoc line="203">
                Writes the specified byte to this file output stream.                
                <param>
                    b   the byte to be written.                    
                </param>
                <param>
                    append   {@code true} if the write operation first
                      advances the position to the end of file                    
                </param>
            </javadoc>
            <javadoc line="210">
                Writes the specified byte to this file output stream. Implements
                  the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt;.                
                <param>
                    b   the byte to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="216">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="writeBytes" type="void" line="219"/>
            <javadoc line="219">
                Writes a sub array as a sequence of bytes.                
                <param>
                    b the data to be written                    
                </param>
                <param>
                    off the start offset in the data                    
                </param>
                <param>
                    len the number of bytes that are written                    
                </param>
                <param>
                    append {@code true} to first advance the position to the
                      end of file                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="229">
                Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array
                  to this file output stream.                
                <param>
                    b   the data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="235">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="238">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this file output stream.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="246">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="249">
                Closes this file output stream and releases any system resources
                  associated with this stream. This file output stream may no longer
                  be used for writing bytes.
                  &lt;p&gt; If this stream has an associated channel then the channel is closed
                  as well.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="259">
                <scope line="260">
                    <scope line="261"/>
                </scope>
                <scope line="266"/>
                <declaration name="useCount" type="int" line="270"/>
                <scope line="271"/>
            </method>
            <javadoc line="275">
                Returns the file descriptor associated with this stream.                
                <return>
                    the <code>FileDescriptor</code> object that represents
                      the connection to the file in the file system being used
                      by this <code>FileOutputStream</code> object.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FileDescriptor                    
                </see>
            </javadoc>
            <method name="getFD" type="FileDescriptor" line="283"/>
            <javadoc line="287">
                Returns the unique {@link java.nio.channels.FileChannel FileChannel}object associated with this file output stream. &lt;/p&gt;
                  &lt;p&gt; The initial {@link java.nio.channels.FileChannel#position()&lt;/code&gt;position&lt;code&gt;} of the returned channel will be equal to the
                  number of bytes written to the file so far unless this stream is in
                  append mode, in which case it will be equal to the size of the file.
                  Writing bytes to this stream will increment the channel&apos;s position
                  accordingly.  Changing the channel&apos;s position, either explicitly or by
                  writing, will change this stream&apos;s file position.                
                <return>
                    the file channel associated with this file output stream                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="FileChannel" line="299">
                <scope line="300">
                    <scope line="301"/>
                </scope>
            </method>
            <javadoc line="308">
                Cleans up the connection to the file, and ensures that the
                  &lt;code&gt;close&lt;/code&gt; method of this file output stream is
                  called when there are no more references to this stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FileInputStream#close()                    
                </see>
            </javadoc>
            <method name="finalize" type="void" line="315">
                <scope line="316">
                    <scope line="317"/>
                    <scope line="320">
                        <scope line="322"/>
                        <scope line="325"/>
                    </scope>
                </scope>
            </method>
            <method name="close0" type="void" line="331"/>
            <method name="initIDs" type="void" line="332"/>
            <scope line="333"/>
        </class>
    </source>