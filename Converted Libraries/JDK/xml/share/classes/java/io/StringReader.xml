<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="StringReader" line="29">
            <extends class="Reader"/>
            <javadoc line="29">
                A character stream whose source is a string.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="str" type="String" line="38"/>
            <declaration name="length" type="int" line="39"/>
            <declaration name="next" type="int" line="40"/>
            <declaration name="mark" type="int" line="41"/>
            <javadoc line="43">
                Creates a new string reader.                
                <param>
                    s  String providing the character stream.                    
                </param>
            </javadoc>
            <method name="StringReader" type="constructor" line="48">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="53">
                Check to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="54"/>
            <javadoc line="59">
                Reads a single character.                
                <return>
                    The character read, or -1 if the end of the stream has been
                      reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="67">
                <scope line="68"/>
            </method>
            <javadoc line="76">
                Reads characters into a portion of an array.                
                <param>
                    cbuf  Destination buffer                    
                </param>
                <param>
                    off   Offset at which to start writing characters                    
                </param>
                <param>
                    len   Maximum number of characters to read                    
                </param>
                <return>
                    The number of characters read, or -1 if the end of the
                      stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="88">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="89">
                    <scope line="92"/>
                    <scope line="94"/>
                    <declaration name="n" type="int" line="99"/>
                </scope>
            </method>
            <javadoc line="106">
                Skips the specified number of characters in the stream. Returns
                  the number of characters that were skipped.
                  &lt;p&gt;The &lt;code&gt;ns&lt;/code&gt; parameter may be negative, even though the
                  &lt;code&gt;skip&lt;/code&gt; method of the {@link Reader} superclass throws
                  an exception in this case. Negative values of &lt;code&gt;ns&lt;/code&gt; cause the
                  stream to skip backwards. Negative return values indicate a skip
                  backwards. It is not possible to skip backwards past the beginning of
                  the string.
                  &lt;p&gt;If the entire string has been read or skipped, then this method has
                  no effect and always returns 0.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="122">
                <params>
                    <param name="ns" type="long"/>
                </params>
                <comment line="128">
                    Bound skip by beginning and end of the source                    
                </comment>
                <scope line="123">
                    <declaration name="n" type="long" line="128"/>
                </scope>
            </method>
            <javadoc line="135">
                Tells whether this stream is ready to be read.                
                <return>
                    True if the next read() is guaranteed not to block for input                    
                </return>
                <exception>
                    IOException  If the stream is closed                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="149">
                Tells whether this stream supports the mark() operation, which it does.                
            </javadoc>
            <method name="markSupported" type="boolean" line="152"/>
            <javadoc line="156">
                Marks the present position in the stream.  Subsequent calls to reset()
                  will reposition the stream to this point.                
                <param>
                    readAheadLimit  Limit on the number of characters that may be
                      read while still preserving the mark.  Because
                      the stream&apos;s input comes from a string, there
                      is no actual limit, so this argument must not
                      be negative, but is otherwise ignored.                    
                </param>
                <exception>
                    IllegalArgumentException  If readAheadLimit is &lt; 0                    
                </exception>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="169">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
                <scope line="170"/>
                <scope line="173"/>
            </method>
            <javadoc line="179">
                Resets the stream to the most recent mark, or to the beginning of the
                  string if it has never been marked.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="185">
                <scope line="186"/>
            </method>
            <javadoc line="192">
                Closes the stream and releases any system resources associated with
                  it. Once the stream has been closed, further read(),
                  ready(), mark(), or reset() invocations will throw an IOException.
                  Closing a previously closed stream has no effect.                
            </javadoc>
            <method name="close" type="void" line="198"/>
        </class>
    </source>