<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="Writer" line="29">
            <implements interface="Appendable"/>
            <implements interface="Closeable"/>
            <implements interface="Flushable"/>
            <javadoc line="29">
                Abstract class for writing to character streams.  The only methods that a
                  subclass must implement are write(char[], int, int), flush(), and close().
                  Most subclasses, however, will override some of the methods defined here in
                  order to provide higher efficiency, additional functionality, or both.                
                <see>
                    Writer                    
                </see>
                <see>
                    BufferedWriter                    
                </see>
                <see>
                    CharArrayWriter                    
                </see>
                <see>
                    FilterWriter                    
                </see>
                <see>
                    OutputStreamWriter                    
                </see>
                <see>
                    FileWriter                    
                </see>
                <see>
                    PipedWriter                    
                </see>
                <see>
                    PrintWriter                    
                </see>
                <see>
                    StringWriter                    
                </see>
                <see>
                    Reader                    
                </see>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="writeBuffer" type="char[]" line="52"/>
            <javadoc line="52">
                Temporary buffer used to hold writes of strings and single characters                
            </javadoc>
            <declaration name="writeBufferSize" type="int" line="57"/>
            <javadoc line="57">
                Size of writeBuffer, must be &gt;= 1                
            </javadoc>
            <declaration name="lock" type="Object" line="62"/>
            <javadoc line="62">
                The object used to synchronize operations on this stream.  For
                  efficiency, a character-stream object may use an object other than
                  itself to protect critical sections.  A subclass should therefore use
                  the object in this field rather than &lt;tt&gt;this&lt;/tt&gt; or a synchronized
                  method.                
            </javadoc>
            <javadoc line="71">
                Creates a new character-stream writer whose critical sections will
                  synchronize on the writer itself.                
            </javadoc>
            <method name="Writer" type="constructor" line="75"/>
            <javadoc line="79">
                Creates a new character-stream writer whose critical sections will
                  synchronize on the given object.                
                <param>
                    lockObject to synchronize on                    
                </param>
            </javadoc>
            <method name="Writer" type="constructor" line="86">
                <params>
                    <param name="lock" type="Object"/>
                </params>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Writes a single character.  The character to be written is contained in
                  the 16 low-order bits of the given integer value; the 16 high-order bits
                  are ignored.
                  &lt;p&gt; Subclasses that intend to support efficient single-character output
                  should override this method.                
                <param>
                    cint specifying a character to be written                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="107">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="108">
                    <scope line="109"/>
                </scope>
            </method>
            <javadoc line="117">
                Writes an array of characters.                
                <param>
                    cbufArray of characters to be written                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="126">
                <params>
                    <param name="cbuf" type="char"/>
                </params>
            </method>
            <method name="write" type="void" line="130"/>
            <javadoc line="130">
                Writes a portion of an array of characters.                
                <param>
                    cbufArray of characters                    
                </param>
                <param>
                    offOffset from which to start writing characters                    
                </param>
                <param>
                    lenNumber of characters to write                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <javadoc line="147">
                Writes a string.                
                <param>
                    strString to be written                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="156">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="160">
                Writes a portion of a string.                
                <param>
                    strA String                    
                </param>
                <param>
                    offOffset from which to start writing characters                    
                </param>
                <param>
                    lenNumber of characters to write                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf &lt;tt&gt;off&lt;/tt&gt; is negative, or &lt;tt&gt;len&lt;/tt&gt; is negative,
                      or &lt;tt&gt;off+len&lt;/tt&gt; is negative or greater than the length
                      of the given string                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="180">
                <params>
                    <param name="str" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="189">
                    Don&apos;t permanently allocate very large buffers.                    
                </comment>
                <scope line="181">
                    <declaration name="cbuf" type="char" line="182"/>
                    <scope line="183">
                        <scope line="184"/>
                    </scope>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="196">
                Appends the specified character sequence to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.toString()) &lt;/pre&gt;
                  &lt;p&gt; Depending on the specification of &lt;tt&gt;toString&lt;/tt&gt; for the
                  character sequence &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be
                  appended. For instance, invoking the &lt;tt&gt;toString&lt;/tt&gt; method of a
                  character buffer will return a subsequence whose content depends upon
                  the buffer&apos;s position and limit.                
                <param>
                    csqThe character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is
                      &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are
                      appended to this writer.                    
                </param>
                <return>
                    This writer                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="Writer" line="223">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="231">
                Appends a subsequence of the specified character sequence to this writer.
                  &lt;tt&gt;Appendable&lt;/tt&gt;.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,
                  end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt; behaves in exactly the
                  same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.subSequence(start, end).toString()) &lt;/pre&gt;                
                <param>
                    csqThe character sequence from which a subsequence will be
                      appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters
                      will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four
                      characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt;.                    
                </param>
                <param>
                    startThe index of the first character in the subsequence                    
                </param>
                <param>
                    endThe index of the character following the last character in the
                      subsequence                    
                </param>
                <return>
                    This writer                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative, &lt;tt&gt;start&lt;/tt&gt;
                      is greater than &lt;tt&gt;end&lt;/tt&gt;, or &lt;tt&gt;end&lt;/tt&gt; is greater than
                      &lt;tt&gt;csq.length()&lt;/tt&gt;                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="Writer" line="267">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="cs" type="CharSequence" line="268"/>
            </method>
            <javadoc line="273">
                Appends the specified character to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(c)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(c) &lt;/pre&gt;                
                <param>
                    cThe 16-bit character to append                    
                </param>
                <return>
                    This writer                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="Writer" line="292">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="flush" type="void" line="297"/>
            <javadoc line="297">
                Flushes the stream.  If the stream has saved any characters from the
                  various write() methods in a buffer, write them immediately to their
                  intended destination.  Then, if that destination is another character or
                  byte stream, flush it.  Thus one flush() invocation will flush all the
                  buffers in a chain of Writers and OutputStreams.
                  &lt;p&gt; If the intended destination of this stream is an abstraction provided
                  by the underlying operating system, for example a file, then flushing the
                  stream guarantees only that bytes previously written to the stream are
                  passed to the operating system for writing; it does not guarantee that
                  they are actually written to a physical device such as a disk drive.                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="315"/>
            <javadoc line="315">
                Closes the stream, flushing it first. Once the stream has been closed,
                  further write() or flush() invocations will cause an IOException to be
                  thrown. Closing a previously closed stream has no effect.                
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>