<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <class name="RandomAccessFile" line="4">
            <implements interface="DataOutput"/>
            <implements interface="DataInput"/>
            <implements interface="Closeable"/>
            <javadoc line="4">
                Instances of this class support both reading and writing to a
                  random access file. A random access file behaves like a large
                  array of bytes stored in the file system. There is a kind of cursor,
                  or index into the implied array, called the &lt;em&gt;file pointer&lt;/em&gt;;
                  input operations read bytes starting at the file pointer and advance
                  the file pointer past the bytes read. If the random access file is
                  created in read/write mode, then output operations are also available;
                  output operations write bytes starting at the file pointer and advance
                  the file pointer past the bytes written. Output operations that write
                  past the current end of the implied array cause the array to be
                  extended. The file pointer can be read by the
                  &lt;code&gt;getFilePointer&lt;/code&gt; method and set by the &lt;code&gt;seek&lt;/code&gt;
                  method.
                  &lt;p&gt;
                  It is generally true of all the reading routines in this class that
                  if end-of-file is reached before the desired number of bytes has been
                  read, an &lt;code&gt;EOFException&lt;/code&gt; (which is a kind of
                  &lt;code&gt;IOException&lt;/code&gt;) is thrown. If any byte cannot be read for
                  any reason other than end-of-file, an &lt;code&gt;IOException&lt;/code&gt; other
                  than &lt;code&gt;EOFException&lt;/code&gt; is thrown. In particular, an
                  &lt;code&gt;IOException&lt;/code&gt; may be thrown if the stream has been closed.                
                <author>
                    unascribed                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="30"/>
            <declaration name="channel" type="FileChannel" line="31"/>
            <declaration name="rw" type="boolean" line="32"/>
            <declaration name="closeLock" type="Object" line="33"/>
            <declaration name="closed" type="boolean" line="34"/>
            <declaration name="O_RDONLY" type="int" line="35"/>
            <declaration name="O_RDWR" type="int" line="36"/>
            <declaration name="O_SYNC" type="int" line="37"/>
            <declaration name="O_DSYNC" type="int" line="38"/>
            <javadoc line="39">
                Creates a random access file stream to read from, and optionally
                  to write to, a file with the specified name. A new{@link FileDescriptor} object is created to represent the
                  connection to the file.
                  &lt;p&gt; The &lt;tt&gt;mode&lt;/tt&gt; argument specifies the access mode with which the
                  file is to be opened.  The permitted values and their meanings are as
                  specified for the &lt;a
                  href=&quot;#mode&quot;&gt;&lt;tt&gt;RandomAccessFile(File,String)&lt;/tt&gt;&lt;/a&gt; constructor.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method
                  is called with the &lt;code&gt;name&lt;/code&gt; argument
                  as its argument to see if read access to the file is allowed.
                  If the mode allows writing, the security manager&apos;s
                  &lt;code&gt;checkWrite&lt;/code&gt; method
                  is also called with the &lt;code&gt;name&lt;/code&gt; argument
                  as its argument to see if write access to the file is allowed.                
                <param>
                    name   the system-dependent filename                    
                </param>
                <param>
                    mode   the access <a href="#mode">mode</a>                    
                </param>
                <exception>
                    IllegalArgumentException  if the mode argument is not equal
                      to one of <tt>"r"</tt>, <tt>"rw"</tt>, <tt>"rws"</tt>, or
                      <tt>"rwd"</tt>                    
                </exception>
                <exception>
                    FileNotFoundExceptionif the mode is <tt>"r"</tt> but the given string does not
                      denote an existing regular file, or if the mode begins with
                      <tt>"rw"</tt> but the given string does not denote an
                      existing, writable regular file and a new regular file of
                      that name cannot be created, or if some other error occurs
                      while opening or creating the file                    
                </exception>
                <exception>
                    SecurityException         if a security manager exists and its
                      <code>checkRead</code> method denies read access to the file
                      or the mode is "rw" and the security manager's
                      <code>checkWrite</code> method denies write access to the file                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkRead(java.lang.String)                    
                </see>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="RandomAccessFile" type="constructor" line="76">
                <params>
                    <param name="name" type="String"/>
                    <param name="mode" type="String"/>
                </params>
            </method>
            <javadoc line="79">
                Creates a random access file stream to read from, and optionally to
                  write to, the file specified by the {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.
                  &lt;a name=&quot;mode&quot;&gt;&lt;p&gt; The &lt;tt&gt;mode&lt;/tt&gt; argument specifies the access mode
                  in which the file is to be opened.  The permitted values and their
                  meanings are:
                  &lt;blockquote&gt;&lt;table summary=&quot;Access mode permitted values and meanings&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Value&lt;/p&gt;&lt;/th&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Meaning&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;&quot;r&quot;&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; Open for reading only.  Invoking any of the &lt;tt&gt;write&lt;/tt&gt;
                  methods of the resulting object will cause an {@link java.io.IOException} to be thrown. &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;&quot;rw&quot;&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; Open for reading and writing.  If the file does not already
                  exist then an attempt will be made to create it. &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;&quot;rws&quot;&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; Open for reading and writing, as with &lt;tt&gt;&quot;rw&quot;&lt;/tt&gt;, and also
                  require that every update to the file&apos;s content or metadata be
                  written synchronously to the underlying storage device.  &lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;tt&gt;&quot;rwd&quot;&amp;nbsp;&amp;nbsp;&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt; Open for reading and writing, as with &lt;tt&gt;&quot;rw&quot;&lt;/tt&gt;, and also
                  require that every update to the file&apos;s content be written
                  synchronously to the underlying storage device. &lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  The &lt;tt&gt;&quot;rws&quot;&lt;/tt&gt; and &lt;tt&gt;&quot;rwd&quot;&lt;/tt&gt; modes work much like the {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method of
                  the {@link java.nio.channels.FileChannel} class, passing arguments of
                  &lt;tt&gt;true&lt;/tt&gt; and &lt;tt&gt;false&lt;/tt&gt;, respectively, except that they always
                  apply to every I/O operation and are therefore often more efficient.  If
                  the file resides on a local storage device then when an invocation of a
                  method of this class returns it is guaranteed that all changes made to
                  the file by that invocation will have been written to that device.  This
                  is useful for ensuring that critical information is not lost in the
                  event of a system crash.  If the file does not reside on a local device
                  then no such guarantee is made.
                  &lt;p&gt; The &lt;tt&gt;&quot;rwd&quot;&lt;/tt&gt; mode can be used to reduce the number of I/O
                  operations performed.  Using &lt;tt&gt;&quot;rwd&quot;&lt;/tt&gt; only requires updates to the
                  file&apos;s content to be written to storage; using &lt;tt&gt;&quot;rws&quot;&lt;/tt&gt; requires
                  updates to both the file&apos;s content and its metadata to be written, which
                  generally requires at least one more low-level I/O operation.
                  &lt;p&gt; If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method is
                  called with the pathname of the &lt;code&gt;file&lt;/code&gt; argument as its
                  argument to see if read access to the file is allowed.  If the mode
                  allows writing, the security manager&apos;s &lt;code&gt;checkWrite&lt;/code&gt; method is
                  also called with the path argument to see if write access to the file is
                  allowed.                
                <param>
                    file   the file object                    
                </param>
                <param>
                    mode   the access mode, as described
                      <a href="#mode">above</a>                    
                </param>
                <exception>
                    IllegalArgumentException  if the mode argument is not equal
                      to one of <tt>"r"</tt>, <tt>"rw"</tt>, <tt>"rws"</tt>, or
                      <tt>"rwd"</tt>                    
                </exception>
                <exception>
                    FileNotFoundExceptionif the mode is <tt>"r"</tt> but the given file object does
                      not denote an existing regular file, or if the mode begins
                      with <tt>"rw"</tt> but the given file object does not denote
                      an existing, writable regular file and a new regular file of
                      that name cannot be created, or if some other error occurs
                      while opening or creating the file                    
                </exception>
                <exception>
                    SecurityException         if a security manager exists and its
                      <code>checkRead</code> method denies read access to the file
                      or the mode is "rw" and the security manager's
                      <code>checkWrite</code> method denies write access to the file                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkRead(java.lang.String)                    
                </see>
                <see>
                    java.lang.SecurityManager#checkWrite(java.lang.String)                    
                </see>
                <see>
                    java.nio.channels.FileChannel#force(boolean)                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="RandomAccessFile" type="constructor" line="145">
                <params>
                    <param name="file" type="File"/>
                    <param name="mode" type="String"/>
                </params>
                <declaration name="name" type="String" line="146"/>
                <declaration name="imode" type="int" line="147"/>
                <scope line="149">
                    <scope line="152"/>
                </scope>
                <declaration name="security" type="SecurityManager" line="159"/>
                <scope line="160">
                    <scope line="162"/>
                </scope>
                <scope line="166"/>
            </method>
            <javadoc line="173">
                Returns the opaque file descriptor object associated with this
                  stream. &lt;/p&gt;                
                <return>
                    the file descriptor object associated with this stream.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FileDescriptor                    
                </see>
            </javadoc>
            <method name="getFD" type="FileDescriptor" line="180"/>
            <javadoc line="184">
                Returns the unique {@link java.nio.channels.FileChannel FileChannel}object associated with this file.
                  &lt;p&gt; The {@link java.nio.channels.FileChannel#position()&lt;/code&gt;position&lt;code&gt;} of the returned channel will always be equal to
                  this object&apos;s file-pointer offset as returned by the {@link #getFilePointer getFilePointer} method.  Changing this object&apos;s
                  file-pointer offset, whether explicitly or by reading or writing bytes,
                  will change the position of the channel, and vice versa.  Changing the
                  file&apos;s length via this object will change the length seen via the file
                  channel, and vice versa.                
                <return>
                    the file channel associated with this file                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="FileChannel" line="196">
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
            <method name="open" type="void" line="205"/>
            <javadoc line="205">
                Opens a file and returns the file descriptor.  The file is
                  opened in read-write mode if the O_RDWR bit in &lt;code&gt;mode&lt;/code&gt;
                  is true, else the file is opened as read-only.
                  If the &lt;code&gt;name&lt;/code&gt; refers to a directory, an IOException
                  is thrown.                
                <param>
                    name the name of the file                    
                </param>
                <param>
                    mode the mode flags, a combination of the O_ constants
                      defined above                    
                </param>
            </javadoc>
            <method name="read" type="int" line="216"/>
            <javadoc line="216">
                Reads a byte of data from this file. The byte is returned as an
                  integer in the range 0 to 255 (&lt;code&gt;0x00-0x0ff&lt;/code&gt;). This
                  method blocks if no input is yet available.
                  &lt;p&gt;
                  Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of
                  &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same
                  way as the {@link InputStream#read()} method of
                  &lt;code&gt;InputStream&lt;/code&gt;.                
                <return>
                    the next byte of data, or <code>-1</code> if the end of the
                      file has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs. Not thrown if
                      end-of-file has been reached.                    
                </exception>
            </javadoc>
            <method name="readBytes" type="int" line="231"/>
            <javadoc line="231">
                Reads a sub array as a sequence of bytes.                
                <param>
                    b the buffer into which the data is read.                    
                </param>
                <param>
                    off the start offset of the data.                    
                </param>
                <param>
                    len the number of bytes to read.                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="239">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this file into an
                  array of bytes. This method blocks until at least one byte of input
                  is available.
                  &lt;p&gt;
                  Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of
                  &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the
                  same way as the {@link InputStream#read(byte[],int,int)} method of
                  &lt;code&gt;InputStream&lt;/code&gt;.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in array <code>b</code>
                      at which the data is written.                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the file has been reached.                    
                </return>
                <exception>
                    IOException If the first byte cannot be read for any reason
                      other than end of file, or if the random access file has been closed, or if
                      some other I/O error occurs.                    
                </exception>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="263">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="266">
                Reads up to &lt;code&gt;b.length&lt;/code&gt; bytes of data from this file
                  into an array of bytes. This method blocks until at least one byte
                  of input is available.
                  &lt;p&gt;
                  Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of
                  &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the
                  same way as the {@link InputStream#read(byte[])} method of
                  &lt;code&gt;InputStream&lt;/code&gt;.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      this file has been reached.                    
                </return>
                <exception>
                    IOException If the first byte cannot be read for any reason
                      other than end of file, or if the random access file has been closed, or if
                      some other I/O error occurs.                    
                </exception>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="284">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="287">
                Reads &lt;code&gt;b.length&lt;/code&gt; bytes from this file into the byte
                  array, starting at the current file pointer. This method reads
                  repeatedly from the file until the requested number of bytes are
                  read. This method blocks until the requested number of bytes are
                  read, the end of the stream is detected, or an exception is thrown.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <exception>
                    EOFException  if this file reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readFully" type="void" line="298">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="301">
                Reads exactly &lt;code&gt;len&lt;/code&gt; bytes from this file into the byte
                  array, starting at the current file pointer. This method reads
                  repeatedly from the file until the requested number of bytes are
                  read. This method blocks until the requested number of bytes are
                  read, the end of the stream is detected, or an exception is thrown.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the number of bytes to read.                    
                </param>
                <exception>
                    EOFException  if this file reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readFully" type="void" line="314">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="n" type="int" line="315"/>
                <scope line="316">
                    <declaration name="count" type="int" line="317"/>
                </scope>
            </method>
            <javadoc line="323">
                Attempts to skip over &lt;code&gt;n&lt;/code&gt; bytes of input discarding the
                  skipped bytes.
                  &lt;p&gt;
                  This method may skip over some smaller number of bytes, possibly zero.
                  This may result from any of a number of conditions; reaching end of
                  file before &lt;code&gt;n&lt;/code&gt; bytes have been skipped is only one
                  possibility. This method never throws an &lt;code&gt;EOFException&lt;/code&gt;.
                  The actual number of bytes skipped is returned.  If &lt;code&gt;n&lt;/code&gt;
                  is negative, no bytes are skipped.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="int" line="337">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="pos" type="long" line="338"/>
                <declaration name="len" type="long" line="339"/>
                <declaration name="newpos" type="long" line="340"/>
                <scope line="341"/>
                <scope line="347"/>
            </method>
            <method name="write" type="void" line="353"/>
            <javadoc line="353">
                Writes the specified byte to this file. The write starts at
                  the current file pointer.                
                <param>
                    b   the <code>byte</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeBytes" type="void" line="360"/>
            <javadoc line="360">
                Writes a sub array as a sequence of bytes.                
                <param>
                    b the data to be written                    
                </param>
                <param>
                    off the start offset in the data                    
                </param>
                <param>
                    len the number of bytes that are written                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="368">
                Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array
                  to this file, starting at the current file pointer.                
                <param>
                    b   the data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="374">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="377">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this file.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="385">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="getFilePointer" type="long" line="388"/>
            <javadoc line="388">
                Returns the current offset in this file.                
                <return>
                    the offset from the beginning of the file, in bytes,
                      at which the next read or write occurs.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="seek" type="void" line="395"/>
            <javadoc line="395">
                Sets the file-pointer offset, measured from the beginning of this
                  file, at which the next read or write occurs.  The offset may be
                  set beyond the end of the file. Setting the offset beyond the end
                  of the file does not change the file length.  The file length will
                  change only by writing after the offset has been set beyond the end
                  of the file.                
                <param>
                    pos   the offset position, measured in bytes from the
                      beginning of the file, at which to set the file
                      pointer.                    
                </param>
                <exception>
                    IOException  if <code>pos</code> is less than
                      <code>0</code> or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="length" type="long" line="409"/>
            <javadoc line="409">
                Returns the length of this file.                
                <return>
                    the length of this file, measured in bytes.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="setLength" type="void" line="415"/>
            <javadoc line="415">
                Sets the length of this file.
                  &lt;p&gt; If the present length of the file as returned by the
                  &lt;code&gt;length&lt;/code&gt; method is greater than the &lt;code&gt;newLength&lt;/code&gt;
                  argument then the file will be truncated.  In this case, if the file
                  offset as returned by the &lt;code&gt;getFilePointer&lt;/code&gt; method is greater
                  than &lt;code&gt;newLength&lt;/code&gt; then after this method returns the offset
                  will be equal to &lt;code&gt;newLength&lt;/code&gt;.
                  &lt;p&gt; If the present length of the file as returned by the
                  &lt;code&gt;length&lt;/code&gt; method is smaller than the &lt;code&gt;newLength&lt;/code&gt;
                  argument then the file will be extended.  In this case, the contents of
                  the extended portion of the file are not defined.                
                <param>
                    newLength    The desired length of the file                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="432">
                Closes this random access file stream and releases any system
                  resources associated with the stream. A closed random access
                  file cannot perform input or output operations and cannot be
                  reopened.
                  &lt;p&gt; If this file has an associated channel then the channel is closed
                  as well.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="443">
                <scope line="444">
                    <scope line="445"/>
                </scope>
                <scope line="450"/>
            </method>
            <javadoc line="457">
                Reads a &lt;code&gt;boolean&lt;/code&gt; from this file. This method reads a
                  single byte from the file, starting at the current file pointer.
                  A value of &lt;code&gt;0&lt;/code&gt; represents
                  &lt;code&gt;false&lt;/code&gt;. Any other value represents &lt;code&gt;true&lt;/code&gt;.
                  This method blocks until the byte is read, the end of the stream
                  is detected, or an exception is thrown.                
                <return>
                    the <code>boolean</code> value read.                    
                </return>
                <exception>
                    EOFException  if this file has reached the end.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readBoolean" type="boolean" line="468">
                <declaration name="ch" type="int" line="469"/>
            </method>
            <javadoc line="473">
                Reads a signed eight-bit value from this file. This method reads a
                  byte from the file, starting from the current file pointer.
                  If the byte read is &lt;code&gt;b&lt;/code&gt;, where
                  &lt;code&gt;0&amp;nbsp;&amp;lt;=&amp;nbsp;b&amp;nbsp;&amp;lt;=&amp;nbsp;255&lt;/code&gt;,
                  then the result is:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (byte)(b)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the byte is read, the end of the stream
                  is detected, or an exception is thrown.                
                <return>
                    the next byte of this file as a signed eight-bit
                      <code>byte</code>.                    
                </return>
                <exception>
                    EOFException  if this file has reached the end.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readByte" type="byte" line="490">
                <declaration name="ch" type="int" line="491"/>
            </method>
            <javadoc line="495">
                Reads an unsigned eight-bit number from this file. This method reads
                  a byte from this file, starting at the current file pointer,
                  and returns that byte.
                  &lt;p&gt;
                  This method blocks until the byte is read, the end of the stream
                  is detected, or an exception is thrown.                
                <return>
                    the next byte of this file, interpreted as an unsigned
                      eight-bit number.                    
                </return>
                <exception>
                    EOFException  if this file has reached the end.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readUnsignedByte" type="int" line="507">
                <declaration name="ch" type="int" line="508"/>
            </method>
            <javadoc line="512">
                Reads a signed 16-bit number from this file. The method reads two
                  bytes from this file, starting at the current file pointer.
                  If the two bytes read, in order, are
                  &lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt;, where each of the two values is
                  between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;, inclusive, then the
                  result is equal to:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (short)((b1 &amp;lt;&amp;lt; 8) | b2)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the two bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next two bytes of this file, interpreted as a signed
                      16-bit number.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      two bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readShort" type="short" line="531">
                <declaration name="ch1" type="int" line="532"/>
                <declaration name="ch2" type="int" line="533"/>
            </method>
            <javadoc line="537">
                Reads an unsigned 16-bit number from this file. This method reads
                  two bytes from the file, starting at the current file pointer.
                  If the bytes read, in order, are
                  &lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt;, where
                  &lt;code&gt;0&amp;nbsp;&amp;lt;=&amp;nbsp;b1, b2&amp;nbsp;&amp;lt;=&amp;nbsp;255&lt;/code&gt;,
                  then the result is equal to:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (b1 &amp;lt;&amp;lt; 8) | b2
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the two bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next two bytes of this file, interpreted as an unsigned
                      16-bit integer.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      two bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readUnsignedShort" type="int" line="556">
                <declaration name="ch1" type="int" line="557"/>
                <declaration name="ch2" type="int" line="558"/>
            </method>
            <javadoc line="562">
                Reads a character from this file. This method reads two
                  bytes from the file, starting at the current file pointer.
                  If the bytes read, in order, are
                  &lt;code&gt;b1&lt;/code&gt; and &lt;code&gt;b2&lt;/code&gt;, where
                  &lt;code&gt;0&amp;nbsp;&amp;lt;=&amp;nbsp;b1,&amp;nbsp;b2&amp;nbsp;&amp;lt;=&amp;nbsp;255&lt;/code&gt;,
                  then the result is equal to:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (char)((b1 &amp;lt;&amp;lt; 8) | b2)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the two bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next two bytes of this file, interpreted as a
                      <code>char</code>.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      two bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readChar" type="char" line="581">
                <declaration name="ch1" type="int" line="582"/>
                <declaration name="ch2" type="int" line="583"/>
            </method>
            <javadoc line="587">
                Reads a signed 32-bit integer from this file. This method reads 4
                  bytes from the file, starting at the current file pointer.
                  If the bytes read, in order, are &lt;code&gt;b1&lt;/code&gt;,
                  &lt;code&gt;b2&lt;/code&gt;, &lt;code&gt;b3&lt;/code&gt;, and &lt;code&gt;b4&lt;/code&gt;, where
                  &lt;code&gt;0&amp;nbsp;&amp;lt;=&amp;nbsp;b1, b2, b3, b4&amp;nbsp;&amp;lt;=&amp;nbsp;255&lt;/code&gt;,
                  then the result is equal to:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (b1 &amp;lt;&amp;lt; 24) | (b2 &amp;lt;&amp;lt; 16) + (b3 &amp;lt;&amp;lt; 8) + b4
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the four bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next four bytes of this file, interpreted as an
                      <code>int</code>.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      four bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readInt" type="int" line="606">
                <declaration name="ch1" type="int" line="607"/>
                <declaration name="ch2" type="int" line="608"/>
                <declaration name="ch3" type="int" line="609"/>
                <declaration name="ch4" type="int" line="610"/>
            </method>
            <javadoc line="614">
                Reads a signed 64-bit integer from this file. This method reads eight
                  bytes from the file, starting at the current file pointer.
                  If the bytes read, in order, are
                  &lt;code&gt;b1&lt;/code&gt;, &lt;code&gt;b2&lt;/code&gt;, &lt;code&gt;b3&lt;/code&gt;,
                  &lt;code&gt;b4&lt;/code&gt;, &lt;code&gt;b5&lt;/code&gt;, &lt;code&gt;b6&lt;/code&gt;,
                  &lt;code&gt;b7&lt;/code&gt;, and &lt;code&gt;b8,&lt;/code&gt; where:
                  &lt;blockquote&gt;&lt;pre&gt;
                  0 &amp;lt;= b1, b2, b3, b4, b5, b6, b7, b8 &amp;lt;=255,
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  then the result is equal to:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  ((long)b1 &amp;lt;&amp;lt; 56) + ((long)b2 &amp;lt;&amp;lt; 48)
                  + ((long)b3 &amp;lt;&amp;lt; 40) + ((long)b4 &amp;lt;&amp;lt; 32)
                  + ((long)b5 &amp;lt;&amp;lt; 24) + ((long)b6 &amp;lt;&amp;lt; 16)
                  + ((long)b7 &amp;lt;&amp;lt; 8) + b8
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method blocks until the eight bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next eight bytes of this file, interpreted as a
                      <code>long</code>.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      eight bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readLong" type="long" line="641"/>
            <javadoc line="644">
                Reads a &lt;code&gt;float&lt;/code&gt; from this file. This method reads an
                  &lt;code&gt;int&lt;/code&gt; value, starting at the current file pointer,
                  as if by the &lt;code&gt;readInt&lt;/code&gt; method
                  and then converts that &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;
                  using the &lt;code&gt;intBitsToFloat&lt;/code&gt; method in class
                  &lt;code&gt;Float&lt;/code&gt;.
                  &lt;p&gt;
                  This method blocks until the four bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next four bytes of this file, interpreted as a
                      <code>float</code>.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      four bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.RandomAccessFile#readInt()                    
                </see>
                <see>
                    java.lang.Float#intBitsToFloat(int)                    
                </see>
            </javadoc>
            <method name="readFloat" type="float" line="662"/>
            <javadoc line="665">
                Reads a &lt;code&gt;double&lt;/code&gt; from this file. This method reads a
                  &lt;code&gt;long&lt;/code&gt; value, starting at the current file pointer,
                  as if by the &lt;code&gt;readLong&lt;/code&gt; method
                  and then converts that &lt;code&gt;long&lt;/code&gt; to a &lt;code&gt;double&lt;/code&gt;
                  using the &lt;code&gt;longBitsToDouble&lt;/code&gt; method in
                  class &lt;code&gt;Double&lt;/code&gt;.
                  &lt;p&gt;
                  This method blocks until the eight bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next eight bytes of this file, interpreted as a
                      <code>double</code>.                    
                </return>
                <exception>
                    EOFException  if this file reaches the end before reading
                      eight bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.RandomAccessFile#readLong()                    
                </see>
                <see>
                    java.lang.Double#longBitsToDouble(long)                    
                </see>
            </javadoc>
            <method name="readDouble" type="double" line="683"/>
            <javadoc line="686">
                Reads the next line of text from this file.  This method successively
                  reads bytes from the file, starting at the current file pointer,
                  until it reaches a line terminator or the end
                  of the file.  Each byte is converted into a character by taking the
                  byte&apos;s value for the lower eight bits of the character and setting the
                  high eight bits of the character to zero.  This method does not,
                  therefore, support the full Unicode character set.
                  &lt;p&gt; A line of text is terminated by a carriage-return character
                  (&lt;code&gt;&apos;&amp;#92;r&apos;&lt;/code&gt;), a newline character (&lt;code&gt;&apos;&amp;#92;n&apos;&lt;/code&gt;), a
                  carriage-return character immediately followed by a newline character,
                  or the end of the file.  Line-terminating characters are discarded and
                  are not included as part of the string returned.
                  &lt;p&gt; This method blocks until a newline character is read, a carriage
                  return and the byte following it are read (to see if it is a newline),
                  the end of the file is reached, or an exception is thrown.                
                <return>
                    the next line of text from this file, or null if end
                      of file is encountered before even one byte is read.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readLine" type="String" line="706">
                <declaration name="input" type="StringBuffer" line="707"/>
                <declaration name="c" type="int" line="708"/>
                <declaration name="eol" type="boolean" line="709"/>
                <scope line="710">
                    <declaration name="cur" type="long" line="718"/>
                    <scope line="719"/>
                </scope>
                <scope line="728"/>
            </method>
            <javadoc line="733">
                Reads in a string from this file. The string has been encoded
                  using a
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  format.
                  &lt;p&gt;
                  The first two bytes are read, starting from the current file
                  pointer, as if by
                  &lt;code&gt;readUnsignedShort&lt;/code&gt;. This value gives the number of
                  following bytes that are in the encoded string, not
                  the length of the resulting string. The following bytes are then
                  interpreted as bytes encoding characters in the modified UTF-8 format
                  and are converted into characters.
                  &lt;p&gt;
                  This method blocks until all the bytes are read, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    a Unicode string.                    
                </return>
                <exception>
                    EOFException            if this file reaches the end before
                      reading all the bytes.                    
                </exception>
                <exception>
                    IOException             if an I/O error occurs.                    
                </exception>
                <exception>
                    UTFDataFormatException  if the bytes do not represent
                      valid modified UTF-8 encoding of a Unicode string.                    
                </exception>
                <see>
                    java.io.RandomAccessFile#readUnsignedShort()                    
                </see>
            </javadoc>
            <method name="readUTF" type="String" line="757"/>
            <javadoc line="760">
                Writes a &lt;code&gt;boolean&lt;/code&gt; to the file as a one-byte value. The
                  value &lt;code&gt;true&lt;/code&gt; is written out as the value
                  &lt;code&gt;(byte)1&lt;/code&gt;; the value &lt;code&gt;false&lt;/code&gt; is written out
                  as the value &lt;code&gt;(byte)0&lt;/code&gt;. The write starts at
                  the current position of the file pointer.                
                <param>
                    v   a <code>boolean</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeBoolean" type="void" line="769">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <javadoc line="772">
                Writes a &lt;code&gt;byte&lt;/code&gt; to the file as a one-byte value. The
                  write starts at the current position of the file pointer.                
                <param>
                    v   a <code>byte</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeByte" type="void" line="778">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="781">
                Writes a &lt;code&gt;short&lt;/code&gt; to the file as two bytes, high byte first.
                  The write starts at the current position of the file pointer.                
                <param>
                    v   a <code>short</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeShort" type="void" line="787">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="791">
                Writes a &lt;code&gt;char&lt;/code&gt; to the file as a two-byte value, high
                  byte first. The write starts at the current position of the
                  file pointer.                
                <param>
                    v   a <code>char</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeChar" type="void" line="798">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="802">
                Writes an &lt;code&gt;int&lt;/code&gt; to the file as four bytes, high byte first.
                  The write starts at the current position of the file pointer.                
                <param>
                    v   an <code>int</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeInt" type="void" line="808">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="814">
                Writes a &lt;code&gt;long&lt;/code&gt; to the file as eight bytes, high byte first.
                  The write starts at the current position of the file pointer.                
                <param>
                    v   a <code>long</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeLong" type="void" line="820">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="830">
                Converts the float argument to an &lt;code&gt;int&lt;/code&gt; using the
                  &lt;code&gt;floatToIntBits&lt;/code&gt; method in class &lt;code&gt;Float&lt;/code&gt;,
                  and then writes that &lt;code&gt;int&lt;/code&gt; value to the file as a
                  four-byte quantity, high byte first. The write starts at the
                  current position of the file pointer.                
                <param>
                    v   a <code>float</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.lang.Float#floatToIntBits(float)                    
                </see>
            </javadoc>
            <method name="writeFloat" type="void" line="840">
                <params>
                    <param name="v" type="float"/>
                </params>
            </method>
            <javadoc line="843">
                Converts the double argument to a &lt;code&gt;long&lt;/code&gt; using the
                  &lt;code&gt;doubleToLongBits&lt;/code&gt; method in class &lt;code&gt;Double&lt;/code&gt;,
                  and then writes that &lt;code&gt;long&lt;/code&gt; value to the file as an
                  eight-byte quantity, high byte first. The write starts at the current
                  position of the file pointer.                
                <param>
                    v   a <code>double</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.lang.Double#doubleToLongBits(double)                    
                </see>
            </javadoc>
            <method name="writeDouble" type="void" line="853">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <javadoc line="856">
                Writes the string to the file as a sequence of bytes. Each
                  character in the string is written out, in sequence, by discarding
                  its high eight bits. The write starts at the current position of
                  the file pointer.                
                <param>
                    s   a string of bytes to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeBytes" type="void" line="864">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="865"/>
                <declaration name="b" type="byte[]" line="866"/>
            </method>
            <javadoc line="870">
                Writes a string to the file as a sequence of characters. Each
                  character is written to the data output stream as if by the
                  &lt;code&gt;writeChar&lt;/code&gt; method. The write starts at the current
                  position of the file pointer.                
                <param>
                    s   a <code>String</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.RandomAccessFile#writeChar(int)                    
                </see>
            </javadoc>
            <method name="writeChars" type="void" line="879">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="clen" type="int" line="880"/>
                <declaration name="blen" type="int" line="881"/>
                <declaration name="b" type="byte[]" line="882"/>
                <declaration name="c" type="char[]" line="883"/>
                <scope line="885"/>
            </method>
            <javadoc line="891">
                Writes a string to the file using
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  encoding in a machine-independent manner.
                  &lt;p&gt;
                  First, two bytes are written to the file, starting at the
                  current file pointer, as if by the
                  &lt;code&gt;writeShort&lt;/code&gt; method giving the number of bytes to
                  follow. This value is the number of bytes actually written out,
                  not the length of the string. Following the length, each character
                  of the string is output, in sequence, using the modified UTF-8 encoding
                  for each character.                
                <param>
                    str   a string to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeUTF" type="void" line="906">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <method name="initIDs" type="void" line="909"/>
            <method name="close0" type="void" line="910"/>
            <scope line="911"/>
        </class>
    </source>