<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="FilePermission" line="13">
            <extends class="Permission"/>
            <implements interface="Serializable"/>
            <javadoc line="13">
                This class represents access to a file or directory.  A FilePermission consists
                  of a pathname and a set of actions valid for that pathname.
                  &lt;P&gt;
                  Pathname is the pathname of the file or directory granted the specified
                  actions. A pathname that ends in &quot;/&quot; (where &quot;/&quot; is
                  the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;) indicates
                  all the files and directories contained in that directory. A pathname
                  that ends with &quot;/-&quot; indicates (recursively) all files
                  and subdirectories contained in that directory. A pathname consisting of
                  the special token &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; matches &lt;b&gt;any&lt;/b&gt; file.
                  &lt;P&gt;
                  Note: A pathname consisting of a single &quot;&quot; indicates all the files
                  in the current directory, while a pathname consisting of a single &quot;-&quot;
                  indicates all the files in the current directory and
                  (recursively) all files and subdirectories contained in the current
                  directory.
                  &lt;P&gt;
                  The actions to be granted are passed to the constructor in a string containing
                  a list of one or more comma-separated keywords. The possible keywords are
                  &quot;read&quot;, &quot;write&quot;, &quot;execute&quot;, &quot;delete&quot;, and &quot;readlink&quot;. Their meaning is
                  defined as follows:
                  &lt;P&gt;
                  &lt;DL&gt;
                  &lt;DT&gt; read &lt;DD&gt; read permission
                  &lt;DT&gt; write &lt;DD&gt; write permission
                  &lt;DT&gt; execute
                  &lt;DD&gt; execute permission. Allows &lt;code&gt;Runtime.exec&lt;/code&gt; to
                  be called. Corresponds to &lt;code&gt;SecurityManager.checkExec&lt;/code&gt;.
                  &lt;DT&gt; delete
                  &lt;DD&gt; delete permission. Allows &lt;code&gt;File.delete&lt;/code&gt; to
                  be called. Corresponds to &lt;code&gt;SecurityManager.checkDelete&lt;/code&gt;.
                  &lt;DT&gt; readlink
                  &lt;DD&gt; read link permission. Allows the target of a
                  &lt;a href=&quot;../nio/file/package-summary.html#links&quot;&gt;symbolic link&lt;/a&gt;
                  to be read by invoking the {@link java.nio.file.Files#readSymbolicLinkreadSymbolicLink } method.
                  &lt;/DL&gt;
                  &lt;P&gt;
                  The actions string is converted to lowercase before processing.
                  &lt;P&gt;
                  Be careful when granting FilePermissions. Think about the implications
                  of granting read and especially write access to various files and
                  directories. The &quot;&amp;lt;&amp;lt;ALL FILES&gt;&gt;&quot; permission with write action is
                  especially dangerous. This grants permission to write to the entire
                  file system. One thing this effectively allows is replacement of the
                  system binary, including the JVM runtime environment.
                  &lt;p&gt;Please note: Code can always read a file from the same
                  directory it&apos;s in (or a subdirectory of that directory); it does not
                  need explicit permission to do so.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <since>
                    1.2                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="EXECUTE" type="int" line="71"/>
            <javadoc line="71">
                Execute action.                
            </javadoc>
            <declaration name="WRITE" type="int" line="75"/>
            <javadoc line="75">
                Write action.                
            </javadoc>
            <declaration name="READ" type="int" line="79"/>
            <javadoc line="79">
                Read action.                
            </javadoc>
            <declaration name="DELETE" type="int" line="83"/>
            <javadoc line="83">
                Delete action.                
            </javadoc>
            <declaration name="READLINK" type="int" line="87"/>
            <javadoc line="87">
                Read link action.                
            </javadoc>
            <declaration name="ALL" type="int" line="91"/>
            <javadoc line="91">
                All actions (read,write,execute,delete,readlink)                
            </javadoc>
            <declaration name="NONE" type="int" line="95"/>
            <javadoc line="95">
                No actions.                
            </javadoc>
            <declaration name="mask" type="int" line="99"/>
            <declaration name="directory" type="boolean" line="100"/>
            <declaration name="recursive" type="boolean" line="101"/>
            <declaration name="actions" type="String" line="102"/>
            <javadoc line="102">
                the actions string.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="cpath" type="String" line="107"/>
            <declaration name="RECURSIVE_CHAR" type="char" line="108"/>
            <declaration name="WILD_CHAR" type="char" line="109"/>
            <declaration name="serialVersionUID" type="long" line="110"/>
            <javadoc line="111">
                initialize a FilePermission object. Common to all constructors.
                  Also called during de-serialization.                
                <param>
                    mask the actions mask to use.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="116">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="121"/>
                <anonymous_class line="127">
                    <method name="run" type="String" line="128">
                        <scope line="129">
                            <declaration name="path" type="String" line="130"/>
                            <scope line="131"/>
                            <scope line="136"/>
                        </scope>
                        <scope line="140"/>
                    </method>
                </anonymous_class>
                <declaration name="len" type="int" line="146"/>
                <declaration name="last" type="char" line="147"/>
                <scope line="148"/>
                <scope line="153"/>
                <scope line="157"/>
            </method>
            <javadoc line="160">
                Creates a new FilePermission object with the specified actions.
                  &lt;i&gt;path&lt;/i&gt; is the pathname of a file or directory, and &lt;i&gt;actions&lt;/i&gt;
                  contains a comma-separated list of the desired actions granted on the
                  file or directory. Possible actions are
                  &quot;read&quot;, &quot;write&quot;, &quot;execute&quot;, &quot;delete&quot;, and &quot;readlink&quot;.
                  &lt;p&gt;A pathname that ends in &quot;/&quot; (where &quot;/&quot; is
                  the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;)
                  indicates all the files and directories contained in that directory.
                  A pathname that ends with &quot;/-&quot; indicates (recursively) all files and
                  subdirectories contained in that directory. The special pathname
                  &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; matches any file.
                  &lt;p&gt;A pathname consisting of a single &quot;&quot; indicates all the files
                  in the current directory, while a pathname consisting of a single &quot;-&quot;
                  indicates all the files in the current directory and
                  (recursively) all files and subdirectories contained in the current
                  directory.
                  &lt;p&gt;A pathname containing an empty string represents an empty path.                
                <param>
                    path the pathname of the file/directory.                    
                </param>
                <param>
                    actions the action string.                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf actions is &lt;code&gt;null&lt;/code&gt;, empty or contains an action
                      other than the specified possible actions.                    
                </throws>
            </javadoc>
            <method name="FilePermission" type="constructor" line="183">
                <params>
                    <param name="path" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="187">
                Creates a new FilePermission object using an action mask.
                  More efficient than the FilePermission(String, String) constructor.
                  Can be used from within
                  code that needs to create a FilePermission object to pass into the
                  &lt;code&gt;implies&lt;/code&gt; method.                
                <param>
                    path the pathname of the file/directory.                    
                </param>
                <param>
                    mask the action mask to use.                    
                </param>
            </javadoc>
            <method name="FilePermission" type="constructor" line="196">
                <params>
                    <param name="path" type="String"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="200">
                Checks if this FilePermission object &quot;implies&quot; the specified permission.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof FilePermission,&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s actions are a proper subset of this
                  object&apos;s actions, and &lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s pathname is implied by this object&apos;s
                  pathname. For example, &quot;/tmp/&quot; implies &quot;/tmp/foo&quot;, since
                  &quot;/tmp/&quot; encompasses all files in the &quot;/tmp&quot; directory,
                  including the one named &quot;foo&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified permission is not
                      &lt;code&gt;null&lt;/code&gt; and is implied by this object,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="218">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="FilePermission" line="220"/>
            </method>
            <javadoc line="223">
                Checks if the Permission&apos;s actions are a proper subset of the
                  this object&apos;s actions. Returns the effective mask iff the
                  this FilePermission&apos;s path also implies that FilePermission&apos;s path.                
                <param>
                    that the FilePermission to check against.                    
                </param>
                <param>
                    exact return immediately if the masks are not equal                    
                </param>
                <return>
                    the effective mask                    
                </return>
            </javadoc>
            <method name="impliesIgnoreMask" type="boolean" line="231">
                <params>
                    <param name="that" type="FilePermission"/>
                </params>
                <scope line="232">
                    <scope line="233">
                        <scope line="234"/>
                        <scope line="237"/>
                    </scope>
                    <scope line="241">
                        <scope line="242"/>
                        <scope line="246">
                            <declaration name="last" type="int" line="247"/>
                            <scope line="249"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="255"/>
                <scope line="258"/>
            </method>
            <javadoc line="262">
                Checks two FilePermission objects for equality. Checks that &lt;i&gt;obj&lt;/i&gt; is
                  a FilePermission, and has the same pathname and actions as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if obj is a FilePermission, and has the same
                      pathname and actions as this FilePermission object,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="271">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="FilePermission" line="274"/>
            </method>
            <javadoc line="277">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="281"/>
            <javadoc line="284">
                Converts an actions String to an actions mask.                
                <param>
                    action the action string.                    
                </param>
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="289">
                <params>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="mask" type="int" line="290"/>
                <scope line="291"/>
                <scope line="294"/>
                <scope line="297"/>
                <scope line="300"/>
                <scope line="303"/>
                <scope line="306"/>
                <declaration name="a" type="char[]" line="309"/>
                <declaration name="i" type="int" line="310"/>
                <scope line="312">
                    <declaration name="c" type="char" line="313"/>
                    <declaration name="matchlen" type="int" line="315"/>
                    <scope line="316"/>
                    <scope line="320"/>
                    <scope line="324"/>
                    <scope line="328"/>
                    <scope line="332"/>
                    <scope line="336"/>
                    <declaration name="seencomma" type="boolean" line="339"/>
                    <scope line="340"/>
                </scope>
            </method>
            <javadoc line="359">
                Return the current action mask. Used by the FilePermissionCollection.                
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="363"/>
            <javadoc line="366">
                Return the canonical string representation of the actions.
                  Always returns present actions in the following order:
                  read, write, execute, delete, readlink.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="372">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="373"/>
                <declaration name="comma" type="boolean" line="374"/>
                <scope line="375"/>
                <scope line="379"/>
                <scope line="384"/>
                <scope line="389"/>
                <scope line="394"/>
            </method>
            <javadoc line="401">
                Returns the &quot;canonical string representation&quot; of the actions.
                  That is, this method always returns present actions in the following order:
                  read, write, execute, delete, readlink. For example, if this FilePermission
                  object allows both write and read actions, a call to &lt;code&gt;getActions&lt;/code&gt;
                  will return the string &quot;read,write&quot;.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="409"/>
            <javadoc line="413">
                Returns a new PermissionCollection object for storing FilePermission
                  objects.
                  &lt;p&gt;
                  FilePermission objects must be stored in a manner that allows them
                  to be inserted into the collection in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt;
                  method to be implemented in an efficient (and consistent) manner.
                  &lt;p&gt;For example, if you have two FilePermissions:
                  &lt;OL&gt;
                  &lt;LI&gt;  &lt;code&gt;&quot;/tmp/-&quot;, &quot;read&quot;&lt;/code&gt;
                  &lt;LI&gt;  &lt;code&gt;&quot;/tmp/scratch/foo&quot;, &quot;write&quot;&lt;/code&gt;
                  &lt;/OL&gt;
                  &lt;p&gt;and you are calling the &lt;code&gt;implies&lt;/code&gt; method with the FilePermission:
                  &lt;pre&gt;
                  &quot;/tmp/scratch/foo&quot;, &quot;read,write&quot;,
                  &lt;/pre&gt;
                  then the &lt;code&gt;implies&lt;/code&gt; function must
                  take into account both the &quot;/tmp/-&quot; and &quot;/tmp/scratch/foo&quot;
                  permissions, so the effective permission is &quot;read,write&quot;,
                  and &lt;code&gt;implies&lt;/code&gt; returns true. The &quot;implies&quot; semantics for
                  FilePermissions are handled properly by the PermissionCollection object
                  returned by this &lt;code&gt;newPermissionCollection&lt;/code&gt; method.                
                <return>
                    a new PermissionCollection object suitable for storing
                      FilePermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="439"/>
            <javadoc line="442">
                WriteObject is called to save the state of the FilePermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="447">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="451">
                readObject is called to restore the state of the FilePermission from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="455">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="FilePermissionCollection" line="460">
            <extends class="PermissionCollection"/>
            <implements interface="Serializable"/>
            <javadoc line="460">
                A FilePermissionCollection stores a set of FilePermission permissions.
                  FilePermission objects
                  must be stored in a manner that allows them to be inserted in any
                  order, but enable the implies function to evaluate the implies
                  method.
                  For example, if you have two FilePermissions:
                  &lt;OL&gt;
                  &lt;LI&gt; &quot;/tmp/-&quot;, &quot;read&quot;
                  &lt;LI&gt; &quot;/tmp/scratch/foo&quot;, &quot;write&quot;
                  &lt;/OL&gt;
                  And you are calling the implies function with the FilePermission:
                  &quot;/tmp/scratch/foo&quot;, &quot;read,write&quot;, then the implies function must
                  take into account both the /tmp/- and /tmp/scratch/foo
                  permissions, so the effective permission is &quot;read,write&quot;.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="perms" type="List&amp;lt;Permission&amp;gt;" line="483"/>
            <javadoc line="484">
                Create an empty FilePermissions object.                
            </javadoc>
            <method name="FilePermissionCollection" type="constructor" line="487"/>
            <javadoc line="490">
                Adds a permission to the FilePermissions. The key for the hash is
                  permission.path.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      FilePermission                    
                </exception>
                <exception>
                    SecurityException - if this FilePermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="499">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="502"/>
            </method>
            <javadoc line="506">
                Check and see if this set of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if &quot;permission&quot; is a proper subset of a permission in
                      the set, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="513">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="fp" type="FilePermission" line="515"/>
                <declaration name="desired" type="int" line="516"/>
                <declaration name="effective" type="int" line="517"/>
                <declaration name="needed" type="int" line="518"/>
                <scope line="519">
                    <declaration name="len" type="int" line="520"/>
                    <scope line="521">
                        <declaration name="x" type="FilePermission" line="522"/>
                        <scope line="523"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="532">
                Returns an enumeration of all the FilePermission objects in the
                  container.                
                <return>
                    an enumeration of all the FilePermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="537">
                <scope line="538"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="542"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="543"/>
            <javadoc line="543">
                @serialField permissions java.util.Vector
                  A list of FilePermission objects.                
            </javadoc>
            <javadoc line="548">
                @serialData &quot;permissions&quot; field (a Vector containing the FilePermissions).                
            </javadoc>
            <method name="writeObject" type="void" line="551">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="permissions" type="Vector&amp;lt;Permission&amp;gt;" line="552"/>
                <scope line="553"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="556"/>
            </method>
            <method name="readObject" type="void" line="560">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="561"/>
                <declaration name="permissions" type="Vector&amp;lt;Permission&amp;gt;" line="562"/>
            </method>
        </class>
    </source>