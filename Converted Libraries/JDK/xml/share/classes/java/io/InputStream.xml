<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="InputStream" line="2">
            <implements interface="Closeable"/>
            <javadoc line="2">
                This abstract class is the superclass of all classes representing
                  an input stream of bytes.
                  &lt;p&gt; Applications that need to define a subclass of &lt;code&gt;InputStream&lt;/code&gt;
                  must always provide a method that returns the next byte of input.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.BufferedInputStream                    
                </see>
                <see>
                    java.io.ByteArrayInputStream                    
                </see>
                <see>
                    java.io.DataInputStream                    
                </see>
                <see>
                    java.io.FilterInputStream                    
                </see>
                <see>
                    java.io.InputStream#read()                    
                </see>
                <see>
                    java.io.OutputStream                    
                </see>
                <see>
                    java.io.PushbackInputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="SKIP_BUFFER_SIZE" type="int" line="18"/>
            <declaration name="skipBuffer" type="byte[]" line="19"/>
            <method name="read" type="int" line="20"/>
            <javadoc line="20">
                Reads the next byte of data from the input stream. The value byte is
                  returned as an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0&lt;/code&gt; to
                  &lt;code&gt;255&lt;/code&gt;. If no byte is available because the end of the stream
                  has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned. This method
                  blocks until input data is available, the end of the stream is detected,
                  or an exception is thrown.
                  &lt;p&gt; A subclass must provide an implementation of this method.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <javadoc line="33">
                Reads some number of bytes from the input stream and stores them into
                  the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is
                  returned as an integer.  This method blocks until input data is
                  available, end of file is detected, or an exception is thrown.
                  &lt;p&gt; If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are read and
                  &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at
                  least one byte. If no byte is available because the stream is at the
                  end of the file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at
                  least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the
                  next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is,
                  at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the
                  number of bytes actually read; these bytes will be stored in elements
                  &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,
                  leaving elements &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through
                  &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.
                  &lt;p&gt; The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt;
                  has the same effect as: &lt;pre&gt;&lt;code&gt; read(b, 0, b.length) &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  If the first byte cannot be read for any reason
                      other than the end of the file, if the input stream has been closed, or
                      if some other I/O error occurs.                    
                </exception>
                <exception>
                    NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.io.InputStream#read(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="read" type="int" line="62">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="65">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from the input stream into
                  an array of bytes.  An attempt is made to read as many as
                  &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read.
                  The number of bytes actually read is returned as an integer.
                  &lt;p&gt; This method blocks until input data is available, end of file is
                  detected, or an exception is thrown.
                  &lt;p&gt; If &lt;code&gt;len&lt;/code&gt; is zero, then no bytes are read and
                  &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at
                  least one byte. If no byte is available because the stream is at end of
                  file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at least one
                  byte is read and stored into &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;, the
                  next one into &lt;code&gt;b[off+1]&lt;/code&gt;, and so on. The number of bytes read
                  is, at most, equal to &lt;code&gt;len&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the number of
                  bytes actually read; these bytes will be stored in elements
                  &lt;code&gt;b[off]&lt;/code&gt; through &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,
                  leaving elements &lt;code&gt;b[off+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through
                  &lt;code&gt;b[off+len-1]&lt;/code&gt; unaffected.
                  &lt;p&gt; In every case, elements &lt;code&gt;b[0]&lt;/code&gt; through
                  &lt;code&gt;b[off]&lt;/code&gt; and elements &lt;code&gt;b[off+len]&lt;/code&gt; through
                  &lt;code&gt;b[b.length-1]&lt;/code&gt; are unaffected.
                  &lt;p&gt; The &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; method
                  for class &lt;code&gt;InputStream&lt;/code&gt; simply calls the method
                  &lt;code&gt;read()&lt;/code&gt; repeatedly. If the first such call results in an
                  &lt;code&gt;IOException&lt;/code&gt;, that exception is returned from the call to
                  the &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; method.  If
                  any subsequent call to &lt;code&gt;read()&lt;/code&gt; results in a
                  &lt;code&gt;IOException&lt;/code&gt;, the exception is caught and treated as if it
                  were end of file; the bytes read up to that point are stored into
                  &lt;code&gt;b&lt;/code&gt; and the number of bytes read before the exception
                  occurred is returned. The default implementation of this method blocks
                  until the requested amount of input data &lt;code&gt;len&lt;/code&gt; has been read,
                  end of file is detected, or an exception is thrown. Subclasses are encouraged
                  to provide a more efficient implementation of this method.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in array &lt;code&gt;b&lt;/code&gt;
                      at which the data is written.                    
                </param>
                <param>
                    len   the maximum number of bytes to read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException If the first byte cannot be read for any reason
                      other than end of file, or if the input stream has been closed, or if
                      some other I/O error occurs.                    
                </exception>
                <exception>
                    NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;b.length - off&lt;/code&gt;                    
                </exception>
                <see>
                    java.io.InputStream#read()                    
                </see>
            </javadoc>
            <method name="read" type="int" line="116">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="123"/>
                <declaration name="c" type="int" line="126"/>
                <scope line="127"/>
                <declaration name="i" type="int" line="131"/>
                <scope line="132">
                    <scope line="133">
                        <scope line="135"/>
                    </scope>
                </scope>
                <scope line="141"/>
            </method>
            <javadoc line="145">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this input
                  stream. The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of reasons, end
                  up skipping over some smaller number of bytes, possibly &lt;code&gt;0&lt;/code&gt;.
                  This may result from any of a number of conditions; reaching end of file
                  before &lt;code&gt;n&lt;/code&gt; bytes have been skipped is only one possibility.
                  The actual number of bytes skipped is returned.  If &lt;code&gt;n&lt;/code&gt; is
                  negative, no bytes are skipped.
                  &lt;p&gt; The &lt;code&gt;skip&lt;/code&gt; method of this class creates a
                  byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes
                  have been read or the end of the stream has been reached. Subclasses are
                  encouraged to provide a more efficient implementation of this method.
                  For instance, the implementation may depend on the ability to seek.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if the stream does not support seek,
                      or if some other I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="163">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="remaining" type="long" line="164"/>
                <declaration name="nr" type="int" line="165"/>
                <declaration name="localSkipBuffer" type="byte[]" line="167"/>
                <scope line="168"/>
                <scope line="171">
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="180">
                Returns an estimate of the number of bytes that can be read (or
                  skipped over) from this input stream without blocking by the next
                  invocation of a method for this input stream. The next invocation
                  might be the same thread or another thread.  A single read or skip of this
                  many bytes will not block, but may read or skip fewer bytes.
                  &lt;p&gt; Note that while some implementations of {@code InputStream} will return
                  the total number of bytes in the stream, many will not.  It is
                  never correct to use the return value of this method to allocate
                  a buffer intended to hold all data in this stream.
                  &lt;p&gt; A subclass&apos; implementation of this method may choose to throw an{@link IOException} if this input stream has been closed by
                  invoking the {@link #close()} method.
                  &lt;p&gt; The {@code available} method for class {@code InputStream} always
                  returns {@code 0}.
                  &lt;p&gt; This method should be overridden by subclasses.                
                <return>
                    an estimate of the number of bytes that can be read (or skipped
                      over) from this input stream without blocking or {@code 0} when
                      it reaches the end of the input stream.                    
                </return>
                <exception>
                    IOException if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="200"/>
            <javadoc line="203">
                Closes this input stream and releases any system resources associated
                  with the stream.
                  &lt;p&gt; The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does
                  nothing.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="210"/>
            <javadoc line="212">
                Marks the current position in this input stream. A subsequent call to
                  the &lt;code&gt;reset&lt;/code&gt; method repositions this stream at the last marked
                  position so that subsequent reads re-read the same bytes.
                  &lt;p&gt; The &lt;code&gt;readlimit&lt;/code&gt; arguments tells this input stream to
                  allow that many bytes to be read before the mark position gets
                  invalidated.
                  &lt;p&gt; The general contract of &lt;code&gt;mark&lt;/code&gt; is that, if the method
                  &lt;code&gt;markSupported&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, the stream somehow
                  remembers all the bytes read after the call to &lt;code&gt;mark&lt;/code&gt; and
                  stands ready to supply those same bytes again if and whenever the method
                  &lt;code&gt;reset&lt;/code&gt; is called.  However, the stream is not required to
                  remember any data at all if more than &lt;code&gt;readlimit&lt;/code&gt; bytes are
                  read from the stream before &lt;code&gt;reset&lt;/code&gt; is called.
                  &lt;p&gt; Marking a closed stream should not have any effect on the stream.
                  &lt;p&gt; The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does
                  nothing.                
                <param>
                    readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="233">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                  &lt;p&gt; The general contract of &lt;code&gt;reset&lt;/code&gt; is:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt; If the method &lt;code&gt;markSupported&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;, then:
                  &lt;ul&gt;&lt;li&gt; If the method &lt;code&gt;mark&lt;/code&gt; has not been called since
                  the stream was created, or the number of bytes read from the stream
                  since &lt;code&gt;mark&lt;/code&gt; was last called is larger than the argument
                  to &lt;code&gt;mark&lt;/code&gt; at that last call, then an
                  &lt;code&gt;IOException&lt;/code&gt; might be thrown.
                  &lt;li&gt; If such an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the
                  stream is reset to a state such that all the bytes read since the
                  most recent call to &lt;code&gt;mark&lt;/code&gt; (or since the start of the
                  file, if &lt;code&gt;mark&lt;/code&gt; has not been called) will be resupplied
                  to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method, followed by
                  any bytes that otherwise would have been the next input data as of
                  the time of the call to &lt;code&gt;reset&lt;/code&gt;. &lt;/ul&gt;
                  &lt;li&gt; If the method &lt;code&gt;markSupported&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, then:
                  &lt;ul&gt;&lt;li&gt; The call to &lt;code&gt;reset&lt;/code&gt; may throw an
                  &lt;code&gt;IOException&lt;/code&gt;.
                  &lt;li&gt; If an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the stream
                  is reset to a fixed state that depends on the particular type of the
                  input stream and how it was created. The bytes that will be supplied
                  to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method depend on the
                  particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;
                  &lt;p&gt;The method &lt;code&gt;reset&lt;/code&gt; for class &lt;code&gt;InputStream&lt;/code&gt;
                  does nothing except throw an &lt;code&gt;IOException&lt;/code&gt;.                
                <exception>
                    IOException  if this stream has not been marked or if the
                      mark has been invalidated.                    
                </exception>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.IOException                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="270"/>
            <javadoc line="273">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods. Whether or not &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; are supported is an invariant property of a
                  particular input stream instance. The &lt;code&gt;markSupported&lt;/code&gt; method
                  of &lt;code&gt;InputStream&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this stream instance supports the mark
                      and reset methods; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="markSupported" type="boolean" line="284"/>
        </class>
    </source>