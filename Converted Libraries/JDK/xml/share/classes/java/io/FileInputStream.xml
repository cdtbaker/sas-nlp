<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.nio.channels.FileChannel"/>
        <import package="sun.nio.ch.FileChannelImpl"/>
        <class name="FileInputStream" line="4">
            <extends class="InputStream"/>
            <javadoc line="4">
                A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes
                  from a file in a file system. What files
                  are  available depends on the host environment.
                  &lt;p&gt;&lt;code&gt;FileInputStream&lt;/code&gt; is meant for reading streams of raw bytes
                  such as image data. For reading streams of characters, consider using
                  &lt;code&gt;FileReader&lt;/code&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.io.File                    
                </see>
                <see>
                    java.io.FileDescriptor                    
                </see>
                <see>
                    java.io.FileOutputStream                    
                </see>
                <see>
                    java.nio.file.Files#newInputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="fd" type="FileDescriptor" line="19"/>
            <declaration name="channel" type="FileChannel" line="20"/>
            <declaration name="closeLock" type="Object" line="21"/>
            <declaration name="closed" type="boolean" line="22"/>
            <declaration name="runningFinalize" type="ThreadLocal&lt;Boolean&gt;" line="23"/>
            <method name="isRunningFinalize" type="boolean" line="24">
                <declaration name="val" type="Boolean" line="25"/>
            </method>
            <javadoc line="29">
                Creates a &lt;code&gt;FileInputStream&lt;/code&gt; by
                  opening a connection to an actual file,
                  the file named by the path name &lt;code&gt;name&lt;/code&gt;
                  in the file system.  A new &lt;code&gt;FileDescriptor&lt;/code&gt;
                  object is created to represent this file
                  connection.
                  &lt;p&gt;
                  First, if there is a security
                  manager, its &lt;code&gt;checkRead&lt;/code&gt; method
                  is called with the &lt;code&gt;name&lt;/code&gt; argument
                  as its argument.
                  &lt;p&gt;
                  If the named file does not exist, is a directory rather than a regular
                  file, or for some other reason cannot be opened for reading then a
                  &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    name   the system-dependent file name.                    
                </param>
                <exception>
                    FileNotFoundException  if the file does not exist,
                      is a directory rather than a regular file,
                      or for some other reason cannot be opened for
                      reading.                    
                </exception>
                <exception>
                    SecurityException      if a security manager exists and its
                      <code>checkRead</code> method denies read access
                      to the file.                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkRead(java.lang.String)                    
                </see>
            </javadoc>
            <method name="FileInputStream" type="constructor" line="55">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="58">
                Creates a &lt;code&gt;FileInputStream&lt;/code&gt; by
                  opening a connection to an actual file,
                  the file named by the &lt;code&gt;File&lt;/code&gt;
                  object &lt;code&gt;file&lt;/code&gt; in the file system.
                  A new &lt;code&gt;FileDescriptor&lt;/code&gt; object
                  is created to represent this file connection.
                  &lt;p&gt;
                  First, if there is a security manager,
                  its &lt;code&gt;checkRead&lt;/code&gt; method  is called
                  with the path represented by the &lt;code&gt;file&lt;/code&gt;
                  argument as its argument.
                  &lt;p&gt;
                  If the named file does not exist, is a directory rather than a regular
                  file, or for some other reason cannot be opened for reading then a
                  &lt;code&gt;FileNotFoundException&lt;/code&gt; is thrown.                
                <param>
                    file   the file to be opened for reading.                    
                </param>
                <exception>
                    FileNotFoundException  if the file does not exist,
                      is a directory rather than a regular file,
                      or for some other reason cannot be opened for
                      reading.                    
                </exception>
                <exception>
                    SecurityException      if a security manager exists and its
                      <code>checkRead</code> method denies read access to the file.                    
                </exception>
                <see>
                    java.io.File#getPath()                    
                </see>
                <see>
                    java.lang.SecurityManager#checkRead(java.lang.String)                    
                </see>
            </javadoc>
            <method name="FileInputStream" type="constructor" line="84">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="name" type="String" line="85"/>
                <declaration name="security" type="SecurityManager" line="86"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <javadoc line="97">
                Creates a &lt;code&gt;FileInputStream&lt;/code&gt; by using the file descriptor
                  &lt;code&gt;fdObj&lt;/code&gt;, which represents an existing connection to an
                  actual file in the file system.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method is
                  called with the file descriptor &lt;code&gt;fdObj&lt;/code&gt; as its argument to
                  see if it&apos;s ok to read the file descriptor. If read access is denied
                  to the file descriptor a &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;fdObj&lt;/code&gt; is null then a &lt;code&gt;NullPointerException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  This constructor does not throw an exception if &lt;code&gt;fdObj&lt;/code&gt;
                  is {@link java.io.FileDescriptor#valid() invalid}.
                  However, if the methods are invoked on the resulting stream to attempt
                  I/O on the stream, an &lt;code&gt;IOException&lt;/code&gt; is thrown.                
                <param>
                    fdObj   the file descriptor to be opened for reading.                    
                </param>
                <throws>
                    SecurityException      if a security manager exists and its
                      <code>checkRead</code> method denies read access to the
                      file descriptor.                    
                </throws>
                <see>
                    SecurityManager#checkRead(java.io.FileDescriptor)                    
                </see>
            </javadoc>
            <method name="FileInputStream" type="constructor" line="120">
                <params>
                    <param name="fdObj" type="FileDescriptor"/>
                </params>
                <declaration name="security" type="SecurityManager" line="121"/>
                <scope line="122"/>
                <scope line="125"/>
            </method>
            <method name="open" type="void" line="131"/>
            <javadoc line="131">
                Opens the specified file for reading.                
                <param>
                    name the name of the file                    
                </param>
            </javadoc>
            <method name="read" type="int" line="136"/>
            <javadoc line="136">
                Reads a byte of data from this input stream. This method blocks
                  if no input is yet available.                
                <return>
                    the next byte of data, or <code>-1</code> if the end of the
                      file is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readBytes" type="int" line="144"/>
            <javadoc line="144">
                Reads a subarray as a sequence of bytes.                
                <param>
                    b the data to be written                    
                </param>
                <param>
                    off the start offset in the data                    
                </param>
                <param>
                    len the number of bytes that are written                    
                </param>
                <exception>
                    IOException If an I/O error has occurred.                    
                </exception>
            </javadoc>
            <javadoc line="152">
                Reads up to &lt;code&gt;b.length&lt;/code&gt; bytes of data from this input
                  stream into an array of bytes. This method blocks until some input
                  is available.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the file has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="162">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="165">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the file has been reached.                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="182">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="skip" type="long" line="185"/>
            <javadoc line="185">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from the
                  input stream.
                  &lt;p&gt;The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of
                  reasons, end up skipping over some smaller number of bytes,
                  possibly &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is negative, an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown, even though the &lt;code&gt;skip&lt;/code&gt;
                  method of the {@link InputStream} superclass does nothing in this case.
                  The actual number of bytes skipped is returned.
                  &lt;p&gt;This method may skip more bytes than are remaining in the backing
                  file. This produces no exception and the number of bytes skipped
                  may include some number of bytes that were beyond the EOF of the
                  backing file. Attempting to read from the stream after skipping past
                  the end will result in -1 indicating the end of the file.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if n is negative, if the stream does not
                      support seek, or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="205"/>
            <javadoc line="205">
                Returns an estimate of the number of remaining bytes that can be read (or
                  skipped over) from this input stream without blocking by the next
                  invocation of a method for this input stream. The next invocation might be
                  the same thread or another thread.  A single read or skip of this
                  many bytes will not block, but may read or skip fewer bytes.
                  &lt;p&gt; In some cases, a non-blocking read (or skip) may appear to be
                  blocked when it is merely slow, for example when reading large
                  files over slow networks.                
                <return>
                    an estimate of the number of remaining bytes that can be read
                      (or skipped over) from this input stream without blocking.                    
                </return>
                <exception>
                    IOException  if this file input stream has been closed by calling{@code close} or an I/O error occurs.                    
                </exception>
            </javadoc>
            <javadoc line="219">
                Closes this file input stream and releases any system resources
                  associated with the stream.
                  &lt;p&gt; If this stream has an associated channel then the channel is closed
                  as well.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="close" type="void" line="228">
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <scope line="235"/>
                <declaration name="useCount" type="int" line="239"/>
                <scope line="240"/>
            </method>
            <javadoc line="244">
                Returns the &lt;code&gt;FileDescriptor&lt;/code&gt;
                  object  that represents the connection to
                  the actual file in the file system being
                  used by this &lt;code&gt;FileInputStream&lt;/code&gt;.                
                <return>
                    the file descriptor object associated with this stream.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FileDescriptor                    
                </see>
            </javadoc>
            <method name="getFD" type="FileDescriptor" line="253"/>
            <javadoc line="257">
                Returns the unique {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream.
                  &lt;p&gt; The initial {@link java.nio.channels.FileChannel#position()&lt;/code&gt;position&lt;code&gt;} of the returned channel will be equal to the
                  number of bytes read from the file so far.  Reading bytes from this
                  stream will increment the channel&apos;s position.  Changing the channel&apos;s
                  position, either explicitly or by reading, will change this stream&apos;s
                  file position.                
                <return>
                    the file channel associated with this file input stream                    
                </return>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getChannel" type="FileChannel" line="268">
                <scope line="269">
                    <scope line="270"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="277"/>
            <method name="close0" type="void" line="278"/>
            <scope line="279"/>
            <javadoc line="282">
                Ensures that the &lt;code&gt;close&lt;/code&gt; method of this file input stream is
                  called when there are no more references to it.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FileInputStream#close()                    
                </see>
            </javadoc>
            <method name="finalize" type="void" line="288">
                <scope line="289">
                    <scope line="291"/>
                    <scope line="294"/>
                </scope>
            </method>
        </class>
    </source>