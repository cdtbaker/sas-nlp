<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PipedWriter" line="29">
            <extends class="Writer"/>
            <comment line="39">
                REMIND: identification of the read and write sides needs to be
                more sophisticated.  Either using thread groups (but what about
                pipes within a thread?) or using finalization (but it may be a                
            </comment>
            <comment line="45">
                This flag records the open status of this particular writer. It
                 is independent of the status flags defined in PipedReader. It is
                 used to do a sanity check on connect.                
            </comment>
            <javadoc line="29">
                Piped character-output streams.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="sink" type="PipedReader" line="42"/>
            <declaration name="closed" type="boolean" line="48"/>
            <javadoc line="50">
                Creates a piped writer connected to the specified piped
                  reader. Data characters written to this stream will then be
                  available as input from &lt;code&gt;snk&lt;/code&gt;.                
                <param>
                    snk   The piped reader to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="PipedWriter" type="constructor" line="58">
                <params>
                    <param name="snk" type="PipedReader"/>
                </params>
            </method>
            <javadoc line="62">
                Creates a piped writer that is not yet connected to a
                  piped reader. It must be connected to a piped reader,
                  either by the receiver or the sender, before being used.                
                <see>
                    java.io.PipedReader#connect(java.io.PipedWriter)                    
                </see>
                <see>
                    java.io.PipedWriter#connect(java.io.PipedReader)                    
                </see>
            </javadoc>
            <method name="PipedWriter" type="constructor" line="70"/>
            <javadoc line="73">
                Connects this piped writer to a receiver. If this object
                  is already connected to some other piped reader, an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;snk&lt;/code&gt; is an unconnected piped reader and
                  &lt;code&gt;src&lt;/code&gt; is an unconnected piped writer, they may
                  be connected by either the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  src.connect(snk)&lt;/pre&gt;&lt;/blockquote&gt;
                  or the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  snk.connect(src)&lt;/pre&gt;&lt;/blockquote&gt;
                  The two calls have the same effect.                
                <param>
                    snk   the piped reader to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="91">
                <params>
                    <param name="snk" type="PipedReader"/>
                </params>
                <scope line="92"/>
                <scope line="94"/>
                <scope line="96"/>
            </method>
            <javadoc line="106">
                Writes the specified &lt;code&gt;char&lt;/code&gt; to the piped output stream.
                  If a thread was reading data characters from the connected piped input
                  stream, but the thread is no longer alive, then an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  Implements the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;Writer&lt;/code&gt;.                
                <param>
                    c   the <code>char</code> to be written.                    
                </param>
                <exception>
                    IOException  if the pipe is
                      <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedReader) unconnected}, closed
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="120">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="121"/>
            </method>
            <javadoc line="127">
                Writes &lt;code&gt;len&lt;/code&gt; characters from the specified character array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this piped output stream.
                  This method blocks until all the characters are written to the output
                  stream.
                  If a thread was reading data characters from the connected piped input
                  stream, but the thread is no longer alive, then an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown.                
                <param>
                    cbuf  the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of characters to write.                    
                </param>
                <exception>
                    IOException  if the pipe is
                      <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedReader) unconnected}, closed
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="144">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Flushes this output stream and forces any buffered output characters
                  to be written out.
                  This will notify any readers that characters are waiting in the pipe.                
                <exception>
                    IOException  if the pipe is closed, or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="flush" type="void" line="160">
                <scope line="161">
                    <scope line="162"/>
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="171">
                Closes this piped output stream and releases any system resources
                  associated with this stream. This stream may no longer be used for
                  writing characters.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="178">
                <scope line="180"/>
            </method>
        </class>
    </source>