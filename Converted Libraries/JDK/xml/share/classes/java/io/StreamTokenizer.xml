<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.Arrays"/>
        <class name="StreamTokenizer" line="3">
            <javadoc line="3">
                The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and
                  parses it into &quot;tokens&quot;, allowing the tokens to be
                  read one at a time. The parsing process is controlled by a table
                  and a number of flags that can be set to various states. The
                  stream tokenizer can recognize identifiers, numbers, quoted
                  strings, and various comment styles.
                  &lt;p&gt;
                  Each byte read from the input stream is regarded as a character
                  in the range &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u00FF&apos;&lt;/code&gt;.
                  The character value is used to look up five possible attributes of
                  the character: &lt;i&gt;white space&lt;/i&gt;, &lt;i&gt;alphabetic&lt;/i&gt;,
                  &lt;i&gt;numeric&lt;/i&gt;, &lt;i&gt;string quote&lt;/i&gt;, and &lt;i&gt;comment character&lt;/i&gt;.
                  Each character can have zero or more of these attributes.
                  &lt;p&gt;
                  In addition, an instance has four flags. These flags indicate:
                  &lt;ul&gt;
                  &lt;li&gt;Whether line terminators are to be returned as tokens or treated
                  as white space that merely separates tokens.
                  &lt;li&gt;Whether C-style comments are to be recognized and skipped.
                  &lt;li&gt;Whether C++-style comments are to be recognized and skipped.
                  &lt;li&gt;Whether the characters of identifiers are converted to lowercase.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  A typical application first constructs an instance of this class,
                  sets up the syntax tables, and then repeatedly loops calling the
                  &lt;code&gt;nextToken&lt;/code&gt; method in each iteration of the loop until
                  it returns the value &lt;code&gt;TT_EOF&lt;/code&gt;.                
                <author>
                    James Gosling                    
                </author>
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_EOF                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="reader" type="Reader" line="37"/>
            <declaration name="input" type="InputStream" line="38"/>
            <declaration name="buf" type="char" line="39"/>
            <declaration name="peekc" type="int" line="40"/>
            <javadoc line="40">
                The next character to be considered by the nextToken method.  May also
                  be NEED_CHAR to indicate that a new character should be read, or SKIP_LF
                  to indicate that a new character should be read and, if it is a &apos;\n&apos;
                  character, it should be discarded and a second new character should be
                  read.                
            </javadoc>
            <declaration name="NEED_CHAR" type="int" line="48"/>
            <declaration name="SKIP_LF" type="int" line="49"/>
            <declaration name="pushedBack" type="boolean" line="50"/>
            <declaration name="forceLower" type="boolean" line="51"/>
            <declaration name="LINENO" type="int" line="52"/>
            <javadoc line="52">
                The line number of the last token read                
            </javadoc>
            <declaration name="eolIsSignificantP" type="boolean" line="56"/>
            <declaration name="slashSlashCommentsP" type="boolean" line="57"/>
            <declaration name="slashStarCommentsP" type="boolean" line="58"/>
            <declaration name="ctype" type="byte" line="59"/>
            <declaration name="CT_WHITESPACE" type="byte" line="60"/>
            <declaration name="CT_DIGIT" type="byte" line="61"/>
            <declaration name="CT_ALPHA" type="byte" line="62"/>
            <declaration name="CT_QUOTE" type="byte" line="63"/>
            <declaration name="CT_COMMENT" type="byte" line="64"/>
            <declaration name="ttype" type="int" line="65"/>
            <javadoc line="65">
                After a call to the &lt;code&gt;nextToken&lt;/code&gt; method, this field
                  contains the type of the token just read. For a single character
                  token, its value is the single character, converted to an integer.
                  For a quoted string token, its value is the quote character.
                  Otherwise, its value is one of the following:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;TT_WORD&lt;/code&gt; indicates that the token is a word.
                  &lt;li&gt;&lt;code&gt;TT_NUMBER&lt;/code&gt; indicates that the token is a number.
                  &lt;li&gt;&lt;code&gt;TT_EOL&lt;/code&gt; indicates that the end of line has been read.
                  The field can only have this value if the
                  &lt;code&gt;eolIsSignificant&lt;/code&gt; method has been called with the
                  argument &lt;code&gt;true&lt;/code&gt;.
                  &lt;li&gt;&lt;code&gt;TT_EOF&lt;/code&gt; indicates that the end of the input stream
                  has been reached.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The initial value of this field is -4.                
                <see>
                    java.io.StreamTokenizer#eolIsSignificant(boolean)                    
                </see>
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#quoteChar(int)                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_EOF                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_EOL                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_NUMBER                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_WORD                    
                </see>
            </javadoc>
            <declaration name="TT_EOF" type="int" line="92"/>
            <javadoc line="92">
                A constant indicating that the end of the stream has been read.                
            </javadoc>
            <declaration name="TT_EOL" type="int" line="96"/>
            <javadoc line="96">
                A constant indicating that the end of the line has been read.                
            </javadoc>
            <declaration name="TT_NUMBER" type="int" line="100"/>
            <javadoc line="100">
                A constant indicating that a number token has been read.                
            </javadoc>
            <declaration name="TT_WORD" type="int" line="104"/>
            <javadoc line="104">
                A constant indicating that a word token has been read.                
            </javadoc>
            <declaration name="TT_NOTHING" type="int" line="108"/>
            <declaration name="sval" type="String" line="109"/>
            <javadoc line="109">
                If the current token is a word token, this field contains a
                  string giving the characters of the word token. When the current
                  token is a quoted string token, this field contains the body of
                  the string.
                  &lt;p&gt;
                  The current token is a word when the value of the
                  &lt;code&gt;ttype&lt;/code&gt; field is &lt;code&gt;TT_WORD&lt;/code&gt;. The current token is
                  a quoted string token when the value of the &lt;code&gt;ttype&lt;/code&gt; field is
                  a quote character.
                  &lt;p&gt;
                  The initial value of this field is null.                
                <see>
                    java.io.StreamTokenizer#quoteChar(int)                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_WORD                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <declaration name="nval" type="double" line="126"/>
            <javadoc line="126">
                If the current token is a number, this field contains the value
                  of that number. The current token is a number when the value of
                  the &lt;code&gt;ttype&lt;/code&gt; field is &lt;code&gt;TT_NUMBER&lt;/code&gt;.
                  &lt;p&gt;
                  The initial value of this field is 0.0.                
                <see>
                    java.io.StreamTokenizer#TT_NUMBER                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <javadoc line="136">
                Private constructor that initializes everything except the streams.                
            </javadoc>
            <method name="StreamTokenizer" type="constructor" line="139"/>
            <javadoc line="149">
                Creates a stream tokenizer that parses the specified input
                  stream. The stream tokenizer is initialized to the following
                  default state:
                  &lt;ul&gt;
                  &lt;li&gt;All byte values &lt;code&gt;&apos;A&apos;&lt;/code&gt; through &lt;code&gt;&apos;Z&apos;&lt;/code&gt;,
                  &lt;code&gt;&apos;a&apos;&lt;/code&gt; through &lt;code&gt;&apos;z&apos;&lt;/code&gt;, and
                  &lt;code&gt;&apos;&amp;#92;u00A0&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u00FF&apos;&lt;/code&gt; are
                  considered to be alphabetic.
                  &lt;li&gt;All byte values &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt; are considered to be white space.
                  &lt;li&gt;&lt;code&gt;&apos;/&apos;&lt;/code&gt; is a comment character.
                  &lt;li&gt;Single quote &lt;code&gt;&apos;&amp;#92;&apos;&apos;&lt;/code&gt; and double quote &lt;code&gt;&apos;&quot;&apos;&lt;/code&gt;
                  are string quote characters.
                  &lt;li&gt;Numbers are parsed.
                  &lt;li&gt;Ends of lines are treated as white space, not as separate tokens.
                  &lt;li&gt;C-style and C++-style comments are not recognized.
                  &lt;/ul&gt;                
                <deprecated>
                    As of JDK version 1.1, the preferred way to tokenize an
                      input stream is to convert it into a character stream, for example:
                      <blockquote><pre>
                      Reader r = new BufferedReader(new InputStreamReader(is));
                      StreamTokenizer st = new StreamTokenizer(r);
                      </pre></blockquote>                    
                </deprecated>
                <param>
                    is        an input stream.                    
                </param>
                <see>
                    java.io.BufferedReader                    
                </see>
                <see>
                    java.io.InputStreamReader                    
                </see>
                <see>
                    java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)                    
                </see>
            </javadoc>
            <method name="StreamTokenizer" type="constructor" line="178">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="180"/>
            </method>
            <javadoc line="185">
                Create a tokenizer that parses the given character stream.                
                <param>
                    r  a Reader object providing the input stream.                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="StreamTokenizer" type="constructor" line="190">
                <params>
                    <param name="r" type="Reader"/>
                </params>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Resets this tokenizer&apos;s syntax table so that all characters are
                  &quot;ordinary.&quot; See the &lt;code&gt;ordinaryChar&lt;/code&gt; method
                  for more information on a character being ordinary.                
                <see>
                    java.io.StreamTokenizer#ordinaryChar(int)                    
                </see>
            </javadoc>
            <method name="resetSyntax" type="void" line="203"/>
            <javadoc line="206">
                Specifies that all characters &lt;i&gt;c&lt;/i&gt; in the range
                  &lt;code&gt;low&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;i&gt;c&lt;/i&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;high&lt;/code&gt;
                  are word constituents. A word token consists of a word constituent
                  followed by zero or more word constituents or number constituents.                
                <param>
                    low   the low end of the range.                    
                </param>
                <param>
                    hi    the high end of the range.                    
                </param>
            </javadoc>
            <method name="wordChars" type="void" line="214">
                <params>
                    <param name="low" type="int"/>
                    <param name="hi" type="int"/>
                </params>
            </method>
            <javadoc line="219">
                Specifies that all characters &lt;i&gt;c&lt;/i&gt; in the range
                  &lt;code&gt;low&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;i&gt;c&lt;/i&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;high&lt;/code&gt;
                  are white space characters. White space characters serve only to
                  separate tokens in the input stream.
                  &lt;p&gt;Any other attribute settings for the characters in the specified
                  range are cleared.                
                <param>
                    low   the low end of the range.                    
                </param>
                <param>
                    hi    the high end of the range.                    
                </param>
            </javadoc>
            <method name="whitespaceChars" type="void" line="229">
                <params>
                    <param name="low" type="int"/>
                    <param name="hi" type="int"/>
                </params>
            </method>
            <javadoc line="234">
                Specifies that all characters &lt;i&gt;c&lt;/i&gt; in the range
                  &lt;code&gt;low&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;i&gt;c&lt;/i&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;high&lt;/code&gt;
                  are &quot;ordinary&quot; in this tokenizer. See the
                  &lt;code&gt;ordinaryChar&lt;/code&gt; method for more information on a
                  character being ordinary.                
                <param>
                    low   the low end of the range.                    
                </param>
                <param>
                    hi    the high end of the range.                    
                </param>
                <see>
                    java.io.StreamTokenizer#ordinaryChar(int)                    
                </see>
            </javadoc>
            <method name="ordinaryChars" type="void" line="244">
                <params>
                    <param name="low" type="int"/>
                    <param name="hi" type="int"/>
                </params>
            </method>
            <javadoc line="249">
                Specifies that the character argument is &quot;ordinary&quot;
                  in this tokenizer. It removes any special significance the
                  character has as a comment character, word component, string
                  delimiter, white space, or number character. When such a character
                  is encountered by the parser, the parser treats it as a
                  single-character token and sets &lt;code&gt;ttype&lt;/code&gt; field to the
                  character value.
                  &lt;p&gt;Making a line terminator character &quot;ordinary&quot; may interfere
                  with the ability of a &lt;code&gt;StreamTokenizer&lt;/code&gt; to count
                  lines. The &lt;code&gt;lineno&lt;/code&gt; method may no longer reflect
                  the presence of such terminator characters in its line count.                
                <param>
                    ch   the character.                    
                </param>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="ordinaryChar" type="void" line="264">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="267">
                Specified that the character argument starts a single-line
                  comment. All characters from the comment character to the end of
                  the line are ignored by this stream tokenizer.
                  &lt;p&gt;Any other attribute settings for the specified character are cleared.                
                <param>
                    ch   the character.                    
                </param>
            </javadoc>
            <method name="commentChar" type="void" line="274">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="277">
                Specifies that matching pairs of this character delimit string
                  constants in this tokenizer.
                  &lt;p&gt;
                  When the &lt;code&gt;nextToken&lt;/code&gt; method encounters a string
                  constant, the &lt;code&gt;ttype&lt;/code&gt; field is set to the string
                  delimiter and the &lt;code&gt;sval&lt;/code&gt; field is set to the body of
                  the string.
                  &lt;p&gt;
                  If a string quote character is encountered, then a string is
                  recognized, consisting of all characters after (but not including)
                  the string quote character, up to (but not including) the next
                  occurrence of that same string quote character, or a line
                  terminator, or end of file. The usual escape sequences such as
                  &lt;code&gt;&quot;&amp;#92;n&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;#92;t&quot;&lt;/code&gt; are recognized and
                  converted to single characters as the string is parsed.
                  &lt;p&gt;Any other attribute settings for the specified character are cleared.                
                <param>
                    ch   the character.                    
                </param>
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#sval                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="quoteChar" type="void" line="299">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="302">
                Specifies that numbers should be parsed by this tokenizer. The
                  syntax table of this tokenizer is modified so that each of the twelve
                  characters:
                  &lt;blockquote&gt;&lt;pre&gt;
                  0 1 2 3 4 5 6 7 8 9 . -
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  has the &quot;numeric&quot; attribute.
                  &lt;p&gt;
                  When the parser encounters a word token that has the format of a
                  double precision floating-point number, it treats the token as a
                  number rather than a word, by setting the &lt;code&gt;ttype&lt;/code&gt;
                  field to the value &lt;code&gt;TT_NUMBER&lt;/code&gt; and putting the numeric
                  value of the token into the &lt;code&gt;nval&lt;/code&gt; field.                
                <see>
                    java.io.StreamTokenizer#nval                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_NUMBER                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="parseNumbers" type="void" line="321"/>
            <javadoc line="326">
                Determines whether or not ends of line are treated as tokens.
                  If the flag argument is true, this tokenizer treats end of lines
                  as tokens; the &lt;code&gt;nextToken&lt;/code&gt; method returns
                  &lt;code&gt;TT_EOL&lt;/code&gt; and also sets the &lt;code&gt;ttype&lt;/code&gt; field to
                  this value when an end of line is read.
                  &lt;p&gt;
                  A line is a sequence of characters ending with either a
                  carriage-return character (&lt;code&gt;&apos;&amp;#92;r&apos;&lt;/code&gt;) or a newline
                  character (&lt;code&gt;&apos;&amp;#92;n&apos;&lt;/code&gt;). In addition, a carriage-return
                  character followed immediately by a newline character is treated
                  as a single end-of-line token.
                  &lt;p&gt;
                  If the &lt;code&gt;flag&lt;/code&gt; is false, end-of-line characters are
                  treated as white space and serve only to separate tokens.                
                <param>
                    flag   <code>true</code> indicates that end-of-line characters
                      are separate tokens; <code>false</code> indicates that
                      end-of-line characters are white space.                    
                </param>
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_EOL                    
                </see>
            </javadoc>
            <method name="eolIsSignificant" type="void" line="348">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="351">
                Determines whether or not the tokenizer recognizes C-style comments.
                  If the flag argument is &lt;code&gt;true&lt;/code&gt;, this stream tokenizer
                  recognizes C-style comments. All text between successive
                  occurrences of &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;&amp;#47;&lt;/code&gt; are discarded.
                  &lt;p&gt;
                  If the flag argument is &lt;code&gt;false&lt;/code&gt;, then C-style comments
                  are not treated specially.                
                <param>
                    flag   <code>true</code> indicates to recognize and ignore
                      C-style comments.                    
                </param>
            </javadoc>
            <method name="slashStarComments" type="void" line="362">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="365">
                Determines whether or not the tokenizer recognizes C++-style comments.
                  If the flag argument is &lt;code&gt;true&lt;/code&gt;, this stream tokenizer
                  recognizes C++-style comments. Any occurrence of two consecutive
                  slash characters (&lt;code&gt;&apos;/&apos;&lt;/code&gt;) is treated as the beginning of
                  a comment that extends to the end of the line.
                  &lt;p&gt;
                  If the flag argument is &lt;code&gt;false&lt;/code&gt;, then C++-style
                  comments are not treated specially.                
                <param>
                    flag   <code>true</code> indicates to recognize and ignore
                      C++-style comments.                    
                </param>
            </javadoc>
            <method name="slashSlashComments" type="void" line="377">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="380">
                Determines whether or not word token are automatically lowercased.
                  If the flag argument is &lt;code&gt;true&lt;/code&gt;, then the value in the
                  &lt;code&gt;sval&lt;/code&gt; field is lowercased whenever a word token is
                  returned (the &lt;code&gt;ttype&lt;/code&gt; field has the
                  value &lt;code&gt;TT_WORD&lt;/code&gt; by the &lt;code&gt;nextToken&lt;/code&gt; method
                  of this tokenizer.
                  &lt;p&gt;
                  If the flag argument is &lt;code&gt;false&lt;/code&gt;, then the
                  &lt;code&gt;sval&lt;/code&gt; field is not modified.                
                <param>
                    fl   <code>true</code> indicates that all word tokens should
                      be lowercased.                    
                </param>
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
                <see>
                    java.io.StreamTokenizer#TT_WORD                    
                </see>
            </javadoc>
            <method name="lowerCaseMode" type="void" line="396">
                <params>
                    <param name="fl" type="boolean"/>
                </params>
            </method>
            <javadoc line="399">
                Read the next character                
            </javadoc>
            <method name="read" type="int" line="402"/>
            <javadoc line="407">
                Parses the next token from the input stream of this tokenizer.
                  The type of the next token is returned in the &lt;code&gt;ttype&lt;/code&gt;
                  field. Additional information about the token may be in the
                  &lt;code&gt;nval&lt;/code&gt; field or the &lt;code&gt;sval&lt;/code&gt; field of this
                  tokenizer.
                  &lt;p&gt;
                  Typical clients of this
                  class first set up the syntax tables and then sit in a loop
                  calling nextToken to parse successive tokens until TT_EOF
                  is returned.                
                <return>
                    the value of the <code>ttype</code> field.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.StreamTokenizer#nval                    
                </see>
                <see>
                    java.io.StreamTokenizer#sval                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="nextToken" type="int" line="424">
                <scope line="425"/>
                <declaration name="ct" type="byte" line="429"/>
                <declaration name="c" type="int" line="431"/>
                <scope line="433"/>
                <scope line="438"/>
                <declaration name="ctype" type="int" line="444"/>
                <scope line="445">
                    <scope line="446">
                        <scope line="448"/>
                    </scope>
                    <scope line="455">
                        <scope line="456">
                            <scope line="458"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="467">
                    <declaration name="neg" type="boolean" line="468"/>
                    <scope line="469">
                        <scope line="471"/>
                    </scope>
                    <declaration name="v" type="double" line="477"/>
                    <declaration name="decexp" type="int" line="478"/>
                    <declaration name="seendot" type="int" line="479"/>
                    <scope line="480">
                        <scope line="482"/>
                    </scope>
                    <scope line="490">
                        <declaration name="denom" type="double" line="491"/>
                        <scope line="493"/>
                    </scope>
                </scope>
                <scope line="502">
                    <declaration name="i" type="int" line="503"/>
                    <scope line="504">
                        <scope line="505"/>
                    </scope>
                </scope>
                <scope line="518">
                    <declaration name="i" type="int" line="520"/>
                    <declaration name="d" type="int" line="521"/>
                    <scope line="522">
                        <scope line="523">
                            <declaration name="first" type="int" line="525"/>
                            <scope line="526">
                                <declaration name="c2" type="int" line="528"/>
                                <scope line="529">
                                    <scope line="532"/>
                                </scope>
                            </scope>
                            <scope line="540"/>
                        </scope>
                        <scope line="567"/>
                        <scope line="571"/>
                    </scope>
                </scope>
                <scope line="580">
                    <scope line="582">
                        <declaration name="prevc" type="int" line="583"/>
                        <scope line="584">
                            <scope line="585">
                                <scope line="588"/>
                            </scope>
                            <scope line="592">
                                <scope line="593"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="603"/>
                    <scope line="608">
                        <scope line="609"/>
                        <scope line="614"/>
                    </scope>
                </scope>
                <scope line="620"/>
            </method>
            <javadoc line="627">
                Causes the next call to the &lt;code&gt;nextToken&lt;/code&gt; method of this
                  tokenizer to return the current value in the &lt;code&gt;ttype&lt;/code&gt;
                  field, and not to modify the value in the &lt;code&gt;nval&lt;/code&gt; or
                  &lt;code&gt;sval&lt;/code&gt; field.                
                <see>
                    java.io.StreamTokenizer#nextToken()                    
                </see>
                <see>
                    java.io.StreamTokenizer#nval                    
                </see>
                <see>
                    java.io.StreamTokenizer#sval                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="pushBack" type="void" line="637"/>
            <javadoc line="640">
                Return the current line number.                
                <return>
                    the current line number of this stream tokenizer.                    
                </return>
            </javadoc>
            <method name="lineno" type="int" line="644"/>
            <javadoc line="647">
                Returns the string representation of the current stream token and
                  the line number it occurs on.
                  &lt;p&gt;The precise string returned is unspecified, although the following
                  example can be considered typical:
                  &lt;blockquote&gt;&lt;pre&gt;Token[&apos;a&apos;], line 10&lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    a string representation of the token                    
                </return>
                <see>
                    java.io.StreamTokenizer#nval                    
                </see>
                <see>
                    java.io.StreamTokenizer#sval                    
                </see>
                <see>
                    java.io.StreamTokenizer#ttype                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="658">
                <declaration name="ret" type="String" line="659"/>
                <scope line="677">
                    <scope line="678"/>
                    <declaration name="s" type="char" line="682"/>
                </scope>
            </method>
        </class>
    </source>