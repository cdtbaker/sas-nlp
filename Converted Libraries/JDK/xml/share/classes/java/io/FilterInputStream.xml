<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="FilterInputStream" line="2">
            <extends class="InputStream"/>
            <javadoc line="2">
                A &lt;code&gt;FilterInputStream&lt;/code&gt; contains
                  some other input stream, which it uses as
                  its  basic source of data, possibly transforming
                  the data along the way or providing  additional
                  functionality. The class &lt;code&gt;FilterInputStream&lt;/code&gt;
                  itself simply overrides all  methods of
                  &lt;code&gt;InputStream&lt;/code&gt; with versions that
                  pass all requests to the contained  input
                  stream. Subclasses of &lt;code&gt;FilterInputStream&lt;/code&gt;
                  may further override some of  these methods
                  and may also provide additional methods
                  and fields.                
                <author>
                    Jonathan Payne                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="in" type="InputStream" line="19"/>
            <javadoc line="19">
                The input stream to be filtered.                
            </javadoc>
            <javadoc line="23">
                Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;
                  by assigning the  argument &lt;code&gt;in&lt;/code&gt;
                  to the field &lt;code&gt;this.in&lt;/code&gt; so as
                  to remember it for later use.                
                <param>
                    in   the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if
                      this instance is to be created without an underlying stream.                    
                </param>
            </javadoc>
            <method name="FilterInputStream" type="constructor" line="31">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="34">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data
                  is available, the end of the stream is detected, or an exception
                  is thrown.
                  &lt;p&gt;
                  This method
                  simply performs &lt;code&gt;in.read()&lt;/code&gt; and returns the result.                
                <return>
                    the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="read" type="int" line="50"/>
            <javadoc line="53">
                Reads up to &lt;code&gt;byte.length&lt;/code&gt; bytes of data from this
                  input stream into an array of bytes. This method blocks until some
                  input is available.
                  &lt;p&gt;
                  This method simply performs the call
                  &lt;code&gt;read(b, 0, b.length)&lt;/code&gt; and returns
                  the  result. It is important that it does
                  &lt;i&gt;not&lt;/i&gt; do &lt;code&gt;in.read(b)&lt;/code&gt; instead;
                  certain subclasses of  &lt;code&gt;FilterInputStream&lt;/code&gt;
                  depend on the implementation strategy actually
                  used.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#read(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="read" type="int" line="72">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="75">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
                  into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until some input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.
                  &lt;p&gt;
                  This method simply performs &lt;code&gt;in.read(b, off, len)&lt;/code&gt;
                  and returns the result.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array &lt;code&gt;b&lt;/code&gt;                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
                      &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
                      &lt;code&gt;b.length - off&lt;/code&gt;                    
                </exception>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="read" type="int" line="96">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from the
                  input stream. The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of
                  reasons, end up skipping over some smaller number of bytes,
                  possibly &lt;code&gt;0&lt;/code&gt;. The actual number of bytes skipped is
                  returned.
                  &lt;p&gt;
                  This method simply performs &lt;code&gt;in.skip(n)&lt;/code&gt;.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the actual number of bytes skipped.                    
                </return>
                <exception>
                    IOException  if the stream does not support seek,
                      or if some other I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="112">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
            <javadoc line="115">
                Returns an estimate of the number of bytes that can be read (or
                  skipped over) from this input stream without blocking by the next
                  caller of a method for this input stream. The next caller might be
                  the same thread or another thread.  A single read or skip of this
                  many bytes will not block, but may read or skip fewer bytes.
                  &lt;p&gt;
                  This method returns the result of {@link #in in}.available().                
                <return>
                    an estimate of the number of bytes that can be read (or skipped
                      over) from this input stream without blocking.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="available" type="int" line="127"/>
            <javadoc line="130">
                Closes this input stream and releases any system resources
                  associated with the stream.
                  This
                  method simply performs &lt;code&gt;in.close()&lt;/code&gt;.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
            </javadoc>
            <method name="close" type="void" line="138"/>
            <javadoc line="141">
                Marks the current position in this input stream. A subsequent
                  call to the &lt;code&gt;reset&lt;/code&gt; method repositions this stream at
                  the last marked position so that subsequent reads re-read the same bytes.
                  &lt;p&gt;
                  The &lt;code&gt;readlimit&lt;/code&gt; argument tells this input stream to
                  allow that many bytes to be read before the mark position gets
                  invalidated.
                  &lt;p&gt;
                  This method simply performs &lt;code&gt;in.mark(readlimit)&lt;/code&gt;.                
                <param>
                    readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.FilterInputStream#reset()                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="156">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                  &lt;p&gt;
                  This method
                  simply performs &lt;code&gt;in.reset()&lt;/code&gt;.
                  &lt;p&gt;
                  Stream marks are intended to be used in
                  situations where you need to read ahead a little to see what&apos;s in
                  the stream. Often this is most easily done by invoking some
                  general parser. If the stream is of the type handled by the
                  parse, it just chugs along happily. If the stream is not of
                  that type, the parser should toss an exception when it fails.
                  If this happens within readlimit bytes, it allows the outer
                  code to reset the stream and try another parser.                
                <exception>
                    IOException  if the stream has not been marked or if the
                      mark has been invalidated.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.FilterInputStream#mark(int)                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="179"/>
            <javadoc line="182">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt;
                  and &lt;code&gt;reset&lt;/code&gt; methods.
                  This method
                  simply performs &lt;code&gt;in.markSupported()&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this stream type supports the
                      &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; method;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="markSupported" type="boolean" line="194"/>
        </class>
    </source>