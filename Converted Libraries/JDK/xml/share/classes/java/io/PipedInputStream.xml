<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PipedInputStream" line="2">
            <extends class="InputStream"/>
            <javadoc line="2">
                A piped input stream should be connected
                  to a piped output stream; the piped  input
                  stream then provides whatever data bytes
                  are written to the piped output  stream.
                  Typically, data is read from a &lt;code&gt;PipedInputStream&lt;/code&gt;
                  object by one thread  and data is written
                  to the corresponding &lt;code&gt;PipedOutputStream&lt;/code&gt;
                  by some  other thread. Attempting to use
                  both objects from a single thread is not
                  recommended, as it may deadlock the thread.
                  The piped input stream contains a buffer,
                  decoupling read operations from write operations,
                  within limits.
                  A pipe is said to be &lt;a name=BROKEN&gt; &lt;i&gt;broken&lt;/i&gt; &lt;/a&gt; if a
                  thread that was providing data bytes to the connected
                  piped output stream is no longer alive.                
                <author>
                    James Gosling                    
                </author>
                <see>
                    java.io.PipedOutputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="closedByWriter" type="boolean" line="24"/>
            <declaration name="closedByReader" type="boolean" line="25"/>
            <declaration name="connected" type="boolean" line="26"/>
            <declaration name="readSide" type="Thread" line="27"/>
            <declaration name="writeSide" type="Thread" line="28"/>
            <declaration name="DEFAULT_PIPE_SIZE" type="int" line="29"/>
            <declaration name="PIPE_SIZE" type="int" line="30"/>
            <javadoc line="30">
                The default size of the pipe&apos;s circular input buffer.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="buffer" type="byte" line="35"/>
            <javadoc line="35">
                The circular buffer into which incoming data is placed.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="in" type="int" line="40"/>
            <javadoc line="40">
                The index of the position in the circular buffer at which the
                  next byte of data will be stored when received from the connected
                  piped output stream. &lt;code&gt;in&amp;lt;0&lt;/code&gt; implies the buffer is empty,
                  &lt;code&gt;in==out&lt;/code&gt; implies the buffer is full                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="out" type="int" line="48"/>
            <javadoc line="48">
                The index of the position in the circular buffer at which the next
                  byte of data will be read by this piped input stream.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="54">
                Creates a &lt;code&gt;PipedInputStream&lt;/code&gt; so
                  that it is connected to the piped output
                  stream &lt;code&gt;src&lt;/code&gt;. Data bytes written
                  to &lt;code&gt;src&lt;/code&gt; will then be  available
                  as input from this stream.                
                <param>
                    src   the stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="PipedInputStream" type="constructor" line="63">
                <params>
                    <param name="src" type="PipedOutputStream"/>
                </params>
            </method>
            <javadoc line="66">
                Creates a &lt;code&gt;PipedInputStream&lt;/code&gt; so that it is
                  connected to the piped output stream
                  &lt;code&gt;src&lt;/code&gt; and uses the specified pipe size for
                  the pipe&apos;s buffer.
                  Data bytes written to &lt;code&gt;src&lt;/code&gt; will then
                  be available as input from this stream.                
                <param>
                    src   the stream to connect to.                    
                </param>
                <param>
                    pipeSize the size of the pipe's buffer.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>pipeSize <= 0</code>.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedInputStream" type="constructor" line="79">
                <params>
                    <param name="src" type="PipedOutputStream"/>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Creates a &lt;code&gt;PipedInputStream&lt;/code&gt; so
                  that it is not yet {@linkplain #connect(java.io.PipedOutputStream)connected}.
                  It must be {@linkplain java.io.PipedOutputStream#connect(java.io.PipedInputStream) connected} to a
                  &lt;code&gt;PipedOutputStream&lt;/code&gt; before being used.                
            </javadoc>
            <method name="PipedInputStream" type="constructor" line="89"/>
            <javadoc line="92">
                Creates a &lt;code&gt;PipedInputStream&lt;/code&gt; so that it is not yet{@linkplain #connect(java.io.PipedOutputStream) connected} and
                  uses the specified pipe size for the pipe&apos;s buffer.
                  It must be {@linkplain java.io.PipedOutputStream#connect(java.io.PipedInputStream)connected} to a &lt;code&gt;PipedOutputStream&lt;/code&gt; before being used.                
                <param>
                    pipeSize the size of the pipe's buffer.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>pipeSize <= 0</code>.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedInputStream" type="constructor" line="100">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <method name="initPipe" type="void" line="103">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="109">
                Causes this piped input stream to be connected
                  to the piped  output stream &lt;code&gt;src&lt;/code&gt;.
                  If this object is already connected to some
                  other piped output  stream, an &lt;code&gt;IOException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;src&lt;/code&gt; is an
                  unconnected piped output stream and &lt;code&gt;snk&lt;/code&gt;
                  is an unconnected piped input stream, they
                  may be connected by either the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;snk.connect(src)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  or the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;src.connect(snk)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  The two
                  calls have the same effect.                
                <param>
                    src   The piped output stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="132">
                <params>
                    <param name="src" type="PipedOutputStream"/>
                </params>
            </method>
            <javadoc line="135">
                Receives a byte of data.  This method will block if no input is
                  available.                
                <param>
                    b the byte being received                    
                </param>
                <exception>
                    IOException If the pipe is <a href=#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected},
                      closed, or if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="receive" type="void" line="143">
                <params>
                    <param name="b" type="int"/>
                </params>
                <scope line="147"/>
                <scope line="152"/>
            </method>
            <javadoc line="156">
                Receives data into an array of bytes.  This method will
                  block until some input is available.                
                <param>
                    b the buffer into which the data is received                    
                </param>
                <param>
                    off the start offset of the data                    
                </param>
                <param>
                    len the maximum number of bytes received                    
                </param>
                <exception>
                    IOException If the pipe is <a href=#BROKEN> broken</a>,{@link #connect(java.io.PipedOutputStream) unconnected},
                      closed,or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="receive" type="void" line="165">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="bytesToTransfer" type="int" line="168"/>
                <scope line="169">
                    <declaration name="nextTransferAmount" type="int" line="171"/>
                    <scope line="172"/>
                    <scope line="175">
                        <scope line="176"/>
                        <scope line="180"/>
                    </scope>
                    <scope line="190"/>
                </scope>
            </method>
            <method name="checkStateForReceive" type="void" line="195">
                <scope line="196"/>
                <scope line="199"/>
                <scope line="202"/>
            </method>
            <method name="awaitSpace" type="void" line="206">
                <scope line="207">
                    <scope line="210"/>
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="218">
                Notifies all waiting threads that the last byte of data has been
                  received.                
            </javadoc>
            <method name="receivedLast" type="void" line="222"/>
            <javadoc line="226">
                Reads the next byte of data from this piped input stream. The
                  value byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;.
                  This method blocks until input data is available, the end of the
                  stream is detected, or an exception is thrown.                
                <return>
                    the next byte of data, or <code>-1</code> if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if the pipe is{@link #connect(java.io.PipedOutputStream) unconnected},
                      <a href=#BROKEN> <code>broken</code></a>, closed,
                      or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="238">
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
                <declaration name="trials" type="int" line="249"/>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="254"/>
                    <scope line="258"/>
                    <scope line="261"/>
                </scope>
                <declaration name="ret" type="int" line="265"/>
                <scope line="266"/>
                <scope line="269"/>
            </method>
            <javadoc line="274">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this piped input
                  stream into an array of bytes. Less than &lt;code&gt;len&lt;/code&gt; bytes
                  will be read if the end of the data stream is reached or if
                  &lt;code&gt;len&lt;/code&gt; exceeds the pipe&apos;s buffer size.
                  If &lt;code&gt;len &lt;/code&gt; is zero, then no bytes are read and 0 is returned;
                  otherwise, the method blocks until at least 1 byte of input is
                  available, end of the stream has been detected, or an exception is
                  thrown.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    IOException if the pipe is <a href=#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected},
                      closed, or if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="296">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="297"/>
                <scope line="300"/>
                <scope line="303"/>
                <declaration name="c" type="int" line="306"/>
                <scope line="307"/>
                <declaration name="rlen" type="int" line="311"/>
                <scope line="312">
                    <declaration name="available" type="int" line="313"/>
                    <scope line="314"/>
                    <scope line="317"/>
                    <scope line="320"/>
                    <scope line="327"/>
                    <scope line="330"/>
                </scope>
            </method>
            <javadoc line="336">
                Returns the number of bytes that can be read from this input
                  stream without blocking.                
                <return>
                    the number of bytes that can be read from this input stream
                      without blocking, or {@code 0} if this input stream has been
                      closed by invoking its {@link #close()} method, or if the pipe
                      is {@link #connect(java.io.PipedOutputStream) unconnected}, or
                      <a href=#BROKEN> <code>broken</code></a>.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="available" type="int" line="347"/>
            <javadoc line="353">
                Closes this piped input stream and releases any system resources
                  associated with the stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="358">
                <scope line="360"/>
            </method>
        </class>
    </source>