<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.lang.reflect.Field"/>
        <class name="ObjectStreamField" line="30">
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <javadoc line="30">
                A description of a Serializable field from a Serializable class.  An array
                  of ObjectStreamFields is used to declare the Serializable fields of a class.                
                <author>
                    Mike Warres                    
                </author>
                <author>
                    Roger Riggs                    
                </author>
                <see>
                    ObjectStreamClass                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="43"/>
            <javadoc line="43">
                field name                
            </javadoc>
            <declaration name="signature" type="String" line="45"/>
            <javadoc line="45">
                canonical JVM signature of field type                
            </javadoc>
            <declaration name="type" type="Class&lt;?&gt;" line="47"/>
            <javadoc line="47">
                field type (Object.class if unknown non-primitive type)                
            </javadoc>
            <declaration name="unshared" type="boolean" line="49"/>
            <javadoc line="49">
                whether or not to (de)serialize field values as unshared                
            </javadoc>
            <declaration name="field" type="Field" line="51"/>
            <javadoc line="51">
                corresponding reflective field object, if any                
            </javadoc>
            <declaration name="offset" type="int" line="53"/>
            <javadoc line="53">
                offset of field value in enclosing field group                
            </javadoc>
            <javadoc line="56">
                Create a Serializable field with the specified type.  This field should
                  be documented with a &lt;code&gt;serialField&lt;/code&gt; tag.                
                <param>
                    name the name of the serializable field                    
                </param>
                <param>
                    type the &lt;code&gt;Class&lt;/code&gt; object of the serializable field                    
                </param>
            </javadoc>
            <method name="ObjectStreamField" type="constructor" line="63">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="67">
                Creates an ObjectStreamField representing a serializable field with the
                  given name and type.  If unshared is false, values of the represented
                  field are serialized and deserialized in the default manner--if the
                  field is non-primitive, object values are serialized and deserialized as
                  if they had been written and read by calls to writeObject and
                  readObject.  If unshared is true, values of the represented field are
                  serialized and deserialized as if they had been written and read by
                  calls to writeUnshared and readUnshared.                
                <param>
                    name field name                    
                </param>
                <param>
                    type field type                    
                </param>
                <param>
                    unshared if false, write/read field values in the same manner
                      as writeObject/readObject; if true, write/read in the same
                      manner as writeUnshared/readUnshared                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="ObjectStreamField" type="constructor" line="84">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="Class<?>"/>
                    <param name="unshared" type="boolean"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="95">
                Creates an ObjectStreamField representing a field with the given name,
                  signature and unshared setting.                
            </javadoc>
            <method name="ObjectStreamField" type="constructor" line="99">
                <params>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                    <param name="unshared" type="boolean"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="123">
                Creates an ObjectStreamField representing the given field with the
                  specified unshared setting.  For compatibility with the behavior of
                  earlier serialization implementations, a &quot;showType&quot; parameter is
                  necessary to govern whether or not a getType() call on this
                  ObjectStreamField (if non-primitive) will return Object.class (as
                  opposed to a more specific reference type).                
            </javadoc>
            <method name="ObjectStreamField" type="constructor" line="131">
                <params>
                    <param name="field" type="Field"/>
                    <param name="unshared" type="boolean"/>
                    <param name="showType" type="boolean"/>
                </params>
                <declaration name="ftype" type="Class&lt;?&gt;" line="135"/>
            </method>
            <javadoc line="140">
                Get the name of this field.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the name of the serializable
                      field                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="146"/>
            <javadoc line="150">
                Get the type of the field.  If the type is non-primitive and this
                  &lt;code&gt;ObjectStreamField&lt;/code&gt; was obtained from a deserialized {@link ObjectStreamClass} instance, then &lt;code&gt;Object.class&lt;/code&gt; is returned.
                  Otherwise, the &lt;code&gt;Class&lt;/code&gt; object for the type of the field is
                  returned.                
                <return>
                    a &lt;code&gt;Class&lt;/code&gt; object representing the type of the
                      serializable field                    
                </return>
            </javadoc>
            <method name="getType" type="Class<?>" line="160"/>
            <javadoc line="164">
                Returns character encoding of field type.  The encoding is as follows:
                  &lt;blockquote&gt;&lt;pre&gt;
                  B            byte
                  C            char
                  D            double
                  F            float
                  I            int
                  J            long
                  L            class or interface
                  S            short
                  Z            boolean
                  [            array
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the typecode of the serializable field                    
                </return>
            </javadoc>
            <method name="getTypeCode" type="char" line="182">
                <comment line="182">
                    REMIND: deprecate?                    
                </comment>
            </method>
            <javadoc line="186">
                Return the JVM type signature.                
                <return>
                    null if this field has a primitive type.                    
                </return>
            </javadoc>
            <method name="getTypeString" type="String" line="192">
                <comment line="192">
                    REMIND: deprecate?                    
                </comment>
            </method>
            <javadoc line="196">
                Offset of field within instance data.                
                <return>
                    the offset of this field                    
                </return>
                <see>
                    #setOffset                    
                </see>
            </javadoc>
            <method name="getOffset" type="int" line="203">
                <comment line="203">
                    REMIND: deprecate?                    
                </comment>
            </method>
            <javadoc line="207">
                Offset within instance data.                
                <param>
                    offset the offset of the field                    
                </param>
                <see>
                    #getOffset                    
                </see>
            </javadoc>
            <method name="setOffset" type="void" line="214">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <comment line="214">
                    REMIND: deprecate?                    
                </comment>
            </method>
            <javadoc line="218">
                Return true if this field has a primitive type.                
                <return>
                    true if and only if this field corresponds to a primitive type                    
                </return>
            </javadoc>
            <method name="isPrimitive" type="boolean" line="224">
                <comment line="224">
                    REMIND: deprecate?                    
                </comment>
                <declaration name="tcode" type="char" line="225"/>
            </method>
            <javadoc line="229">
                Returns boolean value indicating whether or not the serializable field
                  represented by this ObjectStreamField instance is unshared.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isUnshared" type="boolean" line="235"/>
            <javadoc line="239">
                Compare this field with another &lt;code&gt;ObjectStreamField&lt;/code&gt;.  Return
                  -1 if this is smaller, 0 if equal, 1 if greater.  Types that are
                  primitives are &quot;smaller&quot; than object types.  If equal, the field names
                  are compared.                
            </javadoc>
            <method name="compareTo" type="int" line="246">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="246">
                    REMIND: deprecate?                    
                </comment>
                <declaration name="other" type="ObjectStreamField" line="247"/>
                <declaration name="isPrim" type="boolean" line="248"/>
                <scope line="249"/>
            </method>
            <javadoc line="255">
                Return a string that describes this field.                
            </javadoc>
            <method name="toString" type="String" line="258"/>
            <javadoc line="262">
                Returns field represented by this ObjectStreamField, or null if
                  ObjectStreamField is not associated with an actual field.                
            </javadoc>
            <method name="getField" type="Field" line="266"/>
            <javadoc line="270">
                Returns JVM type signature of field (similar to getTypeString, except
                  that signature strings are returned for primitive fields as well).                
            </javadoc>
            <method name="getSignature" type="String" line="274"/>
            <javadoc line="278">
                Returns JVM type signature for given class.                
            </javadoc>
            <method name="getClassSignature" type="String" line="281">
                <params>
                    <param name="cl" type="Class<?>"/>
                </params>
                <declaration name="sbuf" type="StringBuilder" line="282"/>
                <scope line="283"/>
                <scope line="287">
                    <scope line="288"/>
                    <scope line="290"/>
                    <scope line="292"/>
                    <scope line="294"/>
                    <scope line="296"/>
                    <scope line="298"/>
                    <scope line="300"/>
                    <scope line="302"/>
                    <scope line="304"/>
                    <scope line="306"/>
                </scope>
                <scope line="309"/>
            </method>
        </class>
    </source>