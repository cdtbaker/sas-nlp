<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <interface name="DataOutput">
            <javadoc line="28">
                The &lt;code&gt;DataOutput&lt;/code&gt; interface provides
                  for converting data from any of the Java
                  primitive types to a series of bytes and
                  writing these bytes to a binary stream.
                  There is  also a facility for converting
                  a &lt;code&gt;String&lt;/code&gt; into
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  format and writing the resulting series
                  of bytes.
                  &lt;p&gt;
                  For all the methods in this interface that
                  write bytes, it is generally true that if
                  a byte cannot be written for any reason,
                  an &lt;code&gt;IOException&lt;/code&gt; is thrown.                
                <author>
                    Frank Yellin                    
                </author>
                <see>
                    java.io.DataInput                    
                </see>
                <see>
                    java.io.DataOutputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="write" type="void" line="51"/>
            <javadoc line="51">
                Writes to the output stream the eight
                  low-order bits of the argument &lt;code&gt;b&lt;/code&gt;.
                  The 24 high-order  bits of &lt;code&gt;b&lt;/code&gt;
                  are ignored.                
                <param>
                    b   the byte to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="62"/>
            <javadoc line="62">
                Writes to the output stream all the bytes in array &lt;code&gt;b&lt;/code&gt;.
                  If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  If &lt;code&gt;b.length&lt;/code&gt; is zero, then
                  no bytes are written. Otherwise, the byte
                  &lt;code&gt;b[0]&lt;/code&gt; is written first, then
                  &lt;code&gt;b[1]&lt;/code&gt;, and so on; the last byte
                  written is &lt;code&gt;b[b.length-1]&lt;/code&gt;.                
                <param>
                    b   the data.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="77"/>
            <javadoc line="77">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from array
                  &lt;code&gt;b&lt;/code&gt;, in order,  to
                  the output stream.  If &lt;code&gt;b&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, a &lt;code&gt;NullPointerException&lt;/code&gt;
                  is thrown.  If &lt;code&gt;off&lt;/code&gt; is negative,
                  or &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;off+len&lt;/code&gt;
                  is greater than the length of the array
                  &lt;code&gt;b&lt;/code&gt;, then an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;
                  is thrown.  If &lt;code&gt;len&lt;/code&gt; is zero,
                  then no bytes are written. Otherwise, the
                  byte &lt;code&gt;b[off]&lt;/code&gt; is written first,
                  then &lt;code&gt;b[off+1]&lt;/code&gt;, and so on; the
                  last byte written is &lt;code&gt;b[off+len-1]&lt;/code&gt;.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeBoolean" type="void" line="99"/>
            <javadoc line="99">
                Writes a &lt;code&gt;boolean&lt;/code&gt; value to this output stream.
                  If the argument &lt;code&gt;v&lt;/code&gt;
                  is &lt;code&gt;true&lt;/code&gt;, the value &lt;code&gt;(byte)1&lt;/code&gt;
                  is written; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;,
                  the  value &lt;code&gt;(byte)0&lt;/code&gt; is written.
                  The byte written by this method may
                  be read by the &lt;code&gt;readBoolean&lt;/code&gt;
                  method of interface &lt;code&gt;DataInput&lt;/code&gt;,
                  which will then return a &lt;code&gt;boolean&lt;/code&gt;
                  equal to &lt;code&gt;v&lt;/code&gt;.                
                <param>
                    v   the boolean to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeByte" type="void" line="116"/>
            <javadoc line="116">
                Writes to the output stream the eight low-
                  order bits of the argument &lt;code&gt;v&lt;/code&gt;.
                  The 24 high-order bits of &lt;code&gt;v&lt;/code&gt;
                  are ignored. (This means  that &lt;code&gt;writeByte&lt;/code&gt;
                  does exactly the same thing as &lt;code&gt;write&lt;/code&gt;
                  for an integer argument.) The byte written
                  by this method may be read by the &lt;code&gt;readByte&lt;/code&gt;
                  method of interface &lt;code&gt;DataInput&lt;/code&gt;,
                  which will then return a &lt;code&gt;byte&lt;/code&gt;
                  equal to &lt;code&gt;(byte)v&lt;/code&gt;.                
                <param>
                    v   the byte value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeShort" type="void" line="133"/>
            <javadoc line="133">
                Writes two bytes to the output
                  stream to represent the value of the argument.
                  The byte values to be written, in the  order
                  shown, are: &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 8))
                  (byte)(0xff &amp;amp; v)
                  &lt;/code&gt; &lt;/pre&gt; &lt;p&gt;
                  The bytes written by this method may be
                  read by the &lt;code&gt;readShort&lt;/code&gt; method
                  of interface &lt;code&gt;DataInput&lt;/code&gt; , which
                  will then return a &lt;code&gt;short&lt;/code&gt; equal
                  to &lt;code&gt;(short)v&lt;/code&gt;.                
                <param>
                    v   the <code>short</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeChar" type="void" line="153"/>
            <javadoc line="153">
                Writes a &lt;code&gt;char&lt;/code&gt; value, which
                  is comprised of two bytes, to the
                  output stream.
                  The byte values to be written, in the  order
                  shown, are:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 8))
                  (byte)(0xff &amp;amp; v)
                  &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
                  The bytes written by this method may be
                  read by the &lt;code&gt;readChar&lt;/code&gt; method
                  of interface &lt;code&gt;DataInput&lt;/code&gt; , which
                  will then return a &lt;code&gt;char&lt;/code&gt; equal
                  to &lt;code&gt;(char)v&lt;/code&gt;.                
                <param>
                    v   the <code>char</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeInt" type="void" line="174"/>
            <javadoc line="174">
                Writes an &lt;code&gt;int&lt;/code&gt; value, which is
                  comprised of four bytes, to the output stream.
                  The byte values to be written, in the  order
                  shown, are:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 24))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 16))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; &amp;#32; &amp;#32;8))
                  (byte)(0xff &amp;amp; v)
                  &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
                  The bytes written by this method may be read
                  by the &lt;code&gt;readInt&lt;/code&gt; method of interface
                  &lt;code&gt;DataInput&lt;/code&gt; , which will then
                  return an &lt;code&gt;int&lt;/code&gt; equal to &lt;code&gt;v&lt;/code&gt;.                
                <param>
                    v   the <code>int</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeLong" type="void" line="195"/>
            <javadoc line="195">
                Writes a &lt;code&gt;long&lt;/code&gt; value, which is
                  comprised of eight bytes, to the output stream.
                  The byte values to be written, in the  order
                  shown, are:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 56))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 48))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 40))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 32))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 24))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 16))
                  (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt;  8))
                  (byte)(0xff &amp;amp; v)
                  &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
                  The bytes written by this method may be
                  read by the &lt;code&gt;readLong&lt;/code&gt; method
                  of interface &lt;code&gt;DataInput&lt;/code&gt; , which
                  will then return a &lt;code&gt;long&lt;/code&gt; equal
                  to &lt;code&gt;v&lt;/code&gt;.                
                <param>
                    v   the <code>long</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeFloat" type="void" line="221"/>
            <javadoc line="221">
                Writes a &lt;code&gt;float&lt;/code&gt; value,
                  which is comprised of four bytes, to the output stream.
                  It does this as if it first converts this
                  &lt;code&gt;float&lt;/code&gt; value to an &lt;code&gt;int&lt;/code&gt;
                  in exactly the manner of the &lt;code&gt;Float.floatToIntBits&lt;/code&gt;
                  method  and then writes the &lt;code&gt;int&lt;/code&gt;
                  value in exactly the manner of the  &lt;code&gt;writeInt&lt;/code&gt;
                  method.  The bytes written by this method
                  may be read by the &lt;code&gt;readFloat&lt;/code&gt;
                  method of interface &lt;code&gt;DataInput&lt;/code&gt;,
                  which will then return a &lt;code&gt;float&lt;/code&gt;
                  equal to &lt;code&gt;v&lt;/code&gt;.                
                <param>
                    v   the <code>float</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeDouble" type="void" line="240"/>
            <javadoc line="240">
                Writes a &lt;code&gt;double&lt;/code&gt; value,
                  which is comprised of eight bytes, to the output stream.
                  It does this as if it first converts this
                  &lt;code&gt;double&lt;/code&gt; value to a &lt;code&gt;long&lt;/code&gt;
                  in exactly the manner of the &lt;code&gt;Double.doubleToLongBits&lt;/code&gt;
                  method  and then writes the &lt;code&gt;long&lt;/code&gt;
                  value in exactly the manner of the  &lt;code&gt;writeLong&lt;/code&gt;
                  method. The bytes written by this method
                  may be read by the &lt;code&gt;readDouble&lt;/code&gt;
                  method of interface &lt;code&gt;DataInput&lt;/code&gt;,
                  which will then return a &lt;code&gt;double&lt;/code&gt;
                  equal to &lt;code&gt;v&lt;/code&gt;.                
                <param>
                    v   the <code>double</code> value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeBytes" type="void" line="259"/>
            <javadoc line="259">
                Writes a string to the output stream.
                  For every character in the string
                  &lt;code&gt;s&lt;/code&gt;,  taken in order, one byte
                  is written to the output stream.  If
                  &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a &lt;code&gt;NullPointerException&lt;/code&gt;
                  is thrown.&lt;p&gt;  If &lt;code&gt;s.length&lt;/code&gt;
                  is zero, then no bytes are written. Otherwise,
                  the character &lt;code&gt;s[0]&lt;/code&gt; is written
                  first, then &lt;code&gt;s[1]&lt;/code&gt;, and so on;
                  the last character written is &lt;code&gt;s[s.length-1]&lt;/code&gt;.
                  For each character, one byte is written,
                  the low-order byte, in exactly the manner
                  of the &lt;code&gt;writeByte&lt;/code&gt; method . The
                  high-order eight bits of each character
                  in the string are ignored.                
                <param>
                    s   the string of bytes to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeChars" type="void" line="281"/>
            <javadoc line="281">
                Writes every character in the string &lt;code&gt;s&lt;/code&gt;,
                  to the output stream, in order,
                  two bytes per character. If &lt;code&gt;s&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, a &lt;code&gt;NullPointerException&lt;/code&gt;
                  is thrown.  If &lt;code&gt;s.length&lt;/code&gt;
                  is zero, then no characters are written.
                  Otherwise, the character &lt;code&gt;s[0]&lt;/code&gt;
                  is written first, then &lt;code&gt;s[1]&lt;/code&gt;,
                  and so on; the last character written is
                  &lt;code&gt;s[s.length-1]&lt;/code&gt;. For each character,
                  two bytes are actually written, high-order
                  byte first, in exactly the manner of the
                  &lt;code&gt;writeChar&lt;/code&gt; method.                
                <param>
                    s   the string value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeUTF" type="void" line="301"/>
            <javadoc line="301">
                Writes two bytes of length information
                  to the output stream, followed
                  by the
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  representation
                  of  every character in the string &lt;code&gt;s&lt;/code&gt;.
                  If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  Each character in the string &lt;code&gt;s&lt;/code&gt;
                  is converted to a group of one, two, or
                  three bytes, depending on the value of the
                  character.&lt;p&gt;
                  If a character &lt;code&gt;c&lt;/code&gt;
                  is in the range &lt;code&gt;&amp;#92;u0001&lt;/code&gt; through
                  &lt;code&gt;&amp;#92;u007f&lt;/code&gt;, it is represented
                  by one byte:&lt;p&gt;
                  &lt;pre&gt;(byte)c &lt;/pre&gt;  &lt;p&gt;
                  If a character &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;&amp;#92;u0000&lt;/code&gt;
                  or is in the range &lt;code&gt;&amp;#92;u0080&lt;/code&gt;
                  through &lt;code&gt;&amp;#92;u07ff&lt;/code&gt;, then it is
                  represented by two bytes, to be written
                  in the order shown:&lt;p&gt; &lt;pre&gt;&lt;code&gt;
                  (byte)(0xc0 | (0x1f &amp;amp; (c &amp;gt;&amp;gt; 6)))
                  (byte)(0x80 | (0x3f &amp;amp; c))
                  &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt; If a character
                  &lt;code&gt;c&lt;/code&gt; is in the range &lt;code&gt;&amp;#92;u0800&lt;/code&gt;
                  through &lt;code&gt;uffff&lt;/code&gt;, then it is
                  represented by three bytes, to be written
                  in the order shown:&lt;p&gt; &lt;pre&gt;&lt;code&gt;
                  (byte)(0xe0 | (0x0f &amp;amp; (c &amp;gt;&amp;gt; 12)))
                  (byte)(0x80 | (0x3f &amp;amp; (c &amp;gt;&amp;gt;  6)))
                  (byte)(0x80 | (0x3f &amp;amp; c))
                  &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt; First,
                  the total number of bytes needed to represent
                  all the characters of &lt;code&gt;s&lt;/code&gt; is
                  calculated. If this number is larger than
                  &lt;code&gt;65535&lt;/code&gt;, then a &lt;code&gt;UTFDataFormatException&lt;/code&gt;
                  is thrown. Otherwise, this length is written
                  to the output stream in exactly the manner
                  of the &lt;code&gt;writeShort&lt;/code&gt; method;
                  after this, the one-, two-, or three-byte
                  representation of each character in the
                  string &lt;code&gt;s&lt;/code&gt; is written.&lt;p&gt;  The
                  bytes written by this method may be read
                  by the &lt;code&gt;readUTF&lt;/code&gt; method of interface
                  &lt;code&gt;DataInput&lt;/code&gt; , which will then
                  return a &lt;code&gt;String&lt;/code&gt; equal to &lt;code&gt;s&lt;/code&gt;.                
                <param>
                    s   the string value to be written.                    
                </param>
                <throws>
                    IOException  if an I/O error occurs.                    
                </throws>
            </javadoc>
        </interface>
    </source>