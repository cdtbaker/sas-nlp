<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Member"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.concurrent.ConcurrentMap"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.reflect.ReflectionFactory"/>
        <class name="ObjectStreamClass" line="27">
            <implements interface="Serializable"/>
            <javadoc line="27">
                Serialization&apos;s descriptor for classes.  It contains the name and
                  serialVersionUID of the class.  The ObjectStreamClass for a specific class
                  loaded in this Java VM can be found/created using the lookup method.
                  &lt;p&gt;The algorithm to compute the SerialVersionUID is described in
                  &lt;a href=&quot;../../../platform/serialization/spec/class.html#4100&quot;&gt;Object
                  Serialization Specification, Section 4.6, Stream Unique Identifiers&lt;/a&gt;.                
                <author>
                    Mike Warres                    
                </author>
                <author>
                    Roger Riggs                    
                </author>
                <see>
                    ObjectStreamField                    
                </see>
                <see>
                    &lt;a href=&quot;../../../platform/serialization/spec/class.html&quot;&gt;Object Serialization Specification, Section 4, Class Descriptors&lt;/a&gt;                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="NO_FIELDS" type="ObjectStreamField[]" line="41"/>
            <javadoc line="41">
                serialPersistentFields value indicating no serializable fields                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="46"/>
            <declaration name="reflFactory" type="ReflectionFactory" line="47"/>
            <javadoc line="47">
                reflection factory for obtaining serialization constructors                
            </javadoc>
            <class name="Caches" line="51">
                <declaration name="localDescs" type="ConcurrentMap&amp;lt;WeakClassKey,Reference&amp;lt;?&amp;gt;&amp;gt;" line="52"/>
                <javadoc line="52">
                    cache mapping local classes -&gt; descriptors                    
                </javadoc>
                <declaration name="reflectors" type="ConcurrentMap&amp;lt;FieldReflectorKey,Reference&amp;lt;?&amp;gt;&amp;gt;" line="56"/>
                <javadoc line="56">
                    cache mapping field group/local desc pairs -&gt; field reflectors                    
                </javadoc>
                <declaration name="localDescsQueue" type="ReferenceQueue&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="60"/>
                <javadoc line="60">
                    queue for WeakReferences to local classes                    
                </javadoc>
                <declaration name="reflectorsQueue" type="ReferenceQueue&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="64"/>
                <javadoc line="64">
                    queue for WeakReferences to field reflectors keys                    
                </javadoc>
            </class>
            <declaration name="cl" type="Class&amp;lt;?&amp;gt;" line="69"/>
            <javadoc line="69">
                class associated with this descriptor (if any)                
            </javadoc>
            <declaration name="name" type="String" line="73"/>
            <javadoc line="73">
                name of class represented by this descriptor                
            </javadoc>
            <declaration name="suid" type="Long" line="77"/>
            <javadoc line="77">
                serialVersionUID of represented class (null if not computed yet)                
            </javadoc>
            <declaration name="isProxy" type="boolean" line="81"/>
            <javadoc line="81">
                true if represents dynamic proxy class                
            </javadoc>
            <declaration name="isEnum" type="boolean" line="85"/>
            <javadoc line="85">
                true if represents enum type                
            </javadoc>
            <declaration name="serializable" type="boolean" line="89"/>
            <javadoc line="89">
                true if represented class implements Serializable                
            </javadoc>
            <declaration name="externalizable" type="boolean" line="93"/>
            <javadoc line="93">
                true if represented class implements Externalizable                
            </javadoc>
            <declaration name="hasWriteObjectData" type="boolean" line="97"/>
            <javadoc line="97">
                true if desc has data written by class-defined writeObject method                
            </javadoc>
            <declaration name="hasBlockExternalData" type="boolean" line="101"/>
            <javadoc line="101">
                true if desc has externalizable data written in block data format; this
                  must be true by default to accommodate ObjectInputStream subclasses which
                  override readClassDescriptor() to return class descriptors obtained from
                  ObjectStreamClass.lookup() (see 4461737)                
            </javadoc>
            <declaration name="resolveEx" type="ClassNotFoundException" line="108"/>
            <javadoc line="108">
                exception (if any) thrown while attempting to resolve class                
            </javadoc>
            <declaration name="deserializeEx" type="InvalidClassException" line="112"/>
            <javadoc line="112">
                exception (if any) to throw if non-enum deserialization attempted                
            </javadoc>
            <declaration name="serializeEx" type="InvalidClassException" line="116"/>
            <javadoc line="116">
                exception (if any) to throw if non-enum serialization attempted                
            </javadoc>
            <declaration name="defaultSerializeEx" type="InvalidClassException" line="120"/>
            <javadoc line="120">
                exception (if any) to throw if default serialization attempted                
            </javadoc>
            <declaration name="fields" type="ObjectStreamField[]" line="124"/>
            <javadoc line="124">
                serializable fields                
            </javadoc>
            <declaration name="primDataSize" type="int" line="128"/>
            <javadoc line="128">
                aggregate marshalled size of primitive fields                
            </javadoc>
            <declaration name="numObjFields" type="int" line="132"/>
            <javadoc line="132">
                number of non-primitive fields                
            </javadoc>
            <declaration name="fieldRefl" type="FieldReflector" line="136"/>
            <javadoc line="136">
                reflector for setting/getting serializable field values                
            </javadoc>
            <declaration name="dataLayout" type="ClassDataSlot[]" line="140"/>
            <javadoc line="140">
                data layout of serialized objects described by this class desc                
            </javadoc>
            <declaration name="cons" type="Constructor" line="144"/>
            <javadoc line="144">
                serialization-appropriate constructor, or null if none                
            </javadoc>
            <declaration name="writeObjectMethod" type="Method" line="148"/>
            <javadoc line="148">
                class-defined writeObject method, or null if none                
            </javadoc>
            <declaration name="readObjectMethod" type="Method" line="152"/>
            <javadoc line="152">
                class-defined readObject method, or null if none                
            </javadoc>
            <declaration name="readObjectNoDataMethod" type="Method" line="156"/>
            <javadoc line="156">
                class-defined readObjectNoData method, or null if none                
            </javadoc>
            <declaration name="writeReplaceMethod" type="Method" line="160"/>
            <javadoc line="160">
                class-defined writeReplace method, or null if none                
            </javadoc>
            <declaration name="readResolveMethod" type="Method" line="164"/>
            <javadoc line="164">
                class-defined readResolve method, or null if none                
            </javadoc>
            <declaration name="localDesc" type="ObjectStreamClass" line="168"/>
            <javadoc line="168">
                local class descriptor for represented class (may point to self)                
            </javadoc>
            <declaration name="superDesc" type="ObjectStreamClass" line="172"/>
            <javadoc line="172">
                superclass descriptor appearing in stream                
            </javadoc>
            <method name="initNative" type="void" line="176"/>
            <javadoc line="176">
                Initializes native code.                
            </javadoc>
            <scope line="180"/>
            <javadoc line="183">
                Find the descriptor for a class that can be serialized.  Creates an
                  ObjectStreamClass instance if one does not exist yet for class. Null is
                  returned if the specified class does not implement java.io.Serializable
                  or java.io.Externalizable.                
                <param>
                    cl class for which to get the descriptor                    
                </param>
                <return>
                    the class descriptor for the specified class                    
                </return>
            </javadoc>
            <method name="lookup" type="ObjectStreamClass" line="191">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="194">
                Returns the descriptor for any class, regardless of whether it
                  implements {@link Serializable}.                
                <param>
                    cl class for which to get the descriptor                    
                </param>
                <return>
                    the class descriptor for the specified class                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="lookupAny" type="ObjectStreamClass" line="201">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="204">
                Returns the name of the class described by this descriptor.
                  This method returns the name of the class in the format that
                  is used by the {@link Class#getName} method.                
                <return>
                    a string representing the name of the class                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="210"/>
            <javadoc line="213">
                Return the serialVersionUID for this class.  The serialVersionUID
                  defines a set of classes all with the same name that have evolved from a
                  common root class and agree to be serialized and deserialized using a
                  common format.  NonSerializable classes have a serialVersionUID of 0L.                
                <return>
                    the SUID of the class described by this descriptor                    
                </return>
            </javadoc>
            <method name="getSerialVersionUID" type="long" line="220">
                <scope line="221">
                    <anonymous_class line="222">
                        <method name="run" type="Long" line="223"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="231">
                Return the class in the local VM that this version is mapped to.  Null
                  is returned if there is no corresponding local class.                
                <return>
                    the &lt;code&gt;Class&lt;/code&gt; instance that this descriptor represents                    
                </return>
            </javadoc>
            <method name="forClass" type="Class&lt;?&gt;" line="236"/>
            <javadoc line="239">
                Return an array of the fields of this serializable class.                
                <return>
                    an array containing an element for each persistent field of
                      this class. Returns an array of length zero if there are no
                      fields.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFields" type="ObjectStreamField[]" line="246"/>
            <javadoc line="249">
                Get the field of this class by name.                
                <param>
                    name the name of the data field to look for                    
                </param>
                <return>
                    The ObjectStreamField object of the named field or null if
                      there is no such named field.                    
                </return>
            </javadoc>
            <method name="getField" type="ObjectStreamField" line="255">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="258">
                Return a string describing this ObjectStreamClass.                
            </javadoc>
            <method name="toString" type="String" line="261"/>
            <javadoc line="264">
                Looks up and returns class descriptor for given class, or null if class
                  is non-serializable and &quot;all&quot; is set to false.                
                <param>
                    cl class to look up                    
                </param>
                <param>
                    all if true, return descriptors for all classes; if false, only
                      return descriptors for serializable classes                    
                </param>
            </javadoc>
            <method name="lookup" type="ObjectStreamClass" line="271">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                    <param name="all" type="boolean"/>
                </params>
                <scope line="272"/>
                <declaration name="key" type="WeakClassKey" line="276"/>
                <declaration name="ref" type="Reference&amp;lt;?&amp;gt;" line="277"/>
                <declaration name="entry" type="Object" line="278"/>
                <scope line="279"/>
                <declaration name="future" type="EntryFuture" line="282"/>
                <scope line="283">
                    <declaration name="newEntry" type="EntryFuture" line="284"/>
                    <declaration name="newRef" type="Reference&amp;lt;?&amp;gt;" line="285"/>
                    <scope line="286">
                        <scope line="287"/>
                        <scope line="291"/>
                    </scope>
                    <scope line="296"/>
                </scope>
                <scope line="300"/>
                <scope line="303">
                    <scope line="305"/>
                    <scope line="308"/>
                </scope>
                <scope line="312">
                    <scope line="313"/>
                    <scope line="316"/>
                    <scope line="319"/>
                    <scope line="322"/>
                </scope>
                <scope line="326"/>
                <scope line="329"/>
                <scope line="332"/>
                <scope line="335"/>
            </method>
            <class name="EntryFuture" line="339">
                <javadoc line="339">
                    Placeholder used in class descriptor and field reflector lookup tables
                      for an entry in the process of being initialized.  (Internal) callers
                      which receive an EntryFuture belonging to another thread as the result
                      of a lookup should call the get() method of the EntryFuture; this will
                      return the actual entry once it is ready for use and has been set().  To
                      conserve objects, EntryFutures synchronize on themselves.                    
                </javadoc>
                <declaration name="unset" type="Object" line="348"/>
                <declaration name="owner" type="Thread" line="349"/>
                <declaration name="entry" type="Object" line="350"/>
                <javadoc line="351">
                    Attempts to set the value contained by this EntryFuture.  If the
                      EntryFuture&apos;s value has not been set already, then the value is
                      saved, any callers blocked in the get() method are notified, and
                      true is returned.  If the value has already been set, then no saving
                      or notification occurs, and false is returned.                    
                </javadoc>
                <method name="set" type="boolean" line="358">
                    <params>
                        <param name="entry" type="Object"/>
                    </params>
                    <scope line="359"/>
                </method>
                <javadoc line="366">
                    Returns the value contained by this EntryFuture, blocking if
                      necessary until a value is set.                    
                </javadoc>
                <method name="get" type="Object" line="370">
                    <declaration name="interrupted" type="boolean" line="371"/>
                    <scope line="372">
                        <scope line="373"/>
                        <scope line="376"/>
                    </scope>
                    <scope line="380">
                        <anonymous_class line="381">
                            <method name="run" type="Void" line="382"/>
                        </anonymous_class>
                    </scope>
                </method>
                <javadoc line="391">
                    Returns the thread that created this EntryFuture.                    
                </javadoc>
                <method name="getOwner" type="Thread" line="394"/>
            </class>
            <javadoc line="398">
                Creates local class descriptor representing given class.                
            </javadoc>
            <method name="ObjectStreamClass" type="constructor" line="401">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="superCl" type="Class&amp;lt;?&amp;gt;" line="408"/>
                <scope line="411">
                    <anonymous_class line="412">
                        <method name="run" type="Void" line="413">
                            <scope line="414"/>
                            <scope line="419"/>
                            <scope line="424"/>
                            <scope line="428"/>
                            <scope line="432"/>
                            <scope line="435"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="449"/>
                <scope line="453"/>
                <scope line="456"/>
                <scope line="459">
                    <scope line="460"/>
                    <scope line="463"/>
                </scope>
                <scope line="467">
                    <scope line="468"/>
                </scope>
            </method>
            <javadoc line="473">
                Creates blank class descriptor which should be initialized via a
                  subsequent call to initProxy(), initNonProxy() or readNonProxy().                
            </javadoc>
            <method name="ObjectStreamClass" type="constructor" line="477"/>
            <javadoc line="479">
                Initializes class descriptor representing a proxy class.                
            </javadoc>
            <method name="initProxy" type="void" line="482">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                    <param name="resolveEx" type="ClassNotFoundException"/>
                    <param name="superDesc" type="ObjectStreamClass"/>
                </params>
                <scope line="490">
                    <scope line="492"/>
                </scope>
            </method>
            <javadoc line="504">
                Initializes class descriptor representing a non-proxy class.                
            </javadoc>
            <method name="initNonProxy" type="void" line="507">
                <params>
                    <param name="model" type="ObjectStreamClass"/>
                    <param name="cl" type="Class&lt;?&gt;"/>
                    <param name="resolveEx" type="ClassNotFoundException"/>
                    <param name="superDesc" type="ObjectStreamClass"/>
                </params>
                <scope line="522">
                    <scope line="524"/>
                    <scope line="527"/>
                    <scope line="530"/>
                    <scope line="533"/>
                    <scope line="536">
                        <scope line="537"/>
                        <scope line="540"/>
                    </scope>
                    <scope line="550"/>
                </scope>
            </method>
            <javadoc line="557">
                Reads non-proxy class descriptor information from given input stream.
                  The resulting class descriptor is not fully functional; it can only be
                  used as input to the ObjectInputStream.resolveClass() and
                  ObjectStreamClass.initNonProxy() methods.                
            </javadoc>
            <method name="readNonProxy" type="void" line="563">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="flags" type="byte" line="567"/>
                <declaration name="sflag" type="boolean" line="571"/>
                <scope line="572"/>
                <scope line="577"/>
                <declaration name="numFields" type="int" line="580"/>
                <scope line="581"/>
                <scope line="585">
                    <declaration name="tcode" type="char" line="586"/>
                    <declaration name="fname" type="String" line="587"/>
                    <declaration name="signature" type="String" line="588"/>
                    <scope line="589"/>
                    <scope line="592"/>
                </scope>
            </method>
            <javadoc line="598">
                Writes non-proxy class descriptor information to given output stream.                
            </javadoc>
            <method name="writeNonProxy" type="void" line="601">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="flags" type="byte" line="604"/>
                <scope line="605">
                    <declaration name="protocol" type="int" line="607"/>
                    <scope line="608"/>
                </scope>
                <scope line="612"/>
                <scope line="615"/>
                <scope line="618"/>
                <scope line="623">
                    <declaration name="f" type="ObjectStreamField" line="624"/>
                    <scope line="627"/>
                </scope>
            </method>
            <javadoc line="632">
                Returns ClassNotFoundException (if any) thrown while attempting to
                  resolve local class corresponding to this class descriptor.                
            </javadoc>
            <method name="getResolveException" type="ClassNotFoundException" line="636"/>
            <javadoc line="639">
                Throws an InvalidClassException if object instances referencing this
                  class descriptor should not be allowed to deserialize.  This method does
                  not apply to deserialization of enum constants.                
            </javadoc>
            <method name="checkDeserialize" type="void" line="644">
                <scope line="645">
                    <declaration name="ice" type="InvalidClassException" line="646"/>
                </scope>
            </method>
            <javadoc line="651">
                Throws an InvalidClassException if objects whose class is represented by
                  this descriptor should not be allowed to serialize.  This method does
                  not apply to serialization of enum constants.                
            </javadoc>
            <method name="checkSerialize" type="void" line="656">
                <scope line="657">
                    <declaration name="ice" type="InvalidClassException" line="658"/>
                </scope>
            </method>
            <javadoc line="663">
                Throws an InvalidClassException if objects whose class is represented by
                  this descriptor should not be permitted to use default serialization
                  (e.g., if the class declares serializable fields that do not correspond
                  to actual fields, and hence must use the GetField API).  This method
                  does not apply to deserialization of enum constants.                
            </javadoc>
            <method name="checkDefaultSerialize" type="void" line="670">
                <scope line="671">
                    <declaration name="ice" type="InvalidClassException" line="672"/>
                </scope>
            </method>
            <javadoc line="677">
                Returns superclass descriptor.  Note that on the receiving side, the
                  superclass descriptor may be bound to a class that is not a superclass
                  of the subclass descriptor&apos;s bound class.                
            </javadoc>
            <method name="getSuperDesc" type="ObjectStreamClass" line="682"/>
            <javadoc line="685">
                Returns the &quot;local&quot; class descriptor for the class associated with this
                  class descriptor (i.e., the result of
                  ObjectStreamClass.lookup(this.forClass())) or null if there is no class
                  associated with this descriptor.                
            </javadoc>
            <method name="getLocalDesc" type="ObjectStreamClass" line="691"/>
            <javadoc line="694">
                Returns arrays of ObjectStreamFields representing the serializable
                  fields of the represented class.  If copy is true, a clone of this class
                  descriptor&apos;s field array is returned, otherwise the array itself is
                  returned.                
            </javadoc>
            <method name="getFields" type="ObjectStreamField[]" line="700">
                <params>
                    <param name="copy" type="boolean"/>
                </params>
            </method>
            <javadoc line="703">
                Looks up a serializable field of the represented class by name and type.
                  A specified type of null matches all types, Object.class matches all
                  non-primitive types, and any other non-null type matches assignable
                  types only.  Returns matching field, or null if no match found.                
            </javadoc>
            <method name="getField" type="ObjectStreamField" line="709">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="Class&lt;?&gt;"/>
                </params>
                <scope line="710">
                    <declaration name="f" type="ObjectStreamField" line="711"/>
                    <scope line="712">
                        <scope line="713"/>
                        <declaration name="ftype" type="Class&amp;lt;?&amp;gt;" line="716"/>
                        <scope line="717"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="724">
                Returns true if class descriptor represents a dynamic proxy class, false
                  otherwise.                
            </javadoc>
            <method name="isProxy" type="boolean" line="728"/>
            <javadoc line="731">
                Returns true if class descriptor represents an enum type, false
                  otherwise.                
            </javadoc>
            <method name="isEnum" type="boolean" line="735"/>
            <javadoc line="738">
                Returns true if represented class implements Externalizable, false
                  otherwise.                
            </javadoc>
            <method name="isExternalizable" type="boolean" line="742"/>
            <javadoc line="745">
                Returns true if represented class implements Serializable, false
                  otherwise.                
            </javadoc>
            <method name="isSerializable" type="boolean" line="749"/>
            <javadoc line="752">
                Returns true if class descriptor represents externalizable class that
                  has written its data in 1.2 (block data) format, false otherwise.                
            </javadoc>
            <method name="hasBlockExternalData" type="boolean" line="756"/>
            <javadoc line="759">
                Returns true if class descriptor represents serializable (but not
                  externalizable) class which has written its data via a custom
                  writeObject() method, false otherwise.                
            </javadoc>
            <method name="hasWriteObjectData" type="boolean" line="764"/>
            <javadoc line="767">
                Returns true if represented class is serializable/externalizable and can
                  be instantiated by the serialization runtime--i.e., if it is
                  externalizable and defines a public no-arg constructor, or if it is
                  non-externalizable and its first non-serializable superclass defines an
                  accessible no-arg constructor.  Otherwise, returns false.                
            </javadoc>
            <method name="isInstantiable" type="boolean" line="774"/>
            <javadoc line="777">
                Returns true if represented class is serializable (but not
                  externalizable) and defines a conformant writeObject method.  Otherwise,
                  returns false.                
            </javadoc>
            <method name="hasWriteObjectMethod" type="boolean" line="782"/>
            <javadoc line="785">
                Returns true if represented class is serializable (but not
                  externalizable) and defines a conformant readObject method.  Otherwise,
                  returns false.                
            </javadoc>
            <method name="hasReadObjectMethod" type="boolean" line="790"/>
            <javadoc line="793">
                Returns true if represented class is serializable (but not
                  externalizable) and defines a conformant readObjectNoData method.
                  Otherwise, returns false.                
            </javadoc>
            <method name="hasReadObjectNoDataMethod" type="boolean" line="798"/>
            <javadoc line="801">
                Returns true if represented class is serializable or externalizable and
                  defines a conformant writeReplace method.  Otherwise, returns false.                
            </javadoc>
            <method name="hasWriteReplaceMethod" type="boolean" line="805"/>
            <javadoc line="808">
                Returns true if represented class is serializable or externalizable and
                  defines a conformant readResolve method.  Otherwise, returns false.                
            </javadoc>
            <method name="hasReadResolveMethod" type="boolean" line="812"/>
            <javadoc line="815">
                Creates a new instance of the represented class.  If the class is
                  externalizable, invokes its public no-arg constructor; otherwise, if the
                  class is serializable, invokes the no-arg constructor of the first
                  non-serializable superclass.  Throws UnsupportedOperationException if
                  this class descriptor is not associated with a class, if the associated
                  class is non-serializable or if the appropriate no-arg constructor is
                  inaccessible/unavailable.                
            </javadoc>
            <method name="newInstance" type="Object" line="824">
                <scope line="825">
                    <scope line="826"/>
                    <scope line="829"/>
                </scope>
                <scope line="833"/>
            </method>
            <javadoc line="837">
                Invokes the writeObject method of the represented serializable class.
                  Throws UnsupportedOperationException if this class descriptor is not
                  associated with a class, or if the class is externalizable,
                  non-serializable or does not define writeObject.                
            </javadoc>
            <method name="invokeWriteObject" type="void" line="843">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="844">
                    <scope line="845"/>
                    <scope line="848">
                        <declaration name="th" type="Throwable" line="849"/>
                        <scope line="850"/>
                        <scope line="853"/>
                    </scope>
                    <scope line="857"/>
                </scope>
                <scope line="861"/>
            </method>
            <javadoc line="865">
                Invokes the readObject method of the represented serializable class.
                  Throws UnsupportedOperationException if this class descriptor is not
                  associated with a class, or if the class is externalizable,
                  non-serializable or does not define readObject.                
            </javadoc>
            <method name="invokeReadObject" type="void" line="871">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="872">
                    <scope line="873"/>
                    <scope line="876">
                        <declaration name="th" type="Throwable" line="877"/>
                        <scope line="878"/>
                        <scope line="881"/>
                        <scope line="884"/>
                    </scope>
                    <scope line="888"/>
                </scope>
                <scope line="892"/>
            </method>
            <javadoc line="896">
                Invokes the readObjectNoData method of the represented serializable
                  class.  Throws UnsupportedOperationException if this class descriptor is
                  not associated with a class, or if the class is externalizable,
                  non-serializable or does not define readObjectNoData.                
            </javadoc>
            <method name="invokeReadObjectNoData" type="void" line="902">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="903">
                    <scope line="904"/>
                    <scope line="907">
                        <declaration name="th" type="Throwable" line="908"/>
                        <scope line="909"/>
                        <scope line="912"/>
                    </scope>
                    <scope line="916"/>
                </scope>
                <scope line="920"/>
            </method>
            <javadoc line="924">
                Invokes the writeReplace method of the represented serializable class and
                  returns the result.  Throws UnsupportedOperationException if this class
                  descriptor is not associated with a class, or if the class is
                  non-serializable or does not define writeReplace.                
            </javadoc>
            <method name="invokeWriteReplace" type="Object" line="930">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="931">
                    <scope line="932"/>
                    <scope line="935">
                        <declaration name="th" type="Throwable" line="936"/>
                        <scope line="937"/>
                        <scope line="940"/>
                    </scope>
                    <scope line="945"/>
                </scope>
                <scope line="949"/>
            </method>
            <javadoc line="953">
                Invokes the readResolve method of the represented serializable class and
                  returns the result.  Throws UnsupportedOperationException if this class
                  descriptor is not associated with a class, or if the class is
                  non-serializable or does not define readResolve.                
            </javadoc>
            <method name="invokeReadResolve" type="Object" line="959">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="960">
                    <scope line="961"/>
                    <scope line="964">
                        <declaration name="th" type="Throwable" line="965"/>
                        <scope line="966"/>
                        <scope line="969"/>
                    </scope>
                    <scope line="974"/>
                </scope>
                <scope line="978"/>
            </method>
            <class name="ClassDataSlot" line="982">
                <javadoc line="982">
                    Class representing the portion of an object&apos;s serialized form allotted
                      to data described by a given class descriptor.  If &quot;hasData&quot; is false,
                      the object&apos;s serialized form does not contain data associated with the
                      class descriptor.                    
                </javadoc>
                <declaration name="desc" type="ObjectStreamClass" line="989"/>
                <javadoc line="989">
                    class descriptor &quot;occupying&quot; this slot                    
                </javadoc>
                <declaration name="hasData" type="boolean" line="993"/>
                <javadoc line="993">
                    true if serialized form includes data for this slot&apos;s descriptor                    
                </javadoc>
                <method name="ClassDataSlot" type="constructor" line="997">
                    <params>
                        <param name="desc" type="ObjectStreamClass"/>
                        <param name="hasData" type="boolean"/>
                    </params>
                </method>
            </class>
            <javadoc line="1002">
                Returns array of ClassDataSlot instances representing the data layout
                  (including superclass data) for serialized objects described by this
                  class descriptor.  ClassDataSlots are ordered by inheritance with those
                  containing &quot;higher&quot; superclasses appearing first.  The final
                  ClassDataSlot contains a reference to this descriptor.                
            </javadoc>
            <method name="getClassDataLayout" type="ClassDataSlot[]" line="1009">
                <scope line="1010"/>
            </method>
            <method name="getClassDataLayout0" type="ClassDataSlot[]" line="1015">
                <declaration name="slots" type="ArrayList&amp;lt;ClassDataSlot&amp;gt;" line="1016"/>
                <declaration name="start" type="Class&amp;lt;?&amp;gt;" line="1017"/>
                <scope line="1018"/>
                <scope line="1021">
                    <declaration name="searchName" type="String" line="1022"/>
                    <declaration name="match" type="Class&amp;lt;?&amp;gt;" line="1023"/>
                    <scope line="1024">
                        <scope line="1025"/>
                    </scope>
                    <scope line="1030">
                        <scope line="1031"/>
                    </scope>
                </scope>
                <scope line="1038"/>
            </method>
            <javadoc line="1044">
                Returns aggregate size (in bytes) of marshalled primitive field values
                  for represented class.                
            </javadoc>
            <method name="getPrimDataSize" type="int" line="1048"/>
            <javadoc line="1051">
                Returns number of non-primitive serializable fields of represented
                  class.                
            </javadoc>
            <method name="getNumObjFields" type="int" line="1055"/>
            <javadoc line="1058">
                Fetches the serializable primitive field values of object obj and
                  marshals them into byte array buf starting at offset 0.  It is the
                  responsibility of the caller to ensure that obj is of the proper type if
                  non-null.                
            </javadoc>
            <method name="getPrimFieldValues" type="void" line="1064">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="buf" type="byte[]"/>
                </params>
            </method>
            <javadoc line="1067">
                Sets the serializable primitive fields of object obj using values
                  unmarshalled from byte array buf starting at offset 0.  It is the
                  responsibility of the caller to ensure that obj is of the proper type if
                  non-null.                
            </javadoc>
            <method name="setPrimFieldValues" type="void" line="1073">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="buf" type="byte[]"/>
                </params>
            </method>
            <javadoc line="1076">
                Fetches the serializable object field values of object obj and stores
                  them in array vals starting at offset 0.  It is the responsibility of
                  the caller to ensure that obj is of the proper type if non-null.                
            </javadoc>
            <method name="getObjFieldValues" type="void" line="1081">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="vals" type="Object[]"/>
                </params>
            </method>
            <javadoc line="1084">
                Sets the serializable object fields of object obj using values from
                  array vals starting at offset 0.  It is the responsibility of the caller
                  to ensure that obj is of the proper type if non-null.                
            </javadoc>
            <method name="setObjFieldValues" type="void" line="1089">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="vals" type="Object[]"/>
                </params>
            </method>
            <javadoc line="1092">
                Calculates and sets serializable field offsets, as well as primitive
                  data size and object field count totals.  Throws InvalidClassException
                  if fields are illegally ordered.                
            </javadoc>
            <method name="computeFieldOffsets" type="void" line="1097">
                <declaration name="firstObjIndex" type="int" line="1100"/>
                <scope line="1101">
                    <declaration name="f" type="ObjectStreamField" line="1102"/>
                    <scope line="1126"/>
                </scope>
                <scope line="1134"/>
            </method>
            <javadoc line="1138">
                If given class is the same as the class associated with this class
                  descriptor, returns reference to this class descriptor.  Otherwise,
                  returns variant of this class descriptor bound to given class.                
            </javadoc>
            <method name="getVariantFor" type="ObjectStreamClass" line="1143">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <scope line="1144"/>
                <declaration name="desc" type="ObjectStreamClass" line="1147"/>
                <scope line="1148"/>
                <scope line="1151"/>
            </method>
            <javadoc line="1156">
                Returns public no-arg constructor of given class, or null if none found.
                  Access checks are disabled on the returned constructor (if any), since
                  the defining class may still be non-public.                
            </javadoc>
            <method name="getExternalizableConstructor" type="Constructor" line="1161">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <scope line="1162">
                    <declaration name="cons" type="Constructor" line="1163"/>
                </scope>
                <scope line="1167"/>
            </method>
            <javadoc line="1171">
                Returns subclass-accessible no-arg constructor of first non-serializable
                  superclass, or null if none found.  Access checks are disabled on the
                  returned constructor (if any).                
            </javadoc>
            <method name="getSerializableConstructor" type="Constructor" line="1176">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="initCl" type="Class&amp;lt;?&amp;gt;" line="1177"/>
                <scope line="1178">
                    <scope line="1179"/>
                </scope>
                <scope line="1183">
                    <declaration name="cons" type="Constructor" line="1184"/>
                    <declaration name="mods" type="int" line="1185"/>
                    <scope line="1186"/>
                </scope>
                <scope line="1193"/>
            </method>
            <javadoc line="1197">
                Returns non-static, non-abstract method with given signature provided it
                  is defined by or accessible (via inheritance) by the given class, or
                  null if no match found.  Access checks are disabled on the returned
                  method (if any).                
            </javadoc>
            <method name="getInheritableMethod" type="Method" line="1203">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                    <param name="name" type="String"/>
                    <param name="argTypes" type="Class&lt;?&gt;[]"/>
                    <param name="returnType" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="meth" type="Method" line="1204"/>
                <declaration name="defCl" type="Class&amp;lt;?&amp;gt;" line="1205"/>
                <scope line="1206">
                    <scope line="1207"/>
                    <scope line="1211"/>
                </scope>
                <scope line="1215"/>
                <declaration name="mods" type="int" line="1219"/>
                <scope line="1220"/>
                <scope line="1223"/>
                <scope line="1226"/>
                <scope line="1229"/>
            </method>
            <javadoc line="1233">
                Returns non-static private method with given signature defined by given
                  class, or null if none found.  Access checks are disabled on the
                  returned method (if any).                
            </javadoc>
            <method name="getPrivateMethod" type="Method" line="1238">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                    <param name="name" type="String"/>
                    <param name="argTypes" type="Class&lt;?&gt;[]"/>
                    <param name="returnType" type="Class&lt;?&gt;"/>
                </params>
                <scope line="1239">
                    <declaration name="meth" type="Method" line="1240"/>
                    <declaration name="mods" type="int" line="1242"/>
                </scope>
                <scope line="1245"/>
            </method>
            <javadoc line="1249">
                Returns true if classes are defined in the same runtime package, false
                  otherwise.                
            </javadoc>
            <method name="packageEquals" type="boolean" line="1253">
                <params>
                    <param name="cl1" type="Class&lt;?&gt;"/>
                    <param name="cl2" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="1256">
                Returns package name of given class.                
            </javadoc>
            <method name="getPackageName" type="String" line="1259">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="s" type="String" line="1260"/>
                <declaration name="i" type="int" line="1261"/>
                <scope line="1262"/>
            </method>
            <javadoc line="1268">
                Compares class names for equality, ignoring package names.  Returns true
                  if class names equal, false otherwise.                
            </javadoc>
            <method name="classNamesEqual" type="boolean" line="1272">
                <params>
                    <param name="name1" type="String"/>
                    <param name="name2" type="String"/>
                </params>
            </method>
            <javadoc line="1277">
                Returns JVM type signature for given class.                
            </javadoc>
            <method name="getClassSignature" type="String" line="1280">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="sbuf" type="StringBuilder" line="1281"/>
                <scope line="1282"/>
                <scope line="1286">
                    <scope line="1287"/>
                    <scope line="1290"/>
                    <scope line="1293"/>
                    <scope line="1296"/>
                    <scope line="1299"/>
                    <scope line="1302"/>
                    <scope line="1305"/>
                    <scope line="1308"/>
                    <scope line="1311"/>
                    <scope line="1314"/>
                </scope>
                <scope line="1318"/>
            </method>
            <javadoc line="1323">
                Returns JVM type signature for given list of parameters and return type.                
            </javadoc>
            <method name="getMethodSignature" type="String" line="1326">
                <params>
                    <param name="paramTypes" type="Class&lt;?&gt;[]"/>
                    <param name="retType" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="sbuf" type="StringBuilder" line="1327"/>
                <scope line="1329"/>
            </method>
            <javadoc line="1336">
                Convenience method for throwing an exception that is either a
                  RuntimeException, Error, or of some unexpected type (in which case it is
                  wrapped inside an IOException).                
            </javadoc>
            <method name="throwMiscException" type="void" line="1341">
                <params>
                    <param name="th" type="Throwable"/>
                </params>
                <scope line="1342"/>
                <scope line="1345"/>
                <scope line="1348">
                    <declaration name="ex" type="IOException" line="1349"/>
                </scope>
            </method>
            <javadoc line="1354">
                Returns ObjectStreamField array describing the serializable fields of
                  the given class.  Serializable fields backed by an actual field of the
                  class are represented by ObjectStreamFields with corresponding non-null
                  Field objects.  Throws InvalidClassException if the (explicitly
                  declared) serializable fields are invalid.                
            </javadoc>
            <method name="getSerialFields" type="ObjectStreamField[]" line="1361">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="fields" type="ObjectStreamField[]" line="1362"/>
                <scope line="1363">
                    <scope line="1364"/>
                </scope>
                <scope line="1369"/>
            </method>
            <javadoc line="1374">
                Returns serializable fields of given class as defined explicitly by a
                  &quot;serialPersistentFields&quot; field, or null if no appropriate
                  &quot;serialPersistentFields&quot; field is defined.  Serializable fields backed
                  by an actual field of the class are represented by ObjectStreamFields
                  with corresponding non-null Field objects.  For compatibility with past
                  releases, a &quot;serialPersistentFields&quot; field with a null value is
                  considered equivalent to not declaring &quot;serialPersistentFields&quot;.  Throws
                  InvalidClassException if the declared serializable fields are
                  invalid--e.g., if multiple fields share the same name.                
            </javadoc>
            <method name="getDeclaredSerialFields" type="ObjectStreamField[]" line="1385">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="1386"/>
                <scope line="1387">
                    <declaration name="f" type="Field" line="1388"/>
                    <declaration name="mask" type="int" line="1389"/>
                    <scope line="1390"/>
                </scope>
                <scope line="1395"/>
                <scope line="1397"/>
                <scope line="1400"/>
                <declaration name="boundFields" type="ObjectStreamField[]" line="1403"/>
                <declaration name="fieldNames" type="Set&amp;lt;String&amp;gt;" line="1404"/>
                <scope line="1405">
                    <declaration name="spf" type="ObjectStreamField" line="1406"/>
                    <declaration name="fname" type="String" line="1407"/>
                    <scope line="1408"/>
                    <scope line="1412">
                        <declaration name="f" type="Field" line="1413"/>
                        <scope line="1414"/>
                    </scope>
                    <scope line="1418"/>
                    <scope line="1420"/>
                </scope>
            </method>
            <javadoc line="1426">
                Returns array of ObjectStreamFields corresponding to all non-static
                  non-transient fields declared by given class.  Each ObjectStreamField
                  contains a Field object for the field it represents.  If no default
                  serializable fields exist, NO_FIELDS is returned.                
            </javadoc>
            <method name="getDefaultSerialFields" type="ObjectStreamField[]" line="1432">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="clFields" type="Field[]" line="1433"/>
                <declaration name="list" type="ArrayList&amp;lt;ObjectStreamField&amp;gt;" line="1434"/>
                <declaration name="mask" type="int" line="1435"/>
                <scope line="1436">
                    <scope line="1437"/>
                </scope>
                <declaration name="size" type="int" line="1441"/>
            </method>
            <javadoc line="1444">
                Returns explicit serial version UID value declared by given class, or
                  null if none.                
            </javadoc>
            <method name="getDeclaredSUID" type="Long" line="1448">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <scope line="1449">
                    <declaration name="f" type="Field" line="1450"/>
                    <declaration name="mask" type="int" line="1451"/>
                    <scope line="1452"/>
                </scope>
                <scope line="1457"/>
            </method>
            <javadoc line="1461">
                Computes the default serial version UID value for the given class.                
            </javadoc>
            <method name="computeDefaultSUID" type="long" line="1464">
                <params>
                    <param name="cl" type="Class&lt;?&gt;"/>
                </params>
                <scope line="1465"/>
                <scope line="1468">
                    <declaration name="bout" type="ByteArrayOutputStream" line="1469"/>
                    <declaration name="dout" type="DataOutputStream" line="1470"/>
                    <declaration name="classMods" type="int" line="1472"/>
                    <declaration name="methods" type="Method[]" line="1473"/>
                    <scope line="1474"/>
                    <scope line="1478">
                        <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="1479"/>
                        <declaration name="ifaceNames" type="String[]" line="1480"/>
                        <scope line="1481"/>
                        <scope line="1485"/>
                    </scope>
                    <declaration name="fields" type="Field[]" line="1489"/>
                    <declaration name="fieldSigs" type="MemberSignature[]" line="1490"/>
                    <scope line="1491"/>
                    <anonymous_class line="1494">
                        <method name="compare" type="int" line="1495">
                            <params>
                                <param name="ms1" type="MemberSignature"/>
                                <param name="ms2" type="MemberSignature"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <scope line="1500">
                        <declaration name="sig" type="MemberSignature" line="1501"/>
                        <declaration name="mods" type="int" line="1502"/>
                        <scope line="1503"/>
                    </scope>
                    <scope line="1509"/>
                    <declaration name="cons" type="Constructor[]" line="1514"/>
                    <declaration name="consSigs" type="MemberSignature[]" line="1515"/>
                    <scope line="1516"/>
                    <anonymous_class line="1519">
                        <method name="compare" type="int" line="1520">
                            <params>
                                <param name="ms1" type="MemberSignature"/>
                                <param name="ms2" type="MemberSignature"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <scope line="1525">
                        <declaration name="sig" type="MemberSignature" line="1526"/>
                        <declaration name="mods" type="int" line="1527"/>
                        <scope line="1528"/>
                    </scope>
                    <declaration name="methSigs" type="MemberSignature[]" line="1534"/>
                    <scope line="1535"/>
                    <anonymous_class line="1538">
                        <method name="compare" type="int" line="1539">
                            <params>
                                <param name="ms1" type="MemberSignature"/>
                                <param name="ms2" type="MemberSignature"/>
                            </params>
                            <declaration name="comp" type="int" line="1540"/>
                            <scope line="1541"/>
                        </method>
                    </anonymous_class>
                    <scope line="1548">
                        <declaration name="sig" type="MemberSignature" line="1549"/>
                        <declaration name="mods" type="int" line="1550"/>
                        <scope line="1551"/>
                    </scope>
                    <declaration name="md" type="MessageDigest" line="1558"/>
                    <declaration name="hashBytes" type="byte[]" line="1559"/>
                    <declaration name="hash" type="long" line="1560"/>
                    <scope line="1561"/>
                </scope>
                <scope line="1566"/>
                <scope line="1569"/>
            </method>
            <method name="hasStaticInitializer" type="boolean" line="1573"/>
            <javadoc line="1573">
                Returns true if the given class defines a static initializer method,
                  false otherwise.                
            </javadoc>
            <class name="MemberSignature" line="1578">
                <javadoc line="1578">
                    Class for computing and caching field/constructor/method signatures
                      during serialVersionUID calculation.                    
                </javadoc>
                <declaration name="member" type="Member" line="1583"/>
                <declaration name="name" type="String" line="1584"/>
                <declaration name="signature" type="String" line="1585"/>
                <method name="MemberSignature" type="constructor" line="1586">
                    <params>
                        <param name="field" type="Field"/>
                    </params>
                </method>
                <method name="MemberSignature" type="constructor" line="1591">
                    <params>
                        <param name="cons" type="Constructor"/>
                    </params>
                </method>
                <method name="MemberSignature" type="constructor" line="1596">
                    <params>
                        <param name="meth" type="Method"/>
                    </params>
                </method>
            </class>
            <class name="FieldReflector" line="1602">
                <javadoc line="1602">
                    Class for setting and retrieving serializable field values in batch.                    
                </javadoc>
                <declaration name="unsafe" type="Unsafe" line="1606"/>
                <javadoc line="1606">
                    handle for performing unsafe operations                    
                </javadoc>
                <declaration name="fields" type="ObjectStreamField[]" line="1610"/>
                <javadoc line="1610">
                    fields to operate on                    
                </javadoc>
                <declaration name="numPrimFields" type="int" line="1614"/>
                <javadoc line="1614">
                    number of primitive fields                    
                </javadoc>
                <declaration name="readKeys" type="long[]" line="1618"/>
                <javadoc line="1618">
                    unsafe field keys for reading fields - may contain dupes                    
                </javadoc>
                <declaration name="writeKeys" type="long[]" line="1622"/>
                <javadoc line="1622">
                    unsafe fields keys for writing fields - no dupes                    
                </javadoc>
                <declaration name="offsets" type="int[]" line="1626"/>
                <javadoc line="1626">
                    field data offsets                    
                </javadoc>
                <declaration name="typeCodes" type="char[]" line="1630"/>
                <javadoc line="1630">
                    field type codes                    
                </javadoc>
                <declaration name="types" type="Class&amp;lt;?&amp;gt;[]" line="1634"/>
                <javadoc line="1634">
                    field types                    
                </javadoc>
                <javadoc line="1638">
                    Constructs FieldReflector capable of setting/getting values from the
                      subset of fields whose ObjectStreamFields contain non-null
                      reflective Field objects.  ObjectStreamFields with null Fields are
                      treated as filler, for which get operations return default values
                      and set operations discard given values.                    
                </javadoc>
                <method name="FieldReflector" type="constructor" line="1645">
                    <params>
                        <param name="fields" type="ObjectStreamField[]"/>
                    </params>
                    <declaration name="nfields" type="int" line="1647"/>
                    <declaration name="typeList" type="ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="1652"/>
                    <declaration name="usedKeys" type="Set&amp;lt;Long&amp;gt;" line="1653"/>
                    <scope line="1654">
                        <declaration name="f" type="ObjectStreamField" line="1655"/>
                        <declaration name="rf" type="Field" line="1656"/>
                        <declaration name="key" type="long" line="1657"/>
                        <scope line="1662"/>
                    </scope>
                </method>
                <javadoc line="1669">
                    Returns list of ObjectStreamFields representing fields operated on
                      by this reflector.  The shared/unshared values and Field objects
                      contained by ObjectStreamFields in the list reflect their bindings
                      to locally defined serializable fields.                    
                </javadoc>
                <method name="getFields" type="ObjectStreamField[]" line="1675"/>
                <javadoc line="1678">
                    Fetches the serializable primitive field values of object obj and
                      marshals them into byte array buf starting at offset 0.  The caller
                      is responsible for ensuring that obj is of the proper type.                    
                </javadoc>
                <method name="getPrimFieldValues" type="void" line="1683">
                    <params>
                        <param name="obj" type="Object"/>
                        <param name="buf" type="byte[]"/>
                    </params>
                    <scope line="1684"/>
                    <scope line="1687">
                        <declaration name="key" type="long" line="1688"/>
                        <declaration name="off" type="int" line="1689"/>
                    </scope>
                </method>
                <javadoc line="1720">
                    Sets the serializable primitive fields of object obj using values
                      unmarshalled from byte array buf starting at offset 0.  The caller
                      is responsible for ensuring that obj is of the proper type.                    
                </javadoc>
                <method name="setPrimFieldValues" type="void" line="1725">
                    <params>
                        <param name="obj" type="Object"/>
                        <param name="buf" type="byte[]"/>
                    </params>
                    <scope line="1726"/>
                    <scope line="1729">
                        <declaration name="key" type="long" line="1730"/>
                        <scope line="1731"/>
                        <declaration name="off" type="int" line="1734"/>
                    </scope>
                </method>
                <javadoc line="1765">
                    Fetches the serializable object field values of object obj and
                      stores them in array vals starting at offset 0.  The caller is
                      responsible for ensuring that obj is of the proper type.                    
                </javadoc>
                <method name="getObjFieldValues" type="void" line="1770">
                    <params>
                        <param name="obj" type="Object"/>
                        <param name="vals" type="Object[]"/>
                    </params>
                    <scope line="1771"/>
                    <scope line="1774"/>
                </method>
                <javadoc line="1785">
                    Sets the serializable object fields of object obj using values from
                      array vals starting at offset 0.  The caller is responsible for
                      ensuring that obj is of the proper type; however, attempts to set a
                      field with a value of the wrong type will trigger an appropriate
                      ClassCastException.                    
                </javadoc>
                <method name="setObjFieldValues" type="void" line="1792">
                    <params>
                        <param name="obj" type="Object"/>
                        <param name="vals" type="Object[]"/>
                    </params>
                    <scope line="1793"/>
                    <scope line="1796">
                        <declaration name="key" type="long" line="1797"/>
                        <scope line="1798"/>
                        <declaration name="val" type="Object" line="1804"/>
                        <scope line="1805">
                            <declaration name="f" type="Field" line="1806"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="1817">
                Matches given set of serializable fields with serializable fields
                  described by the given local class descriptor, and returns a
                  FieldReflector instance capable of setting/getting values from the
                  subset of fields that match (non-matching fields are treated as filler,
                  for which get operations return default values and set operations
                  discard given values).  Throws InvalidClassException if unresolvable
                  type conflicts exist between the two sets of fields.                
            </javadoc>
            <method name="getReflector" type="FieldReflector" line="1826">
                <params>
                    <param name="fields" type="ObjectStreamField[]"/>
                    <param name="localDesc" type="ObjectStreamClass"/>
                </params>
                <declaration name="cl" type="Class&amp;lt;?&amp;gt;" line="1827"/>
                <declaration name="key" type="FieldReflectorKey" line="1829"/>
                <declaration name="ref" type="Reference&amp;lt;?&amp;gt;" line="1830"/>
                <declaration name="entry" type="Object" line="1831"/>
                <scope line="1832"/>
                <declaration name="future" type="EntryFuture" line="1835"/>
                <scope line="1836">
                    <declaration name="newEntry" type="EntryFuture" line="1837"/>
                    <declaration name="newRef" type="Reference&amp;lt;?&amp;gt;" line="1838"/>
                    <scope line="1839">
                        <scope line="1840"/>
                        <scope line="1844"/>
                    </scope>
                    <scope line="1849"/>
                </scope>
                <scope line="1853"/>
                <scope line="1856"/>
                <scope line="1859">
                    <scope line="1860"/>
                    <scope line="1863"/>
                </scope>
                <scope line="1869"/>
                <scope line="1872"/>
                <scope line="1875"/>
                <scope line="1878"/>
                <scope line="1881"/>
            </method>
            <class name="FieldReflectorKey" line="1885">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="Class&lt;?&gt;"/>
                    </type_params>
                </extends>
                <javadoc line="1885">
                    FieldReflector cache lookup key.  Keys are considered equal if they
                      refer to the same class and equivalent field formats.                    
                </javadoc>
                <declaration name="sigs" type="String" line="1890"/>
                <declaration name="hash" type="int" line="1891"/>
                <declaration name="nullClass" type="boolean" line="1892"/>
                <method name="FieldReflectorKey" type="constructor" line="1893">
                    <params>
                        <param name="cl" type="Class&lt;?&gt;"/>
                        <param name="fields" type="ObjectStreamField[]"/>
                        <param name="queue" type="ReferenceQueue&lt;Class&lt;?&gt;&gt;"/>
                    </params>
                    <declaration name="sbuf" type="StringBuilder" line="1896"/>
                    <scope line="1897">
                        <declaration name="f" type="ObjectStreamField" line="1898"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="1904"/>
                <method name="equals" type="boolean" line="1907">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="1908"/>
                    <scope line="1911">
                        <declaration name="other" type="FieldReflectorKey" line="1912"/>
                        <declaration name="referent" type="Class&amp;lt;?&amp;gt;" line="1913"/>
                    </scope>
                    <scope line="1916"/>
                </method>
            </class>
            <javadoc line="1921">
                Matches given set of serializable fields with serializable fields
                  obtained from the given local class descriptor (which contain bindings
                  to reflective Field objects).  Returns list of ObjectStreamFields in
                  which each ObjectStreamField whose signature matches that of a local
                  field contains a Field object for that field; unmatched
                  ObjectStreamFields contain null Field objects.  Shared/unshared settings
                  of the returned ObjectStreamFields also reflect those of matched local
                  ObjectStreamFields.  Throws InvalidClassException if unresolvable type
                  conflicts exist between the two sets of fields.                
            </javadoc>
            <method name="matchFields" type="ObjectStreamField[]" line="1932">
                <params>
                    <param name="fields" type="ObjectStreamField[]"/>
                    <param name="localDesc" type="ObjectStreamClass"/>
                </params>
                <declaration name="localFields" type="ObjectStreamField[]" line="1933"/>
                <declaration name="matches" type="ObjectStreamField[]" line="1934"/>
                <scope line="1935">
                    <declaration name="f" type="ObjectStreamField" line="1936"/>
                    <scope line="1937">
                        <declaration name="lf" type="ObjectStreamField" line="1938"/>
                        <scope line="1939">
                            <scope line="1940"/>
                            <scope line="1943"/>
                            <scope line="1946"/>
                        </scope>
                    </scope>
                    <scope line="1951"/>
                </scope>
            </method>
            <javadoc line="1959">
                Removes from the specified map any keys that have been enqueued
                  on the specified reference queue.                
            </javadoc>
            <method name="processQueue" type="void" line="1963">
                <params>
                    <param name="queue" type="ReferenceQueue&lt;Class&lt;?&gt;&gt;"/>
                    <param name="map" type="ConcurrentMap&lt;? extends WeakReference&lt;Class&lt;?&gt;&gt;,?&gt;"/>
                </params>
                <declaration name="ref" type="Reference&amp;lt;? extends Class&amp;lt;?&amp;gt;&amp;gt;" line="1964"/>
                <scope line="1965"/>
            </method>
            <class name="WeakClassKey" line="1969">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="Class&lt;?&gt;"/>
                    </type_params>
                </extends>
                <javadoc line="1969">
                    Weak key for Class objects.                    
                </javadoc>
                <declaration name="hash" type="int" line="1973"/>
                <javadoc line="1973">
                    saved value of the referent&apos;s identity hash code, to maintain
                      a consistent hash code after the referent has been cleared                    
                </javadoc>
                <javadoc line="1978">
                    Create a new WeakClassKey to the given object, registered
                      with a queue.                    
                </javadoc>
                <method name="WeakClassKey" type="constructor" line="1982">
                    <params>
                        <param name="cl" type="Class&lt;?&gt;"/>
                        <param name="refQueue" type="ReferenceQueue&lt;Class&lt;?&gt;&gt;"/>
                    </params>
                </method>
                <javadoc line="1986">
                    Returns the identity hash code of the original referent.                    
                </javadoc>
                <method name="hashCode" type="int" line="1989"/>
                <javadoc line="1992">
                    Returns true if the given object is this identical
                      WeakClassKey instance, or, if this object&apos;s referent has not
                      been cleared, if the given object is another WeakClassKey
                      instance with the identical non-null referent as this one.                    
                </javadoc>
                <method name="equals" type="boolean" line="1998">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="1999"/>
                    <scope line="2002">
                        <declaration name="referent" type="Object" line="2003"/>
                    </scope>
                    <scope line="2006"/>
                </method>
            </class>
        </class>
    </source>