<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="CharArrayReader" line="2">
            <extends class="Reader"/>
            <javadoc line="2">
                This class implements a character buffer that can be used as a
                  character-input stream.                
                <author>
                    Herb Jellinek                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="buf" type="char" line="9"/>
            <javadoc line="9">
                The character buffer.                
            </javadoc>
            <declaration name="pos" type="int" line="13"/>
            <javadoc line="13">
                The current buffer position.                
            </javadoc>
            <declaration name="markedPos" type="int" line="17"/>
            <javadoc line="17">
                The position of mark in buffer.                
            </javadoc>
            <declaration name="count" type="int" line="21"/>
            <javadoc line="21">
                The index of the end of this buffer.  There is not valid
                  data at or beyond this index.                
            </javadoc>
            <javadoc line="26">
                Creates a CharArrayReader from the specified array of chars.                
                <param>
                    buf       Input buffer (not copied)                    
                </param>
            </javadoc>
            <method name="CharArrayReader" type="constructor" line="30">
                <params>
                    <param name="buf" type="char"/>
                </params>
            </method>
            <javadoc line="35">
                Creates a CharArrayReader from the specified array of chars.
                  &lt;p&gt; The resulting reader will start reading at the given
                  &lt;tt&gt;offset&lt;/tt&gt;.  The total number of &lt;tt&gt;char&lt;/tt&gt; values that can be
                  read from this reader will be either &lt;tt&gt;length&lt;/tt&gt; or
                  &lt;tt&gt;buf.length-offset&lt;/tt&gt;, whichever is smaller.                
                <throws>
                    IllegalArgumentExceptionIf &lt;tt&gt;offset&lt;/tt&gt; is negative or greater than
                      &lt;tt&gt;buf.length&lt;/tt&gt;, or if &lt;tt&gt;length&lt;/tt&gt; is negative, or if
                      the sum of these two values is negative.                    
                </throws>
                <param>
                    buf       Input buffer (not copied)                    
                </param>
                <param>
                    offset    Offset of the first char to read                    
                </param>
                <param>
                    length    Number of chars to read                    
                </param>
            </javadoc>
            <method name="CharArrayReader" type="constructor" line="48">
                <params>
                    <param name="buf" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="49"/>
            </method>
            <javadoc line="57">
                Checks to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="60"/>
            <javadoc line="63">
                Reads a single character.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="67">
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Reads characters into a portion of an array.                
                <param>
                    b  Destination buffer                    
                </param>
                <param>
                    off  Offset at which to start storing characters                    
                </param>
                <param>
                    len   Maximum number of characters to read                    
                </param>
                <return>
                    The actual number of characters read, or -1 if
                      the end of the stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="83">
                <params>
                    <param name="b" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="84">
                    <scope line="86"/>
                    <scope line="89"/>
                    <scope line="92"/>
                    <scope line="95"/>
                    <scope line="98"/>
                </scope>
            </method>
            <javadoc line="106">
                Skips characters.  Returns the number of characters that were skipped.
                  &lt;p&gt;The &lt;code&gt;n&lt;/code&gt; parameter may be negative, even though the
                  &lt;code&gt;skip&lt;/code&gt; method of the {@link Reader} superclass throws
                  an exception in this case. If &lt;code&gt;n&lt;/code&gt; is negative, then
                  this method does nothing and returns &lt;code&gt;0&lt;/code&gt;.                
                <param>
                    n The number of characters to skip                    
                </param>
                <return>
                    The number of characters actually skipped                    
                </return>
                <exception>
                    IOException If the stream is closed, or an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="116">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="117">
                    <scope line="119"/>
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="129">
                Tells whether this stream is ready to be read.  Character-array readers
                  are always ready to be read.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="134">
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Tells whether this stream supports the mark() operation, which it does.                
            </javadoc>
            <method name="markSupported" type="boolean" line="143"/>
            <javadoc line="146">
                Marks the present position in the stream.  Subsequent calls to reset()
                  will reposition the stream to this point.                
                <param>
                    readAheadLimit  Limit on the number of characters that may be
                      read while still preserving the mark.  Because
                      the stream&apos;s input comes from a character array,
                      there is no actual limit; hence this argument is
                      ignored.                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="156">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Resets the stream to the most recent mark, or to the beginning if it has
                  never been marked.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Closes the stream and releases any system resources associated with
                  it.  Once the stream has been closed, further read(), ready(),
                  mark(), reset(), or skip() invocations will throw an IOException.
                  Closing a previously closed stream has no effect.                
            </javadoc>
            <method name="close" type="void" line="179"/>
        </class>
    </source>