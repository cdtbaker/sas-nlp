<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="Reader" line="2">
            <implements interface="Readable"/>
            <implements interface="Closeable"/>
            <javadoc line="2">
                Abstract class for reading character streams.  The only methods that a
                  subclass must implement are read(char[], int, int) and close().  Most
                  subclasses, however, will override some of the methods defined here in order
                  to provide higher efficiency, additional functionality, or both.                
                <see>
                    BufferedReader                    
                </see>
                <see>
                    LineNumberReader                    
                </see>
                <see>
                    CharArrayReader                    
                </see>
                <see>
                    InputStreamReader                    
                </see>
                <see>
                    FileReader                    
                </see>
                <see>
                    FilterReader                    
                </see>
                <see>
                    PushbackReader                    
                </see>
                <see>
                    PipedReader                    
                </see>
                <see>
                    StringReader                    
                </see>
                <see>
                    Writer                    
                </see>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="lock" type="Object" line="21"/>
            <javadoc line="21">
                The object used to synchronize operations on this stream.  For
                  efficiency, a character-stream object may use an object other than
                  itself to protect critical sections.  A subclass should therefore use
                  the object in this field rather than &lt;tt&gt;this&lt;/tt&gt; or a synchronized
                  method.                
            </javadoc>
            <javadoc line="29">
                Creates a new character-stream reader whose critical sections will
                  synchronize on the reader itself.                
            </javadoc>
            <method name="Reader" type="constructor" line="33"/>
            <javadoc line="36">
                Creates a new character-stream reader whose critical sections will
                  synchronize on the given object.                
                <param>
                    lock  The Object to synchronize on.                    
                </param>
            </javadoc>
            <method name="Reader" type="constructor" line="41">
                <params>
                    <param name="lock" type="Object"/>
                </params>
                <scope line="42"/>
            </method>
            <javadoc line="47">
                Attempts to read characters into the specified character buffer.
                  The buffer is used as a repository of characters as-is: the only
                  changes made are the results of a put operation. No flipping or
                  rewinding of the buffer is performed.                
                <param>
                    target the buffer to read characters into                    
                </param>
                <return>
                    The number of characters added to the buffer, or
                      -1 if this source of characters is at its end                    
                </return>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerException if target is null                    
                </throws>
                <throws>
                    ReadOnlyBufferException if target is a read only buffer                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="read" type="int" line="60">
                <params>
                    <param name="target" type="java.nio.CharBuffer"/>
                </params>
                <declaration name="len" type="int" line="61"/>
                <declaration name="cbuf" type="char[]" line="62"/>
                <declaration name="n" type="int" line="63"/>
            </method>
            <javadoc line="67">
                Reads a single character.  This method will block until a character is
                  available, an I/O error occurs, or the end of the stream is reached.
                  &lt;p&gt; Subclasses that intend to support efficient single-character input
                  should override this method.                
                <return>
                    The character read, as an integer in the range 0 to 65535
                      (&lt;tt&gt;0x00-0xffff&lt;/tt&gt;), or -1 if the end of the stream has
                      been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="77">
                <declaration name="cb" type="char" line="78"/>
            </method>
            <javadoc line="82">
                Reads characters into an array.  This method will block until some input
                  is available, an I/O error occurs, or the end of the stream is reached.                
                <param>
                    cbuf  Destination buffer                    
                </param>
                <return>
                    The number of characters read, or -1
                      if the end of the stream
                      has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="91">
                <params>
                    <param name="cbuf" type="char"/>
                </params>
            </method>
            <method name="read" type="int" line="94"/>
            <javadoc line="94">
                Reads characters into a portion of an array.  This method will block
                  until some input is available, an I/O error occurs, or the end of the
                  stream is reached.                
                <param>
                    cbuf  Destination buffer                    
                </param>
                <param>
                    off   Offset at which to start storing characters                    
                </param>
                <param>
                    len   Maximum number of characters to read                    
                </param>
                <return>
                    The number of characters read, or -1 if the end of the
                      stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <declaration name="maxSkipBufferSize" type="int" line="106"/>
            <javadoc line="106">
                Maximum skip-buffer size                
            </javadoc>
            <declaration name="skipBuffer" type="char" line="110"/>
            <javadoc line="110">
                Skip buffer, null until allocated                
            </javadoc>
            <javadoc line="114">
                Skips characters.  This method will block until some characters are
                  available, an I/O error occurs, or the end of the stream is reached.                
                <param>
                    n  The number of characters to skip                    
                </param>
                <return>
                    The number of characters actually skipped                    
                </return>
                <exception>
                    IllegalArgumentException  If &lt;code&gt;n&lt;/code&gt; is negative.                    
                </exception>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="122">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="nn" type="int" line="124"/>
                <scope line="125">
                    <declaration name="r" type="long" line="127"/>
                    <scope line="128">
                        <declaration name="nc" type="int" line="129"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="136">
                Tells whether this stream is ready to be read.                
                <return>
                    True if the next read() is guaranteed not to block for input,
                      false otherwise.  Note that returning false does not guarantee that the
                      next read will block.                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="143"/>
            <javadoc line="146">
                Tells whether this stream supports the mark() operation. The default
                  implementation always returns false. Subclasses should override this
                  method.                
                <return>
                    true if and only if this stream supports the mark operation.                    
                </return>
            </javadoc>
            <method name="markSupported" type="boolean" line="152"/>
            <javadoc line="155">
                Marks the present position in the stream.  Subsequent calls to reset()
                  will attempt to reposition the stream to this point.  Not all
                  character-input streams support the mark() operation.                
                <param>
                    readAheadLimit  Limit on the number of characters that may be
                      read while still preserving the mark.  After
                      reading this many characters, attempting to
                      reset the stream may fail.                    
                </param>
                <exception>
                    IOException  If the stream does not support mark(),
                      or if some other I/O error occurs                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="166">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
            </method>
            <javadoc line="169">
                Resets the stream.  If the stream has been marked, then attempt to
                  reposition it at the mark.  If the stream has not been marked, then
                  attempt to reset it in some way appropriate to the particular stream,
                  for example by repositioning it to its starting point.  Not all
                  character-input streams support the reset() operation, and some support
                  reset() without supporting mark().                
                <exception>
                    IOException  If the stream has not been marked,
                      or if the mark has been invalidated,
                      or if the stream does not support reset(),
                      or if some other I/O error occurs                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="181"/>
            <method name="close" type="void" line="184"/>
            <javadoc line="184">
                Closes the stream and releases any system resources associated with
                  it.  Once the stream has been closed, further read(), ready(),
                  mark(), reset(), or skip() invocations will throw an IOException.
                  Closing a previously closed stream has no effect.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
        </class>
    </source>