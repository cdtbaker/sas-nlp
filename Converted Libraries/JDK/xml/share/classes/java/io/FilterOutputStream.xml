<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="FilterOutputStream" line="2">
            <extends class="OutputStream"/>
            <javadoc line="2">
                This class is the superclass of all classes that filter output
                  streams. These streams sit on top of an already existing output
                  stream (the &lt;i&gt;underlying&lt;/i&gt; output stream) which it uses as its
                  basic sink of data, but possibly transforming the data along the
                  way or providing additional functionality.
                  &lt;p&gt;
                  The class &lt;code&gt;FilterOutputStream&lt;/code&gt; itself simply overrides
                  all methods of &lt;code&gt;OutputStream&lt;/code&gt; with versions that pass
                  all requests to the underlying output stream. Subclasses of
                  &lt;code&gt;FilterOutputStream&lt;/code&gt; may further override some of these
                  methods as well as provide additional methods and fields.                
                <author>
                    Jonathan Payne                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="out" type="OutputStream" line="18"/>
            <javadoc line="18">
                The underlying output stream to be filtered.                
            </javadoc>
            <javadoc line="22">
                Creates an output stream filter built on top of the specified
                  underlying output stream.                
                <param>
                    out   the underlying output stream to be assigned to
                      the field &lt;tt&gt;this.out&lt;/tt&gt; for later use, or
                      &lt;code&gt;null&lt;/code&gt; if this instance is to be
                      created without an underlying stream.                    
                </param>
            </javadoc>
            <method name="FilterOutputStream" type="constructor" line="30">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="33">
                Writes the specified &lt;code&gt;byte&lt;/code&gt; to this output stream.
                  &lt;p&gt;
                  The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt;
                  calls the &lt;code&gt;write&lt;/code&gt; method of its underlying output stream,
                  that is, it performs &lt;tt&gt;out.write(b)&lt;/tt&gt;.
                  &lt;p&gt;
                  Implements the abstract &lt;tt&gt;write&lt;/tt&gt; method of &lt;tt&gt;OutputStream&lt;/tt&gt;.                
                <param>
                    b   the &lt;code&gt;byte&lt;/code&gt;.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="44">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="47">
                Writes &lt;code&gt;b.length&lt;/code&gt; bytes to this output stream.
                  &lt;p&gt;
                  The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt;
                  calls its &lt;code&gt;write&lt;/code&gt; method of three arguments with the
                  arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and
                  &lt;code&gt;b.length&lt;/code&gt;.
                  &lt;p&gt;
                  Note that this method does not call the one-argument
                  &lt;code&gt;write&lt;/code&gt; method of its underlying stream with the single
                  argument &lt;code&gt;b&lt;/code&gt;.                
                <param>
                    b   the data to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#write(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="write" type="void" line="62">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="65">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified
                  &lt;code&gt;byte&lt;/code&gt; array starting at offset &lt;code&gt;off&lt;/code&gt; to
                  this output stream.
                  &lt;p&gt;
                  The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt;
                  calls the &lt;code&gt;write&lt;/code&gt; method of one argument on each
                  &lt;code&gt;byte&lt;/code&gt; to output.
                  &lt;p&gt;
                  Note that this method does not call the &lt;code&gt;write&lt;/code&gt; method
                  of its underlying input stream with the same arguments. Subclasses
                  of &lt;code&gt;FilterOutputStream&lt;/code&gt; should provide a more efficient
                  implementation of this method.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#write(int)                    
                </see>
            </javadoc>
            <method name="write" type="void" line="84">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="86"/>
            </method>
            <javadoc line="90">
                Flushes this output stream and forces any buffered output bytes
                  to be written out to the stream.
                  &lt;p&gt;
                  The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt;
                  calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="flush" type="void" line="99"/>
            <javadoc line="102">
                Closes this output stream and releases any system resources
                  associated with the stream.
                  &lt;p&gt;
                  The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt;
                  calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the
                  &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#flush()                    
                </see>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="close" type="void" line="113">
                <scope line="114"/>
                <scope line="117"/>
            </method>
        </class>
    </source>