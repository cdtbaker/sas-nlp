<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <interface name="DataInput">
            <javadoc line="28">
                The &lt;code&gt;DataInput&lt;/code&gt; interface provides
                  for reading bytes from a binary stream and
                  reconstructing from them data in any of
                  the Java primitive types. There is also
                  a
                  facility for reconstructing a &lt;code&gt;String&lt;/code&gt;
                  from data in
                  &lt;a href=&quot;#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  format.
                  &lt;p&gt;
                  It is generally true of all the reading
                  routines in this interface that if end of
                  file is reached before the desired number
                  of bytes has been read, an &lt;code&gt;EOFException&lt;/code&gt;
                  (which is a kind of &lt;code&gt;IOException&lt;/code&gt;)
                  is thrown. If any byte cannot be read for
                  any reason other than end of file, an &lt;code&gt;IOException&lt;/code&gt;
                  other than &lt;code&gt;EOFException&lt;/code&gt; is
                  thrown. In particular, an &lt;code&gt;IOException&lt;/code&gt;
                  may be thrown if the input stream has been
                  closed.
                  &lt;h4&gt;&lt;a name=&quot;modified-utf-8&quot;&gt;Modified UTF-8&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  Implementations of the DataInput and DataOutput interfaces represent
                  Unicode strings in a format that is a slight modification of UTF-8.
                  (For information regarding the standard UTF-8 format, see section
                  &lt;i&gt;3.9 Unicode Encoding Forms&lt;/i&gt; of &lt;i&gt;The Unicode Standard, Version
                  4.0&lt;/i&gt;).
                  Note that in the following tables, the most significant bit appears in the
                  far left-hand column.
                  &lt;p&gt;
                  All characters in the range &lt;code&gt;&apos;&amp;#92;u0001&apos;&lt;/code&gt; to
                  &lt;code&gt;&apos;&amp;#92;u007F&apos;&lt;/code&gt; are represented by a single byte:
                  &lt;blockquote&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;8&quot; width=&quot;50%&quot;
                  summary=&quot;Bit values and bytes&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;th id=&quot;bit&quot;&gt;Bit Values&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte1&quot;&gt;Byte 1&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;7&quot;&gt;&lt;center&gt;bits 6-0&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  The null character &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; and characters in the
                  range &lt;code&gt;&apos;&amp;#92;u0080&apos;&lt;/code&gt; to &lt;code&gt;&apos;&amp;#92;u07FF&apos;&lt;/code&gt; are
                  represented by a pair of bytes:
                  &lt;blockquote&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;8&quot; width=&quot;50%&quot;
                  summary=&quot;Bit values and bytes&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;th id=&quot;bit&quot;&gt;Bit Values&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte1&quot;&gt;Byte 1&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;5&quot;&gt;&lt;center&gt;bits 10-6&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte2&quot;&gt;Byte 2&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;6&quot;&gt;&lt;center&gt;bits 5-0&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;br&gt;
                  &lt;code&gt;char&lt;/code&gt; values in the range &lt;code&gt;&apos;&amp;#92;u0800&apos;&lt;/code&gt; to
                  &lt;code&gt;&apos;&amp;#92;uFFFF&apos;&lt;/code&gt; are represented by three bytes:
                  &lt;blockquote&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;8&quot; width=&quot;50%&quot;
                  summary=&quot;Bit values and bytes&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;th id=&quot;bit&quot;&gt;Bit Values&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte1&quot;&gt;Byte 1&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;4&quot;&gt;&lt;center&gt;bits 15-12&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte2&quot;&gt;Byte 2&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;6&quot;&gt;&lt;center&gt;bits 11-6&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;byte3&quot;&gt;Byte 3&lt;/th&gt;
                  &lt;td&gt;
                  &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
                  &lt;tr&gt;
                  &lt;td width=&quot;12%&quot;&gt;&lt;center&gt;1&lt;/center&gt;
                  &lt;td width=&quot;13%&quot;&gt;&lt;center&gt;0&lt;/center&gt;
                  &lt;td colspan=&quot;6&quot;&gt;&lt;center&gt;bits 5-0&lt;/center&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  The differences between this format and the
                  standard UTF-8 format are the following:
                  &lt;ul&gt;
                  &lt;li&gt;The null byte &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; is encoded in 2-byte format
                  rather than 1-byte, so that the encoded strings never have
                  embedded nulls.
                  &lt;li&gt;Only the 1-byte, 2-byte, and 3-byte formats are used.
                  &lt;li&gt;&lt;a href=&quot;../lang/Character.html#unicode&quot;&gt;Supplementary characters&lt;/a&gt;
                  are represented in the form of surrogate pairs.
                  &lt;/ul&gt;                
                <author>
                    Frank Yellin                    
                </author>
                <see>
                    java.io.DataInputStream                    
                </see>
                <see>
                    java.io.DataOutput                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="readFully" type="void" line="195"/>
            <javadoc line="195">
                Reads some bytes from an input
                  stream and stores them into the buffer
                  array &lt;code&gt;b&lt;/code&gt;. The number of bytes
                  read is equal
                  to the length of &lt;code&gt;b&lt;/code&gt;.
                  &lt;p&gt;
                  This method blocks until one of the
                  following conditions occurs:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;b.length&lt;/code&gt;
                  bytes of input data are available, in which
                  case a normal return is made.
                  &lt;li&gt;End of
                  file is detected, in which case an &lt;code&gt;EOFException&lt;/code&gt;
                  is thrown.
                  &lt;li&gt;An I/O error occurs, in
                  which case an &lt;code&gt;IOException&lt;/code&gt; other
                  than &lt;code&gt;EOFException&lt;/code&gt; is thrown.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  If &lt;code&gt;b.length&lt;/code&gt; is zero, then
                  no bytes are read. Otherwise, the first
                  byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;,
                  the next one into &lt;code&gt;b[1]&lt;/code&gt;, and
                  so on.
                  If an exception is thrown from
                  this method, then it may be that some but
                  not all bytes of &lt;code&gt;b&lt;/code&gt; have been
                  updated with data from the input stream.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readFully" type="void" line="237"/>
            <javadoc line="237">
                Reads &lt;code&gt;len&lt;/code&gt;
                  bytes from
                  an input stream.
                  &lt;p&gt;
                  This method
                  blocks until one of the following conditions
                  occurs:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;len&lt;/code&gt; bytes
                  of input data are available, in which case
                  a normal return is made.
                  &lt;li&gt;End of file
                  is detected, in which case an &lt;code&gt;EOFException&lt;/code&gt;
                  is thrown.
                  &lt;li&gt;An I/O error occurs, in
                  which case an &lt;code&gt;IOException&lt;/code&gt; other
                  than &lt;code&gt;EOFException&lt;/code&gt; is thrown.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  a &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  If &lt;code&gt;off&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt;
                  is negative, or &lt;code&gt;off+len&lt;/code&gt; is
                  greater than the length of the array &lt;code&gt;b&lt;/code&gt;,
                  then an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;
                  is thrown.
                  If &lt;code&gt;len&lt;/code&gt; is zero,
                  then no bytes are read. Otherwise, the first
                  byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;,
                  the next one into &lt;code&gt;b[off+1]&lt;/code&gt;,
                  and so on. The number of bytes read is,
                  at most, equal to &lt;code&gt;len&lt;/code&gt;.                
                <param>
                    b   the buffer into which the data is read.                    
                </param>
                <param>
                    off  an int specifying the offset into the data.                    
                </param>
                <param>
                    len  an int specifying the number of bytes to read.                    
                </param>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="skipBytes" type="int" line="283"/>
            <javadoc line="283">
                Makes an attempt to skip over
                  &lt;code&gt;n&lt;/code&gt; bytes
                  of data from the input
                  stream, discarding the skipped bytes. However,
                  it may skip
                  over some smaller number of
                  bytes, possibly zero. This may result from
                  any of a
                  number of conditions; reaching
                  end of file before &lt;code&gt;n&lt;/code&gt; bytes
                  have been skipped is
                  only one possibility.
                  This method never throws an &lt;code&gt;EOFException&lt;/code&gt;.
                  The actual
                  number of bytes skipped is returned.                
                <param>
                    n   the number of bytes to be skipped.                    
                </param>
                <return>
                    the number of bytes actually skipped.                    
                </return>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readBoolean" type="boolean" line="306"/>
            <javadoc line="306">
                Reads one input byte and returns
                  &lt;code&gt;true&lt;/code&gt; if that byte is nonzero,
                  &lt;code&gt;false&lt;/code&gt; if that byte is zero.
                  This method is suitable for reading
                  the byte written by the &lt;code&gt;writeBoolean&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>boolean</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readByte" type="byte" line="321"/>
            <javadoc line="321">
                Reads and returns one input byte.
                  The byte is treated as a signed value in
                  the range &lt;code&gt;-128&lt;/code&gt; through &lt;code&gt;127&lt;/code&gt;,
                  inclusive.
                  This method is suitable for
                  reading the byte written by the &lt;code&gt;writeByte&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the 8-bit value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readUnsignedByte" type="int" line="337"/>
            <javadoc line="337">
                Reads one input byte, zero-extends
                  it to type &lt;code&gt;int&lt;/code&gt;, and returns
                  the result, which is therefore in the range
                  &lt;code&gt;0&lt;/code&gt;
                  through &lt;code&gt;255&lt;/code&gt;.
                  This method is suitable for reading
                  the byte written by the &lt;code&gt;writeByte&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;
                  if the argument to &lt;code&gt;writeByte&lt;/code&gt;
                  was intended to be a value in the range
                  &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;255&lt;/code&gt;.                
                <return>
                    the unsigned 8-bit value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readShort" type="short" line="357"/>
            <javadoc line="357">
                Reads two input bytes and returns
                  a &lt;code&gt;short&lt;/code&gt; value. Let &lt;code&gt;a&lt;/code&gt;
                  be the first byte read and &lt;code&gt;b&lt;/code&gt;
                  be the second byte. The value
                  returned
                  is:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;(short)((a &amp;lt;&amp;lt; 8) | (b &amp;amp; 0xff))
                  &lt;/code&gt;&lt;/pre&gt;
                  This method
                  is suitable for reading the bytes written
                  by the &lt;code&gt;writeShort&lt;/code&gt; method of
                  interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the 16-bit value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readUnsignedShort" type="int" line="378"/>
            <javadoc line="378">
                Reads two input bytes and returns
                  an &lt;code&gt;int&lt;/code&gt; value in the range &lt;code&gt;0&lt;/code&gt;
                  through &lt;code&gt;65535&lt;/code&gt;. Let &lt;code&gt;a&lt;/code&gt;
                  be the first byte read and
                  &lt;code&gt;b&lt;/code&gt;
                  be the second byte. The value returned is:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;(((a &amp;amp; 0xff) &amp;lt;&amp;lt; 8) | (b &amp;amp; 0xff))
                  &lt;/code&gt;&lt;/pre&gt;
                  This method is suitable for reading the bytes
                  written by the &lt;code&gt;writeShort&lt;/code&gt; method
                  of interface &lt;code&gt;DataOutput&lt;/code&gt;  if
                  the argument to &lt;code&gt;writeShort&lt;/code&gt;
                  was intended to be a value in the range
                  &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;65535&lt;/code&gt;.                
                <return>
                    the unsigned 16-bit value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readChar" type="char" line="401"/>
            <javadoc line="401">
                Reads two input bytes and returns a &lt;code&gt;char&lt;/code&gt; value.
                  Let &lt;code&gt;a&lt;/code&gt;
                  be the first byte read and &lt;code&gt;b&lt;/code&gt;
                  be the second byte. The value
                  returned is:
                  &lt;p&gt;&lt;pre&gt;&lt;code&gt;(char)((a &amp;lt;&amp;lt; 8) | (b &amp;amp; 0xff))
                  &lt;/code&gt;&lt;/pre&gt;
                  This method
                  is suitable for reading bytes written by
                  the &lt;code&gt;writeChar&lt;/code&gt; method of interface
                  &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>char</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readInt" type="int" line="421"/>
            <javadoc line="421">
                Reads four input bytes and returns an
                  &lt;code&gt;int&lt;/code&gt; value. Let &lt;code&gt;a-d&lt;/code&gt;
                  be the first through fourth bytes read. The value returned is:
                  &lt;p&gt;&lt;pre&gt;
                  &lt;code&gt;
                  (((a &amp;amp; 0xff) &amp;lt;&amp;lt; 24) | ((b &amp;amp; 0xff) &amp;lt;&amp;lt; 16) |
                  &amp;#32;((c &amp;amp; 0xff) &amp;lt;&amp;lt; 8) | (d &amp;amp; 0xff))
                  &lt;/code&gt;&lt;/pre&gt;
                  This method is suitable
                  for reading bytes written by the &lt;code&gt;writeInt&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>int</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readLong" type="long" line="441"/>
            <javadoc line="441">
                Reads eight input bytes and returns
                  a &lt;code&gt;long&lt;/code&gt; value. Let &lt;code&gt;a-h&lt;/code&gt;
                  be the first through eighth bytes read.
                  The value returned is:
                  &lt;p&gt;&lt;pre&gt; &lt;code&gt;
                  (((long)(a &amp;amp; 0xff) &amp;lt;&amp;lt; 56) |
                  ((long)(b &amp;amp; 0xff) &amp;lt;&amp;lt; 48) |
                  ((long)(c &amp;amp; 0xff) &amp;lt;&amp;lt; 40) |
                  ((long)(d &amp;amp; 0xff) &amp;lt;&amp;lt; 32) |
                  ((long)(e &amp;amp; 0xff) &amp;lt;&amp;lt; 24) |
                  ((long)(f &amp;amp; 0xff) &amp;lt;&amp;lt; 16) |
                  ((long)(g &amp;amp; 0xff) &amp;lt;&amp;lt;  8) |
                  ((long)(h &amp;amp; 0xff)))
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  This method is suitable
                  for reading bytes written by the &lt;code&gt;writeLong&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>long</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readFloat" type="float" line="468"/>
            <javadoc line="468">
                Reads four input bytes and returns
                  a &lt;code&gt;float&lt;/code&gt; value. It does this
                  by first constructing an &lt;code&gt;int&lt;/code&gt;
                  value in exactly the manner
                  of the &lt;code&gt;readInt&lt;/code&gt;
                  method, then converting this &lt;code&gt;int&lt;/code&gt;
                  value to a &lt;code&gt;float&lt;/code&gt; in
                  exactly the manner of the method &lt;code&gt;Float.intBitsToFloat&lt;/code&gt;.
                  This method is suitable for reading
                  bytes written by the &lt;code&gt;writeFloat&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>float</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readDouble" type="double" line="488"/>
            <javadoc line="488">
                Reads eight input bytes and returns
                  a &lt;code&gt;double&lt;/code&gt; value. It does this
                  by first constructing a &lt;code&gt;long&lt;/code&gt;
                  value in exactly the manner
                  of the &lt;code&gt;readlong&lt;/code&gt;
                  method, then converting this &lt;code&gt;long&lt;/code&gt;
                  value to a &lt;code&gt;double&lt;/code&gt; in exactly
                  the manner of the method &lt;code&gt;Double.longBitsToDouble&lt;/code&gt;.
                  This method is suitable for reading
                  bytes written by the &lt;code&gt;writeDouble&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;.                
                <return>
                    the <code>double</code> value read.                    
                </return>
                <exception>
                    EOFException  if this stream reaches the end before reading
                      all the bytes.                    
                </exception>
                <exception>
                    IOException   if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readLine" type="String" line="508"/>
            <javadoc line="508">
                Reads the next line of text from the input stream.
                  It reads successive bytes, converting
                  each byte separately into a character,
                  until it encounters a line terminator or
                  end of
                  file; the characters read are then
                  returned as a &lt;code&gt;String&lt;/code&gt;. Note
                  that because this
                  method processes bytes,
                  it does not support input of the full Unicode
                  character set.
                  &lt;p&gt;
                  If end of file is encountered
                  before even one byte can be read, then &lt;code&gt;null&lt;/code&gt;
                  is returned. Otherwise, each byte that is
                  read is converted to type &lt;code&gt;char&lt;/code&gt;
                  by zero-extension. If the character &lt;code&gt;&apos;\n&apos;&lt;/code&gt;
                  is encountered, it is discarded and reading
                  ceases. If the character &lt;code&gt;&apos;\r&apos;&lt;/code&gt;
                  is encountered, it is discarded and, if
                  the following byte converts &amp;#32;to the
                  character &lt;code&gt;&apos;\n&apos;&lt;/code&gt;, then that is
                  discarded also; reading then ceases. If
                  end of file is encountered before either
                  of the characters &lt;code&gt;&apos;\n&apos;&lt;/code&gt; and
                  &lt;code&gt;&apos;\r&apos;&lt;/code&gt; is encountered, reading
                  ceases. Once reading has ceased, a &lt;code&gt;String&lt;/code&gt;
                  is returned that contains all the characters
                  read and not discarded, taken in order.
                  Note that every character in this string
                  will have a value less than &lt;code&gt;&amp;#92;u0100&lt;/code&gt;,
                  that is, &lt;code&gt;(char)256&lt;/code&gt;.                
                <return>
                    the next line of text from the input stream,
                      or <CODE>null</CODE> if the end of file is
                      encountered before a byte can be read.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="readUTF" type="String" line="549"/>
            <javadoc line="549">
                Reads in a string that has been encoded using a
                  &lt;a href=&quot;#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  format.
                  The general contract of &lt;code&gt;readUTF&lt;/code&gt;
                  is that it reads a representation of a Unicode
                  character string encoded in modified
                  UTF-8 format; this string of characters
                  is then returned as a &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;
                  First, two bytes are read and used to
                  construct an unsigned 16-bit integer in
                  exactly the manner of the &lt;code&gt;readUnsignedShort&lt;/code&gt;
                  method . This integer value is called the
                  &lt;i&gt;UTF length&lt;/i&gt; and specifies the number
                  of additional bytes to be read. These bytes
                  are then converted to characters by considering
                  them in groups. The length of each group
                  is computed from the value of the first
                  byte of the group. The byte following a
                  group, if any, is the first byte of the
                  next group.
                  &lt;p&gt;
                  If the first byte of a group
                  matches the bit pattern &lt;code&gt;0xxxxxxx&lt;/code&gt;
                  (where &lt;code&gt;x&lt;/code&gt; means &quot;may be &lt;code&gt;0&lt;/code&gt;
                  or &lt;code&gt;1&lt;/code&gt;&quot;), then the group consists
                  of just that byte. The byte is zero-extended
                  to form a character.
                  &lt;p&gt;
                  If the first byte
                  of a group matches the bit pattern &lt;code&gt;110xxxxx&lt;/code&gt;,
                  then the group consists of that byte &lt;code&gt;a&lt;/code&gt;
                  and a second byte &lt;code&gt;b&lt;/code&gt;. If there
                  is no byte &lt;code&gt;b&lt;/code&gt; (because byte
                  &lt;code&gt;a&lt;/code&gt; was the last of the bytes
                  to be read), or if byte &lt;code&gt;b&lt;/code&gt; does
                  not match the bit pattern &lt;code&gt;10xxxxxx&lt;/code&gt;,
                  then a &lt;code&gt;UTFDataFormatException&lt;/code&gt;
                  is thrown. Otherwise, the group is converted
                  to the character:&lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;(char)(((a&amp;amp; 0x1F) &amp;lt;&amp;lt; 6) | (b &amp;amp; 0x3F))
                  &lt;/code&gt;&lt;/pre&gt;
                  If the first byte of a group
                  matches the bit pattern &lt;code&gt;1110xxxx&lt;/code&gt;,
                  then the group consists of that byte &lt;code&gt;a&lt;/code&gt;
                  and two more bytes &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;.
                  If there is no byte &lt;code&gt;c&lt;/code&gt; (because
                  byte &lt;code&gt;a&lt;/code&gt; was one of the last
                  two of the bytes to be read), or either
                  byte &lt;code&gt;b&lt;/code&gt; or byte &lt;code&gt;c&lt;/code&gt;
                  does not match the bit pattern &lt;code&gt;10xxxxxx&lt;/code&gt;,
                  then a &lt;code&gt;UTFDataFormatException&lt;/code&gt;
                  is thrown. Otherwise, the group is converted
                  to the character:&lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  (char)(((a &amp;amp; 0x0F) &amp;lt;&amp;lt; 12) | ((b &amp;amp; 0x3F) &amp;lt;&amp;lt; 6) | (c &amp;amp; 0x3F))
                  &lt;/code&gt;&lt;/pre&gt;
                  If the first byte of a group matches the
                  pattern &lt;code&gt;1111xxxx&lt;/code&gt; or the pattern
                  &lt;code&gt;10xxxxxx&lt;/code&gt;, then a &lt;code&gt;UTFDataFormatException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  If end of file is encountered
                  at any time during this entire process,
                  then an &lt;code&gt;EOFException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  After every group has been converted to
                  a character by this process, the characters
                  are gathered, in the same order in which
                  their corresponding groups were read from
                  the input stream, to form a &lt;code&gt;String&lt;/code&gt;,
                  which is returned.
                  &lt;p&gt;
                  The &lt;code&gt;writeUTF&lt;/code&gt;
                  method of interface &lt;code&gt;DataOutput&lt;/code&gt;
                  may be used to write data that is suitable
                  for reading by this method.                
                <return>
                    a Unicode string.                    
                </return>
                <exception>
                    EOFException            if this stream reaches the end
                      before reading all the bytes.                    
                </exception>
                <exception>
                    IOException             if an I/O error occurs.                    
                </exception>
                <exception>
                    UTFDataFormatException  if the bytes do not represent a
                      valid modified UTF-8 encoding of a string.                    
                </exception>
            </javadoc>
        </interface>
    </source>