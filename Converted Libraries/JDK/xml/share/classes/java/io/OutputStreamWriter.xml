<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="sun.nio.cs.StreamEncoder"/>
        <class name="OutputStreamWriter" line="33">
            <extends class="Writer"/>
            <javadoc line="33">
                An OutputStreamWriter is a bridge from character streams to byte streams:
                  Characters written to it are encoded into bytes using a specified {@link java.nio.charset.Charset &lt;code&gt;charset&lt;/code&gt;}.  The charset that it uses
                  may be specified by name or may be given explicitly, or the platform&apos;s
                  default charset may be accepted.
                  &lt;p&gt; Each invocation of a write() method causes the encoding converter to be
                  invoked on the given character(s).  The resulting bytes are accumulated in a
                  buffer before being written to the underlying output stream.  The size of
                  this buffer may be specified, but by default it is large enough for most
                  purposes.  Note that the characters passed to the write() methods are not
                  buffered.
                  &lt;p&gt; For top efficiency, consider wrapping an OutputStreamWriter within a
                  BufferedWriter so as to avoid frequent converter invocations.  For example:
                  &lt;pre&gt;
                  Writer out
                  = new BufferedWriter(new OutputStreamWriter(System.out));
                  &lt;/pre&gt;
                  &lt;p&gt; A &lt;i&gt;surrogate pair&lt;/i&gt; is a character represented by a sequence of two
                  &lt;tt&gt;char&lt;/tt&gt; values: A &lt;i&gt;high&lt;/i&gt; surrogate in the range &apos;&amp;#92;uD800&apos; to
                  &apos;&amp;#92;uDBFF&apos; followed by a &lt;i&gt;low&lt;/i&gt; surrogate in the range &apos;&amp;#92;uDC00&apos; to
                  &apos;&amp;#92;uDFFF&apos;.
                  &lt;p&gt; A &lt;i&gt;malformed surrogate element&lt;/i&gt; is a high surrogate that is not
                  followed by a low surrogate or a low surrogate that is not preceded by a
                  high surrogate.
                  &lt;p&gt; This class always replaces malformed surrogate elements and unmappable
                  character sequences with the charset&apos;s default &lt;i&gt;substitution sequence&lt;/i&gt;.
                  The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more
                  control over the encoding process is required.                
                <see>
                    BufferedWriter                    
                </see>
                <see>
                    OutputStream                    
                </see>
                <see>
                    java.nio.charset.Charset                    
                </see>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="se" type="StreamEncoder" line="79"/>
            <javadoc line="81">
                Creates an OutputStreamWriter that uses the named charset.                
                <param>
                    outAn OutputStream                    
                </param>
                <param>
                    charsetNameThe name of a supported{@link java.nio.charset.Charset &lt;/code&gt;charset&lt;code&gt;}                    
                </param>
                <exception>
                    UnsupportedEncodingExceptionIf the named encoding is not supported                    
                </exception>
            </javadoc>
            <method name="OutputStreamWriter" type="constructor" line="96">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="charsetName" type="String"/>
                </params>
            </method>
            <javadoc line="103">
                Creates an OutputStreamWriter that uses the default character encoding.                
                <param>
                    out  An OutputStream                    
                </param>
            </javadoc>
            <method name="OutputStreamWriter" type="constructor" line="108">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="110"/>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Creates an OutputStreamWriter that uses the given charset. &lt;/p&gt;                
                <param>
                    outAn OutputStream                    
                </param>
                <param>
                    csA charset                    
                </param>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="OutputStreamWriter" type="constructor" line="129">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="cs" type="Charset"/>
                </params>
            </method>
            <javadoc line="136">
                Creates an OutputStreamWriter that uses the given charset encoder.  &lt;/p&gt;                
                <param>
                    outAn OutputStream                    
                </param>
                <param>
                    encA charset encoder                    
                </param>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="OutputStreamWriter" type="constructor" line="148">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="enc" type="CharsetEncoder"/>
                </params>
            </method>
            <javadoc line="155">
                Returns the name of the character encoding being used by this stream.
                  &lt;p&gt; If the encoding has an historical name then that name is returned;
                  otherwise the encoding&apos;s canonical name is returned.
                  &lt;p&gt; If this instance was created with the {@link #OutputStreamWriter(OutputStream,String)} constructor then the returned
                  name, being unique for the encoding, may differ from the name passed to
                  the constructor.  This method may return &lt;tt&gt;null&lt;/tt&gt; if the stream has
                  been closed. &lt;/p&gt;                
                <return>
                    The historical name of this encoding, or possibly
                      &lt;code&gt;null&lt;/code&gt; if the stream has been closed                    
                </return>
                <see>
                    java.nio.charset.Charset                    
                </see>
                <revised>
                    1.4                    
                </revised>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="getEncoding" type="String" line="175"/>
            <javadoc line="179">
                Flushes the output buffer to the underlying byte stream, without flushing
                  the byte stream itself.  This method is non-private only so that it may
                  be invoked by PrintStream.                
            </javadoc>
            <method name="flushBuffer" type="void" line="184"/>
            <javadoc line="188">
                Writes a single character.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="193">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="197">
                Writes a portion of an array of characters.                
                <param>
                    cbuf  Buffer of characters                    
                </param>
                <param>
                    off   Offset from which to start writing characters                    
                </param>
                <param>
                    len   Number of characters to write                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="206">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Writes a portion of a string.                
                <param>
                    str  A String                    
                </param>
                <param>
                    off  Offset from which to start writing characters                    
                </param>
                <param>
                    len  Number of characters to write                    
                </param>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="219">
                <params>
                    <param name="str" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Flushes the stream.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="flush" type="void" line="228"/>
            <method name="close" type="void" line="232"/>
        </class>
    </source>