<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <class name="SerializablePermission" line="33">
            <extends class="BasicPermission"/>
            <comment line="91">
                                
            </comment>
            <javadoc line="33">
                This class is for Serializable permissions. A SerializablePermission
                  contains a name (also referred to as a &quot;target name&quot;) but
                  no actions list; you either have the named permission
                  or you don&apos;t.
                  &lt;P&gt;
                  The target name is the name of the Serializable permission (see below).
                  &lt;P&gt;
                  The following table lists all the possible SerializablePermission target names,
                  and for each provides a description of what the permission allows
                  and a discussion of the risks of granting code the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5 summary=&quot;Permission target name, what the permission allows, and associated risks&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;enableSubclassImplementation&lt;/td&gt;
                  &lt;td&gt;Subclass implementation of ObjectOutputStream or ObjectInputStream
                  to override the default serialization or deserialization, respectively,
                  of objects&lt;/td&gt;
                  &lt;td&gt;Code can use this to serialize or
                  deserialize classes in a purposefully malfeasant manner. For example,
                  during serialization, malicious code can use this to
                  purposefully store confidential private field data in a way easily accessible
                  to attackers. Or, during deserialization it could, for example, deserialize
                  a class with all its private fields zeroed out.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;enableSubstitution&lt;/td&gt;
                  &lt;td&gt;Substitution of one object for another during
                  serialization or deserialization&lt;/td&gt;
                  &lt;td&gt;This is dangerous because malicious code
                  can replace the actual object with one which has incorrect or
                  malignant data.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Joe Fialli                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="94"/>
            <declaration name="actions" type="String" line="96"/>
            <javadoc line="96">
                @serial                
            </javadoc>
            <javadoc line="101">
                Creates a new SerializablePermission with the specified name.
                  The name is the symbolic name of the SerializablePermission, such as
                  &quot;enableSubstitution&quot;, etc.                
                <param>
                    name the name of the SerializablePermission.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SerializablePermission" type="constructor" line="112">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="116">
                Creates a new SerializablePermission object with the specified name.
                  The name is the symbolic name of the SerializablePermission, and the
                  actions String is currently unused and should be null.                
                <param>
                    name the name of the SerializablePermission.                    
                </param>
                <param>
                    actions currently unused and must be set to null                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SerializablePermission" type="constructor" line="129">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
        </class>
    </source>