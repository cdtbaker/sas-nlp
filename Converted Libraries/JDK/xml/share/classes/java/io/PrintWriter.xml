<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.Objects"/>
        <import package="java.util.Formatter"/>
        <import package="java.util.Locale"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.IllegalCharsetNameException"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <class name="PrintWriter" line="8">
            <extends class="Writer"/>
            <javadoc line="8">
                Prints formatted representations of objects to a text-output stream.  This
                  class implements all of the &lt;tt&gt;print&lt;/tt&gt; methods found in {@link PrintStream}.  It does not contain methods for writing raw bytes, for which
                  a program should use unencoded byte streams.
                  &lt;p&gt; Unlike the {@link PrintStream} class, if automatic flushing is enabled
                  it will be done only when one of the &lt;tt&gt;println&lt;/tt&gt;, &lt;tt&gt;printf&lt;/tt&gt;, or
                  &lt;tt&gt;format&lt;/tt&gt; methods is invoked, rather than whenever a newline character
                  happens to be output.  These methods use the platform&apos;s own notion of line
                  separator rather than the newline character.
                  &lt;p&gt; Methods in this class never throw I/O exceptions, although some of its
                  constructors may.  The client may inquire as to whether any errors have
                  occurred by invoking {@link #checkError checkError()}.                
                <author>
                    Frank Yellin                    
                </author>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="out" type="Writer" line="25"/>
            <javadoc line="25">
                The underlying character-output stream of this
                  &lt;code&gt;PrintWriter&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="autoFlush" type="boolean" line="31"/>
            <declaration name="trouble" type="boolean" line="32"/>
            <declaration name="formatter" type="Formatter" line="33"/>
            <declaration name="psOut" type="PrintStream" line="34"/>
            <declaration name="lineSeparator" type="String" line="35"/>
            <javadoc line="35">
                Line separator string.  This is the value of the line.separator
                  property at the moment that the stream was created.                
            </javadoc>
            <javadoc line="40">
                Returns a charset object for the given charset name.                
                <throws>
                    NullPointerException          is csn is null                    
                </throws>
                <throws>
                    UnsupportedEncodingException  if the charset is not supported                    
                </throws>
            </javadoc>
            <method name="toCharset" type="Charset" line="45">
                <params>
                    <param name="csn" type="String"/>
                </params>
                <scope line="47"/>
                <scope line="50"/>
            </method>
            <javadoc line="54">
                Creates a new PrintWriter, without automatic line flushing.                
                <param>
                    out        A character-output stream                    
                </param>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="58">
                <params>
                    <param name="out" type="Writer"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a new PrintWriter.                
                <param>
                    out        A character-output stream                    
                </param>
                <param>
                    autoFlush  A boolean; if true, the &lt;tt&gt;println&lt;/tt&gt;,
                      &lt;tt&gt;printf&lt;/tt&gt;, or &lt;tt&gt;format&lt;/tt&gt; methods will
                      flush the output buffer                    
                </param>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="68">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="autoFlush" type="boolean"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a new PrintWriter, without automatic line flushing, from an
                  existing OutputStream.  This convenience constructor creates the
                  necessary intermediate OutputStreamWriter, which will convert characters
                  into bytes using the default character encoding.                
                <param>
                    out        An output stream                    
                </param>
                <see>
                    java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)                    
                </see>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="82">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a new PrintWriter from an existing OutputStream.  This
                  convenience constructor creates the necessary intermediate
                  OutputStreamWriter, which will convert characters into bytes using the
                  default character encoding.                
                <param>
                    out        An output stream                    
                </param>
                <param>
                    autoFlush  A boolean; if true, the &lt;tt&gt;println&lt;/tt&gt;,
                      &lt;tt&gt;printf&lt;/tt&gt;, or &lt;tt&gt;format&lt;/tt&gt; methods will
                      flush the output buffer                    
                </param>
                <see>
                    java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)                    
                </see>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="96">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="autoFlush" type="boolean"/>
                </params>
                <scope line="98"/>
            </method>
            <javadoc line="102">
                Creates a new PrintWriter, without automatic line flushing, with the
                  specified file name.  This convenience constructor creates the necessary
                  intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
                  which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.                
                <param>
                    fileNameThe name of the file to use as the destination of this writer.
                      If the file exists then it will be truncated to zero size;
                      otherwise, a new file will be created.  The output will be
                      written to the file and is buffered.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given string does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="120">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <method name="PrintWriter" type="constructor" line="123">
                <params>
                    <param name="charset" type="Charset"/>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="126">
                Creates a new PrintWriter, without automatic line flushing, with the
                  specified file name and charset.  This convenience constructor creates
                  the necessary intermediate {@link java.io.OutputStreamWriterOutputStreamWriter}, which will encode characters using the provided
                  charset.                
                <param>
                    fileNameThe name of the file to use as the destination of this writer.
                      If the file exists then it will be truncated to zero size;
                      otherwise, a new file will be created.  The output will be
                      written to the file and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given string does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(fileName)} denies write
                      access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="145">
                <params>
                    <param name="fileName" type="String"/>
                    <param name="csn" type="String"/>
                </params>
            </method>
            <javadoc line="148">
                Creates a new PrintWriter, without automatic line flushing, with the
                  specified file.  This convenience constructor creates the necessary
                  intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},
                  which will encode characters using the {@linkplain java.nio.charset.Charset#defaultCharset() default charset} for this
                  instance of the Java virtual machine.                
                <param>
                    fileThe file to use as the destination of this writer.  If the file
                      exists then it will be truncated to zero size; otherwise, a new
                      file will be created.  The output will be written to the file
                      and is buffered.                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())}denies write access to the file                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="165">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="168">
                Creates a new PrintWriter, without automatic line flushing, with the
                  specified file and charset.  This convenience constructor creates the
                  necessary intermediate {@link java.io.OutputStreamWriterOutputStreamWriter}, which will encode characters using the provided
                  charset.                
                <param>
                    fileThe file to use as the destination of this writer.  If the file
                      exists then it will be truncated to zero size; otherwise, a new
                      file will be created.  The output will be written to the file
                      and is buffered.                    
                </param>
                <param>
                    csnThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    FileNotFoundExceptionIf the given file object does not denote an existing, writable
                      regular file and a new regular file of that name cannot be
                      created, or if some other error occurs while opening or
                      creating the file                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and {@link SecurityManager#checkWrite checkWrite(file.getPath())}denies write access to the file                    
                </throws>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PrintWriter" type="constructor" line="186">
                <params>
                    <param name="file" type="File"/>
                    <param name="csn" type="String"/>
                </params>
            </method>
            <javadoc line="189">
                Checks to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="192"/>
            <javadoc line="195">
                Flushes the stream.                
                <see>
                    #checkError()                    
                </see>
            </javadoc>
            <method name="flush" type="void" line="199">
                <scope line="200">
                    <scope line="201"/>
                </scope>
                <scope line="206"/>
            </method>
            <javadoc line="210">
                Closes the stream and releases any system resources associated
                  with it. Closing a previously closed stream has no effect.                
                <see>
                    #checkError()                    
                </see>
            </javadoc>
            <method name="close" type="void" line="215">
                <scope line="216">
                    <scope line="217"/>
                </scope>
                <scope line="223"/>
            </method>
            <javadoc line="227">
                Flushes the stream if it&apos;s not closed and checks its error state.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the print stream has encountered an error,
                      either on the underlying output stream or during a format
                      conversion.                    
                </return>
            </javadoc>
            <method name="checkError" type="boolean" line="233">
                <scope line="234"/>
                <scope line="237">
                    <declaration name="pw" type="PrintWriter" line="238"/>
                </scope>
                <scope line="241"/>
            </method>
            <javadoc line="246">
                Indicates that an error has occurred.
                  &lt;p&gt; This method will cause subsequent invocations of {@link #checkError()} to return &lt;tt&gt;true&lt;/tt&gt; until {@link #clearError()} is invoked.                
            </javadoc>
            <method name="setError" type="void" line="250"/>
            <javadoc line="253">
                Clears the error state of this stream.
                  &lt;p&gt; This method will cause subsequent invocations of {@link #checkError()} to return &lt;tt&gt;false&lt;/tt&gt; until another write
                  operation fails and invokes {@link #setError()}.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="clearError" type="void" line="259"/>
            <javadoc line="262">
                Writes a single character.                
                <param>
                    c int specifying a character to be written.                    
                </param>
            </javadoc>
            <method name="write" type="void" line="266">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="267">
                    <scope line="268"/>
                </scope>
                <scope line="273"/>
                <scope line="276"/>
            </method>
            <javadoc line="280">
                Writes A Portion of an array of characters.                
                <param>
                    buf Array of characters                    
                </param>
                <param>
                    off Offset from which to start writing characters                    
                </param>
                <param>
                    len Number of characters to write                    
                </param>
            </javadoc>
            <method name="write" type="void" line="286">
                <params>
                    <param name="buf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="287">
                    <scope line="288"/>
                </scope>
                <scope line="293"/>
                <scope line="296"/>
            </method>
            <javadoc line="300">
                Writes an array of characters.  This method cannot be inherited from the
                  Writer class because it must suppress I/O exceptions.                
                <param>
                    buf Array of characters to be written                    
                </param>
            </javadoc>
            <method name="write" type="void" line="305">
                <params>
                    <param name="buf" type="char"/>
                </params>
            </method>
            <javadoc line="308">
                Writes a portion of a string.                
                <param>
                    s A String                    
                </param>
                <param>
                    off Offset from which to start writing characters                    
                </param>
                <param>
                    len Number of characters to write                    
                </param>
            </javadoc>
            <method name="write" type="void" line="314">
                <params>
                    <param name="s" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="315">
                    <scope line="316"/>
                </scope>
                <scope line="321"/>
                <scope line="324"/>
            </method>
            <javadoc line="328">
                Writes a string.  This method cannot be inherited from the Writer class
                  because it must suppress I/O exceptions.                
                <param>
                    s String to be written                    
                </param>
            </javadoc>
            <method name="write" type="void" line="333">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="newLine" type="void" line="336">
                <scope line="337">
                    <scope line="338"/>
                </scope>
                <scope line="344"/>
                <scope line="347"/>
            </method>
            <javadoc line="351">
                Prints a boolean value.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(boolean)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    b   The &lt;code&gt;boolean&lt;/code&gt; to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="357">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="360">
                Prints a character.  The character is translated into one or more bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    c   The &lt;code&gt;char&lt;/code&gt; to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="366">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="369">
                Prints an integer.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(int)}&lt;/code&gt; is translated into bytes according
                  to the platform&apos;s default character encoding, and these bytes are
                  written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt;
                  method.                
                <param>
                    i   The &lt;code&gt;int&lt;/code&gt; to be printed                    
                </param>
                <see>
                    java.lang.Integer#toString(int)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="377">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="380">
                Prints a long integer.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(long)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt;
                  method.                
                <param>
                    l   The &lt;code&gt;long&lt;/code&gt; to be printed                    
                </param>
                <see>
                    java.lang.Long#toString(long)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="388">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="391">
                Prints a floating-point number.  The string produced by &lt;code&gt;{@link java.lang.String#valueOf(float)}&lt;/code&gt; is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt;
                  method.                
                <param>
                    f   The &lt;code&gt;float&lt;/code&gt; to be printed                    
                </param>
                <see>
                    java.lang.Float#toString(float)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="399">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="402">
                Prints a double-precision floating-point number.  The string produced by
                  &lt;code&gt;{@link java.lang.String#valueOf(double)}&lt;/code&gt; is translated into
                  bytes according to the platform&apos;s default character encoding, and these
                  bytes are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    d   The &lt;code&gt;double&lt;/code&gt; to be printed                    
                </param>
                <see>
                    java.lang.Double#toString(double)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="410">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="413">
                Prints an array of characters.  The characters are converted into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt;
                  method.                
                <param>
                    s   The array of chars to be printed                    
                </param>
                <throws>
                    NullPointerException  If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="print" type="void" line="421">
                <params>
                    <param name="s" type="char"/>
                </params>
            </method>
            <javadoc line="424">
                Prints a string.  If the argument is &lt;code&gt;null&lt;/code&gt; then the string
                  &lt;code&gt;&quot;null&quot;&lt;/code&gt; is printed.  Otherwise, the string&apos;s characters are
                  converted into bytes according to the platform&apos;s default character
                  encoding, and these bytes are written in exactly the manner of the
                  &lt;code&gt;{@link #write(int)}&lt;/code&gt; method.                
                <param>
                    s   The &lt;code&gt;String&lt;/code&gt; to be printed                    
                </param>
            </javadoc>
            <method name="print" type="void" line="432">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="433"/>
            </method>
            <javadoc line="438">
                Prints an object.  The string produced by the &lt;code&gt;{@link java.lang.String#valueOf(Object)}&lt;/code&gt; method is translated into bytes
                  according to the platform&apos;s default character encoding, and these bytes
                  are written in exactly the manner of the &lt;code&gt;{@link #write(int)}&lt;/code&gt;
                  method.                
                <param>
                    obj   The &lt;code&gt;Object&lt;/code&gt; to be printed                    
                </param>
                <see>
                    java.lang.Object#toString()                    
                </see>
            </javadoc>
            <method name="print" type="void" line="446">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="449">
                Terminates the current line by writing the line separator string.  The
                  line separator string is defined by the system property
                  &lt;code&gt;line.separator&lt;/code&gt;, and is not necessarily a single newline
                  character (&lt;code&gt;&apos;\n&apos;&lt;/code&gt;).                
            </javadoc>
            <method name="println" type="void" line="455"/>
            <javadoc line="458">
                Prints a boolean value and then terminates the line.  This method behaves
                  as though it invokes &lt;code&gt;{@link #print(boolean)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;boolean&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="464">
                <params>
                    <param name="x" type="boolean"/>
                </params>
                <scope line="465"/>
            </method>
            <javadoc line="470">
                Prints a character and then terminates the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(char)}&lt;/code&gt; and then &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;char&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="475">
                <params>
                    <param name="x" type="char"/>
                </params>
                <scope line="476"/>
            </method>
            <javadoc line="481">
                Prints an integer and then terminates the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(int)}&lt;/code&gt; and then &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;int&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="486">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="487"/>
            </method>
            <javadoc line="492">
                Prints a long integer and then terminates the line.  This method behaves
                  as though it invokes &lt;code&gt;{@link #print(long)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;long&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="498">
                <params>
                    <param name="x" type="long"/>
                </params>
                <scope line="499"/>
            </method>
            <javadoc line="504">
                Prints a floating-point number and then terminates the line.  This method
                  behaves as though it invokes &lt;code&gt;{@link #print(float)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;float&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="510">
                <params>
                    <param name="x" type="float"/>
                </params>
                <scope line="511"/>
            </method>
            <javadoc line="516">
                Prints a double-precision floating-point number and then terminates the
                  line.  This method behaves as though it invokes &lt;code&gt;{@link #print(double)}&lt;/code&gt; and then &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;double&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="521">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="522"/>
            </method>
            <javadoc line="527">
                Prints an array of characters and then terminates the line.  This method
                  behaves as though it invokes &lt;code&gt;{@link #print(char[])}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the array of &lt;code&gt;char&lt;/code&gt; values to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="533">
                <params>
                    <param name="x" type="char"/>
                </params>
                <scope line="534"/>
            </method>
            <javadoc line="539">
                Prints a String and then terminates the line.  This method behaves as
                  though it invokes &lt;code&gt;{@link #print(String)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x the &lt;code&gt;String&lt;/code&gt; value to be printed                    
                </param>
            </javadoc>
            <method name="println" type="void" line="545">
                <params>
                    <param name="x" type="String"/>
                </params>
                <scope line="546"/>
            </method>
            <javadoc line="551">
                Prints an Object and then terminates the line.  This method calls
                  at first String.valueOf(x) to get the printed object&apos;s string value,
                  then behaves as
                  though it invokes &lt;code&gt;{@link #print(String)}&lt;/code&gt; and then
                  &lt;code&gt;{@link #println()}&lt;/code&gt;.                
                <param>
                    x  The &lt;code&gt;Object&lt;/code&gt; to be printed.                    
                </param>
            </javadoc>
            <method name="println" type="void" line="559">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="s" type="String" line="560"/>
                <scope line="561"/>
            </method>
            <javadoc line="566">
                A convenience method to write a formatted string to this writer using
                  the specified format string and arguments.  If automatic flushing is
                  enabled, calls to this method will flush the output buffer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.printf(format,
                  args)&lt;/tt&gt; behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.format(format, args) &lt;/pre&gt;                
                <param>
                    formatA format string as described in &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;Format string syntax&lt;/a&gt;.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="printf" type="PrintWriter" line="596">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="599">
                A convenience method to write a formatted string to this writer using
                  the specified format string and arguments.  If automatic flushing is
                  enabled, calls to this method will flush the output buffer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.printf(l, format,
                  args)&lt;/tt&gt; behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.format(l, format, args) &lt;/pre&gt;                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If &lt;tt&gt;l&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt; then no localization
                      is applied.                    
                </param>
                <param>
                    formatA format string as described in &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;Format string syntax&lt;/a&gt;.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="printf" type="PrintWriter" line="632">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="635">
                Writes a formatted string to this writer using the specified format
                  string and arguments.  If automatic flushing is enabled, calls to this
                  method will flush the output buffer.
                  &lt;p&gt; The locale always used is the one returned by {@link java.util.Locale#getDefault() Locale.getDefault()}, regardless of any
                  previous invocations of other formatting methods on this object.                
                <param>
                    formatA format string as described in &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;Format string syntax&lt;/a&gt;.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      Formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="PrintWriter" line="663">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="664">
                    <scope line="665"/>
                </scope>
                <scope line="672"/>
                <scope line="675"/>
            </method>
            <javadoc line="680">
                Writes a formatted string to this writer using the specified format
                  string and arguments.  If automatic flushing is enabled, calls to this
                  method will flush the output buffer.                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If &lt;tt&gt;l&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt; then no localization
                      is applied.                    
                </param>
                <param>
                    formatA format string as described in &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;Format string syntax&lt;/a&gt;.                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="PrintWriter" line="709">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="710">
                    <scope line="711"/>
                </scope>
                <scope line="718"/>
                <scope line="721"/>
            </method>
            <javadoc line="726">
                Appends the specified character sequence to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.toString()) &lt;/pre&gt;
                  &lt;p&gt; Depending on the specification of &lt;tt&gt;toString&lt;/tt&gt; for the
                  character sequence &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be
                  appended. For instance, invoking the &lt;tt&gt;toString&lt;/tt&gt; method of a
                  character buffer will return a subsequence whose content depends upon
                  the buffer&apos;s position and limit.                
                <param>
                    csqThe character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is
                      &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are
                      appended to this writer.                    
                </param>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintWriter" line="743">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="748">
                Appends a subsequence of the specified character sequence to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,
                  end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, behaves in
                  exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.subSequence(start, end).toString()) &lt;/pre&gt;                
                <param>
                    csqThe character sequence from which a subsequence will be
                      appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters
                      will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four
                      characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt;.                    
                </param>
                <param>
                    startThe index of the first character in the subsequence                    
                </param>
                <param>
                    endThe index of the character following the last character in the
                      subsequence                    
                </param>
                <return>
                    This writer                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative, &lt;tt&gt;start&lt;/tt&gt;
                      is greater than &lt;tt&gt;end&lt;/tt&gt;, or &lt;tt&gt;end&lt;/tt&gt; is greater than
                      &lt;tt&gt;csq.length()&lt;/tt&gt;                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintWriter" line="768">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="cs" type="CharSequence" line="769"/>
            </method>
            <javadoc line="773">
                Appends the specified character to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(c)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(c) &lt;/pre&gt;                
                <param>
                    cThe 16-bit character to append                    
                </param>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="PrintWriter" line="783">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
        </class>
    </source>