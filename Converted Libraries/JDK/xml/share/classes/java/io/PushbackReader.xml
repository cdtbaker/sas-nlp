<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PushbackReader" line="29">
            <extends class="FilterReader"/>
            <javadoc line="29">
                A character-stream reader that allows characters to be pushed back into the
                  stream.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="buf" type="char[]" line="39"/>
            <javadoc line="39">
                Pushback buffer                
            </javadoc>
            <declaration name="pos" type="int" line="42"/>
            <javadoc line="42">
                Current position in buffer                
            </javadoc>
            <javadoc line="45">
                Creates a new pushback reader with a pushback buffer of the given size.                
                <param>
                    in   The reader from which characters will be read                    
                </param>
                <param>
                    size The size of the pushback buffer                    
                </param>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
            </javadoc>
            <method name="PushbackReader" type="constructor" line="52">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="61">
                Creates a new pushback reader with a one-character pushback buffer.                
                <param>
                    in  The reader from which characters will be read                    
                </param>
            </javadoc>
            <method name="PushbackReader" type="constructor" line="66">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="70">
                Checks to make sure that the stream has not been closed.                
            </javadoc>
            <method name="ensureOpen" type="void" line="71"/>
            <javadoc line="76">
                Reads a single character.                
                <return>
                    The character read, or -1 if the end of the stream has been
                      reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="84">
                <scope line="85"/>
            </method>
            <javadoc line="94">
                Reads characters into a portion of an array.                
                <param>
                    cbuf  Destination buffer                    
                </param>
                <param>
                    off   Offset at which to start writing characters                    
                </param>
                <param>
                    len   Maximum number of characters to read                    
                </param>
                <return>
                    The number of characters read, or -1 if the end of the
                      stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="106">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="107">
                    <scope line="109">
                        <scope line="110">
                            <scope line="111"/>
                            <scope line="113"/>
                        </scope>
                        <declaration name="avail" type="int" line="118"/>
                        <scope line="119"/>
                        <scope line="127">
                            <scope line="129"/>
                        </scope>
                    </scope>
                    <scope line="135"/>
                </scope>
            </method>
            <javadoc line="141">
                Pushes back a single character by copying it to the front of the
                  pushback buffer. After this method returns, the next character to be read
                  will have the value &lt;code&gt;(char)c&lt;/code&gt;.                
                <param>
                    c  The int value representing a character to be pushed back                    
                </param>
                <exception>
                    IOException  If the pushback buffer is full,
                      or if some other I/O error occurs                    
                </exception>
            </javadoc>
            <method name="unread" type="void" line="151">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="152"/>
            </method>
            <javadoc line="160">
                Pushes back a portion of an array of characters by copying it to the
                  front of the pushback buffer.  After this method returns, the next
                  character to be read will have the value &lt;code&gt;cbuf[off]&lt;/code&gt;, the
                  character after that will have the value &lt;code&gt;cbuf[off+1]&lt;/code&gt;, and
                  so forth.                
                <param>
                    cbuf  Character array                    
                </param>
                <param>
                    off   Offset of first character to push back                    
                </param>
                <param>
                    len   Number of characters to push back                    
                </param>
                <exception>
                    IOException  If there is insufficient room in the pushback
                      buffer, or if some other I/O error occurs                    
                </exception>
            </javadoc>
            <method name="unread" type="void" line="174">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="184">
                Pushes back an array of characters by copying it to the front of the
                  pushback buffer.  After this method returns, the next character to be
                  read will have the value &lt;code&gt;cbuf[0]&lt;/code&gt;, the character after that
                  will have the value &lt;code&gt;cbuf[1]&lt;/code&gt;, and so forth.                
                <param>
                    cbuf  Character array to push back                    
                </param>
                <exception>
                    IOException  If there is insufficient room in the pushback
                      buffer, or if some other I/O error occurs                    
                </exception>
            </javadoc>
            <method name="unread" type="void" line="195">
                <params>
                    <param name="cbuf" type="char"/>
                </params>
            </method>
            <javadoc line="199">
                Tells whether this stream is ready to be read.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="204">
                <scope line="205"/>
            </method>
            <javadoc line="211">
                Marks the present position in the stream. The &lt;code&gt;mark&lt;/code&gt;
                  for class &lt;code&gt;PushbackReader&lt;/code&gt; always throws an exception.                
                <exception>
                    IOException  Always, since mark is not supported                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="217">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
            </method>
            <javadoc line="221">
                Resets the stream. The &lt;code&gt;reset&lt;/code&gt; method of
                  &lt;code&gt;PushbackReader&lt;/code&gt; always throws an exception.                
                <exception>
                    IOException  Always, since reset is not supported                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="227"/>
            <javadoc line="231">
                Tells whether this stream supports the mark() operation, which it does
                  not.                
            </javadoc>
            <method name="markSupported" type="boolean" line="235"/>
            <javadoc line="239">
                Closes the stream and releases any system resources associated with
                  it. Once the stream has been closed, further read(),
                  unread(), ready(), or skip() invocations will throw an IOException.
                  Closing a previously closed stream has no effect.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="247"/>
            <javadoc line="252">
                Skips characters.  This method will block until some characters are
                  available, an I/O error occurs, or the end of the stream is reached.                
                <param>
                    n  The number of characters to skip                    
                </param>
                <return>
                    The number of characters actually skipped                    
                </return>
                <exception>
                    IllegalArgumentException  If <code>n</code> is negative.                    
                </exception>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="263">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="266">
                    <declaration name="avail" type="int" line="268"/>
                    <scope line="269">
                        <scope line="270"/>
                        <scope line="273"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>