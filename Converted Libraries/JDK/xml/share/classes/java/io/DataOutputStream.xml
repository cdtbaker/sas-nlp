<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="DataOutputStream" line="2">
            <extends class="FilterOutputStream"/>
            <implements interface="DataOutput"/>
            <javadoc line="2">
                A data output stream lets an application write primitive Java data
                  types to an output stream in a portable way. An application can
                  then use a data input stream to read the data back in.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.io.DataInputStream                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="written" type="int" line="11"/>
            <javadoc line="11">
                The number of bytes written to the data output stream so far.
                  If this counter overflows, it will be wrapped to Integer.MAX_VALUE.                
            </javadoc>
            <declaration name="bytearr" type="byte[]" line="16"/>
            <javadoc line="16">
                bytearr is initialized on demand by writeUTF                
            </javadoc>
            <javadoc line="20">
                Creates a new data output stream to write data to the specified
                  underlying output stream. The counter &lt;code&gt;written&lt;/code&gt; is
                  set to zero.                
                <param>
                    out   the underlying output stream, to be saved for later
                      use.                    
                </param>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="DataOutputStream" type="constructor" line="28">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="31">
                Increases the written counter by the specified value
                  until it reaches Integer.MAX_VALUE.                
            </javadoc>
            <method name="incCount" type="void" line="35">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="temp" type="int" line="36"/>
                <scope line="37"/>
            </method>
            <javadoc line="42">
                Writes the specified byte (the low eight bits of the argument
                  &lt;code&gt;b&lt;/code&gt;) to the underlying output stream. If no exception
                  is thrown, the counter &lt;code&gt;written&lt;/code&gt; is incremented by
                  &lt;code&gt;1&lt;/code&gt;.
                  &lt;p&gt;
                  Implements the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt;.                
                <param>
                    b   the <code>byte</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="write" type="void" line="53">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to the underlying output stream.
                  If no exception is thrown, the counter &lt;code&gt;written&lt;/code&gt; is
                  incremented by &lt;code&gt;len&lt;/code&gt;.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="write" type="void" line="68">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Flushes this data output stream. This forces any buffered output
                  bytes to be written out to the stream.
                  &lt;p&gt;
                  The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt;
                  calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
                <see>
                    java.io.OutputStream#flush()                    
                </see>
            </javadoc>
            <method name="flush" type="void" line="82"/>
            <javadoc line="85">
                Writes a &lt;code&gt;boolean&lt;/code&gt; to the underlying output stream as
                  a 1-byte value. The value &lt;code&gt;true&lt;/code&gt; is written out as the
                  value &lt;code&gt;(byte)1&lt;/code&gt;; the value &lt;code&gt;false&lt;/code&gt; is
                  written out as the value &lt;code&gt;(byte)0&lt;/code&gt;. If no exception is
                  thrown, the counter &lt;code&gt;written&lt;/code&gt; is incremented by
                  &lt;code&gt;1&lt;/code&gt;.                
                <param>
                    v   a <code>boolean</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeBoolean" type="void" line="96">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <javadoc line="100">
                Writes out a &lt;code&gt;byte&lt;/code&gt; to the underlying output stream as
                  a 1-byte value. If no exception is thrown, the counter
                  &lt;code&gt;written&lt;/code&gt; is incremented by &lt;code&gt;1&lt;/code&gt;.                
                <param>
                    v   a <code>byte</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeByte" type="void" line="108">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Writes a &lt;code&gt;short&lt;/code&gt; to the underlying output stream as two
                  bytes, high byte first. If no exception is thrown, the counter
                  &lt;code&gt;written&lt;/code&gt; is incremented by &lt;code&gt;2&lt;/code&gt;.                
                <param>
                    v   a <code>short</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeShort" type="void" line="120">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Writes a &lt;code&gt;char&lt;/code&gt; to the underlying output stream as a
                  2-byte value, high byte first. If no exception is thrown, the
                  counter &lt;code&gt;written&lt;/code&gt; is incremented by &lt;code&gt;2&lt;/code&gt;.                
                <param>
                    v   a <code>char</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeChar" type="void" line="133">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Writes an &lt;code&gt;int&lt;/code&gt; to the underlying output stream as four
                  bytes, high byte first. If no exception is thrown, the counter
                  &lt;code&gt;written&lt;/code&gt; is incremented by &lt;code&gt;4&lt;/code&gt;.                
                <param>
                    v   an <code>int</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeInt" type="void" line="146">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <declaration name="writeBuffer" type="byte" line="153"/>
            <javadoc line="154">
                Writes a &lt;code&gt;long&lt;/code&gt; to the underlying output stream as eight
                  bytes, high byte first. In no exception is thrown, the counter
                  &lt;code&gt;written&lt;/code&gt; is incremented by &lt;code&gt;8&lt;/code&gt;.                
                <param>
                    v   a <code>long</code> to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeLong" type="void" line="162">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="174">
                Converts the float argument to an &lt;code&gt;int&lt;/code&gt; using the
                  &lt;code&gt;floatToIntBits&lt;/code&gt; method in class &lt;code&gt;Float&lt;/code&gt;,
                  and then writes that &lt;code&gt;int&lt;/code&gt; value to the underlying
                  output stream as a 4-byte quantity, high byte first. If no
                  exception is thrown, the counter &lt;code&gt;written&lt;/code&gt; is
                  incremented by &lt;code&gt;4&lt;/code&gt;.                
                <param>
                    v   a <code>float</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
                <see>
                    java.lang.Float#floatToIntBits(float)                    
                </see>
            </javadoc>
            <method name="writeFloat" type="void" line="186">
                <params>
                    <param name="v" type="float"/>
                </params>
            </method>
            <javadoc line="189">
                Converts the double argument to a &lt;code&gt;long&lt;/code&gt; using the
                  &lt;code&gt;doubleToLongBits&lt;/code&gt; method in class &lt;code&gt;Double&lt;/code&gt;,
                  and then writes that &lt;code&gt;long&lt;/code&gt; value to the underlying
                  output stream as an 8-byte quantity, high byte first. If no
                  exception is thrown, the counter &lt;code&gt;written&lt;/code&gt; is
                  incremented by &lt;code&gt;8&lt;/code&gt;.                
                <param>
                    v   a <code>double</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
                <see>
                    java.lang.Double#doubleToLongBits(double)                    
                </see>
            </javadoc>
            <method name="writeDouble" type="void" line="201">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <javadoc line="204">
                Writes out the string to the underlying output stream as a
                  sequence of bytes. Each character in the string is written out, in
                  sequence, by discarding its high eight bits. If no exception is
                  thrown, the counter &lt;code&gt;written&lt;/code&gt; is incremented by the
                  length of &lt;code&gt;s&lt;/code&gt;.                
                <param>
                    s   a string of bytes to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeBytes" type="void" line="214">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="215"/>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Writes a string to the underlying output stream as a sequence of
                  characters. Each character is written to the data output stream as
                  if by the &lt;code&gt;writeChar&lt;/code&gt; method. If no exception is
                  thrown, the counter &lt;code&gt;written&lt;/code&gt; is incremented by twice
                  the length of &lt;code&gt;s&lt;/code&gt;.                
                <param>
                    s   a <code>String</code> value to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <see>
                    java.io.DataOutputStream#writeChar(int)                    
                </see>
                <see>
                    java.io.FilterOutputStream#out                    
                </see>
            </javadoc>
            <method name="writeChars" type="void" line="232">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="233"/>
                <scope line="234">
                    <declaration name="v" type="int" line="235"/>
                </scope>
            </method>
            <javadoc line="241">
                Writes a string to the underlying output stream using
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  encoding in a machine-independent manner.
                  &lt;p&gt;
                  First, two bytes are written to the output stream as if by the
                  &lt;code&gt;writeShort&lt;/code&gt; method giving the number of bytes to
                  follow. This value is the number of bytes actually written out,
                  not the length of the string. Following the length, each character
                  of the string is output, in sequence, using the modified UTF-8 encoding
                  for the character. If no exception is thrown, the counter
                  &lt;code&gt;written&lt;/code&gt; is incremented by the total number of
                  bytes written to the output stream. This will be at least two
                  plus the length of &lt;code&gt;str&lt;/code&gt;, and at most two plus
                  thrice the length of &lt;code&gt;str&lt;/code&gt;.                
                <param>
                    str   a string to be written.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeUTF" type="void" line="259">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="262">
                Writes a string to the specified DataOutput using
                  &lt;a href=&quot;DataInput.html#modified-utf-8&quot;&gt;modified UTF-8&lt;/a&gt;
                  encoding in a machine-independent manner.
                  &lt;p&gt;
                  First, two bytes are written to out as if by the &lt;code&gt;writeShort&lt;/code&gt;
                  method giving the number of bytes to follow. This value is the number of
                  bytes actually written out, not the length of the string. Following the
                  length, each character of the string is output, in sequence, using the
                  modified UTF-8 encoding for the character. If no exception is thrown, the
                  counter &lt;code&gt;written&lt;/code&gt; is incremented by the total number of
                  bytes written to the output stream. This will be at least two
                  plus the length of &lt;code&gt;str&lt;/code&gt;, and at most two plus
                  thrice the length of &lt;code&gt;str&lt;/code&gt;.                
                <param>
                    str   a string to be written.                    
                </param>
                <param>
                    out   destination to write to                    
                </param>
                <return>
                    The number of bytes written out.                    
                </return>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeUTF" type="int" line="281">
                <params>
                    <param name="str" type="String"/>
                    <param name="out" type="DataOutput"/>
                </params>
                <declaration name="strlen" type="int" line="282"/>
                <declaration name="utflen" type="int" line="283"/>
                <declaration name="c" type="int" line="284"/>
                <scope line="285">
                    <scope line="287"/>
                    <scope line="290"/>
                    <scope line="293"/>
                </scope>
                <declaration name="bytearr" type="byte[]" line="298"/>
                <scope line="299">
                    <declaration name="dos" type="DataOutputStream" line="300"/>
                </scope>
                <scope line="304"/>
                <declaration name="i" type="int" line="309"/>
                <scope line="310"/>
                <scope line="315">
                    <scope line="317"/>
                    <scope line="320"/>
                    <scope line="325"/>
                </scope>
            </method>
            <javadoc line="333">
                Returns the current value of the counter &lt;code&gt;written&lt;/code&gt;,
                  the number of bytes written to this data output stream so far.
                  If the counter overflows, it will be wrapped to Integer.MAX_VALUE.                
                <return>
                    the value of the <code>written</code> field.                    
                </return>
                <see>
                    java.io.DataOutputStream#written                    
                </see>
            </javadoc>
            <method name="size" type="int" line="340"/>
        </class>
    </source>