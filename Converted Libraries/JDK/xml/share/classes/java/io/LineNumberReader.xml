<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="LineNumberReader" line="29">
            <extends class="BufferedReader"/>
            <comment line="57">
                Defaults to 0                
            </comment>
            <javadoc line="29">
                A buffered character-input stream that keeps track of line numbers.  This
                  class defines methods {@link #setLineNumber(int)} and {@link #getLineNumber()} for setting and getting the current line number
                  respectively.
                  &lt;p&gt; By default, line numbering begins at 0. This number increments at every
                  &lt;a href=&quot;#lt&quot;&gt;line terminator&lt;/a&gt; as the data is read, and can be changed
                  with a call to &lt;tt&gt;setLineNumber(int)&lt;/tt&gt;.  Note however, that
                  &lt;tt&gt;setLineNumber(int)&lt;/tt&gt; does not actually change the current position in
                  the stream; it only changes the value that will be returned by
                  &lt;tt&gt;getLineNumber()&lt;/tt&gt;.
                  &lt;p&gt; A line is considered to be &lt;a name=&quot;lt&quot;&gt;terminated&lt;/a&gt; by any one of a
                  line feed (&apos;\n&apos;), a carriage return (&apos;\r&apos;), or a carriage return followed
                  immediately by a linefeed.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="lineNumber" type="int" line="52"/>
            <javadoc line="52">
                The current line number                
            </javadoc>
            <declaration name="markedLineNumber" type="int" line="55"/>
            <javadoc line="55">
                The line number of the mark, if any                
            </javadoc>
            <declaration name="skipLF" type="boolean" line="58"/>
            <javadoc line="58">
                If the next character is a line feed, skip it                
            </javadoc>
            <declaration name="markedSkipLF" type="boolean" line="61"/>
            <javadoc line="61">
                The skipLF flag when the mark was set                
            </javadoc>
            <javadoc line="64">
                Create a new line-numbering reader, using the default input-buffer
                  size.                
                <param>
                    inA Reader object to provide the underlying stream                    
                </param>
            </javadoc>
            <method name="LineNumberReader" type="constructor" line="71">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="75">
                Create a new line-numbering reader, reading characters into a buffer of
                  the given size.                
                <param>
                    inA Reader object to provide the underlying stream                    
                </param>
                <param>
                    szAn int specifying the size of the buffer                    
                </param>
            </javadoc>
            <method name="LineNumberReader" type="constructor" line="85">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="89">
                Set the current line number.                
                <param>
                    lineNumberAn int specifying the line number                    
                </param>
                <see>
                    #getLineNumber                    
                </see>
            </javadoc>
            <method name="setLineNumber" type="void" line="97">
                <params>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <javadoc line="101">
                Get the current line number.                
                <return>
                    The current line number                    
                </return>
                <see>
                    #setLineNumber                    
                </see>
            </javadoc>
            <method name="getLineNumber" type="int" line="108"/>
            <javadoc line="112">
                Read a single character.  &lt;a href=&quot;#lt&quot;&gt;Line terminators&lt;/a&gt; are
                  compressed into single newline (&apos;\n&apos;) characters.  Whenever a line
                  terminator is read the current line number is incremented.                
                <return>
                    The character read, or -1 if the end of the stream has been
                      reached                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="123">
                <comment line="135">
                                        
                </comment>
                <scope line="124">
                    <declaration name="c" type="int" line="125"/>
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="142">
                Read characters into a portion of an array.  Whenever a &lt;a
                  href=&quot;#lt&quot;&gt;line terminator&lt;/a&gt; is read the current line number is
                  incremented.                
                <param>
                    cbufDestination buffer                    
                </param>
                <param>
                    offOffset at which to start storing characters                    
                </param>
                <param>
                    lenMaximum number of characters to read                    
                </param>
                <return>
                    The number of bytes read, or -1 if the end of the stream has
                      already been reached                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="read" type="int" line="162">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="177">
                                        
                </comment>
                <scope line="163">
                    <declaration name="n" type="int" line="164"/>
                    <scope line="166">
                        <declaration name="c" type="int" line="167"/>
                        <scope line="168"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="186">
                Read a line of text.  Whenever a &lt;a href=&quot;#lt&quot;&gt;line terminator&lt;/a&gt; is
                  read the current line number is incremented.                
                <return>
                    A String containing the contents of the line, not including
                      any <a href="#lt">line termination characters</a>, or
                      <tt>null</tt> if the end of the stream has been reached                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="readLine" type="String" line="197">
                <scope line="198">
                    <declaration name="l" type="String" line="199"/>
                </scope>
            </method>
            <declaration name="maxSkipBufferSize" type="int" line="207"/>
            <javadoc line="207">
                Maximum skip-buffer size                
            </javadoc>
            <declaration name="skipBuffer" type="char" line="210"/>
            <javadoc line="210">
                Skip buffer, null until allocated                
            </javadoc>
            <javadoc line="213">
                Skip characters.                
                <param>
                    nThe number of characters to skip                    
                </param>
                <return>
                    The number of characters actually skipped                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf <tt>n</tt> is negative                    
                </throws>
            </javadoc>
            <method name="skip" type="long" line="227">
                <params>
                    <param name="n" type="long"/>
                </params>
                <declaration name="nn" type="int" line="230"/>
                <scope line="231">
                    <declaration name="r" type="long" line="234"/>
                    <scope line="235">
                        <declaration name="nc" type="int" line="236"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="245">
                Mark the present position in the stream.  Subsequent calls to reset()
                  will attempt to reposition the stream to this point, and will also reset
                  the line number appropriately.                
                <param>
                    readAheadLimitLimit on the number of characters that may be read while still
                      preserving the mark.  After reading this many characters,
                      attempting to reset the stream may fail.                    
                </param>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="mark" type="void" line="258">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
                <scope line="259"/>
            </method>
            <javadoc line="266">
                Reset the stream to the most recent mark.                
                <throws>
                    IOExceptionIf the stream has not been marked, or if the mark has been
                      invalidated                    
                </throws>
            </javadoc>
            <method name="reset" type="void" line="273">
                <scope line="274"/>
            </method>
        </class>
    </source>