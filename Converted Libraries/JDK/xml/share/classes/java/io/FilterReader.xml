<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="FilterReader" line="2">
            <extends class="Reader"/>
            <javadoc line="2">
                Abstract class for reading filtered character streams.
                  The abstract class &lt;code&gt;FilterReader&lt;/code&gt; itself
                  provides default methods that pass all requests to
                  the contained stream. Subclasses of &lt;code&gt;FilterReader&lt;/code&gt;
                  should override some of these methods and may also provide
                  additional methods and fields.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="in" type="Reader" line="13"/>
            <javadoc line="13">
                The underlying character-input stream.                
            </javadoc>
            <javadoc line="17">
                Creates a new filtered reader.                
                <param>
                    in  a Reader object providing the underlying stream.                    
                </param>
                <throws>
                    NullPointerException if <code>in</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="FilterReader" type="constructor" line="22">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="26">
                Reads a single character.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="30"/>
            <javadoc line="33">
                Reads characters into a portion of an array.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="37">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="40">
                Skips characters.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="44">
                <params>
                    <param name="n" type="long"/>
                </params>
            </method>
            <javadoc line="47">
                Tells whether this stream is ready to be read.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="51"/>
            <javadoc line="54">
                Tells whether this stream supports the mark() operation.                
            </javadoc>
            <method name="markSupported" type="boolean" line="57"/>
            <javadoc line="60">
                Marks the present position in the stream.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="64">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Resets the stream.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="71"/>
            <method name="close" type="void" line="74"/>
        </class>
    </source>