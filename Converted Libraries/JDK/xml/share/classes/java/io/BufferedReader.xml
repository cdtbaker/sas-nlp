<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="BufferedReader" line="2">
            <extends class="Reader"/>
            <javadoc line="2">
                Reads text from a character-input stream, buffering characters so as to
                  provide for the efficient reading of characters, arrays, and lines.
                  &lt;p&gt; The buffer size may be specified, or the default size may be used.  The
                  default is large enough for most purposes.
                  &lt;p&gt; In general, each read request made of a Reader causes a corresponding
                  read request to be made of the underlying character or byte stream.  It is
                  therefore advisable to wrap a BufferedReader around any Reader whose read()
                  operations may be costly, such as FileReaders and InputStreamReaders.  For
                  example,
                  &lt;pre&gt;
                  BufferedReader in
                  = new BufferedReader(new FileReader(&quot;foo.in&quot;));
                  &lt;/pre&gt;
                  will buffer the input from the specified file.  Without buffering, each
                  invocation of read() or readLine() could cause bytes to be read from the
                  file, converted into characters, and then returned, which can be very
                  inefficient.
                  &lt;p&gt; Programs that use DataInputStreams for textual input can be localized by
                  replacing each DataInputStream with an appropriate BufferedReader.                
                <see>
                    FileReader                    
                </see>
                <see>
                    InputStreamReader                    
                </see>
                <see>
                    java.nio.file.Files#newBufferedReader                    
                </see>
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="in" type="Reader" line="29"/>
            <declaration name="cb" type="char" line="30"/>
            <declaration name="nChars" type="int" line="31"/>
            <declaration name="INVALIDATED" type="int" line="32"/>
            <declaration name="UNMARKED" type="int" line="33"/>
            <declaration name="markedChar" type="int" line="34"/>
            <declaration name="readAheadLimit" type="int" line="35"/>
            <declaration name="skipLF" type="boolean" line="36"/>
            <javadoc line="36">
                If the next character is a line feed, skip it                
            </javadoc>
            <declaration name="markedSkipLF" type="boolean" line="40"/>
            <javadoc line="40">
                The skipLF flag when the mark was set                
            </javadoc>
            <declaration name="defaultCharBufferSize" type="int" line="44"/>
            <declaration name="defaultExpectedLineLength" type="int" line="45"/>
            <javadoc line="46">
                Creates a buffering character-input stream that uses an input buffer of
                  the specified size.                
                <param>
                    in   A Reader                    
                </param>
                <param>
                    sz   Input-buffer size                    
                </param>
                <exception>
                    IllegalArgumentException  If sz is &lt;= 0                    
                </exception>
            </javadoc>
            <method name="BufferedReader" type="constructor" line="53">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Creates a buffering character-input stream that uses a default-sized
                  input buffer.                
                <param>
                    in   A Reader                    
                </param>
            </javadoc>
            <method name="BufferedReader" type="constructor" line="65">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="68">
                Checks to make sure that the stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="71"/>
            <javadoc line="74">
                Fills the input buffer, taking the mark into account if it is valid.                
            </javadoc>
            <method name="fill" type="void" line="77">
                <declaration name="dst" type="int" line="78"/>
                <scope line="79"/>
                <scope line="82">
                    <declaration name="delta" type="int" line="83"/>
                    <scope line="84"/>
                    <scope line="89">
                        <scope line="90"/>
                        <scope line="95">
                            <declaration name="ncb" type="char" line="96"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="n" type="int" line="105"/>
                <scope line="106"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Reads a single character.                
                <return>
                    The character read, as an integer in the range
                      0 to 65535 (&lt;tt&gt;0x00-0xffff&lt;/tt&gt;), or -1 if the
                      end of the stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="122">
                <scope line="123">
                    <scope line="125">
                        <scope line="126"/>
                        <scope line="130">
                            <scope line="132"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="141">
                Reads characters into a portion of an array, reading from the underlying
                  stream if necessary.                
            </javadoc>
            <method name="read1" type="int" line="145">
                <params>
                    <param name="cbuf" type="char[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="146">
                    <scope line="147"/>
                </scope>
                <scope line="153">
                    <scope line="155"/>
                </scope>
                <declaration name="n" type="int" line="161"/>
            </method>
            <javadoc line="166">
                Reads characters into a portion of an array.
                  &lt;p&gt; This method implements the general contract of the corresponding
                  &lt;code&gt;{@link Reader#read(char[],int,int) read}&lt;/code&gt; method of the
                  &lt;code&gt;{@link Reader}&lt;/code&gt; class.  As an additional convenience, it
                  attempts to read as many characters as possible by repeatedly invoking
                  the &lt;code&gt;read&lt;/code&gt; method of the underlying stream.  This iterated
                  &lt;code&gt;read&lt;/code&gt; continues until one of the following conditions becomes
                  true: &lt;ul&gt;
                  &lt;li&gt; The specified number of characters have been read,
                  &lt;li&gt; The &lt;code&gt;read&lt;/code&gt; method of the underlying stream returns
                  &lt;code&gt;-1&lt;/code&gt;, indicating end-of-file, or
                  &lt;li&gt; The &lt;code&gt;ready&lt;/code&gt; method of the underlying stream
                  returns &lt;code&gt;false&lt;/code&gt;, indicating that further input requests
                  would block.
                  &lt;/ul&gt; If the first &lt;code&gt;read&lt;/code&gt; on the underlying stream returns
                  &lt;code&gt;-1&lt;/code&gt; to indicate end-of-file then this method returns
                  &lt;code&gt;-1&lt;/code&gt;.  Otherwise this method returns the number of characters
                  actually read.
                  &lt;p&gt; Subclasses of this class are encouraged, but not required, to
                  attempt to read as many characters as possible in the same fashion.
                  &lt;p&gt; Ordinarily this method takes characters from this stream&apos;s character
                  buffer, filling it from the underlying stream as necessary.  If,
                  however, the buffer is empty, the mark is not valid, and the requested
                  length is at least as large as the buffer, then this method will read
                  characters directly from the underlying stream into the given array.
                  Thus redundant &lt;code&gt;BufferedReader&lt;/code&gt;s will not copy data
                  unnecessarily.                
                <param>
                    cbuf  Destination buffer                    
                </param>
                <param>
                    off   Offset at which to start storing characters                    
                </param>
                <param>
                    len   Maximum number of characters to read                    
                </param>
                <return>
                    The number of characters read, or -1 if the end of the
                      stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="201">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="202">
                    <scope line="204"/>
                    <scope line="207"/>
                    <declaration name="n" type="int" line="210"/>
                    <scope line="212">
                        <declaration name="n1" type="int" line="213"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="220">
                Reads a line of text.  A line is considered to be terminated by any one
                  of a line feed (&apos;\n&apos;), a carriage return (&apos;\r&apos;), or a carriage return
                  followed immediately by a linefeed.                
                <param>
                    ignoreLF  If true, the next &apos;\n&apos; will be skipped                    
                </param>
                <return>
                    A String containing the contents of the line, not including
                      any line-termination characters, or null if the end of the
                      stream has been reached                    
                </return>
                <see>
                    java.io.LineNumberReader#readLine()                    
                </see>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="readLine" type="String" line="231">
                <params>
                    <param name="ignoreLF" type="boolean"/>
                </params>
                <declaration name="s" type="StringBuffer" line="232"/>
                <declaration name="startChar" type="int" line="233"/>
                <scope line="234">
                    <declaration name="omitLF" type="boolean" line="236"/>
                    <scope line="237">
                        <scope line="239"/>
                        <declaration name="eol" type="boolean" line="243"/>
                        <declaration name="c" type="char" line="244"/>
                        <declaration name="i" type="int" line="245"/>
                        <scope line="249">
                            <scope line="251"/>
                        </scope>
                        <scope line="258">
                            <declaration name="str" type="String" line="259"/>
                            <scope line="260"/>
                            <scope line="263"/>
                            <scope line="268"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="278">
                Reads a line of text.  A line is considered to be terminated by any one
                  of a line feed (&apos;\n&apos;), a carriage return (&apos;\r&apos;), or a carriage return
                  followed immediately by a linefeed.                
                <return>
                    A String containing the contents of the line, not including
                      any line-termination characters, or null if the end of the
                      stream has been reached                    
                </return>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
                <see>
                    java.nio.file.Files#readAllLines                    
                </see>
            </javadoc>
            <method name="readLine" type="String" line="288"/>
            <javadoc line="291">
                Skips characters.                
                <param>
                    n  The number of characters to skip                    
                </param>
                <return>
                    The number of characters actually skipped                    
                </return>
                <exception>
                    IllegalArgumentException  If &lt;code&gt;n&lt;/code&gt; is negative.                    
                </exception>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="skip" type="long" line="298">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="299"/>
                <scope line="302">
                    <declaration name="r" type="long" line="304"/>
                    <scope line="305">
                        <scope line="308">
                            <scope line="310"/>
                        </scope>
                        <declaration name="d" type="long" line="314"/>
                        <scope line="315"/>
                        <scope line="320"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="328">
                Tells whether this stream is ready to be read.  A buffered character
                  stream is ready if the buffer is not empty, or if the underlying
                  character stream is ready.                
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="334">
                <scope line="335">
                    <scope line="337">
                        <scope line="338"/>
                        <scope line="341"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="349">
                Tells whether this stream supports the mark() operation, which it does.                
            </javadoc>
            <method name="markSupported" type="boolean" line="352"/>
            <javadoc line="355">
                Marks the present position in the stream.  Subsequent calls to reset()
                  will attempt to reposition the stream to this point.                
                <param>
                    readAheadLimit   Limit on the number of characters that may be
                      read while still preserving the mark. An attempt
                      to reset the stream after reading characters
                      up to this limit or beyond may fail.
                      A limit value larger than the size of the input
                      buffer will cause a new buffer to be allocated
                      whose size is no smaller than limit.
                      Therefore large values should be used with care.                    
                </param>
                <exception>
                    IllegalArgumentException  If readAheadLimit is &lt; 0                    
                </exception>
                <exception>
                    IOException  If an I/O error occurs                    
                </exception>
            </javadoc>
            <method name="mark" type="void" line="369">
                <params>
                    <param name="readAheadLimit" type="int"/>
                </params>
                <scope line="370"/>
                <scope line="373"/>
            </method>
            <javadoc line="380">
                Resets the stream to the most recent mark.                
                <exception>
                    IOException  If the stream has never been marked,
                      or if the mark has been invalidated                    
                </exception>
            </javadoc>
            <method name="reset" type="void" line="385">
                <scope line="386"/>
            </method>
            <method name="close" type="void" line="393">
                <scope line="394"/>
            </method>
        </class>
    </source>