<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PipedReader" line="2">
            <extends class="Reader"/>
            <javadoc line="2">
                Piped character-input streams.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="closedByWriter" type="boolean" line="8"/>
            <declaration name="closedByReader" type="boolean" line="9"/>
            <declaration name="connected" type="boolean" line="10"/>
            <declaration name="readSide" type="Thread" line="11"/>
            <declaration name="writeSide" type="Thread" line="12"/>
            <declaration name="DEFAULT_PIPE_SIZE" type="int" line="13"/>
            <javadoc line="13">
                The size of the pipe&apos;s circular input buffer.                
            </javadoc>
            <declaration name="buffer" type="char" line="17"/>
            <javadoc line="17">
                The circular buffer into which incoming data is placed.                
            </javadoc>
            <declaration name="in" type="int" line="21"/>
            <javadoc line="21">
                The index of the position in the circular buffer at which the
                  next character of data will be stored when received from the connected
                  piped writer. &lt;code&gt;in&amp;lt;0&lt;/code&gt; implies the buffer is empty,
                  &lt;code&gt;in==out&lt;/code&gt; implies the buffer is full                
            </javadoc>
            <declaration name="out" type="int" line="28"/>
            <javadoc line="28">
                The index of the position in the circular buffer at which the next
                  character of data will be read by this piped reader.                
            </javadoc>
            <javadoc line="33">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so
                  that it is connected to the piped writer
                  &lt;code&gt;src&lt;/code&gt;. Data written to &lt;code&gt;src&lt;/code&gt;
                  will then be available as input from this stream.                
                <param>
                    src   the stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="PipedReader" type="constructor" line="41">
                <params>
                    <param name="src" type="PipedWriter"/>
                </params>
            </method>
            <javadoc line="44">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so that it is connected
                  to the piped writer &lt;code&gt;src&lt;/code&gt; and uses the specified
                  pipe size for the pipe&apos;s buffer. Data written to &lt;code&gt;src&lt;/code&gt;
                  will then be  available as input from this stream.                
                <param>
                    src       the stream to connect to.                    
                </param>
                <param>
                    pipeSize  the size of the pipe's buffer.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>pipeSize <= 0</code>.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedReader" type="constructor" line="55">
                <params>
                    <param name="src" type="PipedWriter"/>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <javadoc line="59">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so
                  that it is not yet {@linkplain #connect(java.io.PipedWriter)connected}. It must be {@linkplain java.io.PipedWriter#connect(java.io.PipedReader) connected} to a &lt;code&gt;PipedWriter&lt;/code&gt;
                  before being used.                
            </javadoc>
            <method name="PipedReader" type="constructor" line="64"/>
            <javadoc line="67">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so that it is not yet{@link #connect(java.io.PipedWriter) connected} and uses
                  the specified pipe size for the pipe&apos;s buffer.
                  It must be  {@linkplain java.io.PipedWriter#connect(java.io.PipedReader) connected} to a &lt;code&gt;PipedWriter&lt;/code&gt;
                  before being used.                
                <param>
                    pipeSize the size of the pipe's buffer.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>pipeSize <= 0</code>.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedReader" type="constructor" line="76">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <method name="initPipe" type="void" line="79">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Causes this piped reader to be connected
                  to the piped  writer &lt;code&gt;src&lt;/code&gt;.
                  If this object is already connected to some
                  other piped writer, an &lt;code&gt;IOException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;src&lt;/code&gt; is an
                  unconnected piped writer and &lt;code&gt;snk&lt;/code&gt;
                  is an unconnected piped reader, they
                  may be connected by either the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;snk.connect(src)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  or the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;src.connect(snk)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  The two
                  calls have the same effect.                
                <param>
                    src   The piped writer to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="108">
                <params>
                    <param name="src" type="PipedWriter"/>
                </params>
            </method>
            <javadoc line="111">
                Receives a char of data. This method will block if no input is
                  available.                
            </javadoc>
            <method name="receive" type="void" line="115">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="126">
                    <scope line="127"/>
                    <scope line="131"/>
                    <scope line="134"/>
                </scope>
                <scope line="138"/>
                <scope line="143"/>
            </method>
            <javadoc line="147">
                Receives data into an array of characters.  This method will
                  block until some input is available.                
            </javadoc>
            <method name="receive" type="void" line="151">
                <params>
                    <param name="c" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="152"/>
            </method>
            <javadoc line="156">
                Notifies all waiting threads that the last character of data has been
                  received.                
            </javadoc>
            <method name="receivedLast" type="void" line="160"/>
            <javadoc line="164">
                Reads the next character of data from this piped stream.
                  If no character is available because the end of the stream
                  has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned.
                  This method blocks until input data is available, the end of
                  the stream is detected, or an exception is thrown.                
                <return>
                    the next character of data, or <code>-1</code> if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if the pipe is
                      <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedWriter) unconnected}, closed,
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="176">
                <scope line="177"/>
                <scope line="180"/>
                <scope line="183"/>
                <declaration name="trials" type="int" line="187"/>
                <scope line="188">
                    <scope line="189"/>
                    <scope line="192"/>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
                <declaration name="ret" type="int" line="203"/>
                <scope line="204"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Reads up to &lt;code&gt;len&lt;/code&gt; characters of data from this piped
                  stream into an array of characters. Less than &lt;code&gt;len&lt;/code&gt; characters
                  will be read if the end of the data stream is reached or if
                  &lt;code&gt;len&lt;/code&gt; exceeds the pipe&apos;s buffer size. This method
                  blocks until at least one character of input is available.                
                <param>
                    cbuf     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the maximum number of characters read.                    
                </param>
                <return>
                    the total number of characters read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if the pipe is
                      <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedWriter) unconnected}, closed,
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="228">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="229"/>
                <scope line="232"/>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
                <declaration name="c" type="int" line="244"/>
                <scope line="245"/>
                <declaration name="rlen" type="int" line="249"/>
                <scope line="250">
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="262">
                Tell whether this stream is ready to be read.  A piped character
                  stream is ready if the circular buffer is not empty.                
                <exception>
                    IOException  if the pipe is
                      <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedWriter) unconnected}, or closed.                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="268">
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <javadoc line="285">
                Closes this piped stream and releases any system resources
                  associated with the stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="290"/>
        </class>
    </source>