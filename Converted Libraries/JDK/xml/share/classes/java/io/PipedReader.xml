<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PipedReader" line="29">
            <extends class="Reader"/>
            <comment line="42">
                REMIND: identification of the read and write sides needs to be
                more sophisticated.  Either using thread groups (but what about
                pipes within a thread?) or using finalization (but it may be a                
            </comment>
            <javadoc line="29">
                Piped character-input streams.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="closedByWriter" type="boolean" line="37"/>
            <declaration name="closedByReader" type="boolean" line="38"/>
            <declaration name="connected" type="boolean" line="39"/>
            <declaration name="readSide" type="Thread" line="45"/>
            <declaration name="writeSide" type="Thread" line="46"/>
            <declaration name="DEFAULT_PIPE_SIZE" type="int" line="48"/>
            <javadoc line="48">
                The size of the pipe&apos;s circular input buffer.                
            </javadoc>
            <declaration name="buffer" type="char" line="53"/>
            <javadoc line="53">
                The circular buffer into which incoming data is placed.                
            </javadoc>
            <declaration name="in" type="int" line="58"/>
            <javadoc line="58">
                The index of the position in the circular buffer at which the
                  next character of data will be stored when received from the connected
                  piped writer. &lt;code&gt;in&amp;lt;0&lt;/code&gt; implies the buffer is empty,
                  &lt;code&gt;in==out&lt;/code&gt; implies the buffer is full                
            </javadoc>
            <declaration name="out" type="int" line="66"/>
            <javadoc line="66">
                The index of the position in the circular buffer at which the next
                  character of data will be read by this piped reader.                
            </javadoc>
            <javadoc line="72">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so
                  that it is connected to the piped writer
                  &lt;code&gt;src&lt;/code&gt;. Data written to &lt;code&gt;src&lt;/code&gt;
                  will then be available as input from this stream.                
                <param>
                    src   the stream to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="PipedReader" type="constructor" line="81">
                <params>
                    <param name="src" type="PipedWriter"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so that it is connected
                  to the piped writer &lt;code&gt;src&lt;/code&gt; and uses the specified
                  pipe size for the pipe&apos;s buffer. Data written to &lt;code&gt;src&lt;/code&gt;
                  will then be  available as input from this stream.                
                <param>
                    src       the stream to connect to.                    
                </param>
                <param>
                    pipeSize  the size of the pipe&apos;s buffer.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;pipeSize &lt;= 0&lt;/code&gt;.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedReader" type="constructor" line="97">
                <params>
                    <param name="src" type="PipedWriter"/>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so
                  that it is not yet {@linkplain #connect(java.io.PipedWriter)connected}. It must be {@linkplain java.io.PipedWriter#connect(java.io.PipedReader) connected} to a &lt;code&gt;PipedWriter&lt;/code&gt;
                  before being used.                
            </javadoc>
            <method name="PipedReader" type="constructor" line="110"/>
            <javadoc line="114">
                Creates a &lt;code&gt;PipedReader&lt;/code&gt; so that it is not yet{@link #connect(java.io.PipedWriter) connected} and uses
                  the specified pipe size for the pipe&apos;s buffer.
                  It must be  {@linkplain java.io.PipedWriter#connect(java.io.PipedReader) connected} to a &lt;code&gt;PipedWriter&lt;/code&gt;
                  before being used.                
                <param>
                    pipeSize the size of the pipe&apos;s buffer.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;pipeSize &lt;= 0&lt;/code&gt;.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PipedReader" type="constructor" line="126">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
            </method>
            <method name="initPipe" type="void" line="130">
                <params>
                    <param name="pipeSize" type="int"/>
                </params>
                <scope line="131"/>
            </method>
            <javadoc line="137">
                Causes this piped reader to be connected
                  to the piped  writer &lt;code&gt;src&lt;/code&gt;.
                  If this object is already connected to some
                  other piped writer, an &lt;code&gt;IOException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;src&lt;/code&gt; is an
                  unconnected piped writer and &lt;code&gt;snk&lt;/code&gt;
                  is an unconnected piped reader, they
                  may be connected by either the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;snk.connect(src)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  or the call:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;src.connect(snk)&lt;/code&gt; &lt;/pre&gt;
                  &lt;p&gt;
                  The two
                  calls have the same effect.                
                <param>
                    src   The piped writer to connect to.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="161">
                <params>
                    <param name="src" type="PipedWriter"/>
                </params>
            </method>
            <javadoc line="165">
                Receives a char of data. This method will block if no input is
                  available.                
            </javadoc>
            <method name="receive" type="void" line="169">
                <params>
                    <param name="c" type="int"/>
                </params>
                <comment line="184">
                                        
                </comment>
                <scope line="170"/>
                <scope line="172"/>
                <scope line="174"/>
                <scope line="179">
                    <scope line="180"/>
                    <scope line="185"/>
                    <scope line="187"/>
                </scope>
                <scope line="191"/>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Receives data into an array of characters.  This method will
                  block until some input is available.                
            </javadoc>
            <method name="receive" type="void" line="205">
                <params>
                    <param name="c" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                Notifies all waiting threads that the last character of data has been
                  received.                
            </javadoc>
            <method name="receivedLast" type="void" line="215"/>
            <javadoc line="220">
                Reads the next character of data from this piped stream.
                  If no character is available because the end of the stream
                  has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned.
                  This method blocks until input data is available, the end of
                  the stream is detected, or an exception is thrown.                
                <return>
                    the next character of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
                      stream is reached.                    
                </return>
                <exception>
                    IOException  if the pipe is
                      &lt;a href=PipedInputStream.html#BROKEN&gt; &lt;code&gt;broken&lt;/code&gt;&lt;/a&gt;,{@link #connect(java.io.PipedWriter) unconnected}, closed,
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="234">
                <comment line="249">
                                        
                </comment>
                <comment line="255">
                                        
                </comment>
                <comment line="268">
                                        
                </comment>
                <scope line="235"/>
                <scope line="237"/>
                <scope line="240"/>
                <declaration name="trials" type="int" line="245"/>
                <scope line="246">
                    <scope line="247"/>
                    <scope line="251"/>
                    <scope line="256"/>
                    <scope line="258"/>
                </scope>
                <declaration name="ret" type="int" line="262"/>
                <scope line="263"/>
                <scope line="266"/>
            </method>
            <javadoc line="273">
                Reads up to &lt;code&gt;len&lt;/code&gt; characters of data from this piped
                  stream into an array of characters. Less than &lt;code&gt;len&lt;/code&gt; characters
                  will be read if the end of the data stream is reached or if
                  &lt;code&gt;len&lt;/code&gt; exceeds the pipe&apos;s buffer size. This method
                  blocks until at least one character of input is available.                
                <param>
                    cbuf     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset of the data.                    
                </param>
                <param>
                    len   the maximum number of characters read.                    
                </param>
                <return>
                    the total number of characters read into the buffer, or
                      &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    IOException  if the pipe is
                      &lt;a href=PipedInputStream.html#BROKEN&gt; &lt;code&gt;broken&lt;/code&gt;&lt;/a&gt;,{@link #connect(java.io.PipedWriter) unconnected}, closed,
                      or an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="read" type="int" line="291">
                <params>
                    <param name="cbuf" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="309">
                                        
                </comment>
                <comment line="323">
                                        
                </comment>
                <scope line="292"/>
                <scope line="294"/>
                <scope line="297"/>
                <scope line="302"/>
                <scope line="304"/>
                <declaration name="c" type="int" line="309"/>
                <scope line="310"/>
                <declaration name="rlen" type="int" line="314"/>
                <scope line="315">
                    <scope line="318"/>
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="329">
                Tell whether this stream is ready to be read.  A piped character
                  stream is ready if the circular buffer is not empty.                
                <exception>
                    IOException  if the pipe is
                      &lt;a href=PipedInputStream.html#BROKEN&gt; &lt;code&gt;broken&lt;/code&gt;&lt;/a&gt;,{@link #connect(java.io.PipedWriter) unconnected}, or closed.                    
                </exception>
            </javadoc>
            <method name="ready" type="boolean" line="337">
                <scope line="338"/>
                <scope line="340"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="348"/>
            </method>
            <javadoc line="353">
                Closes this piped stream and releases any system resources
                  associated with the stream.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="359"/>
        </class>
    </source>