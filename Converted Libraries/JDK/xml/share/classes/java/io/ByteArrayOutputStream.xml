<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.Arrays"/>
        <class name="ByteArrayOutputStream" line="30">
            <extends class="OutputStream"/>
            <javadoc line="30">
                This class implements an output stream in which the data is
                  written into a byte array. The buffer automatically grows as data
                  is written to it.
                  The data can be retrieved using &lt;code&gt;toByteArray()&lt;/code&gt; and
                  &lt;code&gt;toString()&lt;/code&gt;.
                  &lt;p&gt;
                  Closing a &lt;tt&gt;ByteArrayOutputStream&lt;/tt&gt; has no effect. The methods in
                  this class can be called after the stream has been closed without
                  generating an &lt;tt&gt;IOException&lt;/tt&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="buf" type="byte" line="47"/>
            <javadoc line="47">
                The buffer where data is stored.                
            </javadoc>
            <declaration name="count" type="int" line="52"/>
            <javadoc line="52">
                The number of valid bytes in the buffer.                
            </javadoc>
            <javadoc line="57">
                Creates a new byte array output stream. The buffer capacity is
                  initially 32 bytes, though its size increases if necessary.                
            </javadoc>
            <method name="ByteArrayOutputStream" type="constructor" line="61"/>
            <javadoc line="65">
                Creates a new byte array output stream, with a buffer capacity of
                  the specified size, in bytes.                
                <param>
                    size   the initial size.                    
                </param>
                <exception>
                    IllegalArgumentException if size is negative.                    
                </exception>
            </javadoc>
            <method name="ByteArrayOutputStream" type="constructor" line="72">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="73"/>
            </method>
            <javadoc line="80">
                Increases the capacity if necessary to ensure that it can hold
                  at least the number of elements specified by the minimum
                  capacity argument.                
                <param>
                    minCapacity the desired minimum capacity                    
                </param>
                <throws>
                    OutOfMemoryError if {@code minCapacity &lt; 0}.  This is
                      interpreted as a request for the unsatisfiably large capacity{@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.                    
                </throws>
            </javadoc>
            <method name="ensureCapacity" type="void" line="90">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="92">
                    overflow-conscious code                    
                </comment>
            </method>
            <javadoc line="96">
                Increases the capacity to ensure that it can hold at least the
                  number of elements specified by the minimum capacity argument.                
                <param>
                    minCapacity the desired minimum capacity                    
                </param>
            </javadoc>
            <method name="grow" type="void" line="102">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
                <comment line="104">
                    overflow-conscious code                    
                </comment>
                <comment line="110">
                    overflow                    
                </comment>
                <declaration name="oldCapacity" type="int" line="104"/>
                <declaration name="newCapacity" type="int" line="105"/>
                <scope line="108"/>
            </method>
            <javadoc line="116">
                Writes the specified byte to this byte array output stream.                
                <param>
                    b   the byte to be written.                    
                </param>
            </javadoc>
            <method name="write" type="void" line="121">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array
                  starting at offset &lt;code&gt;off&lt;/code&gt; to this byte array output stream.                
                <param>
                    b     the data.                    
                </param>
                <param>
                    off   the start offset in the data.                    
                </param>
                <param>
                    len   the number of bytes to write.                    
                </param>
            </javadoc>
            <method name="write" type="void" line="135">
                <params>
                    <param name="b" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="137"/>
            </method>
            <javadoc line="145">
                Writes the complete contents of this byte array output stream to
                  the specified output stream argument, as if by calling the output
                  stream&apos;s write method using &lt;code&gt;out.write(buf, 0, count)&lt;/code&gt;.                
                <param>
                    out   the output stream to which to write the data.                    
                </param>
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="writeTo" type="void" line="153">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="157">
                Resets the &lt;code&gt;count&lt;/code&gt; field of this byte array output
                  stream to zero, so that all currently accumulated output in the
                  output stream is discarded. The output stream can be used again,
                  reusing the already allocated buffer space.                
                <see>
                    java.io.ByteArrayInputStream#count                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="165"/>
            <javadoc line="169">
                Creates a newly allocated byte array. Its size is the current
                  size of this output stream and the valid contents of the buffer
                  have been copied into it.                
                <return>
                    the current contents of this output stream, as a byte array.                    
                </return>
                <see>
                    java.io.ByteArrayOutputStream#size()                    
                </see>
            </javadoc>
            <method name="toByteArray" type="byte" line="177"/>
            <javadoc line="181">
                Returns the current size of the buffer.                
                <return>
                    the value of the &lt;code&gt;count&lt;/code&gt; field, which is the number
                      of valid bytes in this output stream.                    
                </return>
                <see>
                    java.io.ByteArrayOutputStream#count                    
                </see>
            </javadoc>
            <method name="size" type="int" line="188"/>
            <javadoc line="192">
                Converts the buffer&apos;s contents into a string decoding bytes using the
                  platform&apos;s default character set. The length of the new &lt;tt&gt;String&lt;/tt&gt;
                  is a function of the character set, and hence may not be equal to the
                  size of the buffer.
                  &lt;p&gt; This method always replaces malformed-input and unmappable-character
                  sequences with the default replacement string for the platform&apos;s
                  default character set. The {@linkplain java.nio.charset.CharsetDecoder}class should be used when more control over the decoding process is
                  required.                
                <return>
                    String decoded from the buffer&apos;s contents.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="207"/>
            <javadoc line="211">
                Converts the buffer&apos;s contents into a string by decoding the bytes using
                  the specified {@link java.nio.charset.Charset charsetName}. The length of
                  the new &lt;tt&gt;String&lt;/tt&gt; is a function of the charset, and hence may not be
                  equal to the length of the byte array.
                  &lt;p&gt; This method always replaces malformed-input and unmappable-character
                  sequences with this charset&apos;s default replacement string. The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    charsetName  the name of a supported{@linkplain java.nio.charset.Charset &lt;/code&gt;charset&lt;code&gt;}                    
                </param>
                <return>
                    String decoded from the buffer&apos;s contents.                    
                </return>
                <exception>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="231">
                <params>
                    <param name="charsetName" type="String"/>
                </params>
            </method>
            <javadoc line="235">
                Creates a newly allocated string. Its size is the current size of
                  the output stream and the valid contents of the buffer have been
                  copied into it. Each character &lt;i&gt;c&lt;/i&gt; in the resulting string is
                  constructed from the corresponding element &lt;i&gt;b&lt;/i&gt; in the byte
                  array such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  c == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8) | (b &amp;amp; 0xff))
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <deprecated>
                    This method does not properly convert bytes into characters.
                      As of JDK&amp;nbsp;1.1, the preferred way to do this is via the
                      &lt;code&gt;toString(String enc)&lt;/code&gt; method, which takes an encoding-name
                      argument, or the &lt;code&gt;toString()&lt;/code&gt; method, which uses the
                      platform&apos;s default character encoding.                    
                </deprecated>
                <param>
                    hibyte    the high byte of each resulting Unicode character.                    
                </param>
                <return>
                    the current contents of the output stream, as a string.                    
                </return>
                <see>
                    java.io.ByteArrayOutputStream#size()                    
                </see>
                <see>
                    java.io.ByteArrayOutputStream#toString(String)                    
                </see>
                <see>
                    java.io.ByteArrayOutputStream#toString()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="258">
                <params>
                    <param name="hibyte" type="int"/>
                </params>
            </method>
            <javadoc line="262">
                Closing a &lt;tt&gt;ByteArrayOutputStream&lt;/tt&gt; has no effect. The methods in
                  this class can be called after the stream has been closed without
                  generating an &lt;tt&gt;IOException&lt;/tt&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="close" type="void" line="269"/>
        </class>
    </source>