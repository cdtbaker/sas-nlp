<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <import package="java.util.Arrays"/>
        <class name="CharArrayWriter" line="3">
            <extends class="Writer"/>
            <javadoc line="3">
                This class implements a character buffer that can be used as an Writer.
                  The buffer automatically grows when data is written to the stream.  The data
                  can be retrieved using toCharArray() and toString().
                  &lt;P&gt;
                  Note: Invoking close() on this class has no effect, and methods
                  of this class can be called after the stream has closed
                  without generating an IOException.                
                <author>
                    Herb Jellinek                    
                </author>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="buf" type="char" line="15"/>
            <javadoc line="15">
                The buffer where data is stored.                
            </javadoc>
            <declaration name="count" type="int" line="19"/>
            <javadoc line="19">
                The number of chars in the buffer.                
            </javadoc>
            <javadoc line="23">
                Creates a new CharArrayWriter.                
            </javadoc>
            <method name="CharArrayWriter" type="constructor" line="26"/>
            <javadoc line="29">
                Creates a new CharArrayWriter with the specified initial size.                
                <param>
                    initialSize  an int specifying the initial buffer size.                    
                </param>
                <exception>
                    IllegalArgumentException if initialSize is negative                    
                </exception>
            </javadoc>
            <method name="CharArrayWriter" type="constructor" line="34">
                <params>
                    <param name="initialSize" type="int"/>
                </params>
                <scope line="35"/>
            </method>
            <javadoc line="40">
                Writes a character to the buffer.                
            </javadoc>
            <method name="write" type="void" line="43">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="44">
                    <declaration name="newcount" type="int" line="45"/>
                    <scope line="46"/>
                </scope>
            </method>
            <javadoc line="53">
                Writes characters to the buffer.                
                <param>
                    c the data to be written                    
                </param>
                <param>
                    off       the start offset in the data                    
                </param>
                <param>
                    len       the number of chars that are written                    
                </param>
            </javadoc>
            <method name="write" type="void" line="59">
                <params>
                    <param name="c" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="60"/>
                <scope line="63"/>
                <scope line="66">
                    <declaration name="newcount" type="int" line="67"/>
                    <scope line="68"/>
                </scope>
            </method>
            <javadoc line="75">
                Write a portion of a string to the buffer.                
                <param>
                    str  String to be written from                    
                </param>
                <param>
                    off  Offset from which to start reading characters                    
                </param>
                <param>
                    len  Number of characters to be written                    
                </param>
            </javadoc>
            <method name="write" type="void" line="81">
                <params>
                    <param name="str" type="String"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="82">
                    <declaration name="newcount" type="int" line="83"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="91">
                Writes the contents of the buffer to another character stream.                
                <param>
                    out       the output stream to write to                    
                </param>
                <throws>
                    IOException If an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="writeTo" type="void" line="96">
                <params>
                    <param name="out" type="Writer"/>
                </params>
                <scope line="97"/>
            </method>
            <javadoc line="101">
                Appends the specified character sequence to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.toString()) &lt;/pre&gt;
                  &lt;p&gt; Depending on the specification of &lt;tt&gt;toString&lt;/tt&gt; for the
                  character sequence &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be
                  appended. For instance, invoking the &lt;tt&gt;toString&lt;/tt&gt; method of a
                  character buffer will return a subsequence whose content depends upon
                  the buffer&apos;s position and limit.                
                <param>
                    csqThe character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is
                      &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are
                      appended to this writer.                    
                </param>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="CharArrayWriter" line="118">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
                <declaration name="s" type="String" line="119"/>
            </method>
            <javadoc line="123">
                Appends a subsequence of the specified character sequence to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,
                  end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, behaves in
                  exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(csq.subSequence(start, end).toString()) &lt;/pre&gt;                
                <param>
                    csqThe character sequence from which a subsequence will be
                      appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters
                      will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four
                      characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt;.                    
                </param>
                <param>
                    startThe index of the first character in the subsequence                    
                </param>
                <param>
                    endThe index of the character following the last character in the
                      subsequence                    
                </param>
                <return>
                    This writer                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionIf &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative, &lt;tt&gt;start&lt;/tt&gt;
                      is greater than &lt;tt&gt;end&lt;/tt&gt;, or &lt;tt&gt;end&lt;/tt&gt; is greater than
                      &lt;tt&gt;csq.length()&lt;/tt&gt;                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="CharArrayWriter" line="143">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="s" type="String" line="144"/>
            </method>
            <javadoc line="148">
                Appends the specified character to this writer.
                  &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(c)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt;
                  out.write(c) &lt;/pre&gt;                
                <param>
                    cThe 16-bit character to append                    
                </param>
                <return>
                    This writer                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="append" type="CharArrayWriter" line="158">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="162">
                Resets the buffer so that you can use it again without
                  throwing away the already allocated buffer.                
            </javadoc>
            <method name="reset" type="void" line="166"/>
            <javadoc line="169">
                Returns a copy of the input data.                
                <return>
                    an array of chars copied from the input data.                    
                </return>
            </javadoc>
            <method name="toCharArray" type="char" line="173">
                <scope line="174"/>
            </method>
            <javadoc line="178">
                Returns the current size of the buffer.                
                <return>
                    an int representing the current size of the buffer.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="182"/>
            <javadoc line="185">
                Converts input data to a string.                
                <return>
                    the string.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="189">
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Flush the stream.                
            </javadoc>
            <method name="flush" type="void" line="197"/>
            <javadoc line="199">
                Close the stream.  This method does not release the buffer, since its
                  contents might still be required. Note: Invoking this method in this class
                  will have no effect.                
            </javadoc>
            <method name="close" type="void" line="204"/>
        </class>
    </source>