<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="PushbackInputStream" line="28">
            <extends class="FilterInputStream"/>
            <javadoc line="28">
                A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds
                  functionality to another input stream, namely
                  the  ability to &quot;push back&quot; or &quot;unread&quot;
                  one byte. This is useful in situations where
                  it is  convenient for a fragment of code
                  to read an indefinite number of data bytes
                  that  are delimited by a particular byte
                  value; after reading the terminating byte,
                  the  code fragment can &quot;unread&quot; it, so that
                  the next read operation on the input stream
                  will reread the byte that was pushed back.
                  For example, bytes representing the  characters
                  constituting an identifier might be terminated
                  by a byte representing an  operator character;
                  a method whose job is to read just an identifier
                  can read until it  sees the operator and
                  then push the operator back to be re-read.                
                <author>
                    David Connelly                    
                </author>
                <author>
                    Jonathan Payne                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="buf" type="byte[]" line="53"/>
            <javadoc line="53">
                The pushback buffer.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="pos" type="int" line="59"/>
            <javadoc line="59">
                The position within the pushback buffer from which the next byte will
                  be read.  When the buffer is empty, &lt;code&gt;pos&lt;/code&gt; is equal to
                  &lt;code&gt;buf.length&lt;/code&gt;; when the buffer is full, &lt;code&gt;pos&lt;/code&gt; is
                  equal to zero.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="69">
                Check to make sure that this stream has not been closed                
            </javadoc>
            <method name="ensureOpen" type="void" line="72"/>
            <javadoc line="77">
                Creates a &lt;code&gt;PushbackInputStream&lt;/code&gt;
                  with a pushback buffer of the specified &lt;code&gt;size&lt;/code&gt;,
                  and saves its  argument, the input stream
                  &lt;code&gt;in&lt;/code&gt;, for later use. Initially,
                  there is no pushed-back byte  (the field
                  &lt;code&gt;pushBack&lt;/code&gt; is initialized to
                  &lt;code&gt;-1&lt;/code&gt;).                
                <param>
                    in    the input stream from which bytes will be read.                    
                </param>
                <param>
                    size  the size of the pushback buffer.                    
                </param>
                <exception>
                    IllegalArgumentException if size is <= 0                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="PushbackInputStream" type="constructor" line="91">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="93"/>
            </method>
            <javadoc line="100">
                Creates a &lt;code&gt;PushbackInputStream&lt;/code&gt;
                  and saves its  argument, the input stream
                  &lt;code&gt;in&lt;/code&gt;, for later use. Initially,
                  there is no pushed-back byte  (the field
                  &lt;code&gt;pushBack&lt;/code&gt; is initialized to
                  &lt;code&gt;-1&lt;/code&gt;).                
                <param>
                    in   the input stream from which bytes will be read.                    
                </param>
            </javadoc>
            <method name="PushbackInputStream" type="constructor" line="110">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="114">
                Reads the next byte of data from this input stream. The value
                  byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
                  &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
                  because the end of the stream has been reached, the value
                  &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data
                  is available, the end of the stream is detected, or an exception
                  is thrown.
                  &lt;p&gt; This method returns the most recently pushed-back byte, if there is
                  one, and otherwise calls the &lt;code&gt;read&lt;/code&gt; method of its underlying
                  input stream and returns whatever value that method returns.                
                <return>
                    the next byte of data, or <code>-1</code> if the end of the
                      stream has been reached.                    
                </return>
                <exception>
                    IOException  if this input stream has been closed by
                      invoking its {@link #close()} method,
                      or an I/O error occurs.                    
                </exception>
                <see>
                    java.io.InputStream#read()                    
                </see>
            </javadoc>
            <method name="read" type="int" line="134">
                <scope line="136"/>
            </method>
            <javadoc line="142">
                Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream into
                  an array of bytes.  This method first reads any pushed-back bytes; after
                  that, if fewer than &lt;code&gt;len&lt;/code&gt; bytes have been read then it
                  reads from the underlying input stream. If &lt;code&gt;len&lt;/code&gt; is not zero, the method
                  blocks until at least 1 byte of input is available; otherwise, no
                  bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.                
                <param>
                    b     the buffer into which the data is read.                    
                </param>
                <param>
                    off   the start offset in the destination array <code>b</code>                    
                </param>
                <param>
                    len   the maximum number of bytes read.                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or
                      <code>-1</code> if there is no more data because the end of
                      the stream has been reached.                    
                </return>
                <exception>
                    NullPointerException If <code>b</code> is <code>null</code>.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If <code>off</code> is negative,
                      <code>len</code> is negative, or <code>len</code> is greater than
                      <code>b.length - off</code>                    
                </exception>
                <exception>
                    IOException  if this input stream has been closed by
                      invoking its {@link #close()} method,
                      or an I/O error occurs.                    
                </exception>
                <see>
                    java.io.InputStream#read(byte[],int,int)                    
                </see>
            </javadoc>
            <method name="read" type="int" line="165">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="167"/>
                <scope line="169"/>
                <scope line="171"/>
                <declaration name="avail" type="int" line="175"/>
                <scope line="176">
                    <scope line="177"/>
                </scope>
                <scope line="185">
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="195">
                Pushes back a byte by copying it to the front of the pushback buffer.
                  After this method returns, the next byte to be read will have the value
                  &lt;code&gt;(byte)b&lt;/code&gt;.                
                <param>
                    b   the <code>int</code> value whose low-order
                      byte is to be pushed back.                    
                </param>
                <exception>
                    IOException If there is not enough room in the pushback
                      buffer for the byte, or this input stream has been closed by
                      invoking its {@link #close()} method.                    
                </exception>
            </javadoc>
            <method name="unread" type="void" line="206">
                <params>
                    <param name="b" type="int"/>
                </params>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Pushes back a portion of an array of bytes by copying it to the front
                  of the pushback buffer.  After this method returns, the next byte to be
                  read will have the value &lt;code&gt;b[off]&lt;/code&gt;, the byte after that will
                  have the value &lt;code&gt;b[off+1]&lt;/code&gt;, and so forth.                
                <param>
                    b the byte array to push back.                    
                </param>
                <param>
                    off the start offset of the data.                    
                </param>
                <param>
                    len the number of bytes to push back.                    
                </param>
                <exception>
                    IOException If there is not enough room in the pushback
                      buffer for the specified number of bytes,
                      or this input stream has been closed by
                      invoking its {@link #close()} method.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="unread" type="void" line="229">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="231"/>
            </method>
            <javadoc line="238">
                Pushes back an array of bytes by copying it to the front of the
                  pushback buffer.  After this method returns, the next byte to be read
                  will have the value &lt;code&gt;b[0]&lt;/code&gt;, the byte after that will have the
                  value &lt;code&gt;b[1]&lt;/code&gt;, and so forth.                
                <param>
                    b the byte array to push back                    
                </param>
                <exception>
                    IOException If there is not enough room in the pushback
                      buffer for the specified number of bytes,
                      or this input stream has been closed by
                      invoking its {@link #close()} method.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="unread" type="void" line="251">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="255">
                Returns an estimate of the number of bytes that can be read (or
                  skipped over) from this input stream without blocking by the next
                  invocation of a method for this input stream. The next invocation might be
                  the same thread or another thread.  A single read or skip of this
                  many bytes will not block, but may read or skip fewer bytes.
                  &lt;p&gt; The method returns the sum of the number of bytes that have been
                  pushed back and the value returned by {@link java.io.FilterInputStream#available available}.                
                <return>
                    the number of bytes that can be read (or skipped over) from
                      the input stream without blocking.                    
                </return>
                <exception>
                    IOException  if this input stream has been closed by
                      invoking its {@link #close()} method,
                      or an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.InputStream#available()                    
                </see>
            </javadoc>
            <method name="available" type="int" line="274">
                <declaration name="n" type="int" line="276"/>
                <declaration name="avail" type="int" line="277"/>
            </method>
            <javadoc line="283">
                Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this
                  input stream. The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of
                  reasons, end up skipping over some smaller number of bytes,
                  possibly zero.  If &lt;code&gt;n&lt;/code&gt; is negative, no bytes are skipped.
                  &lt;p&gt; The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt;
                  first skips over the bytes in the pushback buffer, if any.  It then
                  calls the &lt;code&gt;skip&lt;/code&gt; method of the underlying input stream if
                  more bytes need to be skipped.  The actual number of bytes skipped
                  is returned.                
                <param>
                    n  {@inheritDoc}                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <exception>
                    IOException  if the stream does not support seek,
                      or the stream has been closed by
                      invoking its {@link #close()} method,
                      or an I/O error occurs.                    
                </exception>
                <see>
                    java.io.FilterInputStream#in                    
                </see>
                <see>
                    java.io.InputStream#skip(long n)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="skip" type="long" line="305">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="307"/>
                <declaration name="pskip" type="long" line="311"/>
                <scope line="312">
                    <scope line="313"/>
                </scope>
                <scope line="319"/>
            </method>
            <javadoc line="325">
                Tests if this input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods, which it does not.                
                <return>
                    <code>false</code>, since this class does not support the
                      <code>mark</code> and <code>reset</code> methods.                    
                </return>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="markSupported" type="boolean" line="334"/>
            <javadoc line="338">
                Marks the current position in this input stream.
                  &lt;p&gt; The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt;
                  does nothing.                
                <param>
                    readlimit   the maximum limit of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    java.io.InputStream#reset()                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="348">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
            </method>
            <javadoc line="351">
                Repositions this stream to the position at the time the
                  &lt;code&gt;mark&lt;/code&gt; method was last called on this input stream.
                  &lt;p&gt; The method &lt;code&gt;reset&lt;/code&gt; for class
                  &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing except throw an
                  &lt;code&gt;IOException&lt;/code&gt;.                
                <exception>
                    IOException  if this method is invoked.                    
                </exception>
                <see>
                    java.io.InputStream#mark(int)                    
                </see>
                <see>
                    java.io.IOException                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="363"/>
            <javadoc line="367">
                Closes this input stream and releases any system resources
                  associated with the stream.
                  Once the stream has been closed, further read(), unread(),
                  available(), reset(), or skip() invocations will throw an IOException.
                  Closing a previously closed stream has no effect.                
                <exception>
                    IOException  if an I/O error occurs.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="376"/>
        </class>
    </source>