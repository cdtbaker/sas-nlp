<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <class name="FileSystem" line="29">
            <comment line="43">
                                
            </comment>
            <comment line="90">
                                
            </comment>
            <comment line="106">
                                
            </comment>
            <comment line="108">
                                
            </comment>
            <comment line="154">
                                
            </comment>
            <comment line="206">
                                
            </comment>
            <comment line="213">
                                
            </comment>
            <comment line="220">
                                
            </comment>
            <comment line="232">
                Flags for enabling/disabling performance optimizations for file
                 name canonicalization                
            </comment>
            <javadoc line="29">
                Package-private abstract class for the local filesystem abstraction.                
            </javadoc>
            <method name="getFileSystem" type="FileSystem" line="35"/>
            <javadoc line="35">
                Return the FileSystem object representing this platform&apos;s local
                  filesystem.                
            </javadoc>
            <method name="getSeparator" type="char" line="44"/>
            <javadoc line="44">
                Return the local filesystem&apos;s name-separator character.                
            </javadoc>
            <method name="getPathSeparator" type="char" line="49"/>
            <javadoc line="49">
                Return the local filesystem&apos;s path-separator character.                
            </javadoc>
            <method name="normalize" type="String" line="54"/>
            <javadoc line="54">
                Convert the given pathname string to normal form.  If the string is
                  already in normal form then it is simply returned.                
            </javadoc>
            <method name="prefixLength" type="int" line="60"/>
            <javadoc line="60">
                Compute the length of this pathname string&apos;s prefix.  The pathname
                  string must be in normal form.                
            </javadoc>
            <method name="resolve" type="String" line="66"/>
            <javadoc line="66">
                Resolve the child pathname string against the parent.
                  Both strings must be in normal form, and the result
                  will be in normal form.                
            </javadoc>
            <method name="getDefaultParent" type="String" line="73"/>
            <javadoc line="73">
                Return the parent pathname string to be used when the parent-directory
                  argument in one of the two-argument File constructors is the empty
                  pathname.                
            </javadoc>
            <method name="fromURIPath" type="String" line="80"/>
            <javadoc line="80">
                Post-process the given URI path string if necessary.  This is used on
                  win32, e.g., to transform &quot;/c:/foo&quot; into &quot;c:/foo&quot;.  The path string
                  still has slash separators; code in the File class will translate them
                  after this method returns.                
            </javadoc>
            <method name="isAbsolute" type="boolean" line="91"/>
            <javadoc line="91">
                Tell whether or not the given abstract pathname is absolute.                
            </javadoc>
            <method name="resolve" type="String" line="96"/>
            <javadoc line="96">
                Resolve the given abstract pathname into absolute form.  Invoked by the
                  getAbsolutePath and getCanonicalPath methods in the File class.                
            </javadoc>
            <method name="canonicalize" type="String" line="102"/>
            <declaration name="BA_EXISTS" type="int" line="108"/>
            <declaration name="BA_REGULAR" type="int" line="109"/>
            <declaration name="BA_DIRECTORY" type="int" line="110"/>
            <declaration name="BA_HIDDEN" type="int" line="111"/>
            <method name="getBooleanAttributes" type="int" line="113"/>
            <javadoc line="113">
                Return the simple boolean attributes for the file or directory denoted
                  by the given abstract pathname, or zero if it does not exist or some
                  other I/O error occurs.                
            </javadoc>
            <declaration name="ACCESS_READ" type="int" line="120"/>
            <declaration name="ACCESS_WRITE" type="int" line="121"/>
            <declaration name="ACCESS_EXECUTE" type="int" line="122"/>
            <method name="checkAccess" type="boolean" line="124"/>
            <javadoc line="124">
                Check whether the file or directory denoted by the given abstract
                  pathname may be accessed by this process.  The second argument specifies
                  which access, ACCESS_READ, ACCESS_WRITE or ACCESS_EXECUTE, to check.
                  Return false if access is denied or an I/O error occurs                
            </javadoc>
            <method name="setPermission" type="boolean" line="131"/>
            <javadoc line="131">
                Set on or off the access permission (to owner only or to all) to the file
                  or directory denoted by the given abstract pathname, based on the parameters
                  enable, access and oweronly.                
            </javadoc>
            <method name="getLastModifiedTime" type="long" line="138"/>
            <javadoc line="138">
                Return the time at which the file or directory denoted by the given
                  abstract pathname was last modified, or zero if it does not exist or
                  some other I/O error occurs.                
            </javadoc>
            <method name="getLength" type="long" line="145"/>
            <javadoc line="145">
                Return the length in bytes of the file denoted by the given abstract
                  pathname, or zero if it does not exist, is a directory, or some other
                  I/O error occurs.                
            </javadoc>
            <method name="createFileExclusively" type="boolean" line="155"/>
            <javadoc line="155">
                Create a new empty file with the given pathname.  Return
                  &lt;code&gt;true&lt;/code&gt; if the file was created and &lt;code&gt;false&lt;/code&gt; if a
                  file or directory with the given pathname already exists.  Throw an
                  IOException if an I/O error occurs.                
            </javadoc>
            <method name="delete" type="boolean" line="164"/>
            <javadoc line="164">
                Delete the file or directory denoted by the given abstract pathname,
                  returning &lt;code&gt;true&lt;/code&gt; if and only if the operation succeeds.                
            </javadoc>
            <method name="list" type="String[]" line="170"/>
            <javadoc line="170">
                List the elements of the directory denoted by the given abstract
                  pathname.  Return an array of strings naming the elements of the
                  directory if successful; otherwise, return &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="createDirectory" type="boolean" line="177"/>
            <javadoc line="177">
                Create a new directory denoted by the given abstract pathname,
                  returning &lt;code&gt;true&lt;/code&gt; if and only if the operation succeeds.                
            </javadoc>
            <method name="rename" type="boolean" line="183"/>
            <javadoc line="183">
                Rename the file or directory denoted by the first abstract pathname to
                  the second abstract pathname, returning &lt;code&gt;true&lt;/code&gt; if and only if
                  the operation succeeds.                
            </javadoc>
            <method name="setLastModifiedTime" type="boolean" line="190"/>
            <javadoc line="190">
                Set the last-modified time of the file or directory denoted by the
                  given abstract pathname, returning &lt;code&gt;true&lt;/code&gt; if and only if the
                  operation succeeds.                
            </javadoc>
            <method name="setReadOnly" type="boolean" line="197"/>
            <javadoc line="197">
                Mark the file or directory denoted by the given abstract pathname as
                  read-only, returning &lt;code&gt;true&lt;/code&gt; if and only if the operation
                  succeeds.                
            </javadoc>
            <method name="listRoots" type="File[]" line="207"/>
            <javadoc line="207">
                List the available filesystem roots.                
            </javadoc>
            <declaration name="SPACE_TOTAL" type="int" line="213"/>
            <declaration name="SPACE_FREE" type="int" line="214"/>
            <declaration name="SPACE_USABLE" type="int" line="215"/>
            <method name="getSpace" type="long" line="217"/>
            <method name="compare" type="int" line="221"/>
            <javadoc line="221">
                Compare two abstract pathnames lexicographically.                
            </javadoc>
            <method name="hashCode" type="int" line="226"/>
            <javadoc line="226">
                Compute the hash code of an abstract pathname.                
            </javadoc>
            <declaration name="useCanonCaches" type="boolean" line="233"/>
            <declaration name="useCanonPrefixCache" type="boolean" line="234"/>
            <method name="getBooleanProperty" type="boolean" line="236">
                <params>
                    <param name="prop" type="String"/>
                    <param name="defaultVal" type="boolean"/>
                </params>
                <declaration name="val" type="String" line="237"/>
                <scope line="239"/>
                <scope line="241"/>
            </method>
            <scope line="246"/>
        </class>
    </source>