<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.io">
        <interface name="ObjectStreamConstants">
            <javadoc line="2">
                Constants written into the Object Serialization Stream.                
                <author>
                    unascribed                    
                </author>
                <since>
                    JDK 1.1                    
                </since>
            </javadoc>
            <declaration name="STREAM_MAGIC" type="short" line="8"/>
            <javadoc line="8">
                Magic number that is written to the stream header.                
            </javadoc>
            <declaration name="STREAM_VERSION" type="short" line="12"/>
            <javadoc line="12">
                Version number that is written to the stream header.                
            </javadoc>
            <declaration name="TC_BASE" type="byte" line="16"/>
            <javadoc line="16">
                First tag value.                
            </javadoc>
            <declaration name="TC_NULL" type="byte" line="20"/>
            <javadoc line="20">
                Null object reference.                
            </javadoc>
            <declaration name="TC_REFERENCE" type="byte" line="24"/>
            <javadoc line="24">
                Reference to an object already written into the stream.                
            </javadoc>
            <declaration name="TC_CLASSDESC" type="byte" line="28"/>
            <javadoc line="28">
                new Class Descriptor.                
            </javadoc>
            <declaration name="TC_OBJECT" type="byte" line="32"/>
            <javadoc line="32">
                new Object.                
            </javadoc>
            <declaration name="TC_STRING" type="byte" line="36"/>
            <javadoc line="36">
                new String.                
            </javadoc>
            <declaration name="TC_ARRAY" type="byte" line="40"/>
            <javadoc line="40">
                new Array.                
            </javadoc>
            <declaration name="TC_CLASS" type="byte" line="44"/>
            <javadoc line="44">
                Reference to Class.                
            </javadoc>
            <declaration name="TC_BLOCKDATA" type="byte" line="48"/>
            <javadoc line="48">
                Block of optional data. Byte following tag indicates number
                  of bytes in this block data.                
            </javadoc>
            <declaration name="TC_ENDBLOCKDATA" type="byte" line="53"/>
            <javadoc line="53">
                End of optional block data blocks for an object.                
            </javadoc>
            <declaration name="TC_RESET" type="byte" line="57"/>
            <javadoc line="57">
                Reset stream context. All handles written into stream are reset.                
            </javadoc>
            <declaration name="TC_BLOCKDATALONG" type="byte" line="61"/>
            <javadoc line="61">
                long Block data. The long following the tag indicates the
                  number of bytes in this block data.                
            </javadoc>
            <declaration name="TC_EXCEPTION" type="byte" line="66"/>
            <javadoc line="66">
                Exception during write.                
            </javadoc>
            <declaration name="TC_LONGSTRING" type="byte" line="70"/>
            <javadoc line="70">
                Long string.                
            </javadoc>
            <declaration name="TC_PROXYCLASSDESC" type="byte" line="74"/>
            <javadoc line="74">
                new Proxy Class Descriptor.                
            </javadoc>
            <declaration name="TC_ENUM" type="byte" line="78"/>
            <javadoc line="78">
                new Enum constant.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="TC_MAX" type="byte" line="83"/>
            <javadoc line="83">
                Last tag value.                
            </javadoc>
            <declaration name="baseWireHandle" type="int" line="87"/>
            <javadoc line="87">
                First wire handle to be assigned.                
            </javadoc>
            <declaration name="SC_WRITE_METHOD" type="byte" line="91"/>
            <javadoc line="91">
                Bit mask for ObjectStreamClass flag. Indicates a Serializable class
                  defines its own writeObject method.                
            </javadoc>
            <declaration name="SC_BLOCK_DATA" type="byte" line="96"/>
            <javadoc line="96">
                Bit mask for ObjectStreamClass flag. Indicates Externalizable data
                  written in Block Data mode.
                  Added for PROTOCOL_VERSION_2.                
                <see>
                    #PROTOCOL_VERSION_2                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="SC_SERIALIZABLE" type="byte" line="104"/>
            <javadoc line="104">
                Bit mask for ObjectStreamClass flag. Indicates class is Serializable.                
            </javadoc>
            <declaration name="SC_EXTERNALIZABLE" type="byte" line="108"/>
            <javadoc line="108">
                Bit mask for ObjectStreamClass flag. Indicates class is Externalizable.                
            </javadoc>
            <declaration name="SC_ENUM" type="byte" line="112"/>
            <javadoc line="112">
                Bit mask for ObjectStreamClass flag. Indicates class is an enum type.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="SUBSTITUTION_PERMISSION" type="SerializablePermission" line="117"/>
            <javadoc line="117">
                Enable substitution of one object for another during
                  serialization/deserialization.                
                <see>
                    java.io.ObjectOutputStream#enableReplaceObject(boolean)                    
                </see>
                <see>
                    java.io.ObjectInputStream#enableResolveObject(boolean)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="SUBCLASS_IMPLEMENTATION_PERMISSION" type="SerializablePermission" line="125"/>
            <javadoc line="125">
                Enable overriding of readObject and writeObject.                
                <see>
                    java.io.ObjectOutputStream#writeObjectOverride(Object)                    
                </see>
                <see>
                    java.io.ObjectInputStream#readObjectOverride()                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="PROTOCOL_VERSION_1" type="int" line="132"/>
            <javadoc line="132">
                A Stream Protocol Version. &lt;p&gt;
                  All externalizable data is written in JDK 1.1 external data
                  format after calling this method. This version is needed to write
                  streams containing Externalizable data that can be read by
                  pre-JDK 1.1.6 JVMs.                
                <see>
                    java.io.ObjectOutputStream#useProtocolVersion(int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="PROTOCOL_VERSION_2" type="int" line="142"/>
            <javadoc line="142">
                A Stream Protocol Version. &lt;p&gt;
                  This protocol is written by JVM 1.2.
                  Externalizable data is written in block data mode and is
                  terminated with TC_ENDBLOCKDATA. Externalizable classdescriptor
                  flags has SC_BLOCK_DATA enabled. JVM 1.1.6 and greater can
                  read this format change.
                  Enables writing a nonSerializable class descriptor into the
                  stream. The serialVersionUID of a nonSerializable class is
                  set to 0L.                
                <see>
                    java.io.ObjectOutputStream#useProtocolVersion(int)                    
                </see>
                <see>
                    #SC_BLOCK_DATA                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
        </interface>
    </source>