<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io"/>
        <import package="java.util.StringTokenizer"/>
        <class name="Runtime" line="31">
            <comment line="689">
                                
            </comment>
            <javadoc line="31">
                Every Java application has a single instance of class
                  &lt;code&gt;Runtime&lt;/code&gt; that allows the application to interface with
                  the environment in which the application is running. The current
                  runtime can be obtained from the &lt;code&gt;getRuntime&lt;/code&gt; method.
                  &lt;p&gt;
                  An application cannot create its own instance of this class.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.lang.Runtime#getRuntime()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="currentRuntime" type="Runtime" line="45"/>
            <javadoc line="47">
                Returns the runtime object associated with the current Java application.
                  Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance
                  methods and must be invoked with respect to the current runtime object.                
                <return>
                    the <code>Runtime</code> object associated with the current
                      Java application.                    
                </return>
            </javadoc>
            <method name="getRuntime" type="Runtime" line="55"/>
            <javadoc line="59">
                Don&apos;t let anyone else instantiate this class                
            </javadoc>
            <method name="Runtime" type="constructor" line="60"/>
            <javadoc line="62">
                Terminates the currently running Java virtual machine by initiating its
                  shutdown sequence.  This method never returns normally.  The argument
                  serves as a status code; by convention, a nonzero status code indicates
                  abnormal termination.
                  &lt;p&gt; The virtual machine&apos;s shutdown sequence consists of two phases.  In
                  the first phase all registered {@link #addShutdownHook shutdown hooks},
                  if any, are started in some unspecified order and allowed to run
                  concurrently until they finish.  In the second phase all uninvoked
                  finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}has been enabled.  Once this is done the virtual machine {@link #halthalts}.
                  &lt;p&gt; If this method is invoked after the virtual machine has begun its
                  shutdown sequence then if shutdown hooks are being run this method will
                  block indefinitely.  If shutdown hooks have already been run and on-exit
                  finalization has been enabled then this method halts the virtual machine
                  with the given status code if the status is nonzero; otherwise, it
                  blocks indefinitely.
                  &lt;p&gt; The &lt;tt&gt;{@link System#exit(int) System.exit}&lt;/tt&gt; method is the
                  conventional and convenient means of invoking this method. &lt;p&gt;                
                <param>
                    statusTermination status.  By convention, a nonzero status code
                      indicates abnormal termination.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager is present and its <tt>{@link SecurityManager#checkExit checkExit}</tt> method does not permit
                      exiting with the specified status                    
                </throws>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkExit(int)                    
                </see>
                <see>
                    #addShutdownHook                    
                </see>
                <see>
                    #removeShutdownHook                    
                </see>
                <see>
                    #runFinalizersOnExit                    
                </see>
                <see>
                    #halt(int)                    
                </see>
            </javadoc>
            <method name="exit" type="void" line="102">
                <params>
                    <param name="status" type="int"/>
                </params>
                <declaration name="security" type="SecurityManager" line="103"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                Registers a new virtual-machine shutdown hook.
                  &lt;p&gt; The Java virtual machine &lt;i&gt;shuts down&lt;/i&gt; in response to two kinds
                  of events:
                  &lt;ul&gt;
                  &lt;p&gt; &lt;li&gt; The program &lt;i&gt;exits&lt;/i&gt; normally, when the last non-daemon
                  thread exits or when the &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; (equivalently,
                  &lt;tt&gt;{@link System#exit(int) System.exit}&lt;/tt&gt;) method is invoked, or
                  &lt;p&gt; &lt;li&gt; The virtual machine is &lt;i&gt;terminated&lt;/i&gt; in response to a
                  user interrupt, such as typing &lt;tt&gt;^C&lt;/tt&gt;, or a system-wide event,
                  such as user logoff or system shutdown.
                  &lt;/ul&gt;
                  &lt;p&gt; A &lt;i&gt;shutdown hook&lt;/i&gt; is simply an initialized but unstarted
                  thread.  When the virtual machine begins its shutdown sequence it will
                  start all registered shutdown hooks in some unspecified order and let
                  them run concurrently.  When all the hooks have finished it will then
                  run all uninvoked finalizers if finalization-on-exit has been enabled.
                  Finally, the virtual machine will halt.  Note that daemon threads will
                  continue to run during the shutdown sequence, as will non-daemon threads
                  if shutdown was initiated by invoking the &lt;tt&gt;{@link #exit exit}&lt;/tt&gt;
                  method.
                  &lt;p&gt; Once the shutdown sequence has begun it can be stopped only by
                  invoking the &lt;tt&gt;{@link #halt halt}&lt;/tt&gt; method, which forcibly
                  terminates the virtual machine.
                  &lt;p&gt; Once the shutdown sequence has begun it is impossible to register a
                  new shutdown hook or de-register a previously-registered hook.
                  Attempting either of these operations will cause an
                  &lt;tt&gt;{@link IllegalStateException}&lt;/tt&gt; to be thrown.
                  &lt;p&gt; Shutdown hooks run at a delicate time in the life cycle of a virtual
                  machine and should therefore be coded defensively.  They should, in
                  particular, be written to be thread-safe and to avoid deadlocks insofar
                  as possible.  They should also not rely blindly upon services that may
                  have registered their own shutdown hooks and therefore may themselves in
                  the process of shutting down.  Attempts to use other thread-based
                  services such as the AWT event-dispatch thread, for example, may lead to
                  deadlocks.
                  &lt;p&gt; Shutdown hooks should also finish their work quickly.  When a
                  program invokes &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; the expectation is
                  that the virtual machine will promptly shut down and exit.  When the
                  virtual machine is terminated due to user logoff or system shutdown the
                  underlying operating system may only allow a fixed amount of time in
                  which to shut down and exit.  It is therefore inadvisable to attempt any
                  user interaction or to perform a long-running computation in a shutdown
                  hook.
                  &lt;p&gt; Uncaught exceptions are handled in shutdown hooks just as in any
                  other thread, by invoking the &lt;tt&gt;{@link ThreadGroup#uncaughtExceptionuncaughtException}&lt;/tt&gt; method of the thread&apos;s &lt;tt&gt;{@link ThreadGroup}&lt;/tt&gt; object.  The default implementation of this method
                  prints the exception&apos;s stack trace to &lt;tt&gt;{@link System#err}&lt;/tt&gt; and
                  terminates the thread; it does not cause the virtual machine to exit or
                  halt.
                  &lt;p&gt; In rare circumstances the virtual machine may &lt;i&gt;abort&lt;/i&gt;, that is,
                  stop running without shutting down cleanly.  This occurs when the
                  virtual machine is terminated externally, for example with the
                  &lt;tt&gt;SIGKILL&lt;/tt&gt; signal on Unix or the &lt;tt&gt;TerminateProcess&lt;/tt&gt; call on
                  Microsoft Windows.  The virtual machine may also abort if a native
                  method goes awry by, for example, corrupting internal data structures or
                  attempting to access nonexistent memory.  If the virtual machine aborts
                  then no guarantee can be made about whether or not any shutdown hooks
                  will be run. &lt;p&gt;                
                <param>
                    hookAn initialized but unstarted <tt>{@link Thread}</tt> object                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the specified hook has already been registered,
                      or if it can be determined that the hook is already running or
                      has already been run                    
                </throws>
                <throws>
                    IllegalStateExceptionIf the virtual machine is already in the process
                      of shutting down                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and it denies
                      <tt>{@link RuntimePermission}("shutdownHooks")</tt>                    
                </throws>
                <see>
                    #removeShutdownHook                    
                </see>
                <see>
                    #halt(int)                    
                </see>
                <see>
                    #exit(int)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addShutdownHook" type="void" line="204">
                <params>
                    <param name="hook" type="Thread"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="205"/>
                <scope line="206"/>
            </method>
            <javadoc line="212">
                De-registers a previously-registered virtual-machine shutdown hook. &lt;p&gt;                
                <param>
                    hook the hook to remove                    
                </param>
                <return>
                    <tt>true</tt> if the specified hook had previously been
                      registered and was successfully de-registered, <tt>false</tt>
                      otherwise.                    
                </return>
                <throws>
                    IllegalStateExceptionIf the virtual machine is already in the process of shutting
                      down                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and it denies
                      <tt>{@link RuntimePermission}("shutdownHooks")</tt>                    
                </throws>
                <see>
                    #addShutdownHook                    
                </see>
                <see>
                    #exit(int)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeShutdownHook" type="boolean" line="232">
                <params>
                    <param name="hook" type="Thread"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="233"/>
                <scope line="234"/>
            </method>
            <javadoc line="240">
                Forcibly terminates the currently running Java virtual machine.  This
                  method never returns normally.
                  &lt;p&gt; This method should be used with extreme caution.  Unlike the
                  &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; method, this method does not cause shutdown
                  hooks to be started and does not run uninvoked finalizers if
                  finalization-on-exit has been enabled.  If the shutdown sequence has
                  already been initiated then this method does not wait for any running
                  shutdown hooks or finalizers to finish their work. &lt;p&gt;                
                <param>
                    statusTermination status.  By convention, a nonzero status code
                      indicates abnormal termination.  If the <tt>{@link Runtime#exitexit}</tt> (equivalently, <tt>{@link System#exit(int)System.exit}</tt>) method has already been invoked then this
                      status code will override the status code passed to that method.                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager is present and its <tt>{@link SecurityManager#checkExit checkExit}</tt> method does not permit
                      an exit with the specified status                    
                </throws>
                <see>
                    #exit                    
                </see>
                <see>
                    #addShutdownHook                    
                </see>
                <see>
                    #removeShutdownHook                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="halt" type="void" line="268">
                <params>
                    <param name="status" type="int"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="269"/>
                <scope line="270"/>
            </method>
            <javadoc line="276">
                Enable or disable finalization on exit; doing so specifies that the
                  finalizers of all objects that have finalizers that have not yet been
                  automatically invoked are to be run before the Java runtime exits.
                  By default, finalization on exit is disabled.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkExit&lt;/code&gt; method is first called
                  with 0 as its argument to ensure the exit is allowed.
                  This could result in a SecurityException.                
                <param>
                    value true to enable finalization on exit, false to disable                    
                </param>
                <deprecated>
                    This method is inherently unsafe.  It may result in
                      finalizers being called on live objects while other threads are
                      concurrently manipulating those objects, resulting in erratic
                      behavior or deadlock.                    
                </deprecated>
                <throws>
                    SecurityExceptionif a security manager exists and its <code>checkExit</code>
                      method doesn't allow the exit.                    
                </throws>
                <see>
                    java.lang.Runtime#exit(int)                    
                </see>
                <see>
                    java.lang.Runtime#gc()                    
                </see>
                <see>
                    java.lang.SecurityManager#checkExit(int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="runFinalizersOnExit" type="void" line="303">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <declaration name="security" type="SecurityManager" line="304"/>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="308"/>
                </scope>
            </method>
            <javadoc line="315">
                Executes the specified string command in a separate process.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;tt&gt;exec(command)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt;{@link #exec(String,String[],File) exec}(command, null, null)&lt;/tt&gt;.                
                <param>
                    command   a specified system command.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>command</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf <code>command</code> is empty                    
                </throws>
                <see>
                    #exec(String[],String[],File)                    
                </see>
                <see>
                    ProcessBuilder                    
                </see>
            </javadoc>
            <method name="exec" type="Process" line="344">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="348">
                Executes the specified string command in a separate process with the
                  specified environment.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;tt&gt;exec(command, envp)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt;{@link #exec(String,String[],File) exec}(command, envp, null)&lt;/tt&gt;.                
                <param>
                    command   a specified system command.                    
                </param>
                <param>
                    envp      array of strings, each element of which
                      has environment variable settings in the format
                      <i>name</i>=<i>value</i>, or
                      <tt>null</tt> if the subprocess should inherit
                      the environment of the current process.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>command</code> is <code>null</code>,
                      or one of the elements of <code>envp</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf <code>command</code> is empty                    
                </throws>
                <see>
                    #exec(String[],String[],File)                    
                </see>
                <see>
                    ProcessBuilder                    
                </see>
            </javadoc>
            <method name="exec" type="Process" line="385">
                <params>
                    <param name="command" type="String"/>
                    <param name="envp" type="String[]"/>
                </params>
            </method>
            <javadoc line="389">
                Executes the specified string command in a separate process with the
                  specified environment and working directory.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;tt&gt;exec(command, envp, dir)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt;{@link #exec(String[],String[],File) exec}(cmdarray, envp, dir)&lt;/tt&gt;,
                  where &lt;code&gt;cmdarray&lt;/code&gt; is an array of all the tokens in
                  &lt;code&gt;command&lt;/code&gt;.
                  &lt;p&gt;More precisely, the &lt;code&gt;command&lt;/code&gt; string is broken
                  into tokens using a {@link StringTokenizer} created by the call
                  &lt;code&gt;new {@link StringTokenizer}(command)&lt;/code&gt; with no
                  further modification of the character categories.  The tokens
                  produced by the tokenizer are then placed in the new string
                  array &lt;code&gt;cmdarray&lt;/code&gt;, in the same order.                
                <param>
                    command   a specified system command.                    
                </param>
                <param>
                    envp      array of strings, each element of which
                      has environment variable settings in the format
                      <i>name</i>=<i>value</i>, or
                      <tt>null</tt> if the subprocess should inherit
                      the environment of the current process.                    
                </param>
                <param>
                    dir       the working directory of the subprocess, or
                      <tt>null</tt> if the subprocess should inherit
                      the working directory of the current process.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>command</code> is <code>null</code>,
                      or one of the elements of <code>envp</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf <code>command</code> is empty                    
                </throws>
                <see>
                    ProcessBuilder                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="exec" type="Process" line="440">
                <params>
                    <param name="command" type="String"/>
                    <param name="envp" type="String[]"/>
                    <param name="dir" type="File"/>
                </params>
                <declaration name="st" type="StringTokenizer" line="444"/>
                <declaration name="cmdarray" type="String[]" line="445"/>
            </method>
            <javadoc line="451">
                Executes the specified command and arguments in a separate process.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;tt&gt;exec(cmdarray)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt;{@link #exec(String[],String[],File) exec}(cmdarray, null, null)&lt;/tt&gt;.                
                <param>
                    cmdarray  array containing the command to call and
                      its arguments.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>cmdarray</code> is <code>null</code>,
                      or one of the elements of <code>cmdarray</code> is <code>null</code>                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf <code>cmdarray</code> is an empty array
                      (has length <code>0</code>)                    
                </throws>
                <see>
                    ProcessBuilder                    
                </see>
            </javadoc>
            <method name="exec" type="Process" line="482">
                <params>
                    <param name="cmdarray" type="String"/>
                </params>
            </method>
            <javadoc line="486">
                Executes the specified command and arguments in a separate process
                  with the specified environment.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;tt&gt;exec(cmdarray, envp)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt;{@link #exec(String[],String[],File) exec}(cmdarray, envp, null)&lt;/tt&gt;.                
                <param>
                    cmdarray  array containing the command to call and
                      its arguments.                    
                </param>
                <param>
                    envp      array of strings, each element of which
                      has environment variable settings in the format
                      <i>name</i>=<i>value</i>, or
                      <tt>null</tt> if the subprocess should inherit
                      the environment of the current process.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>cmdarray</code> is <code>null</code>,
                      or one of the elements of <code>cmdarray</code> is <code>null</code>,
                      or one of the elements of <code>envp</code> is <code>null</code>                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf <code>cmdarray</code> is an empty array
                      (has length <code>0</code>)                    
                </throws>
                <see>
                    ProcessBuilder                    
                </see>
            </javadoc>
            <method name="exec" type="Process" line="525">
                <params>
                    <param name="cmdarray" type="String[]"/>
                    <param name="envp" type="String[]"/>
                </params>
            </method>
            <javadoc line="530">
                Executes the specified command and arguments in a separate process with
                  the specified environment and working directory.
                  &lt;p&gt;Given an array of strings &lt;code&gt;cmdarray&lt;/code&gt;, representing the
                  tokens of a command line, and an array of strings &lt;code&gt;envp&lt;/code&gt;,
                  representing &quot;environment&quot; variable settings, this method creates
                  a new process in which to execute the specified command.
                  &lt;p&gt;This method checks that &lt;code&gt;cmdarray&lt;/code&gt; is a valid operating
                  system command.  Which commands are valid is system-dependent,
                  but at the very least the command must be a non-empty list of
                  non-null strings.
                  &lt;p&gt;If &lt;tt&gt;envp&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the subprocess inherits the
                  environment settings of the current process.
                  &lt;p&gt;A minimal set of system dependent environment variables may
                  be required to start a process on some operating systems.
                  As a result, the subprocess may inherit additional environment variable
                  settings beyond those in the specified environment.
                  &lt;p&gt;{@link ProcessBuilder#start()} is now the preferred way to
                  start a process with a modified environment.
                  &lt;p&gt;The working directory of the new subprocess is specified by &lt;tt&gt;dir&lt;/tt&gt;.
                  If &lt;tt&gt;dir&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the subprocess inherits the
                  current working directory of the current process.
                  &lt;p&gt;If a security manager exists, its{@link SecurityManager#checkExec checkExec}method is invoked with the first component of the array
                  &lt;code&gt;cmdarray&lt;/code&gt; as its argument. This may result in a{@link SecurityException} being thrown.
                  &lt;p&gt;Starting an operating system process is highly system-dependent.
                  Among the many things that can go wrong are:
                  &lt;ul&gt;
                  &lt;li&gt;The operating system program file was not found.
                  &lt;li&gt;Access to the program file was denied.
                  &lt;li&gt;The working directory does not exist.
                  &lt;/ul&gt;
                  &lt;p&gt;In such cases an exception will be thrown.  The exact nature
                  of the exception is system-dependent, but it will always be a
                  subclass of {@link IOException}.                
                <param>
                    cmdarray  array containing the command to call and
                      its arguments.                    
                </param>
                <param>
                    envp      array of strings, each element of which
                      has environment variable settings in the format
                      <i>name</i>=<i>value</i>, or
                      <tt>null</tt> if the subprocess should inherit
                      the environment of the current process.                    
                </param>
                <param>
                    dir       the working directory of the subprocess, or
                      <tt>null</tt> if the subprocess should inherit
                      the working directory of the current process.                    
                </param>
                <return>
                    A new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    NullPointerExceptionIf <code>cmdarray</code> is <code>null</code>,
                      or one of the elements of <code>cmdarray</code> is <code>null</code>,
                      or one of the elements of <code>envp</code> is <code>null</code>                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf <code>cmdarray</code> is an empty array
                      (has length <code>0</code>)                    
                </throws>
                <see>
                    ProcessBuilder                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="exec" type="Process" line="614">
                <params>
                    <param name="cmdarray" type="String[]"/>
                    <param name="envp" type="String[]"/>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="availableProcessors" type="int" line="621"/>
            <javadoc line="621">
                Returns the number of processors available to the Java virtual machine.
                  &lt;p&gt; This value may change during a particular invocation of the virtual
                  machine.  Applications that are sensitive to the number of available
                  processors should therefore occasionally poll this property and adjust
                  their resource usage appropriately. &lt;/p&gt;                
                <return>
                    the maximum number of processors available to the virtual
                      machine; never smaller than one                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="freeMemory" type="long" line="635"/>
            <javadoc line="635">
                Returns the amount of free memory in the Java Virtual Machine.
                  Calling the
                  &lt;code&gt;gc&lt;/code&gt; method may result in increasing the value returned
                  by &lt;code&gt;freeMemory.&lt;/code&gt;                
                <return>
                    an approximation to the total amount of memory currently
                      available for future allocated objects, measured in bytes.                    
                </return>
            </javadoc>
            <method name="totalMemory" type="long" line="646"/>
            <javadoc line="646">
                Returns the total amount of memory in the Java virtual machine.
                  The value returned by this method may vary over time, depending on
                  the host environment.
                  &lt;p&gt;
                  Note that the amount of memory required to hold an object of any
                  given type may be implementation-dependent.                
                <return>
                    the total amount of memory currently available for current
                      and future objects, measured in bytes.                    
                </return>
            </javadoc>
            <method name="maxMemory" type="long" line="659"/>
            <javadoc line="659">
                Returns the maximum amount of memory that the Java virtual machine will
                  attempt to use.  If there is no inherent limit then the value {@link java.lang.Long#MAX_VALUE} will be returned. &lt;/p&gt;                
                <return>
                    the maximum amount of memory that the virtual machine will
                      attempt to use, measured in bytes                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="gc" type="void" line="670"/>
            <javadoc line="670">
                Runs the garbage collector.
                  Calling this method suggests that the Java virtual machine expend
                  effort toward recycling unused objects in order to make the memory
                  they currently occupy available for quick reuse. When control
                  returns from the method call, the virtual machine has made
                  its best effort to recycle all discarded objects.
                  &lt;p&gt;
                  The name &lt;code&gt;gc&lt;/code&gt; stands for &quot;garbage
                  collector&quot;. The virtual machine performs this recycling
                  process automatically as needed, in a separate thread, even if the
                  &lt;code&gt;gc&lt;/code&gt; method is not invoked explicitly.
                  &lt;p&gt;
                  The method {@link System#gc()} is the conventional and convenient
                  means of invoking this method.                
            </javadoc>
            <method name="runFinalization0" type="void" line="689"/>
            <javadoc line="691">
                Runs the finalization methods of any objects pending finalization.
                  Calling this method suggests that the Java virtual machine expend
                  effort toward running the &lt;code&gt;finalize&lt;/code&gt; methods of objects
                  that have been found to be discarded but whose &lt;code&gt;finalize&lt;/code&gt;
                  methods have not yet been run. When control returns from the
                  method call, the virtual machine has made a best effort to
                  complete all outstanding finalizations.
                  &lt;p&gt;
                  The virtual machine performs the finalization process
                  automatically as needed, in a separate thread, if the
                  &lt;code&gt;runFinalization&lt;/code&gt; method is not invoked explicitly.
                  &lt;p&gt;
                  The method {@link System#runFinalization()} is the conventional
                  and convenient means of invoking this method.                
                <see>
                    java.lang.Object#finalize()                    
                </see>
            </javadoc>
            <method name="runFinalization" type="void" line="709"/>
            <method name="traceInstructions" type="void" line="713"/>
            <javadoc line="713">
                Enables/Disables tracing of instructions.
                  If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, this
                  method suggests that the Java virtual machine emit debugging
                  information for each instruction in the virtual machine as it
                  is executed. The format of this information, and the file or other
                  output stream to which it is emitted, depends on the host environment.
                  The virtual machine may ignore this request if it does not support
                  this feature. The destination of the trace output is system
                  dependent.
                  &lt;p&gt;
                  If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;false&lt;/code&gt;, this
                  method causes the virtual machine to stop performing the
                  detailed instruction trace it is performing.                
                <param>
                    on   <code>true</code> to enable instruction tracing;
                      <code>false</code> to disable this feature.                    
                </param>
            </javadoc>
            <method name="traceMethodCalls" type="void" line="733"/>
            <javadoc line="733">
                Enables/Disables tracing of method calls.
                  If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, this
                  method suggests that the Java virtual machine emit debugging
                  information for each method in the virtual machine as it is
                  called. The format of this information, and the file or other output
                  stream to which it is emitted, depends on the host environment. The
                  virtual machine may ignore this request if it does not support
                  this feature.
                  &lt;p&gt;
                  Calling this method with argument false suggests that the
                  virtual machine cease emitting per-call debugging information.                
                <param>
                    on   <code>true</code> to enable instruction tracing;
                      <code>false</code> to disable this feature.                    
                </param>
            </javadoc>
            <javadoc line="751">
                Loads the specified filename as a dynamic library. The filename
                  argument must be a complete path name,
                  (for example
                  &lt;code&gt;Runtime.getRuntime().load(&quot;/home/avh/lib/libX11.so&quot;);&lt;/code&gt;).
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkLink&lt;/code&gt;
                  method is called with the &lt;code&gt;filename&lt;/code&gt; as its argument.
                  This may result in a security exception.
                  &lt;p&gt;
                  This is similar to the method {@link #loadLibrary(String)}, but it
                  accepts a general file name as an argument rather than just a library
                  name, allowing any file of native code to be loaded.
                  &lt;p&gt;
                  The method {@link System#load(String)} is the conventional and
                  convenient means of invoking this method.                
                <param>
                    filename   the file to load.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkLink</code> method doesn't allow
                      loading of the specified dynamic library                    
                </exception>
                <exception>
                    UnsatisfiedLinkError  if the file does not exist.                    
                </exception>
                <exception>
                    NullPointerException if <code>filename</code> is
                      <code>null</code>                    
                </exception>
                <see>
                    java.lang.Runtime#getRuntime()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkLink(java.lang.String)                    
                </see>
            </javadoc>
            <method name="load" type="void" line="779">
                <params>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <method name="load0" type="void" line="783">
                <params>
                    <param name="fromClass" type="Class"/>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="784"/>
                <scope line="785"/>
                <scope line="788"/>
            </method>
            <javadoc line="795">
                Loads the dynamic library with the specified library name.
                  A file containing native code is loaded from the local file system
                  from a place where library files are conventionally obtained. The
                  details of this process are implementation-dependent. The
                  mapping from a library name to a specific filename is done in a
                  system-specific manner.
                  &lt;p&gt;
                  First, if there is a security manager, its &lt;code&gt;checkLink&lt;/code&gt;
                  method is called with the &lt;code&gt;libname&lt;/code&gt; as its argument.
                  This may result in a security exception.
                  &lt;p&gt;
                  The method {@link System#loadLibrary(String)} is the conventional
                  and convenient means of invoking this method. If native
                  methods are to be used in the implementation of a class, a standard
                  strategy is to put the native code in a library file (call it
                  &lt;code&gt;LibFile&lt;/code&gt;) and then to put a static initializer:
                  &lt;blockquote&gt;&lt;pre&gt;
                  static { System.loadLibrary(&quot;LibFile&quot;); }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  within the class declaration. When the class is loaded and
                  initialized, the necessary native code implementation for the native
                  methods will then be loaded as well.
                  &lt;p&gt;
                  If this method is called more than once with the same library
                  name, the second and subsequent calls are ignored.                
                <param>
                    libname   the name of the library.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkLink</code> method doesn't allow
                      loading of the specified dynamic library                    
                </exception>
                <exception>
                    UnsatisfiedLinkError  if the library does not exist.                    
                </exception>
                <exception>
                    NullPointerException if <code>libname</code> is
                      <code>null</code>                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkLink(java.lang.String)                    
                </see>
            </javadoc>
            <method name="loadLibrary" type="void" line="832">
                <params>
                    <param name="libname" type="String"/>
                </params>
            </method>
            <method name="loadLibrary0" type="void" line="836">
                <params>
                    <param name="fromClass" type="Class"/>
                    <param name="libname" type="String"/>
                </params>
                <declaration name="security" type="SecurityManager" line="837"/>
                <scope line="838"/>
                <scope line="841"/>
            </method>
            <javadoc line="848">
                Creates a localized version of an input stream. This method takes
                  an &lt;code&gt;InputStream&lt;/code&gt; and returns an &lt;code&gt;InputStream&lt;/code&gt;
                  equivalent to the argument in all respects except that it is
                  localized: as characters in the local character set are read from
                  the stream, they are automatically converted from the local
                  character set to Unicode.
                  &lt;p&gt;
                  If the argument is already a localized stream, it may be returned
                  as the result.                
                <param>
                    in InputStream to localize                    
                </param>
                <return>
                    a localized input stream                    
                </return>
                <see>
                    java.io.InputStream                    
                </see>
                <see>
                    java.io.BufferedReader#BufferedReader(java.io.Reader)                    
                </see>
                <see>
                    java.io.InputStreamReader#InputStreamReader(java.io.InputStream)                    
                </see>
                <deprecated>
                    As of JDK&nbsp;1.1, the preferred way to translate a byte
                      stream in the local encoding into a character stream in Unicode is via
                      the <code>InputStreamReader</code> and <code>BufferedReader</code>
                      classes.                    
                </deprecated>
            </javadoc>
            <method name="getLocalizedInputStream" type="InputStream" line="870">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="874">
                Creates a localized version of an output stream. This method
                  takes an &lt;code&gt;OutputStream&lt;/code&gt; and returns an
                  &lt;code&gt;OutputStream&lt;/code&gt; equivalent to the argument in all respects
                  except that it is localized: as Unicode characters are written to
                  the stream, they are automatically converted to the local
                  character set.
                  &lt;p&gt;
                  If the argument is already a localized stream, it may be returned
                  as the result.                
                <deprecated>
                    As of JDK&nbsp;1.1, the preferred way to translate a
                      Unicode character stream into a byte stream in the local encoding is via
                      the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and
                      <code>PrintWriter</code> classes.                    
                </deprecated>
                <param>
                    out OutputStream to localize                    
                </param>
                <return>
                    a localized output stream                    
                </return>
                <see>
                    java.io.OutputStream                    
                </see>
                <see>
                    java.io.BufferedWriter#BufferedWriter(java.io.Writer)                    
                </see>
                <see>
                    java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)                    
                </see>
                <see>
                    java.io.PrintWriter#PrintWriter(java.io.OutputStream)                    
                </see>
            </javadoc>
            <method name="getLocalizedOutputStream" type="OutputStream" line="898">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
        </class>
    </source>