<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.GenericArrayType"/>
        <import package="java.lang.reflect.Member"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.GenericDeclaration"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.TypeVariable"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.LinkedHashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="sun.misc.Unsafe"/>
        <import package="sun.reflect.ConstantPool"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.reflect.ReflectionFactory"/>
        <import package="sun.reflect.SignatureIterator"/>
        <import package="sun.reflect.generics.factory.CoreReflectionFactory"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.repository.ClassRepository"/>
        <import package="sun.reflect.generics.repository.MethodRepository"/>
        <import package="sun.reflect.generics.repository.ConstructorRepository"/>
        <import package="sun.reflect.generics.scope.ClassScope"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="java.lang.annotation.Annotation"/>
        <import package="sun.reflect.annotation"/>
        <class name="Class" line="43">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="java.io.Serializable"/>
            <implements interface="java.lang.reflect.GenericDeclaration"/>
            <implements interface="java.lang.reflect.Type"/>
            <implements interface="java.lang.reflect.AnnotatedElement"/>
            <javadoc line="43">
                Instances of the class {@code Class} represent classes and
                  interfaces in a running Java application.  An enum is a kind of
                  class and an annotation is a kind of interface.  Every array also
                  belongs to a class that is reflected as a {@code Class} object
                  that is shared by all arrays with the same element type and number
                  of dimensions.  The primitive Java types ({@code boolean},{@code byte}, {@code char}, {@code short},{@code int}, {@code long}, {@code float}, and{@code double}), and the keyword {@code void} are also
                  represented as {@code Class} objects.
                  &lt;p&gt; {@code Class} has no public constructor. Instead {@code Class}objects are constructed automatically by the Java Virtual Machine as classes
                  are loaded and by calls to the {@code defineClass} method in the class
                  loader.
                  &lt;p&gt; The following example uses a {@code Class} object to print the
                  class name of an object:
                  &lt;p&gt; &lt;blockquote&gt;&lt;pre&gt;
                  void printClassName(Object obj) {
                  System.out.println(&quot;The class of &quot; + obj +
                  &quot; is &quot; + obj.getClass().getName());
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; It is also possible to get the {@code Class} object for a named
                  type (or for void) using a class literal.  See Section 15.8.2 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  For example:
                  &lt;p&gt; &lt;blockquote&gt;{@code System.out.println(&quot;The name of class Foo is: &quot;+Foo.class.getName());}&lt;/blockquote&gt;                
                <param>
                    &lt;T&gt;
                      the type of the class modeled by this {@code Class}object.  For example, the type of {@code String.class} is {@codeClass&lt;String&gt;}.  Use {@code Class&lt;?&gt;} if the class being modeled is
                      unknown.                    
                </param>
                <author>
                    unascribed                    
                </author>
                <see>
                    java.lang.ClassLoader#defineClass(byte[],int,int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="ANNOTATION" type="int" line="75"/>
            <declaration name="ENUM" type="int" line="76"/>
            <declaration name="SYNTHETIC" type="int" line="77"/>
            <method name="registerNatives" type="void" line="78"/>
            <scope line="79"/>
            <method name="Class" type="constructor" line="82"/>
            <javadoc line="84">
                Converts the object to a string. The string representation is the
                  string &quot;class&quot; or &quot;interface&quot;, followed by a space, and then by the
                  fully qualified name of the class in the format returned by{@code getName}.  If this {@code Class} object represents a
                  primitive type, this method returns the name of the primitive type.  If
                  this {@code Class} object represents void this method returns
                  &quot;void&quot;.                
                <return>
                    a string representation of this class object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="93"/>
            <javadoc line="96">
                Returns the {@code Class} object associated with the class or
                  interface with the given string name.  Invoking this method is
                  equivalent to:
                  &lt;blockquote&gt;{@code Class.forName(className, true, currentLoader)}&lt;/blockquote&gt;
                  where {@code currentLoader} denotes the defining class loader of
                  the current class.
                  &lt;p&gt; For example, the following code fragment returns the
                  runtime {@code Class} descriptor for the class named{@code java.lang.Thread}:
                  &lt;blockquote&gt;{@code Class t = Class.forName(&quot;java.lang.Thread&quot;)}&lt;/blockquote&gt;
                  &lt;p&gt;
                  A call to {@code forName(&quot;X&quot;)} causes the class named{@code X} to be initialized.                
                <param>
                    className   the fully qualified name of the desired class.                    
                </param>
                <return>
                    the {@code Class} object for the class with the
                      specified name.                    
                </return>
                <exception>
                    LinkageError if the linkage fails                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails                    
                </exception>
                <exception>
                    ClassNotFoundException if the class cannot be located                    
                </exception>
            </javadoc>
            <method name="forName" type="Class&lt;?&gt;" line="116">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="119">
                Returns the {@code Class} object associated with the class or
                  interface with the given string name, using the given class loader.
                  Given the fully qualified name for a class or interface (in the same
                  format returned by {@code getName}) this method attempts to
                  locate, load, and link the class or interface.  The specified class
                  loader is used to load the class or interface.  If the parameter{@code loader} is null, the class is loaded through the bootstrap
                  class loader.  The class is initialized only if the{@code initialize} parameter is {@code true} and if it has
                  not been initialized earlier.
                  &lt;p&gt; If {@code name} denotes a primitive type or void, an attempt
                  will be made to locate a user-defined class in the unnamed package whose
                  name is {@code name}. Therefore, this method cannot be used to
                  obtain any of the {@code Class} objects representing primitive
                  types or void.
                  &lt;p&gt; If {@code name} denotes an array class, the component type of
                  the array class is loaded but not initialized.
                  &lt;p&gt; For example, in an instance method the expression:
                  &lt;blockquote&gt;{@code Class.forName(&quot;Foo&quot;)}&lt;/blockquote&gt;
                  is equivalent to:
                  &lt;blockquote&gt;{@code Class.forName(&quot;Foo&quot;, true, this.getClass().getClassLoader())}&lt;/blockquote&gt;
                  Note that this method throws errors related to loading, linking or
                  initializing as specified in Sections 12.2, 12.3 and 12.4 of &lt;em&gt;The
                  Java Language Specification&lt;/em&gt;.
                  Note that this method does not check whether the requested class
                  is accessible to its caller.
                  &lt;p&gt; If the {@code loader} is {@code null}, and a security
                  manager is present, and the caller&apos;s class loader is not null, then this
                  method calls the security manager&apos;s {@code checkPermission} method
                  with a {@code RuntimePermission(&quot;getClassLoader&quot;)} permission to
                  ensure it&apos;s ok to access the bootstrap class loader.                
                <param>
                    name       fully qualified name of the desired class                    
                </param>
                <param>
                    initialize whether the class must be initialized                    
                </param>
                <param>
                    loader     class loader from which the class must be loaded                    
                </param>
                <return>
                    class object representing the desired class                    
                </return>
                <exception>
                    LinkageError if the linkage fails                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails                    
                </exception>
                <exception>
                    ClassNotFoundException if the class cannot be located by
                      the specified class loader                    
                </exception>
                <see>
                    java.lang.Class#forName(String)                    
                </see>
                <see>
                    java.lang.ClassLoader                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="forName" type="Class&lt;?&gt;" line="162">
                <params>
                    <param name="name" type="String"/>
                    <param name="initialize" type="boolean"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <scope line="163">
                    <declaration name="sm" type="SecurityManager" line="164"/>
                    <scope line="165">
                        <declaration name="ccl" type="ClassLoader" line="166"/>
                        <scope line="167"/>
                    </scope>
                </scope>
            </method>
            <method name="forName0" type="Class&lt;?&gt;" line="174"/>
            <javadoc line="174">
                Called after security checks have been made.                
            </javadoc>
            <javadoc line="178">
                Creates a new instance of the class represented by this {@code Class}object.  The class is instantiated as if by a {@code new}expression with an empty argument list.  The class is initialized if it
                  has not already been initialized.
                  &lt;p&gt;Note that this method propagates any exception thrown by the
                  nullary constructor, including a checked exception.  Use of
                  this method effectively bypasses the compile-time exception
                  checking that would otherwise be performed by the compiler.
                  The {@link java.lang.reflect.Constructor#newInstance(java.lang.Object...)Constructor.newInstance} method avoids this problem by wrapping
                  any exception thrown by the constructor in a (checked) {@link java.lang.reflect.InvocationTargetException}.                
                <return>
                    a newly allocated instance of the class represented by this
                      object.                    
                </return>
                <exception>
                    IllegalAccessException  if the class or its nullary
                      constructor is not accessible.                    
                </exception>
                <exception>
                    InstantiationExceptionif this {@code Class} represents an abstract class,
                      an interface, an array class, a primitive type, or void;
                      or if the class has no nullary constructor;
                      or if the instantiation fails for some other reason.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization
                      provoked by this method fails.                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      creation of new instances of this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
            </javadoc>
            <method name="newInstance" type="T" line="208">
                <scope line="209"/>
            </method>
            <method name="newInstance0" type="T" line="214">
                <scope line="215">
                    <scope line="216"/>
                    <scope line="219">
                        <declaration name="empty" type="Class&amp;lt;?&amp;gt;[]" line="220"/>
                        <declaration name="c" type="Constructor&amp;lt;T&amp;gt;" line="221"/>
                        <anonymous_class line="222">
                            <method name="run" type="Void" line="223"/>
                        </anonymous_class>
                    </scope>
                    <scope line="231"/>
                </scope>
                <declaration name="tmpConstructor" type="Constructor&amp;lt;T&amp;gt;" line="235"/>
                <declaration name="modifiers" type="int" line="236"/>
                <scope line="237">
                    <declaration name="caller" type="Class&amp;lt;?&amp;gt;" line="238"/>
                    <scope line="239"/>
                </scope>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <declaration name="cachedConstructor" type="Constructor&amp;lt;T&amp;gt;" line="252"/>
            <declaration name="newInstanceCallerCache" type="Class&amp;lt;?&amp;gt;" line="253"/>
            <method name="isInstance" type="boolean" line="254"/>
            <javadoc line="254">
                Determines if the specified {@code Object} is assignment-compatible
                  with the object represented by this {@code Class}.  This method is
                  the dynamic equivalent of the Java language {@code instanceof}operator. The method returns {@code true} if the specified{@code Object} argument is non-null and can be cast to the
                  reference type represented by this {@code Class} object without
                  raising a {@code ClassCastException.} It returns {@code false}otherwise.
                  &lt;p&gt; Specifically, if this {@code Class} object represents a
                  declared class, this method returns {@code true} if the specified{@code Object} argument is an instance of the represented class (or
                  of any of its subclasses); it returns {@code false} otherwise. If
                  this {@code Class} object represents an array class, this method
                  returns {@code true} if the specified {@code Object} argument
                  can be converted to an object of the array class by an identity
                  conversion or by a widening reference conversion; it returns{@code false} otherwise. If this {@code Class} object
                  represents an interface, this method returns {@code true} if the
                  class or any superclass of the specified {@code Object} argument
                  implements this interface; it returns {@code false} otherwise. If
                  this {@code Class} object represents a primitive type, this method
                  returns {@code false}.                
                <param>
                    obj the object to check                    
                </param>
                <return>
                    true if {@code obj} is an instance of this class                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isAssignableFrom" type="boolean" line="277"/>
            <javadoc line="277">
                Determines if the class or interface represented by this{@code Class} object is either the same as, or is a superclass or
                  superinterface of, the class or interface represented by the specified{@code Class} parameter. It returns {@code true} if so;
                  otherwise it returns {@code false}. If this {@code Class}object represents a primitive type, this method returns{@code true} if the specified {@code Class} parameter is
                  exactly this {@code Class} object; otherwise it returns{@code false}.
                  &lt;p&gt; Specifically, this method tests whether the type represented by the
                  specified {@code Class} parameter can be converted to the type
                  represented by this {@code Class} object via an identity conversion
                  or via a widening reference conversion. See &lt;em&gt;The Java Language
                  Specification&lt;/em&gt;, sections 5.1.1 and 5.1.4 , for details.                
                <param>
                    cls the {@code Class} object to be checked                    
                </param>
                <return>
                    the {@code boolean} value indicating whether objects of the
                      type {@code cls} can be assigned to objects of this class                    
                </return>
                <exception>
                    NullPointerException if the specified Class parameter is
                      null.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isInterface" type="boolean" line="295"/>
            <javadoc line="295">
                Determines if the specified {@code Class} object represents an
                  interface type.                
                <return>
                    {@code true} if this object represents an interface;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isArray" type="boolean" line="301"/>
            <javadoc line="301">
                Determines if this {@code Class} object represents an array class.                
                <return>
                    {@code true} if this object represents an array class;{@code false} otherwise.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isPrimitive" type="boolean" line="307"/>
            <javadoc line="307">
                Determines if the specified {@code Class} object represents a
                  primitive type.
                  &lt;p&gt; There are nine predefined {@code Class} objects to represent
                  the eight primitive types and void.  These are created by the Java
                  Virtual Machine, and have the same names as the primitive types that
                  they represent, namely {@code boolean}, {@code byte},{@code char}, {@code short}, {@code int},{@code long}, {@code float}, and {@code double}.
                  &lt;p&gt; These objects may only be accessed via the following public static
                  final variables, and are the only {@code Class} objects for which
                  this method returns {@code true}.                
                <return>
                    true if and only if this class represents a primitive type                    
                </return>
                <see>
                    java.lang.Boolean#TYPE                    
                </see>
                <see>
                    java.lang.Character#TYPE                    
                </see>
                <see>
                    java.lang.Byte#TYPE                    
                </see>
                <see>
                    java.lang.Short#TYPE                    
                </see>
                <see>
                    java.lang.Integer#TYPE                    
                </see>
                <see>
                    java.lang.Long#TYPE                    
                </see>
                <see>
                    java.lang.Float#TYPE                    
                </see>
                <see>
                    java.lang.Double#TYPE                    
                </see>
                <see>
                    java.lang.Void#TYPE                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="330">
                Returns true if this {@code Class} object represents an annotation
                  type.  Note that if this method returns true, {@link #isInterface()}would also return true, as all annotation types are also interfaces.                
                <return>
                    {@code true} if this class object represents an annotation
                      type; {@code false} otherwise                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnnotation" type="boolean" line="337"/>
            <javadoc line="340">
                Returns {@code true} if this class is a synthetic class;
                  returns {@code false} otherwise.                
                <return>
                    {@code true} if and only if this class is a synthetic class as
                      defined by the Java Language Specification.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSynthetic" type="boolean" line="347"/>
            <javadoc line="350">
                Returns the  name of the entity (class, interface, array class,
                  primitive type, or void) represented by this {@code Class} object,
                  as a {@code String}.
                  &lt;p&gt; If this class object represents a reference type that is not an
                  array type then the binary name of the class is returned, as specified
                  by
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  &lt;p&gt; If this class object represents a primitive type or void, then the
                  name returned is a {@code String} equal to the Java language
                  keyword corresponding to the primitive type or void.
                  &lt;p&gt; If this class object represents a class of arrays, then the internal
                  form of the name consists of the name of the element type preceded by
                  one or more &apos;{@code [}&apos; characters representing the depth of the array
                  nesting.  The encoding of element type names is as follows:
                  &lt;blockquote&gt;&lt;table summary=&quot;Element types and encodings&quot;&gt;
                  &lt;tr&gt;&lt;th&gt; Element Type &lt;th&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;th&gt; Encoding
                  &lt;tr&gt;&lt;td&gt; boolean      &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; Z
                  &lt;tr&gt;&lt;td&gt; byte         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; B
                  &lt;tr&gt;&lt;td&gt; char         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; C
                  &lt;tr&gt;&lt;td&gt; class or interface
                  &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; L&lt;i&gt;classname&lt;/i&gt;;
                  &lt;tr&gt;&lt;td&gt; double       &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; D
                  &lt;tr&gt;&lt;td&gt; float        &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; F
                  &lt;tr&gt;&lt;td&gt; int          &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; I
                  &lt;tr&gt;&lt;td&gt; long         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; J
                  &lt;tr&gt;&lt;td&gt; short        &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; S
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The class or interface name &lt;i&gt;classname&lt;/i&gt; is the binary name of
                  the class specified above.
                  &lt;p&gt; Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  String.class.getName()
                  returns &quot;java.lang.String&quot;
                  byte.class.getName()
                  returns &quot;byte&quot;
                  (new Object[3]).getClass().getName()
                  returns &quot;[Ljava.lang.Object;&quot;
                  (new int[3][4][5][6][7][8][9]).getClass().getName()
                  returns &quot;[[[[[[[I&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the name of the class or interface
                      represented by this object.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="394">
                <declaration name="name" type="String" line="395"/>
            </method>
            <declaration name="name" type="String" line="399"/>
            <method name="getName0" type="String" line="400"/>
            <javadoc line="401">
                Returns the class loader for the class.  Some implementations may use
                  null to represent the bootstrap class loader. This method will return
                  null in such implementations if this class was loaded by the bootstrap
                  class loader.
                  &lt;p&gt; If a security manager is present, and the caller&apos;s class loader is
                  not null and the caller&apos;s class loader is not the same as or an ancestor of
                  the class loader for the class whose class loader is requested, then
                  this method calls the security manager&apos;s {@code checkPermission}method with a {@code RuntimePermission(&quot;getClassLoader&quot;)}permission to ensure it&apos;s ok to access the class loader for the class.
                  &lt;p&gt;If this object
                  represents a primitive type or void, null is returned.                
                <return>
                    the class loader that loaded the class or interface
                      represented by this object.                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its{@code checkPermission} method denies
                      access to the class loader for the class.                    
                </throws>
                <see>
                    java.lang.ClassLoader                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="420">
                <declaration name="cl" type="ClassLoader" line="421"/>
                <declaration name="sm" type="SecurityManager" line="423"/>
                <scope line="424">
                    <declaration name="ccl" type="ClassLoader" line="425"/>
                    <scope line="426"/>
                </scope>
            </method>
            <method name="getClassLoader0" type="ClassLoader" line="432"/>
            <javadoc line="433">
                Returns an array of {@code TypeVariable} objects that represent the
                  type variables declared by the generic declaration represented by this{@code GenericDeclaration} object, in declaration order.  Returns an
                  array of length 0 if the underlying generic declaration declares no type
                  variables.                
                <return>
                    an array of {@code TypeVariable} objects that represent
                      the type variables declared by this generic declaration                    
                </return>
                <throws>
                    java.lang.reflect.GenericSignatureFormatError if the generic
                      signature of this generic declaration does not conform to
                      the format specified in
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTypeParameters" type="TypeVariable&lt;Class&lt;T&gt;&gt;[]" line="446"/>
            <method name="getSuperclass" type="Class&lt;? super T&gt;" line="450"/>
            <javadoc line="450">
                Returns the {@code Class} representing the superclass of the entity
                  (class, interface, primitive type or void) represented by this{@code Class}.  If this {@code Class} represents either the{@code Object} class, an interface, a primitive type, or void, then
                  null is returned.  If this object represents an array class then the{@code Class} object representing the {@code Object} class is
                  returned.                
                <return>
                    the superclass of the class represented by this object.                    
                </return>
            </javadoc>
            <javadoc line="458">
                Returns the {@code Type} representing the direct superclass of
                  the entity (class, interface, primitive type or void) represented by
                  this {@code Class}.
                  &lt;p&gt;If the superclass is a parameterized type, the {@code Type}object returned must accurately reflect the actual type
                  parameters used in the source code. The parameterized type
                  representing the superclass is created if it had not been
                  created before. See the declaration of {@link java.lang.reflect.ParameterizedType ParameterizedType} for the
                  semantics of the creation process for parameterized types.  If
                  this {@code Class} represents either the {@code Object}class, an interface, a primitive type, or void, then null is
                  returned.  If this object represents an array class then the{@code Class} object representing the {@code Object} class is
                  returned.                
                <throws>
                    java.lang.reflect.GenericSignatureFormatError if the generic
                      class signature does not conform to the format specified in
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;                    
                </throws>
                <throws>
                    TypeNotPresentException if the generic superclass
                      refers to a non-existent type declaration                    
                </throws>
                <throws>
                    java.lang.reflect.MalformedParameterizedTypeException if the
                      generic superclass refers to a parameterized type that cannot be
                      instantiated  for any reason                    
                </throws>
                <return>
                    the superclass of the class represented by this object                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericSuperclass" type="Type" line="481">
                <scope line="482"/>
            </method>
            <javadoc line="488">
                Gets the package for this class.  The class loader of this class is used
                  to find the package.  If the class was loaded by the bootstrap class
                  loader the set of packages loaded from CLASSPATH is searched to find the
                  package of the class. Null is returned if no package object was created
                  by the class loader of this class.
                  &lt;p&gt; Packages have attributes for versions and specifications only if the
                  information was defined in the manifests that accompany the classes, and
                  if the class loader created the package instance with the attributes
                  from the manifest.                
                <return>
                    the package of the class, or null if no package
                      information is available from the archive or codebase.                    
                </return>
            </javadoc>
            <method name="getPackage" type="Package" line="501"/>
            <method name="getInterfaces" type="Class&lt;?&gt;[]" line="504"/>
            <javadoc line="504">
                Determines the interfaces implemented by the class or interface
                  represented by this object.
                  &lt;p&gt; If this object represents a class, the return value is an array
                  containing objects representing all interfaces implemented by the
                  class. The order of the interface objects in the array corresponds to
                  the order of the interface names in the {@code implements} clause
                  of the declaration of the class represented by this object. For
                  example, given the declaration:
                  &lt;blockquote&gt;{@code} class Shimmer implements FloorWax, DessertTopping 
                  ... }}
                  &lt;/blockquote&gt;
                  suppose the value of {@code s} is an instance of{@code Shimmer}; the value of the expression:
                  &lt;blockquote&gt;{@code s.getClass().getInterfaces()[0]}&lt;/blockquote&gt;
                  is the {@code Class} object that represents interface{@code FloorWax}; and the value of:
                  &lt;blockquote&gt;{@code s.getClass().getInterfaces()[1]}&lt;/blockquote&gt;
                  is the {@code Class} object that represents interface{@code DessertTopping}.
                  &lt;p&gt; If this object represents an interface, the array contains objects
                  representing all interfaces extended by the interface. The order of the
                  interface objects in the array corresponds to the order of the interface
                  names in the {@code extends} clause of the declaration of the
                  interface represented by this object.
                  &lt;p&gt; If this object represents a class or interface that implements no
                  interfaces, the method returns an array of length 0.
                  &lt;p&gt; If this object represents a primitive type or void, the method
                  returns an array of length 0.                
                <return>
                    an array of interfaces implemented by this class.                    
                </return>
            </javadoc>
            <javadoc line="533">
                Returns the {@code Type}s representing the interfaces
                  directly implemented by the class or interface represented by
                  this object.
                  &lt;p&gt;If a superinterface is a parameterized type, the{@code Type} object returned for it must accurately reflect
                  the actual type parameters used in the source code. The
                  parameterized type representing each superinterface is created
                  if it had not been created before. See the declaration of{@link java.lang.reflect.ParameterizedType ParameterizedType}for the semantics of the creation process for parameterized
                  types.
                  &lt;p&gt; If this object represents a class, the return value is an
                  array containing objects representing all interfaces
                  implemented by the class. The order of the interface objects in
                  the array corresponds to the order of the interface names in
                  the {@code implements} clause of the declaration of the class
                  represented by this object.  In the case of an array class, the
                  interfaces {@code Cloneable} and {@code Serializable} are
                  returned in that order.
                  &lt;p&gt;If this object represents an interface, the array contains
                  objects representing all interfaces directly extended by the
                  interface.  The order of the interface objects in the array
                  corresponds to the order of the interface names in the{@code extends} clause of the declaration of the interface
                  represented by this object.
                  &lt;p&gt;If this object represents a class or interface that
                  implements no interfaces, the method returns an array of length
                  0.
                  &lt;p&gt;If this object represents a primitive type or void, the
                  method returns an array of length 0.                
                <throws>
                    java.lang.reflect.GenericSignatureFormatErrorif the generic class signature does not conform to the format
                      specified in
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;                    
                </throws>
                <throws>
                    TypeNotPresentException if any of the generic
                      superinterfaces refers to a non-existent type declaration                    
                </throws>
                <throws>
                    java.lang.reflect.MalformedParameterizedTypeExceptionif any of the generic superinterfaces refer to a parameterized
                      type that cannot be instantiated for any reason                    
                </throws>
                <return>
                    an array of interfaces implemented by this class                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericInterfaces" type="Type[]" line="570"/>
            <method name="getComponentType" type="Class&lt;?&gt;" line="574"/>
            <javadoc line="574">
                Returns the {@code Class} representing the component type of an
                  array.  If this class does not represent an array class this method
                  returns null.                
                <return>
                    the {@code Class} representing the component type of this
                      class if this class is an array                    
                </return>
                <see>
                    java.lang.reflect.Array                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getModifiers" type="int" line="584"/>
            <javadoc line="584">
                Returns the Java language modifiers for this class or interface, encoded
                  in an integer. The modifiers consist of the Java Virtual Machine&apos;s
                  constants for {@code public}, {@code protected},{@code private}, {@code final}, {@code static},{@code abstract} and {@code interface}; they should be decoded
                  using the methods of class {@code Modifier}.
                  &lt;p&gt; If the underlying class is an array class, then its{@code public}, {@code private} and {@code protected}modifiers are the same as those of its component type.  If this{@code Class} represents a primitive type or void, its{@code public} modifier is always {@code true}, and its{@code protected} and {@code private} modifiers are always{@code false}. If this object represents an array class, a
                  primitive type or void, then its {@code final} modifier is always{@code true} and its interface modifier is always{@code false}. The values of its other modifiers are not determined
                  by this specification.
                  &lt;p&gt; The modifier encodings are defined in &lt;em&gt;The Java Virtual Machine
                  Specification&lt;/em&gt;, table 4.1.                
                <return>
                    the {@code int} representing the modifiers for this class                    
                </return>
                <see>
                    java.lang.reflect.Modifier                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getSigners" type="Object[]" line="599"/>
            <javadoc line="599">
                Gets the signers of this class.                
                <return>
                    the signers of this class, or null if there are no signers.  In
                      particular, this method returns null if this object represents
                      a primitive type or void.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSigners" type="void" line="607"/>
            <javadoc line="607">
                Set the signers of this class.                
            </javadoc>
            <javadoc line="611">
                If this {@code Class} object represents a local or anonymous
                  class within a method, returns a {@link java.lang.reflect.Method Method} object representing the
                  immediately enclosing method of the underlying class. Returns{@code null} otherwise.
                  In particular, this method returns {@code null} if the underlying
                  class is a local or anonymous class immediately enclosed by a type
                  declaration, instance initializer or static initializer.                
                <return>
                    the immediately enclosing method of the underlying class, if
                      that class is a local or anonymous class; otherwise {@code null}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getEnclosingMethod" type="Method" line="622">
                <declaration name="enclosingInfo" type="EnclosingMethodInfo" line="623"/>
                <scope line="625">
                    <declaration name="typeInfo" type="MethodRepository" line="627"/>
                    <declaration name="returnType" type="Class&amp;lt;?&amp;gt;" line="628"/>
                    <declaration name="parameterTypes" type="Type[]" line="629"/>
                    <declaration name="parameterClasses" type="Class&amp;lt;?&amp;gt;[]" line="630"/>
                    <scope line="632">
                        <scope line="633">
                            <declaration name="candidateParamClasses" type="Class&amp;lt;?&amp;gt;[]" line="634"/>
                            <scope line="635">
                                <declaration name="matches" type="boolean" line="636"/>
                                <scope line="637">
                                    <scope line="638"/>
                                </scope>
                                <scope line="643"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getEnclosingMethod0" type="Object[]" line="652"/>
            <method name="getEnclosingMethodInfo" type="EnclosingMethodInfo" line="653">
                <declaration name="enclosingInfo" type="Object[]" line="654"/>
                <scope line="656"/>
            </method>
            <class name="EnclosingMethodInfo" line="660">
                <declaration name="enclosingClass" type="Class&amp;lt;?&amp;gt;" line="661"/>
                <declaration name="name" type="String" line="662"/>
                <declaration name="descriptor" type="String" line="663"/>
                <method name="EnclosingMethodInfo" type="constructor" line="664">
                    <params>
                        <param name="enclosingInfo" type="Object[]"/>
                    </params>
                    <scope line="666"/>
                    <scope line="673"/>
                </method>
                <method name="isPartial" type="boolean" line="677"/>
                <method name="isConstructor" type="boolean" line="680"/>
                <method name="isMethod" type="boolean" line="683"/>
                <method name="getEnclosingClass" type="Class&lt;?&gt;" line="686"/>
                <method name="getName" type="String" line="689"/>
                <method name="getDescriptor" type="String" line="692"/>
            </class>
            <method name="toClass" type="Class&lt;?&gt;" line="696">
                <params>
                    <param name="o" type="Type"/>
                </params>
            </method>
            <javadoc line="700">
                If this {@code Class} object represents a local or anonymous
                  class within a constructor, returns a {@link java.lang.reflect.Constructor Constructor} object representing
                  the immediately enclosing constructor of the underlying
                  class. Returns {@code null} otherwise.  In particular, this
                  method returns {@code null} if the underlying class is a local
                  or anonymous class immediately enclosed by a type declaration,
                  instance initializer or static initializer.                
                <return>
                    the immediately enclosing constructor of the underlying class, if
                      that class is a local or anonymous class; otherwise {@code null}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getEnclosingConstructor" type="Constructor&lt;?&gt;" line="712">
                <declaration name="enclosingInfo" type="EnclosingMethodInfo" line="713"/>
                <scope line="715">
                    <declaration name="typeInfo" type="ConstructorRepository" line="717"/>
                    <declaration name="parameterTypes" type="Type[]" line="718"/>
                    <declaration name="parameterClasses" type="Class&amp;lt;?&amp;gt;[]" line="719"/>
                    <scope line="721">
                        <declaration name="candidateParamClasses" type="Class&amp;lt;?&amp;gt;[]" line="722"/>
                        <scope line="723">
                            <declaration name="matches" type="boolean" line="724"/>
                            <scope line="725">
                                <scope line="726"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getDeclaringClass" type="Class&lt;?&gt;" line="737"/>
            <javadoc line="737">
                If the class or interface represented by this {@code Class} object
                  is a member of another class, returns the {@code Class} object
                  representing the class in which it was declared.  This method returns
                  null if this class or interface is not a member of any other class.  If
                  this {@code Class} object represents an array class, a primitive
                  type, or void,then this method returns null.                
                <return>
                    the declaring class for this class                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="748">
                Returns the immediately enclosing class of the underlying
                  class.  If the underlying class is a top level class this
                  method returns {@code null}.                
                <return>
                    the immediately enclosing class of the underlying class                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getEnclosingClass" type="Class&lt;?&gt;" line="755">
                <declaration name="enclosingInfo" type="EnclosingMethodInfo" line="756"/>
                <scope line="757"/>
                <scope line="760">
                    <declaration name="enclosingClass" type="Class&amp;lt;?&amp;gt;" line="761"/>
                </scope>
            </method>
            <javadoc line="766">
                Returns the simple name of the underlying class as given in the
                  source code. Returns an empty string if the underlying class is
                  anonymous.
                  &lt;p&gt;The simple name of an array is the simple name of the
                  component type with &quot;[]&quot; appended.  In particular the simple
                  name of an array whose component type is anonymous is &quot;[]&quot;.                
                <return>
                    the simple name of the underlying class                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSimpleName" type="String" line="776">
                <declaration name="simpleName" type="String" line="778"/>
                <scope line="779"/>
                <declaration name="length" type="int" line="783"/>
                <declaration name="index" type="int" line="785"/>
            </method>
            <javadoc line="789">
                Character.isDigit answers {@code true} to some non-ascii
                  digits.  This one does not.                
            </javadoc>
            <method name="isAsciiDigit" type="boolean" line="793">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="796">
                Returns the canonical name of the underlying class as
                  defined by the Java Language Specification.  Returns null if
                  the underlying class does not have a canonical name (i.e., if
                  it is a local or anonymous class or an array whose component
                  type does not have a canonical name).                
                <return>
                    the canonical name of the underlying class if it exists, and{@code null} otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCanonicalName" type="String" line="805">
                <scope line="806">
                    <declaration name="canonicalName" type="String" line="807"/>
                </scope>
                <declaration name="enclosingClass" type="Class&amp;lt;?&amp;gt;" line="812"/>
                <scope line="813"/>
                <scope line="816">
                    <declaration name="enclosingName" type="String" line="817"/>
                </scope>
            </method>
            <javadoc line="822">
                Returns {@code true} if and only if the underlying class
                  is an anonymous class.                
                <return>
                    {@code true} if and only if this class is an anonymous class.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnonymousClass" type="boolean" line="828"/>
            <javadoc line="831">
                Returns {@code true} if and only if the underlying class
                  is a local class.                
                <return>
                    {@code true} if and only if this class is a local class.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLocalClass" type="boolean" line="837"/>
            <javadoc line="840">
                Returns {@code true} if and only if the underlying class
                  is a member class.                
                <return>
                    {@code true} if and only if this class is a member class.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isMemberClass" type="boolean" line="846"/>
            <javadoc line="849">
                Returns the &quot;simple binary name&quot; of the underlying class, i.e.,
                  the binary name without the leading enclosing class name.
                  Returns {@code null} if the underlying class is a top level
                  class.                
            </javadoc>
            <method name="getSimpleBinaryName" type="String" line="855">
                <declaration name="enclosingClass" type="Class&amp;lt;?&amp;gt;" line="856"/>
                <scope line="858"/>
                <scope line="861"/>
            </method>
            <javadoc line="865">
                Returns {@code true} if this is a local class or an anonymous
                  class.  Returns {@code false} otherwise.                
            </javadoc>
            <method name="isLocalOrAnonymousClass" type="boolean" line="869"/>
            <javadoc line="872">
                Returns an array containing {@code Class} objects representing all
                  the public classes and interfaces that are members of the class
                  represented by this {@code Class} object.  This includes public
                  class and interface members inherited from superclasses and public class
                  and interface members declared by the class.  This method returns an
                  array of length 0 if this {@code Class} object has no public member
                  classes or interfaces.  This method also returns an array of length 0 if
                  this {@code Class} object represents a primitive type, an array
                  class, or void.                
                <return>
                    the array of {@code Class} objects representing the public
                      members of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} method
                      denies access to the classes within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getClasses" type="Class&lt;?&gt;[]" line="896">
                <anonymous_class line="898">
                    <method name="run" type="Class[]" line="899">
                        <declaration name="list" type="List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="900"/>
                        <declaration name="currentClass" type="Class&amp;lt;?&amp;gt;" line="901"/>
                        <scope line="902">
                            <declaration name="members" type="Class&amp;lt;?&amp;gt;[]" line="903"/>
                            <scope line="904">
                                <scope line="905"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="916">
                Returns an array containing {@code Field} objects reflecting all
                  the accessible public fields of the class or interface represented by
                  this {@code Class} object.  The elements in the array returned are
                  not sorted and are not in any particular order.  This method returns an
                  array of length 0 if the class or interface has no accessible public
                  fields, or if it represents an array class, a primitive type, or void.
                  &lt;p&gt; Specifically, if this {@code Class} object represents a class,
                  this method returns the public fields of this class and of all its
                  superclasses.  If this {@code Class} object represents an
                  interface, this method returns the fields of this interface and of all
                  its superinterfaces.
                  &lt;p&gt; The implicit length field for array class is not reflected by this
                  method. User code should use the methods of class {@code Array} to
                  manipulate arrays.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.                
                <return>
                    the array of {@code Field} objects representing the
                      public fields                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the fields within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getFields" type="Field[]" line="946"/>
            <javadoc line="950">
                Returns an array containing {@code Method} objects reflecting all
                  the public &lt;em&gt;member&lt;/em&gt; methods of the class or interface represented
                  by this {@code Class} object, including those declared by the class
                  or interface and those inherited from superclasses and
                  superinterfaces.  Array classes return all the (public) member methods
                  inherited from the {@code Object} class.  The elements in the array
                  returned are not sorted and are not in any particular order.  This
                  method returns an array of length 0 if this {@code Class} object
                  represents a class or interface that has no public member methods, or if
                  this {@code Class} object represents a primitive type or void.
                  &lt;p&gt; The class initialization method {@code &lt;clinit&gt;} is not
                  included in the returned array. If the class declares multiple public
                  member methods with the same parameter types, they are all included in
                  the returned array.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.4.                
                <return>
                    the array of {@code Method} objects representing the
                      public methods of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the methods within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMethods" type="Method[]" line="980"/>
            <javadoc line="984">
                Returns an array containing {@code Constructor} objects reflecting
                  all the public constructors of the class represented by this{@code Class} object.  An array of length 0 is returned if the
                  class has no public constructors, or if the class is an array class, or
                  if the class reflects a primitive type or void.
                  Note that while this method returns an array of {@codeConstructor&lt;T&gt;} objects (that is an array of constructors from
                  this class), the return type of this method is {@codeConstructor&lt;?&gt;[]} and &lt;em&gt;not&lt;/em&gt; {@code Constructor&lt;T&gt;[]} as
                  might be expected.  This less informative return type is
                  necessary since after being returned from this method, the
                  array could be modified to hold {@code Constructor} objects for
                  different classes, which would violate the type guarantees of{@code Constructor&lt;T&gt;[]}.                
                <return>
                    the array of {@code Constructor} objects representing the
                      public constructors of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the constructors within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getConstructors" type="Constructor&lt;?&gt;[]" line="1009"/>
            <javadoc line="1013">
                Returns a {@code Field} object that reflects the specified public
                  member field of the class or interface represented by this{@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired field.
                  &lt;p&gt; The field to be reflected is determined by the algorithm that
                  follows.  Let C be the class represented by this object:
                  &lt;OL&gt;
                  &lt;LI&gt; If C declares a public field with the name specified, that is the
                  field to be reflected.&lt;/LI&gt;
                  &lt;LI&gt; If no field was found in step 1 above, this algorithm is applied
                  recursively to each direct superinterface of C. The direct
                  superinterfaces are searched in the order they were declared.&lt;/LI&gt;
                  &lt;LI&gt; If no field was found in steps 1 and 2 above, and C has a
                  superclass S, then this algorithm is invoked recursively upon S.
                  If C has no superclass, then a {@code NoSuchFieldException}is thrown.&lt;/LI&gt;
                  &lt;/OL&gt;
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.                
                <param>
                    name the field name                    
                </param>
                <return>
                    the {@code Field} object of this class specified by{@code name}                    
                </return>
                <exception>
                    NoSuchFieldException if a field with the specified name is
                      not found.                    
                </exception>
                <exception>
                    NullPointerException if {@code name} is {@code null}                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the field
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getField" type="Field" line="1046">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="field" type="Field" line="1048"/>
                <scope line="1049"/>
            </method>
            <javadoc line="1054">
                Returns a {@code Method} object that reflects the specified public
                  member method of the class or interface represented by this{@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method&apos;s formal parameter types, in declared
                  order. If {@code parameterTypes} is {@code null}, it is
                  treated as if it were an empty array.
                  &lt;p&gt; If the {@code name} is &quot;{@code &lt;init&gt;};&quot;or &quot;{@code &lt;clinit&gt;}&quot; a{@code NoSuchMethodException} is raised. Otherwise, the method to
                  be reflected is determined by the algorithm that follows.  Let C be the
                  class represented by this object:
                  &lt;OL&gt;
                  &lt;LI&gt; C is searched for any &lt;I&gt;matching methods&lt;/I&gt;. If no matching
                  method is found, the algorithm of step 1 is invoked recursively on
                  the superclass of C.&lt;/LI&gt;
                  &lt;LI&gt; If no method was found in step 1 above, the superinterfaces of C
                  are searched for a matching method. If any such method is found, it
                  is reflected.&lt;/LI&gt;
                  &lt;/OL&gt;
                  To find a matching method in a class C:&amp;nbsp; If C declares exactly one
                  public method with the specified name and exactly the same formal
                  parameter types, that is the method reflected. If more than one such
                  method is found in C, and one of these methods has a return type that is
                  more specific than any of the others, that method is reflected;
                  otherwise one of the methods is chosen arbitrarily.
                  &lt;p&gt;Note that there may be more than one matching method in a
                  class because while the Java language forbids a class to
                  declare multiple methods with the same signature but different
                  return types, the Java virtual machine does not.  This
                  increased flexibility in the virtual machine can be used to
                  implement various language features.  For example, covariant
                  returns can be implemented with {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge
                  method and the method being overridden would have the same
                  signature but different return types.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.4.                
                <param>
                    name the name of the method                    
                </param>
                <param>
                    parameterTypes the list of parameters                    
                </param>
                <return>
                    the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}                    
                </return>
                <exception>
                    NoSuchMethodException if a matching method is not found
                      or if the name is &quot;&amp;lt;init&amp;gt;&quot;or &quot;&amp;lt;clinit&amp;gt;&quot;.                    
                </exception>
                <exception>
                    NullPointerException if {@code name} is {@code null}                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the method
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMethod" type="Method" line="1104">
                <params>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="method" type="Method" line="1106"/>
                <scope line="1107"/>
            </method>
            <javadoc line="1112">
                Returns a {@code Constructor} object that reflects the specified
                  public constructor of the class represented by this {@code Class}object. The {@code parameterTypes} parameter is an array of{@code Class} objects that identify the constructor&apos;s formal
                  parameter types, in declared order.
                  If this {@code Class} object represents an inner class
                  declared in a non-static context, the formal parameter types
                  include the explicit enclosing instance as the first parameter.
                  &lt;p&gt; The constructor to reflect is the public constructor of the class
                  represented by this {@code Class} object whose formal parameter
                  types match those specified by {@code parameterTypes}.                
                <param>
                    parameterTypes the parameter array                    
                </param>
                <return>
                    the {@code Constructor} object of the public constructor that
                      matches the specified {@code parameterTypes}                    
                </return>
                <exception>
                    NoSuchMethodException if a matching method is not found.                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.PUBLIC)} denies
                      access to the constructor
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getConstructor" type="Constructor&lt;T&gt;" line="1138">
                <params>
                    <param name="parameterTypes" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="1142">
                Returns an array of {@code Class} objects reflecting all the
                  classes and interfaces declared as members of the class represented by
                  this {@code Class} object. This includes public, protected, default
                  (package) access, and private classes and interfaces declared by the
                  class, but excludes inherited classes and interfaces.  This method
                  returns an array of length 0 if the class declares no classes or
                  interfaces as members, or if this {@code Class} object represents a
                  primitive type, an array class, or void.                
                <return>
                    the array of {@code Class} objects representing all the
                      declared members of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared classes within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredClasses" type="Class&lt;?&gt;[]" line="1165"/>
            <javadoc line="1169">
                Returns an array of {@code Field} objects reflecting all the fields
                  declared by the class or interface represented by this{@code Class} object. This includes public, protected, default
                  (package) access, and private fields, but excludes inherited fields.
                  The elements in the array returned are not sorted and are not in any
                  particular order.  This method returns an array of length 0 if the class
                  or interface declares no fields, or if this {@code Class} object
                  represents a primitive type, an array class, or void.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.                
                <return>
                    the array of {@code Field} objects representing all the
                      declared fields of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared fields within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredFields" type="Field[]" line="1192"/>
            <javadoc line="1196">
                Returns an array of {@code Method} objects reflecting all the
                  methods declared by the class or interface represented by this{@code Class} object. This includes public, protected, default
                  (package) access, and private methods, but excludes inherited methods.
                  The elements in the array returned are not sorted and are not in any
                  particular order.  This method returns an array of length 0 if the class
                  or interface declares no methods, or if this {@code Class} object
                  represents a primitive type, an array class, or void.  The class
                  initialization method {@code &lt;clinit&gt;} is not included in the
                  returned array. If the class declares multiple public member methods
                  with the same parameter types, they are all included in the returned
                  array.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, section 8.2.                
                <return>
                    the array of {@code Method} objects representing all the
                      declared methods of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared methods within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredMethods" type="Method[]" line="1223"/>
            <javadoc line="1227">
                Returns an array of {@code Constructor} objects reflecting all the
                  constructors declared by the class represented by this{@code Class} object. These are public, protected, default
                  (package) access, and private constructors.  The elements in the array
                  returned are not sorted and are not in any particular order.  If the
                  class has a default constructor, it is included in the returned array.
                  This method returns an array of length 0 if this {@code Class}object represents an interface, a primitive type, an array class, or
                  void.
                  &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, section 8.2.                
                <return>
                    the array of {@code Constructor} objects representing all the
                      declared constructors of this class                    
                </return>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared constructors within this class
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredConstructors" type="Constructor&lt;?&gt;[]" line="1250"/>
            <javadoc line="1254">
                Returns a {@code Field} object that reflects the specified declared
                  field of the class or interface represented by this {@code Class}object. The {@code name} parameter is a {@code String} that
                  specifies the simple name of the desired field.  Note that this method
                  will not reflect the {@code length} field of an array class.                
                <param>
                    name the name of the field                    
                </param>
                <return>
                    the {@code Field} object for the specified field in this
                      class                    
                </return>
                <exception>
                    NoSuchFieldException if a field with the specified name is
                      not found.                    
                </exception>
                <exception>
                    NullPointerException if {@code name} is {@code null}                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared field
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredField" type="Field" line="1277">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="field" type="Field" line="1279"/>
                <scope line="1280"/>
            </method>
            <javadoc line="1285">
                Returns a {@code Method} object that reflects the specified
                  declared method of the class or interface represented by this{@code Class} object. The {@code name} parameter is a{@code String} that specifies the simple name of the desired
                  method, and the {@code parameterTypes} parameter is an array of{@code Class} objects that identify the method&apos;s formal parameter
                  types, in declared order.  If more than one method with the same
                  parameter types is declared in a class, and one of these methods has a
                  return type that is more specific than any of the others, that method is
                  returned; otherwise one of the methods is chosen arbitrarily.  If the
                  name is &quot;&amp;lt;init&amp;gt;&quot;or &quot;&amp;lt;clinit&amp;gt;&quot; a {@code NoSuchMethodException}is raised.                
                <param>
                    name the name of the method                    
                </param>
                <param>
                    parameterTypes the parameter array                    
                </param>
                <return>
                    the {@code Method} object for the method of this class
                      matching the specified name and parameters                    
                </return>
                <exception>
                    NoSuchMethodException if a matching method is not found.                    
                </exception>
                <exception>
                    NullPointerException if {@code name} is {@code null}                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared method
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredMethod" type="Method" line="1312">
                <params>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="method" type="Method" line="1314"/>
                <scope line="1315"/>
            </method>
            <javadoc line="1320">
                Returns a {@code Constructor} object that reflects the specified
                  constructor of the class or interface represented by this{@code Class} object.  The {@code parameterTypes} parameter is
                  an array of {@code Class} objects that identify the constructor&apos;s
                  formal parameter types, in declared order.
                  If this {@code Class} object represents an inner class
                  declared in a non-static context, the formal parameter types
                  include the explicit enclosing instance as the first parameter.                
                <param>
                    parameterTypes the parameter array                    
                </param>
                <return>
                    The {@code Constructor} object for the constructor with the
                      specified parameter list                    
                </return>
                <exception>
                    NoSuchMethodException if a matching method is not found.                    
                </exception>
                <exception>
                    SecurityExceptionIf a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
                      following conditions is met:
                      &lt;ul&gt;
                      &lt;li&gt; invocation of{@link SecurityManager#checkMemberAccesss.checkMemberAccess(this, Member.DECLARED)} denies
                      access to the declared constructor
                      &lt;li&gt; the caller&apos;s class loader is not the same as or an
                      ancestor of the class loader for the current class and
                      invocation of {@link SecurityManager#checkPackageAccess()} denies access to the package
                      of this class
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getDeclaredConstructor" type="Constructor&lt;T&gt;" line="1344">
                <params>
                    <param name="parameterTypes" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="1348">
                Finds a resource with a given name.  The rules for searching resources
                  associated with a given class are implemented by the defining{@linkplain ClassLoader class loader} of the class.  This method
                  delegates to this object&apos;s class loader.  If this object was loaded by
                  the bootstrap class loader, the method delegates to {@link ClassLoader#getSystemResourceAsStream}.
                  &lt;p&gt; Before delegation, an absolute resource name is constructed from the
                  given resource name using this algorithm:
                  &lt;ul&gt;
                  &lt;li&gt; If the {@code name} begins with a {@code &apos;/&apos;}(&lt;tt&gt;&apos;&amp;#92;u002f&apos;&lt;/tt&gt;), then the absolute name of the resource is the
                  portion of the {@code name} following the {@code &apos;/&apos;}.
                  &lt;li&gt; Otherwise, the absolute name is of the following form:
                  &lt;blockquote&gt;{@code modified_package_name/name}&lt;/blockquote&gt;
                  &lt;p&gt; Where the {@code modified_package_name} is the package name of this
                  object with {@code &apos;/&apos;} substituted for {@code &apos;.&apos;}(&lt;tt&gt;&apos;&amp;#92;u002e&apos;&lt;/tt&gt;).
                  &lt;/ul&gt;                
                <param>
                    name name of the desired resource                    
                </param>
                <return>
                    A {@link java.io.InputStream} object or {@code null} if
                      no resource with this name is found                    
                </return>
                <throws>
                    NullPointerException If {@code name} is {@code null}                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="1369">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="1371"/>
                <scope line="1372"/>
            </method>
            <javadoc line="1377">
                Finds a resource with a given name.  The rules for searching resources
                  associated with a given class are implemented by the defining{@linkplain ClassLoader class loader} of the class.  This method
                  delegates to this object&apos;s class loader.  If this object was loaded by
                  the bootstrap class loader, the method delegates to {@link ClassLoader#getSystemResource}.
                  &lt;p&gt; Before delegation, an absolute resource name is constructed from the
                  given resource name using this algorithm:
                  &lt;ul&gt;
                  &lt;li&gt; If the {@code name} begins with a {@code &apos;/&apos;}(&lt;tt&gt;&apos;&amp;#92;u002f&apos;&lt;/tt&gt;), then the absolute name of the resource is the
                  portion of the {@code name} following the {@code &apos;/&apos;}.
                  &lt;li&gt; Otherwise, the absolute name is of the following form:
                  &lt;blockquote&gt;{@code modified_package_name/name}&lt;/blockquote&gt;
                  &lt;p&gt; Where the {@code modified_package_name} is the package name of this
                  object with {@code &apos;/&apos;} substituted for {@code &apos;.&apos;}(&lt;tt&gt;&apos;&amp;#92;u002e&apos;&lt;/tt&gt;).
                  &lt;/ul&gt;                
                <param>
                    name name of the desired resource                    
                </param>
                <return>
                    A  {@link java.net.URL} object or {@code null} if no
                      resource with this name is found                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getResource" type="java.net.URL" line="1397">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="1399"/>
                <scope line="1400"/>
            </method>
            <declaration name="allPermDomain" type="java.security.ProtectionDomain" line="1405"/>
            <javadoc line="1405">
                protection domain returned when the internal domain is null                
            </javadoc>
            <javadoc line="1409">
                Returns the {@code ProtectionDomain} of this class.  If there is a
                  security manager installed, this method first calls the security
                  manager&apos;s {@code checkPermission} method with a{@code RuntimePermission(&quot;getProtectionDomain&quot;)} permission to
                  ensure it&apos;s ok to get the{@code ProtectionDomain}.                
                <return>
                    the ProtectionDomain of this class                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its{@code checkPermission} method doesn&apos;t allow
                      getting the ProtectionDomain.                    
                </throws>
                <see>
                    java.security.ProtectionDomain                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getProtectionDomain" type="java.security.ProtectionDomain" line="1422">
                <declaration name="sm" type="SecurityManager" line="1423"/>
                <scope line="1424"/>
                <declaration name="pd" type="java.security.ProtectionDomain" line="1427"/>
                <scope line="1428">
                    <scope line="1429">
                        <declaration name="perms" type="java.security.Permissions" line="1430"/>
                    </scope>
                </scope>
            </method>
            <method name="getProtectionDomain0" type="java.security.ProtectionDomain" line="1438"/>
            <javadoc line="1438">
                Returns the ProtectionDomain of this class.                
            </javadoc>
            <method name="setProtectionDomain0" type="void" line="1442"/>
            <javadoc line="1442">
                Set the ProtectionDomain for this class. Called by
                  ClassLoader.defineClass.                
            </javadoc>
            <method name="getPrimitiveClass" type="Class" line="1447"/>
            <method name="checkMemberAccess" type="void" line="1448">
                <params>
                    <param name="which" type="int"/>
                    <param name="ccl" type="ClassLoader"/>
                </params>
                <declaration name="s" type="SecurityManager" line="1449"/>
                <scope line="1450">
                    <declaration name="cl" type="ClassLoader" line="1452"/>
                    <scope line="1453">
                        <declaration name="name" type="String" line="1454"/>
                        <declaration name="i" type="int" line="1455"/>
                        <scope line="1456"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1462">
                Add a package name prefix if the name is not absolute Remove leading &quot;/&quot;
                  if name is absolute                
            </javadoc>
            <method name="resolveName" type="String" line="1466">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="1467"/>
                <scope line="1470">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1471"/>
                    <scope line="1472"/>
                    <declaration name="baseName" type="String" line="1475"/>
                    <declaration name="index" type="int" line="1476"/>
                    <scope line="1477"/>
                </scope>
                <scope line="1481"/>
            </method>
            <declaration name="useCaches" type="boolean" line="1486"/>
            <javadoc line="1486">
                Reflection support.                
            </javadoc>
            <declaration name="declaredFields" type="SoftReference&amp;lt;Field[]&amp;gt;" line="1490"/>
            <declaration name="publicFields" type="SoftReference&amp;lt;Field[]&amp;gt;" line="1491"/>
            <declaration name="declaredMethods" type="SoftReference&amp;lt;Method[]&amp;gt;" line="1492"/>
            <declaration name="publicMethods" type="SoftReference&amp;lt;Method[]&amp;gt;" line="1493"/>
            <declaration name="declaredConstructors" type="SoftReference&amp;lt;Constructor&amp;lt;T&amp;gt;[]&amp;gt;" line="1494"/>
            <declaration name="publicConstructors" type="SoftReference&amp;lt;Constructor&amp;lt;T&amp;gt;[]&amp;gt;" line="1495"/>
            <declaration name="declaredPublicFields" type="SoftReference&amp;lt;Field[]&amp;gt;" line="1496"/>
            <declaration name="declaredPublicMethods" type="SoftReference&amp;lt;Method[]&amp;gt;" line="1497"/>
            <declaration name="classRedefinedCount" type="int" line="1498"/>
            <declaration name="lastRedefinedCount" type="int" line="1499"/>
            <method name="clearCachesOnClassRedefinition" type="void" line="1500">
                <scope line="1501"/>
            </method>
            <method name="getGenericSignature" type="String" line="1509"/>
            <declaration name="genericInfo" type="ClassRepository" line="1510"/>
            <method name="getFactory" type="GenericsFactory" line="1511"/>
            <method name="getGenericInfo" type="ClassRepository" line="1514">
                <scope line="1515"/>
            </method>
            <method name="getRawAnnotations" type="byte[]" line="1520"/>
            <method name="getConstantPool" type="ConstantPool" line="1521"/>
            <method name="privateGetDeclaredFields" type="Field[]" line="1522">
                <params>
                    <param name="publicOnly" type="boolean"/>
                </params>
                <declaration name="res" type="Field[]" line="1524"/>
                <scope line="1525">
                    <scope line="1527">
                        <scope line="1528"/>
                    </scope>
                    <scope line="1532">
                        <scope line="1533"/>
                    </scope>
                </scope>
                <scope line="1540">
                    <scope line="1541"/>
                    <scope line="1544"/>
                </scope>
            </method>
            <method name="privateGetPublicFields" type="Field[]" line="1550">
                <params>
                    <param name="traversedInterfaces" type="Set&lt;Class&lt;?&gt;&gt;"/>
                </params>
                <declaration name="res" type="Field[]" line="1552"/>
                <scope line="1553">
                    <scope line="1555"/>
                </scope>
                <declaration name="fields" type="List&amp;lt;Field&amp;gt;" line="1560"/>
                <scope line="1561"/>
                <declaration name="tmp" type="Field[]" line="1564"/>
                <scope line="1566">
                    <scope line="1567"/>
                </scope>
                <scope line="1572">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1573"/>
                    <scope line="1574"/>
                </scope>
                <scope line="1580"/>
            </method>
            <method name="addAll" type="void" line="1585">
                <params>
                    <param name="c" type="Collection&lt;Field&gt;"/>
                    <param name="o" type="Field[]"/>
                </params>
                <scope line="1586"/>
            </method>
            <method name="privateGetDeclaredConstructors" type="Constructor&lt;T&gt;[]" line="1590">
                <params>
                    <param name="publicOnly" type="boolean"/>
                </params>
                <declaration name="res" type="Constructor&amp;lt;T&amp;gt;[]" line="1592"/>
                <scope line="1593">
                    <scope line="1595">
                        <scope line="1596"/>
                    </scope>
                    <scope line="1600">
                        <scope line="1601"/>
                    </scope>
                </scope>
                <scope line="1607"/>
                <scope line="1610"/>
                <scope line="1613">
                    <scope line="1614"/>
                    <scope line="1617"/>
                </scope>
            </method>
            <method name="privateGetDeclaredMethods" type="Method[]" line="1623">
                <params>
                    <param name="publicOnly" type="boolean"/>
                </params>
                <declaration name="res" type="Method[]" line="1625"/>
                <scope line="1626">
                    <scope line="1628">
                        <scope line="1629"/>
                    </scope>
                    <scope line="1633">
                        <scope line="1634"/>
                    </scope>
                </scope>
                <scope line="1641">
                    <scope line="1642"/>
                    <scope line="1645"/>
                </scope>
            </method>
            <class name="MethodArray" line="1651">
                <declaration name="methods" type="Method[]" line="1652"/>
                <declaration name="length" type="int" line="1653"/>
                <method name="MethodArray" type="constructor" line="1654"/>
                <method name="add" type="void" line="1658">
                    <params>
                        <param name="m" type="Method"/>
                    </params>
                    <scope line="1659"/>
                </method>
                <method name="addAll" type="void" line="1664">
                    <params>
                        <param name="ma" type="Method[]"/>
                    </params>
                    <scope line="1665"/>
                </method>
                <method name="addAll" type="void" line="1669">
                    <params>
                        <param name="ma" type="MethodArray"/>
                    </params>
                    <scope line="1670"/>
                </method>
                <method name="addIfNotPresent" type="void" line="1674">
                    <params>
                        <param name="newMethod" type="Method"/>
                    </params>
                    <scope line="1675">
                        <declaration name="m" type="Method" line="1676"/>
                        <scope line="1677"/>
                    </scope>
                </method>
                <method name="addAllIfNotPresent" type="void" line="1683">
                    <params>
                        <param name="newMethods" type="MethodArray"/>
                    </params>
                    <scope line="1684">
                        <declaration name="m" type="Method" line="1685"/>
                        <scope line="1686"/>
                    </scope>
                </method>
                <method name="length" type="int" line="1691"/>
                <method name="get" type="Method" line="1694">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="removeByNameAndSignature" type="void" line="1697">
                    <params>
                        <param name="toRemove" type="Method"/>
                    </params>
                    <scope line="1698">
                        <declaration name="m" type="Method" line="1699"/>
                        <scope line="1700"/>
                    </scope>
                </method>
                <method name="compactAndTrim" type="void" line="1705">
                    <declaration name="newPos" type="int" line="1706"/>
                    <scope line="1707">
                        <declaration name="m" type="Method" line="1708"/>
                        <scope line="1709">
                            <scope line="1710"/>
                        </scope>
                    </scope>
                    <scope line="1716"/>
                </method>
                <method name="getArray" type="Method[]" line="1720"/>
            </class>
            <method name="privateGetPublicMethods" type="Method[]" line="1724">
                <declaration name="res" type="Method[]" line="1726"/>
                <scope line="1727">
                    <scope line="1729"/>
                </scope>
                <declaration name="methods" type="MethodArray" line="1734"/>
                <scope line="1735">
                    <declaration name="tmp" type="Method[]" line="1736"/>
                </scope>
                <declaration name="inheritedMethods" type="MethodArray" line="1739"/>
                <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="1740"/>
                <scope line="1741"/>
                <scope line="1744">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1745"/>
                    <scope line="1746">
                        <declaration name="supers" type="MethodArray" line="1747"/>
                        <scope line="1749">
                            <declaration name="m" type="Method" line="1750"/>
                            <scope line="1751"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1759">
                    <declaration name="m" type="Method" line="1760"/>
                </scope>
                <scope line="1766"/>
            </method>
            <method name="searchFields" type="Field" line="1771">
                <params>
                    <param name="fields" type="Field[]"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="internedName" type="String" line="1772"/>
                <scope line="1773">
                    <scope line="1774"/>
                </scope>
            </method>
            <method name="getField0" type="Field" line="1780">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="res" type="Field" line="1781"/>
                <scope line="1782"/>
                <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="1785"/>
                <scope line="1786">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1787"/>
                    <scope line="1788"/>
                </scope>
                <scope line="1792">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1793"/>
                    <scope line="1794">
                        <scope line="1795"/>
                    </scope>
                </scope>
            </method>
            <method name="searchMethods" type="Method" line="1802">
                <params>
                    <param name="methods" type="Method[]"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class&lt;?&gt;[]"/>
                </params>
                <declaration name="res" type="Method" line="1803"/>
                <declaration name="internedName" type="String" line="1804"/>
                <scope line="1805">
                    <declaration name="m" type="Method" line="1806"/>
                </scope>
            </method>
            <method name="getMethod0" type="Method" line="1811">
                <params>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class&lt;?&gt;[]"/>
                </params>
                <declaration name="res" type="Method" line="1812"/>
                <scope line="1813"/>
                <scope line="1816">
                    <declaration name="c" type="Class&amp;lt;? super T&amp;gt;" line="1817"/>
                    <scope line="1818">
                        <scope line="1819"/>
                    </scope>
                </scope>
                <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="1824"/>
                <scope line="1825">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1826"/>
                    <scope line="1827"/>
                </scope>
            </method>
            <method name="getConstructor0" type="Constructor&lt;T&gt;" line="1833">
                <params>
                    <param name="parameterTypes" type="Class&lt;?&gt;[]"/>
                    <param name="which" type="int"/>
                </params>
                <declaration name="constructors" type="Constructor&amp;lt;T&amp;gt;[]" line="1834"/>
                <scope line="1835">
                    <scope line="1836"/>
                </scope>
            </method>
            <method name="arrayContentsEq" type="boolean" line="1842">
                <params>
                    <param name="a1" type="Object[]"/>
                    <param name="a2" type="Object[]"/>
                </params>
                <scope line="1843"/>
                <scope line="1846"/>
                <scope line="1849"/>
                <scope line="1852">
                    <scope line="1853"/>
                </scope>
            </method>
            <method name="copyFields" type="Field[]" line="1859">
                <params>
                    <param name="arg" type="Field[]"/>
                </params>
                <declaration name="out" type="Field[]" line="1860"/>
                <declaration name="fact" type="ReflectionFactory" line="1861"/>
                <scope line="1862"/>
            </method>
            <method name="copyMethods" type="Method[]" line="1867">
                <params>
                    <param name="arg" type="Method[]"/>
                </params>
                <declaration name="out" type="Method[]" line="1868"/>
                <declaration name="fact" type="ReflectionFactory" line="1869"/>
                <scope line="1870"/>
            </method>
            <method name="copyConstructors" type="Constructor&lt;U&gt;[]" line="1875">
                <params>
                    <param name="arg" type="Constructor&lt;U&gt;[]"/>
                </params>
                <declaration name="out" type="Constructor&amp;lt;U&amp;gt;[]" line="1876"/>
                <declaration name="fact" type="ReflectionFactory" line="1877"/>
                <scope line="1878"/>
            </method>
            <method name="getDeclaredFields0" type="Field[]" line="1883"/>
            <method name="getDeclaredMethods0" type="Method[]" line="1884"/>
            <method name="getDeclaredConstructors0" type="Constructor&lt;T&gt;[]" line="1885"/>
            <method name="getDeclaredClasses0" type="Class&lt;?&gt;[]" line="1886"/>
            <method name="argumentTypesToString" type="String" line="1887">
                <params>
                    <param name="argTypes" type="Class&lt;?&gt;[]"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="1888"/>
                <scope line="1890">
                    <scope line="1891">
                        <scope line="1892"/>
                        <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="1895"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="1902"/>
            <javadoc line="1902">
                use serialVersionUID from JDK 1.1 for interoperability                
            </javadoc>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="1906"/>
            <javadoc line="1906">
                Class Class is special cased within the Serialization Stream Protocol.
                  A Class instance is written initially into an ObjectOutputStream in the
                  following format:
                  &lt;pre&gt;{@code TC_CLASS} ClassDescriptor
                  A ClassDescriptor is a special cased serialization of
                  a {@code java.io.ObjectStreamClass} instance.
                  &lt;/pre&gt;
                  A new handle is generated for the initial time the class descriptor
                  is written into the stream. Future references to the class descriptor
                  are written as references to the initial class descriptor instance.                
                <see>
                    java.io.ObjectStreamClass                    
                </see>
            </javadoc>
            <javadoc line="1920">
                Returns the assertion status that would be assigned to this
                  class if it were to be initialized at the time this method is invoked.
                  If this class has had its assertion status set, the most recent
                  setting will be returned; otherwise, if any package default assertion
                  status pertains to this class, the most recent setting for the most
                  specific pertinent package default assertion status is returned;
                  otherwise, if this class is not a system class (i.e., it has a
                  class loader) its class loader&apos;s default assertion status is returned;
                  otherwise, the system class default assertion status is returned.
                  &lt;p&gt;
                  Few programmers will have any need for this method; it is provided
                  for the benefit of the JRE itself.  (It allows a class to determine at
                  the time that it is initialized whether assertions should be enabled.)
                  Note that this method is not guaranteed to return the actual
                  assertion status that was (or will be) associated with the specified
                  class when it was (or will be) initialized.                
                <return>
                    the desired assertion status of the specified class.                    
                </return>
                <see>
                    java.lang.ClassLoader#setClassAssertionStatus                    
                </see>
                <see>
                    java.lang.ClassLoader#setPackageAssertionStatus                    
                </see>
                <see>
                    java.lang.ClassLoader#setDefaultAssertionStatus                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="desiredAssertionStatus" type="boolean" line="1943">
                <declaration name="loader" type="ClassLoader" line="1944"/>
                <scope line="1946">
                    <scope line="1947"/>
                </scope>
            </method>
            <method name="desiredAssertionStatus0" type="boolean" line="1953"/>
            <javadoc line="1954">
                Returns true if and only if this class was declared as an enum in the
                  source code.                
                <return>
                    true if and only if this class was declared as an enum in the
                      source code                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isEnum" type="boolean" line="1961"/>
            <method name="getReflectionFactory" type="ReflectionFactory" line="1964">
                <scope line="1965"/>
            </method>
            <declaration name="reflectionFactory" type="ReflectionFactory" line="1970"/>
            <declaration name="initted" type="boolean" line="1971"/>
            <method name="checkInitted" type="void" line="1972">
                <anonymous_class line="1974">
                    <method name="run" type="Void" line="1975">
                        <scope line="1976"/>
                        <declaration name="val" type="String" line="1979"/>
                        <scope line="1980"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1989">
                Returns the elements of this enum class or null if this
                  Class object does not represent an enum type.                
                <return>
                    an array containing the values comprising the enum class
                      represented by this Class object in the order they&apos;re
                      declared, or null if this Class object does not
                      represent an enum type                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getEnumConstants" type="T[]" line="1998">
                <declaration name="values" type="T[]" line="1999"/>
            </method>
            <javadoc line="2002">
                Returns the elements of this enum class or null if this
                  Class object does not represent an enum type;
                  identical to getEnumConstants except that the result is
                  uncloned, cached, and shared by all callers.                
            </javadoc>
            <method name="getEnumConstantsShared" type="T[]" line="2008">
                <scope line="2009">
                    <scope line="2011">
                        <declaration name="values" type="Method" line="2012"/>
                        <anonymous_class line="2013">
                            <method name="run" type="Void" line="2014"/>
                        </anonymous_class>
                    </scope>
                    <scope line="2022"/>
                    <scope line="2025"/>
                    <scope line="2028"/>
                </scope>
            </method>
            <declaration name="enumConstants" type="T[]" line="2034"/>
            <javadoc line="2035">
                Returns a map from simple name to enum constant.  This package-private
                  method is used internally by Enum to implement
                  public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt;, String)
                  efficiently.  Note that the map is returned by this method is
                  created lazily on first use.  Typically it won&apos;t ever get created.                
            </javadoc>
            <method name="enumConstantDirectory" type="Map&lt;String,T&gt;" line="2042">
                <scope line="2043">
                    <declaration name="universe" type="T[]" line="2044"/>
                    <declaration name="m" type="Map&amp;lt;String,T&amp;gt;" line="2046"/>
                </scope>
            </method>
            <declaration name="enumConstantDirectory" type="Map&amp;lt;String,T&amp;gt;" line="2052"/>
            <javadoc line="2053">
                Casts an object to the class or interface represented
                  by this {@code Class} object.                
                <param>
                    obj the object to be cast                    
                </param>
                <return>
                    the object after casting, or null if obj is null                    
                </return>
                <throws>
                    ClassCastException if the object is not
                      null and is not assignable to the type T.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="cast" type="T" line="2062">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="cannotCastMsg" type="String" line="2066">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="2069">
                Casts this {@code Class} object to represent a subclass of the class
                  represented by the specified class object.  Checks that that the cast
                  is valid, and throws a {@code ClassCastException} if it is not.  If
                  this method succeeds, it always returns a reference to this class object.
                  &lt;p&gt;This method is useful when a client needs to &quot;narrow&quot; the type of
                  a {@code Class} object to pass it to an API that restricts the{@code Class} objects that it is willing to accept.  A cast would
                  generate a compile-time warning, as the correctness of the cast
                  could not be checked at runtime (because generic types are implemented
                  by erasure).                
                <return>
                    this {@code Class} object, cast to represent a subclass of
                      the specified class object.                    
                </return>
                <throws>
                    ClassCastException if this {@code Class} object does not
                      represent a subclass of the specified class (here &quot;subclass&quot; includes
                      the class itself).                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="asSubclass" type="Class&lt;? extends U&gt;" line="2086">
                <params>
                    <param name="clazz" type="Class&lt;U&gt;"/>
                </params>
            </method>
            <javadoc line="2090">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="A" line="2094">
                <params>
                    <param name="annotationClass" type="Class&lt;A&gt;"/>
                </params>
            </method>
            <javadoc line="2099">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnnotationPresent" type="boolean" line="2103">
                <params>
                    <param name="annotationClass" type="Class&lt;? extends Annotation&gt;"/>
                </params>
            </method>
            <javadoc line="2107">
                @since 1.5                
            </javadoc>
            <method name="getAnnotations" type="Annotation[]" line="2110"/>
            <javadoc line="2114">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="2117"/>
            <declaration name="annotations" type="Map&amp;lt;Class&amp;lt;? extends Annotation&amp;gt;,Annotation&amp;gt;" line="2121"/>
            <declaration name="declaredAnnotations" type="Map&amp;lt;Class&amp;lt;? extends Annotation&amp;gt;,Annotation&amp;gt;" line="2122"/>
            <method name="initAnnotationsIfNecessary" type="void" line="2123">
                <declaration name="superClass" type="Class&amp;lt;?&amp;gt;" line="2127"/>
                <scope line="2128"/>
                <scope line="2131">
                    <scope line="2134">
                        <declaration name="annotationClass" type="Class&amp;lt;? extends Annotation&amp;gt;" line="2135"/>
                    </scope>
                </scope>
            </method>
            <declaration name="annotationType" type="AnnotationType" line="2141"/>
            <method name="setAnnotationType" type="void" line="2142">
                <params>
                    <param name="type" type="AnnotationType"/>
                </params>
            </method>
            <method name="getAnnotationType" type="AnnotationType" line="2145"/>
        </class>
    </source>