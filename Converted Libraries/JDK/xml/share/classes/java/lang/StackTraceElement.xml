<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.util.Objects"/>
        <class name="StackTraceElement" line="3">
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                An element in a stack trace, as returned by {@link Throwable#getStackTrace()}.  Each element represents a single stack frame.
                  All stack frames except for the one at the top of the stack represent
                  a method invocation.  The frame at the top of the stack represents the
                  execution point at which the stack trace was generated.  Typically,
                  this is the point at which the throwable corresponding to the stack trace
                  was created.                
                <since>
                    1.4                    
                </since>
                <author>
                    Josh Bloch                    
                </author>
            </javadoc>
            <declaration name="declaringClass" type="String" line="14"/>
            <declaration name="methodName" type="String" line="15"/>
            <declaration name="fileName" type="String" line="16"/>
            <declaration name="lineNumber" type="int" line="17"/>
            <javadoc line="18">
                Creates a stack trace element representing the specified execution
                  point.                
                <param>
                    declaringClass the fully qualified name of the class containing
                      the execution point represented by the stack trace element                    
                </param>
                <param>
                    methodName the name of the method containing the execution point
                      represented by the stack trace element                    
                </param>
                <param>
                    fileName the name of the file containing the execution point
                      represented by the stack trace element, or {@code null} if
                      this information is unavailable                    
                </param>
                <param>
                    lineNumber the line number of the source line containing the
                      execution point represented by this stack trace element, or
                      a negative number if this information is unavailable. A value
                      of -2 indicates that the method containing the execution point
                      is a native method                    
                </param>
                <throws>
                    NullPointerException if {@code declaringClass} or{@code methodName} is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="StackTraceElement" type="constructor" line="36">
                <params>
                    <param name="declaringClass" type="String"/>
                    <param name="methodName" type="String"/>
                    <param name="fileName" type="String"/>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                Returns the name of the source file containing the execution point
                  represented by this stack trace element.  Generally, this corresponds
                  to the {@code SourceFile} attribute of the relevant {@code class}file (as per &lt;i&gt;The Java Virtual Machine Specification&lt;/i&gt;, Section
                  4.7.7).  In some systems, the name may refer to some source code unit
                  other than a file, such as an entry in source repository.                
                <return>
                    the name of the file containing the execution point
                      represented by this stack trace element, or {@code null} if
                      this information is unavailable.                    
                </return>
            </javadoc>
            <method name="getFileName" type="String" line="52"/>
            <javadoc line="55">
                Returns the line number of the source line containing the execution
                  point represented by this stack trace element.  Generally, this is
                  derived from the {@code LineNumberTable} attribute of the relevant{@code class} file (as per &lt;i&gt;The Java Virtual Machine
                  Specification&lt;/i&gt;, Section 4.7.8).                
                <return>
                    the line number of the source line containing the execution
                      point represented by this stack trace element, or a negative
                      number if this information is unavailable.                    
                </return>
            </javadoc>
            <method name="getLineNumber" type="int" line="64"/>
            <javadoc line="67">
                Returns the fully qualified name of the class containing the
                  execution point represented by this stack trace element.                
                <return>
                    the fully qualified name of the {@code Class} containing
                      the execution point represented by this stack trace element.                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="73"/>
            <javadoc line="76">
                Returns the name of the method containing the execution point
                  represented by this stack trace element.  If the execution point is
                  contained in an instance or class initializer, this method will return
                  the appropriate &lt;i&gt;special method name&lt;/i&gt;, {@code &lt;init&gt;} or{@code &lt;clinit&gt;}, as per Section 3.9 of &lt;i&gt;The Java Virtual
                  Machine Specification&lt;/i&gt;.                
                <return>
                    the name of the method containing the execution point
                      represented by this stack trace element.                    
                </return>
            </javadoc>
            <method name="getMethodName" type="String" line="85"/>
            <javadoc line="88">
                Returns true if the method containing the execution point
                  represented by this stack trace element is a native method.                
                <return>
                    {@code true} if the method containing the execution point
                      represented by this stack trace element is a native method.                    
                </return>
            </javadoc>
            <method name="isNativeMethod" type="boolean" line="94"/>
            <javadoc line="97">
                Returns a string representation of this stack trace element.  The
                  format of this string depends on the implementation, but the following
                  examples may be regarded as typical:
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;MyClass.mash(MyClass.java:9)&quot;} - Here, {@code &quot;MyClass&quot;}is the &lt;i&gt;fully-qualified name&lt;/i&gt; of the class containing the
                  execution point represented by this stack trace element,{@code &quot;mash&quot;} is the name of the method containing the execution
                  point, {@code &quot;MyClass.java&quot;} is the source file containing the
                  execution point, and {@code &quot;9&quot;} is the line number of the source
                  line containing the execution point.
                  &lt;li&gt;{@code &quot;MyClass.mash(MyClass.java)&quot;} - As above, but the line
                  number is unavailable.
                  &lt;li&gt;{@code &quot;MyClass.mash(Unknown Source)&quot;} - As above, but neither
                  the file name nor the line  number are available.
                  &lt;li&gt;{@code &quot;MyClass.mash(Native Method)&quot;} - As above, but neither
                  the file name nor the line  number are available, and the method
                  containing the execution point is known to be a native method.
                  &lt;/ul&gt;                
                <see>
                    Throwable#printStackTrace()                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="117"/>
            <javadoc line="120">
                Returns true if the specified object is another{@code StackTraceElement} instance representing the same execution
                  point as this instance.  Two stack trace elements {@code a} and{@code b} are equal if and only if:
                  &lt;pre&gt;
                  equals(a.getFileName(), b.getFileName()) &amp;&amp;
                  a.getLineNumber() == b.getLineNumber()) &amp;&amp;
                  equals(a.getClassName(), b.getClassName()) &amp;&amp;
                  equals(a.getMethodName(), b.getMethodName())
                  &lt;/pre&gt;
                  where {@code equals} has the semantics of {@link java.util.Objects#equals(Object,Object) Objects.equals}.                
                <param>
                    obj the object to be compared with this stack trace element.                    
                </param>
                <return>
                    true if the specified object is another{@code StackTraceElement} instance representing the same
                      execution point as this instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="134">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="e" type="StackTraceElement" line="137"/>
            </method>
            <javadoc line="140">
                Returns a hash code value for this stack trace element.                
            </javadoc>
            <method name="hashCode" type="int" line="143">
                <declaration name="result" type="int" line="144"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="149"/>
        </class>
    </source>