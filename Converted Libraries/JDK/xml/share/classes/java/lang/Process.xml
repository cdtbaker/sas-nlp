<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io"/>
        <class name="Process" line="30">
            <javadoc line="30">
                The {@link ProcessBuilder#start()} and{@link Runtime#exec(String[],String[],File) Runtime.exec}methods create a native process and return an instance of a
                  subclass of {@code Process} that can be used to control the process
                  and obtain information about it.  The class {@code Process}provides methods for performing input from the process, performing
                  output to the process, waiting for the process to complete,
                  checking the exit status of the process, and destroying (killing)
                  the process.
                  &lt;p&gt;The methods that create processes may not work well for special
                  processes on certain native platforms, such as native windowing
                  processes, daemon processes, Win16/DOS processes on Microsoft
                  Windows, or shell scripts.
                  &lt;p&gt;By default, the created subprocess does not have its own terminal
                  or console.  All its standard I/O (i.e. stdin, stdout, stderr)
                  operations will be redirected to the parent process, where they can
                  be accessed via the streams obtained using the methods{@link #getOutputStream()},{@link #getInputStream()}, and{@link #getErrorStream()}.
                  The parent process uses these streams to feed input to and get output
                  from the subprocess.  Because some native platforms only provide
                  limited buffer size for standard input and output streams, failure
                  to promptly write the input stream or read the output stream of
                  the subprocess may cause the subprocess to block, or even deadlock.
                  &lt;p&gt;Where desired, &lt;a href=&quot;ProcessBuilder.html#redirect-input&quot;&gt;
                  subprocess I/O can also be redirected&lt;/a&gt;
                  using methods of the {@link ProcessBuilder} class.
                  &lt;p&gt;The subprocess is not killed when there are no more references to
                  the {@code Process} object, but rather the subprocess
                  continues executing asynchronously.
                  &lt;p&gt;There is no requirement that a process represented by a {@codeProcess} object execute asynchronously or concurrently with respect
                  to the Java process that owns the {@code Process} object.
                  &lt;p&gt;As of 1.5, {@link ProcessBuilder#start()} is the preferred way
                  to create a {@code Process}.                
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getOutputStream" type="OutputStream" line="77"/>
            <javadoc line="77">
                Returns the output stream connected to the normal input of the
                  subprocess.  Output to the stream is piped into the standard
                  input of the process represented by this {@code Process} object.
                  &lt;p&gt;If the standard input of the subprocess has been redirected using{@link ProcessBuilder#redirectInput(Redirect)ProcessBuilder.redirectInput}then this method will return a
                  &lt;a href=&quot;ProcessBuilder.html#redirect-input&quot;&gt;null output stream&lt;/a&gt;.
                  &lt;p&gt;Implementation note: It is a good idea for the returned
                  output stream to be buffered.                
                <return>
                    the output stream connected to the normal input of the
                      subprocess                    
                </return>
            </javadoc>
            <method name="getInputStream" type="InputStream" line="96"/>
            <javadoc line="96">
                Returns the input stream connected to the normal output of the
                  subprocess.  The stream obtains data piped from the standard
                  output of the process represented by this {@code Process} object.
                  &lt;p&gt;If the standard output of the subprocess has been redirected using{@link ProcessBuilder#redirectOutput(Redirect)ProcessBuilder.redirectOutput}then this method will return a
                  &lt;a href=&quot;ProcessBuilder.html#redirect-output&quot;&gt;null input stream&lt;/a&gt;.
                  &lt;p&gt;Otherwise, if the standard error of the subprocess has been
                  redirected using{@link ProcessBuilder#redirectErrorStream(boolean)ProcessBuilder.redirectErrorStream}then the input stream returned by this method will receive the
                  merged standard output and the standard error of the subprocess.
                  &lt;p&gt;Implementation note: It is a good idea for the returned
                  input stream to be buffered.                
                <return>
                    the input stream connected to the normal output of the
                      subprocess                    
                </return>
            </javadoc>
            <method name="getErrorStream" type="InputStream" line="122"/>
            <javadoc line="122">
                Returns the input stream connected to the error output of the
                  subprocess.  The stream obtains data piped from the error output
                  of the process represented by this {@code Process} object.
                  &lt;p&gt;If the standard error of the subprocess has been redirected using{@link ProcessBuilder#redirectError(Redirect)ProcessBuilder.redirectError} or{@link ProcessBuilder#redirectErrorStream(boolean)ProcessBuilder.redirectErrorStream}then this method will return a
                  &lt;a href=&quot;ProcessBuilder.html#redirect-output&quot;&gt;null input stream&lt;/a&gt;.
                  &lt;p&gt;Implementation note: It is a good idea for the returned
                  input stream to be buffered.                
                <return>
                    the input stream connected to the error output of
                      the subprocess                    
                </return>
            </javadoc>
            <method name="waitFor" type="int" line="143"/>
            <javadoc line="143">
                Causes the current thread to wait, if necessary, until the
                  process represented by this {@code Process} object has
                  terminated.  This method returns immediately if the subprocess
                  has already terminated.  If the subprocess has not yet
                  terminated, the calling thread will be blocked until the
                  subprocess exits.                
                <return>
                    the exit value of the subprocess represented by this{@code Process} object.  By convention, the value{@code 0} indicates normal termination.                    
                </return>
                <throws>
                    InterruptedException if the current thread is{@linkplain Thread#interrupt() interrupted} by another
                      thread while it is waiting, then the wait is ended and
                      an {@link InterruptedException} is thrown.                    
                </throws>
            </javadoc>
            <method name="exitValue" type="int" line="161"/>
            <javadoc line="161">
                Returns the exit value for the subprocess.                
                <return>
                    the exit value of the subprocess represented by this{@code Process} object.  By convention, the value{@code 0} indicates normal termination.                    
                </return>
                <throws>
                    IllegalThreadStateException if the subprocess represented
                      by this {@code Process} object has not yet terminated                    
                </throws>
            </javadoc>
            <method name="destroy" type="void" line="172"/>
            <javadoc line="172">
                Kills the subprocess. The subprocess represented by this{@code Process} object is forcibly terminated.                
            </javadoc>
        </class>
    </source>