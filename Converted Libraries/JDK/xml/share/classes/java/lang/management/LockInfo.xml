<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="javax.management.openmbean.CompositeData"/>
        <import package="java.util.concurrent.locks"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="LockInfo" line="5">
            <javadoc line="5">
                Information about a &lt;em&gt;lock&lt;/em&gt;.  A lock can be a built-in object monitor,
                  an &lt;em&gt;ownable synchronizer&lt;/em&gt;, or the {@link Condition Condition}object associated with synchronizers.
                  &lt;p&gt;
                  &lt;a name=&quot;OwnableSynchronizer&quot;&gt;An ownable synchronizer&lt;/a&gt; is
                  a synchronizer that may be exclusively owned by a thread and uses{@link AbstractOwnableSynchronizer AbstractOwnableSynchronizer}(or its subclass) to implement its synchronization property.{@link ReentrantLock ReentrantLock} and{@link ReentrantReadWriteLock ReentrantReadWriteLock} are
                  two examples of ownable synchronizers provided by the platform.
                  &lt;h4&gt;&lt;a name=&quot;MappedType&quot;&gt;MXBean Mapping&lt;/a&gt;&lt;/h4&gt;
                  &lt;tt&gt;LockInfo&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}as specified in the &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
                  type mapping rules&lt;/a&gt; of {@linkplain javax.management.MXBean MXBeans}.                
                <see>
                    java.util.concurrent.locks.AbstractOwnableSynchronizer                    
                </see>
                <see>
                    java.util.concurrent.locks.Condition                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="className" type="String" line="21"/>
            <declaration name="identityHashCode" type="int" line="22"/>
            <javadoc line="23">
                Constructs a &lt;tt&gt;LockInfo&lt;/tt&gt; object.                
                <param>
                    className the fully qualified name of the class of the lock object.                    
                </param>
                <param>
                    identityHashCode the {@link System#identityHashCodeidentity hash code} of the lock object.                    
                </param>
            </javadoc>
            <method name="LockInfo" type="constructor" line="28">
                <params>
                    <param name="className" type="String"/>
                    <param name="identityHashCode" type="int"/>
                </params>
                <scope line="29"/>
            </method>
            <javadoc line="35">
                package-private constructors                
            </javadoc>
            <method name="LockInfo" type="constructor" line="38">
                <params>
                    <param name="lock" type="Object"/>
                </params>
            </method>
            <javadoc line="42">
                Returns the fully qualified name of the class of the lock object.                
                <return>
                    the fully qualified name of the class of the lock object.                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="46"/>
            <javadoc line="49">
                Returns the identity hash code of the lock object
                  returned from the {@link System#identityHashCode} method.                
                <return>
                    the identity hash code of the lock object.                    
                </return>
            </javadoc>
            <method name="getIdentityHashCode" type="int" line="54"/>
            <javadoc line="57">
                Returns a string representation of a lock.  The returned
                  string representation consists of the name of the class of the
                  lock object, the at-sign character `@&apos;, and the unsigned
                  hexadecimal representation of the &lt;em&gt;identity&lt;/em&gt; hash code
                  of the object.  This method returns a string equals to the value of:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  lock.getClass().getName() + &apos;@&apos; + Integer.toHexString(System.identityHashCode(lock))
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  where &lt;tt&gt;lock&lt;/tt&gt; is the lock object.                
                <return>
                    the string representation of a lock.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="70"/>
        </class>
    </source>