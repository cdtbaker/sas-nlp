<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.MBeanServerFactory"/>
        <import package="javax.management.MBeanServerPermission"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MalformedObjectNameException"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.StandardEmitterMBean"/>
        <import package="javax.management.StandardMBean"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="javax.management.JMX"/>
        <import package="sun.management.ManagementFactoryHelper"/>
        <class name="ManagementFactory" line="54">
            <comment line="234">
                A class with only static fields and methods.                
            </comment>
            <javadoc line="54">
                The {@code ManagementFactory} class is a factory class for getting
                  managed beans for the Java platform.
                  This class consists of static methods each of which returns
                  one or more &lt;i&gt;platform MXBeans&lt;/i&gt; representing
                  the management interface of a component of the Java virtual
                  machine.
                  &lt;p&gt;
                  &lt;h4&gt;&lt;a name=&quot;MXBean&quot;&gt;Platform MXBeans&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  A platform MXBean is a &lt;i&gt;managed bean&lt;/i&gt; that
                  conforms to the &lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;JMX&lt;/a&gt;
                  Instrumentation Specification and only uses a set of basic data types.
                  A JMX management application and the {@linkplain #getPlatformMBeanServer platform MBeanServer}can interoperate without requiring classes for MXBean specific
                  data types.
                  The data types being transmitted between the JMX connector
                  server and the connector client are{@linkplain javax.management.openmbean.OpenType open types}and this allows interoperation across versions.
                  See &lt;a href=&quot;../../../javax/management/MXBean.html#MXBean-spec&quot;&gt;
                  the specification of MXBeans&lt;/a&gt; for details.
                  &lt;a name=&quot;MXBeanNames&quot;&gt;&lt;/a&gt;
                  &lt;p&gt;Each platform MXBean is a {@link PlatformManagedObject}and it has a unique{@link javax.management.ObjectName ObjectName} for
                  registration in the platform {@code MBeanServer} as returned by
                  by the {@link PlatformManagedObject#getObjectName getObjectName}method.
                  &lt;p&gt;
                  An application can access a platform MXBean in the following ways:
                  &lt;h5&gt;1. Direct access to an MXBean interface&lt;/h5&gt;
                  &lt;blockquote&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Get an MXBean instance by calling the{@link #getPlatformMXBean(Class) getPlatformMXBean} or{@link #getPlatformMXBeans(Class) getPlatformMXBeans} method
                  and access the MXBean locally in the running
                  virtual machine.
                  &lt;/li&gt;
                  &lt;li&gt;Construct an MXBean proxy instance that forwards the
                  method calls to a given {@link MBeanServer MBeanServer} by calling
                  the {@link #getPlatformMXBean(MBeanServerConnection,Class)} or{@link #getPlatformMXBeans(MBeanServerConnection,Class)} method.
                  The {@link #newPlatformMXBeanProxy newPlatformMXBeanProxy} method
                  can also be used to construct an MXBean proxy instance of
                  a given {@code ObjectName}.
                  A proxy is typically constructed to remotely access
                  an MXBean of another running virtual machine.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;h5&gt;2. Indirect access to an MXBean interface via MBeanServer&lt;/h5&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Go through the platform {@code MBeanServer} to access MXBeans
                  locally or a specific &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; to access
                  MXBeans remotely.
                  The attributes and operations of an MXBean use only
                  &lt;em&gt;JMX open types&lt;/em&gt; which include basic data types,{@link javax.management.openmbean.CompositeData CompositeData},
                  and {@link javax.management.openmbean.TabularData TabularData}defined in{@link javax.management.openmbean.OpenType OpenType}.
                  The mapping is specified in
                  the {@linkplain javax.management.MXBean MXBean} specification
                  for details.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  The {@link #getPlatformManagementInterfaces getPlatformManagementInterfaces}method returns all management interfaces supported in the Java virtual machine
                  including the standard management interfaces listed in the tables
                  below as well as the management interfaces extended by the JDK implementation.
                  &lt;p&gt;
                  A Java virtual machine has a single instance of the following management
                  interfaces:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Management Interface&lt;/th&gt;
                  &lt;th&gt;ObjectName&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link ClassLoadingMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #CLASS_LOADING_MXBEAN_NAMEjava.lang:type=ClassLoading}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link MemoryMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #MEMORY_MXBEAN_NAMEjava.lang:type=Memory}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link ThreadMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #THREAD_MXBEAN_NAMEjava.lang:type=Threading}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link RuntimeMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #RUNTIME_MXBEAN_NAMEjava.lang:type=Runtime}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link OperatingSystemMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #OPERATING_SYSTEM_MXBEAN_NAMEjava.lang:type=OperatingSystem}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link PlatformLoggingMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link java.util.logging.LogManager#LOGGING_MXBEAN_NAMEjava.util.logging:type=Logging}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  A Java virtual machine has zero or a single instance of
                  the following management interfaces.
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Management Interface&lt;/th&gt;
                  &lt;th&gt;ObjectName&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link CompilationMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #COMPILATION_MXBEAN_NAMEjava.lang:type=Compilation}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  A Java virtual machine may have one or more instances of the following
                  management interfaces.
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Management Interface&lt;/th&gt;
                  &lt;th&gt;ObjectName&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link GarbageCollectorMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPEjava.lang:type=GarbageCollector}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;collector&apos;s name&lt;/i&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link MemoryManagerMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPEjava.lang:type=MemoryManager}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;manager&apos;s name&lt;/i&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link MemoryPoolMXBean} &lt;/td&gt;
                  &lt;td&gt; {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPEjava.lang:type=MemoryPool}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;pool&apos;s name&lt;/i&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link BufferPoolMXBean} &lt;/td&gt;
                  &lt;td&gt; {@code java.nio:type=BufferPool,name=}&lt;i&gt;pool name&lt;/i&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;                
                <see>
                    <a href="../../../javax/management/package-summary.html">
                           JMX Specification</a>                    
                </see>
                <see>
                    <a href="package-summary.html#examples">
                           Ways to Access Management Metrics</a>                    
                </see>
                <see>
                    javax.management.MXBean                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="ManagementFactory" type="constructor" line="234"/>
            <declaration name="CLASS_LOADING_MXBEAN_NAME" type="String" line="236"/>
            <javadoc line="236">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link ClassLoadingMXBean}.                
            </javadoc>
            <declaration name="COMPILATION_MXBEAN_NAME" type="String" line="243"/>
            <javadoc line="243">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link CompilationMXBean}.                
            </javadoc>
            <declaration name="MEMORY_MXBEAN_NAME" type="String" line="250"/>
            <javadoc line="250">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link MemoryMXBean}.                
            </javadoc>
            <declaration name="OPERATING_SYSTEM_MXBEAN_NAME" type="String" line="257"/>
            <javadoc line="257">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link OperatingSystemMXBean}.                
            </javadoc>
            <declaration name="RUNTIME_MXBEAN_NAME" type="String" line="264"/>
            <javadoc line="264">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link RuntimeMXBean}.                
            </javadoc>
            <declaration name="THREAD_MXBEAN_NAME" type="String" line="271"/>
            <javadoc line="271">
                String representation of the
                  &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link ThreadMXBean}.                
            </javadoc>
            <declaration name="GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE" type="String" line="278"/>
            <javadoc line="278">
                The domain name and the type key property in
                  the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link GarbageCollectorMXBean}.
                  The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt;
                  can be formed by appending this string with
                  &quot;&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;collector&apos;s name&lt;/i&gt;&quot;.                
            </javadoc>
            <declaration name="MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE" type="String" line="288"/>
            <javadoc line="288">
                The domain name and the type key property in
                  the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link MemoryManagerMXBean}.
                  The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;MemoryManagerMXBean&lt;/tt&gt;
                  can be formed by appending this string with
                  &quot;&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;manager&apos;s name&lt;/i&gt;&quot;.                
            </javadoc>
            <declaration name="MEMORY_POOL_MXBEAN_DOMAIN_TYPE" type="String" line="298"/>
            <javadoc line="298">
                The domain name and the type key property in
                  the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link MemoryPoolMXBean}.
                  The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;MemoryPoolMXBean&lt;/tt&gt;
                  can be formed by appending this string with
                  &lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;pool&apos;s name&lt;/i&gt;.                
            </javadoc>
            <javadoc line="308">
                Returns the managed bean for the class loading system of
                  the Java virtual machine.                
                <return>
                    a {@link ClassLoadingMXBean} object for
                      the Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getClassLoadingMXBean" type="ClassLoadingMXBean" line="315"/>
            <javadoc line="319">
                Returns the managed bean for the memory system of
                  the Java virtual machine.                
                <return>
                    a {@link MemoryMXBean} object for the Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getMemoryMXBean" type="MemoryMXBean" line="325"/>
            <javadoc line="329">
                Returns the managed bean for the thread system of
                  the Java virtual machine.                
                <return>
                    a {@link ThreadMXBean} object for the Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getThreadMXBean" type="ThreadMXBean" line="335"/>
            <javadoc line="339">
                Returns the managed bean for the runtime system of
                  the Java virtual machine.                
                <return>
                    a {@link RuntimeMXBean} object for the Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getRuntimeMXBean" type="RuntimeMXBean" line="346"/>
            <javadoc line="350">
                Returns the managed bean for the compilation system of
                  the Java virtual machine.  This method returns &lt;tt&gt;null&lt;/tt&gt;
                  if the Java virtual machine has no compilation system.                
                <return>
                    a {@link CompilationMXBean} object for the Java virtual
                      machine or <tt>null</tt> if the Java virtual machine has
                      no compilation system.                    
                </return>
            </javadoc>
            <method name="getCompilationMXBean" type="CompilationMXBean" line="359"/>
            <javadoc line="363">
                Returns the managed bean for the operating system on which
                  the Java virtual machine is running.                
                <return>
                    an {@link OperatingSystemMXBean} object for
                      the Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getOperatingSystemMXBean" type="OperatingSystemMXBean" line="370"/>
            <javadoc line="374">
                Returns a list of {@link MemoryPoolMXBean} objects in the
                  Java virtual machine.
                  The Java virtual machine can have one or more memory pools.
                  It may add or remove memory pools during execution.                
                <return>
                    a list of <tt>MemoryPoolMXBean</tt> objects.                    
                </return>
            </javadoc>
            <method name="getMemoryPoolMXBeans" type="List<MemoryPoolMXBean>" line="383"/>
            <javadoc line="387">
                Returns a list of {@link MemoryManagerMXBean} objects
                  in the Java virtual machine.
                  The Java virtual machine can have one or more memory managers.
                  It may add or remove memory managers during execution.                
                <return>
                    a list of <tt>MemoryManagerMXBean</tt> objects.                    
                </return>
            </javadoc>
            <method name="getMemoryManagerMXBeans" type="List<MemoryManagerMXBean>" line="396"/>
            <javadoc line="401">
                Returns a list of {@link GarbageCollectorMXBean} objects
                  in the Java virtual machine.
                  The Java virtual machine may have one or more
                  &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt; objects.
                  It may add or remove &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt;
                  during execution.                
                <return>
                    a list of <tt>GarbageCollectorMXBean</tt> objects.                    
                </return>
            </javadoc>
            <method name="getGarbageCollectorMXBeans" type="List<GarbageCollectorMXBean>" line="412"/>
            <declaration name="platformMBeanServer" type="MBeanServer" line="416"/>
            <javadoc line="417">
                Returns the platform {@link javax.management.MBeanServer MBeanServer}.
                  On the first call to this method, it first creates the platform{@code MBeanServer} by calling the{@link javax.management.MBeanServerFactory#createMBeanServerMBeanServerFactory.createMBeanServer}method and registers each platform MXBean in this platform{@code MBeanServer} with its{@link PlatformManagedObject#getObjectName ObjectName}.
                  This method, in subsequent calls, will simply return the
                  initially created platform {@code MBeanServer}.
                  &lt;p&gt;
                  MXBeans that get created and destroyed dynamically, for example,
                  memory {@link MemoryPoolMXBean pools} and{@link MemoryManagerMXBean managers},
                  will automatically be registered and deregistered into the platform{@code MBeanServer}.
                  &lt;p&gt;
                  If the system property {@code javax.management.builder.initial}is set, the platform {@code MBeanServer} creation will be done
                  by the specified {@link javax.management.MBeanServerBuilder}.
                  &lt;p&gt;
                  It is recommended that this platform MBeanServer also be used
                  to register other application managed beans
                  besides the platform MXBeans.
                  This will allow all MBeans to be published through the same{@code MBeanServer} and hence allow for easier network publishing
                  and discovery.
                  Name conflicts with the platform MXBeans should be avoided.                
                <return>
                    the platform {@code MBeanServer}; the platform
                      MXBeans are registered into the platform {@code MBeanServer}at the first time this method is called.                    
                </return>
                <exception>
                    SecurityException if there is a security manager
                      and the caller does not have the permission required by{@link javax.management.MBeanServerFactory#createMBeanServer}.                    
                </exception>
                <see>
                    javax.management.MBeanServerFactory                    
                </see>
                <see>
                    javax.management.MBeanServerFactory#createMBeanServer                    
                </see>
            </javadoc>
            <method name="getPlatformMBeanServer" type="MBeanServer" line="458">
                <comment line="472">
                    Each PlatformComponent represents one management
                     interface. Some MXBean may extend another one.
                     The MXBean instances for one platform component
                     (returned by pc.getMXBeans()) might be also
                     the MXBean instances for another platform component.
                     e.g. com.sun.management.GarbageCollectorMXBean
                    
                     So need to check if an MXBean instance is registered
                     before registering into the platform MBeanServer                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="459"/>
                <scope line="460">
                    <declaration name="perm" type="Permission" line="461"/>
                </scope>
                <scope line="465">
                    <scope line="467">
                        <declaration name="list" type="List&lt;? extends PlatformManagedObject&gt;" line="468"/>
                        <scope line="470">
                            <scope line="480"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="489">
                Returns a proxy for a platform MXBean interface of a
                  given &lt;a href=&quot;#MXBeanNames&quot;&gt;MXBean name&lt;/a&gt;
                  that forwards its method calls through the given
                  &lt;tt&gt;MBeanServerConnection&lt;/tt&gt;.
                  &lt;p&gt;This method is equivalent to:
                  &lt;blockquote&gt;{@link java.lang.reflect.Proxy#newProxyInstanceProxy.newProxyInstance}&lt;tt&gt;(mxbeanInterface.getClassLoader(),
                  new Class[] { mxbeanInterface }, handler)&lt;/tt&gt;
                  &lt;/blockquote&gt;
                  where &lt;tt&gt;handler&lt;/tt&gt; is an {@link java.lang.reflect.InvocationHandlerInvocationHandler} to which method invocations to the MXBean interface
                  are dispatched. This &lt;tt&gt;handler&lt;/tt&gt; converts an input parameter
                  from an MXBean data type to its mapped open type before forwarding
                  to the &lt;tt&gt;MBeanServer&lt;/tt&gt; and converts a return value from
                  an MXBean method call through the &lt;tt&gt;MBeanServer&lt;/tt&gt;
                  from an open type to the corresponding return type declared in
                  the MXBean interface.
                  &lt;p&gt;
                  If the MXBean is a notification emitter (i.e.,
                  it implements{@link javax.management.NotificationEmitter NotificationEmitter}),
                  both the &lt;tt&gt;mxbeanInterface&lt;/tt&gt; and &lt;tt&gt;NotificationEmitter&lt;/tt&gt;
                  will be implemented by this proxy.
                  &lt;p&gt;
                  &lt;b&gt;Notes:&lt;/b&gt;
                  &lt;ol&gt;
                  &lt;li&gt;Using an MXBean proxy is a convenience remote access to
                  a platform MXBean of a running virtual machine.  All method
                  calls to the MXBean proxy are forwarded to an
                  &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; where{@link java.io.IOException IOException} may be thrown
                  when the communication problem occurs with the connector server.
                  An application remotely accesses the platform MXBeans using
                  proxy should prepare to catch &lt;tt&gt;IOException&lt;/tt&gt; as if
                  accessing with the &lt;tt&gt;MBeanServerConnector&lt;/tt&gt; interface.&lt;/li&gt;
                  &lt;li&gt;When a client application is designed to remotely access MXBeans
                  for a running virtual machine whose version is different than
                  the version on which the application is running,
                  it should prepare to catch{@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an
                  enum constant which is missing in the enum class loaded in
                  the client application. &lt;/li&gt;
                  &lt;li&gt;{@link javax.management.MBeanServerInvocationHandlerMBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstancenewProxyInstance} method cannot be used to create
                  a proxy for a platform MXBean. The proxy object created
                  by &lt;tt&gt;MBeanServerInvocationHandler&lt;/tt&gt; does not handle
                  the properties of the platform MXBeans described in
                  the &lt;a href=&quot;#MXBean&quot;&gt;class specification&lt;/a&gt;.
                  &lt;/li&gt;
                  &lt;/ol&gt;                
                <param>
                    connection the <tt>MBeanServerConnection</tt> to forward to.                    
                </param>
                <param>
                    mxbeanName the name of a platform MXBean within
                      <tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be
                      in the format of {@link ObjectName ObjectName}.                    
                </param>
                <param>
                    mxbeanInterface the MXBean interface to be implemented
                      by the proxy.                    
                </param>
                <throws>
                    IllegalArgumentException if
                      <ul>
                      <li><tt>mxbeanName</tt> is not with a valid{@link ObjectName ObjectName} format, or</li>
                      <li>the named MXBean in the <tt>connection</tt> is
                      not a MXBean provided by the platform, or</li>
                      <li>the named MXBean is not registered in the
                      <tt>MBeanServerConnection</tt>, or</li>
                      <li>the named MXBean is not an instance of the given
                      <tt>mxbeanInterface</tt></li>
                      </ul>                    
                </throws>
                <throws>
                    java.io.IOException if a communication problem
                      occurred when accessing the <tt>MBeanServerConnection</tt>.                    
                </throws>
            </javadoc>
            <method name="newPlatformMXBeanProxy" type="T" line="577">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="mxbeanName" type="String"/>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
                <comment line="581">
                    Only allow MXBean interfaces from rt.jar loaded by the
                     bootstrap class loader                    
                </comment>
                <comment line="596">
                    skip the isInstanceOf check for LoggingMXBean                    
                </comment>
                <comment line="604">
                    check if the registered MBean is a notification emitter                    
                </comment>
                <comment line="607">
                    create an MXBean proxy                    
                </comment>
                <declaration name="interfaceClass" type="Class" line="579"/>
                <anonymous_class line="583">
                    <method name="run" type="ClassLoader" line="584"/>
                </anonymous_class>
                <declaration name="loader" type="ClassLoader" line="582"/>
                <scope line="588"/>
                <scope line="593">
                    <declaration name="objName" type="ObjectName" line="594"/>
                    <declaration name="intfName" type="String" line="596"/>
                    <scope line="597"/>
                    <declaration name="interfaces" type="Class[]" line="602"/>
                    <declaration name="emitter" type="boolean" line="604"/>
                </scope>
                <scope line="609"/>
            </method>
            <javadoc line="614">
                Returns the platform MXBean implementing
                  the given {@code mxbeanInterface} which is specified
                  to have one single instance in the Java virtual machine.
                  This method may return {@code null} if the management interface
                  is not implemented in the Java virtual machine (for example,
                  a Java virtual machine with no compilation system does not
                  implement {@link CompilationMXBean});
                  otherwise, this method is equivalent to calling:
                  &lt;pre&gt;{@link #getPlatformMXBeans(Class)getPlatformMXBeans(mxbeanInterface)}.get(0);
                  &lt;/pre&gt;                
                <param>
                    mxbeanInterface a management interface for a platform
                      MXBean with one single instance in the Java virtual machine
                      if implemented.                    
                </param>
                <return>
                    the platform MXBean that implements{@code mxbeanInterface}, or {@code null} if not exist.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or
                      not a singleton platform MXBean.                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getPlatformMXBean" type="T" line="642">
                <params>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
                <declaration name="pc" type="PlatformComponent" line="643"/>
            </method>
            <javadoc line="654">
                Returns the list of platform MXBeans implementing
                  the given {@code mxbeanInterface} in the Java
                  virtual machine.
                  The returned list may contain zero, one, or more instances.
                  The number of instances in the returned list is defined
                  in the specification of the given management interface.
                  The order is undefined and there is no guarantee that
                  the list returned is in the same order as previous invocations.                
                <param>
                    mxbeanInterface a management interface for a platform
                      MXBean                    
                </param>
                <return>
                    the list of platform MXBeans that implement{@code mxbeanInterface}.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getPlatformMXBeans" type="List<T>" line="676">
                <params>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
                <declaration name="pc" type="PlatformComponent" line="677"/>
            </method>
            <javadoc line="684">
                Returns the platform MXBean proxy for{@code mxbeanInterface} which is specified to have one single
                  instance in a Java virtual machine and the proxy will
                  forward the method calls through the given {@code MBeanServerConnection}.
                  This method may return {@code null} if the management interface
                  is not implemented in the Java virtual machine being monitored
                  (for example, a Java virtual machine with no compilation system
                  does not implement {@link CompilationMXBean});
                  otherwise, this method is equivalent to calling:
                  &lt;pre&gt;{@link #getPlatformMXBeans(MBeanServerConnection,Class)getPlatformMXBeans(connection, mxbeanInterface)}.get(0);
                  &lt;/pre&gt;                
                <param>
                    connection the {@code MBeanServerConnection} to forward to.                    
                </param>
                <param>
                    mxbeanInterface a management interface for a platform
                      MXBean with one single instance in the Java virtual machine
                      being monitored, if implemented.                    
                </param>
                <return>
                    the platform MXBean proxy for
                      forwarding the method calls of the {@code mxbeanInterface}through the given {@code MBeanServerConnection},
                      or {@code null} if not exist.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or
                      not a singleton platform MXBean.                    
                </throws>
                <throws>
                    java.io.IOException if a communication problem
                      occurred when accessing the {@code MBeanServerConnection}.                    
                </throws>
                <see>
                    #newPlatformMXBeanProxy                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getPlatformMXBean" type="T" line="722">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
                <declaration name="pc" type="PlatformComponent" line="723"/>
            </method>
            <javadoc line="733">
                Returns the list of the platform MXBean proxies for
                  forwarding the method calls of the {@code mxbeanInterface}through the given {@code MBeanServerConnection}.
                  The returned list may contain zero, one, or more instances.
                  The number of instances in the returned list is defined
                  in the specification of the given management interface.
                  The order is undefined and there is no guarantee that
                  the list returned is in the same order as previous invocations.                
                <param>
                    connection the {@code MBeanServerConnection} to forward to.                    
                </param>
                <param>
                    mxbeanInterface a management interface for a platform
                      MXBean                    
                </param>
                <return>
                    the list of platform MXBean proxies for
                      forwarding the method calls of the {@code mxbeanInterface}through the given {@code MBeanServerConnection}.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.                    
                </throws>
                <throws>
                    java.io.IOException if a communication problem
                      occurred when accessing the {@code MBeanServerConnection}.                    
                </throws>
                <see>
                    #newPlatformMXBeanProxy                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getPlatformMXBeans" type="List<T>" line="764">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
                <declaration name="pc" type="PlatformComponent" line="765"/>
                <scope line="766"/>
            </method>
            <javadoc line="773">
                Returns the set of {@code Class} objects, subinterface of{@link PlatformManagedObject}, representing
                  all management interfaces for
                  monitoring and managing the Java platform.                
                <return>
                    the set of {@code Class} objects, subinterface of{@link PlatformManagedObject} representing
                      the management interfaces for
                      monitoring and managing the Java platform.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getPlatformManagementInterfaces" type="Set<Class<? extends PlatformManagedObject>>" line="788">
                <declaration name="result" type="Set&lt;Class&lt;? extends PlatformManagedObject&gt;&gt;" line="789"/>
                <scope line="791"/>
            </method>
            <declaration name="NOTIF_EMITTER" type="String" line="797"/>
            <javadoc line="800">
                Registers an MXBean.                
            </javadoc>
            <method name="addMXBean" type="void" line="803">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="pmo" type="PlatformManagedObject"/>
                </params>
                <comment line="805">
                    Make DynamicMBean out of MXBean by wrapping it with a StandardMBean                    
                </comment>
                <declaration name="dmbean" type="DynamicMBean" line="805"/>
                <scope line="806"/>
                <scope line="808"/>
                <scope line="810"/>
                <scope line="814">
                    <anonymous_class line="815">
                        <method name="run" type="Void" line="818"/>
                    </anonymous_class>
                </scope>
                <scope line="823"/>
            </method>
        </class>
    </source>