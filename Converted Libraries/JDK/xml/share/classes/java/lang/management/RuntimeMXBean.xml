<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <interface name="RuntimeMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="2">
                The management interface for the runtime system of
                  the Java virtual machine.
                  &lt;p&gt; A Java virtual machine has a single instance of the implementation
                  class of this interface.  This instance implementing this interface is
                  an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
                  that can be obtained by calling
                  the {@link ManagementFactory#getRuntimeMXBean} method or
                  from the {@link ManagementFactory#getPlatformMBeanServerplatform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.
                  &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
                  the runtime system within an MBeanServer is:
                  &lt;blockquote&gt;{@link ManagementFactory#RUNTIME_MXBEAN_NAME&lt;tt&gt;java.lang:type=Runtime&lt;/tt&gt;}&lt;/blockquote&gt;
                  It can be obtained by calling the{@link PlatformManagedObject#getObjectName} method.
                  &lt;p&gt; This interface defines several convenient methods for accessing
                  system properties about the Java virtual machine.                
                <see>
                    ManagementFactory#getPlatformMXBeans(Class)                    
                </see>
                <see>
                    <a href="../../../javax/management/package-summary.html">
                           JMX Specification.</a>                    
                </see>
                <see>
                    <a href="package-summary.html#examples">
                           Ways to Access MXBeans</a>                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="26"/>
            <javadoc line="26">
                Returns the name representing the running Java virtual machine.
                  The returned name string can be any arbitrary string and
                  a Java virtual machine implementation can choose
                  to embed platform-specific useful information in the
                  returned name string.  Each running virtual machine could have
                  a different name.                
                <return>
                    the name representing the running Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getVmName" type="String" line="36"/>
            <javadoc line="36">
                Returns the Java virtual machine implementation name.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.name&quot;)}.                
                <return>
                    the Java virtual machine implementation name.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getVmVendor" type="String" line="47"/>
            <javadoc line="47">
                Returns the Java virtual machine implementation vendor.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.vendor&quot;)}.                
                <return>
                    the Java virtual machine implementation vendor.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getVmVersion" type="String" line="58"/>
            <javadoc line="58">
                Returns the Java virtual machine implementation version.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.version&quot;)}.                
                <return>
                    the Java virtual machine implementation version.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getSpecName" type="String" line="69"/>
            <javadoc line="69">
                Returns the Java virtual machine specification name.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.specification.name&quot;)}.                
                <return>
                    the Java virtual machine specification name.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getSpecVendor" type="String" line="80"/>
            <javadoc line="80">
                Returns the Java virtual machine specification vendor.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.specification.vendor&quot;)}.                
                <return>
                    the Java virtual machine specification vendor.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getSpecVersion" type="String" line="91"/>
            <javadoc line="91">
                Returns the Java virtual machine specification version.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.vm.specification.version&quot;)}.                
                <return>
                    the Java virtual machine specification version.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getManagementSpecVersion" type="String" line="102"/>
            <javadoc line="102">
                Returns the version of the specification for the management interface
                  implemented by the running Java virtual machine.                
                <return>
                    the version of the specification for the management interface
                      implemented by the running Java virtual machine.                    
                </return>
            </javadoc>
            <method name="getClassPath" type="String" line="109"/>
            <javadoc line="109">
                Returns the Java class path that is used by the system class loader
                  to search for class files.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.class.path&quot;)}.
                  &lt;p&gt; Multiple paths in the Java class path are separated by the
                  path separator character of the platform of the Java virtual machine
                  being monitored.                
                <return>
                    the Java class path.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getLibraryPath" type="String" line="124"/>
            <javadoc line="124">
                Returns the Java library path.
                  This method is equivalent to {@link System#getPropertySystem.getProperty(&quot;java.library.path&quot;)}.
                  &lt;p&gt; Multiple paths in the Java library path are separated by the
                  path separator character of the platform of the Java virtual machine
                  being monitored.                
                <return>
                    the Java library path.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="isBootClassPathSupported" type="boolean" line="138"/>
            <javadoc line="138">
                Tests if the Java virtual machine supports the boot class path
                  mechanism used by the bootstrap class loader to search for class
                  files.                
                <return>
                    <tt>true</tt> if the Java virtual machine supports the
                      class path mechanism; <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="getBootClassPath" type="String" line="146"/>
            <javadoc line="146">
                Returns the boot class path that is used by the bootstrap class loader
                  to search for class files.
                  &lt;p&gt; Multiple paths in the boot class path are separated by the
                  path separator character of the platform on which the Java
                  virtual machine is running.
                  &lt;p&gt;A Java virtual machine implementation may not support
                  the boot class path mechanism for the bootstrap class loader
                  to search for class files.
                  The {@link #isBootClassPathSupported} method can be used
                  to determine if the Java virtual machine supports this method.                
                <return>
                    the boot class path.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationExceptionif the Java virtual machine does not support this operation.                    
                </throws>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getInputArguments" type="java.util.List<String>" line="163"/>
            <javadoc line="163">
                Returns the input arguments passed to the Java virtual machine
                  which does not include the arguments to the &lt;tt&gt;main&lt;/tt&gt; method.
                  This method returns an empty list if there is no input argument
                  to the Java virtual machine.
                  &lt;p&gt;
                  Some Java virtual machine implementations may take input arguments
                  from multiple different sources: for examples, arguments passed from
                  the application that launches the Java virtual machine such as
                  the &apos;java&apos; command, environment variables, configuration files, etc.
                  &lt;p&gt;
                  Typically, not all command-line options to the &apos;java&apos; command
                  are passed to the Java virtual machine.
                  Thus, the returned input arguments may not
                  include all command-line options.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;List&lt;String&gt;&lt;/tt&gt; is &lt;tt&gt;String[]&lt;/tt&gt;.                
                <return>
                    a list of <tt>String</tt> objects; each element
                      is an argument passed to the Java virtual machine.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getUptime" type="long" line="187"/>
            <javadoc line="187">
                Returns the uptime of the Java virtual machine in milliseconds.                
                <return>
                    uptime of the Java virtual machine in milliseconds.                    
                </return>
            </javadoc>
            <method name="getStartTime" type="long" line="192"/>
            <javadoc line="192">
                Returns the start time of the Java virtual machine in milliseconds.
                  This method returns the approximate time when the Java virtual
                  machine started.                
                <return>
                    start time of the Java virtual machine in milliseconds.                    
                </return>
            </javadoc>
            <method name="getSystemProperties" type="java.util.Map<String,String>" line="199"/>
            <javadoc line="199">
                Returns a map of names and values of all system properties.
                  This method calls {@link System#getProperties} to get all
                  system properties.  Properties whose name or value is not
                  a &lt;tt&gt;String&lt;/tt&gt; are omitted.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;Map&lt;String,String&gt;&lt;/tt&gt; is{@link javax.management.openmbean.TabularData TabularData}with two items in each row as follows:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Item Name&lt;/th&gt;
                  &lt;th&gt;Item Type&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;key&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;value&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;                
                <return>
                    a map of names and values of all system properties.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to the system properties.                    
                </throws>
            </javadoc>
        </interface>
    </source>