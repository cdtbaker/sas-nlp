<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="javax.management.openmbean.CompositeData"/>
        <import package="sun.management.MemoryUsageCompositeData"/>
        <class name="MemoryUsage" line="31">
            <javadoc line="31">
                A &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represents a snapshot of memory usage.
                  Instances of the &lt;tt&gt;MemoryUsage&lt;/tt&gt; class are usually constructed
                  by methods that are used to obtain memory usage
                  information about individual memory pool of the Java virtual machine or
                  the heap or non-heap memory of the Java virtual machine as a whole.
                  &lt;p&gt; A &lt;tt&gt;MemoryUsage&lt;/tt&gt; object contains four values:
                  &lt;ul&gt;
                  &lt;table&gt;
                  &lt;tr&gt;
                  &lt;td valign=top&gt; &lt;tt&gt;init&lt;/tt&gt; &lt;/td&gt;
                  &lt;td valign=top&gt; represents the initial amount of memory (in bytes) that
                  the Java virtual machine requests from the operating system
                  for memory management during startup.  The Java virtual machine
                  may request additional memory from the operating system and
                  may also release memory to the system over time.
                  The value of &lt;tt&gt;init&lt;/tt&gt; may be undefined.
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=top&gt; &lt;tt&gt;used&lt;/tt&gt; &lt;/td&gt;
                  &lt;td valign=top&gt; represents the amount of memory currently used (in bytes).
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=top&gt; &lt;tt&gt;committed&lt;/tt&gt; &lt;/td&gt;
                  &lt;td valign=top&gt; represents the amount of memory (in bytes) that is
                  guaranteed to be available for use by the Java virtual machine.
                  The amount of committed memory may change over time (increase
                  or decrease).  The Java virtual machine may release memory to
                  the system and &lt;tt&gt;committed&lt;/tt&gt; could be less than &lt;tt&gt;init&lt;/tt&gt;.
                  &lt;tt&gt;committed&lt;/tt&gt; will always be greater than
                  or equal to &lt;tt&gt;used&lt;/tt&gt;.
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td valign=top&gt; &lt;tt&gt;max&lt;/tt&gt; &lt;/td&gt;
                  &lt;td valign=top&gt; represents the maximum amount of memory (in bytes)
                  that can be used for memory management. Its value may be undefined.
                  The maximum amount of memory may change over time if defined.
                  The amount of used and committed memory will always be less than
                  or equal to &lt;tt&gt;max&lt;/tt&gt; if &lt;tt&gt;max&lt;/tt&gt; is defined.
                  A memory allocation may fail if it attempts to increase the
                  used memory such that &lt;tt&gt;used &amp;gt committed&lt;/tt&gt; even
                  if &lt;tt&gt;used &amp;lt= max&lt;/tt&gt; would still be true (for example,
                  when the system is low on virtual memory).
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/ul&gt;
                  Below is a picture showing an example of a memory pool:
                  &lt;p&gt;
                  &lt;pre&gt;
                  +----------------------------------------------+
                  +////////////////           |                  +
                  +////////////////           |                  +
                  +----------------------------------------------+
                  |--------|
                  init
                  |---------------|
                  used
                  |---------------------------|
                  committed
                  |----------------------------------------------|
                  max
                  &lt;/pre&gt;
                  &lt;h4&gt;MXBean Mapping&lt;/h4&gt;
                  &lt;tt&gt;MemoryUsage&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}with attributes as specified in the {@link #from from} method.                
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="init" type="long" line="109"/>
            <declaration name="used" type="long" line="110"/>
            <declaration name="committed" type="long" line="111"/>
            <declaration name="max" type="long" line="112"/>
            <javadoc line="114">
                Constructs a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object.                
                <param>
                    init      the initial amount of memory in bytes that
                      the Java virtual machine allocates;
                      or &lt;tt&gt;-1&lt;/tt&gt; if undefined.                    
                </param>
                <param>
                    used      the amount of used memory in bytes.                    
                </param>
                <param>
                    committed the amount of committed memory in bytes.                    
                </param>
                <param>
                    max       the maximum amount of memory in bytes that
                      can be used; or &lt;tt&gt;-1&lt;/tt&gt; if undefined.                    
                </param>
                <throws>
                    IllegalArgumentException if
                      &lt;ul&gt;
                      &lt;li&gt; the value of &lt;tt&gt;init&lt;/tt&gt; or &lt;tt&gt;max&lt;/tt&gt; is negative
                      but not &lt;tt&gt;-1&lt;/tt&gt;; or&lt;/li&gt;
                      &lt;li&gt; the value of &lt;tt&gt;used&lt;/tt&gt; or &lt;tt&gt;committed&lt;/tt&gt; is negative;
                      or&lt;/li&gt;
                      &lt;li&gt; &lt;tt&gt;used&lt;/tt&gt; is greater than the value of &lt;tt&gt;committed&lt;/tt&gt;;
                      or&lt;/li&gt;
                      &lt;li&gt; &lt;tt&gt;committed&lt;/tt&gt; is greater than the value of &lt;tt&gt;max&lt;/tt&gt;
                      &lt;tt&gt;max&lt;/tt&gt; if defined.&lt;/li&gt;
                      &lt;/ul&gt;                    
                </throws>
            </javadoc>
            <method name="MemoryUsage" type="constructor" line="140">
                <params>
                    <param name="init" type="long"/>
                    <param name="used" type="long"/>
                    <param name="committed" type="long"/>
                    <param name="max" type="long"/>
                </params>
                <scope line="141"/>
                <scope line="145"/>
                <scope line="149"/>
                <scope line="153"/>
                <scope line="157"/>
                <scope line="161"/>
            </method>
            <javadoc line="172">
                Constructs a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object from a{@link CompositeData CompositeData}.                
            </javadoc>
            <method name="MemoryUsage" type="constructor" line="176">
                <params>
                    <param name="cd" type="CompositeData"/>
                </params>
                <comment line="178">
                    validate the input composite data                    
                </comment>
            </method>
            <javadoc line="186">
                Returns the amount of memory in bytes that the Java virtual machine
                  initially requests from the operating system for memory management.
                  This method returns &lt;tt&gt;-1&lt;/tt&gt; if the initial memory size is undefined.                
                <return>
                    the initial size of memory in bytes;
                      &lt;tt&gt;-1&lt;/tt&gt; if undefined.                    
                </return>
            </javadoc>
            <method name="getInit" type="long" line="194"/>
            <javadoc line="198">
                Returns the amount of used memory in bytes.                
                <return>
                    the amount of used memory in bytes.                    
                </return>
            </javadoc>
            <method name="getUsed" type="long" line="204"/>
            <javadoc line="208">
                Returns the amount of memory in bytes that is committed for
                  the Java virtual machine to use.  This amount of memory is
                  guaranteed for the Java virtual machine to use.                
                <return>
                    the amount of committed memory in bytes.                    
                </return>
            </javadoc>
            <method name="getCommitted" type="long" line="216"/>
            <javadoc line="220">
                Returns the maximum amount of memory in bytes that can be
                  used for memory management.  This method returns &lt;tt&gt;-1&lt;/tt&gt;
                  if the maximum memory size is undefined.
                  &lt;p&gt; This amount of memory is not guaranteed to be available
                  for memory management if it is greater than the amount of
                  committed memory.  The Java virtual machine may fail to allocate
                  memory even if the amount of used memory does not exceed this
                  maximum size.                
                <return>
                    the maximum amount of memory in bytes;
                      &lt;tt&gt;-1&lt;/tt&gt; if undefined.                    
                </return>
            </javadoc>
            <method name="getMax" type="long" line="234"/>
            <javadoc line="238">
                Returns a descriptive representation of this memory usage.                
            </javadoc>
            <method name="toString" type="String" line="241">
                <declaration name="buf" type="StringBuffer" line="242"/>
            </method>
            <javadoc line="251">
                Returns a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represented by the
                  given &lt;tt&gt;CompositeData&lt;/tt&gt;. The given &lt;tt&gt;CompositeData&lt;/tt&gt;
                  must contain the following attributes:
                  &lt;p&gt;
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th align=left&gt;Attribute Name&lt;/th&gt;
                  &lt;th align=left&gt;Type&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;init&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;used&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;committed&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;max&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;                
                <param>
                    cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;MemoryUsage&lt;/tt&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
                      represent a &lt;tt&gt;MemoryUsage&lt;/tt&gt; with the attributes described
                      above.                    
                </throws>
                <return>
                    a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represented by &lt;tt&gt;cd&lt;/tt&gt;
                      if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
                      &lt;tt&gt;null&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="from" type="MemoryUsage" line="291">
                <params>
                    <param name="cd" type="CompositeData"/>
                </params>
                <scope line="292"/>
                <scope line="296"/>
                <scope line="298"/>
            </method>
        </class>
    </source>