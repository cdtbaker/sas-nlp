<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <interface name="OperatingSystemMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="2">
                The management interface for the operating system on which
                  the Java virtual machine is running.
                  &lt;p&gt; A Java virtual machine has a single instance of the implementation
                  class of this interface.  This instance implementing this interface is
                  an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
                  that can be obtained by calling
                  the {@link ManagementFactory#getOperatingSystemMXBean} method or
                  from the {@link ManagementFactory#getPlatformMBeanServerplatform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.
                  &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
                  the operating system within an MBeanServer is:
                  &lt;blockquote&gt;{@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME&lt;tt&gt;java.lang:type=OperatingSystem&lt;/tt&gt;}&lt;/blockquote&gt;
                  It can be obtained by calling the{@link PlatformManagedObject#getObjectName} method.
                  &lt;p&gt; This interface defines several convenient methods for accessing
                  system properties about the operating system on which the Java
                  virtual machine is running.                
                <see>
                    ManagementFactory#getPlatformMXBeans(Class)                    
                </see>
                <see>
                    <a href="../../../javax/management/package-summary.html">
                           JMX Specification.</a>                    
                </see>
                <see>
                    <a href="package-summary.html#examples">
                           Ways to Access MXBeans</a>                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="27"/>
            <javadoc line="27">
                Returns the operating system name.
                  This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.name&quot;)&lt;/tt&gt;.                
                <return>
                    the operating system name.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getArch" type="String" line="38"/>
            <javadoc line="38">
                Returns the operating system architecture.
                  This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.arch&quot;)&lt;/tt&gt;.                
                <return>
                    the operating system architecture.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getVersion" type="String" line="49"/>
            <javadoc line="49">
                Returns the operating system version.
                  This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.version&quot;)&lt;/tt&gt;.                
                <return>
                    the operating system version.                    
                </return>
                <throws>
                    java.lang.SecurityExceptionif a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow access
                      to this system property.                    
                </throws>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty                    
                </see>
            </javadoc>
            <method name="getAvailableProcessors" type="int" line="60"/>
            <javadoc line="60">
                Returns the number of processors available to the Java virtual machine.
                  This method is equivalent to the {@link Runtime#availableProcessors()}method.
                  &lt;p&gt; This value may change during a particular invocation of
                  the virtual machine.                
                <return>
                    the number of processors available to the virtual
                      machine; never smaller than one.                    
                </return>
            </javadoc>
            <method name="getSystemLoadAverage" type="double" line="69"/>
            <javadoc line="69">
                Returns the system load average for the last minute.
                  The system load average is the sum of the number of runnable entities
                  queued to the {@linkplain #getAvailableProcessors available processors}and the number of runnable entities running on the available processors
                  averaged over a period of time.
                  The way in which the load average is calculated is operating system
                  specific but is typically a damped time-dependent average.
                  &lt;p&gt;
                  If the load average is not available, a negative value is returned.
                  &lt;p&gt;
                  This method is designed to provide a hint about the system load
                  and may be queried frequently.
                  The load average may be unavailable on some platform where it is
                  expensive to implement this method.                
                <return>
                    the system load average; or a negative value if not available.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>