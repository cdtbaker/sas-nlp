<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <interface name="PlatformLoggingMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="28">
                The management interface for the {@linkplain java.util.logging logging} facility.
                  &lt;p&gt;There is a single global instance of the &lt;tt&gt;PlatformLoggingMXBean&lt;/tt&gt;.
                  The {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)ManagementFactory.getPlatformMXBean} method can be used to obtain
                  the {@code PlatformLoggingMXBean} object as follows:
                  &lt;pre&gt;
                  PlatformLoggingMXBean logging = ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class);
                  &lt;/pre&gt;
                  The {@code PlatformLoggingMXBean} object is also registered with the
                  platform {@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServerMBeanServer}.
                  The {@link javax.management.ObjectName ObjectName} for uniquely
                  identifying the {@code PlatformLoggingMXBean} within an MBeanServer is:
                  &lt;pre&gt;{@link java.util.logging.LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}&lt;/pre&gt;
                  &lt;p&gt;The instance registered in the platform &lt;tt&gt;MBeanServer&lt;/tt&gt; with
                  this {@code ObjectName} implements all attributes defined by{@link java.util.logging.LoggingMXBean}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getLoggerNames" type="java.util.List<String>" line="55"/>
            <javadoc line="55">
                Returns the list of the currently registered{@linkplain java.util.logging.Logger logger} names. This method
                  calls {@link java.util.logging.LogManager#getLoggerNames} and
                  returns a list of the logger names.                
                <return>
                    A list of {@code String} each of which is a
                      currently registered {@code Logger} name.                    
                </return>
            </javadoc>
            <method name="getLoggerLevel" type="String" line="66"/>
            <javadoc line="66">
                Gets the name of the log {@linkplain java.util.logging.Logger#getLevellevel} associated with the specified logger.
                  If the specified logger does not exist, {@code null}is returned.
                  This method first finds the logger of the given name and
                  then returns the name of the log level by calling:
                  &lt;blockquote&gt;{@link java.util.logging.Logger#getLevelLogger.getLevel()}.{@link java.util.logging.Level#getName getName()};
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  If the {@code Level} of the specified logger is {@code null},
                  which means that this logger&apos;s effective level is inherited
                  from its parent, an empty string will be returned.                
                <param>
                    loggerName The name of the {@code Logger} to be retrieved.                    
                </param>
                <return>
                    The name of the log level of the specified logger; or
                      an empty string if the log level of the specified logger
                      is {@code null}.  If the specified logger does not
                      exist, {@code null} is returned.                    
                </return>
                <see>
                    java.util.logging.Logger#getLevel                    
                </see>
            </javadoc>
            <method name="setLoggerLevel" type="void" line="94"/>
            <javadoc line="94">
                Sets the specified logger to the specified new{@linkplain java.util.logging.Logger#setLevel level}.
                  If the {@code levelName} is not {@code null}, the level
                  of the specified logger is set to the parsed{@link java.util.logging.Level Level}matching the {@code levelName}.
                  If the {@code levelName} is {@code null}, the level
                  of the specified logger is set to {@code null} and
                  the effective level of the logger is inherited from
                  its nearest ancestor with a specific (non-null) level value.                
                <param>
                    loggerName The name of the {@code Logger} to be set.
                      Must be non-null.                    
                </param>
                <param>
                    levelName The name of the level to set on the specified logger,
                      or  {@code null} if setting the level to inherit
                      from its nearest ancestor.                    
                </param>
                <throws>
                    IllegalArgumentException if the specified logger
                      does not exist, or {@code levelName} is not a valid level name.                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and if
                      the caller does not have LoggingPermission(&quot;control&quot;).                    
                </throws>
                <see>
                    java.util.logging.Logger#setLevel                    
                </see>
            </javadoc>
            <method name="getParentLoggerName" type="String" line="122"/>
            <javadoc line="122">
                Returns the name of the{@linkplain java.util.logging.Logger#getParent parent}for the specified logger.
                  If the specified logger does not exist, {@code null} is returned.
                  If the specified logger is the root {@code Logger} in the namespace,
                  the result will be an empty string.                
                <param>
                    loggerName The name of a {@code Logger}.                    
                </param>
                <return>
                    the name of the nearest existing parent logger;
                      an empty string if the specified logger is the root logger.
                      If the specified logger does not exist, {@code null}is returned.                    
                </return>
            </javadoc>
        </interface>
    </source>