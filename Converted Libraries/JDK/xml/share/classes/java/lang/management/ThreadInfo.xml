<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="javax.management.openmbean.CompositeData"/>
        <import package="sun.management.ManagementFactoryHelper"/>
        <import package="sun.management.ThreadInfoCompositeData"/>
        <import package="java.lang.Thread.State"/>
        <class name="ThreadInfo" line="33">
            <comment line="258">
                Constructs a &lt;tt&gt;ThreadInfo&lt;tt&gt; object from a
                 {@link CompositeData CompositeData}.                
            </comment>
            <javadoc line="33">
                Thread information. &lt;tt&gt;ThreadInfo&lt;/tt&gt; contains the information
                  about a thread including:
                  &lt;h4&gt;General thread information&lt;/h4&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Thread ID.&lt;/li&gt;
                  &lt;li&gt;Name of the thread.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;h4&gt;Execution information&lt;/h4&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Thread state.&lt;/li&gt;
                  &lt;li&gt;The object upon which the thread is blocked due to:
                  &lt;ul&gt;
                  &lt;li&gt;waiting to enter a synchronization block/method, or&lt;/li&gt;
                  &lt;li&gt;waiting to be notified in a {@link Object#wait Object.wait} method,
                  or&lt;/li&gt;
                  &lt;li&gt;parking due to a {@link java.util.concurrent.locks.LockSupport#parkLockSupport.park} call.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;The ID of the thread that owns the object
                  that the thread is blocked.&lt;/li&gt;
                  &lt;li&gt;Stack trace of the thread.&lt;/li&gt;
                  &lt;li&gt;List of object monitors locked by the thread.&lt;/li&gt;
                  &lt;li&gt;List of &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
                  ownable synchronizers&lt;/a&gt; locked by the thread.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;h4&gt;&lt;a name=&quot;SyncStats&quot;&gt;Synchronization Statistics&lt;/a&gt;&lt;/h4&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The number of times that the thread has blocked for
                  synchronization or waited for notification.&lt;/li&gt;
                  &lt;li&gt;The accumulated elapsed time that the thread has blocked
                  for synchronization or waited for notification
                  since {@link ThreadMXBean#setThreadContentionMonitoringEnabledthread contention monitoring}was enabled. Some Java virtual machine implementation
                  may not support this.  The{@link ThreadMXBean#isThreadContentionMonitoringSupported()}method can be used to determine if a Java virtual machine
                  supports this.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;This thread information class is designed for use in monitoring of
                  the system, not for synchronization control.
                  &lt;h4&gt;MXBean Mapping&lt;/h4&gt;
                  &lt;tt&gt;ThreadInfo&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}with attributes as specified in
                  the {@link #from from} method.                
                <see>
                    ThreadMXBean#getThreadInfo                    
                </see>
                <see>
                    ThreadMXBean#dumpAllThreads                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="threadName" type="String" line="93"/>
            <declaration name="threadId" type="long" line="94"/>
            <declaration name="blockedTime" type="long" line="95"/>
            <declaration name="blockedCount" type="long" line="96"/>
            <declaration name="waitedTime" type="long" line="97"/>
            <declaration name="waitedCount" type="long" line="98"/>
            <declaration name="lock" type="LockInfo" line="99"/>
            <declaration name="lockName" type="String" line="100"/>
            <declaration name="lockOwnerId" type="long" line="101"/>
            <declaration name="lockOwnerName" type="String" line="102"/>
            <declaration name="inNative" type="boolean" line="103"/>
            <declaration name="suspended" type="boolean" line="104"/>
            <declaration name="threadState" type="Thread.State" line="105"/>
            <declaration name="stackTrace" type="StackTraceElement[]" line="106"/>
            <declaration name="lockedMonitors" type="MonitorInfo[]" line="107"/>
            <declaration name="lockedSynchronizers" type="LockInfo[]" line="108"/>
            <declaration name="EMPTY_MONITORS" type="MonitorInfo[]" line="110"/>
            <declaration name="EMPTY_SYNCS" type="LockInfo[]" line="111"/>
            <javadoc line="113">
                Constructor of ThreadInfo created by the JVM                
                <param>
                    t             Thread                    
                </param>
                <param>
                    state         Thread state                    
                </param>
                <param>
                    lockObj       Object on which the thread is blocked                    
                </param>
                <param>
                    lockOwner     the thread holding the lock                    
                </param>
                <param>
                    blockedCount  Number of times blocked to enter a lock                    
                </param>
                <param>
                    blockedTime   Approx time blocked to enter a lock                    
                </param>
                <param>
                    waitedCount   Number of times waited on a lock                    
                </param>
                <param>
                    waitedTime    Approx time waited on a lock                    
                </param>
                <param>
                    stackTrace    Thread stack trace                    
                </param>
            </javadoc>
            <method name="ThreadInfo" type="constructor" line="129">
                <params>
                    <param name="t" type="Thread"/>
                    <param name="state" type="int"/>
                    <param name="lockObj" type="Object"/>
                    <param name="lockOwner" type="Thread"/>
                    <param name="blockedCount" type="long"/>
                    <param name="blockedTime" type="long"/>
                    <param name="waitedCount" type="long"/>
                    <param name="waitedTime" type="long"/>
                    <param name="stackTrace" type="StackTraceElement[]"/>
                </params>
            </method>
            <javadoc line="136">
                Constructor of ThreadInfo created by the JVM
                  for {@link ThreadMXBean#getThreadInfo(long[],boolean,boolean)}and {@link ThreadMXBean#dumpAllThreads}                
                <param>
                    t             Thread                    
                </param>
                <param>
                    state         Thread state                    
                </param>
                <param>
                    lockObj       Object on which the thread is blocked                    
                </param>
                <param>
                    lockOwner     the thread holding the lock                    
                </param>
                <param>
                    blockedCount  Number of times blocked to enter a lock                    
                </param>
                <param>
                    blockedTime   Approx time blocked to enter a lock                    
                </param>
                <param>
                    waitedCount   Number of times waited on a lock                    
                </param>
                <param>
                    waitedTime    Approx time waited on a lock                    
                </param>
                <param>
                    stackTrace    Thread stack trace                    
                </param>
                <param>
                    lockedMonitors List of locked monitors                    
                </param>
                <param>
                    lockedSynchronizers List of locked synchronizers                    
                </param>
            </javadoc>
            <method name="ThreadInfo" type="constructor" line="159">
                <params>
                    <param name="t" type="Thread"/>
                    <param name="state" type="int"/>
                    <param name="lockObj" type="Object"/>
                    <param name="lockOwner" type="Thread"/>
                    <param name="blockedCount" type="long"/>
                    <param name="blockedTime" type="long"/>
                    <param name="waitedCount" type="long"/>
                    <param name="waitedTime" type="long"/>
                    <param name="stackTrace" type="StackTraceElement[]"/>
                    <param name="monitors" type="Object[]"/>
                    <param name="stackDepths" type="int[]"/>
                    <param name="synchronizers" type="Object[]"/>
                </params>
                <declaration name="numMonitors" type="int" line="160"/>
                <declaration name="lockedMonitors" type="MonitorInfo[]" line="161"/>
                <scope line="162"/>
                <scope line="164">
                    <scope line="166">
                        <declaration name="lock" type="Object" line="167"/>
                        <declaration name="className" type="String" line="168"/>
                        <declaration name="identityHashCode" type="int" line="169"/>
                        <declaration name="depth" type="int" line="170"/>
                        <declaration name="ste" type="StackTraceElement" line="171"/>
                    </scope>
                </scope>
                <declaration name="numSyncs" type="int" line="180"/>
                <declaration name="lockedSynchronizers" type="LockInfo[]" line="181"/>
                <scope line="182"/>
                <scope line="184">
                    <scope line="186">
                        <declaration name="lock" type="Object" line="187"/>
                        <declaration name="className" type="String" line="188"/>
                        <declaration name="identityHashCode" type="int" line="189"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="201">
                Initialize ThreadInfo object                
                <param>
                    t             Thread                    
                </param>
                <param>
                    state         Thread state                    
                </param>
                <param>
                    lockObj       Object on which the thread is blocked                    
                </param>
                <param>
                    lockOwner     the thread holding the lock                    
                </param>
                <param>
                    blockedCount  Number of times blocked to enter a lock                    
                </param>
                <param>
                    blockedTime   Approx time blocked to enter a lock                    
                </param>
                <param>
                    waitedCount   Number of times waited on a lock                    
                </param>
                <param>
                    waitedTime    Approx time waited on a lock                    
                </param>
                <param>
                    stackTrace    Thread stack trace                    
                </param>
                <param>
                    lockedMonitors List of locked monitors                    
                </param>
                <param>
                    lockedSynchronizers List of locked synchronizers                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="221">
                <params>
                    <param name="t" type="Thread"/>
                    <param name="state" type="int"/>
                    <param name="lockObj" type="Object"/>
                    <param name="lockOwner" type="Thread"/>
                    <param name="blockedCount" type="long"/>
                    <param name="blockedTime" type="long"/>
                    <param name="waitedCount" type="long"/>
                    <param name="waitedTime" type="long"/>
                    <param name="stackTrace" type="StackTraceElement[]"/>
                    <param name="lockedMonitors" type="MonitorInfo[]"/>
                    <param name="lockedSynchronizers" type="LockInfo[]"/>
                </params>
                <scope line="232"/>
                <scope line="235"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="248"/>
                <scope line="250"/>
            </method>
            <method name="ThreadInfo" type="constructor" line="261">
                <params>
                    <param name="cd" type="CompositeData"/>
                </params>
                <comment line="279">
                    6.0 attributes                    
                </comment>
                <comment line="285">
                    lockInfo is a new attribute added in 1.6 ThreadInfo
                     If cd is a 5.0 version, construct the LockInfo object
                      from the lockName value.                    
                </comment>
                <declaration name="ticd" type="ThreadInfoCompositeData" line="262"/>
                <scope line="279"/>
                <scope line="283">
                    <scope line="287">
                        <declaration name="result" type="String" line="288"/>
                        <scope line="289">
                            <declaration name="identityHashCode" type="int" line="290"/>
                        </scope>
                        <scope line="292"/>
                    </scope>
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="304">
                Returns the ID of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.                
                <return>
                    the ID of the associated thread.                    
                </return>
            </javadoc>
            <method name="getThreadId" type="long" line="309"/>
            <javadoc line="313">
                Returns the name of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.                
                <return>
                    the name of the associated thread.                    
                </return>
            </javadoc>
            <method name="getThreadName" type="String" line="318"/>
            <javadoc line="322">
                Returns the state of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.                
                <return>
                    &lt;tt&gt;Thread.State&lt;/tt&gt; of the associated thread.                    
                </return>
            </javadoc>
            <method name="getThreadState" type="Thread.State" line="327"/>
            <javadoc line="331">
                Returns the approximate accumulated elapsed time (in milliseconds)
                  that the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  has blocked to enter or reenter a monitor
                  since thread contention monitoring is enabled.
                  I.e. the total accumulated time the thread has been in the{@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread
                  contention monitoring was last enabled.
                  This method returns &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring
                  is disabled.
                  &lt;p&gt;The Java virtual machine may measure the time with a high
                  resolution timer.  This statistic is reset when
                  the thread contention monitoring is reenabled.                
                <return>
                    the approximate accumulated elapsed time in milliseconds
                      that a thread entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state;
                      &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support this operation.                    
                </throws>
                <see>
                    ThreadMXBean#isThreadContentionMonitoringSupported                    
                </see>
                <see>
                    ThreadMXBean#setThreadContentionMonitoringEnabled                    
                </see>
            </javadoc>
            <method name="getBlockedTime" type="long" line="356"/>
            <javadoc line="360">
                Returns the total number of times that
                  the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  blocked to enter or reenter a monitor.
                  I.e. the number of times a thread has been in the{@link java.lang.Thread.State#BLOCKED BLOCKED} state.                
                <return>
                    the total number of times that the thread
                      entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state.                    
                </return>
            </javadoc>
            <method name="getBlockedCount" type="long" line="370"/>
            <javadoc line="374">
                Returns the approximate accumulated elapsed time (in milliseconds)
                  that the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  has waited for notification
                  since thread contention monitoring is enabled.
                  I.e. the total accumulated time the thread has been in the{@link java.lang.Thread.State#WAITING WAITING}or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
                  since thread contention monitoring is enabled.
                  This method returns &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring
                  is disabled.
                  &lt;p&gt;The Java virtual machine may measure the time with a high
                  resolution timer.  This statistic is reset when
                  the thread contention monitoring is reenabled.                
                <return>
                    the approximate accumulated elapsed time in milliseconds
                      that a thread has been in the &lt;tt&gt;WAITING&lt;/tt&gt; or
                      &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state;
                      &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support this operation.                    
                </throws>
                <see>
                    ThreadMXBean#isThreadContentionMonitoringSupported                    
                </see>
                <see>
                    ThreadMXBean#setThreadContentionMonitoringEnabled                    
                </see>
            </javadoc>
            <method name="getWaitedTime" type="long" line="401"/>
            <javadoc line="405">
                Returns the total number of times that
                  the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  waited for notification.
                  I.e. the number of times that a thread has been
                  in the {@link java.lang.Thread.State#WAITING WAITING}or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.                
                <return>
                    the total number of times that the thread
                      was in the &lt;tt&gt;WAITING&lt;/tt&gt; or &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state.                    
                </return>
            </javadoc>
            <method name="getWaitedCount" type="long" line="416"/>
            <javadoc line="420">
                Returns the &lt;tt&gt;LockInfo&lt;/tt&gt; of an object for which
                  the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is blocked waiting.
                  A thread can be blocked waiting for one of the following:
                  &lt;ul&gt;
                  &lt;li&gt;an object monitor to be acquired for entering or reentering
                  a synchronization block/method.
                  &lt;br&gt;The thread is in the {@link java.lang.Thread.State#BLOCKED BLOCKED}state waiting to enter the &lt;tt&gt;synchronized&lt;/tt&gt; statement
                  or method.
                  &lt;p&gt;&lt;/li&gt;
                  &lt;li&gt;an object monitor to be notified by another thread.
                  &lt;br&gt;The thread is in the {@link java.lang.Thread.State#WAITING WAITING}or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
                  due to a call to the {@link Object#wait Object.wait} method.
                  &lt;p&gt;&lt;/li&gt;
                  &lt;li&gt;a synchronization object responsible for the thread parking.
                  &lt;br&gt;The thread is in the {@link java.lang.Thread.State#WAITING WAITING}or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
                  due to a call to the{@link java.util.concurrent.locks.LockSupport#park(Object)LockSupport.park} method.  The synchronization object
                  is the object returned from{@link java.util.concurrent.locks.LockSupport#getBlockerLockSupport.getBlocker} method. Typically it is an
                  &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt; ownable synchronizer&lt;/a&gt;
                  or a {@link java.util.concurrent.locks.Condition Condition}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;This method returns &lt;tt&gt;null&lt;/tt&gt; if the thread is not in any of
                  the above conditions.                
                <return>
                    &lt;tt&gt;LockInfo&lt;/tt&gt; of an object for which the thread
                      is blocked waiting if any; &lt;tt&gt;null&lt;/tt&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLockInfo" type="LockInfo" line="457"/>
            <javadoc line="461">
                Returns the {@link LockInfo#toString string representation}of an object for which the thread associated with this
                  &lt;tt&gt;ThreadInfo&lt;/tt&gt; is blocked waiting.
                  This method is equivalent to calling:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  getLockInfo().toString()
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;This method will return &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
                  waiting for any object or if the object is not owned by any thread.                
                <return>
                    the string representation of the object on which
                      the thread is blocked if any;
                      &lt;tt&gt;null&lt;/tt&gt; otherwise.                    
                </return>
                <see>
                    #getLockInfo                    
                </see>
            </javadoc>
            <method name="getLockName" type="String" line="480"/>
            <javadoc line="484">
                Returns the ID of the thread which owns the object
                  for which the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is blocked waiting.
                  This method will return &lt;tt&gt;-1&lt;/tt&gt; if this thread is not blocked
                  waiting for any object or if the object is not owned by any thread.                
                <return>
                    the thread ID of the owner thread of the object
                      this thread is blocked on;
                      &lt;tt&gt;-1&lt;/tt&gt; if this thread is not blocked
                      or if the object lis not owned by any thread.                    
                </return>
                <see>
                    #getLockInfo                    
                </see>
            </javadoc>
            <method name="getLockOwnerId" type="long" line="498"/>
            <javadoc line="502">
                Returns the name of the thread which owns the object
                  for which the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is blocked waiting.
                  This method will return &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
                  waiting for any object or if the object is not owned by any thread.                
                <return>
                    the name of the thread that owns the object
                      this thread is blocked on;
                      &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
                      or if the object is not owned by any thread.                    
                </return>
                <see>
                    #getLockInfo                    
                </see>
            </javadoc>
            <method name="getLockOwnerName" type="String" line="516"/>
            <javadoc line="520">
                Returns the stack trace of the thread
                  associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.
                  If no stack trace was requested for this thread info, this method
                  will return a zero-length array.
                  If the returned array is of non-zero length then the first element of
                  the array represents the top of the stack, which is the most recent
                  method invocation in the sequence.  The last element of the array
                  represents the bottom of the stack, which is the least recent method
                  invocation in the sequence.
                  &lt;p&gt;Some Java virtual machines may, under some circumstances, omit one
                  or more stack frames from the stack trace.  In the extreme case,
                  a virtual machine that has no stack trace information concerning
                  the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is permitted to return a zero-length array from this method.                
                <return>
                    an array of &lt;tt&gt;StackTraceElement&lt;/tt&gt; objects of the thread.                    
                </return>
            </javadoc>
            <method name="getStackTrace" type="StackTraceElement[]" line="539"/>
            <javadoc line="543">
                Tests if the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is suspended.  This method returns &lt;tt&gt;true&lt;/tt&gt; if{@link Thread#suspend} has been called.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the thread is suspended;
                      &lt;tt&gt;false&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isSuspended" type="boolean" line="551"/>
            <javadoc line="555">
                Tests if the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
                  is executing native code via the Java Native Interface (JNI).
                  The JNI native code does not include
                  the virtual machine support code or the compiled native
                  code generated by the virtual machine.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the thread is executing native code;
                      &lt;tt&gt;false&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isInNative" type="boolean" line="565"/>
            <javadoc line="569">
                Returns a string representation of this thread info.
                  The format of this string depends on the implementation.
                  The returned string will typically include
                  the {@linkplain #getThreadName thread name},
                  the {@linkplain #getThreadId thread ID},
                  its {@linkplain #getThreadState state},
                  and a {@linkplain #getStackTrace stack trace} if any.                
                <return>
                    a string representation of this thread info.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="580">
                <declaration name="sb" type="StringBuilder" line="581"/>
                <scope line="584"/>
                <scope line="587"/>
                <scope line="591"/>
                <scope line="594"/>
                <declaration name="i" type="int" line="598"/>
                <scope line="599">
                    <declaration name="ste" type="StackTraceElement" line="600"/>
                    <scope line="603">
                        <declaration name="ts" type="Thread.State" line="604"/>
                    </scope>
                    <scope line="622">
                        <scope line="623"/>
                    </scope>
                </scope>
                <scope line="629"/>
                <declaration name="locks" type="LockInfo[]" line="634"/>
                <scope line="635">
                    <scope line="638"/>
                </scope>
            </method>
            <declaration name="MAX_FRAMES" type="int" line="646"/>
            <javadoc line="648">
                Returns a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object represented by the
                  given &lt;tt&gt;CompositeData&lt;/tt&gt;.
                  The given &lt;tt&gt;CompositeData&lt;/tt&gt; must contain the following attributes
                  unless otherwise specified below:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th align=left&gt;Attribute Name&lt;/th&gt;
                  &lt;th align=left&gt;Type&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;threadId&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;threadName&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;threadState&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;suspended&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;inNative&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;blockedCount&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;blockedTime&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;waitedCount&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;waitedTime&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockInfo&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData&lt;/tt&gt;
                  - the mapped type for {@link LockInfo} as specified in the
                  &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
                  type mapping rules&lt;/a&gt; of{@linkplain javax.management.MXBean MXBeans}.
                  &lt;p&gt;
                  If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
                  the &lt;tt&gt;LockInfo&lt;/tt&gt; object will be constructed from
                  the value of the &lt;tt&gt;lockName&lt;/tt&gt; attribute. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockName&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockOwnerId&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockOwnerName&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;a name=&quot;StackTrace&quot;&gt;stackTrace&lt;/a&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
                  &lt;p&gt;
                  Each element is a &lt;tt&gt;CompositeData&lt;/tt&gt; representing
                  StackTraceElement containing the following attributes:
                  &lt;blockquote&gt;
                  &lt;table cellspacing=1 cellpadding=0&gt;
                  &lt;tr&gt;
                  &lt;th align=left&gt;Attribute Name&lt;/th&gt;
                  &lt;th align=left&gt;Type&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;className&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;methodName&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;fileName&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lineNumber&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Integer&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;nativeMethod&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockedMonitors&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
                  whose element type is the mapped type for{@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.
                  &lt;p&gt;
                  If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
                  this attribute will be set to an empty array. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;lockedSynchronizers&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
                  whose element type is the mapped type for{@link LockInfo} as specified in the
                  &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
                  type mapping rules&lt;/a&gt; of{@linkplain javax.management.MXBean MXBeans}.
                  &lt;p&gt;
                  If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
                  this attribute will be set to an empty array. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;                
                <param>
                    cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;ThreadInfo&lt;/tt&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
                      represent a &lt;tt&gt;ThreadInfo&lt;/tt&gt; with the attributes described
                      above.                    
                </throws>
                <return>
                    a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object represented
                      by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
                      &lt;tt&gt;null&lt;/tt&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="from" type="ThreadInfo" line="790">
                <params>
                    <param name="cd" type="CompositeData"/>
                </params>
                <scope line="791"/>
                <scope line="795"/>
                <scope line="797"/>
            </method>
            <javadoc line="802">
                Returns an array of {@link MonitorInfo} objects, each of which
                  represents an object monitor currently locked by the thread
                  associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.
                  If no locked monitor was requested for this thread info or
                  no monitor is locked by the thread, this method
                  will return a zero-length array.                
                <return>
                    an array of &lt;tt&gt;MonitorInfo&lt;/tt&gt; objects representing
                      the object monitors locked by the thread.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLockedMonitors" type="MonitorInfo[]" line="815"/>
            <javadoc line="819">
                Returns an array of {@link LockInfo} objects, each of which
                  represents an &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable
                  synchronizer&lt;/a&gt; currently locked by the thread associated with
                  this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.  If no locked synchronizer was
                  requested for this thread info or no synchronizer is locked by
                  the thread, this method will return a zero-length array.                
                <return>
                    an array of &lt;tt&gt;LockInfo&lt;/tt&gt; objects representing
                      the ownable synchronizers locked by the thread.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLockedSynchronizers" type="LockInfo[]" line="832">
                <comment line="834">
                    represents an &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;                    
                </comment>
            </method>
            <declaration name="NO_STACK_TRACE" type="StackTraceElement[]" line="837"/>
        </class>
    </source>