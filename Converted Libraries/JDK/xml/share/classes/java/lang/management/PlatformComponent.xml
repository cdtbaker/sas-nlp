<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.management.HotSpotDiagnosticMXBean"/>
        <import package="com.sun.management.UnixOperatingSystemMXBean"/>
        <import package="sun.management.ManagementFactoryHelper"/>
        <import package="sun.management.Util"/>
        <javadoc line="44">
            This enum class defines the list of platform components
              that provides monitoring and management support.
              Each enum represents one MXBean interface. A MXBean
              instance could implement one or more MXBean interfaces.
              For example, com.sun.management.GarbageCollectorMXBean
              extends java.lang.management.GarbageCollectorMXBean
              and there is one set of garbage collection MXBean instances,
              each of which implements both c.s.m. and j.l.m. interfaces.
              There are two separate enums GARBAGE_COLLECTOR
              and SUN_GARBAGE_COLLECTOR so that ManagementFactory.getPlatformMXBeans(Class)
              will return the list of MXBeans of the specified type.
              To add a new MXBean interface for the Java platform,
              add a new enum constant and implement the MXBeanFetcher.            
        </javadoc>
        <javadoc line="63">
            Class loading system of the Java virtual machine.            
        </javadoc>
        <anonymous_class line="70">
            <method name="getMXBeans" type="List<ClassLoadingMXBean>" line="71"/>
        </anonymous_class>
        <javadoc line="76">
            Compilation system of the Java virtual machine.            
        </javadoc>
        <anonymous_class line="83">
            <method name="getMXBeans" type="List<CompilationMXBean>" line="84">
                <declaration name="m" type="CompilationMXBean" line="85"/>
                <scope line="86"/>
                <scope line="88"/>
            </method>
        </anonymous_class>
        <javadoc line="94">
            Memory system of the Java virtual machine.            
        </javadoc>
        <anonymous_class line="101">
            <method name="getMXBeans" type="List<MemoryMXBean>" line="102"/>
        </anonymous_class>
        <javadoc line="107">
            Garbage Collector in the Java virtual machine.            
        </javadoc>
        <anonymous_class line="114">
            <method name="getMXBeans" type="List<GarbageCollectorMXBean>" line="115"/>
        </anonymous_class>
        <javadoc line="121">
            Memory manager in the Java virtual machine.            
        </javadoc>
        <anonymous_class line="128">
            <method name="getMXBeans" type="List<MemoryManagerMXBean>" line="129"/>
        </anonymous_class>
        <javadoc line="135">
            Memory pool in the Java virtual machine.            
        </javadoc>
        <anonymous_class line="142">
            <method name="getMXBeans" type="List<MemoryPoolMXBean>" line="143"/>
        </anonymous_class>
        <javadoc line="148">
            Operating system on which the Java virtual machine is running            
        </javadoc>
        <anonymous_class line="155">
            <method name="getMXBeans" type="List<OperatingSystemMXBean>" line="156"/>
        </anonymous_class>
        <javadoc line="161">
            Runtime system of the Java virtual machine.            
        </javadoc>
        <anonymous_class line="168">
            <method name="getMXBeans" type="List<RuntimeMXBean>" line="169"/>
        </anonymous_class>
        <javadoc line="174">
            Threading system of the Java virtual machine.            
        </javadoc>
        <anonymous_class line="181">
            <method name="getMXBeans" type="List<ThreadMXBean>" line="182"/>
        </anonymous_class>
        <javadoc line="188">
            Logging facility.            
        </javadoc>
        <anonymous_class line="195">
            <method name="getMXBeans" type="List<PlatformLoggingMXBean>" line="196">
                <declaration name="m" type="PlatformLoggingMXBean" line="197"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
        </anonymous_class>
        <javadoc line="206">
            Buffer pools.            
        </javadoc>
        <anonymous_class line="213">
            <method name="getMXBeans" type="List<BufferPoolMXBean>" line="214"/>
        </anonymous_class>
        <javadoc line="222">
            Sun extension garbage collector that performs collections in cycles.            
        </javadoc>
        <anonymous_class line="229">
            <method name="getMXBeans" type="List<com.sun.management.GarbageCollectorMXBean>" line="230"/>
        </anonymous_class>
        <javadoc line="235">
            Sun extension operating system on which the Java virtual machine
              is running.            
        </javadoc>
        <anonymous_class line="243">
            <method name="getMXBeans" type="List<com.sun.management.OperatingSystemMXBean>" line="244"/>
        </anonymous_class>
        <javadoc line="249">
            Unix operating system.            
        </javadoc>
        <anonymous_class line="256">
            <method name="getMXBeans" type="List<UnixOperatingSystemMXBean>" line="257"/>
        </anonymous_class>
        <javadoc line="262">
            Diagnostic support for the HotSpot Virtual Machine.            
        </javadoc>
        <anonymous_class line="269">
            <method name="getMXBeans" type="List<HotSpotDiagnosticMXBean>" line="270"/>
        </anonymous_class>
        <interface name="MXBeanFetcher">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <comment line="70">
                singleton                
            </comment>
            <comment line="83">
                singleton                
            </comment>
            <comment line="101">
                singleton                
            </comment>
            <comment line="114">
                zero or more instances                
            </comment>
            <comment line="128">
                zero or more instances                
            </comment>
            <comment line="142">
                zero or more instances                
            </comment>
            <comment line="155">
                singleton                
            </comment>
            <comment line="168">
                singleton                
            </comment>
            <comment line="181">
                singleton                
            </comment>
            <comment line="195">
                singleton                
            </comment>
            <comment line="213">
                zero or more instances                
            </comment>
            <comment line="229">
                zero or more instances                
            </comment>
            <comment line="243">
                singleton                
            </comment>
            <comment line="256">
                singleton                
            </comment>
            <comment line="269">
                singleton                
            </comment>
            <javadoc line="276">
                A task that returns the MXBeans for a component.                
            </javadoc>
            <method name="getMXBeans" type="List<T>" line="280"/>
        </interface>
        <method name="getGcMXBeanList" type="List<T>" line="287">
            <params>
                <param name="gcMXBeanIntf" type="Class<T>"/>
            </params>
            <declaration name="list" type="List&lt;GarbageCollectorMXBean&gt;" line="288"/>
            <declaration name="result" type="List&lt;T&gt;" line="290"/>
            <scope line="291">
                <scope line="292"/>
            </scope>
        </method>
        <method name="getOSMXBeanList" type="List<T>" line="303">
            <params>
                <param name="osMXBeanIntf" type="Class<T>"/>
            </params>
            <declaration name="m" type="OperatingSystemMXBean" line="304"/>
            <scope line="306"/>
            <scope line="308"/>
        </method>
        <declaration name="mxbeanInterfaceName" type="String" line="313"/>
        <declaration name="domain" type="String" line="314"/>
        <declaration name="type" type="String" line="315"/>
        <declaration name="keyProperties" type="Set&lt;String&gt;" line="316"/>
        <declaration name="fetcher" type="MXBeanFetcher" line="317"/>
        <declaration name="subComponents" type="PlatformComponent[]" line="318"/>
        <declaration name="singleton" type="boolean" line="319"/>
        <method name="PlatformComponent" type="constructor" line="326">
            <params>
                <param name="intfName" type="String"/>
                <param name="domain" type="String"/>
                <param name="type" type="String"/>
                <param name="keyProperties" type="Set<String>"/>
                <param name="singleton" type="boolean"/>
                <param name="fetcher" type="MXBeanFetcher"/>
                <param name="subComponents" type="PlatformComponent"/>
            </params>
        </method>
        <declaration name="defaultKeyProps" type="Set&lt;String&gt;" line="336"/>
        <method name="defaultKeyProperties" type="Set<String>" line="337">
            <scope line="338"/>
        </method>
        <method name="keyProperties" type="Set<String>" line="344">
            <params>
                <param name="keyNames" type="String"/>
            </params>
            <declaration name="set" type="Set&lt;String&gt;" line="345"/>
            <scope line="347"/>
        </method>
        <method name="isSingleton" type="boolean" line="353"/>
        <method name="getMXBeanInterfaceName" type="String" line="357"/>
        <method name="getMXBeanInterface" type="Class<? extends PlatformManagedObject>" line="362">
            <comment line="364">
                Lazy loading the MXBean interface only when it is needed                
            </comment>
            <scope line="363"/>
            <scope line="367"/>
        </method>
        <method name="getMXBeans" type="List<T>" line="375">
            <params>
                <param name="mxbeanInterface" type="Class<T>"/>
            </params>
        </method>
        <method name="getSingletonMXBean" type="T" line="380">
            <params>
                <param name="mxbeanInterface" type="Class<T>"/>
            </params>
            <declaration name="list" type="List&lt;T&gt;" line="385"/>
        </method>
        <method name="getSingletonMXBean" type="T" line="393">
            <params>
                <param name="mbs" type="MBeanServerConnection"/>
                <param name="mxbeanInterface" type="Class<T>"/>
            </params>
            <comment line="398">
                ObjectName of a singleton MXBean contains only domain and type                
            </comment>
            <declaration name="on" type="String" line="400"/>
        </method>
        <method name="getMXBeans" type="List<T>" line="409">
            <params>
                <param name="mbs" type="MBeanServerConnection"/>
                <param name="mxbeanInterface" type="Class<T>"/>
            </params>
            <declaration name="result" type="List&lt;T&gt;" line="410"/>
            <scope line="411"/>
        </method>
        <method name="getObjectNames" type="Set<ObjectName>" line="423">
            <params>
                <param name="mbs" type="MBeanServerConnection"/>
            </params>
            <comment line="426">
                if there are more than 1 key properties (i.e. other than &quot;type&quot;)                
            </comment>
            <declaration name="domainAndType" type="String" line="424"/>
            <scope line="425"/>
            <declaration name="on" type="ObjectName" line="429"/>
            <declaration name="set" type="Set&lt;ObjectName&gt;" line="430"/>
            <scope line="431"/>
        </method>
        <declaration name="enumMap" type="Map&lt;String,PlatformComponent&gt;" line="438"/>
        <method name="ensureInitialized" type="void" line="439">
            <comment line="443">
                Use String as the key rather than Class&lt;?&gt; to avoid                
            </comment>
            <comment line="444">
                causing unnecessary class loading of management interface                
            </comment>
            <scope line="440">
                <scope line="442"/>
            </scope>
        </method>
        <method name="isPlatformMXBean" type="boolean" line="450">
            <params>
                <param name="cn" type="String"/>
            </params>
        </method>
        <method name="getPlatformComponent" type="PlatformComponent" line="457">
            <params>
                <param name="mxbeanInterface" type="Class<T>"/>
            </params>
            <declaration name="cn" type="String" line="459"/>
            <declaration name="pc" type="PlatformComponent" line="460"/>
        </method>
        <declaration name="serialVersionUID" type="long" line="466"/>
    </source>