<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <interface name="ClassLoadingMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="28">
                The management interface for the class loading system of
                  the Java virtual machine.
                  &lt;p&gt; A Java virtual machine has a single instance of the implementation
                  class of this interface.  This instance implementing this interface is
                  an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
                  that can be obtained by calling
                  the {@link ManagementFactory#getClassLoadingMXBean} method or
                  from the {@link ManagementFactory#getPlatformMBeanServerplatform &lt;tt&gt;MBeanServer&lt;/tt&gt;}.
                  &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
                  the class loading system within an &lt;tt&gt;MBeanServer&lt;/tt&gt; is:
                  &lt;blockquote&gt;{@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME&lt;tt&gt;java.lang:type=ClassLoading&lt;/tt&gt;}&lt;/blockquote&gt;
                  It can be obtained by calling the{@link PlatformManagedObject#getObjectName} method.                
                <see>
                    ManagementFactory#getPlatformMXBeans(Class)                    
                </see>
                <see>
                    <a href="../../../javax/management/package-summary.html">
                           JMX Specification.</a>                    
                </see>
                <see>
                    <a href="package-summary.html#examples">
                           Ways to Access MXBeans</a>                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTotalLoadedClassCount" type="long" line="61"/>
            <javadoc line="61">
                Returns the total number of classes that have been loaded since
                  the Java virtual machine has started execution.                
                <return>
                    the total number of classes loaded.                    
                </return>
            </javadoc>
            <method name="getLoadedClassCount" type="int" line="70"/>
            <javadoc line="70">
                Returns the number of classes that are currently loaded in the
                  Java virtual machine.                
                <return>
                    the number of currently loaded classes.                    
                </return>
            </javadoc>
            <method name="getUnloadedClassCount" type="long" line="78"/>
            <javadoc line="78">
                Returns the total number of classes unloaded since the Java virtual machine
                  has started execution.                
                <return>
                    the total number of unloaded classes.                    
                </return>
            </javadoc>
            <method name="isVerbose" type="boolean" line="86"/>
            <javadoc line="86">
                Tests if the verbose output for the class loading system is enabled.                
                <return>
                    <tt>true</tt> if the verbose output for the class loading
                      system is enabled; <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="setVerbose" type="void" line="94"/>
            <javadoc line="94">
                Enables or disables the verbose output for the class loading
                  system.  The verbose output information and the output stream
                  to which the verbose information is emitted are implementation
                  dependent.  Typically, a Java virtual machine implementation
                  prints a message each time a class file is loaded.
                  &lt;p&gt;This method can be called by multiple threads concurrently.
                  Each invocation of this method enables or disables the verbose
                  output globally.                
                <param>
                    value <tt>true</tt> to enable the verbose output;
                      <tt>false</tt> to disable.                    
                </param>
                <exception>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("control").                    
                </exception>
            </javadoc>
        </interface>
    </source>