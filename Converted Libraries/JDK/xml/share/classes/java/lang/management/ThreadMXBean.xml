<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.management">
        <import package="java.util.Map"/>
        <interface name="ThreadMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="3">
                The management interface for the thread system of
                  the Java virtual machine.
                  &lt;p&gt; A Java virtual machine has a single instance of the implementation
                  class of this interface.  This instance implementing this interface is
                  an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
                  that can be obtained by calling
                  the {@link ManagementFactory#getThreadMXBean} method or
                  from the {@link ManagementFactory#getPlatformMBeanServerplatform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.
                  &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
                  the thread system within an MBeanServer is:
                  &lt;blockquote&gt;{@link ManagementFactory#THREAD_MXBEAN_NAME&lt;tt&gt;java.lang:type=Threading&lt;/tt&gt;}&lt;/blockquote&gt;
                  It can be obtained by calling the{@link PlatformManagedObject#getObjectName} method.
                  &lt;h4&gt;Thread ID&lt;/h4&gt;
                  Thread ID is a positive long value returned by calling the{@link java.lang.Thread#getId} method for a thread.
                  The thread ID is unique during its lifetime.  When a thread
                  is terminated, this thread ID may be reused.
                  &lt;p&gt; Some methods in this interface take a thread ID or an array
                  of thread IDs as the input parameter and return per-thread information.
                  &lt;h4&gt;Thread CPU time&lt;/h4&gt;
                  A Java virtual machine implementation may support measuring
                  the CPU time for the current thread, for any thread, or for no threads.
                  &lt;p&gt;
                  The {@link #isThreadCpuTimeSupported} method can be used to determine
                  if a Java virtual machine supports measuring of the CPU time for any
                  thread.  The {@link #isCurrentThreadCpuTimeSupported} method can
                  be used to determine if a Java virtual machine supports measuring of
                  the CPU time for the current  thread.
                  A Java virtual machine implementation that supports CPU time measurement
                  for any thread will also support that for the current thread.
                  &lt;p&gt; The CPU time provided by this interface has nanosecond precision
                  but not necessarily nanosecond accuracy.
                  &lt;p&gt;
                  A Java virtual machine may disable CPU time measurement
                  by default.
                  The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled}methods can be used to test if CPU time measurement is enabled
                  and to enable/disable this support respectively.
                  Enabling thread CPU measurement could be expensive in some
                  Java virtual machine implementations.
                  &lt;h4&gt;Thread Contention Monitoring&lt;/h4&gt;
                  Some Java virtual machines may support thread contention monitoring.
                  When thread contention monitoring is enabled, the accumulated elapsed
                  time that the thread has blocked for synchronization or waited for
                  notification will be collected and returned in the
                  &lt;a href=&quot;ThreadInfo.html#SyncStats&quot;&gt;&lt;tt&gt;ThreadInfo&lt;/tt&gt;&lt;/a&gt; object.
                  &lt;p&gt;
                  The {@link #isThreadContentionMonitoringSupported} method can be used to
                  determine if a Java virtual machine supports thread contention monitoring.
                  The thread contention monitoring is disabled by default.  The{@link #setThreadContentionMonitoringEnabled} method can be used to enable
                  thread contention monitoring.
                  &lt;h4&gt;Synchronization Information and Deadlock Detection&lt;/h4&gt;
                  Some Java virtual machines may support monitoring of{@linkplain #isObjectMonitorUsageSupported object monitor usage} and{@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}.
                  The {@link #getThreadInfo(long[],boolean,boolean)} and{@link #dumpAllThreads} methods can be used to obtain the thread stack trace
                  and synchronization information including which{@linkplain LockInfo &lt;i&gt;lock&lt;/i&gt;} a thread is blocked to
                  acquire or waiting on and which locks the thread currently owns.
                  &lt;p&gt;
                  The &lt;tt&gt;ThreadMXBean&lt;/tt&gt; interface provides the{@link #findMonitorDeadlockedThreads} and{@link #findDeadlockedThreads} methods to find deadlocks in
                  the running application.                
                <see>
                    ManagementFactory#getPlatformMXBeans(Class)                    
                </see>
                <see>
                    <a href="../../../javax/management/package-summary.html">
                           JMX Specification.</a>                    
                </see>
                <see>
                    <a href="package-summary.html#examples">
                           Ways to Access MXBeans</a>                    
                </see>
                <author>
                    Mandy Chung                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getThreadCount" type="int" line="70"/>
            <javadoc line="70">
                Returns the current number of live threads including both
                  daemon and non-daemon threads.                
                <return>
                    the current number of live threads.                    
                </return>
            </javadoc>
            <method name="getPeakThreadCount" type="int" line="76"/>
            <javadoc line="76">
                Returns the peak live thread count since the Java virtual machine
                  started or peak was reset.                
                <return>
                    the peak live thread count.                    
                </return>
            </javadoc>
            <method name="getTotalStartedThreadCount" type="long" line="82"/>
            <javadoc line="82">
                Returns the total number of threads created and also started
                  since the Java virtual machine started.                
                <return>
                    the total number of threads started.                    
                </return>
            </javadoc>
            <method name="getDaemonThreadCount" type="int" line="88"/>
            <javadoc line="88">
                Returns the current number of live daemon threads.                
                <return>
                    the current number of live daemon threads.                    
                </return>
            </javadoc>
            <method name="getAllThreadIds" type="long[]" line="93"/>
            <javadoc line="93">
                Returns all live thread IDs.
                  Some threads included in the returned array
                  may have been terminated when this method returns.                
                <return>
                    an array of <tt>long</tt>, each is a thread ID.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getThreadInfo" type="ThreadInfo" line="103"/>
            <javadoc line="103">
                Returns the thread info for a thread of the specified
                  &lt;tt&gt;id&lt;/tt&gt; with no stack trace.
                  This method is equivalent to calling:
                  &lt;blockquote&gt;{@link #getThreadInfo(long,int) getThreadInfo(id, 0);}&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method returns a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object representing
                  the thread information for the thread of the specified ID.
                  The stack trace, locked monitors, and locked synchronizers
                  in the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will
                  be empty.
                  If a thread of the given ID is not alive or does not exist,
                  this method will return &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
                  it has been started and has not yet died.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
                  &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the{@link ThreadInfo#from ThreadInfo.from} method.                
                <param>
                    id the thread ID of the thread. Must be positive.                    
                </param>
                <return>
                    a {@link ThreadInfo} object for the thread of the given ID
                      with no stack trace, no locked monitor and no synchronizer info;
                      <tt>null</tt> if the thread of the given ID is not alive or
                      it does not exist.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>id &lt= 0</tt>.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getThreadInfo" type="ThreadInfo[]" line="132"/>
            <javadoc line="132">
                Returns the thread info for each thread
                  whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt; with no stack trace.
                  This method is equivalent to calling:
                  &lt;blockquote&gt;&lt;pre&gt;{@link #getThreadInfo(long[],int) getThreadInfo}(ids, 0);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects.
                  The stack trace, locked monitors, and locked synchronizers
                  in each &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be empty.
                  If a thread of a given ID is not alive or does not exist,
                  the corresponding element in the returned array will
                  contain &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
                  it has been started and has not yet died.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
                  &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the{@link ThreadInfo#from ThreadInfo.from} method.                
                <param>
                    ids an array of thread IDs.                    
                </param>
                <return>
                    an array of the {@link ThreadInfo} objects, each containing
                      information about a thread whose ID is in the corresponding
                      element of the input array of IDs
                      with no stack trace, no locked monitor and no synchronizer info.                    
                </return>
                <throws>
                    IllegalArgumentException if any element in the input array
                      <tt>ids</tt> is <tt>&lt= 0</tt>.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getThreadInfo" type="ThreadInfo" line="162"/>
            <javadoc line="162">
                Returns a thread info for a thread of the specified &lt;tt&gt;id&lt;/tt&gt;,
                  with stack trace of a specified number of stack trace elements.
                  The &lt;tt&gt;maxDepth&lt;/tt&gt; parameter indicates the maximum number of{@link StackTraceElement} to be retrieved from the stack trace.
                  If &lt;tt&gt;maxDepth == Integer.MAX_VALUE&lt;/tt&gt;, the entire stack trace of
                  the thread will be dumped.
                  If &lt;tt&gt;maxDepth == 0&lt;/tt&gt;, no stack trace of the thread
                  will be dumped.
                  This method does not obtain the locked monitors and locked
                  synchronizers of the thread.
                  &lt;p&gt;
                  When the Java virtual machine has no stack trace information
                  about a thread or &lt;tt&gt;maxDepth == 0&lt;/tt&gt;,
                  the stack trace in the
                  &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be an empty array of
                  &lt;tt&gt;StackTraceElement&lt;/tt&gt;.
                  &lt;p&gt;
                  If a thread of the given ID is not alive or does not exist,
                  this method will return &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
                  it has been started and has not yet died.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
                  &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the{@link ThreadInfo#from ThreadInfo.from} method.                
                <param>
                    id the thread ID of the thread. Must be positive.                    
                </param>
                <param>
                    maxDepth the maximum number of entries in the stack trace
                      to be dumped. <tt>Integer.MAX_VALUE</tt> could be used to request
                      the entire stack to be dumped.                    
                </param>
                <return>
                    a {@link ThreadInfo} of the thread of the given ID
                      with no locked monitor and synchronizer info.
                      <tt>null</tt> if the thread of the given ID is not alive or
                      it does not exist.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>id &lt= 0</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <tt>maxDepth is negative</tt>.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="getThreadInfo" type="ThreadInfo[]" line="201"/>
            <javadoc line="201">
                Returns the thread info for each thread
                  whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt;,
                  with stack trace of a specified number of stack trace elements.
                  The &lt;tt&gt;maxDepth&lt;/tt&gt; parameter indicates the maximum number of{@link StackTraceElement} to be retrieved from the stack trace.
                  If &lt;tt&gt;maxDepth == Integer.MAX_VALUE&lt;/tt&gt;, the entire stack trace of
                  the thread will be dumped.
                  If &lt;tt&gt;maxDepth == 0&lt;/tt&gt;, no stack trace of the thread
                  will be dumped.
                  This method does not obtain the locked monitors and locked
                  synchronizers of the threads.
                  &lt;p&gt;
                  When the Java virtual machine has no stack trace information
                  about a thread or &lt;tt&gt;maxDepth == 0&lt;/tt&gt;,
                  the stack trace in the
                  &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be an empty array of
                  &lt;tt&gt;StackTraceElement&lt;/tt&gt;.
                  &lt;p&gt;
                  This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects,
                  each is the thread information about the thread with the same index
                  as in the &lt;tt&gt;ids&lt;/tt&gt; array.
                  If a thread of the given ID is not alive or does not exist,
                  &lt;tt&gt;null&lt;/tt&gt; will be set in the corresponding element
                  in the returned array.  A thread is alive if
                  it has been started and has not yet died.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
                  &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the{@link ThreadInfo#from ThreadInfo.from} method.                
                <param>
                    ids an array of thread IDs                    
                </param>
                <param>
                    maxDepth the maximum number of entries in the stack trace
                      to be dumped. <tt>Integer.MAX_VALUE</tt> could be used to request
                      the entire stack to be dumped.                    
                </param>
                <return>
                    an array of the {@link ThreadInfo} objects, each containing
                      information about a thread whose ID is in the corresponding
                      element of the input array of IDs with no locked monitor and
                      synchronizer info.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>maxDepth is negative</tt>.                    
                </throws>
                <throws>
                    IllegalArgumentException if any element in the input array
                      <tt>ids</tt> is <tt>&lt= 0</tt>.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
            </javadoc>
            <method name="isThreadContentionMonitoringSupported" type="boolean" line="246"/>
            <javadoc line="246">
                Tests if the Java virtual machine supports thread contention monitoring.                
                <return>
                    <tt>true</tt>
                      if the Java virtual machine supports thread contention monitoring;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="isThreadContentionMonitoringEnabled" type="boolean" line="253"/>
            <javadoc line="253">
                Tests if thread contention monitoring is enabled.                
                <return>
                    <tt>true</tt> if thread contention monitoring is enabled;
                      <tt>false</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine does not support thread contention monitoring.                    
                </throws>
                <see>
                    #isThreadContentionMonitoringSupported                    
                </see>
            </javadoc>
            <method name="setThreadContentionMonitoringEnabled" type="void" line="262"/>
            <javadoc line="262">
                Enables or disables thread contention monitoring.
                  Thread contention monitoring is disabled by default.                
                <param>
                    enable <tt>true</tt> to enable;
                      <tt>false</tt> to disable.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support thread contention monitoring.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("control").                    
                </throws>
                <see>
                    #isThreadContentionMonitoringSupported                    
                </see>
            </javadoc>
            <method name="getCurrentThreadCpuTime" type="long" line="275"/>
            <javadoc line="275">
                Returns the total CPU time for the current thread in nanoseconds.
                  The returned value is of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  If the implementation distinguishes between user mode time and system
                  mode time, the returned CPU time is the amount of time that
                  the current thread has executed in user mode or system mode.
                  &lt;p&gt;
                  This is a convenient method for local management use and is
                  equivalent to calling:
                  &lt;blockquote&gt;&lt;pre&gt;{@link #getThreadCpuTime getThreadCpuTime}(Thread.currentThread().getId());
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the total CPU time for the current thread if CPU time
                      measurement is enabled; <tt>-1</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support CPU time measurement for
                      the current thread.                    
                </throws>
                <see>
                    #getCurrentThreadUserTime                    
                </see>
                <see>
                    #isCurrentThreadCpuTimeSupported                    
                </see>
                <see>
                    #isThreadCpuTimeEnabled                    
                </see>
                <see>
                    #setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="getCurrentThreadUserTime" type="long" line="298"/>
            <javadoc line="298">
                Returns the CPU time that the current thread has executed
                  in user mode in nanoseconds.
                  The returned value is of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  &lt;p&gt;
                  This is a convenient method for local management use and is
                  equivalent to calling:
                  &lt;blockquote&gt;&lt;pre&gt;{@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    the user-level CPU time for the current thread if CPU time
                      measurement is enabled; <tt>-1</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support CPU time measurement for
                      the current thread.                    
                </throws>
                <see>
                    #getCurrentThreadCpuTime                    
                </see>
                <see>
                    #isCurrentThreadCpuTimeSupported                    
                </see>
                <see>
                    #isThreadCpuTimeEnabled                    
                </see>
                <see>
                    #setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="getThreadCpuTime" type="long" line="319"/>
            <javadoc line="319">
                Returns the total CPU time for a thread of the specified ID in nanoseconds.
                  The returned value is of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  If the implementation distinguishes between user mode time and system
                  mode time, the returned CPU time is the amount of time that
                  the thread has executed in user mode or system mode.
                  &lt;p&gt;
                  If the thread of the specified ID is not alive or does not exist,
                  this method returns &lt;tt&gt;-1&lt;/tt&gt;. If CPU time measurement
                  is disabled, this method returns &lt;tt&gt;-1&lt;/tt&gt;.
                  A thread is alive if it has been started and has not yet died.
                  &lt;p&gt;
                  If CPU time measurement is enabled after the thread has started,
                  the Java virtual machine implementation may choose any time up to
                  and including the time that the capability is enabled as the point
                  where CPU time measurement starts.                
                <param>
                    id the thread ID of a thread                    
                </param>
                <return>
                    the total CPU time for a thread of the specified ID
                      if the thread of the specified ID exists, the thread is alive,
                      and CPU time measurement is enabled;
                      <tt>-1</tt> otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>id &lt= 0 </tt>.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support CPU time measurement for
                      other threads.                    
                </throws>
                <see>
                    #getThreadUserTime                    
                </see>
                <see>
                    #isThreadCpuTimeSupported                    
                </see>
                <see>
                    #isThreadCpuTimeEnabled                    
                </see>
                <see>
                    #setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="getThreadUserTime" type="long" line="351"/>
            <javadoc line="351">
                Returns the CPU time that a thread of the specified ID
                  has executed in user mode in nanoseconds.
                  The returned value is of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  &lt;p&gt;
                  If the thread of the specified ID is not alive or does not exist,
                  this method returns &lt;tt&gt;-1&lt;/tt&gt;. If CPU time measurement
                  is disabled, this method returns &lt;tt&gt;-1&lt;/tt&gt;.
                  A thread is alive if it has been started and has not yet died.
                  &lt;p&gt;
                  If CPU time measurement is enabled after the thread has started,
                  the Java virtual machine implementation may choose any time up to
                  and including the time that the capability is enabled as the point
                  where CPU time measurement starts.                
                <param>
                    id the thread ID of a thread                    
                </param>
                <return>
                    the user-level CPU time for a thread of the specified ID
                      if the thread of the specified ID exists, the thread is alive,
                      and CPU time measurement is enabled;
                      <tt>-1</tt> otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if <tt>id &lt= 0 </tt>.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support CPU time measurement for
                      other threads.                    
                </throws>
                <see>
                    #getThreadCpuTime                    
                </see>
                <see>
                    #isThreadCpuTimeSupported                    
                </see>
                <see>
                    #isThreadCpuTimeEnabled                    
                </see>
                <see>
                    #setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="isThreadCpuTimeSupported" type="boolean" line="381"/>
            <javadoc line="381">
                Tests if the Java virtual machine implementation supports CPU time
                  measurement for any thread.
                  A Java virtual machine implementation that supports CPU time
                  measurement for any thread will also support CPU time
                  measurement for the current thread.                
                <return>
                    <tt>true</tt>
                      if the Java virtual machine supports CPU time
                      measurement for any thread;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="isCurrentThreadCpuTimeSupported" type="boolean" line="393"/>
            <javadoc line="393">
                Tests if the Java virtual machine supports CPU time
                  measurement for the current thread.
                  This method returns &lt;tt&gt;true&lt;/tt&gt; if {@link #isThreadCpuTimeSupported}returns &lt;tt&gt;true&lt;/tt&gt;.                
                <return>
                    <tt>true</tt>
                      if the Java virtual machine supports CPU time
                      measurement for current thread;
                      <tt>false</tt> otherwise.                    
                </return>
            </javadoc>
            <method name="isThreadCpuTimeEnabled" type="boolean" line="403"/>
            <javadoc line="403">
                Tests if thread CPU time measurement is enabled.                
                <return>
                    <tt>true</tt> if thread CPU time measurement is enabled;
                      <tt>false</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine does not support CPU time measurement for other threads
                      nor for the current thread.                    
                </throws>
                <see>
                    #isThreadCpuTimeSupported                    
                </see>
                <see>
                    #isCurrentThreadCpuTimeSupported                    
                </see>
            </javadoc>
            <method name="setThreadCpuTimeEnabled" type="void" line="414"/>
            <javadoc line="414">
                Enables or disables thread CPU time measurement.  The default
                  is platform dependent.                
                <param>
                    enable <tt>true</tt> to enable;
                      <tt>false</tt> to disable.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine does not support CPU time measurement for
                      any threads nor for the current thread.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("control").                    
                </throws>
                <see>
                    #isThreadCpuTimeSupported                    
                </see>
                <see>
                    #isCurrentThreadCpuTimeSupported                    
                </see>
            </javadoc>
            <method name="findMonitorDeadlockedThreads" type="long[]" line="429"/>
            <javadoc line="429">
                Finds cycles of threads that are in deadlock waiting to acquire
                  object monitors. That is, threads that are blocked waiting to enter a
                  synchronization block or waiting to reenter a synchronization block
                  after an {@link Object#wait Object.wait} call,
                  where each thread owns one monitor while
                  trying to obtain another monitor already held by another thread
                  in a cycle.
                  &lt;p&gt;
                  More formally, a thread is &lt;em&gt;monitor deadlocked&lt;/em&gt; if it is
                  part of a cycle in the relation &quot;is waiting for an object monitor
                  owned by&quot;.  In the simplest case, thread A is blocked waiting
                  for a monitor owned by thread B, and thread B is blocked waiting
                  for a monitor owned by thread A.
                  &lt;p&gt;
                  This method is designed for troubleshooting use, but not for
                  synchronization control.  It might be an expensive operation.
                  &lt;p&gt;
                  This method finds deadlocks involving only object monitors.
                  To find deadlocks involving both object monitors and
                  &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable synchronizers&lt;/a&gt;,
                  the {@link #findDeadlockedThreads findDeadlockedThreads} method
                  should be used.                
                <return>
                    an array of IDs of the threads that are monitor
                      deadlocked, if any; <tt>null</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
                <see>
                    #findDeadlockedThreads                    
                </see>
            </javadoc>
            <method name="resetPeakThreadCount" type="void" line="460"/>
            <javadoc line="460">
                Resets the peak thread count to the current number of
                  live threads.                
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("control").                    
                </throws>
                <see>
                    #getPeakThreadCount                    
                </see>
                <see>
                    #getThreadCount                    
                </see>
            </javadoc>
            <method name="findDeadlockedThreads" type="long[]" line="470"/>
            <javadoc line="470">
                Finds cycles of threads that are in deadlock waiting to acquire
                  object monitors or
                  &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable synchronizers&lt;/a&gt;.
                  Threads are &lt;em&gt;deadlocked&lt;/em&gt; in a cycle waiting for a lock of
                  these two types if each thread owns one lock while
                  trying to acquire another lock already held
                  by another thread in the cycle.
                  &lt;p&gt;
                  This method is designed for troubleshooting use, but not for
                  synchronization control.  It might be an expensive operation.                
                <return>
                    an array of IDs of the threads that are
                      deadlocked waiting for object monitors or ownable synchronizers, if any;
                      <tt>null</tt> otherwise.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine does not support monitoriing of ownable synchronizer usage.                    
                </throws>
                <see>
                    #isSynchronizerUsageSupported                    
                </see>
                <see>
                    #findMonitorDeadlockedThreads                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isObjectMonitorUsageSupported" type="boolean" line="494"/>
            <javadoc line="494">
                Tests if the Java virtual machine supports monitoring of
                  object monitor usage.                
                <return>
                    <tt>true</tt>
                      if the Java virtual machine supports monitoring of
                      object monitor usage;
                      <tt>false</tt> otherwise.                    
                </return>
                <see>
                    #dumpAllThreads                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isSynchronizerUsageSupported" type="boolean" line="505"/>
            <javadoc line="505">
                Tests if the Java virtual machine supports monitoring of
                  &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
                  ownable synchronizer&lt;/a&gt; usage.                
                <return>
                    <tt>true</tt>
                      if the Java virtual machine supports monitoring of ownable
                      synchronizer usage;
                      <tt>false</tt> otherwise.                    
                </return>
                <see>
                    #dumpAllThreads                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getThreadInfo" type="ThreadInfo[]" line="517"/>
            <javadoc line="517">
                Returns the thread info for each thread
                  whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt;, with stack trace
                  and synchronization information.
                  &lt;p&gt;
                  This method obtains a snapshot of the thread information
                  for each thread including:
                  &lt;ul&gt;
                  &lt;li&gt;the entire stack trace,&lt;/li&gt;
                  &lt;li&gt;the object monitors currently locked by the thread
                  if &lt;tt&gt;lockedMonitors&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;, and&lt;/li&gt;
                  &lt;li&gt;the &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
                  ownable synchronizers&lt;/a&gt; currently locked by the thread
                  if &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects,
                  each is the thread information about the thread with the same index
                  as in the &lt;tt&gt;ids&lt;/tt&gt; array.
                  If a thread of the given ID is not alive or does not exist,
                  &lt;tt&gt;null&lt;/tt&gt; will be set in the corresponding element
                  in the returned array.  A thread is alive if
                  it has been started and has not yet died.
                  &lt;p&gt;
                  If a thread does not lock any object monitor or &lt;tt&gt;lockedMonitors&lt;/tt&gt;
                  is &lt;tt&gt;false&lt;/tt&gt;, the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will have an
                  empty &lt;tt&gt;MonitorInfo&lt;/tt&gt; array.  Similarly, if a thread does not
                  lock any synchronizer or &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt;,
                  the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object
                  will have an empty &lt;tt&gt;LockInfo&lt;/tt&gt; array.
                  &lt;p&gt;
                  When both &lt;tt&gt;lockedMonitors&lt;/tt&gt; and &lt;tt&gt;lockedSynchronizers&lt;/tt&gt;
                  parameters are &lt;tt&gt;false&lt;/tt&gt;, it is equivalent to calling:
                  &lt;blockquote&gt;&lt;pre&gt;{@link #getThreadInfo(long[],int)  getThreadInfo(ids, Integer.MAX_VALUE)}&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  This method is designed for troubleshooting use, but not for
                  synchronization control.  It might be an expensive operation.
                  &lt;p&gt;
                  &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
                  The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
                  &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the{@link ThreadInfo#from ThreadInfo.from} method.                
                <param>
                    ids an array of thread IDs.                    
                </param>
                <param>
                    lockedMonitors if <tt>true</tt>, retrieves all locked monitors.                    
                </param>
                <param>
                    lockedSynchronizers if <tt>true</tt>, retrieves all locked
                      ownable synchronizers.                    
                </param>
                <return>
                    an array of the {@link ThreadInfo} objects, each containing
                      information about a thread whose ID is in the corresponding
                      element of the input array of IDs.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException<ul>
                      <li>if <tt>lockedMonitors</tt> is <tt>true</tt> but
                      the Java virtual machine does not support monitoring
                      of {@linkplain #isObjectMonitorUsageSupportedobject monitor usage}; or</li>
                      <li>if <tt>lockedSynchronizers</tt> is <tt>true</tt> but
                      the Java virtual machine does not support monitoring
                      of {@linkplain #isSynchronizerUsageSupportedownable synchronizer usage}.</li>
                      </ul>                    
                </throws>
                <see>
                    #isObjectMonitorUsageSupported                    
                </see>
                <see>
                    #isSynchronizerUsageSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="dumpAllThreads" type="ThreadInfo[]" line="581"/>
            <javadoc line="581">
                Returns the thread info for all live threads with stack trace
                  and synchronization information.
                  Some threads included in the returned array
                  may have been terminated when this method returns.
                  &lt;p&gt;
                  This method returns an array of {@link ThreadInfo} objects
                  as specified in the {@link #getThreadInfo(long[],boolean,boolean)}method.                
                <param>
                    lockedMonitors if <tt>true</tt>, dump all locked monitors.                    
                </param>
                <param>
                    lockedSynchronizers if <tt>true</tt>, dump all locked
                      ownable synchronizers.                    
                </param>
                <return>
                    an array of {@link ThreadInfo} for all live threads.                    
                </return>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission("monitor").                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException<ul>
                      <li>if <tt>lockedMonitors</tt> is <tt>true</tt> but
                      the Java virtual machine does not support monitoring
                      of {@linkplain #isObjectMonitorUsageSupportedobject monitor usage}; or</li>
                      <li>if <tt>lockedSynchronizers</tt> is <tt>true</tt> but
                      the Java virtual machine does not support monitoring
                      of {@linkplain #isSynchronizerUsageSupportedownable synchronizer usage}.</li>
                      </ul>                    
                </throws>
                <see>
                    #isObjectMonitorUsageSupported                    
                </see>
                <see>
                    #isSynchronizerUsageSupported                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>