<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <interface name="Cloneable">
            <javadoc line="28">
                A class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface to
                  indicate to the {@link java.lang.Object#clone()} method that it
                  is legal for that method to make a
                  field-for-field copy of instances of that class.
                  &lt;p&gt;
                  Invoking Object&apos;s clone method on an instance that does not implement the
                  &lt;code&gt;Cloneable&lt;/code&gt; interface results in the exception
                  &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.
                  &lt;p&gt;
                  By convention, classes that implement this interface should override
                  &lt;tt&gt;Object.clone&lt;/tt&gt; (which is protected) with a public method.
                  See {@link java.lang.Object#clone()} for details on overriding this
                  method.
                  &lt;p&gt;
                  Note that this interface does &lt;i&gt;not&lt;/i&gt; contain the &lt;tt&gt;clone&lt;/tt&gt; method.
                  Therefore, it is not possible to clone an object merely by virtue of the
                  fact that it implements this interface.  Even if the clone method is invoked
                  reflectively, there is no guarantee that it will succeed.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.lang.CloneNotSupportedException                    
                </see>
                <see>
                    java.lang.Object#clone()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
        </interface>
    </source>