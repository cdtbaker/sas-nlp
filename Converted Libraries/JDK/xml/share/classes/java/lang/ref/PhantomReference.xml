<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.ref">
        <class name="PhantomReference" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Reference">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="29">
                Phantom reference objects, which are enqueued after the collector
                  determines that their referents may otherwise be reclaimed.  Phantom
                  references are most often used for scheduling pre-mortem cleanup actions in
                  a more flexible way than is possible with the Java finalization mechanism.
                  &lt;p&gt; If the garbage collector determines at a certain point in time that the
                  referent of a phantom reference is &lt;a
                  href=&quot;package-summary.html#reachability&quot;&gt;phantom reachable&lt;/a&gt;, then at that
                  time or at some later time it will enqueue the reference.
                  &lt;p&gt; In order to ensure that a reclaimable object remains so, the referent of
                  a phantom reference may not be retrieved: The &lt;code&gt;get&lt;/code&gt; method of a
                  phantom reference always returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Unlike soft and weak references, phantom references are not
                  automatically cleared by the garbage collector as they are enqueued.  An
                  object that is reachable via phantom references will remain so until all
                  such references are cleared or themselves become unreachable.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="55">
                Returns this reference object&apos;s referent.  Because the referent of a
                  phantom reference is always inaccessible, this method always returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="get" type="T" line="62"/>
            <javadoc line="66">
                Creates a new phantom reference that refers to the given object and
                  is registered with the given queue.
                  &lt;p&gt; It is possible to create a phantom reference with a &lt;tt&gt;null&lt;/tt&gt;
                  queue, but such a reference is completely useless: Its &lt;tt&gt;get&lt;/tt&gt;
                  method will always return null and, since it does not have a queue, it
                  will never be enqueued.                
                <param>
                    referent the object the new phantom reference will refer to                    
                </param>
                <param>
                    q the queue with which the reference is to be registered,
                      or &lt;tt&gt;null&lt;/tt&gt; if registration is not required                    
                </param>
            </javadoc>
            <method name="PhantomReference" type="constructor" line="79">
                <params>
                    <param name="referent" type="T"/>
                    <param name="q" type="ReferenceQueue<? super T>"/>
                </params>
            </method>
        </class>
    </source>