<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.ref">
        <class name="ReferenceQueue" line="28">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="28">
                Reference queues, to which registered reference objects are appended by the
                  garbage collector after the appropriate reachability changes are detected.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="38">
                Constructs a new reference-object queue.                
            </javadoc>
            <method name="ReferenceQueue" type="constructor" line="41"/>
            <class name="Null" line="43">
                <extends class="ReferenceQueue"/>
                <method name="enqueue" type="boolean" line="44">
                    <params>
                        <param name="r" type="Reference"/>
                    </params>
                </method>
            </class>
            <declaration name="NULL" type="ReferenceQueue" line="49"/>
            <declaration name="ENQUEUED" type="ReferenceQueue" line="50"/>
            <class name="Lock" line="52"/>
            <declaration name="lock" type="Lock" line="53"/>
            <declaration name="head" type="Reference&lt;? extends T&gt;" line="54"/>
            <declaration name="queueLength" type="long" line="55"/>
            <method name="enqueue" type="boolean" line="57">
                <params>
                    <param name="r" type="Reference<? extends T>"/>
                </params>
                <scope line="58">
                    <scope line="60">
                        <scope line="65"/>
                    </scope>
                </scope>
            </method>
            <method name="reallyPoll" type="Reference<? extends T>" line="74">
                <scope line="75">
                    <declaration name="r" type="Reference&lt;? extends T&gt;" line="76"/>
                    <scope line="81"/>
                </scope>
            </method>
            <javadoc line="89">
                Polls this queue to see if a reference object is available.  If one is
                  available without further delay then it is removed from the queue and
                  returned.  Otherwise this method immediately returns &lt;tt&gt;null&lt;/tt&gt;.                
                <return>
                    A reference object, if one was immediately available,
                      otherwise <code>null</code>                    
                </return>
            </javadoc>
            <method name="poll" type="Reference<? extends T>" line="97">
                <scope line="100"/>
            </method>
            <javadoc line="105">
                Removes the next reference object in this queue, blocking until either
                  one becomes available or the given timeout period expires.
                  &lt;p&gt; This method does not offer real-time guarantees: It schedules the
                  timeout as if by invoking the {@link Object#wait(long)} method.                
                <param>
                    timeout  If positive, block for up to <code>timeout</code>
                      milliseconds while waiting for a reference to be
                      added to this queue.  If zero, block indefinitely.                    
                </param>
                <return>
                    A reference object, if one was available within the specified
                      timeout period, otherwise <code>null</code>                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the value of the timeout argument is negative                    
                </throws>
                <throws>
                    InterruptedExceptionIf the timeout wait is interrupted                    
                </throws>
            </javadoc>
            <method name="remove" type="Reference<? extends T>" line="127">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <scope line="128"/>
                <scope line="131">
                    <declaration name="r" type="Reference&lt;? extends T&gt;" line="132"/>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="143">
                Removes the next reference object in this queue, blocking until one
                  becomes available.                
                <return>
                    A reference object, blocking until one becomes available                    
                </return>
                <throws>
                    InterruptedException  If the wait is interrupted                    
                </throws>
            </javadoc>
            <method name="remove" type="Reference<? extends T>" line="150"/>
        </class>
    </source>