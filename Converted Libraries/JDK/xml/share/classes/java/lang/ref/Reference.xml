<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.ref">
        <import package="sun.misc.Cleaner"/>
        <class name="Reference" line="3">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="3">
                Abstract base class for reference objects.  This class defines the
                  operations common to all reference objects.  Because reference objects are
                  implemented in close cooperation with the garbage collector, this class may
                  not be subclassed directly.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="referent" type="T" line="12"/>
            <declaration name="queue" type="ReferenceQueue&lt;? super T&gt;" line="13"/>
            <declaration name="next" type="Reference" line="14"/>
            <declaration name="discovered" type="Reference&lt;T&gt;" line="15"/>
            <class name="Lock" line="16"/>
            <declaration name="lock" type="Lock" line="18"/>
            <declaration name="pending" type="Reference" line="19"/>
            <class name="ReferenceHandler" line="20">
                <extends class="Thread"/>
                <method name="ReferenceHandler" type="constructor" line="21">
                    <params>
                        <param name="g" type="ThreadGroup"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="run" type="void" line="24">
                    <scope line="25">
                        <declaration name="r" type="Reference" line="26"/>
                        <scope line="27">
                            <scope line="28">
                                <declaration name="rn" type="Reference" line="30"/>
                            </scope>
                            <scope line="34">
                                <scope line="35"/>
                                <scope line="38"/>
                            </scope>
                        </scope>
                        <scope line="43"/>
                        <declaration name="q" type="ReferenceQueue" line="47"/>
                    </scope>
                </method>
            </class>
            <scope line="52">
                <declaration name="tg" type="ThreadGroup" line="53"/>
                <declaration name="handler" type="Thread" line="55"/>
            </scope>
            <javadoc line="60">
                Returns this reference object&apos;s referent.  If this reference object has
                  been cleared, either by the program or by the garbage collector, then
                  this method returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    The object to which this reference refers, or
                      <code>null</code> if this reference object has been cleared                    
                </return>
            </javadoc>
            <method name="get" type="T" line="67"/>
            <javadoc line="70">
                Clears this reference object.  Invoking this method will not cause this
                  object to be enqueued.
                  &lt;p&gt; This method is invoked only by Java code; when the garbage collector
                  clears references it does so directly, without invoking this method.                
            </javadoc>
            <method name="clear" type="void" line="76"/>
            <javadoc line="79">
                Tells whether or not this reference object has been enqueued, either by
                  the program or by the garbage collector.  If this reference object was
                  not registered with a queue when it was created, then this method will
                  always return &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    <code>true</code> if and only if this reference object has
                      been enqueued                    
                </return>
            </javadoc>
            <method name="isEnqueued" type="boolean" line="87">
                <scope line="88"/>
            </method>
            <javadoc line="92">
                Adds this reference object to the queue with which it is registered,
                  if any.
                  &lt;p&gt; This method is invoked only by Java code; when the garbage collector
                  enqueues references it does so directly, without invoking this method.                
                <return>
                    <code>true</code> if this reference object was successfully
                      enqueued; <code>false</code> if it was already enqueued or if
                      it was not registered with a queue when it was created                    
                </return>
            </javadoc>
            <method name="enqueue" type="boolean" line="101"/>
            <method name="Reference" type="constructor" line="104">
                <params>
                    <param name="referent" type="T"/>
                </params>
            </method>
            <method name="Reference" type="constructor" line="107">
                <params>
                    <param name="referent" type="T"/>
                    <param name="queue" type="ReferenceQueue<? super T>"/>
                </params>
            </method>
        </class>
    </source>