<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.ref">
        <class name="SoftReference" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Reference">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="29">
                Soft reference objects, which are cleared at the discretion of the garbage
                  collector in response to memory demand.  Soft references are most often used
                  to implement memory-sensitive caches.
                  &lt;p&gt; Suppose that the garbage collector determines at a certain point in time
                  that an object is &lt;a href=&quot;package-summary.html#reachability&quot;&gt;softly
                  reachable&lt;/a&gt;.  At that time it may choose to clear atomically all soft
                  references to that object and all soft references to any other
                  softly-reachable objects from which that object is reachable through a chain
                  of strong references.  At the same time or at some later time it will
                  enqueue those newly-cleared soft references that are registered with
                  reference queues.
                  &lt;p&gt; All soft references to softly-reachable objects are guaranteed to have
                  been cleared before the virtual machine throws an
                  &lt;code&gt;OutOfMemoryError&lt;/code&gt;.  Otherwise no constraints are placed upon the
                  time at which a soft reference will be cleared or the order in which a set
                  of such references to different objects will be cleared.  Virtual machine
                  implementations are, however, encouraged to bias against clearing
                  recently-created or recently-used soft references.
                  &lt;p&gt; Direct instances of this class may be used to implement simple caches;
                  this class or derived subclasses may also be used in larger data structures
                  to implement more sophisticated caches.  As long as the referent of a soft
                  reference is strongly reachable, that is, is actually in use, the soft
                  reference will not be cleared.  Thus a sophisticated cache can, for example,
                  prevent its most recently used entries from being discarded by keeping
                  strong referents to those entries, leaving the remaining entries to be
                  discarded at the discretion of the garbage collector.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="clock" type="long" line="66"/>
            <javadoc line="66">
                Timestamp clock, updated by the garbage collector                
            </javadoc>
            <declaration name="timestamp" type="long" line="71"/>
            <javadoc line="71">
                Timestamp updated by each invocation of the get method.  The VM may use
                  this field when selecting soft references to be cleared, but it is not
                  required to do so.                
            </javadoc>
            <javadoc line="78">
                Creates a new soft reference that refers to the given object.  The new
                  reference is not registered with any queue.                
                <param>
                    referent object the new soft reference will refer to                    
                </param>
            </javadoc>
            <method name="SoftReference" type="constructor" line="84">
                <params>
                    <param name="referent" type="T"/>
                </params>
            </method>
            <javadoc line="89">
                Creates a new soft reference that refers to the given object and is
                  registered with the given queue.                
                <param>
                    referent object the new soft reference will refer to                    
                </param>
                <param>
                    q the queue with which the reference is to be registered,
                      or <tt>null</tt> if registration is not required                    
                </param>
            </javadoc>
            <method name="SoftReference" type="constructor" line="98">
                <params>
                    <param name="referent" type="T"/>
                    <param name="q" type="ReferenceQueue<? super T>"/>
                </params>
            </method>
            <javadoc line="103">
                Returns this reference object&apos;s referent.  If this reference object has
                  been cleared, either by the program or by the garbage collector, then
                  this method returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    The object to which this reference refers, or
                      <code>null</code> if this reference object has been cleared                    
                </return>
            </javadoc>
            <method name="get" type="T" line="111">
                <declaration name="o" type="T" line="112"/>
            </method>
        </class>
    </source>