<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Short" line="2">
            <extends class="Number"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Short"/>
                </type_params>
            </implements>
            <javadoc line="2">
                The {@code Short} class wraps a value of primitive type {@codeshort} in an object.  An object of type {@code Short} contains a
                  single field whose type is {@code short}.
                  &lt;p&gt;In addition, this class provides several methods for converting
                  a {@code short} to a {@code String} and a {@code String} to a{@code short}, as well as other constants and methods useful when
                  dealing with a {@code short}.                
                <author>
                    Nakul Saraiya                    
                </author>
                <author>
                    Joseph D. Darcy                    
                </author>
                <see>
                    java.lang.Number                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="MIN_VALUE" type="short" line="14"/>
            <javadoc line="14">
                A constant holding the minimum value a {@code short} can
                  have, -2&lt;sup&gt;15&lt;/sup&gt;.                
            </javadoc>
            <declaration name="MAX_VALUE" type="short" line="19"/>
            <javadoc line="19">
                A constant holding the maximum value a {@code short} can
                  have, 2&lt;sup&gt;15&lt;/sup&gt;-1.                
            </javadoc>
            <declaration name="TYPE" type="Class&amp;lt;Short&amp;gt;" line="24"/>
            <javadoc line="24">
                The {@code Class} instance representing the primitive type{@code short}.                
            </javadoc>
            <javadoc line="28">
                Returns a new {@code String} object representing the
                  specified {@code short}. The radix is assumed to be 10.                
                <param>
                    s the {@code short} to be converted                    
                </param>
                <return>
                    the string representation of the specified {@code short}                    
                </return>
                <see>
                    java.lang.Integer#toString(int)                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="35">
                <params>
                    <param name="s" type="short"/>
                </params>
            </method>
            <javadoc line="38">
                Parses the string argument as a signed {@code short} in the
                  radix specified by the second argument. The characters in the
                  string must all be digits, of the specified radix (as
                  determined by whether {@link java.lang.Character#digit(char,int)} returns a nonnegative value) except that the first
                  character may be an ASCII minus sign {@code &apos;-&apos;}(&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value or an
                  ASCII plus sign {@code &apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to
                  indicate a positive value.  The resulting {@code short} value
                  is returned.
                  &lt;p&gt;An exception of type {@code NumberFormatException} is
                  thrown if any of the following situations occurs:
                  &lt;ul&gt;
                  &lt;li&gt; The first argument is {@code null} or is a string of
                  length zero.
                  &lt;li&gt; The radix is either smaller than {@link java.lang.Character#MIN_RADIX} or larger than {@link java.lang.Character#MAX_RADIX}.
                  &lt;li&gt; Any character of the string is not a digit of the
                  specified radix, except that the first character may be a minus
                  sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) or plus sign{@code &apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) provided that the
                  string is longer than length 1.
                  &lt;li&gt; The value represented by the string is not a value of type{@code short}.
                  &lt;/ul&gt;                
                <param>
                    s         the {@code String} containing the{@code short} representation to be parsed                    
                </param>
                <param>
                    radix     the radix to be used while parsing {@code s}                    
                </param>
                <return>
                    the {@code short} represented by the string
                      argument in the specified radix.                    
                </return>
                <throws>
                    NumberFormatException If the {@code String}does not contain a parsable {@code short}.                    
                </throws>
            </javadoc>
            <method name="parseShort" type="short" line="65">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="i" type="int" line="66"/>
            </method>
            <javadoc line="70">
                Parses the string argument as a signed decimal {@codeshort}. The characters in the string must all be decimal
                  digits, except that the first character may be an ASCII minus
                  sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a
                  negative value or an ASCII plus sign {@code &apos;+&apos;}(&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to indicate a positive value.  The
                  resulting {@code short} value is returned, exactly as if the
                  argument and the radix 10 were given as arguments to the {@link #parseShort(java.lang.String,int)} method.                
                <param>
                    s a {@code String} containing the {@code short}representation to be parsed                    
                </param>
                <return>
                    the {@code short} value represented by the
                      argument in decimal.                    
                </return>
                <throws>
                    NumberFormatException If the string does not
                      contain a parsable {@code short}.                    
                </throws>
            </javadoc>
            <method name="parseShort" type="short" line="83">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Returns a {@code Short} object holding the value
                  extracted from the specified {@code String} when parsed
                  with the radix given by the second argument. The first argument
                  is interpreted as representing a signed {@code short} in
                  the radix specified by the second argument, exactly as if the
                  argument were given to the {@link #parseShort(java.lang.String,int)} method. The result is a {@code Short} object that
                  represents the {@code short} value specified by the string.
                  &lt;p&gt;In other words, this method returns a {@code Short} object
                  equal to the value of:
                  &lt;blockquote&gt;{@code new Short(Short.parseShort(s, radix))}&lt;/blockquote&gt;                
                <param>
                    s         the string to be parsed                    
                </param>
                <param>
                    radix     the radix to be used in interpreting {@code s}                    
                </param>
                <return>
                    a {@code Short} object holding the value
                      represented by the string argument in the
                      specified radix.                    
                </return>
                <throws>
                    NumberFormatException If the {@code String} does
                      not contain a parsable {@code short}.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Short" line="105">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
            </method>
            <javadoc line="108">
                Returns a {@code Short} object holding the
                  value given by the specified {@code String}. The argument
                  is interpreted as representing a signed decimal{@code short}, exactly as if the argument were given to
                  the {@link #parseShort(java.lang.String)} method. The result is
                  a {@code Short} object that represents the{@code short} value specified by the string.
                  &lt;p&gt;In other words, this method returns a {@code Short} object
                  equal to the value of:
                  &lt;blockquote&gt;{@code new Short(Short.parseShort(s))}&lt;/blockquote&gt;                
                <param>
                    s the string to be parsed                    
                </param>
                <return>
                    a {@code Short} object holding the value
                      represented by the string argument                    
                </return>
                <throws>
                    NumberFormatException If the {@code String} does
                      not contain a parsable {@code short}.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Short" line="123">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <class name="ShortCache" line="126">
                <method name="ShortCache" type="constructor" line="127"/>
                <declaration name="cache" type="Short" line="129"/>
                <scope line="130"/>
            </class>
            <javadoc line="134">
                Returns a {@code Short} instance representing the specified{@code short} value.
                  If a new {@code Short} instance is not required, this method
                  should generally be used in preference to the constructor{@link #Short(short)}, as this method is likely to yield
                  significantly better space and time performance by caching
                  frequently requested values.
                  This method will always cache values in the range -128 to 127,
                  inclusive, and may cache other values outside of this range.                
                <param>
                    s a short value.                    
                </param>
                <return>
                    a {@code Short} instance representing {@code s}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="valueOf" type="Short" line="146">
                <params>
                    <param name="s" type="short"/>
                </params>
                <declaration name="offset" type="int" line="147"/>
                <declaration name="sAsInt" type="int" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Decodes a {@code String} into a {@code Short}.
                  Accepts decimal, hexadecimal, and octal numbers given by
                  the following grammar:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
                  &lt;dd&gt;{@code -}&lt;dd&gt;{@code +}&lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
                  are as defined in section 3.10.1 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;,
                  except that underscores are not accepted between digits.
                  &lt;p&gt;The sequence of characters following an optional
                  sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
                  &quot;{@code #}&quot;, or leading zero) is parsed as by the {@codeShort.parseShort} method with the indicated radix (10, 16, or
                  8).  This sequence of characters must represent a positive
                  value or a {@link NumberFormatException} will be thrown.  The
                  result is negated if first character of the specified {@codeString} is the minus sign.  No whitespace characters are
                  permitted in the {@code String}.                
                <param>
                    nm the {@code String} to decode.                    
                </param>
                <return>
                    a {@code Short} object holding the {@code short}value represented by {@code nm}                    
                </return>
                <throws>
                    NumberFormatException  if the {@code String} does not
                      contain a parsable {@code short}.                    
                </throws>
                <see>
                    java.lang.Short#parseShort(java.lang.String,int)                    
                </see>
            </javadoc>
            <method name="decode" type="Short" line="187">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="i" type="int" line="188"/>
            </method>
            <declaration name="value" type="short" line="192"/>
            <javadoc line="192">
                The value of the {@code Short}.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="197">
                Constructs a newly allocated {@code Short} object that
                  represents the specified {@code short} value.                
                <param>
                    value     the value to be represented by the{@code Short}.                    
                </param>
            </javadoc>
            <method name="Short" type="constructor" line="202">
                <params>
                    <param name="value" type="short"/>
                </params>
            </method>
            <javadoc line="205">
                Constructs a newly allocated {@code Short} object that
                  represents the {@code short} value indicated by the{@code String} parameter. The string is converted to a{@code short} value in exactly the manner used by the{@code parseShort} method for radix 10.                
                <param>
                    s the {@code String} to be converted to a{@code Short}                    
                </param>
                <throws>
                    NumberFormatException If the {@code String}does not contain a parsable {@code short}.                    
                </throws>
                <see>
                    java.lang.Short#parseShort(java.lang.String,int)                    
                </see>
            </javadoc>
            <method name="Short" type="constructor" line="212">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="215">
                Returns the value of this {@code Short} as a{@code byte}.                
            </javadoc>
            <method name="byteValue" type="byte" line="218"/>
            <javadoc line="221">
                Returns the value of this {@code Short} as a{@code short}.                
            </javadoc>
            <method name="shortValue" type="short" line="224"/>
            <javadoc line="227">
                Returns the value of this {@code Short} as an{@code int}.                
            </javadoc>
            <method name="intValue" type="int" line="230"/>
            <javadoc line="233">
                Returns the value of this {@code Short} as a{@code long}.                
            </javadoc>
            <method name="longValue" type="long" line="236"/>
            <javadoc line="239">
                Returns the value of this {@code Short} as a{@code float}.                
            </javadoc>
            <method name="floatValue" type="float" line="242"/>
            <javadoc line="245">
                Returns the value of this {@code Short} as a{@code double}.                
            </javadoc>
            <method name="doubleValue" type="double" line="248"/>
            <javadoc line="251">
                Returns a {@code String} object representing this{@code Short}&apos;s value.  The value is converted to signed
                  decimal representation and returned as a string, exactly as if
                  the {@code short} value were given as an argument to the{@link java.lang.Short#toString(short)} method.                
                <return>
                    a string representation of the value of this object in
                      base&amp;nbsp;10.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="258"/>
            <javadoc line="261">
                Returns a hash code for this {@code Short}; equal to the result
                  of invoking {@code intValue()}.                
                <return>
                    a hash code value for this {@code Short}                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="266"/>
            <javadoc line="269">
                Compares this object to the specified object.  The result is{@code true} if and only if the argument is not{@code null} and is a {@code Short} object that
                  contains the same {@code short} value as this object.                
                <param>
                    obj       the object to compare with                    
                </param>
                <return>
                    {@code true} if the objects are the same;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="275">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="276"/>
            </method>
            <javadoc line="281">
                Compares two {@code Short} objects numerically.                
                <param>
                    anotherShort   the {@code Short} to be compared.                    
                </param>
                <return>
                    the value {@code 0} if this {@code Short} is
                      equal to the argument {@code Short}; a value less than{@code 0} if this {@code Short} is numerically less
                      than the argument {@code Short}; and a value greater than{@code 0} if this {@code Short} is numerically
                      greater than the argument {@code Short} (signed
                      comparison).                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="291">
                <params>
                    <param name="anotherShort" type="Short"/>
                </params>
            </method>
            <javadoc line="294">
                Compares two {@code short} values numerically.
                  The value returned is identical to what would be returned by:
                  &lt;pre&gt;
                  Short.valueOf(x).compareTo(Short.valueOf(y))
                  &lt;/pre&gt;                
                <param>
                    x the first {@code short} to compare                    
                </param>
                <param>
                    y the second {@code short} to compare                    
                </param>
                <return>
                    the value {@code 0} if {@code x == y};
                      a value less than {@code 0} if {@code x &lt; y}; and
                      a value greater than {@code 0} if {@code x &gt; y}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="307">
                <params>
                    <param name="x" type="short"/>
                    <param name="y" type="short"/>
                </params>
            </method>
            <declaration name="SIZE" type="int" line="310"/>
            <javadoc line="310">
                The number of bits used to represent a {@code short} value in two&apos;s
                  complement binary form.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="316">
                Returns the value obtained by reversing the order of the bytes in the
                  two&apos;s complement representation of the specified {@code short} value.                
                <return>
                    the value obtained by reversing (or, equivalently, swapping)
                      the bytes in the specified {@code short} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverseBytes" type="short" line="323">
                <params>
                    <param name="i" type="short"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="326"/>
            <javadoc line="326">
                use serialVersionUID from JDK 1.1. for interoperability                
            </javadoc>
        </class>
    </source>