<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="StringBuilder" line="29">
            <extends class="AbstractStringBuilder"/>
            <comment line="137">
                Appends the specified string builder to this sequence.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="CharSequence"/>
            <javadoc line="29">
                A mutable sequence of characters.  This class provides an API compatible
                  with &lt;code&gt;StringBuffer&lt;/code&gt;, but with no guarantee of synchronization.
                  This class is designed for use as a drop-in replacement for
                  &lt;code&gt;StringBuffer&lt;/code&gt; in places where the string buffer was being
                  used by a single thread (as is generally the case).   Where possible,
                  it is recommended that this class be used in preference to
                  &lt;code&gt;StringBuffer&lt;/code&gt; as it will be faster under most implementations.
                  &lt;p&gt;The principal operations on a &lt;code&gt;StringBuilder&lt;/code&gt; are the
                  &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods, which are
                  overloaded so as to accept data of any type. Each effectively
                  converts a given datum to a string and then appends or inserts the
                  characters of that string to the string builder. The
                  &lt;code&gt;append&lt;/code&gt; method always adds these characters at the end
                  of the builder; the &lt;code&gt;insert&lt;/code&gt; method adds the characters at
                  a specified point.
                  &lt;p&gt;
                  For example, if &lt;code&gt;z&lt;/code&gt; refers to a string builder object
                  whose current contents are &quot;&lt;code&gt;start&lt;/code&gt;&quot;, then
                  the method call &lt;code&gt;z.append(&quot;le&quot;)&lt;/code&gt; would cause the string
                  builder to contain &quot;&lt;code&gt;startle&lt;/code&gt;&quot;, whereas
                  &lt;code&gt;z.insert(4, &quot;le&quot;)&lt;/code&gt; would alter the string builder to
                  contain &quot;&lt;code&gt;starlet&lt;/code&gt;&quot;.
                  &lt;p&gt;
                  In general, if sb refers to an instance of a &lt;code&gt;StringBuilder&lt;/code&gt;,
                  then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as
                  &lt;code&gt;sb.insert(sb.length(),&amp;nbsp;x)&lt;/code&gt;.
                  Every string builder has a capacity. As long as the length of the
                  character sequence contained in the string builder does not exceed
                  the capacity, it is not necessary to allocate a new internal
                  buffer. If the internal buffer overflows, it is automatically made larger.
                  &lt;p&gt;Instances of &lt;code&gt;StringBuilder&lt;/code&gt; are not safe for
                  use by multiple threads. If such synchronization is required then it is
                  recommended that {@link java.lang.StringBuffer} be used.                
                <author>
                    Michael McCloskey                    
                </author>
                <see>
                    java.lang.StringBuffer                    
                </see>
                <see>
                    java.lang.String                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="77"/>
            <javadoc line="77">
                use serialVersionUID for interoperability                
            </javadoc>
            <javadoc line="80">
                Constructs a string builder with no characters in it and an
                  initial capacity of 16 characters.                
            </javadoc>
            <method name="StringBuilder" type="constructor" line="84"/>
            <javadoc line="88">
                Constructs a string builder with no characters in it and an
                  initial capacity specified by the &lt;code&gt;capacity&lt;/code&gt; argument.                
                <param>
                    capacity  the initial capacity.                    
                </param>
                <throws>
                    NegativeArraySizeException  if the <code>capacity</code>
                      argument is less than <code>0</code>.                    
                </throws>
            </javadoc>
            <method name="StringBuilder" type="constructor" line="96">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Constructs a string builder initialized to the contents of the
                  specified string. The initial capacity of the string builder is
                  &lt;code&gt;16&lt;/code&gt; plus the length of the string argument.                
                <param>
                    str   the initial contents of the buffer.                    
                </param>
                <throws>
                    NullPointerException if <code>str</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="StringBuilder" type="constructor" line="108">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="113">
                Constructs a string builder that contains the same characters
                  as the specified &lt;code&gt;CharSequence&lt;/code&gt;. The initial capacity of
                  the string builder is &lt;code&gt;16&lt;/code&gt; plus the length of the
                  &lt;code&gt;CharSequence&lt;/code&gt; argument.                
                <param>
                    seq   the sequence to copy.                    
                </param>
                <throws>
                    NullPointerException if <code>seq</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="StringBuilder" type="constructor" line="122">
                <params>
                    <param name="seq" type="CharSequence"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="127">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="131">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="137">
                <params>
                    <param name="sb" type="StringBuilder"/>
                </params>
                <declaration name="len" type="int" line="140"/>
                <declaration name="newcount" type="int" line="141"/>
            </method>
            <javadoc line="149">
                Appends the specified &lt;tt&gt;StringBuffer&lt;/tt&gt; to this sequence.
                  &lt;p&gt;
                  The characters of the &lt;tt&gt;StringBuffer&lt;/tt&gt; argument are appended,
                  in order, to this sequence, increasing the
                  length of this sequence by the length of the argument.
                  If &lt;tt&gt;sb&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then the four characters
                  &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are appended to this sequence.
                  &lt;p&gt;
                  Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
                  execution of the &lt;tt&gt;append&lt;/tt&gt; method. Then the character at index
                  &lt;i&gt;k&lt;/i&gt; in the new character sequence is equal to the character at
                  index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less than
                  &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index &lt;i&gt;k-n&lt;/i&gt;
                  in the argument &lt;code&gt;sb&lt;/code&gt;.                
                <param>
                    sb   the <tt>StringBuffer</tt> to append.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="StringBuilder" line="168">
                <params>
                    <param name="sb" type="StringBuffer"/>
                </params>
            </method>
            <javadoc line="173">
                                
            </javadoc>
            <method name="append" type="StringBuilder" line="175">
                <params>
                    <param name="s" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="187">
                @throws IndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="append" type="StringBuilder" line="190">
                <params>
                    <param name="s" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="195">
                <params>
                    <param name="str" type="char[]"/>
                </params>
            </method>
            <javadoc line="200">
                @throws IndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="append" type="StringBuilder" line="203">
                <params>
                    <param name="str" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="208">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="213">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="218">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="223">
                <params>
                    <param name="lng" type="long"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="228">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="append" type="StringBuilder" line="233">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="238">
                @since 1.5                
            </javadoc>
            <method name="appendCodePoint" type="StringBuilder" line="241">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="246">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="delete" type="StringBuilder" line="249">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="254">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="deleteCharAt" type="StringBuilder" line="257">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="262">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="replace" type="StringBuilder" line="265">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="270">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="275">
                <params>
                    <param name="index" type="int"/>
                    <param name="str" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="280">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="283">
                <params>
                    <param name="offset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="287">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="290">
                <params>
                    <param name="offset" type="int"/>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="295">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="298">
                <params>
                    <param name="offset" type="int"/>
                    <param name="str" type="char[]"/>
                </params>
            </method>
            <javadoc line="303">
                @throws IndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="306">
                <params>
                    <param name="dstOffset" type="int"/>
                    <param name="s" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="314">
                @throws IndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="319">
                <params>
                    <param name="dstOffset" type="int"/>
                    <param name="s" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="324">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="327">
                <params>
                    <param name="offset" type="int"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="332">
                @throws IndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="335">
                <params>
                    <param name="offset" type="int"/>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="340">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="343">
                <params>
                    <param name="offset" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="347">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="350">
                <params>
                    <param name="offset" type="int"/>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="354">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="357">
                <params>
                    <param name="offset" type="int"/>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="361">
                @throws StringIndexOutOfBoundsException {@inheritDoc}                
            </javadoc>
            <method name="insert" type="StringBuilder" line="364">
                <params>
                    <param name="offset" type="int"/>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="368">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="indexOf" type="int" line="371">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="375">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="indexOf" type="int" line="378">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <javadoc line="383">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="lastIndexOf" type="int" line="386">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="390">
                @throws NullPointerException {@inheritDoc}                
            </javadoc>
            <method name="lastIndexOf" type="int" line="393">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <method name="reverse" type="StringBuilder" line="398"/>
            <method name="toString" type="String" line="403">
                <comment line="405">
                    Create a copy, don&apos;t share the array                    
                </comment>
            </method>
            <javadoc line="408">
                Save the state of the &lt;tt&gt;StringBuilder&lt;/tt&gt; instance to a stream
                  (that is, serialize it).                
                <serialData>
                    the number of characters currently stored in the string
                      builder (<tt>int</tt>), followed by the characters in the
                      string builder (<tt>char[]</tt>).   The length of the
                      <tt>char</tt> array may be greater than the number of
                      characters currently stored in the string builder, in which
                      case extra characters are ignored.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="420">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="426">
                readObject is called to restore the state of the StringBuffer from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="431">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>