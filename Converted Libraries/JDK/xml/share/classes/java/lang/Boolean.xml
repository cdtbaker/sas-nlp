<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Boolean" line="2">
            <implements interface="java.io.Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Boolean"/>
                </type_params>
            </implements>
            <javadoc line="2">
                The Boolean class wraps a value of the primitive type{@code boolean} in an object. An object of type{@code Boolean} contains a single field whose type is{@code boolean}.
                  &lt;p&gt;
                  In addition, this class provides many methods for
                  converting a {@code boolean} to a {@code String} and a{@code String} to a {@code boolean}, as well as other
                  constants and methods useful when dealing with a{@code boolean}.                
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="TRUE" type="Boolean" line="12"/>
            <javadoc line="12">
                The {@code Boolean} object corresponding to the primitive
                  value {@code true}.                
            </javadoc>
            <declaration name="FALSE" type="Boolean" line="17"/>
            <javadoc line="17">
                The {@code Boolean} object corresponding to the primitive
                  value {@code false}.                
            </javadoc>
            <declaration name="TYPE" type="Class&lt;Boolean&gt;" line="22"/>
            <javadoc line="22">
                The Class object representing the primitive type boolean.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="value" type="boolean" line="27"/>
            <javadoc line="27">
                The value of the Boolean.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="32"/>
            <javadoc line="32">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
            <javadoc line="36">
                Allocates a {@code Boolean} object representing the{@code value} argument.
                  &lt;p&gt;&lt;b&gt;Note: It is rarely appropriate to use this constructor.
                  Unless a &lt;i&gt;new&lt;/i&gt; instance is required, the static factory{@link #valueOf(boolean)} is generally a better choice. It is
                  likely to yield significantly better space and time performance.&lt;/b&gt;                
                <param>
                    value   the value of the {@code Boolean}.                    
                </param>
            </javadoc>
            <method name="Boolean" type="constructor" line="43">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="46">
                Allocates a {@code Boolean} object representing the value{@code true} if the string argument is not {@code null}and is equal, ignoring case, to the string {@code &quot;true&quot;}.
                  Otherwise, allocate a {@code Boolean} object representing the
                  value {@code false}. Examples:&lt;p&gt;{@code new Boolean(&quot;True&quot;)} produces a {@code Boolean} object
                  that represents {@code true}.&lt;br&gt;{@code new Boolean(&quot;yes&quot;)} produces a {@code Boolean} object
                  that represents {@code false}.                
                <param>
                    s   the string to be converted to a {@code Boolean}.                    
                </param>
            </javadoc>
            <method name="Boolean" type="constructor" line="54">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="57">
                Parses the string argument as a boolean.  The {@code boolean}returned represents the value {@code true} if the string argument
                  is not {@code null} and is equal, ignoring case, to the string{@code &quot;true&quot;}. &lt;p&gt;
                  Example: {@code Boolean.parseBoolean(&quot;True&quot;)} returns {@code true}.&lt;br&gt;
                  Example: {@code Boolean.parseBoolean(&quot;yes&quot;)} returns {@code false}.                
                <param>
                    s   the {@code String} containing the boolean
                      representation to be parsed                    
                </param>
                <return>
                    the boolean represented by the string argument                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="parseBoolean" type="boolean" line="67">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="70">
                Returns the value of this {@code Boolean} object as a boolean
                  primitive.                
                <return>
                    the primitive {@code boolean} value of this object.                    
                </return>
            </javadoc>
            <method name="booleanValue" type="boolean" line="75"/>
            <javadoc line="78">
                Returns a {@code Boolean} instance representing the specified{@code boolean} value.  If the specified {@code boolean} value
                  is {@code true}, this method returns {@code Boolean.TRUE};
                  if it is {@code false}, this method returns {@code Boolean.FALSE}.
                  If a new {@code Boolean} instance is not required, this method
                  should generally be used in preference to the constructor{@link #Boolean(boolean)}, as this method is likely to yield
                  significantly better space and time performance.                
                <param>
                    b a boolean value.                    
                </param>
                <return>
                    a {@code Boolean} instance representing {@code b}.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="valueOf" type="Boolean" line="89">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="92">
                Returns a {@code Boolean} with a value represented by the
                  specified string.  The {@code Boolean} returned represents a
                  true value if the string argument is not {@code null}and is equal, ignoring case, to the string {@code &quot;true&quot;}.                
                <param>
                    s   a string.                    
                </param>
                <return>
                    the {@code Boolean} value represented by the string.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Boolean" line="99">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="102">
                Returns a {@code String} object representing the specified
                  boolean.  If the specified boolean is {@code true}, then
                  the string {@code &quot;true&quot;} will be returned, otherwise the
                  string {@code &quot;false&quot;} will be returned.                
                <param>
                    b the boolean to be converted                    
                </param>
                <return>
                    the string representation of the specified {@code boolean}                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="111">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="114">
                Returns a {@code String} object representing this Boolean&apos;s
                  value.  If this object represents the value {@code true},
                  a string equal to {@code &quot;true&quot;} is returned. Otherwise, a
                  string equal to {@code &quot;false&quot;} is returned.                
                <return>
                    a string representation of this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="121"/>
            <javadoc line="124">
                Returns a hash code for this {@code Boolean} object.                
                <return>
                    the integer {@code 1231} if this object represents{@code true}; returns the integer {@code 1237} if this
                      object represents {@code false}.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="129"/>
            <javadoc line="132">
                Returns {@code true} if and only if the argument is not{@code null} and is a {@code Boolean} object that
                  represents the same {@code boolean} value as this object.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    {@code true} if the Boolean objects represent the
                      same value; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="139">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Returns {@code true} if and only if the system property
                  named by the argument exists and is equal to the string{@code &quot;true&quot;}. (Beginning with version 1.0.2 of the
                  Java&lt;small&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/small&gt; platform, the test of
                  this string is case insensitive.) A system property is accessible
                  through {@code getProperty}, a method defined by the{@code System} class.
                  &lt;p&gt;
                  If there is no property with the specified name, or if the specified
                  name is empty or null, then {@code false} is returned.                
                <param>
                    name   the system property name.                    
                </param>
                <return>
                    the {@code boolean} value of the system property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getBoolean" type="boolean" line="159">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="boolean" line="160"/>
                <scope line="161"/>
                <scope line="164"/>
                <scope line="166"/>
            </method>
            <javadoc line="170">
                Compares this {@code Boolean} instance with another.                
                <param>
                    b the {@code Boolean} instance to be compared                    
                </param>
                <return>
                    zero if this object represents the same boolean value as the
                      argument; a positive value if this object represents true
                      and the argument represents false; and a negative value if
                      this object represents false and the argument represents true                    
                </return>
                <throws>
                    NullPointerException if the argument is {@code null}                    
                </throws>
                <see>
                    Comparable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="181">
                <params>
                    <param name="b" type="Boolean"/>
                </params>
            </method>
            <javadoc line="184">
                Compares two {@code boolean} values.
                  The value returned is identical to what would be returned by:
                  &lt;pre&gt;
                  Boolean.valueOf(x).compareTo(Boolean.valueOf(y))
                  &lt;/pre&gt;                
                <param>
                    x the first {@code boolean} to compare                    
                </param>
                <param>
                    y the second {@code boolean} to compare                    
                </param>
                <return>
                    the value {@code 0} if {@code x == y};
                      a value less than {@code 0} if {@code !x && y}; and
                      a value greater than {@code 0} if {@code x && !y}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="197">
                <params>
                    <param name="x" type="boolean"/>
                    <param name="y" type="boolean"/>
                </params>
            </method>
            <method name="toBoolean" type="boolean" line="200">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
    </source>