<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Shutdown" line="29">
            <comment line="40">
                                
            </comment>
            <comment line="46">
                                
            </comment>
            <comment line="49">
                The system shutdown hooks are registered with a predefined slot.                
            </comment>
            <comment line="50">
                The list of shutdown hooks is as follows:                
            </comment>
            <comment line="51">
                (0) Console restore hook                
            </comment>
            <comment line="52">
                (1) Application hooks                
            </comment>
            <comment line="53">
                (2) DeleteOnExit hook                
            </comment>
            <comment line="57">
                the index of the currently running shutdown hook to the hooks array                
            </comment>
            <comment line="60">
                                
            </comment>
            <comment line="64">
                                
            </comment>
            <comment line="67">
                                
            </comment>
            <comment line="112">
                Run all registered shutdown hooks                
            </comment>
            <comment line="134">
                The halt method is synchronized on the halt lock
                 to avoid corruption of the delete-on-shutdown file list.
                 It invokes the true native halt method.                
            </comment>
            <comment line="146">
                                
            </comment>
            <comment line="150">
                The actual shutdown sequence is defined here.
                
                 If it weren&apos;t for runFinalizersOnExit, this would be simple -- we&apos;d just
                 run the hooks and then halt.  Instead we need to keep track of whether
                 we&apos;re running hooks or finalizers.  In the latter case a finalizer could
                 invoke exit(1) to cause immediate termination, while in the former case
                 any further invocations of exit(n), for any n, simply stall.  Note that
                 if on-exit finalizers are enabled they&apos;re run iff the shutdown is
                 initiated by an exit(0); they&apos;re never run on exit(n) for n != 0 or in
                 response to SIGINT, SIGTERM, etc.                
            </comment>
            <comment line="178">
                Invoked by Runtime.exit, which does all the security checks.
                 Also invoked by handlers for system-provided termination events,
                 which should pass a nonzero status code.                
            </comment>
            <comment line="219">
                Invoked by the JNI DestroyJavaVM procedure when the last non-daemon
                 thread has finished.  Unlike the exit method, this method does not
                 actually halt the VM.                
            </comment>
            <javadoc line="29">
                Package-private utility class containing data structures and logic
                  governing the virtual-machine shutdown sequence.                
                <author>
                    Mark Reinhold                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="RUNNING" type="int" line="40"/>
            <declaration name="HOOKS" type="int" line="41"/>
            <declaration name="FINALIZERS" type="int" line="42"/>
            <declaration name="state" type="int" line="43"/>
            <declaration name="runFinalizersOnExit" type="boolean" line="46"/>
            <declaration name="MAX_SYSTEM_HOOKS" type="int" line="53"/>
            <declaration name="hooks" type="Runnable[]" line="54"/>
            <declaration name="currentRunningHook" type="int" line="57"/>
            <class name="Lock" line="60"/>
            <declaration name="lock" type="Object" line="61"/>
            <declaration name="haltLock" type="Object" line="64"/>
            <method name="setRunFinalizersOnExit" type="void" line="67">
                <params>
                    <param name="run" type="boolean"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Add a new shutdown hook.  Checks the shutdown state and the hook itself,
                  but does not do any security checks.
                  The registerShutdownInProgress parameter should be false except
                  registering the DeleteOnExitHook since the first file may
                  be added to the delete on exit list by the application shutdown
                  hooks.                
                <params>
                    slot  the slot in the shutdown hook array, whose element
                      will be invoked in order during shutdown                    
                </params>
                <params>
                    registerShutdownInProgress true to allow the hook
                      to be registered even if the shutdown is in progress.                    
                </params>
                <params>
                    hook  the hook to be registered                    
                </params>
                <throw>
                    IllegalStateException
                      if registerShutdownInProgress is false and shutdown is in progress; or
                      if registerShutdownInProgress is true and the shutdown process
                      already passes the given slot                    
                </throw>
            </javadoc>
            <method name="add" type="void" line="94">
                <params>
                    <param name="slot" type="int"/>
                    <param name="registerShutdownInProgress" type="boolean"/>
                    <param name="hook" type="Runnable"/>
                </params>
                <scope line="95">
                    <scope line="99"/>
                    <scope line="102"/>
                </scope>
            </method>
            <method name="runHooks" type="void" line="113">
                <comment line="118">
                    acquire the lock to make sure the hook registered during                    
                </comment>
                <comment line="119">
                    shutdown is visible here.                    
                </comment>
                <scope line="114">
                    <scope line="115">
                        <declaration name="hook" type="Runnable" line="116"/>
                        <scope line="117"/>
                    </scope>
                    <scope line="124">
                        <scope line="125">
                            <declaration name="td" type="ThreadDeath" line="126"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="halt" type="void" line="137">
                <params>
                    <param name="status" type="int"/>
                </params>
                <scope line="138"/>
            </method>
            <method name="halt0" type="void" line="143"/>
            <method name="runAllFinalizers" type="void" line="146"/>
            <method name="sequence" type="void" line="160">
                <comment line="162">
                    Guard against the possibility of a daemon thread invoking exit
                     after DestroyJavaVM initiates the shutdown sequence                    
                </comment>
                <scope line="161"/>
                <declaration name="rfoe" type="boolean" line="168"/>
                <scope line="169"/>
            </method>
            <method name="exit" type="void" line="181">
                <params>
                    <param name="status" type="int"/>
                </params>
                <comment line="186">
                                        
                </comment>
                <comment line="189">
                                        
                </comment>
                <comment line="193">
                                        
                </comment>
                <comment line="196">
                    Compatibility with old behavior:
                     Run more finalizers and then halt                    
                </comment>
                <comment line="209">
                    Synchronize on the class object, causing any other thread
                     that attempts to initiate shutdown to stall indefinitely                    
                </comment>
                <declaration name="runMoreFinalizers" type="boolean" line="182"/>
                <scope line="183">
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
                <scope line="204"/>
                <scope line="208"/>
            </method>
            <method name="shutdown" type="void" line="222">
                <comment line="225">
                                        
                </comment>
                <comment line="228">
                                        
                </comment>
                <scope line="223"/>
                <scope line="233"/>
            </method>
        </class>
    </source>