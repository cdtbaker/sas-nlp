<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="ReflectiveOperationException" line="2">
            <extends class="Exception"/>
            <javadoc line="2">
                Common superclass of exceptions thrown by reflective operations in
                  core reflection.                
                <see>
                    LinkageError                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="9"/>
            <javadoc line="10">
                Constructs a new exception with {@code null} as its detail
                  message.  The cause is not initialized, and may subsequently be
                  initialized by a call to {@link #initCause}.                
            </javadoc>
            <method name="ReflectiveOperationException" type="constructor" line="15"/>
            <javadoc line="18">
                Constructs a new exception with the specified detail message.
                  The cause is not initialized, and may subsequently be
                  initialized by a call to {@link #initCause}.                
                <param>
                    message   the detail message. The detail message is saved for
                      later retrieval by the {@link #getMessage()} method.                    
                </param>
            </javadoc>
            <method name="ReflectiveOperationException" type="constructor" line="25">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="28">
                Constructs a new exception with the specified detail message
                  and cause.
                  &lt;p&gt;Note that the detail message associated with{@code cause} is &lt;em&gt;not&lt;/em&gt; automatically incorporated in
                  this exception&apos;s detail message.                
                <param>
                    message the detail message (which is saved for later retrieval
                      by the {@link #getMessage()} method).                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
            </javadoc>
            <method name="ReflectiveOperationException" type="constructor" line="39">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="42">
                Constructs a new exception with the specified cause and a detail
                  message of {@code (cause==null ? null : cause.toString())} (which
                  typically contains the class and detail message of {@code cause}).                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
            </javadoc>
            <method name="ReflectiveOperationException" type="constructor" line="50">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
        </class>
    </source>