<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="sun.misc.FloatingDecimal"/>
        <import package="java.util.Arrays"/>
        <class name="AbstractStringBuilder" line="31">
            <comment line="422">
                Documentation in subclasses because of synchro difference                
            </comment>
            <comment line="433">
                Documentation in subclasses because of synchro difference                
            </comment>
            <implements interface="Appendable"/>
            <implements interface="CharSequence"/>
            <javadoc line="31">
                A mutable sequence of characters.
                  &lt;p&gt;
                  Implements a modifiable string. At any point in time it contains some
                  particular sequence of characters, but the length and content of the
                  sequence can be changed through certain method calls.                
                <author>
                    Michael McCloskey                    
                </author>
                <author>
                    Martin Buchholz                    
                </author>
                <author>
                    Ulf Zibis                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="value" type="char[]" line="44"/>
            <javadoc line="44">
                The value is used for character storage.                
            </javadoc>
            <declaration name="count" type="int" line="49"/>
            <javadoc line="49">
                The count is the number of characters used.                
            </javadoc>
            <javadoc line="54">
                This no-arg constructor is necessary for serialization of subclasses.                
            </javadoc>
            <method name="AbstractStringBuilder" type="constructor" line="57"/>
            <javadoc line="60">
                Creates an AbstractStringBuilder of the specified capacity.                
            </javadoc>
            <method name="AbstractStringBuilder" type="constructor" line="63">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Returns the length (character count).                
                <return>
                    the length of the sequence of characters currently
                      represented by this object                    
                </return>
            </javadoc>
            <method name="length" type="int" line="73"/>
            <javadoc line="77">
                Returns the current capacity. The capacity is the amount of storage
                  available for newly inserted characters, beyond which an allocation
                  will occur.                
                <return>
                    the current capacity                    
                </return>
            </javadoc>
            <method name="capacity" type="int" line="84"/>
            <javadoc line="88">
                Ensures that the capacity is at least equal to the specified minimum.
                  If the current capacity is less than the argument, then a new internal
                  array is allocated with greater capacity. The new capacity is the
                  larger of:
                  &lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;minimumCapacity&lt;/code&gt; argument.
                  &lt;li&gt;Twice the old capacity, plus &lt;code&gt;2&lt;/code&gt;.
                  &lt;/ul&gt;
                  If the &lt;code&gt;minimumCapacity&lt;/code&gt; argument is nonpositive, this
                  method takes no action and simply returns.                
                <param>
                    minimumCapacity   the minimum desired capacity.                    
                </param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="102">
                <params>
                    <param name="minimumCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                This method has the same contract as ensureCapacity, but is
                  never synchronized.                
            </javadoc>
            <method name="ensureCapacityInternal" type="void" line="111">
                <params>
                    <param name="minimumCapacity" type="int"/>
                </params>
                <comment line="113">
                    overflow-conscious code                    
                </comment>
            </method>
            <javadoc line="117">
                This implements the expansion semantics of ensureCapacity with no
                  size check or synchronization.                
            </javadoc>
            <method name="expandCapacity" type="void" line="121">
                <params>
                    <param name="minimumCapacity" type="int"/>
                </params>
                <comment line="127">
                    overflow                    
                </comment>
                <declaration name="newCapacity" type="int" line="122"/>
                <scope line="125"/>
            </method>
            <javadoc line="133">
                Attempts to reduce storage used for the character sequence.
                  If the buffer is larger than necessary to hold its current sequence of
                  characters, then it may be resized to become more space efficient.
                  Calling this method may, but is not required to, affect the value
                  returned by a subsequent call to the {@link #capacity()} method.                
            </javadoc>
            <method name="trimToSize" type="void" line="140">
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Sets the length of the character sequence.
                  The sequence is changed to a new character sequence
                  whose length is specified by the argument. For every nonnegative
                  index &lt;i&gt;k&lt;/i&gt; less than &lt;code&gt;newLength&lt;/code&gt;, the character at
                  index &lt;i&gt;k&lt;/i&gt; in the new character sequence is the same as the
                  character at index &lt;i&gt;k&lt;/i&gt; in the old sequence if &lt;i&gt;k&lt;/i&gt; is less
                  than the length of the old character sequence; otherwise, it is the
                  null character &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;.
                  In other words, if the &lt;code&gt;newLength&lt;/code&gt; argument is less than
                  the current length, the length is changed to the specified length.
                  &lt;p&gt;
                  If the &lt;code&gt;newLength&lt;/code&gt; argument is greater than or equal
                  to the current length, sufficient null characters
                  (&lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;) are appended so that
                  length becomes the &lt;code&gt;newLength&lt;/code&gt; argument.
                  &lt;p&gt;
                  The &lt;code&gt;newLength&lt;/code&gt; argument must be greater than or equal
                  to &lt;code&gt;0&lt;/code&gt;.                
                <param>
                    newLength   the new length                    
                </param>
                <throws>
                    IndexOutOfBoundsException  if the
                      &lt;code&gt;newLength&lt;/code&gt; argument is negative.                    
                </throws>
            </javadoc>
            <method name="setLength" type="void" line="171">
                <params>
                    <param name="newLength" type="int"/>
                </params>
                <scope line="176"/>
                <scope line="179"/>
            </method>
            <javadoc line="184">
                Returns the &lt;code&gt;char&lt;/code&gt; value in this sequence at the specified index.
                  The first &lt;code&gt;char&lt;/code&gt; value is at index &lt;code&gt;0&lt;/code&gt;, the next at index
                  &lt;code&gt;1&lt;/code&gt;, and so on, as in array indexing.
                  &lt;p&gt;
                  The index argument must be greater than or equal to
                  &lt;code&gt;0&lt;/code&gt;, and less than the length of this sequence.
                  &lt;p&gt;If the &lt;code&gt;char&lt;/code&gt; value specified by the index is a
                  &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate
                  value is returned.                
                <param>
                    index   the index of the desired &lt;code&gt;char&lt;/code&gt; value.                    
                </param>
                <return>
                    the &lt;code&gt;char&lt;/code&gt; value at the specified index.                    
                </return>
                <throws>
                    IndexOutOfBoundsException  if &lt;code&gt;index&lt;/code&gt; is
                      negative or greater than or equal to &lt;code&gt;length()&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="charAt" type="char" line="201">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="207">
                Returns the character (Unicode code point) at the specified
                  index. The index refers to &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units) and ranges from &lt;code&gt;0&lt;/code&gt; to{@link #length()}&lt;code&gt; - 1&lt;/code&gt;.
                  &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value specified at the given index
                  is in the high-surrogate range, the following index is less
                  than the length of this sequence, and the
                  &lt;code&gt;char&lt;/code&gt; value at the following index is in the
                  low-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.                
                <param>
                    index the index to the &lt;code&gt;char&lt;/code&gt; values                    
                </param>
                <return>
                    the code point value of the character at the
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
                      argument is negative or not less than the length of this
                      sequence.                    
                </exception>
            </javadoc>
            <method name="codePointAt" type="int" line="228">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="229"/>
            </method>
            <javadoc line="235">
                Returns the character (Unicode code point) before the specified
                  index. The index refers to &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units) and ranges from &lt;code&gt;1&lt;/code&gt; to {@link #length()}.
                  &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt;
                  is in the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
                  negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
                  2)&lt;/code&gt; is in the high-surrogate range, then the
                  supplementary code point value of the surrogate pair is
                  returned. If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;index -
                  1&lt;/code&gt; is an unpaired low-surrogate or a high-surrogate, the
                  surrogate value is returned.                
                <param>
                    index the index following the code point that should be returned                    
                </param>
                <return>
                    the Unicode code point value before the given index.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
                      argument is less than 1 or greater than the length
                      of this sequence.                    
                </exception>
            </javadoc>
            <method name="codePointBefore" type="int" line="256">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="i" type="int" line="257"/>
                <scope line="258"/>
            </method>
            <javadoc line="264">
                Returns the number of Unicode code points in the specified text
                  range of this sequence. The text range begins at the specified
                  &lt;code&gt;beginIndex&lt;/code&gt; and extends to the &lt;code&gt;char&lt;/code&gt; at
                  index &lt;code&gt;endIndex - 1&lt;/code&gt;. Thus the length (in
                  &lt;code&gt;char&lt;/code&gt;s) of the text range is
                  &lt;code&gt;endIndex-beginIndex&lt;/code&gt;. Unpaired surrogates within
                  this sequence count as one code point each.                
                <param>
                    beginIndex the index to the first &lt;code&gt;char&lt;/code&gt; of
                      the text range.                    
                </param>
                <param>
                    endIndex the index after the last &lt;code&gt;char&lt;/code&gt; of
                      the text range.                    
                </param>
                <return>
                    the number of Unicode code points in the specified text
                      range                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the
                      &lt;code&gt;beginIndex&lt;/code&gt; is negative, or &lt;code&gt;endIndex&lt;/code&gt;
                      is larger than the length of this sequence, or
                      &lt;code&gt;beginIndex&lt;/code&gt; is larger than &lt;code&gt;endIndex&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="codePointCount" type="int" line="284">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="285"/>
            </method>
            <javadoc line="291">
                Returns the index within this sequence that is offset from the
                  given &lt;code&gt;index&lt;/code&gt; by &lt;code&gt;codePointOffset&lt;/code&gt; code
                  points. Unpaired surrogates within the text range given by
                  &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;codePointOffset&lt;/code&gt; count as
                  one code point each.                
                <param>
                    index the index to be offset                    
                </param>
                <param>
                    codePointOffset the offset in code points                    
                </param>
                <return>
                    the index within this sequence                    
                </return>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt;
                      is negative or larger then the length of this sequence,
                      or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive and the subsequence
                      starting with &lt;code&gt;index&lt;/code&gt; has fewer than
                      &lt;code&gt;codePointOffset&lt;/code&gt; code points,
                      or if &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the subsequence
                      before &lt;code&gt;index&lt;/code&gt; has fewer than the absolute value of
                      &lt;code&gt;codePointOffset&lt;/code&gt; code points.                    
                </exception>
            </javadoc>
            <method name="offsetByCodePoints" type="int" line="310">
                <params>
                    <param name="index" type="int"/>
                    <param name="codePointOffset" type="int"/>
                </params>
                <scope line="311"/>
            </method>
            <javadoc line="318">
                Characters are copied from this sequence into the
                  destination character array &lt;code&gt;dst&lt;/code&gt;. The first character to
                  be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;; the last character to
                  be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;. The total number of
                  characters to be copied is &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;. The
                  characters are copied into the subarray of &lt;code&gt;dst&lt;/code&gt; starting
                  at index &lt;code&gt;dstBegin&lt;/code&gt; and ending at index:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  dstbegin + (srcEnd-srcBegin) - 1
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    srcBegin   start copying at this offset.                    
                </param>
                <param>
                    srcEnd     stop copying at this offset.                    
                </param>
                <param>
                    dst        the array to copy the data into.                    
                </param>
                <param>
                    dstBegin   offset into &lt;code&gt;dst&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;dst&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException  if any of the following is true:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is negative
                      &lt;li&gt;&lt;code&gt;dstBegin&lt;/code&gt; is negative
                      &lt;li&gt;the &lt;code&gt;srcBegin&lt;/code&gt; argument is greater than
                      the &lt;code&gt;srcEnd&lt;/code&gt; argument.
                      &lt;li&gt;&lt;code&gt;srcEnd&lt;/code&gt; is greater than
                      &lt;code&gt;this.length()&lt;/code&gt;.
                      &lt;li&gt;&lt;code&gt;dstBegin+srcEnd-srcBegin&lt;/code&gt; is greater than
                      &lt;code&gt;dst.length&lt;/code&gt;
                      &lt;/ul&gt;                    
                </throws>
            </javadoc>
            <method name="getChars" type="void" line="349">
                <params>
                    <param name="srcBegin" type="int"/>
                    <param name="srcEnd" type="int"/>
                    <param name="dst" type="char[]"/>
                    <param name="dstBegin" type="int"/>
                </params>
            </method>
            <javadoc line="359">
                The character at the specified index is set to &lt;code&gt;ch&lt;/code&gt;. This
                  sequence is altered to represent a new character sequence that is
                  identical to the old character sequence, except that it contains the
                  character &lt;code&gt;ch&lt;/code&gt; at position &lt;code&gt;index&lt;/code&gt;.
                  &lt;p&gt;
                  The index argument must be greater than or equal to
                  &lt;code&gt;0&lt;/code&gt;, and less than the length of this sequence.                
                <param>
                    index   the index of the character to modify.                    
                </param>
                <param>
                    ch      the new character.                    
                </param>
                <throws>
                    IndexOutOfBoundsException  if &lt;code&gt;index&lt;/code&gt; is
                      negative or greater than or equal to &lt;code&gt;length()&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="setCharAt" type="void" line="373">
                <params>
                    <param name="index" type="int"/>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="379">
                Appends the string representation of the {@code Object} argument.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(Object)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    obj   an {@code Object}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="390">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="394">
                Appends the specified string to this character sequence.
                  &lt;p&gt;
                  The characters of the {@code String} argument are appended, in
                  order, increasing the length of this sequence by the length of the
                  argument. If {@code str} is {@code null}, then the four
                  characters {@code &quot;null&quot;} are appended.
                  &lt;p&gt;
                  Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
                  execution of the {@code append} method. Then the character at
                  index &lt;i&gt;k&lt;/i&gt; in the new character sequence is equal to the character
                  at index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less
                  than &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index
                  &lt;i&gt;k-n&lt;/i&gt; in the argument {@code str}.                
                <param>
                    str   a string.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="412">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="414"/>
            </method>
            <method name="append" type="AbstractStringBuilder" line="422">
                <params>
                    <param name="sb" type="StringBuffer"/>
                </params>
                <declaration name="len" type="int" line="425"/>
            </method>
            <method name="append" type="AbstractStringBuilder" line="433">
                <params>
                    <param name="s" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="443">
                Appends a subsequence of the specified {@code CharSequence} to this
                  sequence.
                  &lt;p&gt;
                  Characters of the argument {@code s}, starting at
                  index {@code start}, are appended, in order, to the contents of
                  this sequence up to the (exclusive) index {@code end}. The length
                  of this sequence is increased by the value of {@code end - start}.
                  &lt;p&gt;
                  Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
                  execution of the {@code append} method. Then the character at
                  index &lt;i&gt;k&lt;/i&gt; in this character sequence becomes equal to the
                  character at index &lt;i&gt;k&lt;/i&gt; in this sequence, if &lt;i&gt;k&lt;/i&gt; is less than
                  &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index
                  &lt;i&gt;k+start-n&lt;/i&gt; in the argument {@code s}.
                  &lt;p&gt;
                  If {@code s} is {@code null}, then this method appends
                  characters as if the s parameter was a sequence containing the four
                  characters {@code &quot;null&quot;}.                
                <param>
                    s the sequence to append.                    
                </param>
                <param>
                    start   the starting index of the subsequence to be appended.                    
                </param>
                <param>
                    end     the end index of the subsequence to be appended.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if{@code start} is negative, or{@code start} is greater than {@code end} or{@code end} is greater than {@code s.length()}                    
                </throws>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="472">
                <params>
                    <param name="s" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="479"/>
            </method>
            <javadoc line="487">
                Appends the string representation of the {@code char} array
                  argument to this sequence.
                  &lt;p&gt;
                  The characters of the array argument are appended, in order, to
                  the contents of this sequence. The length of this sequence
                  increases by the length of the argument.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(char[])},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    str   the characters to be appended.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="503">
                <params>
                    <param name="str" type="char[]"/>
                </params>
                <declaration name="len" type="int" line="504"/>
            </method>
            <javadoc line="511">
                Appends the string representation of a subarray of the{@code char} array argument to this sequence.
                  &lt;p&gt;
                  Characters of the {@code char} array {@code str}, starting at
                  index {@code offset}, are appended, in order, to the contents
                  of this sequence. The length of this sequence increases
                  by the value of {@code len}.
                  &lt;p&gt;
                  The overall effect is exactly as if the arguments were converted
                  to a string by the method {@link String#valueOf(char[],int,int)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    str      the characters to be appended.                    
                </param>
                <param>
                    offset   the index of the first {@code char} to append.                    
                </param>
                <param>
                    len      the number of {@code char}s to append.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionif {@code offset &lt; 0} or {@code len &lt; 0}or {@code offset+len &gt; str.length}                    
                </throws>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="533">
                <params>
                    <param name="str" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="535">
                    let arraycopy report AIOOBE for len &lt; 0                    
                </comment>
            </method>
            <javadoc line="541">
                Appends the string representation of the {@code boolean}argument to the sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(boolean)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    b   a {@code boolean}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="553">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="554"/>
                <scope line="560"/>
            </method>
            <javadoc line="571">
                Appends the string representation of the {@code char}argument to this sequence.
                  &lt;p&gt;
                  The argument is appended to the contents of this sequence.
                  The length of this sequence increases by {@code 1}.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(char)},
                  and the character in that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    c   a {@code char}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="586">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="592">
                Appends the string representation of the {@code int}argument to this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(int)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    i   an {@code int}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="604">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="605"/>
                <declaration name="appendedLength" type="int" line="609"/>
                <declaration name="spaceNeeded" type="int" line="611"/>
            </method>
            <javadoc line="618">
                Appends the string representation of the {@code long}argument to this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(long)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    l   a {@code long}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="630">
                <params>
                    <param name="l" type="long"/>
                </params>
                <scope line="631"/>
                <declaration name="appendedLength" type="int" line="635"/>
                <declaration name="spaceNeeded" type="int" line="637"/>
            </method>
            <javadoc line="644">
                Appends the string representation of the {@code float}argument to this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(float)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    f   a {@code float}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="656">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="661">
                Appends the string representation of the {@code double}argument to this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the argument were converted
                  to a string by the method {@link String#valueOf(double)},
                  and the characters of that string were then{@link #append(String) appended} to this character sequence.                
                <param>
                    d   a {@code double}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="append" type="AbstractStringBuilder" line="673">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="678">
                Removes the characters in a substring of this sequence.
                  The substring begins at the specified {@code start} and extends to
                  the character at index {@code end - 1} or to the end of the
                  sequence if no such character exists. If{@code start} is equal to {@code end}, no changes are made.                
                <param>
                    start  The beginning index, inclusive.                    
                </param>
                <param>
                    end    The ending index, exclusive.                    
                </param>
                <return>
                    This object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if {@code start}is negative, greater than {@code length()}, or
                      greater than {@code end}.                    
                </throws>
            </javadoc>
            <method name="delete" type="AbstractStringBuilder" line="692">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="699"/>
                <scope line="700"/>
            </method>
            <javadoc line="707">
                Appends the string representation of the {@code codePoint}argument to this sequence.
                  &lt;p&gt; The argument is appended to the contents of this sequence.
                  The length of this sequence increases by{@link Character#charCount(int) Character.charCount(codePoint)}.
                  &lt;p&gt; The overall effect is exactly as if the argument were
                  converted to a {@code char} array by the method{@link Character#toChars(int)} and the character in that array
                  were then {@link #append(char[]) appended} to this character
                  sequence.                
                <param>
                    codePoint   a Unicode code point                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified{@code codePoint} isn&apos;t a valid Unicode code point                    
                </exception>
            </javadoc>
            <method name="appendCodePoint" type="AbstractStringBuilder" line="726">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <declaration name="count" type="int" line="727"/>
                <scope line="729"/>
                <scope line="733"/>
                <scope line="737"/>
            </method>
            <javadoc line="743">
                Removes the &lt;code&gt;char&lt;/code&gt; at the specified position in this
                  sequence. This sequence is shortened by one &lt;code&gt;char&lt;/code&gt;.
                  &lt;p&gt;Note: If the character at the given index is a supplementary
                  character, this method does not remove the entire character. If
                  correct handling of supplementary characters is required,
                  determine the number of &lt;code&gt;char&lt;/code&gt;s to remove by calling
                  &lt;code&gt;Character.charCount(thisSequence.codePointAt(index))&lt;/code&gt;,
                  where &lt;code&gt;thisSequence&lt;/code&gt; is this sequence.                
                <param>
                    index  Index of &lt;code&gt;char&lt;/code&gt; to remove                    
                </param>
                <return>
                    This object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
                      is negative or greater than or equal to
                      &lt;code&gt;length()&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="deleteCharAt" type="AbstractStringBuilder" line="760">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="768">
                Replaces the characters in a substring of this sequence
                  with characters in the specified &lt;code&gt;String&lt;/code&gt;. The substring
                  begins at the specified &lt;code&gt;start&lt;/code&gt; and extends to the character
                  at index &lt;code&gt;end - 1&lt;/code&gt; or to the end of the
                  sequence if no such character exists. First the
                  characters in the substring are removed and then the specified
                  &lt;code&gt;String&lt;/code&gt; is inserted at &lt;code&gt;start&lt;/code&gt;. (This
                  sequence will be lengthened to accommodate the
                  specified String if necessary.)                
                <param>
                    start    The beginning index, inclusive.                    
                </param>
                <param>
                    end      The ending index, exclusive.                    
                </param>
                <param>
                    str   String that will replace previous contents.                    
                </param>
                <return>
                    This object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt;
                      is negative, greater than &lt;code&gt;length()&lt;/code&gt;, or
                      greater than &lt;code&gt;end&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="replace" type="AbstractStringBuilder" line="787">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="797"/>
                <declaration name="newCount" type="int" line="798"/>
            </method>
            <javadoc line="807">
                Returns a new &lt;code&gt;String&lt;/code&gt; that contains a subsequence of
                  characters currently contained in this character sequence. The
                  substring begins at the specified index and extends to the end of
                  this sequence.                
                <param>
                    start    The beginning index, inclusive.                    
                </param>
                <return>
                    The new string.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt; is
                      less than zero, or greater than the length of this object.                    
                </throws>
            </javadoc>
            <method name="substring" type="String" line="818">
                <params>
                    <param name="start" type="int"/>
                </params>
            </method>
            <javadoc line="822">
                Returns a new character sequence that is a subsequence of this sequence.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;blockquote&gt;&lt;pre&gt;
                  sb.subSequence(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;
                  behaves in exactly the same way as the invocation
                  &lt;blockquote&gt;&lt;pre&gt;
                  sb.substring(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;
                  This method is provided so that this class can
                  implement the {@link CharSequence} interface. &lt;/p&gt;                
                <param>
                    start   the start index, inclusive.                    
                </param>
                <param>
                    end     the end index, exclusive.                    
                </param>
                <return>
                    the specified subsequence.                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionif &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative,
                      if &lt;tt&gt;end&lt;/tt&gt; is greater than &lt;tt&gt;length()&lt;/tt&gt;,
                      or if &lt;tt&gt;start&lt;/tt&gt; is greater than &lt;tt&gt;end&lt;/tt&gt;                    
                </throws>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="subSequence" type="CharSequence" line="848">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="852">
                Returns a new &lt;code&gt;String&lt;/code&gt; that contains a subsequence of
                  characters currently contained in this sequence. The
                  substring begins at the specified &lt;code&gt;start&lt;/code&gt; and
                  extends to the character at index &lt;code&gt;end - 1&lt;/code&gt;.                
                <param>
                    start    The beginning index, inclusive.                    
                </param>
                <param>
                    end      The ending index, exclusive.                    
                </param>
                <return>
                    The new string.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt;
                      or &lt;code&gt;end&lt;/code&gt; are negative or greater than
                      &lt;code&gt;length()&lt;/code&gt;, or &lt;code&gt;start&lt;/code&gt; is
                      greater than &lt;code&gt;end&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="substring" type="String" line="866">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="876">
                Inserts the string representation of a subarray of the {@code str}array argument into this sequence. The subarray begins at the
                  specified {@code offset} and extends {@code len} {@code char}s.
                  The characters of the subarray are inserted into this sequence at
                  the position indicated by {@code index}. The length of this
                  sequence increases by {@code len} {@code char}s.                
                <param>
                    index    position at which to insert subarray.                    
                </param>
                <param>
                    str       A {@code char} array.                    
                </param>
                <param>
                    offset   the index of the first {@code char} in subarray to
                      be inserted.                    
                </param>
                <param>
                    len      the number of {@code char}s in the subarray to
                      be inserted.                    
                </param>
                <return>
                    This object                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if {@code index}is negative or greater than {@code length()}, or{@code offset} or {@code len} are negative, or{@code (offset+len)} is greater than{@code str.length}.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="899">
                <params>
                    <param name="index" type="int"/>
                    <param name="str" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="913">
                Inserts the string representation of the {@code Object}argument into this character sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(Object)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    obj      an {@code Object}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="932">
                <params>
                    <param name="offset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="936">
                Inserts the string into this character sequence.
                  &lt;p&gt;
                  The characters of the {@code String} argument are inserted, in
                  order, into this sequence at the indicated offset, moving up any
                  characters originally above that position and increasing the length
                  of this sequence by the length of the argument. If{@code str} is {@code null}, then the four characters{@code &quot;null&quot;} are inserted into this sequence.
                  &lt;p&gt;
                  The character at index &lt;i&gt;k&lt;/i&gt; in the new character sequence is
                  equal to:
                  &lt;ul&gt;
                  &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if
                  &lt;i&gt;k&lt;/i&gt; is less than {@code offset}&lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;{@code -offset} in the
                  argument {@code str}, if &lt;i&gt;k&lt;/i&gt; is not less than{@code offset} but is less than {@code offset+str.length()}&lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;{@code -str.length()} in the
                  old character sequence, if &lt;i&gt;k&lt;/i&gt; is not less than{@code offset+str.length()}&lt;/ul&gt;&lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    str      a string.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="967">
                <params>
                    <param name="offset" type="int"/>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="972"/>
            </method>
            <javadoc line="980">
                Inserts the string representation of the {@code char} array
                  argument into this sequence.
                  &lt;p&gt;
                  The characters of the array argument are inserted into the
                  contents of this sequence at the position indicated by{@code offset}. The length of this sequence increases by
                  the length of the argument.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(char[])},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    str      a character array.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1004">
                <params>
                    <param name="offset" type="int"/>
                    <param name="str" type="char[]"/>
                </params>
                <declaration name="len" type="int" line="1007"/>
            </method>
            <javadoc line="1015">
                Inserts the specified {@code CharSequence} into this sequence.
                  &lt;p&gt;
                  The characters of the {@code CharSequence} argument are inserted,
                  in order, into this sequence at the indicated offset, moving up
                  any characters originally above that position and increasing the length
                  of this sequence by the length of the argument s.
                  &lt;p&gt;
                  The result of this method is exactly the same as if it were an
                  invocation of this object&apos;s{@link #insert(int,CharSequence,int,int) insert}(dstOffset, s, 0, s.length())
                  method.
                  &lt;p&gt;If {@code s} is {@code null}, then the four characters{@code &quot;null&quot;} are inserted into this sequence.                
                <param>
                    dstOffset   the offset.                    
                </param>
                <param>
                    s the sequence to be inserted                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    IndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1036">
                <params>
                    <param name="dstOffset" type="int"/>
                    <param name="s" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="1044">
                Inserts a subsequence of the specified {@code CharSequence} into
                  this sequence.
                  &lt;p&gt;
                  The subsequence of the argument {@code s} specified by{@code start} and {@code end} are inserted,
                  in order, into this sequence at the specified destination offset, moving
                  up any characters originally above that position. The length of this
                  sequence is increased by {@code end - start}.
                  &lt;p&gt;
                  The character at index &lt;i&gt;k&lt;/i&gt; in this sequence becomes equal to:
                  &lt;ul&gt;
                  &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt; in this sequence, if
                  &lt;i&gt;k&lt;/i&gt; is less than {@code dstOffset}&lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;{@code +start-dstOffset} in
                  the argument {@code s}, if &lt;i&gt;k&lt;/i&gt; is greater than or equal to{@code dstOffset} but is less than {@code dstOffset+end-start}&lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;{@code -(end-start)} in this
                  sequence, if &lt;i&gt;k&lt;/i&gt; is greater than or equal to{@code dstOffset+end-start}&lt;/ul&gt;&lt;p&gt;
                  The {@code dstOffset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.
                  &lt;p&gt;The start argument must be nonnegative, and not greater than{@code end}.
                  &lt;p&gt;The end argument must be greater than or equal to{@code start}, and less than or equal to the length of s.
                  &lt;p&gt;If {@code s} is {@code null}, then this method inserts
                  characters as if the s parameter was a sequence containing the four
                  characters {@code &quot;null&quot;}.                
                <param>
                    dstOffset   the offset in this sequence.                    
                </param>
                <param>
                    s       the sequence to be inserted.                    
                </param>
                <param>
                    start   the starting index of the subsequence to be inserted.                    
                </param>
                <param>
                    end     the end index of the subsequence to be inserted.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    IndexOutOfBoundsException  if {@code dstOffset}is negative or greater than {@code this.length()}, or{@code start} or {@code end} are negative, or{@code start} is greater than {@code end} or{@code end} is greater than {@code s.length()}                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1089">
                <params>
                    <param name="dstOffset" type="int"/>
                    <param name="s" type="CharSequence"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="1098"/>
            </method>
            <javadoc line="1108">
                Inserts the string representation of the {@code boolean}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(boolean)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    b        a {@code boolean}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1127">
                <params>
                    <param name="offset" type="int"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="1131">
                Inserts the string representation of the {@code char}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(char)},
                  and the character in that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    c        a {@code char}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    IndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1150">
                <params>
                    <param name="offset" type="int"/>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="1158">
                Inserts the string representation of the second {@code int}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(int)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    i        an {@code int}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1177">
                <params>
                    <param name="offset" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="1181">
                Inserts the string representation of the {@code long}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(long)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    l        a {@code long}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1200">
                <params>
                    <param name="offset" type="int"/>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="1204">
                Inserts the string representation of the {@code float}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(float)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    f        a {@code float}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1223">
                <params>
                    <param name="offset" type="int"/>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="1227">
                Inserts the string representation of the {@code double}argument into this sequence.
                  &lt;p&gt;
                  The overall effect is exactly as if the second argument were
                  converted to a string by the method {@link String#valueOf(double)},
                  and the characters of that string were then{@link #insert(int,String) inserted} into this character
                  sequence at the indicated offset.
                  &lt;p&gt;
                  The {@code offset} argument must be greater than or equal to{@code 0}, and less than or equal to the {@linkplain #length() length}of this sequence.                
                <param>
                    offset   the offset.                    
                </param>
                <param>
                    d        a {@code double}.                    
                </param>
                <return>
                    a reference to this object.                    
                </return>
                <throws>
                    StringIndexOutOfBoundsException  if the offset is invalid.                    
                </throws>
            </javadoc>
            <method name="insert" type="AbstractStringBuilder" line="1246">
                <params>
                    <param name="offset" type="int"/>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="1250">
                Returns the index within this string of the first occurrence of the
                  specified substring. The integer returned is the smallest value
                  &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.toString().startsWith(str, &lt;i&gt;k&lt;/i&gt;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    str   any string.                    
                </param>
                <return>
                    if the string argument occurs as a substring within this
                      object, then the index of the first character of the first
                      such substring is returned; if it does not occur as a
                      substring, &lt;code&gt;-1&lt;/code&gt; is returned.                    
                </return>
                <throws>
                    java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="indexOf" type="int" line="1267">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1271">
                Returns the index within this string of the first occurrence of the
                  specified substring, starting at the specified index.  The integer
                  returned is the smallest value &lt;tt&gt;k&lt;/tt&gt; for which:
                  &lt;blockquote&gt;&lt;pre&gt;
                  k &gt;= Math.min(fromIndex, str.length()) &amp;&amp;
                  this.toString().startsWith(str, k)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.                
                <param>
                    str         the substring for which to search.                    
                </param>
                <param>
                    fromIndex   the index from which to start the search.                    
                </param>
                <return>
                    the index within this string of the first occurrence of the
                      specified substring, starting at the specified index.                    
                </return>
                <throws>
                    java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="indexOf" type="int" line="1288">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1293">
                Returns the index within this string of the rightmost occurrence
                  of the specified substring.  The rightmost empty string &quot;&quot; is
                  considered to occur at the index value &lt;code&gt;this.length()&lt;/code&gt;.
                  The returned index is the largest value &lt;i&gt;k&lt;/i&gt; such that
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.toString().startsWith(str, k)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true.                
                <param>
                    str   the substring to search for.                    
                </param>
                <return>
                    if the string argument occurs one or more times as a substring
                      within this object, then the index of the first character of
                      the last such substring is returned. If it does not occur as
                      a substring, &lt;code&gt;-1&lt;/code&gt; is returned.                    
                </return>
                <throws>
                    java.lang.NullPointerException  if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1311">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1315">
                Returns the index within this string of the last occurrence of the
                  specified substring. The integer returned is the largest value &lt;i&gt;k&lt;/i&gt;
                  such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  k &lt;= Math.min(fromIndex, str.length()) &amp;&amp;
                  this.toString().startsWith(str, k)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.                
                <param>
                    str         the substring to search for.                    
                </param>
                <param>
                    fromIndex   the index to start the search from.                    
                </param>
                <return>
                    the index within this sequence of the last occurrence of the
                      specified substring.                    
                </return>
                <throws>
                    java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1332">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1337">
                Causes this character sequence to be replaced by the reverse of
                  the sequence. If there are any surrogate pairs included in the
                  sequence, these are treated as single characters for the
                  reverse operation. Thus, the order of the high-low surrogates
                  is never reversed.
                  Let &lt;i&gt;n&lt;/i&gt; be the character length of this character sequence
                  (not the length in &lt;code&gt;char&lt;/code&gt; values) just prior to
                  execution of the &lt;code&gt;reverse&lt;/code&gt; method. Then the
                  character at index &lt;i&gt;k&lt;/i&gt; in the new character sequence is
                  equal to the character at index &lt;i&gt;n-k-1&lt;/i&gt; in the old
                  character sequence.
                  &lt;p&gt;Note that the reverse operation may result in producing
                  surrogate pairs that were unpaired low-surrogates and
                  high-surrogates before the operation. For example, reversing
                  &quot;&amp;#92;uDC00&amp;#92;uD800&quot; produces &quot;&amp;#92;uD800&amp;#92;uDC00&quot; which is
                  a valid surrogate pair.                
                <return>
                    a reference to this object.                    
                </return>
            </javadoc>
            <method name="reverse" type="AbstractStringBuilder" line="1359">
                <comment line="1374">
                    Reverse back all valid surrogate pairs                    
                </comment>
                <declaration name="hasSurrogate" type="boolean" line="1360"/>
                <declaration name="n" type="int" line="1361"/>
                <scope line="1362">
                    <declaration name="temp" type="char" line="1363"/>
                    <declaration name="temp2" type="char" line="1364"/>
                    <scope line="1365"/>
                </scope>
                <scope line="1372">
                    <scope line="1374">
                        <declaration name="c2" type="char" line="1375"/>
                        <scope line="1376">
                            <declaration name="c1" type="char" line="1377"/>
                            <scope line="1378"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="1388"/>
            <javadoc line="1388">
                Returns a string representing the data in this sequence.
                  A new &lt;code&gt;String&lt;/code&gt; object is allocated and initialized to
                  contain the character sequence currently represented by this
                  object. This &lt;code&gt;String&lt;/code&gt; is then returned. Subsequent
                  changes to this sequence do not affect the contents of the
                  &lt;code&gt;String&lt;/code&gt;.                
                <return>
                    a string representation of this sequence of characters.                    
                </return>
            </javadoc>
            <javadoc line="1400">
                Needed by &lt;tt&gt;String&lt;/tt&gt; for the contentEquals method.                
            </javadoc>
            <method name="getValue" type="char[]" line="1403"/>
        </class>
    </source>