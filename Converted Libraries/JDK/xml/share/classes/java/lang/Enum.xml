<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.Serializable"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectStreamException"/>
        <class name="Enum" line="34">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="34">
                This is the common base class of all Java language enumeration types.
                  More information about enums, including descriptions of the
                  implicitly declared methods synthesized by the compiler, can be
                  found in section 8.9 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  &lt;p&gt; Note that when using an enumeration type as the type of a set
                  or as the type of the keys in a map, specialized and efficient{@linkplain java.util.EnumSet set} and {@linkplain java.util.EnumMap map} implementations are available.                
                <param>
                    <E>
                       The enum type subclass                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Neal Gafter                    
                </author>
                <see>
                    Class#getEnumConstants()                    
                </see>
                <see>
                    java.util.EnumSet                    
                </see>
                <see>
                    java.util.EnumMap                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="name" type="String" line="57"/>
            <javadoc line="57">
                The name of this enum constant, as declared in the enum declaration.
                  Most programmers should use the {@link #toString} method rather than
                  accessing this field.                
            </javadoc>
            <javadoc line="64">
                Returns the name of this enum constant, exactly as declared in its
                  enum declaration.
                  &lt;b&gt;Most programmers should use the {@link #toString} method in
                  preference to this one, as the toString method may return
                  a more user-friendly name.&lt;/b&gt;  This method is designed primarily for
                  use in specialized situations where correctness depends on getting the
                  exact name, which will not vary from release to release.                
                <return>
                    the name of this enum constant                    
                </return>
            </javadoc>
            <method name="name" type="String" line="76"/>
            <declaration name="ordinal" type="int" line="80"/>
            <javadoc line="80">
                The ordinal of this enumeration constant (its position
                  in the enum declaration, where the initial constant is assigned
                  an ordinal of zero).
                  Most programmers will have no use for this field.  It is designed
                  for use by sophisticated enum-based data structures, such as{@link java.util.EnumSet} and {@link java.util.EnumMap}.                
            </javadoc>
            <javadoc line="91">
                Returns the ordinal of this enumeration constant (its position
                  in its enum declaration, where the initial constant is assigned
                  an ordinal of zero).
                  Most programmers will have no use for this method.  It is
                  designed for use by sophisticated enum-based data structures, such
                  as {@link java.util.EnumSet} and {@link java.util.EnumMap}.                
                <return>
                    the ordinal of this enumeration constant                    
                </return>
            </javadoc>
            <method name="ordinal" type="int" line="102"/>
            <javadoc line="106">
                Sole constructor.  Programmers cannot invoke this constructor.
                  It is for use by code emitted by the compiler in response to
                  enum type declarations.                
                <param>
                    name - The name of this enum constant, which is the identifier
                      used to declare it.                    
                </param>
                <param>
                    ordinal - The ordinal of this enumeration constant (its position
                      in the enum declaration, where the initial constant is assigned
                      an ordinal of zero).                    
                </param>
            </javadoc>
            <method name="Enum" type="constructor" line="117">
                <params>
                    <param name="name" type="String"/>
                    <param name="ordinal" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                Returns the name of this enum constant, as contained in the
                  declaration.  This method may be overridden, though it typically
                  isn&apos;t necessary or desirable.  An enum type should override this
                  method when a more &quot;programmer-friendly&quot; string form exists.                
                <return>
                    the name of this enum constant                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="130"/>
            <javadoc line="134">
                Returns true if the specified object is equal to this
                  enum constant.                
                <param>
                    other the object to be compared for equality with this object.                    
                </param>
                <return>
                    true if the specified object is equal to this
                      enum constant.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="142">
                <params>
                    <param name="other" type="Object"/>
                </params>
            </method>
            <javadoc line="146">
                Returns a hash code for this enum constant.                
                <return>
                    a hash code for this enum constant.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="151"/>
            <javadoc line="155">
                Throws CloneNotSupportedException.  This guarantees that enums
                  are never cloned, which is necessary to preserve their &quot;singleton&quot;
                  status.                
                <return>
                    (never returns)                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="162"/>
            <javadoc line="166">
                Compares this enum with the specified object for order.  Returns a
                  negative integer, zero, or a positive integer as this object is less
                  than, equal to, or greater than the specified object.
                  Enum constants are only comparable to other enum constants of the
                  same enum type.  The natural order implemented by this
                  method is the order in which the constants are declared.                
            </javadoc>
            <method name="compareTo" type="int" line="175">
                <params>
                    <param name="o" type="E"/>
                </params>
                <comment line="178">
                    optimization                    
                </comment>
                <declaration name="other" type="Enum" line="176"/>
                <declaration name="self" type="Enum" line="177"/>
            </method>
            <javadoc line="184">
                Returns the Class object corresponding to this enum constant&apos;s
                  enum type.  Two enum constants e1 and  e2 are of the
                  same enum type if and only if
                  e1.getDeclaringClass() == e2.getDeclaringClass().
                  (The value returned by this method may differ from the one returned
                  by the {@link Object#getClass} method for enum constants with
                  constant-specific class bodies.)                
                <return>
                    the Class object corresponding to this enum constant's
                      enum type                    
                </return>
            </javadoc>
            <method name="getDeclaringClass" type="Class<E>" line="196">
                <declaration name="clazz" type="Class" line="197"/>
                <declaration name="zuper" type="Class" line="198"/>
            </method>
            <javadoc line="202">
                Returns the enum constant of the specified enum type with the
                  specified name.  The name must match exactly an identifier used
                  to declare an enum constant in this type.  (Extraneous whitespace
                  characters are not permitted.)
                  &lt;p&gt;Note that for a particular enum type {@code T}, the
                  implicitly declared {@code public static T valueOf(String)}method on that enum may be used instead of this method to map
                  from a name to the corresponding enum constant.  All the
                  constants of an enum type can be obtained by calling the
                  implicit {@code public static T[] values()} method of that
                  type.                
                <param>
                    <T>
                       The enum type whose constant is to be returned                    
                </param>
                <param>
                    enumType the {@code Class} object of the enum type from which
                      to return a constant                    
                </param>
                <param>
                    name the name of the constant to return                    
                </param>
                <return>
                    the enum constant of the specified enum type with the
                      specified name                    
                </return>
                <throws>
                    IllegalArgumentException if the specified enum type has
                      no constant with the specified name, or the specified
                      class object does not represent an enum type                    
                </throws>
                <throws>
                    NullPointerException if {@code enumType} or {@code name}is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="valueOf" type="T" line="230">
                <params>
                    <param name="enumType" type="Class<T>"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="result" type="T" line="231"/>
            </method>
            <javadoc line="240">
                enum classes cannot have finalize methods.                
            </javadoc>
            <method name="finalize" type="void" line="243"/>
            <javadoc line="245">
                prevent default deserialization                
            </javadoc>
            <method name="readObject" type="void" line="249">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <method name="readObjectNoData" type="void" line="253"/>
        </class>
    </source>