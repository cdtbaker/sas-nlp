<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <interface name="TypeVariable">
            <type_params>
                <type_param name="D"/>
            </type_params>
            <implements interface="Type"/>
            <javadoc line="28">
                TypeVariable is the common superinterface for type variables of kinds.
                  A type variable is created the first time it is needed by a reflective
                  method, as specified in this package.  If a type variable t is referenced
                  by a type (i.e, class, interface or annotation type) T, and T is declared
                  by the nth enclosing class of T (see JLS 8.1.2), then the creation of t
                  requires the resolution (see JVMS 5) of the ith enclosing class of T,
                  for i = 0 to n, inclusive. Creating a type variable must not cause the
                  creation of its bounds. Repeated creation of a type variable has no effect.
                  &lt;p&gt;Multiple objects may be instantiated at run-time to
                  represent a given type variable. Even though a type variable is
                  created only once, this does not imply any requirement to cache
                  instances representing the type variable. However, all instances
                  representing a type variable must be equal() to each other.
                  As a consequence, users of type variables must not rely on the identity
                  of instances of classes implementing this interface.                
                <param>
                    &lt;D&gt;
                       the type of generic declaration that declared the
                      underlying type variable.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getBounds" type="Type[]" line="52"/>
            <javadoc line="52">
                Returns an array of {@code Type} objects representing the
                  upper bound(s) of this type variable.  Note that if no upper bound is
                  explicitly declared, the upper bound is {@code Object}.
                  &lt;p&gt;For each upper bound B: &lt;ul&gt; &lt;li&gt;if B is a parameterized
                  type or a type variable, it is created, (see {@link java.lang.reflect.ParameterizedType ParameterizedType} for the
                  details of the creation process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.  &lt;/ul&gt;                
                <throws>
                    TypeNotPresentException  if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
                <return>
                    an array of {@code Type}s representing the upper
                      bound(s) of this type variable                    
                </return>
            </javadoc>
            <method name="getGenericDeclaration" type="D" line="73"/>
            <javadoc line="73">
                Returns the {@code GenericDeclaration} object representing the
                  generic declaration declared this type variable.                
                <return>
                    the generic declaration declared for this type variable.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="83"/>
            <javadoc line="83">
                Returns the name of this type variable, as it occurs in the source code.                
                <return>
                    the name of this type variable, as it appears in the source code                    
                </return>
            </javadoc>
        </interface>
    </source>