<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <interface name="InvocationHandler">
            <javadoc line="28">
                {@code InvocationHandler} is the interface implemented by
                  the &lt;i&gt;invocation handler&lt;/i&gt; of a proxy instance.
                  &lt;p&gt;Each proxy instance has an associated invocation handler.
                  When a method is invoked on a proxy instance, the method
                  invocation is encoded and dispatched to the {@code invoke}method of its invocation handler.                
                <author>
                    Peter Jones                    
                </author>
                <see>
                    Proxy                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="invoke" type="Object" line="43"/>
            <javadoc line="43">
                Processes a method invocation on a proxy instance and returns
                  the result.  This method will be invoked on an invocation handler
                  when a method is invoked on a proxy instance that it is
                  associated with.                
                <param>
                    proxy the proxy instance that the method was invoked on                    
                </param>
                <param>
                    method the {@code Method} instance corresponding to
                      the interface method invoked on the proxy instance.  The declaring
                      class of the {@code Method} object will be the interface that
                      the method was declared in, which may be a superinterface of the
                      proxy interface that the proxy class inherits the method through.                    
                </param>
                <param>
                    args an array of objects containing the values of the
                      arguments passed in the method invocation on the proxy instance,
                      or {@code null} if interface method takes no arguments.
                      Arguments of primitive types are wrapped in instances of the
                      appropriate primitive wrapper class, such as{@code java.lang.Integer} or {@code java.lang.Boolean}.                    
                </param>
                <return>
                    the value to return from the method invocation on the
                      proxy instance.  If the declared return type of the interface
                      method is a primitive type, then the value returned by
                      this method must be an instance of the corresponding primitive
                      wrapper class; otherwise, it must be a type assignable to the
                      declared return type.  If the value returned by this method is{@code null} and the interface method&apos;s return type is
                      primitive, then a {@code NullPointerException} will be
                      thrown by the method invocation on the proxy instance.  If the
                      value returned by this method is otherwise not compatible with
                      the interface method&apos;s declared return type as described above,
                      a {@code ClassCastException} will be thrown by the method
                      invocation on the proxy instance.                    
                </return>
                <throws>
                    Throwable the exception to throw from the method
                      invocation on the proxy instance.  The exception&apos;s type must be
                      assignable either to any of the exception types declared in the{@code throws} clause of the interface method or to the
                      unchecked exception types {@code java.lang.RuntimeException}or {@code java.lang.Error}.  If a checked exception is
                      thrown by this method that is not assignable to any of the
                      exception types declared in the {@code throws} clause of
                      the interface method, then an{@link UndeclaredThrowableException} containing the
                      exception that was thrown by this method will be thrown by the
                      method invocation on the proxy instance.                    
                </throws>
                <see>
                    UndeclaredThrowableException                    
                </see>
            </javadoc>
        </interface>
    </source>