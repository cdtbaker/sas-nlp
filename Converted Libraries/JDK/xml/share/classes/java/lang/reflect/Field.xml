<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="sun.reflect.FieldAccessor"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.reflect.generics.repository.FieldRepository"/>
        <import package="sun.reflect.generics.factory.CoreReflectionFactory"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.scope.ClassScope"/>
        <import package="java.lang.annotation.Annotation"/>
        <import package="java.util.Map"/>
        <import package="sun.reflect.annotation.AnnotationParser"/>
        <class name="Field" line="11">
            <extends class="AccessibleObject"/>
            <implements interface="Member"/>
            <javadoc line="11">
                A {@code Field} provides information about, and dynamic access to, a
                  single field of a class or an interface.  The reflected field may
                  be a class (static) field or an instance field.
                  &lt;p&gt;A {@code Field} permits widening conversions to occur during a get or
                  set access operation, but throws an {@code IllegalArgumentException} if a
                  narrowing conversion would occur.                
                <see>
                    Member                    
                </see>
                <see>
                    java.lang.Class                    
                </see>
                <see>
                    java.lang.Class#getFields()                    
                </see>
                <see>
                    java.lang.Class#getField(String)                    
                </see>
                <see>
                    java.lang.Class#getDeclaredFields()                    
                </see>
                <see>
                    java.lang.Class#getDeclaredField(String)                    
                </see>
                <author>
                    Kenneth Russell                    
                </author>
                <author>
                    Nakul Saraiya                    
                </author>
            </javadoc>
            <declaration name="clazz" type="Class&amp;lt;?&amp;gt;" line="28"/>
            <declaration name="slot" type="int" line="29"/>
            <declaration name="name" type="String" line="30"/>
            <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="31"/>
            <declaration name="modifiers" type="int" line="32"/>
            <declaration name="signature" type="String" line="33"/>
            <declaration name="genericInfo" type="FieldRepository" line="34"/>
            <declaration name="annotations" type="byte[]" line="35"/>
            <declaration name="fieldAccessor" type="FieldAccessor" line="36"/>
            <declaration name="overrideFieldAccessor" type="FieldAccessor" line="37"/>
            <declaration name="root" type="Field" line="38"/>
            <method name="getGenericSignature" type="String" line="39"/>
            <method name="getFactory" type="GenericsFactory" line="42">
                <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="43"/>
            </method>
            <method name="getGenericInfo" type="FieldRepository" line="46">
                <scope line="47"/>
            </method>
            <javadoc line="52">
                Package-private constructor used by ReflectAccess to enable
                  instantiation of these objects in Java code from the java.lang
                  package via sun.reflect.LangReflectAccess.                
            </javadoc>
            <method name="Field" type="constructor" line="57">
                <params>
                    <param name="declaringClass" type="Class&lt;?&gt;"/>
                    <param name="name" type="String"/>
                    <param name="type" type="Class&lt;?&gt;"/>
                    <param name="modifiers" type="int"/>
                    <param name="slot" type="int"/>
                    <param name="signature" type="String"/>
                    <param name="annotations" type="byte[]"/>
                </params>
            </method>
            <javadoc line="66">
                Package-private routine (exposed to java.lang.Class via
                  ReflectAccess) which returns a copy of this Field. The copy&apos;s
                  &quot;root&quot; field points to this Field.                
            </javadoc>
            <method name="copy" type="Field" line="71">
                <declaration name="res" type="Field" line="72"/>
            </method>
            <javadoc line="78">
                Returns the {@code Class} object representing the class or interface
                  that declares the field represented by this {@code Field} object.                
            </javadoc>
            <method name="getDeclaringClass" type="Class&lt;?&gt;" line="82"/>
            <javadoc line="85">
                Returns the name of the field represented by this {@code Field} object.                
            </javadoc>
            <method name="getName" type="String" line="88"/>
            <javadoc line="91">
                Returns the Java language modifiers for the field represented
                  by this {@code Field} object, as an integer. The {@code Modifier} class should
                  be used to decode the modifiers.                
                <see>
                    Modifier                    
                </see>
            </javadoc>
            <method name="getModifiers" type="int" line="97"/>
            <javadoc line="100">
                Returns {@code true} if this field represents an element of
                  an enumerated type; returns {@code false} otherwise.                
                <return>
                    {@code true} if and only if this field represents an element of
                      an enumerated type.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isEnumConstant" type="boolean" line="107"/>
            <javadoc line="110">
                Returns {@code true} if this field is a synthetic
                  field; returns {@code false} otherwise.                
                <return>
                    true if and only if this field is a synthetic
                      field as defined by the Java Language Specification.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSynthetic" type="boolean" line="117"/>
            <javadoc line="120">
                Returns a {@code Class} object that identifies the
                  declared type for the field represented by this{@code Field} object.                
                <return>
                    a {@code Class} object identifying the declared
                      type of the field represented by this object                    
                </return>
            </javadoc>
            <method name="getType" type="Class&lt;?&gt;" line="126"/>
            <javadoc line="129">
                Returns a {@code Type} object that represents the declared type for
                  the field represented by this {@code Field} object.
                  &lt;p&gt;If the {@code Type} is a parameterized type, the{@code Type} object returned must accurately reflect the
                  actual type parameters used in the source code.
                  &lt;p&gt;If the type of the underlying field is a type variable or a
                  parameterized type, it is created. Otherwise, it is resolved.                
                <return>
                    a {@code Type} object that represents the declared type for
                      the field represented by this {@code Field} object                    
                </return>
                <throws>
                    GenericSignatureFormatError if the generic field
                      signature does not conform to the format specified in
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;                    
                </throws>
                <throws>
                    TypeNotPresentException if the generic type
                      signature of the underlying field refers to a non-existent
                      type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if the generic
                      signature of the underlying field refers to a parameterized type
                      that cannot be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericType" type="Type" line="149"/>
            <javadoc line="153">
                Compares this {@code Field} against the specified object.  Returns
                  true if the objects are the same.  Two {@code Field} objects are the same if
                  they were declared by the same class and have the same name
                  and type.                
            </javadoc>
            <method name="equals" type="boolean" line="159">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="160">
                    <declaration name="other" type="Field" line="161"/>
                </scope>
            </method>
            <javadoc line="166">
                Returns a hashcode for this {@code Field}.  This is computed as the
                  exclusive-or of the hashcodes for the underlying field&apos;s
                  declaring class name and its name.                
            </javadoc>
            <method name="hashCode" type="int" line="171"/>
            <javadoc line="174">
                Returns a string describing this {@code Field}.  The format is
                  the access modifiers for the field, if any, followed
                  by the field type, followed by a space, followed by
                  the fully-qualified name of the class declaring the field,
                  followed by a period, followed by the name of the field.
                  For example:
                  &lt;pre&gt;
                  public static final int java.lang.Thread.MIN_PRIORITY
                  private int java.io.FileDescriptor.fd
                  &lt;/pre&gt;
                  &lt;p&gt;The modifiers are placed in canonical order as specified by
                  &quot;The Java Language Specification&quot;.  This is {@code public},{@code protected} or {@code private} first, and then other
                  modifiers in the following order: {@code static}, {@code final},{@code transient}, {@code volatile}.                
            </javadoc>
            <method name="toString" type="String" line="189">
                <declaration name="mod" type="int" line="190"/>
            </method>
            <javadoc line="193">
                Returns a string describing this {@code Field}, including
                  its generic type.  The format is the access modifiers for the
                  field, if any, followed by the generic field type, followed by
                  a space, followed by the fully-qualified name of the class
                  declaring the field, followed by a period, followed by the name
                  of the field.
                  &lt;p&gt;The modifiers are placed in canonical order as specified by
                  &quot;The Java Language Specification&quot;.  This is {@code public},{@code protected} or {@code private} first, and then other
                  modifiers in the following order: {@code static}, {@code final},{@code transient}, {@code volatile}.                
                <return>
                    a string describing this {@code Field}, including
                      its generic type                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toGenericString" type="String" line="207">
                <declaration name="mod" type="int" line="208"/>
                <declaration name="fieldType" type="Type" line="209"/>
            </method>
            <javadoc line="212">
                Returns the value of the field represented by this {@code Field}, on
                  the specified object. The value is automatically wrapped in an
                  object if it has a primitive type.
                  &lt;p&gt;The underlying field&apos;s value is obtained as follows:
                  &lt;p&gt;If the underlying field is a static field, the {@code obj} argument
                  is ignored; it may be null.
                  &lt;p&gt;Otherwise, the underlying field is an instance field.  If the
                  specified {@code obj} argument is null, the method throws a{@code NullPointerException}. If the specified object is not an
                  instance of the class or interface declaring the underlying
                  field, the method throws an {@code IllegalArgumentException}.
                  &lt;p&gt;If this {@code Field} object is enforcing Java language access control, and
                  the underlying field is inaccessible, the method throws an{@code IllegalAccessException}.
                  If the underlying field is static, the class that declared the
                  field is initialized if it has not already been initialized.
                  &lt;p&gt;Otherwise, the value is retrieved from the underlying instance
                  or static field.  If the field has a primitive type, the value
                  is wrapped in an object before being returned, otherwise it is
                  returned as is.
                  &lt;p&gt;If the field is hidden in the type of {@code obj},
                  the field&apos;s value is obtained according to the preceding rules.                
                <param>
                    obj object from which the represented field&apos;s value is
                      to be extracted                    
                </param>
                <return>
                    the value of the represented field in object{@code obj}; primitive values are wrapped in an appropriate
                      object before being returned                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof).                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="248">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="251">
                Gets the value of a static or instance {@code boolean} field.                
                <param>
                    obj the object to extract the {@code boolean} value
                      from                    
                </param>
                <return>
                    the value of the {@code boolean} field                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code boolean} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getBoolean" type="boolean" line="271">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="274">
                Gets the value of a static or instance {@code byte} field.                
                <param>
                    obj the object to extract the {@code byte} value
                      from                    
                </param>
                <return>
                    the value of the {@code byte} field                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code byte} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getByte" type="byte" line="294">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="297">
                Gets the value of a static or instance field of type{@code char} or of another primitive type convertible to
                  type {@code char} via a widening conversion.                
                <param>
                    obj the object to extract the {@code char} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code char}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code char} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getChar" type="char" line="318">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="321">
                Gets the value of a static or instance field of type{@code short} or of another primitive type convertible to
                  type {@code short} via a widening conversion.                
                <param>
                    obj the object to extract the {@code short} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code short}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code short} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getShort" type="short" line="342">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="345">
                Gets the value of a static or instance field of type{@code int} or of another primitive type convertible to
                  type {@code int} via a widening conversion.                
                <param>
                    obj the object to extract the {@code int} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code int}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code int} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getInt" type="int" line="366">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="369">
                Gets the value of a static or instance field of type{@code long} or of another primitive type convertible to
                  type {@code long} via a widening conversion.                
                <param>
                    obj the object to extract the {@code long} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code long}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code long} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getLong" type="long" line="390">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="393">
                Gets the value of a static or instance field of type{@code float} or of another primitive type convertible to
                  type {@code float} via a widening conversion.                
                <param>
                    obj the object to extract the {@code float} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code float}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code float} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getFloat" type="float" line="414">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="417">
                Gets the value of a static or instance field of type{@code double} or of another primitive type convertible to
                  type {@code double} via a widening conversion.                
                <param>
                    obj the object to extract the {@code double} value
                      from                    
                </param>
                <return>
                    the value of the field converted to type {@code double}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not
                      an instance of the class or interface declaring the
                      underlying field (or a subclass or implementor
                      thereof), or if the field value cannot be
                      converted to the type {@code double} by a
                      widening conversion.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#get                    
                </see>
            </javadoc>
            <method name="getDouble" type="double" line="438">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="441">
                Sets the field represented by this {@code Field} object on the
                  specified object argument to the specified new value. The new
                  value is automatically unwrapped if the underlying field has a
                  primitive type.
                  &lt;p&gt;The operation proceeds as follows:
                  &lt;p&gt;If the underlying field is static, the {@code obj} argument is
                  ignored; it may be null.
                  &lt;p&gt;Otherwise the underlying field is an instance field.  If the
                  specified object argument is null, the method throws a{@code NullPointerException}.  If the specified object argument is not
                  an instance of the class or interface declaring the underlying
                  field, the method throws an {@code IllegalArgumentException}.
                  &lt;p&gt;If this {@code Field} object is enforcing Java language access control, and
                  the underlying field is inaccessible, the method throws an{@code IllegalAccessException}.
                  &lt;p&gt;If the underlying field is final, the method throws an{@code IllegalAccessException} unless {@code setAccessible(true)}has succeeded for this {@code Field} object
                  and the field is non-static. Setting a final field in this way
                  is meaningful only during deserialization or reconstruction of
                  instances of classes with blank final fields, before they are
                  made available for access by other parts of a program. Use in
                  any other context may have unpredictable effects, including cases
                  in which other parts of a program continue to use the original
                  value of this field.
                  &lt;p&gt;If the underlying field is of a primitive type, an unwrapping
                  conversion is attempted to convert the new value to a value of
                  a primitive type.  If this attempt fails, the method throws an{@code IllegalArgumentException}.
                  &lt;p&gt;If, after possible unwrapping, the new value cannot be
                  converted to the type of the underlying field by an identity or
                  widening conversion, the method throws an{@code IllegalArgumentException}.
                  &lt;p&gt;If the underlying field is static, the class that declared the
                  field is initialized if it has not already been initialized.
                  &lt;p&gt;The field is set to the possibly unwrapped and widened new value.
                  &lt;p&gt;If the field is hidden in the type of {@code obj},
                  the field&apos;s value is set according to the preceding rules.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    value the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="488">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="491">
                Sets the value of a field as a {@code boolean} on the specified object.
                  This method is equivalent to{@code set(obj, zObj)},
                  where {@code zObj} is a {@code Boolean} object and{@code zObj.booleanValue() == z}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    z   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setBoolean" type="void" line="510">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="z" type="boolean"/>
                </params>
            </method>
            <javadoc line="513">
                Sets the value of a field as a {@code byte} on the specified object.
                  This method is equivalent to{@code set(obj, bObj)},
                  where {@code bObj} is a {@code Byte} object and{@code bObj.byteValue() == b}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    b   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setByte" type="void" line="532">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="535">
                Sets the value of a field as a {@code char} on the specified object.
                  This method is equivalent to{@code set(obj, cObj)},
                  where {@code cObj} is a {@code Character} object and{@code cObj.charValue() == c}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    c   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setChar" type="void" line="554">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="557">
                Sets the value of a field as a {@code short} on the specified object.
                  This method is equivalent to{@code set(obj, sObj)},
                  where {@code sObj} is a {@code Short} object and{@code sObj.shortValue() == s}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    s   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setShort" type="void" line="576">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="s" type="short"/>
                </params>
            </method>
            <javadoc line="579">
                Sets the value of a field as an {@code int} on the specified object.
                  This method is equivalent to{@code set(obj, iObj)},
                  where {@code iObj} is a {@code Integer} object and{@code iObj.intValue() == i}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    i   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setInt" type="void" line="598">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="601">
                Sets the value of a field as a {@code long} on the specified object.
                  This method is equivalent to{@code set(obj, lObj)},
                  where {@code lObj} is a {@code Long} object and{@code lObj.longValue() == l}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    l   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setLong" type="void" line="620">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="623">
                Sets the value of a field as a {@code float} on the specified object.
                  This method is equivalent to{@code set(obj, fObj)},
                  where {@code fObj} is a {@code Float} object and{@code fObj.floatValue() == f}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    f   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setFloat" type="void" line="642">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="645">
                Sets the value of a field as a {@code double} on the specified object.
                  This method is equivalent to{@code set(obj, dObj)},
                  where {@code dObj} is a {@code Double} object and{@code dObj.doubleValue() == d}.                
                <param>
                    obj the object whose field should be modified                    
                </param>
                <param>
                    d   the new value for the field of {@code obj}being modified                    
                </param>
                <exception>
                    IllegalAccessException    if this {@code Field} object
                      is enforcing Java language access control and the underlying
                      field is either inaccessible or final.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the specified object is not an
                      instance of the class or interface declaring the underlying
                      field (or a subclass or implementor thereof),
                      or if an unwrapping conversion fails.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the field is an instance field.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization provoked
                      by this method fails.                    
                </exception>
                <see>
                    Field#set                    
                </see>
            </javadoc>
            <method name="setDouble" type="void" line="664">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="d" type="double"/>
                </params>
            </method>
            <method name="getFieldAccessor" type="FieldAccessor" line="667">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="ov" type="boolean" line="669"/>
                <declaration name="a" type="FieldAccessor" line="670"/>
            </method>
            <method name="acquireFieldAccessor" type="FieldAccessor" line="673">
                <params>
                    <param name="overrideFinalCheck" type="boolean"/>
                </params>
                <declaration name="tmp" type="FieldAccessor" line="674"/>
                <scope line="676"/>
                <scope line="680"/>
            </method>
            <method name="getFieldAccessor" type="FieldAccessor" line="686">
                <params>
                    <param name="overrideFinalCheck" type="boolean"/>
                </params>
            </method>
            <method name="setFieldAccessor" type="void" line="689">
                <params>
                    <param name="accessor" type="FieldAccessor"/>
                    <param name="overrideFinalCheck" type="boolean"/>
                </params>
                <scope line="692"/>
            </method>
            <method name="doSecurityCheck" type="void" line="696">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="697">
                    <scope line="698">
                        <declaration name="caller" type="Class&amp;lt;?&amp;gt;" line="699"/>
                    </scope>
                </scope>
            </method>
            <method name="getTypeName" type="String" line="704">
                <params>
                    <param name="type" type="Class&lt;?&gt;"/>
                </params>
                <scope line="705">
                    <scope line="706">
                        <declaration name="cl" type="Class&amp;lt;?&amp;gt;" line="707"/>
                        <declaration name="dimensions" type="int" line="708"/>
                        <scope line="709"/>
                        <declaration name="sb" type="StringBuffer" line="713"/>
                        <scope line="715"/>
                    </scope>
                    <scope line="720"/>
                </scope>
            </method>
            <javadoc line="725">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="T" line="729">
                <params>
                    <param name="annotationClass" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="733">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="736"/>
            <declaration name="declaredAnnotations" type="Map&amp;lt;Class&amp;lt;? extends Annotation&amp;gt;,Annotation&amp;gt;" line="739"/>
            <method name="declaredAnnotations" type="Map&lt;Class&lt;? extends Annotation&gt;,Annotation&gt;" line="740">
                <scope line="741"/>
            </method>
        </class>
    </source>