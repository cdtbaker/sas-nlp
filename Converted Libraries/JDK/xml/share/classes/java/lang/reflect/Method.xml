<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="sun.reflect.MethodAccessor"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.reflect.generics.repository.MethodRepository"/>
        <import package="sun.reflect.generics.factory.CoreReflectionFactory"/>
        <import package="sun.reflect.generics.factory.GenericsFactory"/>
        <import package="sun.reflect.generics.scope.MethodScope"/>
        <import package="sun.reflect.annotation.AnnotationType"/>
        <import package="sun.reflect.annotation.AnnotationParser"/>
        <import package="java.lang.annotation.Annotation"/>
        <import package="java.lang.annotation.AnnotationFormatError"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.util.Map"/>
        <class name="Method" line="14">
            <extends class="AccessibleObject"/>
            <implements interface="GenericDeclaration"/>
            <implements interface="Member"/>
            <javadoc line="14">
                A {@code Method} provides information about, and access to, a single method
                  on a class or interface.  The reflected method may be a class method
                  or an instance method (including an abstract method).
                  &lt;p&gt;A {@code Method} permits widening conversions to occur when matching the
                  actual parameters to invoke with the underlying method&apos;s formal
                  parameters, but it throws an {@code IllegalArgumentException} if a
                  narrowing conversion would occur.                
                <see>
                    Member                    
                </see>
                <see>
                    java.lang.Class                    
                </see>
                <see>
                    java.lang.Class#getMethods()                    
                </see>
                <see>
                    java.lang.Class#getMethod(String,Class[])                    
                </see>
                <see>
                    java.lang.Class#getDeclaredMethods()                    
                </see>
                <see>
                    java.lang.Class#getDeclaredMethod(String,Class[])                    
                </see>
                <author>
                    Kenneth Russell                    
                </author>
                <author>
                    Nakul Saraiya                    
                </author>
            </javadoc>
            <declaration name="clazz" type="Class&lt;?&gt;" line="32"/>
            <declaration name="slot" type="int" line="33"/>
            <declaration name="name" type="String" line="34"/>
            <declaration name="returnType" type="Class&lt;?&gt;" line="35"/>
            <declaration name="parameterTypes" type="Class&lt;?&gt;[]" line="36"/>
            <declaration name="exceptionTypes" type="Class&lt;?&gt;[]" line="37"/>
            <declaration name="modifiers" type="int" line="38"/>
            <declaration name="signature" type="String" line="39"/>
            <declaration name="genericInfo" type="MethodRepository" line="40"/>
            <declaration name="annotations" type="byte[]" line="41"/>
            <declaration name="parameterAnnotations" type="byte[]" line="42"/>
            <declaration name="annotationDefault" type="byte[]" line="43"/>
            <declaration name="methodAccessor" type="MethodAccessor" line="44"/>
            <declaration name="root" type="Method" line="45"/>
            <method name="getGenericSignature" type="String" line="46"/>
            <method name="getFactory" type="GenericsFactory" line="49"/>
            <method name="getGenericInfo" type="MethodRepository" line="52">
                <scope line="53"/>
            </method>
            <javadoc line="58">
                Package-private constructor used by ReflectAccess to enable
                  instantiation of these objects in Java code from the java.lang
                  package via sun.reflect.LangReflectAccess.                
            </javadoc>
            <method name="Method" type="constructor" line="63">
                <params>
                    <param name="declaringClass" type="Class<?>"/>
                    <param name="name" type="String"/>
                    <param name="parameterTypes" type="Class<?>[]"/>
                    <param name="returnType" type="Class<?>"/>
                    <param name="checkedExceptions" type="Class<?>[]"/>
                    <param name="modifiers" type="int"/>
                    <param name="slot" type="int"/>
                    <param name="signature" type="String"/>
                    <param name="annotations" type="byte[]"/>
                    <param name="parameterAnnotations" type="byte[]"/>
                    <param name="annotationDefault" type="byte[]"/>
                </params>
            </method>
            <javadoc line="76">
                Package-private routine (exposed to java.lang.Class via
                  ReflectAccess) which returns a copy of this Method. The copy&apos;s
                  &quot;root&quot; field points to this Method.                
            </javadoc>
            <method name="copy" type="Method" line="81">
                <declaration name="res" type="Method" line="82"/>
            </method>
            <javadoc line="87">
                Returns the {@code Class} object representing the class or interface
                  that declares the method represented by this {@code Method} object.                
            </javadoc>
            <method name="getDeclaringClass" type="Class<?>" line="91"/>
            <javadoc line="94">
                Returns the name of the method represented by this {@code Method}object, as a {@code String}.                
            </javadoc>
            <method name="getName" type="String" line="97"/>
            <javadoc line="100">
                Returns the Java language modifiers for the method represented
                  by this {@code Method} object, as an integer. The {@code Modifier} class should
                  be used to decode the modifiers.                
                <see>
                    Modifier                    
                </see>
            </javadoc>
            <method name="getModifiers" type="int" line="106"/>
            <javadoc line="109">
                Returns an array of {@code TypeVariable} objects that represent the
                  type variables declared by the generic declaration represented by this{@code GenericDeclaration} object, in declaration order.  Returns an
                  array of length 0 if the underlying generic declaration declares no type
                  variables.                
                <return>
                    an array of {@code TypeVariable} objects that represent
                      the type variables declared by this generic declaration                    
                </return>
                <throws>
                    GenericSignatureFormatError if the generic
                      signature of this generic declaration does not conform to
                      the format specified in
                      <cite>The Java&trade; Virtual Machine Specification</cite>                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTypeParameters" type="TypeVariable<Method>[]" line="122"/>
            <javadoc line="126">
                Returns a {@code Class} object that represents the formal return type
                  of the method represented by this {@code Method} object.                
                <return>
                    the return type for the method this object represents                    
                </return>
            </javadoc>
            <method name="getReturnType" type="Class<?>" line="131"/>
            <javadoc line="134">
                Returns a {@code Type} object that represents the formal return
                  type of the method represented by this {@code Method} object.
                  &lt;p&gt;If the return type is a parameterized type,
                  the {@code Type} object returned must accurately reflect
                  the actual type parameters used in the source code.
                  &lt;p&gt;If the return type is a type variable or a parameterized type, it
                  is created. Otherwise, it is resolved.                
                <return>
                    a {@code Type} object that represents the formal return
                      type of the underlying  method                    
                </return>
                <throws>
                    GenericSignatureFormatErrorif the generic method signature does not conform to the format
                      specified in
                      <cite>The Java&trade; Virtual Machine Specification</cite>                    
                </throws>
                <throws>
                    TypeNotPresentException if the underlying method's
                      return type refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if the
                      underlying method's return typed refers to a parameterized
                      type that cannot be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericReturnType" type="Type" line="154">
                <scope line="155"/>
                <scope line="158"/>
            </method>
            <javadoc line="162">
                Returns an array of {@code Class} objects that represent the formal
                  parameter types, in declaration order, of the method
                  represented by this {@code Method} object.  Returns an array of length
                  0 if the underlying method takes no parameters.                
                <return>
                    the parameter types for the method this object
                      represents                    
                </return>
            </javadoc>
            <method name="getParameterTypes" type="Class<?>[]" line="170"/>
            <javadoc line="173">
                Returns an array of {@code Type} objects that represent the formal
                  parameter types, in declaration order, of the method represented by
                  this {@code Method} object. Returns an array of length 0 if the
                  underlying method takes no parameters.
                  &lt;p&gt;If a formal parameter type is a parameterized type,
                  the {@code Type} object returned for it must accurately reflect
                  the actual type parameters used in the source code.
                  &lt;p&gt;If a formal parameter type is a type variable or a parameterized
                  type, it is created. Otherwise, it is resolved.                
                <return>
                    an array of Types that represent the formal
                      parameter types of the underlying method, in declaration order                    
                </return>
                <throws>
                    GenericSignatureFormatErrorif the generic method signature does not conform to the format
                      specified in
                      <cite>The Java&trade; Virtual Machine Specification</cite>                    
                </throws>
                <throws>
                    TypeNotPresentException if any of the parameter
                      types of the underlying method refers to a non-existent type
                      declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if any of
                      the underlying method's parameter types refer to a parameterized
                      type that cannot be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericParameterTypes" type="Type[]" line="196"/>
            <javadoc line="200">
                Returns an array of {@code Class} objects that represent
                  the types of the exceptions declared to be thrown
                  by the underlying method
                  represented by this {@code Method} object.  Returns an array of length
                  0 if the method declares no exceptions in its {@code throws} clause.                
                <return>
                    the exception types declared as being thrown by the
                      method this object represents                    
                </return>
            </javadoc>
            <method name="getExceptionTypes" type="Class<?>[]" line="209"/>
            <javadoc line="212">
                Returns an array of {@code Type} objects that represent the
                  exceptions declared to be thrown by this {@code Method} object.
                  Returns an array of length 0 if the underlying method declares
                  no exceptions in its {@code throws} clause.
                  &lt;p&gt;If an exception type is a type variable or a parameterized
                  type, it is created. Otherwise, it is resolved.                
                <return>
                    an array of Types that represent the exception types
                      thrown by the underlying method                    
                </return>
                <throws>
                    GenericSignatureFormatErrorif the generic method signature does not conform to the format
                      specified in
                      <cite>The Java&trade; Virtual Machine Specification</cite>                    
                </throws>
                <throws>
                    TypeNotPresentException if the underlying method's{@code throws} clause refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if
                      the underlying method's {@code throws} clause refers to a
                      parameterized type that cannot be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getGenericExceptionTypes" type="Type[]" line="230">
                <declaration name="result" type="Type[]" line="231"/>
            </method>
            <javadoc line="235">
                Compares this {@code Method} against the specified object.  Returns
                  true if the objects are the same.  Two {@code Methods} are the same if
                  they were declared by the same class and have the same name
                  and formal parameter types and return type.                
            </javadoc>
            <method name="equals" type="boolean" line="241">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="242">
                    <declaration name="other" type="Method" line="243"/>
                    <scope line="244">
                        <declaration name="params1" type="Class&lt;?&gt;[]" line="246"/>
                        <declaration name="params2" type="Class&lt;?&gt;[]" line="247"/>
                        <scope line="248">
                            <scope line="249"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="258">
                Returns a hashcode for this {@code Method}.  The hashcode is computed
                  as the exclusive-or of the hashcodes for the underlying
                  method&apos;s declaring class name and the method&apos;s name.                
            </javadoc>
            <method name="hashCode" type="int" line="263"/>
            <javadoc line="266">
                Returns a string describing this {@code Method}.  The string is
                  formatted as the method access modifiers, if any, followed by
                  the method return type, followed by a space, followed by the
                  class declaring the method, followed by a period, followed by
                  the method name, followed by a parenthesized, comma-separated
                  list of the method&apos;s formal parameter types. If the method
                  throws checked exceptions, the parameter list is followed by a
                  space, followed by the word throws followed by a
                  comma-separated list of the thrown exception types.
                  For example:
                  &lt;pre&gt;
                  public boolean java.lang.Object.equals(java.lang.Object)
                  &lt;/pre&gt;
                  &lt;p&gt;The access modifiers are placed in canonical order as
                  specified by &quot;The Java Language Specification&quot;.  This is{@code public}, {@code protected} or {@code private} first,
                  and then other modifiers in the following order:{@code abstract}, {@code static}, {@code final},{@code synchronized}, {@code native}, {@code strictfp}.                
            </javadoc>
            <method name="toString" type="String" line="284">
                <scope line="285">
                    <declaration name="sb" type="StringBuilder" line="286"/>
                    <declaration name="mod" type="int" line="287"/>
                    <scope line="288"/>
                    <declaration name="params" type="Class&lt;?&gt;[]" line="294"/>
                    <scope line="295"/>
                    <declaration name="exceptions" type="Class&lt;?&gt;[]" line="300"/>
                    <scope line="301">
                        <scope line="303"/>
                    </scope>
                </scope>
                <scope line="310"/>
            </method>
            <javadoc line="314">
                Returns a string describing this {@code Method}, including
                  type parameters.  The string is formatted as the method access
                  modifiers, if any, followed by an angle-bracketed
                  comma-separated list of the method&apos;s type parameters, if any,
                  followed by the method&apos;s generic return type, followed by a
                  space, followed by the class declaring the method, followed by
                  a period, followed by the method name, followed by a
                  parenthesized, comma-separated list of the method&apos;s generic
                  formal parameter types.
                  If this method was declared to take a variable number of
                  arguments, instead of denoting the last parameter as
                  &quot;&lt;tt&gt;&lt;i&gt;Type&lt;/i&gt;[]&lt;/tt&gt;&quot;, it is denoted as
                  &quot;&lt;tt&gt;&lt;i&gt;Type&lt;/i&gt;...&lt;/tt&gt;&quot;.
                  A space is used to separate access modifiers from one another
                  and from the type parameters or return type.  If there are no
                  type parameters, the type parameter list is elided; if the type
                  parameter list is present, a space separates the list from the
                  class name.  If the method is declared to throw exceptions, the
                  parameter list is followed by a space, followed by the word
                  throws followed by a comma-separated list of the generic thrown
                  exception types.  If there are no type parameters, the type
                  parameter list is elided.
                  &lt;p&gt;The access modifiers are placed in canonical order as
                  specified by &quot;The Java Language Specification&quot;.  This is{@code public}, {@code protected} or {@code private} first,
                  and then other modifiers in the following order:{@code abstract}, {@code static}, {@code final},{@code synchronized}, {@code native}, {@code strictfp}.                
                <return>
                    a string describing this {@code Method},
                      include type parameters                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toGenericString" type="String" line="344">
                <scope line="345">
                    <declaration name="sb" type="StringBuilder" line="346"/>
                    <declaration name="mod" type="int" line="347"/>
                    <scope line="348"/>
                    <declaration name="typeparms" type="TypeVariable&lt;?&gt;[]" line="351"/>
                    <scope line="352">
                        <declaration name="first" type="boolean" line="353"/>
                        <scope line="355"/>
                    </scope>
                    <declaration name="genRetType" type="Type" line="362"/>
                    <declaration name="params" type="Type[]" line="366"/>
                    <scope line="367">
                        <declaration name="param" type="String" line="368"/>
                    </scope>
                    <declaration name="exceptions" type="Type[]" line="374"/>
                    <scope line="375">
                        <scope line="377"/>
                    </scope>
                </scope>
                <scope line="384"/>
            </method>
            <javadoc line="388">
                Invokes the underlying method represented by this {@code Method}object, on the specified object with the specified parameters.
                  Individual parameters are automatically unwrapped to match
                  primitive formal parameters, and both primitive and reference
                  parameters are subject to method invocation conversions as
                  necessary.
                  &lt;p&gt;If the underlying method is static, then the specified {@code obj}argument is ignored. It may be null.
                  &lt;p&gt;If the number of formal parameters required by the underlying method is
                  0, the supplied {@code args} array may be of length 0 or null.
                  &lt;p&gt;If the underlying method is an instance method, it is invoked
                  using dynamic method lookup as documented in The Java Language
                  Specification, Second Edition, section 15.12.4.4; in particular,
                  overriding based on the runtime type of the target object will occur.
                  &lt;p&gt;If the underlying method is static, the class that declared
                  the method is initialized if it has not already been initialized.
                  &lt;p&gt;If the method completes normally, the value it returns is
                  returned to the caller of invoke; if the value has a primitive
                  type, it is first appropriately wrapped in an object. However,
                  if the value has the type of an array of a primitive type, the
                  elements of the array are &lt;i&gt;not&lt;/i&gt; wrapped in objects; in
                  other words, an array of primitive type is returned.  If the
                  underlying method return type is void, the invocation returns
                  null.                
                <param>
                    obj  the object the underlying method is invoked from                    
                </param>
                <param>
                    args the arguments used for the method call                    
                </param>
                <return>
                    the result of dispatching the method represented by
                      this object on {@code obj} with parameters{@code args}                    
                </return>
                <exception>
                    IllegalAccessException    if this {@code Method} object
                      is enforcing Java language access control and the underlying
                      method is inaccessible.                    
                </exception>
                <exception>
                    IllegalArgumentException  if the method is an
                      instance method and the specified object argument
                      is not an instance of the class or interface
                      declaring the underlying method (or of a subclass
                      or implementor thereof); if the number of actual
                      and formal parameters differ; if an unwrapping
                      conversion for primitive arguments fails; or if,
                      after possible unwrapping, a parameter value
                      cannot be converted to the corresponding formal
                      parameter type by a method invocation conversion.                    
                </exception>
                <exception>
                    InvocationTargetException if the underlying method
                      throws an exception.                    
                </exception>
                <exception>
                    NullPointerException      if the specified object is null
                      and the method is an instance method.                    
                </exception>
                <exception>
                    ExceptionInInitializerError if the initialization
                      provoked by this method fails.                    
                </exception>
            </javadoc>
            <method name="invoke" type="Object" line="435">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="436">
                    <scope line="437">
                        <declaration name="caller" type="Class&lt;?&gt;" line="438"/>
                    </scope>
                </scope>
                <declaration name="ma" type="MethodAccessor" line="442"/>
                <scope line="443"/>
            </method>
            <javadoc line="448">
                Returns {@code true} if this method is a bridge
                  method; returns {@code false} otherwise.                
                <return>
                    true if and only if this method is a bridge
                      method as defined by the Java Language Specification.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isBridge" type="boolean" line="455"/>
            <javadoc line="458">
                Returns {@code true} if this method was declared to take
                  a variable number of arguments; returns {@code false}otherwise.                
                <return>
                    {@code true} if an only if this method was declared to
                      take a variable number of arguments.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isVarArgs" type="boolean" line="465"/>
            <javadoc line="468">
                Returns {@code true} if this method is a synthetic
                  method; returns {@code false} otherwise.                
                <return>
                    true if and only if this method is a synthetic
                      method as defined by the Java Language Specification.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSynthetic" type="boolean" line="475"/>
            <method name="acquireMethodAccessor" type="MethodAccessor" line="478">
                <declaration name="tmp" type="MethodAccessor" line="479"/>
                <scope line="481"/>
                <scope line="484"/>
            </method>
            <method name="getMethodAccessor" type="MethodAccessor" line="490"/>
            <method name="setMethodAccessor" type="void" line="493">
                <params>
                    <param name="accessor" type="MethodAccessor"/>
                </params>
                <scope line="495"/>
            </method>
            <javadoc line="499">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="T" line="503">
                <params>
                    <param name="annotationClass" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="507">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="510"/>
            <declaration name="declaredAnnotations" type="Map&lt;Class&lt;? extends Annotation&gt;,Annotation&gt;" line="513"/>
            <method name="declaredAnnotations" type="Map<Class<? extends Annotation>,Annotation>" line="514">
                <scope line="515"/>
            </method>
            <javadoc line="520">
                Returns the default value for the annotation member represented by
                  this {@code Method} instance.  If the member is of a primitive type,
                  an instance of the corresponding wrapper type is returned. Returns
                  null if no default is associated with the member, or if the method
                  instance does not represent a declared member of an annotation type.                
                <return>
                    the default value for the annotation member represented
                      by this {@code Method} instance.                    
                </return>
                <throws>
                    TypeNotPresentException if the annotation is of type{@link Class} and no definition can be found for the
                      default class value.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDefaultValue" type="Object" line="532">
                <declaration name="memberType" type="Class&lt;?&gt;" line="534"/>
                <declaration name="result" type="Object" line="535"/>
            </method>
            <javadoc line="539">
                Returns an array of arrays that represent the annotations on the formal
                  parameters, in declaration order, of the method represented by
                  this {@code Method} object. (Returns an array of length zero if the
                  underlying method is parameterless.  If the method has one or more
                  parameters, a nested array of length zero is returned for each parameter
                  with no annotations.) The annotation objects contained in the returned
                  arrays are serializable.  The caller of this method is free to modify
                  the returned arrays; it will have no effect on the arrays returned to
                  other callers.                
                <return>
                    an array of arrays that represent the annotations on the formal
                      parameters, in declaration order, of the method represented by this
                      Method object                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getParameterAnnotations" type="Annotation[][]" line="554">
                <declaration name="numParameters" type="int" line="555"/>
                <declaration name="result" type="Annotation[][]" line="557"/>
            </method>
        </class>
    </source>