<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <interface name="ParameterizedType">
            <implements interface="Type"/>
            <javadoc line="29">
                ParameterizedType represents a parameterized type such as
                  Collection&amp;lt;String&amp;gt;.
                  &lt;p&gt;A parameterized type is created the first time it is needed by a
                  reflective method, as specified in this package. When a
                  parameterized type p is created, the generic type declaration that
                  p instantiates is resolved, and all type arguments of p are created
                  recursively. See {@link java.lang.reflect.TypeVariableTypeVariable} for details on the creation process for type
                  variables. Repeated creation of a parameterized type has no effect.
                  &lt;p&gt;Instances of classes that implement this interface must implement
                  an equals() method that equates any two instances that share the
                  same generic type declaration and have equal type parameters.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getActualTypeArguments" type="Type[]" line="48"/>
            <javadoc line="48">
                Returns an array of {@code Type} objects representing the actual type
                  arguments to this type.
                  &lt;p&gt;Note that in some cases, the returned array be empty. This can occur
                  if this type represents a non-parameterized type nested within
                  a parameterized type.                
                <return>
                    an array of {@code Type} objects representing the actual type
                      arguments to this type                    
                </return>
                <throws>
                    TypeNotPresentException if any of the
                      actual type arguments refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if any of the
                      actual type parameters refer to a parameterized type that cannot
                      be instantiated for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getRawType" type="Type" line="67"/>
            <javadoc line="67">
                Returns the {@code Type} object representing the class or interface
                  that declared this type.                
                <return>
                    the {@code Type} object representing the class or interface
                      that declared this type                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getOwnerType" type="Type" line="77"/>
            <javadoc line="77">
                Returns a {@code Type} object representing the type that this type
                  is a member of.  For example, if this type is {@code O&lt;T&gt;.I&lt;S&gt;},
                  return a representation of {@code O&lt;T&gt;}.
                  &lt;p&gt;If this type is a top-level type, {@code null} is returned.                
                <return>
                    a {@code Type} object representing the type that
                      this type is a member of. If this type is a top-level type,{@code null} is returned                    
                </return>
                <throws>
                    TypeNotPresentException if the owner type
                      refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if the owner type
                      refers to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
        </interface>
    </source>