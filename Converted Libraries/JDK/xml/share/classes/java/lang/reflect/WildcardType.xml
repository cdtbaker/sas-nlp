<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <interface name="WildcardType">
            <implements interface="Type"/>
            <comment line="82">
                one or many? Up to language spec; currently only one, but this API                
            </comment>
            <comment line="83">
                allows for generalization.                
            </comment>
            <javadoc line="28">
                WildcardType represents a wildcard type expression, such as{@code ?}, {@code ? extends Number}, or {@code ? super Integer}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUpperBounds" type="Type[]" line="35"/>
            <javadoc line="35">
                Returns an array of {@code Type} objects representing the  upper
                  bound(s) of this type variable.  Note that if no upper bound is
                  explicitly declared, the upper bound is {@code Object}.
                  &lt;p&gt;For each upper bound B :
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}for the details of the creation process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <return>
                    an array of Types representing the upper bound(s) of this
                      type variable                    
                </return>
                <throws>
                    TypeNotPresentException if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
            </javadoc>
            <method name="getLowerBounds" type="Type[]" line="58"/>
            <javadoc line="58">
                Returns an array of {@code Type} objects representing the
                  lower bound(s) of this type variable.  Note that if no lower bound is
                  explicitly declared, the lower bound is the type of {@code null}.
                  In this case, a zero length array is returned.
                  &lt;p&gt;For each lower bound B :
                  &lt;ul&gt;
                  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
                  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}for the details of the creation process for parameterized types).
                  &lt;li&gt;Otherwise, B is resolved.
                  &lt;/ul&gt;                
                <return>
                    an array of Types representing the lower bound(s) of this
                      type variable                    
                </return>
                <throws>
                    TypeNotPresentException if any of the
                      bounds refers to a non-existent type declaration                    
                </throws>
                <throws>
                    MalformedParameterizedTypeException if any of the
                      bounds refer to a parameterized type that cannot be instantiated
                      for any reason                    
                </throws>
            </javadoc>
        </interface>
    </source>