<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="java.security.AccessController"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.reflect.ReflectionFactory"/>
        <import package="java.lang.annotation.Annotation"/>
        <class name="AccessibleObject" line="33">
            <comment line="133">
                                
            </comment>
            <comment line="161">
                Indicates whether language-level access checks are overridden                
            </comment>
            <comment line="162">
                by this object. Initializes to &quot;false&quot;. This field is used by                
            </comment>
            <comment line="163">
                Field, Method, and Constructor.                
            </comment>
            <comment line="164">
                                
            </comment>
            <comment line="165">
                NOTE: for security purposes, this field must not be visible                
            </comment>
            <comment line="166">
                outside this package.                
            </comment>
            <comment line="169">
                Reflection factory used by subclasses for creating field,                
            </comment>
            <comment line="170">
                method, and constructor accessors. Note that this is called                
            </comment>
            <comment line="171">
                very early in the bootstrapping process.                
            </comment>
            <comment line="208">
                Shared access checking logic.                
            </comment>
            <comment line="210">
                For non-public members or members in package-private classes,                
            </comment>
            <comment line="211">
                it is necessary to perform somewhat expensive security checks.                
            </comment>
            <comment line="212">
                If the security check succeeds for a given class, it will                
            </comment>
            <comment line="213">
                always succeed (it is not affected by the granting or revoking                
            </comment>
            <comment line="214">
                of permissions); we speed up the check in the common case by                
            </comment>
            <comment line="215">
                remembering the last Class for which the check succeeded.                
            </comment>
            <comment line="216">
                                
            </comment>
            <comment line="217">
                The simple security check for Constructor is to see if                
            </comment>
            <comment line="218">
                the caller has already been seen, verified, and cached.                
            </comment>
            <comment line="219">
                (See also Class.newInstance(), which uses a similar method.)                
            </comment>
            <comment line="220">
                                
            </comment>
            <comment line="221">
                A more complicated security check cache is needed for Method and Field                
            </comment>
            <comment line="222">
                The cache can be either null (empty cache), a 2-array of {caller,target},                
            </comment>
            <comment line="223">
                or a caller (with target implicitly equal to this.clazz).                
            </comment>
            <comment line="224">
                In the 2-array case, the target is always different from the clazz.                
            </comment>
            <comment line="257">
                Keep all this slow stuff out of line:                
            </comment>
            <implements interface="AnnotatedElement"/>
            <javadoc line="33">
                The AccessibleObject class is the base class for Field, Method and
                  Constructor objects.  It provides the ability to flag a reflected
                  object as suppressing default Java language access control checks
                  when it is used.  The access checks--for public, default (package)
                  access, protected, and private members--are performed when Fields,
                  Methods or Constructors are used to set or get fields, to invoke
                  methods, or to create and initialize new instances of classes,
                  respectively.
                  &lt;p&gt;Setting the {@code accessible} flag in a reflected object
                  permits sophisticated applications with sufficient privilege, such
                  as Java Object Serialization or other persistence mechanisms, to
                  manipulate objects in a manner that would normally be prohibited.
                  &lt;p&gt;By default, a reflected object is &lt;em&gt;not&lt;/em&gt; accessible.                
                <see>
                    Field                    
                </see>
                <see>
                    Method                    
                </see>
                <see>
                    Constructor                    
                </see>
                <see>
                    ReflectPermission                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ACCESS_PERMISSION" type="java.security.Permission" line="59"/>
            <javadoc line="59">
                The Permission object that is used to check whether a client
                  has sufficient privilege to defeat Java language access
                  control checks.                
            </javadoc>
            <javadoc line="67">
                Convenience method to set the {@code accessible} flag for an
                  array of objects with a single security check (for efficiency).
                  &lt;p&gt;First, if there is a security manager, its{@code checkPermission} method is called with a{@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.
                  &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is{@code true} but accessibility of any of the elements of the input{@code array} may not be changed (for example, if the element
                  object is a {@link Constructor} object for the class {@link java.lang.Class}).  In the event of such a SecurityException, the
                  accessibility of objects is set to {@code flag} for array elements
                  upto (and excluding) the element for which the exception occurred; the
                  accessibility of elements beyond (and including) the element for which
                  the exception occurred is unchanged.                
                <param>
                    array the array of AccessibleObjects                    
                </param>
                <param>
                    flag  the new value for the {@code accessible} flag
                      in each object                    
                </param>
                <throws>
                    SecurityException if the request is denied.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="setAccessible" type="void" line="93">
                <params>
                    <param name="array" type="AccessibleObject[]"/>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="94"/>
                <scope line="96"/>
            </method>
            <javadoc line="101">
                Set the {@code accessible} flag for this object to
                  the indicated boolean value.  A value of {@code true} indicates that
                  the reflected object should suppress Java language access
                  checking when it is used.  A value of {@code false} indicates
                  that the reflected object should enforce Java language access checks.
                  &lt;p&gt;First, if there is a security manager, its{@code checkPermission} method is called with a{@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.
                  &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is{@code true} but accessibility of this object may not be changed
                  (for example, if this element object is a {@link Constructor} object for
                  the class {@link java.lang.Class}).
                  &lt;p&gt;A {@code SecurityException} is raised if this object is a {@link java.lang.reflect.Constructor} object for the class{@code java.lang.Class}, and {@code flag} is true.                
                <param>
                    flag the new value for the {@code accessible} flag                    
                </param>
                <throws>
                    SecurityException if the request is denied.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="setAccessible" type="void" line="126">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="127"/>
            </method>
            <method name="setAccessible0" type="void" line="135">
                <params>
                    <param name="obj" type="AccessibleObject"/>
                    <param name="flag" type="boolean"/>
                </params>
                <scope line="136">
                    <declaration name="c" type="Constructor&lt;?&gt;" line="137"/>
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="146">
                Get the value of the {@code accessible} flag for this object.                
                <return>
                    the value of the object's {@code accessible} flag                    
                </return>
            </javadoc>
            <method name="isAccessible" type="boolean" line="151"/>
            <javadoc line="155">
                Constructor: only used by the Java Virtual Machine.                
            </javadoc>
            <method name="AccessibleObject" type="constructor" line="158"/>
            <declaration name="override" type="boolean" line="166"/>
            <declaration name="reflectionFactory" type="ReflectionFactory" line="171"/>
            <javadoc line="175">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="T" line="179">
                <params>
                    <param name="annotationClass" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="183">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnnotationPresent" type="boolean" line="188">
                <params>
                    <param name="annotationClass" type="Class<? extends Annotation>"/>
                </params>
            </method>
            <javadoc line="192">
                @since 1.5                
            </javadoc>
            <method name="getAnnotations" type="Annotation[]" line="195"/>
            <javadoc line="199">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="202"/>
            <declaration name="securityCheckCache" type="Object" line="224"/>
            <method name="checkAccess" type="void" line="228">
                <params>
                    <param name="caller" type="Class<?>"/>
                    <param name="clazz" type="Class<?>"/>
                    <param name="obj" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <comment line="229">
                    quick check                    
                </comment>
                <comment line="230">
                    ACCESS IS OK                    
                </comment>
                <comment line="232">
                    read volatile                    
                </comment>
                <comment line="237">
                    Must match a 2-list of { caller, targetClass }.                    
                </comment>
                <comment line="242">
                    ACCESS IS OK                    
                </comment>
                <comment line="244">
                    (Test cache[1] first since range check for [1]                    
                </comment>
                <comment line="245">
                    subsumes range check for [0].)                    
                </comment>
                <comment line="248">
                    Non-protected case (or obj.class == this.clazz).                    
                </comment>
                <comment line="249">
                    ACCESS IS OK                    
                </comment>
                <comment line="252">
                    If no return, fall through to the slow path.                    
                </comment>
                <scope line="229"/>
                <declaration name="cache" type="Object" line="232"/>
                <declaration name="targetClass" type="Class&lt;?&gt;" line="233"/>
                <scope line="236">
                    <scope line="238">
                        <declaration name="cache2" type="Class&lt;?&gt;[]" line="239"/>
                        <scope line="241"/>
                    </scope>
                </scope>
                <scope line="247"/>
            </method>
            <method name="slowCheckMemberAccess" type="void" line="260">
                <params>
                    <param name="caller" type="Class<?>"/>
                    <param name="clazz" type="Class<?>"/>
                    <param name="obj" type="Object"/>
                    <param name="modifiers" type="int"/>
                    <param name="targetClass" type="Class<?>"/>
                </params>
                <comment line="263">
                    Success: Update the cache.                    
                </comment>
                <comment line="268">
                    Note:  The two cache elements are not volatile,                    
                </comment>
                <comment line="269">
                    but they are effectively final.  The Java memory model                    
                </comment>
                <comment line="270">
                    guarantees that the initializing stores for the cache                    
                </comment>
                <comment line="271">
                    elements will occur before the volatile write.                    
                </comment>
                <comment line="272">
                    write volatile                    
                </comment>
                <declaration name="cache" type="Object" line="264"/>
            </method>
        </class>
    </source>