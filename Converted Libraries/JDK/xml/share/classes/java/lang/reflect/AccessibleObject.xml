<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="java.security.AccessController"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.reflect.ReflectionFactory"/>
        <import package="java.lang.annotation.Annotation"/>
        <class name="AccessibleObject" line="6">
            <implements interface="AnnotatedElement"/>
            <javadoc line="6">
                The AccessibleObject class is the base class for Field, Method and
                  Constructor objects.  It provides the ability to flag a reflected
                  object as suppressing default Java language access control checks
                  when it is used.  The access checks--for public, default (package)
                  access, protected, and private members--are performed when Fields,
                  Methods or Constructors are used to set or get fields, to invoke
                  methods, or to create and initialize new instances of classes,
                  respectively.
                  &lt;p&gt;Setting the {@code accessible} flag in a reflected object
                  permits sophisticated applications with sufficient privilege, such
                  as Java Object Serialization or other persistence mechanisms, to
                  manipulate objects in a manner that would normally be prohibited.
                  &lt;p&gt;By default, a reflected object is &lt;em&gt;not&lt;/em&gt; accessible.                
                <see>
                    Field                    
                </see>
                <see>
                    Method                    
                </see>
                <see>
                    Constructor                    
                </see>
                <see>
                    ReflectPermission                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="ACCESS_PERMISSION" type="java.security.Permission" line="27"/>
            <javadoc line="27">
                The Permission object that is used to check whether a client
                  has sufficient privilege to defeat Java language access
                  control checks.                
            </javadoc>
            <javadoc line="33">
                Convenience method to set the {@code accessible} flag for an
                  array of objects with a single security check (for efficiency).
                  &lt;p&gt;First, if there is a security manager, its{@code checkPermission} method is called with a{@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.
                  &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is{@code true} but accessibility of any of the elements of the input{@code array} may not be changed (for example, if the element
                  object is a {@link Constructor} object for the class {@link java.lang.Class}).  In the event of such a SecurityException, the
                  accessibility of objects is set to {@code flag} for array elements
                  upto (and excluding) the element for which the exception occurred; the
                  accessibility of elements beyond (and including) the element for which
                  the exception occurred is unchanged.                
                <param>
                    array the array of AccessibleObjects                    
                </param>
                <param>
                    flag  the new value for the {@code accessible} flag
                      in each object                    
                </param>
                <throws>
                    SecurityException if the request is denied.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="setAccessible" type="void" line="50">
                <params>
                    <param name="array" type="AccessibleObject[]"/>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="51"/>
                <scope line="53"/>
            </method>
            <javadoc line="57">
                Set the {@code accessible} flag for this object to
                  the indicated boolean value.  A value of {@code true} indicates that
                  the reflected object should suppress Java language access
                  checking when it is used.  A value of {@code false} indicates
                  that the reflected object should enforce Java language access checks.
                  &lt;p&gt;First, if there is a security manager, its{@code checkPermission} method is called with a{@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.
                  &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is{@code true} but accessibility of this object may not be changed
                  (for example, if this element object is a {@link Constructor} object for
                  the class {@link java.lang.Class}).
                  &lt;p&gt;A {@code SecurityException} is raised if this object is a {@link java.lang.reflect.Constructor} object for the class{@code java.lang.Class}, and {@code flag} is true.                
                <param>
                    flag the new value for the {@code accessible} flag                    
                </param>
                <throws>
                    SecurityException if the request is denied.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="setAccessible" type="void" line="73">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="74"/>
            </method>
            <method name="setAccessible0" type="void" line="78">
                <params>
                    <param name="obj" type="AccessibleObject"/>
                    <param name="flag" type="boolean"/>
                </params>
                <scope line="79">
                    <declaration name="c" type="Constructor&amp;lt;?&amp;gt;" line="80"/>
                    <scope line="81"/>
                </scope>
            </method>
            <javadoc line="87">
                Get the value of the {@code accessible} flag for this object.                
                <return>
                    the value of the object&apos;s {@code accessible} flag                    
                </return>
            </javadoc>
            <method name="isAccessible" type="boolean" line="91"/>
            <javadoc line="94">
                Constructor: only used by the Java Virtual Machine.                
            </javadoc>
            <method name="AccessibleObject" type="constructor" line="97"/>
            <declaration name="override" type="boolean" line="99"/>
            <declaration name="reflectionFactory" type="ReflectionFactory" line="100"/>
            <javadoc line="101">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="T" line="105">
                <params>
                    <param name="annotationClass" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="108">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnnotationPresent" type="boolean" line="112">
                <params>
                    <param name="annotationClass" type="Class&lt;? extends Annotation&gt;"/>
                </params>
            </method>
            <javadoc line="115">
                @since 1.5                
            </javadoc>
            <method name="getAnnotations" type="Annotation[]" line="118"/>
            <javadoc line="121">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="124"/>
            <declaration name="securityCheckCache" type="Object" line="127"/>
            <method name="checkAccess" type="void" line="128">
                <params>
                    <param name="caller" type="Class&lt;?&gt;"/>
                    <param name="clazz" type="Class&lt;?&gt;"/>
                    <param name="obj" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="129"/>
                <declaration name="cache" type="Object" line="132"/>
                <declaration name="targetClass" type="Class&amp;lt;?&amp;gt;" line="133"/>
                <scope line="134">
                    <scope line="135">
                        <declaration name="cache2" type="Class&amp;lt;?&amp;gt;[]" line="136"/>
                        <scope line="137"/>
                    </scope>
                </scope>
                <scope line="142"/>
            </method>
            <method name="slowCheckMemberAccess" type="void" line="147">
                <params>
                    <param name="caller" type="Class&lt;?&gt;"/>
                    <param name="clazz" type="Class&lt;?&gt;"/>
                    <param name="obj" type="Object"/>
                    <param name="modifiers" type="int"/>
                    <param name="targetClass" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="cache" type="Object" line="149"/>
            </method>
        </class>
    </source>