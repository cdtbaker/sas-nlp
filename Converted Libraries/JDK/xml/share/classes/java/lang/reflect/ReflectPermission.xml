<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <class name="ReflectPermission" line="28">
            <extends class="java.security.BasicPermission"/>
            <javadoc line="28">
                The Permission class for reflective operations.  A
                  ReflectPermission is a &lt;em&gt;named permission&lt;/em&gt; and has no
                  actions.  The only name currently defined is {@code suppressAccessChecks},
                  which allows suppressing the standard Java language access checks
                  -- for public, default (package) access, protected, and private
                  members -- performed by reflected objects at their point of use.
                  &lt;P&gt;
                  The following table
                  provides a summary description of what the permission allows,
                  and discusses the risks of granting code the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5 summary=&quot;Table shows permission target name, what the permission allows, and associated risks&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;suppressAccessChecks&lt;/td&gt;
                  &lt;td&gt;ability to access
                  fields and invoke methods in a class. Note that this includes
                  not only public, but protected and private fields and methods as well.&lt;/td&gt;
                  &lt;td&gt;This is dangerous in that information (possibly confidential) and
                  methods normally unavailable would be accessible to malicious code.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    AccessibleObject                    
                </see>
                <see>
                    Field#get                    
                </see>
                <see>
                    Field#set                    
                </see>
                <see>
                    Method#invoke                    
                </see>
                <see>
                    Constructor#newInstance                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="72"/>
            <javadoc line="74">
                Constructs a ReflectPermission with the specified name.                
                <param>
                    name the name of the ReflectPermission                    
                </param>
                <throws>
                    NullPointerException if {@code name} is {@code null}.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code name} is empty.                    
                </throws>
            </javadoc>
            <method name="ReflectPermission" type="constructor" line="82">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Constructs a ReflectPermission with the specified name and actions.
                  The actions should be null; they are ignored.                
                <param>
                    name the name of the ReflectPermission                    
                </param>
                <param>
                    actions should be null                    
                </param>
                <throws>
                    NullPointerException if {@code name} is {@code null}.                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code name} is empty.                    
                </throws>
            </javadoc>
            <method name="ReflectPermission" type="constructor" line="97">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
        </class>
    </source>