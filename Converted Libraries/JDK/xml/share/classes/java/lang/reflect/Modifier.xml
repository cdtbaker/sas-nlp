<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="java.security.AccessController"/>
        <import package="sun.reflect.LangReflectAccess"/>
        <import package="sun.reflect.ReflectionFactory"/>
        <class name="Modifier" line="32">
            <comment line="50">
                Bootstrapping protocol between java.lang and java.lang.reflect
                  packages                
            </comment>
            <comment line="260">
                Access modifier flag constants from tables 4.1, 4.4, 4.5, and 4.7 of
                 &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;cite&gt;                
            </comment>
            <comment line="337">
                Bits not (yet) exposed in the public API either because they
                 have different meanings for fields and methods and there is no
                 way to distinguish between the two in this class, or because
                 they are not Java programming language keywords                
            </comment>
            <javadoc line="32">
                The Modifier class provides {@code static} methods and
                  constants to decode class and member access modifiers.  The sets of
                  modifiers are represented as integers with distinct bit positions
                  representing different modifiers.  The values for the constants
                  representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                
                <see>
                    Class#getModifiers()                    
                </see>
                <see>
                    Member#getModifiers()                    
                </see>
                <author>
                    Nakul Saraiya                    
                </author>
                <author>
                    Kenneth Russell                    
                </author>
            </javadoc>
            <scope line="53">
                <declaration name="factory" type="sun.reflect.ReflectionFactory" line="54"/>
            </scope>
            <javadoc line="60">
                Return {@code true} if the integer argument includes the{@code public} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code public} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isPublic" type="boolean" line="68">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Return {@code true} if the integer argument includes the{@code private} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code private} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isPrivate" type="boolean" line="80">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Return {@code true} if the integer argument includes the{@code protected} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code protected} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isProtected" type="boolean" line="92">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Return {@code true} if the integer argument includes the{@code static} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code static} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isStatic" type="boolean" line="104">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="108">
                Return {@code true} if the integer argument includes the{@code final} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code final} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isFinal" type="boolean" line="116">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                Return {@code true} if the integer argument includes the{@code synchronized} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code synchronized} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isSynchronized" type="boolean" line="128">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Return {@code true} if the integer argument includes the{@code volatile} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code volatile} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isVolatile" type="boolean" line="140">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="144">
                Return {@code true} if the integer argument includes the{@code transient} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code transient} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isTransient" type="boolean" line="152">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="156">
                Return {@code true} if the integer argument includes the{@code native} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code native} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isNative" type="boolean" line="164">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="168">
                Return {@code true} if the integer argument includes the{@code interface} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code interface} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isInterface" type="boolean" line="176">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="180">
                Return {@code true} if the integer argument includes the{@code abstract} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code abstract} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isAbstract" type="boolean" line="188">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Return {@code true} if the integer argument includes the{@code strictfp} modifier, {@code false} otherwise.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    {@code true} if {@code mod} includes the{@code strictfp} modifier; {@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isStrict" type="boolean" line="200">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <javadoc line="204">
                Return a string describing the access modifier flags in
                  the specified modifier. For example:
                  &lt;blockquote&gt;&lt;pre&gt;
                  public final synchronized strictfp
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  The modifier names are returned in an order consistent with the
                  suggested modifier orderings given in sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  The full modifier ordering used by this method is:
                  &lt;blockquote&gt; {@codepublic protected private abstract static final transient
                  volatile synchronized native strictfp
                  interface } &lt;/blockquote&gt;
                  The {@code interface} modifier discussed in this class is
                  not a true modifier in the Java language and it appears after
                  all other modifiers listed by this method.  This method may
                  return a string of modifiers that are not valid modifiers of a
                  Java entity; in other words, no checking is done on the
                  possible validity of the combination of modifiers represented
                  by the input.
                  Note that to perform such checking for a known kind of entity,
                  such as a constructor or method, first AND the argument of{@code toString} with the appropriate mask from a method like{@link #constructorModifiers} or {@link #methodModifiers}.                
                <param>
                    mod a set of modifiers                    
                </param>
                <return>
                    a string representation of the set of modifiers
                      represented by {@code mod}                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="235">
                <params>
                    <param name="mod" type="int"/>
                </params>
                <comment line="244">
                                        
                </comment>
                <comment line="255">
                                        
                </comment>
                <declaration name="sb" type="StringBuffer" line="236"/>
                <declaration name="len" type="int" line="237"/>
            </method>
            <declaration name="PUBLIC" type="int" line="264"/>
            <javadoc line="264">
                The {@code int} value representing the {@code public}modifier.                
            </javadoc>
            <declaration name="PRIVATE" type="int" line="270"/>
            <javadoc line="270">
                The {@code int} value representing the {@code private}modifier.                
            </javadoc>
            <declaration name="PROTECTED" type="int" line="276"/>
            <javadoc line="276">
                The {@code int} value representing the {@code protected}modifier.                
            </javadoc>
            <declaration name="STATIC" type="int" line="282"/>
            <javadoc line="282">
                The {@code int} value representing the {@code static}modifier.                
            </javadoc>
            <declaration name="FINAL" type="int" line="288"/>
            <javadoc line="288">
                The {@code int} value representing the {@code final}modifier.                
            </javadoc>
            <declaration name="SYNCHRONIZED" type="int" line="294"/>
            <javadoc line="294">
                The {@code int} value representing the {@code synchronized}modifier.                
            </javadoc>
            <declaration name="VOLATILE" type="int" line="300"/>
            <javadoc line="300">
                The {@code int} value representing the {@code volatile}modifier.                
            </javadoc>
            <declaration name="TRANSIENT" type="int" line="306"/>
            <javadoc line="306">
                The {@code int} value representing the {@code transient}modifier.                
            </javadoc>
            <declaration name="NATIVE" type="int" line="312"/>
            <javadoc line="312">
                The {@code int} value representing the {@code native}modifier.                
            </javadoc>
            <declaration name="INTERFACE" type="int" line="318"/>
            <javadoc line="318">
                The {@code int} value representing the {@code interface}modifier.                
            </javadoc>
            <declaration name="ABSTRACT" type="int" line="324"/>
            <javadoc line="324">
                The {@code int} value representing the {@code abstract}modifier.                
            </javadoc>
            <declaration name="STRICT" type="int" line="330"/>
            <javadoc line="330">
                The {@code int} value representing the {@code strictfp}modifier.                
            </javadoc>
            <declaration name="BRIDGE" type="int" line="340"/>
            <declaration name="VARARGS" type="int" line="341"/>
            <declaration name="SYNTHETIC" type="int" line="342"/>
            <declaration name="ANNOTATION" type="int" line="343"/>
            <declaration name="ENUM" type="int" line="344"/>
            <method name="isSynthetic" type="boolean" line="345">
                <params>
                    <param name="mod" type="int"/>
                </params>
            </method>
            <declaration name="CLASS_MODIFIERS" type="int" line="349"/>
            <javadoc line="349">
                See JLSv3 section 8.1.1.                
            </javadoc>
            <declaration name="INTERFACE_MODIFIERS" type="int" line="357"/>
            <javadoc line="357">
                See JLSv3 section 9.1.1.                
            </javadoc>
            <declaration name="CONSTRUCTOR_MODIFIERS" type="int" line="365"/>
            <javadoc line="365">
                See JLSv3 section 8.8.3.                
            </javadoc>
            <declaration name="METHOD_MODIFIERS" type="int" line="371"/>
            <javadoc line="371">
                See JLSv3 section 8.4.3.                
            </javadoc>
            <declaration name="FIELD_MODIFIERS" type="int" line="379"/>
            <javadoc line="379">
                See JLSv3 section 8.3.1.                
            </javadoc>
            <javadoc line="387">
                Return an {@code int} value OR-ing together the source language
                  modifiers that can be applied to a class.                
                <return>
                    an {@code int} value OR-ing together the source language
                      modifiers that can be applied to a class.                    
                </return>
                <jls>
                    8.1.1 Class Modifiers                    
                </jls>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="classModifiers" type="int" line="396"/>
            <javadoc line="400">
                Return an {@code int} value OR-ing together the source language
                  modifiers that can be applied to an interface.                
                <return>
                    an {@code int} value OR-ing together the source language
                      modifiers that can be applied to an inteface.                    
                </return>
                <jls>
                    9.1.1 Interface Modifiers                    
                </jls>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="interfaceModifiers" type="int" line="409"/>
            <javadoc line="413">
                Return an {@code int} value OR-ing together the source language
                  modifiers that can be applied to a constructor.                
                <return>
                    an {@code int} value OR-ing together the source language
                      modifiers that can be applied to a constructor.                    
                </return>
                <jls>
                    8.8.3 Constructor Modifiers                    
                </jls>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="constructorModifiers" type="int" line="422"/>
            <javadoc line="426">
                Return an {@code int} value OR-ing together the source language
                  modifiers that can be applied to a method.                
                <return>
                    an {@code int} value OR-ing together the source language
                      modifiers that can be applied to a method.                    
                </return>
                <jls>
                    8.4.3 Method Modifiers                    
                </jls>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="methodModifiers" type="int" line="435"/>
            <javadoc line="440">
                Return an {@code int} value OR-ing together the source language
                  modifiers that can be applied to a field.                
                <return>
                    an {@code int} value OR-ing together the source language
                      modifiers that can be applied to a field.                    
                </return>
                <jls>
                    8.3.1 Field Modifiers                    
                </jls>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="fieldModifiers" type="int" line="449"/>
        </class>
    </source>