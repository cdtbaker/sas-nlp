<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.reflect">
        <import package="java.lang.annotation.Annotation"/>
        <interface name="AnnotatedElement">
            <javadoc line="3">
                Represents an annotated element of the program currently running in this
                  VM.  This interface allows annotations to be read reflectively.  All
                  annotations returned by methods in this interface are immutable and
                  serializable.  It is permissible for the caller to modify the
                  arrays returned by accessors for array-valued enum members; it will
                  have no affect on the arrays returned to other callers.
                  &lt;p&gt;If an annotation returned by a method in this interface contains
                  (directly or indirectly) a {@link Class}-valued member referring to
                  a class that is not accessible in this VM, attempting to read the class
                  by calling the relevant Class-returning method on the returned annotation
                  will result in a {@link TypeNotPresentException}.
                  &lt;p&gt;Similarly, attempting to read an enum-valued member will result in
                  a {@link EnumConstantNotPresentException} if the enum constant in the
                  annotation is no longer present in the enum type.
                  &lt;p&gt;Finally, Attempting to read a member whose definition has evolved
                  incompatibly will result in a {@link java.lang.annotation.AnnotationTypeMismatchException} or an{@link java.lang.annotation.IncompleteAnnotationException}.                
                <see>
                    java.lang.EnumConstantNotPresentException                    
                </see>
                <see>
                    java.lang.TypeNotPresentException                    
                </see>
                <see>
                    java.lang.annotation.AnnotationFormatError                    
                </see>
                <see>
                    java.lang.annotation.AnnotationTypeMismatchException                    
                </see>
                <see>
                    java.lang.annotation.IncompleteAnnotationException                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Josh Bloch                    
                </author>
            </javadoc>
            <method name="isAnnotationPresent" type="boolean" line="29"/>
            <javadoc line="29">
                Returns true if an annotation for the specified type
                  is present on this element, else false.  This method
                  is designed primarily for convenient access to marker annotations.                
                <param>
                    annotationClass the Class object corresponding to the
                      annotation type                    
                </param>
                <return>
                    true if an annotation for the specified annotation
                      type is present on this element, else false                    
                </return>
                <throws>
                    NullPointerException if the given annotation class is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="T" line="41"/>
            <javadoc line="41">
                Returns this element&apos;s annotation for the specified type if
                  such an annotation is present, else null.                
                <param>
                    annotationClass the Class object corresponding to the
                      annotation type                    
                </param>
                <return>
                    this element&apos;s annotation for the specified annotation type if
                      present on this element, else null                    
                </return>
                <throws>
                    NullPointerException if the given annotation class is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotations" type="Annotation[]" line="52"/>
            <javadoc line="52">
                Returns all annotations present on this element.  (Returns an array
                  of length zero if this element has no annotations.)  The caller of
                  this method is free to modify the returned array; it will have no
                  effect on the arrays returned to other callers.                
                <return>
                    all annotations present on this element                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="61"/>
            <javadoc line="61">
                Returns all annotations that are directly present on this
                  element.  Unlike the other methods in this interface, this method
                  ignores inherited annotations.  (Returns an array of length zero if
                  no annotations are directly present on this element.)  The caller of
                  this method is free to modify the returned array; it will have no
                  effect on the arrays returned to other callers.                
                <return>
                    All annotations directly present on this element                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
        </interface>
    </source>