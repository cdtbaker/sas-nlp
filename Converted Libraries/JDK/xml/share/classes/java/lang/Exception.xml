<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Exception" line="28">
            <extends class="Throwable"/>
            <javadoc line="28">
                The class {@code Exception} and its subclasses are a form of{@code Throwable} that indicates conditions that a reasonable
                  application might want to catch.
                  &lt;p&gt;The class {@code Exception} and any subclasses that are not also
                  subclasses of {@link RuntimeException} are &lt;em&gt;checked
                  exceptions&lt;/em&gt;.  Checked exceptions need to be declared in a
                  method or constructor&apos;s {@code throws} clause if they can be thrown
                  by the execution of the method or constructor and propagate outside
                  the method or constructor boundary.                
                <author>
                    Frank Yellin                    
                </author>
                <see>
                    java.lang.Error                    
                </see>
                <jls>
                    11.2 Compile-Time Checking of Exceptions                    
                </jls>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <javadoc line="48">
                Constructs a new exception with {@code null} as its detail message.
                  The cause is not initialized, and may subsequently be initialized by a
                  call to {@link #initCause}.                
            </javadoc>
            <method name="Exception" type="constructor" line="53"/>
            <javadoc line="57">
                Constructs a new exception with the specified detail message.  The
                  cause is not initialized, and may subsequently be initialized by
                  a call to {@link #initCause}.                
                <param>
                    message   the detail message. The detail message is saved for
                      later retrieval by the {@link #getMessage()} method.                    
                </param>
            </javadoc>
            <method name="Exception" type="constructor" line="65">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="69">
                Constructs a new exception with the specified detail message and
                  cause.  &lt;p&gt;Note that the detail message associated with{@code cause} is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
                  this exception&apos;s detail message.                
                <param>
                    message the detail message (which is saved for later retrieval
                      by the {@link #getMessage()} method).                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A <tt>null</tt> value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Exception" type="constructor" line="83">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="87">
                Constructs a new exception with the specified cause and a detail
                  message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
                  typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
                  This constructor is useful for exceptions that are little more than
                  wrappers for other throwables (for example, {@link java.security.PrivilegedActionException}).                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A <tt>null</tt> value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Exception" type="constructor" line="101">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="105">
                Constructs a new exception with the specified detail message,
                  cause, suppression enabled or disabled, and writable stack
                  trace enabled or disabled.                
                <param>
                    message the detail message.                    
                </param>
                <param>
                    cause the cause.  (A {@code null} value is permitted,
                      and indicates that the cause is nonexistent or unknown.)                    
                </param>
                <param>
                    enableSuppression whether or not suppression is enabled
                      or disabled                    
                </param>
                <param>
                    writableStackTrace whether or not the stack trace should
                      be writable                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="Exception" type="constructor" line="121">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                    <param name="enableSuppression" type="boolean"/>
                    <param name="writableStackTrace" type="boolean"/>
                </params>
            </method>
        </class>
    </source>