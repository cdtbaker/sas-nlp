<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Long" line="28">
            <extends class="Number"/>
            <comment line="329">
                Requires positive x                
            </comment>
            <comment line="976">
                Bit Twiddling                
            </comment>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Long"/>
                </type_params>
            </implements>
            <javadoc line="28">
                The {@code Long} class wraps a value of the primitive type {@codelong} in an object. An object of type {@code Long} contains a
                  single field whose type is {@code long}.
                  &lt;p&gt; In addition, this class provides several methods for converting
                  a {@code long} to a {@code String} and a {@code String} to a {@codelong}, as well as other constants and methods useful when dealing
                  with a {@code long}.
                  &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;
                  methods (such as {@link #highestOneBit(long) highestOneBit} and{@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are
                  based on material from Henry S. Warren, Jr.&apos;s &lt;i&gt;Hacker&apos;s
                  Delight&lt;/i&gt;, (Addison Wesley, 2002).                
                <author>
                    Lee Boynton                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="MIN_VALUE" type="long" line="51"/>
            <javadoc line="51">
                A constant holding the minimum value a {@code long} can
                  have, -2&lt;sup&gt;63&lt;/sup&gt;.                
            </javadoc>
            <declaration name="MAX_VALUE" type="long" line="57"/>
            <javadoc line="57">
                A constant holding the maximum value a {@code long} can
                  have, 2&lt;sup&gt;63&lt;/sup&gt;-1.                
            </javadoc>
            <declaration name="TYPE" type="Class&lt;Long&gt;" line="63"/>
            <javadoc line="63">
                The {@code Class} instance representing the primitive type{@code long}.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <javadoc line="71">
                Returns a string representation of the first argument in the
                  radix specified by the second argument.
                  &lt;p&gt;If the radix is smaller than {@code Character.MIN_RADIX}or larger than {@code Character.MAX_RADIX}, then the radix{@code 10} is used instead.
                  &lt;p&gt;If the first argument is negative, the first element of the
                  result is the ASCII minus sign {@code &apos;-&apos;}(&lt;code&gt;&apos;&amp;#92;u002d&apos;&lt;/code&gt;). If the first argument is not
                  negative, no sign character appears in the result.
                  &lt;p&gt;The remaining characters of the result represent the magnitude
                  of the first argument. If the magnitude is zero, it is
                  represented by a single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the magnitude will not be the zero
                  character.  The following ASCII characters are used as digits:
                  &lt;blockquote&gt;{@code 0123456789abcdefghijklmnopqrstuvwxyz}&lt;/blockquote&gt;
                  These are &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u007a&apos;&lt;/code&gt;. If {@code radix} is
                  &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters
                  are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,
                  the digits for hexadecimal (radix 16) are{@code 0123456789abcdef}. If uppercase letters are
                  desired, the {@link java.lang.String#toUpperCase()} method may
                  be called on the result:
                  &lt;blockquote&gt;{@code Long.toString(n, 16).toUpperCase()}&lt;/blockquote&gt;                
                <param>
                    i       a {@code long} to be converted to a string.                    
                </param>
                <param>
                    radix   the radix to use in the string representation.                    
                </param>
                <return>
                    a string representation of the argument in the specified radix.                    
                </return>
                <see>
                    java.lang.Character#MAX_RADIX                    
                </see>
                <see>
                    java.lang.Character#MIN_RADIX                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="115">
                <params>
                    <param name="i" type="long"/>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="buf" type="char[]" line="120"/>
                <declaration name="charPos" type="int" line="121"/>
                <declaration name="negative" type="boolean" line="122"/>
                <scope line="124"/>
                <scope line="128"/>
                <scope line="134"/>
            </method>
            <javadoc line="141">
                Returns a string representation of the {@code long}argument as an unsigned integer in base&amp;nbsp;16.
                  &lt;p&gt;The unsigned {@code long} value is the argument plus
                  2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
                  equal to the argument.  This value is converted to a string of
                  ASCII digits in hexadecimal (base&amp;nbsp;16) with no extra
                  leading {@code 0}s.  If the unsigned magnitude is zero, it
                  is represented by a single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The following characters are used as
                  hexadecimal digits:
                  &lt;blockquote&gt;{@code 0123456789abcdef}&lt;/blockquote&gt;
                  These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and  &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0066&apos;&lt;/code&gt;.  If uppercase letters are desired,
                  the {@link java.lang.String#toUpperCase()} method may be called
                  on the result:
                  &lt;blockquote&gt;{@code Long.toHexString(n).toUpperCase()}&lt;/blockquote&gt;                
                <param>
                    i   a {@code long} to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned {@code long}value represented by the argument in hexadecimal
                      (base&nbsp;16).                    
                </return>
                <since>
                    JDK 1.0.2                    
                </since>
            </javadoc>
            <method name="toHexString" type="String" line="176">
                <params>
                    <param name="i" type="long"/>
                </params>
            </method>
            <javadoc line="180">
                Returns a string representation of the {@code long}argument as an unsigned integer in base&amp;nbsp;8.
                  &lt;p&gt;The unsigned {@code long} value is the argument plus
                  2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
                  equal to the argument.  This value is converted to a string of
                  ASCII digits in octal (base&amp;nbsp;8) with no extra leading{@code 0}s.
                  &lt;p&gt;If the unsigned magnitude is zero, it is represented by a
                  single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The following characters are used as octal
                  digits:
                  &lt;blockquote&gt;{@code 01234567}&lt;/blockquote&gt;
                  These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0037&apos;&lt;/code&gt;.                
                <param>
                    i   a {@code long} to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned {@code long}value represented by the argument in octal (base&nbsp;8).                    
                </return>
                <since>
                    JDK 1.0.2                    
                </since>
            </javadoc>
            <method name="toOctalString" type="String" line="209">
                <params>
                    <param name="i" type="long"/>
                </params>
            </method>
            <javadoc line="213">
                Returns a string representation of the {@code long}argument as an unsigned integer in base&amp;nbsp;2.
                  &lt;p&gt;The unsigned {@code long} value is the argument plus
                  2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
                  equal to the argument.  This value is converted to a string of
                  ASCII digits in binary (base&amp;nbsp;2) with no extra leading{@code 0}s.  If the unsigned magnitude is zero, it is
                  represented by a single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The characters {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;) and {@code &apos;1&apos;}(&lt;code&gt;&apos;&amp;#92;u0031&apos;&lt;/code&gt;) are used as binary digits.                
                <param>
                    i   a {@code long} to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned {@code long}value represented by the argument in binary (base&nbsp;2).                    
                </return>
                <since>
                    JDK 1.0.2                    
                </since>
            </javadoc>
            <method name="toBinaryString" type="String" line="234">
                <params>
                    <param name="i" type="long"/>
                </params>
            </method>
            <javadoc line="238">
                Convert the integer to an unsigned number.                
            </javadoc>
            <method name="toUnsignedString" type="String" line="241">
                <params>
                    <param name="i" type="long"/>
                    <param name="shift" type="int"/>
                </params>
                <declaration name="buf" type="char[]" line="242"/>
                <declaration name="charPos" type="int" line="243"/>
                <declaration name="radix" type="int" line="244"/>
                <declaration name="mask" type="long" line="245"/>
                <scope line="246"/>
            </method>
            <javadoc line="253">
                Returns a {@code String} object representing the specified{@code long}.  The argument is converted to signed decimal
                  representation and returned as a string, exactly as if the
                  argument and the radix 10 were given as arguments to the {@link #toString(long,int)} method.                
                <param>
                    i   a {@code long} to be converted.                    
                </param>
                <return>
                    a string representation of the argument in base&nbsp;10.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="263">
                <params>
                    <param name="i" type="long"/>
                </params>
                <declaration name="size" type="int" line="266"/>
                <declaration name="buf" type="char[]" line="267"/>
            </method>
            <javadoc line="272">
                Places characters representing the integer i into the
                  character array buf. The characters are placed into
                  the buffer backwards starting with the least significant
                  digit at the specified index (exclusive), and working
                  backwards from there.
                  Will fail if i == Long.MIN_VALUE                
            </javadoc>
            <method name="getChars" type="void" line="281">
                <params>
                    <param name="i" type="long"/>
                    <param name="index" type="int"/>
                    <param name="buf" type="char[]"/>
                </params>
                <comment line="292">
                    Get 2 digits/iteration using longs until quotient fits into an int                    
                </comment>
                <comment line="295">
                    really: r = i - (q * 100);                    
                </comment>
                <comment line="302">
                    Get 2 digits/iteration using ints                    
                </comment>
                <comment line="307">
                    really: r = i2 - (q * 100);                    
                </comment>
                <comment line="314">
                    Fall thru to fast mode for smaller numbers                    
                </comment>
                <comment line="315">
                    assert(i2 &lt;= 65536, i2);                    
                </comment>
                <comment line="318">
                    r = i2-(q2*10) ...                    
                </comment>
                <declaration name="q" type="long" line="282"/>
                <declaration name="r" type="int" line="283"/>
                <declaration name="charPos" type="int" line="284"/>
                <declaration name="sign" type="char" line="285"/>
                <scope line="287"/>
                <scope line="293"/>
                <declaration name="q2" type="int" line="303"/>
                <declaration name="i2" type="int" line="304"/>
                <scope line="305"/>
                <scope line="316"/>
                <scope line="323"/>
            </method>
            <method name="stringSize" type="int" line="329">
                <params>
                    <param name="x" type="long"/>
                </params>
                <declaration name="p" type="long" line="330"/>
                <scope line="331"/>
            </method>
            <javadoc line="339">
                Parses the string argument as a signed {@code long} in the
                  radix specified by the second argument. The characters in the
                  string must all be digits of the specified radix (as determined
                  by whether {@link java.lang.Character#digit(char,int)} returns
                  a nonnegative value), except that the first character may be an
                  ASCII minus sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to
                  indicate a negative value or an ASCII plus sign {@code &apos;+&apos;}(&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to indicate a positive value. The
                  resulting {@code long} value is returned.
                  &lt;p&gt;Note that neither the character {@code L}(&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}(&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
                  of the string as a type indicator, as would be permitted in
                  Java programming language source code - except that either{@code L} or {@code l} may appear as a digit for a
                  radix greater than 22.
                  &lt;p&gt;An exception of type {@code NumberFormatException} is
                  thrown if any of the following situations occurs:
                  &lt;ul&gt;
                  &lt;li&gt;The first argument is {@code null} or is a string of
                  length zero.
                  &lt;li&gt;The {@code radix} is either smaller than {@link java.lang.Character#MIN_RADIX} or larger than {@link java.lang.Character#MAX_RADIX}.
                  &lt;li&gt;Any character of the string is not a digit of the specified
                  radix, except that the first character may be a minus sign{@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002d&apos;&lt;/code&gt;) or plus sign {@code&apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) provided that the string is
                  longer than length 1.
                  &lt;li&gt;The value represented by the string is not a value of type{@code long}.
                  &lt;/ul&gt;
                  &lt;p&gt;Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  parseLong(&quot;0&quot;, 10) returns 0L
                  parseLong(&quot;473&quot;, 10) returns 473L
                  parseLong(&quot;+42&quot;, 10) returns 42L
                  parseLong(&quot;-0&quot;, 10) returns 0L
                  parseLong(&quot;-FF&quot;, 16) returns -255L
                  parseLong(&quot;1100110&quot;, 2) returns 102L
                  parseLong(&quot;99&quot;, 8) throws a NumberFormatException
                  parseLong(&quot;Hazelnut&quot;, 10) throws a NumberFormatException
                  parseLong(&quot;Hazelnut&quot;, 36) returns 1356099454469L
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    s       the {@code String} containing the{@code long} representation to be parsed.                    
                </param>
                <param>
                    radix   the radix to be used while parsing {@code s}.                    
                </param>
                <return>
                    the {@code long} represented by the string argument in
                      the specified radix.                    
                </return>
                <throws>
                    NumberFormatException  if the string does not contain a
                      parsable {@code long}.                    
                </throws>
            </javadoc>
            <method name="parseLong" type="long" line="402">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
                <comment line="425">
                    Possible leading &quot;+&quot; or &quot;-&quot;                    
                </comment>
                <comment line="432">
                    Cannot have lone &quot;+&quot; or &quot;-&quot;                    
                </comment>
                <comment line="438">
                    Accumulating negatively avoids surprises near MAX_VALUE                    
                </comment>
                <scope line="403"/>
                <scope line="407"/>
                <scope line="411"/>
                <declaration name="result" type="long" line="416"/>
                <declaration name="negative" type="boolean" line="417"/>
                <declaration name="i" type="int" line="418"/>
                <declaration name="limit" type="long" line="419"/>
                <declaration name="multmin" type="long" line="420"/>
                <declaration name="digit" type="int" line="421"/>
                <scope line="423">
                    <declaration name="firstChar" type="char" line="424"/>
                    <scope line="425">
                        <scope line="426"/>
                    </scope>
                    <scope line="437">
                        <scope line="440"/>
                        <scope line="443"/>
                        <scope line="447"/>
                    </scope>
                </scope>
                <scope line="452"/>
            </method>
            <javadoc line="458">
                Parses the string argument as a signed decimal {@code long}.
                  The characters in the string must all be decimal digits, except
                  that the first character may be an ASCII minus sign {@code &apos;-&apos;}(&lt;code&gt;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value or an
                  ASCII plus sign {@code &apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to
                  indicate a positive value. The resulting {@code long} value is
                  returned, exactly as if the argument and the radix {@code 10}were given as arguments to the {@link #parseLong(java.lang.String,int)} method.
                  &lt;p&gt;Note that neither the character {@code L}(&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}(&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
                  of the string as a type indicator, as would be permitted in
                  Java programming language source code.                
                <param>
                    s   a {@code String} containing the {@code long}representation to be parsed                    
                </param>
                <return>
                    the {@code long} represented by the argument in
                      decimal.                    
                </return>
                <throws>
                    NumberFormatException  if the string does not contain a
                      parsable {@code long}.                    
                </throws>
            </javadoc>
            <method name="parseLong" type="long" line="482">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="486">
                Returns a {@code Long} object holding the value
                  extracted from the specified {@code String} when parsed
                  with the radix given by the second argument.  The first
                  argument is interpreted as representing a signed{@code long} in the radix specified by the second
                  argument, exactly as if the arguments were given to the {@link #parseLong(java.lang.String,int)} method. The result is a{@code Long} object that represents the {@code long}value specified by the string.
                  &lt;p&gt;In other words, this method returns a {@code Long} object equal
                  to the value of:
                  &lt;blockquote&gt;{@code new Long(Long.parseLong(s, radix))}&lt;/blockquote&gt;                
                <param>
                    s       the string to be parsed                    
                </param>
                <param>
                    radix   the radix to be used in interpreting {@code s}                    
                </param>
                <return>
                    a {@code Long} object holding the value
                      represented by the string argument in the specified
                      radix.                    
                </return>
                <throws>
                    NumberFormatException  If the {@code String} does not
                      contain a parsable {@code long}.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Long" line="512">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
            </method>
            <javadoc line="516">
                Returns a {@code Long} object holding the value
                  of the specified {@code String}. The argument is
                  interpreted as representing a signed decimal {@code long},
                  exactly as if the argument were given to the {@link #parseLong(java.lang.String)} method. The result is a{@code Long} object that represents the integer value
                  specified by the string.
                  &lt;p&gt;In other words, this method returns a {@code Long} object
                  equal to the value of:
                  &lt;blockquote&gt;{@code new Long(Long.parseLong(s))}&lt;/blockquote&gt;                
                <param>
                    s   the string to be parsed.                    
                </param>
                <return>
                    a {@code Long} object holding the value
                      represented by the string argument.                    
                </return>
                <throws>
                    NumberFormatException  If the string cannot be parsed
                      as a {@code long}.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Long" line="539">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <class name="LongCache" line="543">
                <method name="LongCache" type="constructor" line="544"/>
                <declaration name="cache" type="Long" line="546"/>
                <scope line="548"/>
            </class>
            <javadoc line="554">
                Returns a {@code Long} instance representing the specified{@code long} value.
                  If a new {@code Long} instance is not required, this method
                  should generally be used in preference to the constructor{@link #Long(long)}, as this method is likely to yield
                  significantly better space and time performance by caching
                  frequently requested values.
                  Note that unlike the {@linkplain Integer#valueOf(int)corresponding method} in the {@code Integer} class, this method
                  is &lt;em&gt;not&lt;/em&gt; required to cache values within a particular
                  range.                
                <param>
                    l a long value.                    
                </param>
                <return>
                    a {@code Long} instance representing {@code l}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="valueOf" type="Long" line="572">
                <params>
                    <param name="l" type="long"/>
                </params>
                <comment line="574">
                    will cache                    
                </comment>
                <declaration name="offset" type="int" line="573"/>
                <scope line="574"/>
            </method>
            <javadoc line="580">
                Decodes a {@code String} into a {@code Long}.
                  Accepts decimal, hexadecimal, and octal numbers given by the
                  following grammar:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
                  &lt;dd&gt;{@code -}&lt;dd&gt;{@code +}&lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
                  are as defined in section 3.10.1 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;,
                  except that underscores are not accepted between digits.
                  &lt;p&gt;The sequence of characters following an optional
                  sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
                  &quot;{@code #}&quot;, or leading zero) is parsed as by the {@codeLong.parseLong} method with the indicated radix (10, 16, or 8).
                  This sequence of characters must represent a positive value or
                  a {@link NumberFormatException} will be thrown.  The result is
                  negated if first character of the specified {@code String} is
                  the minus sign.  No whitespace characters are permitted in the{@code String}.                
                <param>
                    nm the {@code String} to decode.                    
                </param>
                <return>
                    a {@code Long} object holding the {@code long}value represented by {@code nm}                    
                </return>
                <throws>
                    NumberFormatException  if the {@code String} does not
                      contain a parsable {@code long}.                    
                </throws>
                <see>
                    java.lang.Long#parseLong(String,int)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="decode" type="Long" line="623">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <comment line="632">
                    Handle sign, if present                    
                </comment>
                <comment line="639">
                    Handle radix specifier, if present                    
                </comment>
                <comment line="660">
                    If number is Long.MIN_VALUE, we&apos;ll end up here. The next line                    
                </comment>
                <comment line="661">
                    handles this case, and causes any genuine format error to be                    
                </comment>
                <comment line="662">
                    rethrown.                    
                </comment>
                <declaration name="radix" type="int" line="624"/>
                <declaration name="index" type="int" line="625"/>
                <declaration name="negative" type="boolean" line="626"/>
                <declaration name="result" type="Long" line="627"/>
                <declaration name="firstChar" type="char" line="631"/>
                <scope line="633"/>
                <scope line="640"/>
                <scope line="644"/>
                <scope line="648"/>
                <scope line="656"/>
                <scope line="659">
                    <declaration name="constant" type="String" line="663"/>
                </scope>
            </method>
            <declaration name="value" type="long" line="670"/>
            <javadoc line="670">
                The value of the {@code Long}.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="677">
                Constructs a newly allocated {@code Long} object that
                  represents the specified {@code long} argument.                
                <param>
                    value   the value to be represented by the{@code Long} object.                    
                </param>
            </javadoc>
            <method name="Long" type="constructor" line="684">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="688">
                Constructs a newly allocated {@code Long} object that
                  represents the {@code long} value indicated by the{@code String} parameter. The string is converted to a{@code long} value in exactly the manner used by the{@code parseLong} method for radix 10.                
                <param>
                    s   the {@code String} to be converted to a{@code Long}.                    
                </param>
                <throws>
                    NumberFormatException  if the {@code String} does not
                      contain a parsable {@code long}.                    
                </throws>
                <see>
                    java.lang.Long#parseLong(java.lang.String,int)                    
                </see>
            </javadoc>
            <method name="Long" type="constructor" line="701">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="705">
                Returns the value of this {@code Long} as a{@code byte}.                
            </javadoc>
            <method name="byteValue" type="byte" line="709"/>
            <javadoc line="713">
                Returns the value of this {@code Long} as a{@code short}.                
            </javadoc>
            <method name="shortValue" type="short" line="717"/>
            <javadoc line="721">
                Returns the value of this {@code Long} as an{@code int}.                
            </javadoc>
            <method name="intValue" type="int" line="725"/>
            <javadoc line="729">
                Returns the value of this {@code Long} as a{@code long} value.                
            </javadoc>
            <method name="longValue" type="long" line="733"/>
            <javadoc line="737">
                Returns the value of this {@code Long} as a{@code float}.                
            </javadoc>
            <method name="floatValue" type="float" line="741"/>
            <javadoc line="745">
                Returns the value of this {@code Long} as a{@code double}.                
            </javadoc>
            <method name="doubleValue" type="double" line="749"/>
            <javadoc line="753">
                Returns a {@code String} object representing this{@code Long}&apos;s value.  The value is converted to signed
                  decimal representation and returned as a string, exactly as if
                  the {@code long} value were given as an argument to the{@link java.lang.Long#toString(long)} method.                
                <return>
                    a string representation of the value of this object in
                      base&nbsp;10.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="763"/>
            <javadoc line="767">
                Returns a hash code for this {@code Long}. The result is
                  the exclusive OR of the two halves of the primitive{@code long} value held by this {@code Long}object. That is, the hashcode is the value of the expression:
                  &lt;blockquote&gt;{@code (int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))}&lt;/blockquote&gt;                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="779"/>
            <javadoc line="783">
                Compares this object to the specified object.  The result is{@code true} if and only if the argument is not{@code null} and is a {@code Long} object that
                  contains the same {@code long} value as this object.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    {@code true} if the objects are the same;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="793">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="794"/>
            </method>
            <javadoc line="800">
                Determines the {@code long} value of the system property
                  with the specified name.
                  &lt;p&gt;The first argument is treated as the name of a system property.
                  System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The
                  string value of this property is then interpreted as a{@code long} value and a {@code Long} object
                  representing this value is returned.  Details of possible
                  numeric formats can be found with the definition of{@code getProperty}.
                  &lt;p&gt;If there is no property with the specified name, if the
                  specified name is empty or {@code null}, or if the
                  property does not have the correct numeric format, then{@code null} is returned.
                  &lt;p&gt;In other words, this method returns a {@code Long} object equal to
                  the value of:
                  &lt;blockquote&gt;{@code getLong(nm, null)}&lt;/blockquote&gt;                
                <param>
                    nm   property name.                    
                </param>
                <return>
                    the {@code Long} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getLong" type="Long" line="830">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="834">
                Determines the {@code long} value of the system property
                  with the specified name.
                  &lt;p&gt;The first argument is treated as the name of a system property.
                  System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The
                  string value of this property is then interpreted as a{@code long} value and a {@code Long} object
                  representing this value is returned.  Details of possible
                  numeric formats can be found with the definition of{@code getProperty}.
                  &lt;p&gt;The second argument is the default value. A {@code Long} object
                  that represents the value of the second argument is returned if there
                  is no property of the specified name, if the property does not have
                  the correct numeric format, or if the specified name is empty or null.
                  &lt;p&gt;In other words, this method returns a {@code Long} object equal
                  to the value of:
                  &lt;blockquote&gt;{@code getLong(nm, new Long(val))}&lt;/blockquote&gt;
                  but in practice it may be implemented in a manner such as:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Long result = getLong(nm, null);
                  return (result == null) ? new Long(val) : result;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  to avoid the unnecessary allocation of a {@code Long} object when
                  the default value is not needed.                
                <param>
                    nm    property name.                    
                </param>
                <param>
                    val   default value.                    
                </param>
                <return>
                    the {@code Long} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getLong" type="Long" line="875">
                <params>
                    <param name="nm" type="String"/>
                    <param name="val" type="long"/>
                </params>
                <declaration name="result" type="Long" line="876"/>
            </method>
            <javadoc line="880">
                Returns the {@code long} value of the system property with
                  the specified name.  The first argument is treated as the name
                  of a system property.  System properties are accessible through
                  the {@link java.lang.System#getProperty(java.lang.String)}method. The string value of this property is then interpreted
                  as a {@code long} value, as per the{@code Long.decode} method, and a {@code Long} object
                  representing this value is returned.
                  &lt;ul&gt;
                  &lt;li&gt;If the property value begins with the two ASCII characters{@code 0x} or the ASCII character {@code #}, not followed by
                  a minus sign, then the rest of it is parsed as a hexadecimal integer
                  exactly as for the method {@link #valueOf(java.lang.String,int)}with radix 16.
                  &lt;li&gt;If the property value begins with the ASCII character{@code 0} followed by another character, it is parsed as
                  an octal integer exactly as by the method {@link #valueOf(java.lang.String,int)} with radix 8.
                  &lt;li&gt;Otherwise the property value is parsed as a decimal
                  integer exactly as by the method{@link #valueOf(java.lang.String,int)} with radix 10.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that, in every case, neither {@code L}(&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}(&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
                  of the property value as a type indicator, as would be
                  permitted in Java programming language source code.
                  &lt;p&gt;The second argument is the default value. The default value is
                  returned if there is no property of the specified name, if the
                  property does not have the correct numeric format, or if the
                  specified name is empty or {@code null}.                
                <param>
                    nm   property name.                    
                </param>
                <param>
                    val   default value.                    
                </param>
                <return>
                    the {@code Long} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
                <see>
                    java.lang.Long#decode                    
                </see>
            </javadoc>
            <method name="getLong" type="Long" line="923">
                <params>
                    <param name="nm" type="String"/>
                    <param name="val" type="Long"/>
                </params>
                <declaration name="v" type="String" line="924"/>
                <scope line="925"/>
                <scope line="927"/>
                <scope line="928"/>
                <scope line="930">
                    <scope line="931"/>
                    <scope line="933"/>
                </scope>
            </method>
            <javadoc line="939">
                Compares two {@code Long} objects numerically.                
                <param>
                    anotherLong   the {@code Long} to be compared.                    
                </param>
                <return>
                    the value {@code 0} if this {@code Long} is
                      equal to the argument {@code Long}; a value less than{@code 0} if this {@code Long} is numerically less
                      than the argument {@code Long}; and a value greater
                      than {@code 0} if this {@code Long} is numerically
                      greater than the argument {@code Long} (signed
                      comparison).                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="952">
                <params>
                    <param name="anotherLong" type="Long"/>
                </params>
            </method>
            <javadoc line="956">
                Compares two {@code long} values numerically.
                  The value returned is identical to what would be returned by:
                  &lt;pre&gt;
                  Long.valueOf(x).compareTo(Long.valueOf(y))
                  &lt;/pre&gt;                
                <param>
                    x the first {@code long} to compare                    
                </param>
                <param>
                    y the second {@code long} to compare                    
                </param>
                <return>
                    the value {@code 0} if {@code x == y};
                      a value less than {@code 0} if {@code x < y}; and
                      a value greater than {@code 0} if {@code x > y}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="970">
                <params>
                    <param name="x" type="long"/>
                    <param name="y" type="long"/>
                </params>
            </method>
            <declaration name="SIZE" type="int" line="977"/>
            <javadoc line="977">
                The number of bits used to represent a {@code long} value in two&apos;s
                  complement binary form.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="985">
                Returns a {@code long} value with at most a single one-bit, in the
                  position of the highest-order (&quot;leftmost&quot;) one-bit in the specified{@code long} value.  Returns zero if the specified value has no
                  one-bits in its two&apos;s complement binary representation, that is, if it
                  is equal to zero.                
                <return>
                    a {@code long} value with a single one-bit, in the position
                      of the highest-order one-bit in the specified value, or zero if
                      the specified value is itself equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="highestOneBit" type="long" line="997">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="998">
                    HD, Figure 3-1                    
                </comment>
            </method>
            <javadoc line="1008">
                Returns a {@code long} value with at most a single one-bit, in the
                  position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified{@code long} value.  Returns zero if the specified value has no
                  one-bits in its two&apos;s complement binary representation, that is, if it
                  is equal to zero.                
                <return>
                    a {@code long} value with a single one-bit, in the position
                      of the lowest-order one-bit in the specified value, or zero if
                      the specified value is itself equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="lowestOneBit" type="long" line="1020">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1021">
                    HD, Section 2-1                    
                </comment>
            </method>
            <javadoc line="1025">
                Returns the number of zero bits preceding the highest-order
                  (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
                  of the specified {@code long} value.  Returns 64 if the
                  specified value has no one-bits in its two&apos;s complement representation,
                  in other words if it is equal to zero.
                  &lt;p&gt;Note that this method is closely related to the logarithm base 2.
                  For all positive {@code long} values x:
                  &lt;ul&gt;
                  &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 63 - numberOfLeadingZeros(x)}&lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 64 - numberOfLeadingZeros(x - 1)}&lt;/ul&gt;                
                <return>
                    the number of zero bits preceding the highest-order
                      ("leftmost") one-bit in the two's complement binary representation
                      of the specified {@code long} value, or 64 if the value
                      is equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="numberOfLeadingZeros" type="int" line="1045">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1046">
                    HD, Figure 5-6                    
                </comment>
                <declaration name="n" type="int" line="1049"/>
                <declaration name="x" type="int" line="1050"/>
                <scope line="1051"/>
                <scope line="1052"/>
                <scope line="1053"/>
                <scope line="1054"/>
                <scope line="1055"/>
            </method>
            <javadoc line="1060">
                Returns the number of zero bits following the lowest-order (&quot;rightmost&quot;)
                  one-bit in the two&apos;s complement binary representation of the specified{@code long} value.  Returns 64 if the specified value has no
                  one-bits in its two&apos;s complement representation, in other words if it is
                  equal to zero.                
                <return>
                    the number of zero bits following the lowest-order ("rightmost")
                      one-bit in the two's complement binary representation of the
                      specified {@code long} value, or 64 if the value is equal
                      to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="numberOfTrailingZeros" type="int" line="1073">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1074">
                    HD, Figure 5-14                    
                </comment>
                <declaration name="x" type="int" line="1075"/>
                <declaration name="n" type="int" line="1077"/>
                <scope line="1078"/>
                <scope line="1079"/>
                <scope line="1080"/>
                <scope line="1081"/>
                <scope line="1082"/>
            </method>
            <javadoc line="1086">
                Returns the number of one-bits in the two&apos;s complement binary
                  representation of the specified {@code long} value.  This function is
                  sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.                
                <return>
                    the number of one-bits in the two's complement binary
                      representation of the specified {@code long} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="bitCount" type="int" line="1095">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1096">
                    HD, Figure 5-14                    
                </comment>
            </method>
            <javadoc line="1106">
                Returns the value obtained by rotating the two&apos;s complement binary
                  representation of the specified {@code long} value left by the
                  specified number of bits.  (Bits shifted out of the left hand, or
                  high-order, side reenter on the right, or low-order.)
                  &lt;p&gt;Note that left rotation with a negative distance is equivalent to
                  right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,
                  distance)}.  Note also that rotation by any multiple of 64 is a
                  no-op, so all but the last six bits of the rotation distance can be
                  ignored, even if the distance is negative: {@code rotateLeft(val,
                  distance) == rotateLeft(val, distance &amp; 0x3F)}.                
                <return>
                    the value obtained by rotating the two's complement binary
                      representation of the specified {@code long} value left by the
                      specified number of bits.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="rotateLeft" type="long" line="1124">
                <params>
                    <param name="i" type="long"/>
                    <param name="distance" type="int"/>
                </params>
            </method>
            <javadoc line="1128">
                Returns the value obtained by rotating the two&apos;s complement binary
                  representation of the specified {@code long} value right by the
                  specified number of bits.  (Bits shifted out of the right hand, or
                  low-order, side reenter on the left, or high-order.)
                  &lt;p&gt;Note that right rotation with a negative distance is equivalent to
                  left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,
                  distance)}.  Note also that rotation by any multiple of 64 is a
                  no-op, so all but the last six bits of the rotation distance can be
                  ignored, even if the distance is negative: {@code rotateRight(val,
                  distance) == rotateRight(val, distance &amp; 0x3F)}.                
                <return>
                    the value obtained by rotating the two's complement binary
                      representation of the specified {@code long} value right by the
                      specified number of bits.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="rotateRight" type="long" line="1146">
                <params>
                    <param name="i" type="long"/>
                    <param name="distance" type="int"/>
                </params>
            </method>
            <javadoc line="1150">
                Returns the value obtained by reversing the order of the bits in the
                  two&apos;s complement binary representation of the specified {@code long}value.                
                <return>
                    the value obtained by reversing order of the bits in the
                      specified {@code long} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverse" type="long" line="1159">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1160">
                    HD, Figure 7-1                    
                </comment>
            </method>
            <javadoc line="1170">
                Returns the signum function of the specified {@code long} value.  (The
                  return value is -1 if the specified value is negative; 0 if the
                  specified value is zero; and 1 if the specified value is positive.)                
                <return>
                    the signum function of the specified {@code long} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="int" line="1178">
                <params>
                    <param name="i" type="long"/>
                </params>
                <comment line="1179">
                    HD, Section 2-7                    
                </comment>
            </method>
            <javadoc line="1183">
                Returns the value obtained by reversing the order of the bytes in the
                  two&apos;s complement representation of the specified {@code long} value.                
                <return>
                    the value obtained by reversing the bytes in the specified{@code long} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverseBytes" type="long" line="1191">
                <params>
                    <param name="i" type="long"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="1197"/>
            <javadoc line="1197">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
        </class>
    </source>