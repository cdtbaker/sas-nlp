<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Formatter"/>
        <import package="java.util.Locale"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <import package="java.util.regex.PatternSyntaxException"/>
        <class name="String" line="41">
            <comment line="124">
                Default to 0                
            </comment>
            <comment line="401">
                Common private utility method used to bounds check the byte array
                 and requested offset &amp; length values used by the String(byte[],..)
                 constructors.                
            </comment>
            <comment line="645">
                Package private constructor which shares value array for speed.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="String"/>
                </type_params>
            </implements>
            <implements interface="CharSequence"/>
            <javadoc line="41">
                The &lt;code&gt;String&lt;/code&gt; class represents character strings. All
                  string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are
                  implemented as instances of this class.
                  &lt;p&gt;
                  Strings are constant; their values cannot be changed after they
                  are created. String buffers support mutable strings.
                  Because String objects are immutable they can be shared. For example:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  String str = &quot;abc&quot;;
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
                  is equivalent to:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  char data[] = {&apos;a&apos;, &apos;b&apos;, &apos;c&apos;};
                  String str = new String(data);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
                  Here are some more examples of how strings can be used:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  System.out.println(&quot;abc&quot;);
                  String cde = &quot;cde&quot;;
                  System.out.println(&quot;abc&quot; + cde);
                  String c = &quot;abc&quot;.substring(2,3);
                  String d = cde.substring(1, 2);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  The class &lt;code&gt;String&lt;/code&gt; includes methods for examining
                  individual characters of the sequence, for comparing strings, for
                  searching strings, for extracting substrings, and for creating a
                  copy of a string with all characters translated to uppercase or to
                  lowercase. Case mapping is based on the Unicode Standard version
                  specified by the {@link java.lang.Character Character} class.
                  &lt;p&gt;
                  The Java language provides special support for the string
                  concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of
                  other objects to strings. String concatenation is implemented
                  through the &lt;code&gt;StringBuilder&lt;/code&gt;(or &lt;code&gt;StringBuffer&lt;/code&gt;)
                  class and its &lt;code&gt;append&lt;/code&gt; method.
                  String conversions are implemented through the method
                  &lt;code&gt;toString&lt;/code&gt;, defined by &lt;code&gt;Object&lt;/code&gt; and
                  inherited by all classes in Java. For additional information on
                  string concatenation and conversion, see Gosling, Joy, and Steele,
                  &lt;i&gt;The Java Language Specification&lt;/i&gt;.
                  &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor
                  or method in this class will cause a {@link NullPointerException} to be
                  thrown.
                  &lt;p&gt;A &lt;code&gt;String&lt;/code&gt; represents a string in the UTF-16 format
                  in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate
                  pairs&lt;/em&gt; (see the section &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode
                  Character Representations&lt;/a&gt; in the &lt;code&gt;Character&lt;/code&gt; class for
                  more information).
                  Index values refer to &lt;code&gt;char&lt;/code&gt; code units, so a supplementary
                  character uses two positions in a &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with
                  Unicode code points (i.e., characters), in addition to those for
                  dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).                
                <author>
                    Lee Boynton                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Martin Buchholz                    
                </author>
                <author>
                    Ulf Zibis                    
                </author>
                <see>
                    java.lang.Object#toString()                    
                </see>
                <see>
                    java.lang.StringBuffer                    
                </see>
                <see>
                    java.lang.StringBuilder                    
                </see>
                <see>
                    java.nio.charset.Charset                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="value" type="char" line="113"/>
            <javadoc line="113">
                The value is used for character storage.                
            </javadoc>
            <declaration name="offset" type="int" line="116"/>
            <javadoc line="116">
                The offset is the first index of the storage that is used.                
            </javadoc>
            <declaration name="count" type="int" line="119"/>
            <javadoc line="119">
                The count is the number of characters in the String.                
            </javadoc>
            <declaration name="hash" type="int" line="122"/>
            <javadoc line="122">
                Cache the hash code for the string                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="125"/>
            <javadoc line="125">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="128"/>
            <javadoc line="128">
                Class String is special cased within the Serialization Stream Protocol.
                  A String instance is written initially into an ObjectOutputStream in the
                  following format:
                  &lt;pre&gt;
                  &lt;code&gt;TC_STRING&lt;/code&gt; (utf String)
                  &lt;/pre&gt;
                  The String is written by method &lt;code&gt;DataOutput.writeUTF&lt;/code&gt;.
                  A new handle is generated to  refer to all future references to the
                  string instance within the stream.                
            </javadoc>
            <javadoc line="143">
                Initializes a newly created {@code String} object so that it represents
                  an empty character sequence.  Note that use of this constructor is
                  unnecessary since Strings are immutable.                
            </javadoc>
            <method name="String" type="constructor" line="148"/>
            <javadoc line="154">
                Initializes a newly created {@code String} object so that it represents
                  the same sequence of characters as the argument; in other words, the
                  newly created string is a copy of the argument string. Unless an
                  explicit copy of {@code original} is needed, use of this constructor is
                  unnecessary since Strings are immutable.                
                <param>
                    originalA {@code String}                    
                </param>
            </javadoc>
            <method name="String" type="constructor" line="164">
                <params>
                    <param name="original" type="String"/>
                </params>
                <comment line="170">
                    The array representing the String is bigger than the new
                     String itself.  Perhaps this constructor is being called
                     in order to trim the baggage, so make a copy of the array.                    
                </comment>
                <comment line="176">
                    The array representing the String is the same
                     size as the String, so no point in making a copy.                    
                </comment>
                <declaration name="size" type="int" line="165"/>
                <declaration name="originalValue" type="char[]" line="166"/>
                <declaration name="v" type="char[]" line="167"/>
                <scope line="168">
                    <declaration name="off" type="int" line="172"/>
                </scope>
                <scope line="174"/>
            </method>
            <javadoc line="184">
                Allocates a new {@code String} so that it represents the sequence of
                  characters currently contained in the character array argument. The
                  contents of the character array are copied; subsequent modification of
                  the character array does not affect the newly created string.                
                <param>
                    valueThe initial value of the string                    
                </param>
            </javadoc>
            <method name="String" type="constructor" line="193">
                <params>
                    <param name="value" type="char"/>
                </params>
                <declaration name="size" type="int" line="194"/>
            </method>
            <javadoc line="200">
                Allocates a new {@code String} that contains characters from a subarray
                  of the character array argument. The {@code offset} argument is the
                  index of the first character of the subarray and the {@code count}argument specifies the length of the subarray. The contents of the
                  subarray are copied; subsequent modification of the character array does
                  not affect the newly created string.                
                <param>
                    valueArray that is the source of characters                    
                </param>
                <param>
                    offsetThe initial offset                    
                </param>
                <param>
                    countThe length                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} and {@code count} arguments index
                      characters outside the bounds of the {@code value} array                    
                </throws>
            </javadoc>
            <method name="String" type="constructor" line="221">
                <params>
                    <param name="value" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <comment line="229">
                    Note: offset or count might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <scope line="222"/>
                <scope line="225"/>
                <scope line="229"/>
            </method>
            <javadoc line="237">
                Allocates a new {@code String} that contains characters from a subarray
                  of the &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode code point&lt;/a&gt; array
                  argument.  The {@code offset} argument is the index of the first code
                  point of the subarray and the {@code count} argument specifies the
                  length of the subarray.  The contents of the subarray are converted to{@code char}s; subsequent modification of the {@code int} array does not
                  affect the newly created string.                
                <param>
                    codePointsArray that is the source of Unicode code points                    
                </param>
                <param>
                    offsetThe initial offset                    
                </param>
                <param>
                    countThe length                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf any invalid Unicode code point is found in {@codecodePoints}                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} and {@code count} arguments index
                      characters outside the bounds of the {@code codePoints} array                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="265">
                <params>
                    <param name="codePoints" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <comment line="273">
                    Note: offset or count might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <comment line="280">
                    Pass 1: Compute precise size of char[]                    
                </comment>
                <comment line="291">
                    Pass 2: Allocate and fill in char[]                    
                </comment>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="273"/>
                <declaration name="end" type="int" line="277"/>
                <declaration name="n" type="int" line="280"/>
                <scope line="281">
                    <declaration name="c" type="int" line="282"/>
                </scope>
                <declaration name="v" type="char[]" line="291"/>
                <scope line="293">
                    <declaration name="c" type="int" line="294"/>
                </scope>
            </method>
            <javadoc line="306">
                Allocates a new {@code String} constructed from a subarray of an array
                  of 8-bit integer values.
                  &lt;p&gt; The {@code offset} argument is the index of the first byte of the
                  subarray, and the {@code count} argument specifies the length of the
                  subarray.
                  &lt;p&gt; Each {@code byte} in the subarray is converted to a {@code char} as
                  specified in the method above.                
                <deprecated>
                    This method does not properly convert bytes into characters.
                      As of JDK&amp;nbsp;1.1, the preferred way to do this is via the{@code String} constructors that take a {@link java.nio.charset.Charset}, charset name, or that use the platform&apos;s
                      default charset.                    
                </deprecated>
                <param>
                    asciiThe bytes to be converted to characters                    
                </param>
                <param>
                    hibyteThe top 8 bits of each 16-bit Unicode code unit                    
                </param>
                <param>
                    offsetThe initial offset                    
                </param>
                <param>
                    countThe length                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} or {@code count} argument is invalid                    
                </throws>
                <see>
                    #String(byte[],int)                    
                </see>
                <see>
                    #String(byte[],int,int,java.lang.String)                    
                </see>
                <see>
                    #String(byte[],int,int,java.nio.charset.Charset)                    
                </see>
                <see>
                    #String(byte[],int,int)                    
                </see>
                <see>
                    #String(byte[],java.lang.String)                    
                </see>
                <see>
                    #String(byte[],java.nio.charset.Charset)                    
                </see>
                <see>
                    #String(byte[])                    
                </see>
            </javadoc>
            <method name="String" type="constructor" line="346">
                <params>
                    <param name="ascii" type="byte"/>
                    <param name="hibyte" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="value" type="char" line="348"/>
                <scope line="350">
                    <scope line="351"/>
                </scope>
                <scope line="354">
                    <scope line="356"/>
                </scope>
            </method>
            <javadoc line="365">
                Allocates a new {@code String} containing characters constructed from
                  an array of 8-bit integer values. Each character &lt;i&gt;c&lt;/i&gt;in the
                  resulting string is constructed from the corresponding component
                  &lt;i&gt;b&lt;/i&gt; in the byte array such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;b&gt;&lt;i&gt;c&lt;/i&gt;&lt;/b&gt; == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8)
                  | (&lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt; &amp;amp; 0xff))
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <deprecated>
                    This method does not properly convert bytes into
                      characters.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the{@code String} constructors that take a {@link java.nio.charset.Charset}, charset name, or that use the platform&apos;s
                      default charset.                    
                </deprecated>
                <param>
                    asciiThe bytes to be converted to characters                    
                </param>
                <param>
                    hibyteThe top 8 bits of each 16-bit Unicode code unit                    
                </param>
                <see>
                    #String(byte[],int,int,java.lang.String)                    
                </see>
                <see>
                    #String(byte[],int,int,java.nio.charset.Charset)                    
                </see>
                <see>
                    #String(byte[],int,int)                    
                </see>
                <see>
                    #String(byte[],java.lang.String)                    
                </see>
                <see>
                    #String(byte[],java.nio.charset.Charset)                    
                </see>
                <see>
                    #String(byte[])                    
                </see>
            </javadoc>
            <method name="String" type="constructor" line="396">
                <params>
                    <param name="ascii" type="byte"/>
                    <param name="hibyte" type="int"/>
                </params>
            </method>
            <method name="checkBounds" type="void" line="404">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="413">
                Constructs a new {@code String} by decoding the specified subarray of
                  bytes using the specified charset.  The length of the new {@code String}is a function of the charset, and hence may not be equal to the length
                  of the subarray.
                  &lt;p&gt; The behavior of this constructor when the given bytes are not valid
                  in the given charset is unspecified.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <param>
                    offsetThe index of the first byte to decode                    
                </param>
                <param>
                    lengthThe number of bytes to decode                    
                </param>
                <param>
                    charsetNameThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} and {@code length} arguments index
                      characters outside the bounds of the {@code bytes} array                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="448">
                <params>
                    <param name="bytes" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="charsetName" type="String"/>
                </params>
                <declaration name="v" type="char[]" line="452"/>
            </method>
            <javadoc line="458">
                Constructs a new {@code String} by decoding the specified subarray of
                  bytes using the specified {@linkplain java.nio.charset.Charset charset}.
                  The length of the new {@code String} is a function of the charset, and
                  hence may not be equal to the length of the subarray.
                  &lt;p&gt; This method always replaces malformed-input and unmappable-character
                  sequences with this charset&apos;s default replacement string.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <param>
                    offsetThe index of the first byte to decode                    
                </param>
                <param>
                    lengthThe number of bytes to decode                    
                </param>
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset charset} to be used to
                      decode the {@code bytes}                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} and {@code length} arguments index
                      characters outside the bounds of the {@code bytes} array                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="488">
                <params>
                    <param name="bytes" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="charset" type="Charset"/>
                </params>
                <declaration name="v" type="char[]" line="492"/>
            </method>
            <javadoc line="498">
                Constructs a new {@code String} by decoding the specified array of bytes
                  using the specified {@linkplain java.nio.charset.Charset charset}.  The
                  length of the new {@code String} is a function of the charset, and hence
                  may not be equal to the length of the byte array.
                  &lt;p&gt; The behavior of this constructor when the given bytes are not valid
                  in the given charset is unspecified.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <param>
                    charsetNameThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="523">
                <params>
                    <param name="bytes" type="byte"/>
                    <param name="charsetName" type="String"/>
                </params>
            </method>
            <javadoc line="527">
                Constructs a new {@code String} by decoding the specified array of
                  bytes using the specified {@linkplain java.nio.charset.Charset charset}.
                  The length of the new {@code String} is a function of the charset, and
                  hence may not be equal to the length of the byte array.
                  &lt;p&gt; This method always replaces malformed-input and unmappable-character
                  sequences with this charset&apos;s default replacement string.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset charset} to be used to
                      decode the {@code bytes}                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="547">
                <params>
                    <param name="bytes" type="byte"/>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <javadoc line="551">
                Constructs a new {@code String} by decoding the specified subarray of
                  bytes using the platform&apos;s default charset.  The length of the new{@code String} is a function of the charset, and hence may not be equal
                  to the length of the subarray.
                  &lt;p&gt; The behavior of this constructor when the given bytes are not valid
                  in the default charset is unspecified.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <param>
                    offsetThe index of the first byte to decode                    
                </param>
                <param>
                    lengthThe number of bytes to decode                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf the {@code offset} and the {@code length} arguments index
                      characters outside the bounds of the {@code bytes} array                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="577">
                <params>
                    <param name="bytes" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="v" type="char[]" line="579"/>
            </method>
            <javadoc line="585">
                Constructs a new {@code String} by decoding the specified array of bytes
                  using the platform&apos;s default charset.  The length of the new {@codeString} is a function of the charset, and hence may not be equal to the
                  length of the byte array.
                  &lt;p&gt; The behavior of this constructor when the given bytes are not valid
                  in the default charset is unspecified.  The {@link java.nio.charset.CharsetDecoder} class should be used when more control
                  over the decoding process is required.                
                <param>
                    bytesThe bytes to be decoded into characters                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="601">
                <params>
                    <param name="bytes" type="byte"/>
                </params>
            </method>
            <javadoc line="605">
                Allocates a new string that contains the sequence of characters
                  currently contained in the string buffer argument. The contents of the
                  string buffer are copied; subsequent modification of the string buffer
                  does not affect the newly created string.                
                <param>
                    bufferA {@code StringBuffer}                    
                </param>
            </javadoc>
            <method name="String" type="constructor" line="614">
                <params>
                    <param name="buffer" type="StringBuffer"/>
                </params>
                <declaration name="result" type="String" line="615"/>
            </method>
            <javadoc line="621">
                Allocates a new string that contains the sequence of characters
                  currently contained in the string builder argument. The contents of the
                  string builder are copied; subsequent modification of the string builder
                  does not affect the newly created string.
                  &lt;p&gt; This constructor is provided to ease migration to {@codeStringBuilder}. Obtaining a string from a string builder via the {@codetoString} method is likely to run faster and is generally preferred.                
                <param>
                    builderA {@code StringBuilder}                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="String" type="constructor" line="636">
                <params>
                    <param name="builder" type="StringBuilder"/>
                </params>
                <declaration name="result" type="String" line="637"/>
            </method>
            <method name="String" type="constructor" line="645">
                <params>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                    <param name="value" type="char"/>
                </params>
            </method>
            <javadoc line="651">
                Returns the length of this string.
                  The length is equal to the number of &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode
                  code units&lt;/a&gt; in the string.                
                <return>
                    the length of the sequence of characters represented by this
                      object.                    
                </return>
            </javadoc>
            <method name="length" type="int" line="659"/>
            <javadoc line="663">
                Returns &lt;tt&gt;true&lt;/tt&gt; if, and only if, {@link #length()} is &lt;tt&gt;0&lt;/tt&gt;.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if {@link #length()} is &lt;tt&gt;0&lt;/tt&gt;, otherwise
                      &lt;tt&gt;false&lt;/tt&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isEmpty" type="boolean" line="671"/>
            <javadoc line="675">
                Returns the &lt;code&gt;char&lt;/code&gt; value at the
                  specified index. An index ranges from &lt;code&gt;0&lt;/code&gt; to
                  &lt;code&gt;length() - 1&lt;/code&gt;. The first &lt;code&gt;char&lt;/code&gt; value of the sequence
                  is at index &lt;code&gt;0&lt;/code&gt;, the next at index &lt;code&gt;1&lt;/code&gt;,
                  and so on, as for array indexing.
                  &lt;p&gt;If the &lt;code&gt;char&lt;/code&gt; value specified by the index is a
                  &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate
                  value is returned.                
                <param>
                    index   the index of the &lt;code&gt;char&lt;/code&gt; value.                    
                </param>
                <return>
                    the &lt;code&gt;char&lt;/code&gt; value at the specified index of this string.
                      The first &lt;code&gt;char&lt;/code&gt; value is at index &lt;code&gt;0&lt;/code&gt;.                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
                      argument is negative or not less than the length of this
                      string.                    
                </exception>
            </javadoc>
            <method name="charAt" type="char" line="693">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="694"/>
            </method>
            <javadoc line="700">
                Returns the character (Unicode code point) at the specified
                  index. The index refers to &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units) and ranges from &lt;code&gt;0&lt;/code&gt; to{@link #length()}&lt;code&gt; - 1&lt;/code&gt;.
                  &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value specified at the given index
                  is in the high-surrogate range, the following index is less
                  than the length of this &lt;code&gt;String&lt;/code&gt;, and the
                  &lt;code&gt;char&lt;/code&gt; value at the following index is in the
                  low-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.                
                <param>
                    index the index to the &lt;code&gt;char&lt;/code&gt; values                    
                </param>
                <return>
                    the code point value of the character at the
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
                      argument is negative or not less than the length of this
                      string.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointAt" type="int" line="722">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="723"/>
            </method>
            <javadoc line="729">
                Returns the character (Unicode code point) before the specified
                  index. The index refers to &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units) and ranges from &lt;code&gt;1&lt;/code&gt; to {@link CharSequence#length() length}.
                  &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt;
                  is in the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
                  negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
                  2)&lt;/code&gt; is in the high-surrogate range, then the
                  supplementary code point value of the surrogate pair is
                  returned. If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;index -
                  1&lt;/code&gt; is an unpaired low-surrogate or a high-surrogate, the
                  surrogate value is returned.                
                <param>
                    index the index following the code point that should be returned                    
                </param>
                <return>
                    the Unicode code point value before the given index.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
                      argument is less than 1 or greater than the length
                      of this string.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointBefore" type="int" line="751">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="i" type="int" line="752"/>
                <scope line="753"/>
            </method>
            <javadoc line="759">
                Returns the number of Unicode code points in the specified text
                  range of this &lt;code&gt;String&lt;/code&gt;. The text range begins at the
                  specified &lt;code&gt;beginIndex&lt;/code&gt; and extends to the
                  &lt;code&gt;char&lt;/code&gt; at index &lt;code&gt;endIndex - 1&lt;/code&gt;. Thus the
                  length (in &lt;code&gt;char&lt;/code&gt;s) of the text range is
                  &lt;code&gt;endIndex-beginIndex&lt;/code&gt;. Unpaired surrogates within
                  the text range count as one code point each.                
                <param>
                    beginIndex the index to the first &lt;code&gt;char&lt;/code&gt; of
                      the text range.                    
                </param>
                <param>
                    endIndex the index after the last &lt;code&gt;char&lt;/code&gt; of
                      the text range.                    
                </param>
                <return>
                    the number of Unicode code points in the specified text
                      range                    
                </return>
                <exception>
                    IndexOutOfBoundsException if the
                      &lt;code&gt;beginIndex&lt;/code&gt; is negative, or &lt;code&gt;endIndex&lt;/code&gt;
                      is larger than the length of this &lt;code&gt;String&lt;/code&gt;, or
                      &lt;code&gt;beginIndex&lt;/code&gt; is larger than &lt;code&gt;endIndex&lt;/code&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointCount" type="int" line="780">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="781"/>
            </method>
            <javadoc line="787">
                Returns the index within this &lt;code&gt;String&lt;/code&gt; that is
                  offset from the given &lt;code&gt;index&lt;/code&gt; by
                  &lt;code&gt;codePointOffset&lt;/code&gt; code points. Unpaired surrogates
                  within the text range given by &lt;code&gt;index&lt;/code&gt; and
                  &lt;code&gt;codePointOffset&lt;/code&gt; count as one code point each.                
                <param>
                    index the index to be offset                    
                </param>
                <param>
                    codePointOffset the offset in code points                    
                </param>
                <return>
                    the index within this &lt;code&gt;String&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt;
                      is negative or larger then the length of this
                      &lt;code&gt;String&lt;/code&gt;, or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive
                      and the substring starting with &lt;code&gt;index&lt;/code&gt; has fewer
                      than &lt;code&gt;codePointOffset&lt;/code&gt; code points,
                      or if &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the substring
                      before &lt;code&gt;index&lt;/code&gt; has fewer than the absolute value
                      of &lt;code&gt;codePointOffset&lt;/code&gt; code points.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="offsetByCodePoints" type="int" line="807">
                <params>
                    <param name="index" type="int"/>
                    <param name="codePointOffset" type="int"/>
                </params>
                <scope line="808"/>
            </method>
            <javadoc line="815">
                Copy characters from this string into dst starting at dstBegin.
                  This method doesn&apos;t perform any range checking.                
            </javadoc>
            <method name="getChars" type="void" line="819">
                <params>
                    <param name="dst" type="char"/>
                    <param name="dstBegin" type="int"/>
                </params>
            </method>
            <javadoc line="823">
                Copies characters from this string into the destination character
                  array.
                  &lt;p&gt;
                  The first character to be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;;
                  the last character to be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;
                  (thus the total number of characters to be copied is
                  &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;). The characters are copied into the
                  subarray of &lt;code&gt;dst&lt;/code&gt; starting at index &lt;code&gt;dstBegin&lt;/code&gt;
                  and ending at index:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  dstbegin + (srcEnd-srcBegin) - 1
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    srcBegin   index of the first character in the string
                      to copy.                    
                </param>
                <param>
                    srcEnd     index after the last character in the string
                      to copy.                    
                </param>
                <param>
                    dst        the destination array.                    
                </param>
                <param>
                    dstBegin   the start offset in the destination array.                    
                </param>
                <exception>
                    IndexOutOfBoundsException If any of the following
                      is true:
                      &lt;ul&gt;&lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is negative.
                      &lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is greater than &lt;code&gt;srcEnd&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;srcEnd&lt;/code&gt; is greater than the length of this
                      string
                      &lt;li&gt;&lt;code&gt;dstBegin&lt;/code&gt; is negative
                      &lt;li&gt;&lt;code&gt;dstBegin+(srcEnd-srcBegin)&lt;/code&gt; is larger than
                      &lt;code&gt;dst.length&lt;/code&gt;&lt;/ul&gt;                    
                </exception>
            </javadoc>
            <method name="getChars" type="void" line="853">
                <params>
                    <param name="srcBegin" type="int"/>
                    <param name="srcEnd" type="int"/>
                    <param name="dst" type="char"/>
                    <param name="dstBegin" type="int"/>
                </params>
                <scope line="854"/>
                <scope line="857"/>
                <scope line="860"/>
            </method>
            <javadoc line="867">
                Copies characters from this string into the destination byte array. Each
                  byte receives the 8 low-order bits of the corresponding character. The
                  eight high-order bits of each character are not copied and do not
                  participate in the transfer in any way.
                  &lt;p&gt; The first character to be copied is at index {@code srcBegin}; the
                  last character to be copied is at index {@code srcEnd-1}.  The total
                  number of characters to be copied is {@code srcEnd-srcBegin}. The
                  characters, converted to bytes, are copied into the subarray of {@codedst} starting at index {@code dstBegin} and ending at index:
                  &lt;blockquote&gt;&lt;pre&gt;
                  dstbegin + (srcEnd-srcBegin) - 1
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <deprecated>
                    This method does not properly convert characters into
                      bytes.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the{@link #getBytes()} method, which uses the platform&apos;s default charset.                    
                </deprecated>
                <param>
                    srcBeginIndex of the first character in the string to copy                    
                </param>
                <param>
                    srcEndIndex after the last character in the string to copy                    
                </param>
                <param>
                    dstThe destination array                    
                </param>
                <param>
                    dstBeginThe start offset in the destination array                    
                </param>
                <throws>
                    IndexOutOfBoundsExceptionIf any of the following is true:
                      &lt;ul&gt;
                      &lt;li&gt; {@code srcBegin} is negative
                      &lt;li&gt; {@code srcBegin} is greater than {@code srcEnd}&lt;li&gt; {@code srcEnd} is greater than the length of this String
                      &lt;li&gt; {@code dstBegin} is negative
                      &lt;li&gt; {@code dstBegin+(srcEnd-srcBegin)} is larger than {@codedst.length}&lt;/ul&gt;                    
                </throws>
            </javadoc>
            <method name="getBytes" type="void" line="911">
                <params>
                    <param name="srcBegin" type="int"/>
                    <param name="srcEnd" type="int"/>
                    <param name="dst" type="byte"/>
                    <param name="dstBegin" type="int"/>
                </params>
                <comment line="925">
                                        
                </comment>
                <scope line="912"/>
                <scope line="915"/>
                <scope line="918"/>
                <declaration name="j" type="int" line="921"/>
                <declaration name="n" type="int" line="922"/>
                <declaration name="i" type="int" line="923"/>
                <declaration name="val" type="char[]" line="924"/>
                <scope line="926"/>
            </method>
            <javadoc line="931">
                Encodes this {@code String} into a sequence of bytes using the named
                  charset, storing the result into a new byte array.
                  &lt;p&gt; The behavior of this method when this string cannot be encoded in
                  the given charset is unspecified.  The {@link java.nio.charset.CharsetEncoder} class should be used when more control
                  over the encoding process is required.                
                <param>
                    charsetNameThe name of a supported {@linkplain java.nio.charset.Charsetcharset}                    
                </param>
                <return>
                    The resultant byte array                    
                </return>
                <throws>
                    UnsupportedEncodingExceptionIf the named charset is not supported                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getBytes" type="byte[]" line="953">
                <params>
                    <param name="charsetName" type="String"/>
                </params>
            </method>
            <javadoc line="958">
                Encodes this {@code String} into a sequence of bytes using the given{@linkplain java.nio.charset.Charset charset}, storing the result into a
                  new byte array.
                  &lt;p&gt; This method always replaces malformed-input and unmappable-character
                  sequences with this charset&apos;s default replacement byte array.  The{@link java.nio.charset.CharsetEncoder} class should be used when more
                  control over the encoding process is required.                
                <param>
                    charsetThe {@linkplain java.nio.charset.Charset} to be used to encode
                      the {@code String}                    
                </param>
                <return>
                    The resultant byte array                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBytes" type="byte[]" line="976">
                <params>
                    <param name="charset" type="Charset"/>
                </params>
            </method>
            <javadoc line="981">
                Encodes this {@code String} into a sequence of bytes using the
                  platform&apos;s default charset, storing the result into a new byte array.
                  &lt;p&gt; The behavior of this method when this string cannot be encoded in
                  the default charset is unspecified.  The {@link java.nio.charset.CharsetEncoder} class should be used when more control
                  over the encoding process is required.                
                <return>
                    The resultant byte array                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getBytes" type="byte[]" line="994"/>
            <javadoc line="998">
                Compares this string to the specified object.  The result is {@codetrue} if and only if the argument is not {@code null} and is a {@codeString} object that represents the same sequence of characters as this
                  object.                
                <param>
                    anObjectThe object to compare this {@code String} against                    
                </param>
                <return>
                    {@code true} if the given object represents a {@code String}equivalent to this string, {@code false} otherwise                    
                </return>
                <see>
                    #compareTo(String)                    
                </see>
                <see>
                    #equalsIgnoreCase(String)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="1013">
                <params>
                    <param name="anObject" type="Object"/>
                </params>
                <scope line="1014"/>
                <scope line="1017">
                    <declaration name="anotherString" type="String" line="1018"/>
                    <declaration name="n" type="int" line="1019"/>
                    <scope line="1020">
                        <declaration name="v1" type="char" line="1021"/>
                        <declaration name="v2" type="char" line="1022"/>
                        <declaration name="i" type="int" line="1023"/>
                        <declaration name="j" type="int" line="1024"/>
                        <scope line="1025"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1035">
                Compares this string to the specified {@code StringBuffer}.  The result
                  is {@code true} if and only if this {@code String} represents the same
                  sequence of characters as the specified {@code StringBuffer}.                
                <param>
                    sbThe {@code StringBuffer} to compare this {@code String} against                    
                </param>
                <return>
                    {@code true} if this {@code String} represents the same
                      sequence of characters as the specified {@code StringBuffer},{@code false} otherwise                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="contentEquals" type="boolean" line="1049">
                <params>
                    <param name="sb" type="StringBuffer"/>
                </params>
                <scope line="1050"/>
            </method>
            <javadoc line="1055">
                Compares this string to the specified {@code CharSequence}.  The result
                  is {@code true} if and only if this {@code String} represents the same
                  sequence of char values as the specified sequence.                
                <param>
                    csThe sequence to compare this {@code String} against                    
                </param>
                <return>
                    {@code true} if this {@code String} represents the same
                      sequence of char values as the specified sequence, {@codefalse} otherwise                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="contentEquals" type="boolean" line="1069">
                <params>
                    <param name="cs" type="CharSequence"/>
                </params>
                <comment line="1073">
                    Argument is a StringBuffer, StringBuilder                    
                </comment>
                <comment line="1086">
                    Argument is a String                    
                </comment>
                <comment line="1089">
                    Argument is a generic CharSequence                    
                </comment>
                <scope line="1073">
                    <declaration name="v1" type="char" line="1074"/>
                    <declaration name="v2" type="char" line="1075"/>
                    <declaration name="i" type="int" line="1076"/>
                    <declaration name="j" type="int" line="1077"/>
                    <declaration name="n" type="int" line="1078"/>
                    <scope line="1079"/>
                </scope>
                <declaration name="v1" type="char" line="1089"/>
                <declaration name="i" type="int" line="1090"/>
                <declaration name="j" type="int" line="1091"/>
                <declaration name="n" type="int" line="1092"/>
                <scope line="1093"/>
            </method>
            <javadoc line="1100">
                Compares this {@code String} to another {@code String}, ignoring case
                  considerations.  Two strings are considered equal ignoring case if they
                  are of the same length and corresponding characters in the two strings
                  are equal ignoring case.
                  &lt;p&gt; Two characters {@code c1} and {@code c2} are considered the same
                  ignoring case if at least one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt; The two characters are the same (as compared by the{@code ==} operator)
                  &lt;li&gt; Applying the method {@link java.lang.Character#toUpperCase(char)} to each character
                  produces the same result
                  &lt;li&gt; Applying the method {@link java.lang.Character#toLowerCase(char)} to each character
                  produces the same result
                  &lt;/ul&gt;                
                <param>
                    anotherStringThe {@code String} to compare this {@code String} against                    
                </param>
                <return>
                    {@code true} if the argument is not {@code null} and it
                      represents an equivalent {@code String} ignoring case; {@codefalse} otherwise                    
                </return>
                <see>
                    #equals(Object)                    
                </see>
            </javadoc>
            <method name="equalsIgnoreCase" type="boolean" line="1128">
                <params>
                    <param name="anotherString" type="String"/>
                </params>
            </method>
            <javadoc line="1134">
                Compares two strings lexicographically.
                  The comparison is based on the Unicode value of each character in
                  the strings. The character sequence represented by this
                  &lt;code&gt;String&lt;/code&gt; object is compared lexicographically to the
                  character sequence represented by the argument string. The result is
                  a negative integer if this &lt;code&gt;String&lt;/code&gt; object
                  lexicographically precedes the argument string. The result is a
                  positive integer if this &lt;code&gt;String&lt;/code&gt; object lexicographically
                  follows the argument string. The result is zero if the strings
                  are equal; &lt;code&gt;compareTo&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; exactly when
                  the {@link #equals(Object)} method would return &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  This is the definition of lexicographic ordering. If two strings are
                  different, then either they have different characters at some index
                  that is a valid index for both strings, or their lengths are different,
                  or both. If they have different characters at one or more index
                  positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string
                  whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as
                  determined by using the &amp;lt; operator, lexicographically precedes the
                  other string. In this case, &lt;code&gt;compareTo&lt;/code&gt; returns the
                  difference of the two character values at position &lt;code&gt;k&lt;/code&gt; in
                  the two string -- that is, the value:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.charAt(k)-anotherString.charAt(k)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If there is no index position at which they differ, then the shorter
                  string lexicographically precedes the longer string. In this case,
                  &lt;code&gt;compareTo&lt;/code&gt; returns the difference of the lengths of the
                  strings -- that is, the value:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.length()-anotherString.length()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    anotherString   the &lt;code&gt;String&lt;/code&gt; to be compared.                    
                </param>
                <return>
                    the value &lt;code&gt;0&lt;/code&gt; if the argument string is equal to
                      this string; a value less than &lt;code&gt;0&lt;/code&gt; if this string
                      is lexicographically less than the string argument; and a
                      value greater than &lt;code&gt;0&lt;/code&gt; if this string is
                      lexicographically greater than the string argument.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="1175">
                <params>
                    <param name="anotherString" type="String"/>
                </params>
                <declaration name="len1" type="int" line="1176"/>
                <declaration name="len2" type="int" line="1177"/>
                <declaration name="n" type="int" line="1178"/>
                <declaration name="v1" type="char" line="1179"/>
                <declaration name="v2" type="char" line="1180"/>
                <declaration name="i" type="int" line="1181"/>
                <declaration name="j" type="int" line="1182"/>
                <scope line="1184">
                    <declaration name="k" type="int" line="1185"/>
                    <declaration name="lim" type="int" line="1186"/>
                    <scope line="1187">
                        <declaration name="c1" type="char" line="1188"/>
                        <declaration name="c2" type="char" line="1189"/>
                        <scope line="1190"/>
                    </scope>
                </scope>
                <scope line="1195">
                    <scope line="1196">
                        <declaration name="c1" type="char" line="1197"/>
                        <declaration name="c2" type="char" line="1198"/>
                        <scope line="1199"/>
                    </scope>
                </scope>
            </method>
            <declaration name="CASE_INSENSITIVE_ORDER" type="Comparator&lt;String&gt;" line="1207"/>
            <javadoc line="1207">
                A Comparator that orders &lt;code&gt;String&lt;/code&gt; objects as by
                  &lt;code&gt;compareToIgnoreCase&lt;/code&gt;. This comparator is serializable.
                  &lt;p&gt;
                  Note that this Comparator does &lt;em&gt;not&lt;/em&gt; take locale into account,
                  and will result in an unsatisfactory ordering for certain locales.
                  The java.text package provides &lt;em&gt;Collators&lt;/em&gt; to allow
                  locale-sensitive ordering.                
                <see>
                    java.text.Collator#compare(String,String)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="CaseInsensitiveComparator" line="1221">
                <comment line="1224">
                    use serialVersionUID from JDK 1.2.2 for interoperability                    
                </comment>
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <implements interface="java.io.Serializable"/>
                <declaration name="serialVersionUID" type="long" line="1224"/>
                <method name="compare" type="int" line="1226">
                    <params>
                        <param name="s1" type="String"/>
                        <param name="s2" type="String"/>
                    </params>
                    <comment line="1241">
                        No overflow because of numeric promotion                        
                    </comment>
                    <declaration name="n1" type="int" line="1227"/>
                    <declaration name="n2" type="int" line="1228"/>
                    <declaration name="min" type="int" line="1229"/>
                    <scope line="1230">
                        <declaration name="c1" type="char" line="1231"/>
                        <declaration name="c2" type="char" line="1232"/>
                        <scope line="1233">
                            <scope line="1236">
                                <scope line="1239"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="1250">
                Compares two strings lexicographically, ignoring case
                  differences. This method returns an integer whose sign is that of
                  calling &lt;code&gt;compareTo&lt;/code&gt; with normalized versions of the strings
                  where case differences have been eliminated by calling
                  &lt;code&gt;Character.toLowerCase(Character.toUpperCase(character))&lt;/code&gt; on
                  each character.
                  &lt;p&gt;
                  Note that this method does &lt;em&gt;not&lt;/em&gt; take locale into account,
                  and will result in an unsatisfactory ordering for certain locales.
                  The java.text package provides &lt;em&gt;collators&lt;/em&gt; to allow
                  locale-sensitive ordering.                
                <param>
                    str   the &lt;code&gt;String&lt;/code&gt; to be compared.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as the
                      specified String is greater than, equal to, or less
                      than this String, ignoring case considerations.                    
                </return>
                <see>
                    java.text.Collator#compare(String,String)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareToIgnoreCase" type="int" line="1270">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1274">
                Tests if two string regions are equal.
                  &lt;p&gt;
                  A substring of this &lt;tt&gt;String&lt;/tt&gt; object is compared to a substring
                  of the argument other. The result is true if these substrings
                  represent identical character sequences. The substring of this
                  &lt;tt&gt;String&lt;/tt&gt; object to be compared begins at index &lt;tt&gt;toffset&lt;/tt&gt;
                  and has length &lt;tt&gt;len&lt;/tt&gt;. The substring of other to be compared
                  begins at index &lt;tt&gt;ooffset&lt;/tt&gt; and has length &lt;tt&gt;len&lt;/tt&gt;. The
                  result is &lt;tt&gt;false&lt;/tt&gt; if and only if at least one of the following
                  is true:
                  &lt;ul&gt;&lt;li&gt;&lt;tt&gt;toffset&lt;/tt&gt; is negative.
                  &lt;li&gt;&lt;tt&gt;ooffset&lt;/tt&gt; is negative.
                  &lt;li&gt;&lt;tt&gt;toffset+len&lt;/tt&gt; is greater than the length of this
                  &lt;tt&gt;String&lt;/tt&gt; object.
                  &lt;li&gt;&lt;tt&gt;ooffset+len&lt;/tt&gt; is greater than the length of the other
                  argument.
                  &lt;li&gt;There is some nonnegative integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt;
                  such that:
                  &lt;tt&gt;this.charAt(toffset+&lt;i&gt;k&lt;/i&gt;)&amp;nbsp;!=&amp;nbsp;other.charAt(ooffset+&lt;i&gt;k&lt;/i&gt;)&lt;/tt&gt;
                  &lt;/ul&gt;                
                <param>
                    toffset   the starting offset of the subregion in this string.                    
                </param>
                <param>
                    other     the string argument.                    
                </param>
                <param>
                    ooffset   the starting offset of the subregion in the string
                      argument.                    
                </param>
                <param>
                    len       the number of characters to compare.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
                      exactly matches the specified subregion of the string argument;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="regionMatches" type="boolean" line="1306">
                <params>
                    <param name="toffset" type="int"/>
                    <param name="other" type="String"/>
                    <param name="ooffset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="1312">
                    Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <declaration name="ta" type="char" line="1307"/>
                <declaration name="to" type="int" line="1308"/>
                <declaration name="pa" type="char" line="1309"/>
                <declaration name="po" type="int" line="1310"/>
                <scope line="1313"/>
                <scope line="1316">
                    <scope line="1317"/>
                </scope>
            </method>
            <javadoc line="1324">
                Tests if two string regions are equal.
                  &lt;p&gt;
                  A substring of this &lt;tt&gt;String&lt;/tt&gt; object is compared to a substring
                  of the argument &lt;tt&gt;other&lt;/tt&gt;. The result is &lt;tt&gt;true&lt;/tt&gt; if these
                  substrings represent character sequences that are the same, ignoring
                  case if and only if &lt;tt&gt;ignoreCase&lt;/tt&gt; is true. The substring of
                  this &lt;tt&gt;String&lt;/tt&gt; object to be compared begins at index
                  &lt;tt&gt;toffset&lt;/tt&gt; and has length &lt;tt&gt;len&lt;/tt&gt;. The substring of
                  &lt;tt&gt;other&lt;/tt&gt; to be compared begins at index &lt;tt&gt;ooffset&lt;/tt&gt; and
                  has length &lt;tt&gt;len&lt;/tt&gt;. The result is &lt;tt&gt;false&lt;/tt&gt; if and only if
                  at least one of the following is true:
                  &lt;ul&gt;&lt;li&gt;&lt;tt&gt;toffset&lt;/tt&gt; is negative.
                  &lt;li&gt;&lt;tt&gt;ooffset&lt;/tt&gt; is negative.
                  &lt;li&gt;&lt;tt&gt;toffset+len&lt;/tt&gt; is greater than the length of this
                  &lt;tt&gt;String&lt;/tt&gt; object.
                  &lt;li&gt;&lt;tt&gt;ooffset+len&lt;/tt&gt; is greater than the length of the other
                  argument.
                  &lt;li&gt;&lt;tt&gt;ignoreCase&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt; and there is some nonnegative
                  integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.charAt(toffset+k) != other.charAt(ooffset+k)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;li&gt;&lt;tt&gt;ignoreCase&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; and there is some nonnegative
                  integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Character.toLowerCase(this.charAt(toffset+k)) !=
                  Character.toLowerCase(other.charAt(ooffset+k))
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  and:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Character.toUpperCase(this.charAt(toffset+k)) !=
                  Character.toUpperCase(other.charAt(ooffset+k))
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/ul&gt;                
                <param>
                    ignoreCase   if &lt;code&gt;true&lt;/code&gt;, ignore case when comparing
                      characters.                    
                </param>
                <param>
                    toffset      the starting offset of the subregion in this
                      string.                    
                </param>
                <param>
                    other        the string argument.                    
                </param>
                <param>
                    ooffset      the starting offset of the subregion in the string
                      argument.                    
                </param>
                <param>
                    len          the number of characters to compare.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
                      matches the specified subregion of the string argument;
                      &lt;code&gt;false&lt;/code&gt; otherwise. Whether the matching is exact
                      or case insensitive depends on the &lt;code&gt;ignoreCase&lt;/code&gt;
                      argument.                    
                </return>
            </javadoc>
            <method name="regionMatches" type="boolean" line="1375">
                <params>
                    <param name="ignoreCase" type="boolean"/>
                    <param name="toffset" type="int"/>
                    <param name="other" type="String"/>
                    <param name="ooffset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="1381">
                    Note: toffset, ooffset, or len might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <comment line="1393">
                    If characters don&apos;t match but case may be ignored,
                     try converting both characters to uppercase.
                     If the results match, then the comparison scan should
                     continue.                    
                </comment>
                <comment line="1402">
                    Unfortunately, conversion to uppercase does not work properly
                     for the Georgian alphabet, which has strange rules about case
                     conversion.  So we need to make one last check before
                     exiting.                    
                </comment>
                <declaration name="ta" type="char" line="1376"/>
                <declaration name="to" type="int" line="1377"/>
                <declaration name="pa" type="char" line="1378"/>
                <declaration name="po" type="int" line="1379"/>
                <scope line="1382"/>
                <scope line="1385">
                    <declaration name="c1" type="char" line="1386"/>
                    <declaration name="c2" type="char" line="1387"/>
                    <scope line="1388"/>
                    <scope line="1391">
                        <declaration name="u1" type="char" line="1396"/>
                        <declaration name="u2" type="char" line="1397"/>
                        <scope line="1398"/>
                        <scope line="1405"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1414">
                Tests if the substring of this string beginning at the
                  specified index starts with the specified prefix.                
                <param>
                    prefix    the prefix.                    
                </param>
                <param>
                    toffset   where to begin looking in this string.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
                      argument is a prefix of the substring of this object starting
                      at index &lt;code&gt;toffset&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.
                      The result is &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;toffset&lt;/code&gt; is
                      negative or greater than the length of this
                      &lt;code&gt;String&lt;/code&gt; object; otherwise the result is the same
                      as the result of the expression
                      &lt;pre&gt;
                      this.substring(toffset).startsWith(prefix)
                      &lt;/pre&gt;                    
                </return>
            </javadoc>
            <method name="startsWith" type="boolean" line="1431">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="toffset" type="int"/>
                </params>
                <comment line="1438">
                    Note: toffset might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <declaration name="ta" type="char" line="1432"/>
                <declaration name="to" type="int" line="1433"/>
                <declaration name="pa" type="char" line="1434"/>
                <declaration name="po" type="int" line="1435"/>
                <declaration name="pc" type="int" line="1436"/>
                <scope line="1438"/>
                <scope line="1441">
                    <scope line="1442"/>
                </scope>
            </method>
            <javadoc line="1449">
                Tests if this string starts with the specified prefix.                
                <param>
                    prefix   the prefix.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
                      argument is a prefix of the character sequence represented by
                      this string; &lt;code&gt;false&lt;/code&gt; otherwise.
                      Note also that &lt;code&gt;true&lt;/code&gt; will be returned if the
                      argument is an empty string or is equal to this
                      &lt;code&gt;String&lt;/code&gt; object as determined by the{@link #equals(Object)} method.                    
                </return>
                <since>
                    1. 0                    
                </since>
            </javadoc>
            <method name="startsWith" type="boolean" line="1462">
                <params>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="1466">
                Tests if this string ends with the specified suffix.                
                <param>
                    suffix   the suffix.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
                      argument is a suffix of the character sequence represented by
                      this object; &lt;code&gt;false&lt;/code&gt; otherwise. Note that the
                      result will be &lt;code&gt;true&lt;/code&gt; if the argument is the
                      empty string or is equal to this &lt;code&gt;String&lt;/code&gt; object
                      as determined by the {@link #equals(Object)} method.                    
                </return>
            </javadoc>
            <method name="endsWith" type="boolean" line="1477">
                <params>
                    <param name="suffix" type="String"/>
                </params>
            </method>
            <javadoc line="1481">
                Returns a hash code for this string. The hash code for a
                  &lt;code&gt;String&lt;/code&gt; object is computed as
                  &lt;blockquote&gt;&lt;pre&gt;
                  s[0]31^(n-1) + s[1]31^(n-2) + ... + s[n-1]
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  using &lt;code&gt;int&lt;/code&gt; arithmetic, where &lt;code&gt;s[i]&lt;/code&gt; is the
                  &lt;i&gt;i&lt;/i&gt;th character of the string, &lt;code&gt;n&lt;/code&gt; is the length of
                  the string, and &lt;code&gt;^&lt;/code&gt; indicates exponentiation.
                  (The hash value of the empty string is zero.)                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1494">
                <declaration name="h" type="int" line="1495"/>
                <scope line="1496">
                    <declaration name="off" type="int" line="1497"/>
                    <declaration name="val" type="char" line="1498"/>
                    <declaration name="len" type="int" line="1499"/>
                    <scope line="1501"/>
                </scope>
            </method>
            <javadoc line="1509">
                Returns the index within this string of the first occurrence of
                  the specified character. If a character with value
                  &lt;code&gt;ch&lt;/code&gt; occurs in the character sequence represented by
                  this &lt;code&gt;String&lt;/code&gt; object, then the index (in Unicode
                  code units) of the first such occurrence is returned. For
                  values of &lt;code&gt;ch&lt;/code&gt; in the range from 0 to 0xFFFF
                  (inclusive), this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
                  smallest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. In either case, if no such character occurs in this
                  string, then &lt;code&gt;-1&lt;/code&gt; is returned.                
                <param>
                    ch   a character (Unicode code point).                    
                </param>
                <return>
                    the index of the first occurrence of the character in the
                      character sequence represented by this object, or
                      &lt;code&gt;-1&lt;/code&gt; if the character does not occur.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="1533">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="1537">
                Returns the index within this string of the first occurrence of the
                  specified character, starting the search at the specified index.
                  &lt;p&gt;
                  If a character with value &lt;code&gt;ch&lt;/code&gt; occurs in the
                  character sequence represented by this &lt;code&gt;String&lt;/code&gt;
                  object at an index no smaller than &lt;code&gt;fromIndex&lt;/code&gt;, then
                  the index of the first such occurrence is returned. For values
                  of &lt;code&gt;ch&lt;/code&gt; in the range from 0 to 0xFFFF (inclusive),
                  this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
                  smallest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. In either case, if no such character occurs in this
                  string at or after position &lt;code&gt;fromIndex&lt;/code&gt;, then
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt;
                  There is no restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it
                  is negative, it has the same effect as if it were zero: this entire
                  string may be searched. If it is greater than the length of this
                  string, it has the same effect as if it were equal to the length of
                  this string: &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt;All indices are specified in &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units).                
                <param>
                    ch          a character (Unicode code point).                    
                </param>
                <param>
                    fromIndex   the index to start the search from.                    
                </param>
                <return>
                    the index of the first occurrence of the character in the
                      character sequence represented by this object that is greater
                      than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
                      if the character does not occur.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="1576">
                <params>
                    <param name="ch" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="1581">
                    Note: fromIndex might be near -1&gt;&gt;&gt;1.                    
                </comment>
                <comment line="1586">
                    handle most cases here (ch is a BMP code point or a
                     negative value (invalid code point))                    
                </comment>
                <scope line="1577"/>
                <scope line="1579"/>
                <scope line="1584">
                    <declaration name="value" type="char[]" line="1587"/>
                    <declaration name="offset" type="int" line="1588"/>
                    <declaration name="max" type="int" line="1589"/>
                    <scope line="1590">
                        <scope line="1591"/>
                    </scope>
                </scope>
                <scope line="1596"/>
            </method>
            <javadoc line="1601">
                Handles (rare) calls of indexOf with a supplementary character.                
            </javadoc>
            <method name="indexOfSupplementary" type="int" line="1604">
                <params>
                    <param name="ch" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <scope line="1605">
                    <declaration name="value" type="char[]" line="1606"/>
                    <declaration name="offset" type="int" line="1607"/>
                    <declaration name="hi" type="char" line="1608"/>
                    <declaration name="lo" type="char" line="1609"/>
                    <declaration name="max" type="int" line="1610"/>
                    <scope line="1611">
                        <scope line="1612"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1620">
                Returns the index within this string of the last occurrence of
                  the specified character. For values of &lt;code&gt;ch&lt;/code&gt; in the
                  range from 0 to 0xFFFF (inclusive), the index (in Unicode code
                  units) returned is the largest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
                  largest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true.  In either case, if no such character occurs in this
                  string, then &lt;code&gt;-1&lt;/code&gt; is returned.  The
                  &lt;code&gt;String&lt;/code&gt; is searched backwards starting at the last
                  character.                
                <param>
                    ch   a character (Unicode code point).                    
                </param>
                <return>
                    the index of the last occurrence of the character in the
                      character sequence represented by this object, or
                      &lt;code&gt;-1&lt;/code&gt; if the character does not occur.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1643">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="1647">
                Returns the index within this string of the last occurrence of
                  the specified character, searching backward starting at the
                  specified index. For values of &lt;code&gt;ch&lt;/code&gt; in the range
                  from 0 to 0xFFFF (inclusive), the index returned is the largest
                  value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
                  largest value &lt;i&gt;k&lt;/i&gt; such that:
                  &lt;blockquote&gt;&lt;pre&gt;
                  (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  is true. In either case, if no such character occurs in this
                  string at or before position &lt;code&gt;fromIndex&lt;/code&gt;, then
                  &lt;code&gt;-1&lt;/code&gt; is returned.
                  &lt;p&gt;All indices are specified in &lt;code&gt;char&lt;/code&gt; values
                  (Unicode code units).                
                <param>
                    ch          a character (Unicode code point).                    
                </param>
                <param>
                    fromIndex   the index to start the search from. There is no
                      restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it is
                      greater than or equal to the length of this string, it has
                      the same effect as if it were equal to one less than the
                      length of this string: this entire string may be searched.
                      If it is negative, it has the same effect as if it were -1:
                      -1 is returned.                    
                </param>
                <return>
                    the index of the last occurrence of the character in the
                      character sequence represented by this object that is less
                      than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
                      if the character does not occur before that point.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1681">
                <params>
                    <param name="ch" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="1684">
                    handle most cases here (ch is a BMP code point or a
                     negative value (invalid code point))                    
                </comment>
                <scope line="1682">
                    <declaration name="value" type="char[]" line="1685"/>
                    <declaration name="offset" type="int" line="1686"/>
                    <declaration name="i" type="int" line="1687"/>
                    <scope line="1688">
                        <scope line="1689"/>
                    </scope>
                </scope>
                <scope line="1694"/>
            </method>
            <javadoc line="1699">
                Handles (rare) calls of lastIndexOf with a supplementary character.                
            </javadoc>
            <method name="lastIndexOfSupplementary" type="int" line="1702">
                <params>
                    <param name="ch" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <scope line="1703">
                    <declaration name="value" type="char[]" line="1704"/>
                    <declaration name="offset" type="int" line="1705"/>
                    <declaration name="hi" type="char" line="1706"/>
                    <declaration name="lo" type="char" line="1707"/>
                    <declaration name="i" type="int" line="1708"/>
                    <scope line="1709">
                        <scope line="1710"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1718">
                Returns the index within this string of the first occurrence of the
                  specified substring.
                  &lt;p&gt;The returned index is the smallest value &lt;i&gt;k&lt;/i&gt; for which:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned.                
                <param>
                    str   the substring to search for.                    
                </param>
                <return>
                    the index of the first occurrence of the specified substring,
                      or {@code -1} if there is no such occurrence.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="1732">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1736">
                Returns the index within this string of the first occurrence of the
                  specified substring, starting at the specified index.
                  &lt;p&gt;The returned index is the smallest value &lt;i&gt;k&lt;/i&gt; for which:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex &amp;&amp; this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned.                
                <param>
                    str         the substring to search for.                    
                </param>
                <param>
                    fromIndex   the index from which to start the search.                    
                </param>
                <return>
                    the index of the first occurrence of the specified substring,
                      starting at the specified index,
                      or {@code -1} if there is no such occurrence.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="1752">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1757">
                Code shared by String and StringBuffer to do searches. The
                  source is the character array being searched, and the target
                  is the string being searched for.                
                <param>
                    source       the characters being searched.                    
                </param>
                <param>
                    sourceOffset offset of the source string.                    
                </param>
                <param>
                    sourceCount  count of the source string.                    
                </param>
                <param>
                    target       the characters being searched for.                    
                </param>
                <param>
                    targetOffset offset of the target string.                    
                </param>
                <param>
                    targetCount  count of the target string.                    
                </param>
                <param>
                    fromIndex    the index to begin searching from.                    
                </param>
            </javadoc>
            <method name="indexOf" type="int" line="1772">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="sourceOffset" type="int"/>
                    <param name="sourceCount" type="int"/>
                    <param name="target" type="char[]"/>
                    <param name="targetOffset" type="int"/>
                    <param name="targetCount" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="1788">
                                        
                </comment>
                <comment line="1793">
                                        
                </comment>
                <comment line="1801">
                                        
                </comment>
                <scope line="1773"/>
                <scope line="1776"/>
                <scope line="1779"/>
                <declaration name="first" type="char" line="1783"/>
                <declaration name="max" type="int" line="1784"/>
                <scope line="1786">
                    <scope line="1788"/>
                    <scope line="1793">
                        <declaration name="j" type="int" line="1794"/>
                        <declaration name="end" type="int" line="1795"/>
                        <scope line="1799"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1808">
                Returns the index within this string of the last occurrence of the
                  specified substring.  The last occurrence of the empty string &quot;&quot;
                  is considered to occur at the index value {@code this.length()}.
                  &lt;p&gt;The returned index is the largest value &lt;i&gt;k&lt;/i&gt; for which:
                  &lt;blockquote&gt;&lt;pre&gt;
                  this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned.                
                <param>
                    str   the substring to search for.                    
                </param>
                <return>
                    the index of the last occurrence of the specified substring,
                      or {@code -1} if there is no such occurrence.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1823">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1827">
                Returns the index within this string of the last occurrence of the
                  specified substring, searching backward starting at the specified index.
                  &lt;p&gt;The returned index is the largest value &lt;i&gt;k&lt;/i&gt; for which:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex &amp;&amp; this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If no such value of &lt;i&gt;k&lt;/i&gt; exists, then {@code -1} is returned.                
                <param>
                    str         the substring to search for.                    
                </param>
                <param>
                    fromIndex   the index to start the search from.                    
                </param>
                <return>
                    the index of the last occurrence of the specified substring,
                      searching backward from the specified index,
                      or {@code -1} if there is no such occurrence.                    
                </return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1843">
                <params>
                    <param name="str" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1848">
                Code shared by String and StringBuffer to do searches. The
                  source is the character array being searched, and the target
                  is the string being searched for.                
                <param>
                    source       the characters being searched.                    
                </param>
                <param>
                    sourceOffset offset of the source string.                    
                </param>
                <param>
                    sourceCount  count of the source string.                    
                </param>
                <param>
                    target       the characters being searched for.                    
                </param>
                <param>
                    targetOffset offset of the target string.                    
                </param>
                <param>
                    targetCount  count of the target string.                    
                </param>
                <param>
                    fromIndex    the index to begin searching from.                    
                </param>
            </javadoc>
            <method name="lastIndexOf" type="int" line="1863">
                <params>
                    <param name="source" type="char[]"/>
                    <param name="sourceOffset" type="int"/>
                    <param name="sourceCount" type="int"/>
                    <param name="target" type="char[]"/>
                    <param name="targetOffset" type="int"/>
                    <param name="targetCount" type="int"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <comment line="1865">
                    Check arguments; return immediately where possible. For
                     consistency, don&apos;t check for null str.                    
                </comment>
                <comment line="1876">
                                        
                </comment>
                <declaration name="rightIndex" type="int" line="1868"/>
                <scope line="1869"/>
                <scope line="1872"/>
                <scope line="1876"/>
                <declaration name="strLastIndex" type="int" line="1880"/>
                <declaration name="strLastChar" type="char" line="1881"/>
                <declaration name="min" type="int" line="1882"/>
                <declaration name="i" type="int" line="1883"/>
                <scope line="1886">
                    <scope line="1887"/>
                    <scope line="1890"/>
                    <declaration name="j" type="int" line="1893"/>
                    <declaration name="start" type="int" line="1894"/>
                    <declaration name="k" type="int" line="1895"/>
                    <scope line="1897">
                        <scope line="1898"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1907">
                Returns a new string that is a substring of this string. The
                  substring begins with the character at the specified index and
                  extends to the end of this string. &lt;p&gt;
                  Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &quot;unhappy&quot;.substring(2) returns &quot;happy&quot;
                  &quot;Harbison&quot;.substring(3) returns &quot;bison&quot;
                  &quot;emptiness&quot;.substring(9) returns &quot;&quot; (an empty string)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    beginIndex   the beginning index, inclusive.                    
                </param>
                <return>
                    the specified substring.                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if
                      &lt;code&gt;beginIndex&lt;/code&gt; is negative or larger than the
                      length of this &lt;code&gt;String&lt;/code&gt; object.                    
                </exception>
            </javadoc>
            <method name="substring" type="String" line="1924">
                <params>
                    <param name="beginIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1928">
                Returns a new string that is a substring of this string. The
                  substring begins at the specified &lt;code&gt;beginIndex&lt;/code&gt; and
                  extends to the character at index &lt;code&gt;endIndex - 1&lt;/code&gt;.
                  Thus the length of the substring is &lt;code&gt;endIndex-beginIndex&lt;/code&gt;.
                  &lt;p&gt;
                  Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;
                  &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    beginIndex   the beginning index, inclusive.                    
                </param>
                <param>
                    endIndex     the ending index, exclusive.                    
                </param>
                <return>
                    the specified substring.                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if the
                      &lt;code&gt;beginIndex&lt;/code&gt; is negative, or
                      &lt;code&gt;endIndex&lt;/code&gt; is larger than the length of
                      this &lt;code&gt;String&lt;/code&gt; object, or
                      &lt;code&gt;beginIndex&lt;/code&gt; is larger than
                      &lt;code&gt;endIndex&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="substring" type="String" line="1950">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="1951"/>
                <scope line="1954"/>
                <scope line="1957"/>
            </method>
            <javadoc line="1964">
                Returns a new character sequence that is a subsequence of this sequence.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;blockquote&gt;&lt;pre&gt;
                  str.subSequence(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;
                  behaves in exactly the same way as the invocation
                  &lt;blockquote&gt;&lt;pre&gt;
                  str.substring(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;
                  This method is defined so that the &lt;tt&gt;String&lt;/tt&gt; class can implement
                  the {@link CharSequence} interface. &lt;/p&gt;                
                <param>
                    beginIndex   the begin index, inclusive.                    
                </param>
                <param>
                    endIndex     the end index, exclusive.                    
                </param>
                <return>
                    the specified subsequence.                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionif &lt;tt&gt;beginIndex&lt;/tt&gt; or &lt;tt&gt;endIndex&lt;/tt&gt; are negative,
                      if &lt;tt&gt;endIndex&lt;/tt&gt; is greater than &lt;tt&gt;length()&lt;/tt&gt;,
                      or if &lt;tt&gt;beginIndex&lt;/tt&gt; is greater than &lt;tt&gt;startIndex&lt;/tt&gt;                    
                </throws>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="subSequence" type="CharSequence" line="1992">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1996">
                Concatenates the specified string to the end of this string.
                  &lt;p&gt;
                  If the length of the argument string is &lt;code&gt;0&lt;/code&gt;, then this
                  &lt;code&gt;String&lt;/code&gt; object is returned. Otherwise, a new
                  &lt;code&gt;String&lt;/code&gt; object is created, representing a character
                  sequence that is the concatenation of the character sequence
                  represented by this &lt;code&gt;String&lt;/code&gt; object and the character
                  sequence represented by the argument string.&lt;p&gt;
                  Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &quot;cares&quot;.concat(&quot;s&quot;) returns &quot;caress&quot;
                  &quot;to&quot;.concat(&quot;get&quot;).concat(&quot;her&quot;) returns &quot;together&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    str   the &lt;code&gt;String&lt;/code&gt; that is concatenated to the end
                      of this &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <return>
                    a string that represents the concatenation of this object&apos;s
                      characters followed by the string argument&apos;s characters.                    
                </return>
            </javadoc>
            <method name="concat" type="String" line="2016">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="otherLen" type="int" line="2017"/>
                <scope line="2018"/>
                <declaration name="buf" type="char" line="2021"/>
            </method>
            <javadoc line="2027">
                Returns a new string resulting from replacing all occurrences of
                  &lt;code&gt;oldChar&lt;/code&gt; in this string with &lt;code&gt;newChar&lt;/code&gt;.
                  &lt;p&gt;
                  If the character &lt;code&gt;oldChar&lt;/code&gt; does not occur in the
                  character sequence represented by this &lt;code&gt;String&lt;/code&gt; object,
                  then a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
                  Otherwise, a new &lt;code&gt;String&lt;/code&gt; object is created that
                  represents a character sequence identical to the character sequence
                  represented by this &lt;code&gt;String&lt;/code&gt; object, except that every
                  occurrence of &lt;code&gt;oldChar&lt;/code&gt; is replaced by an occurrence
                  of &lt;code&gt;newChar&lt;/code&gt;.
                  &lt;p&gt;
                  Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &quot;mesquite in your cellar&quot;.replace(&apos;e&apos;, &apos;o&apos;)
                  returns &quot;mosquito in your collar&quot;
                  &quot;the war of baronets&quot;.replace(&apos;r&apos;, &apos;y&apos;)
                  returns &quot;the way of bayonets&quot;
                  &quot;sparring with a purple porpoise&quot;.replace(&apos;p&apos;, &apos;t&apos;)
                  returns &quot;starring with a turtle tortoise&quot;
                  &quot;JonL&quot;.replace(&apos;q&apos;, &apos;x&apos;) returns &quot;JonL&quot; (no change)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    oldChar   the old character.                    
                </param>
                <param>
                    newChar   the new character.                    
                </param>
                <return>
                    a string derived from this string by replacing every
                      occurrence of &lt;code&gt;oldChar&lt;/code&gt; with &lt;code&gt;newChar&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="replace" type="String" line="2056">
                <params>
                    <param name="oldChar" type="char"/>
                    <param name="newChar" type="char"/>
                </params>
                <comment line="2061">
                                        
                </comment>
                <comment line="2062">
                                        
                </comment>
                <scope line="2057">
                    <declaration name="len" type="int" line="2058"/>
                    <declaration name="i" type="int" line="2059"/>
                    <declaration name="val" type="char[]" line="2060"/>
                    <declaration name="off" type="int" line="2061"/>
                    <scope line="2063">
                        <scope line="2064"/>
                    </scope>
                    <scope line="2068">
                        <declaration name="buf" type="char" line="2069"/>
                        <scope line="2070"/>
                        <scope line="2073">
                            <declaration name="c" type="char" line="2074"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2084">
                Tells whether or not this string matches the given &lt;a
                  href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.matches(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; yields exactly the
                  same result as the expression
                  &lt;blockquote&gt;&lt;tt&gt; {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)matches}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;                
                <param>
                    regexthe regular expression to which this string is to be matched                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if, and only if, this string matches the
                      given regular expression                    
                </return>
                <throws>
                    PatternSyntaxExceptionif the regular expression&apos;s syntax is invalid                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="matches" type="boolean" line="2110">
                <params>
                    <param name="regex" type="String"/>
                </params>
            </method>
            <javadoc line="2114">
                Returns true if and only if this string contains the specified
                  sequence of char values.                
                <param>
                    s the sequence to search for                    
                </param>
                <return>
                    true if this string contains &lt;code&gt;s&lt;/code&gt;, false otherwise                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="2123">
                <params>
                    <param name="s" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="2127">
                Replaces the first substring of this string that matches the given &lt;a
                  href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt; with the
                  given replacement.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.replaceFirst(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
                  yields exactly the same result as the expression
                  &lt;blockquote&gt;&lt;tt&gt;{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compilecompile}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence)matcher}(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Matcher#replaceFirstreplaceFirst}(&lt;/tt&gt;&lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  Note that backslashes (&lt;tt&gt;\&lt;/tt&gt;) and dollar signs (&lt;tt&gt;$&lt;/tt&gt;) in the
                  replacement string may cause the results to be different than if it were
                  being treated as a literal replacement string; see{@link java.util.regex.Matcher#replaceFirst}.
                  Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
                  meaning of these characters, if desired.                
                <param>
                    regexthe regular expression to which this string is to be matched                    
                </param>
                <param>
                    replacementthe string to be substituted for the first match                    
                </param>
                <return>
                    The resulting &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
                <throws>
                    PatternSyntaxExceptionif the regular expression&apos;s syntax is invalid                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="replaceFirst" type="String" line="2166">
                <params>
                    <param name="regex" type="String"/>
                    <param name="replacement" type="String"/>
                </params>
            </method>
            <javadoc line="2170">
                Replaces each substring of this string that matches the given &lt;a
                  href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt; with the
                  given replacement.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.replaceAll(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
                  yields exactly the same result as the expression
                  &lt;blockquote&gt;&lt;tt&gt;{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compilecompile}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence)matcher}(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Matcher#replaceAllreplaceAll}(&lt;/tt&gt;&lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  Note that backslashes (&lt;tt&gt;\&lt;/tt&gt;) and dollar signs (&lt;tt&gt;$&lt;/tt&gt;) in the
                  replacement string may cause the results to be different than if it were
                  being treated as a literal replacement string; see{@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
                  Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
                  meaning of these characters, if desired.                
                <param>
                    regexthe regular expression to which this string is to be matched                    
                </param>
                <param>
                    replacementthe string to be substituted for each match                    
                </param>
                <return>
                    The resulting &lt;tt&gt;String&lt;/tt&gt;                    
                </return>
                <throws>
                    PatternSyntaxExceptionif the regular expression&apos;s syntax is invalid                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="replaceAll" type="String" line="2209">
                <params>
                    <param name="regex" type="String"/>
                    <param name="replacement" type="String"/>
                </params>
            </method>
            <javadoc line="2213">
                Replaces each substring of this string that matches the literal target
                  sequence with the specified literal replacement sequence. The
                  replacement proceeds from the beginning of the string to the end, for
                  example, replacing &quot;aa&quot; with &quot;b&quot; in the string &quot;aaa&quot; will result in
                  &quot;ba&quot; rather than &quot;ab&quot;.                
                <param>
                    target The sequence of char values to be replaced                    
                </param>
                <param>
                    replacement The replacement sequence of char values                    
                </param>
                <return>
                    The resulting string                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;target&lt;/code&gt; or
                      &lt;code&gt;replacement&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="replace" type="String" line="2227">
                <params>
                    <param name="target" type="CharSequence"/>
                    <param name="replacement" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="2232">
                Splits this string around matches of the given
                  &lt;a href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.
                  &lt;p&gt; The array returned by this method contains each substring of this
                  string that is terminated by another substring that matches the given
                  expression or is terminated by the end of the string.  The substrings in
                  the array are in the order in which they occur in this string.  If the
                  expression does not match any part of the input then the resulting array
                  has just one element, namely this string.
                  &lt;p&gt; The &lt;tt&gt;limit&lt;/tt&gt; parameter controls the number of times the
                  pattern is applied and therefore affects the length of the resulting
                  array.  If the limit &lt;i&gt;n&lt;/i&gt; is greater than zero then the pattern
                  will be applied at most &lt;i&gt;n&lt;/i&gt;&amp;nbsp;-&amp;nbsp;1 times, the array&apos;s
                  length will be no greater than &lt;i&gt;n&lt;/i&gt;, and the array&apos;s last entry
                  will contain all input beyond the last matched delimiter.  If &lt;i&gt;n&lt;/i&gt;
                  is non-positive then the pattern will be applied as many times as
                  possible and the array can have any length.  If &lt;i&gt;n&lt;/i&gt; is zero then
                  the pattern will be applied as many times as possible, the array can
                  have any length, and trailing empty strings will be discarded.
                  &lt;p&gt; The string &lt;tt&gt;&quot;boo:and:foo&quot;&lt;/tt&gt;, for example, yields the
                  following results with these parameters:
                  &lt;blockquote&gt;&lt;table cellpadding=1 cellspacing=0 summary=&quot;Split example showing regex, limit, and result&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Regex&lt;/th&gt;
                  &lt;th&gt;Limit&lt;/th&gt;
                  &lt;th&gt;Result&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
                  &lt;td align=center&gt;2&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and:foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
                  &lt;td align=center&gt;5&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
                  &lt;td align=center&gt;-2&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
                  &lt;td align=center&gt;5&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot;, &quot;&quot;, &quot;&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
                  &lt;td align=center&gt;-2&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot;, &quot;&quot;, &quot;&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
                  &lt;td align=center&gt;0&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;
                  &lt;p&gt; An invocation of this method of the form
                  &lt;i&gt;str.&lt;/i&gt;&lt;tt&gt;split(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
                  yields the same result as the expression
                  &lt;blockquote&gt;{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compilecompile}&lt;tt&gt;(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;.{@link java.util.regex.Pattern#split(java.lang.CharSequence,int)split}&lt;tt&gt;(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
                  &lt;/blockquote&gt;                
                <param>
                    regexthe delimiting regular expression                    
                </param>
                <param>
                    limitthe result threshold, as described above                    
                </param>
                <return>
                    the array of strings computed by splitting this string
                      around matches of the given regular expression                    
                </return>
                <throws>
                    PatternSyntaxExceptionif the regular expression&apos;s syntax is invalid                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="split" type="String[]" line="2312">
                <params>
                    <param name="regex" type="String"/>
                    <param name="limit" type="int"/>
                </params>
                <comment line="2314">
                    fastpath if the regex is a
                    (1)one-char String and this character is not one of the
                    RegEx&apos;s meta characters &quot;.$|()[{^?+\\&quot;, or
                    (2)two-char String and the first char is the backslash and
                    the second is not the ascii digit or ascii letter.                    
                </comment>
                <comment line="2339">
                    last one                    
                </comment>
                <comment line="2340">
                    assert (list.size() == limit - 1);                    
                </comment>
                <comment line="2346">
                    If no match was found, return this                    
                </comment>
                <comment line="2350">
                    Add remaining segment                    
                </comment>
                <comment line="2354">
                    Construct result                    
                </comment>
                <declaration name="ch" type="char" line="2319"/>
                <scope line="2329">
                    <declaration name="off" type="int" line="2330"/>
                    <declaration name="next" type="int" line="2331"/>
                    <declaration name="limited" type="boolean" line="2332"/>
                    <declaration name="list" type="ArrayList&lt;String&gt;" line="2333"/>
                    <scope line="2334">
                        <scope line="2335"/>
                        <scope line="2338"/>
                    </scope>
                    <declaration name="resultSize" type="int" line="2354"/>
                    <declaration name="result" type="String[]" line="2358"/>
                </scope>
            </method>
            <javadoc line="2364">
                Splits this string around matches of the given &lt;a
                  href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.
                  &lt;p&gt; This method works as if by invoking the two-argument {@link #split(String,int) split} method with the given expression and a limit
                  argument of zero.  Trailing empty strings are therefore not included in
                  the resulting array.
                  &lt;p&gt; The string &lt;tt&gt;&quot;boo:and:foo&quot;&lt;/tt&gt;, for example, yields the following
                  results with these expressions:
                  &lt;blockquote&gt;&lt;table cellpadding=1 cellspacing=0 summary=&quot;Split examples showing regex and result&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Regex&lt;/th&gt;
                  &lt;th&gt;Result&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
                  &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;&lt;/blockquote&gt;                
                <param>
                    regexthe delimiting regular expression                    
                </param>
                <return>
                    the array of strings computed by splitting this string
                      around matches of the given regular expression                    
                </return>
                <throws>
                    PatternSyntaxExceptionif the regular expression&apos;s syntax is invalid                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <since>
                    1.4                    
                </since>
                <spec>
                    JSR-51                    
                </spec>
            </javadoc>
            <method name="split" type="String[]" line="2402">
                <params>
                    <param name="regex" type="String"/>
                </params>
            </method>
            <javadoc line="2406">
                Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to lower
                  case using the rules of the given &lt;code&gt;Locale&lt;/code&gt;.  Case mapping is based
                  on the Unicode Standard version specified by the {@link java.lang.Character Character}class. Since case mappings are not always 1:1 char mappings, the resulting
                  &lt;code&gt;String&lt;/code&gt; may be a different length than the original &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;
                  Examples of lowercase  mappings are in the following table:
                  &lt;table border=&quot;1&quot; summary=&quot;Lowercase mapping examples showing language code of locale, upper case, lower case, and description&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Language Code of Locale&lt;/th&gt;
                  &lt;th&gt;Upper Case&lt;/th&gt;
                  &lt;th&gt;Lower Case&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;tr (Turkish)&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0130&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0069&lt;/td&gt;
                  &lt;td&gt;capital letter I with dot above -&amp;gt; small letter i&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;tr (Turkish)&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0049&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0131&lt;/td&gt;
                  &lt;td&gt;capital letter I -&amp;gt; small letter dotless i &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;(all)&lt;/td&gt;
                  &lt;td&gt;French Fries&lt;/td&gt;
                  &lt;td&gt;french fries&lt;/td&gt;
                  &lt;td&gt;lowercased all chars in String&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;(all)&lt;/td&gt;
                  &lt;td&gt;&lt;img src=&quot;doc-files/capiota.gif&quot; alt=&quot;capiota&quot;&gt;&lt;img src=&quot;doc-files/capchi.gif&quot; alt=&quot;capchi&quot;&gt;
                  &lt;img src=&quot;doc-files/captheta.gif&quot; alt=&quot;captheta&quot;&gt;&lt;img src=&quot;doc-files/capupsil.gif&quot; alt=&quot;capupsil&quot;&gt;
                  &lt;img src=&quot;doc-files/capsigma.gif&quot; alt=&quot;capsigma&quot;&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;img src=&quot;doc-files/iota.gif&quot; alt=&quot;iota&quot;&gt;&lt;img src=&quot;doc-files/chi.gif&quot; alt=&quot;chi&quot;&gt;
                  &lt;img src=&quot;doc-files/theta.gif&quot; alt=&quot;theta&quot;&gt;&lt;img src=&quot;doc-files/upsilon.gif&quot; alt=&quot;upsilon&quot;&gt;
                  &lt;img src=&quot;doc-files/sigma1.gif&quot; alt=&quot;sigma&quot;&gt;&lt;/td&gt;
                  &lt;td&gt;lowercased all chars in String&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    locale use the case transformation rules for this locale                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt;, converted to lowercase.                    
                </return>
                <see>
                    java.lang.String#toLowerCase()                    
                </see>
                <see>
                    java.lang.String#toUpperCase()                    
                </see>
                <see>
                    java.lang.String#toUpperCase(Locale)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="toLowerCase" type="String" line="2458">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="2466">
                                        
                </comment>
                <comment line="2488">
                    int     resultOffset = 0;   result may grow, so i+resultOffset                    
                </comment>
                <comment line="2491">
                                        
                </comment>
                <comment line="2510">
                    GREEK CAPITAL LETTER SIGMA                    
                </comment>
                <comment line="2512">
                    LATIN CAPITAL LETTER I DOT                    
                </comment>
                <comment line="2534">
                                        
                </comment>
                <scope line="2459"/>
                <declaration name="firstUpper" type="int" line="2463"/>
                <scope line="2466">
                    <scope line="2467">
                        <declaration name="c" type="char" line="2468"/>
                        <scope line="2470">
                            <declaration name="supplChar" type="int" line="2471"/>
                            <scope line="2472"/>
                        </scope>
                        <scope line="2476">
                            <scope line="2477"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="result" type="char[]" line="2486"/>
                <declaration name="resultOffset" type="int" line="2487"/>
                <declaration name="lang" type="String" line="2493"/>
                <declaration name="localeDependent" type="boolean" line="2494"/>
                <declaration name="lowerCharArray" type="char[]" line="2496"/>
                <declaration name="lowerChar" type="int" line="2497"/>
                <declaration name="srcChar" type="int" line="2498"/>
                <declaration name="srcCount" type="int" line="2499"/>
                <scope line="2500">
                    <scope line="2503"/>
                    <scope line="2506"/>
                    <scope line="2509"/>
                    <scope line="2511"/>
                    <scope line="2513"/>
                    <scope line="2517">
                        <scope line="2518">
                            <scope line="2519"/>
                            <scope line="2522"/>
                        </scope>
                        <scope line="2526"/>
                        <scope line="2529"/>
                        <declaration name="mapLen" type="int" line="2534"/>
                        <scope line="2535">
                            <declaration name="result2" type="char[]" line="2536"/>
                        </scope>
                        <scope line="2541"/>
                    </scope>
                    <scope line="2545"/>
                </scope>
            </method>
            <javadoc line="2552">
                Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to lower
                  case using the rules of the default locale. This is equivalent to calling
                  &lt;code&gt;toLowerCase(Locale.getDefault())&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected
                  results if used for strings that are intended to be interpreted locale
                  independently.
                  Examples are programming language identifiers, protocol keys, and HTML
                  tags.
                  For instance, &lt;code&gt;&quot;TITLE&quot;.toLowerCase()&lt;/code&gt; in a Turkish locale
                  returns &lt;code&gt;&quot;t\u005Cu0131tle&quot;&lt;/code&gt;, where &apos;\u005Cu0131&apos; is the
                  LATIN SMALL LETTER DOTLESS I character.
                  To obtain correct results for locale insensitive strings, use
                  &lt;code&gt;toLowerCase(Locale.ENGLISH)&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the &lt;code&gt;String&lt;/code&gt;, converted to lowercase.                    
                </return>
                <see>
                    java.lang.String#toLowerCase(Locale)                    
                </see>
            </javadoc>
            <method name="toLowerCase" type="String" line="2571"/>
            <javadoc line="2575">
                Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to upper
                  case using the rules of the given &lt;code&gt;Locale&lt;/code&gt;. Case mapping is based
                  on the Unicode Standard version specified by the {@link java.lang.Character Character}class. Since case mappings are not always 1:1 char mappings, the resulting
                  &lt;code&gt;String&lt;/code&gt; may be a different length than the original &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;
                  Examples of locale-sensitive and 1:M case mappings are in the following table.
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot; summary=&quot;Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Language Code of Locale&lt;/th&gt;
                  &lt;th&gt;Lower Case&lt;/th&gt;
                  &lt;th&gt;Upper Case&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;tr (Turkish)&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0069&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0130&lt;/td&gt;
                  &lt;td&gt;small letter i -&amp;gt; capital letter I with dot above&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;tr (Turkish)&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0131&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0049&lt;/td&gt;
                  &lt;td&gt;small letter dotless i -&amp;gt; capital letter I&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;(all)&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u00df&lt;/td&gt;
                  &lt;td&gt;&amp;#92;u0053 &amp;#92;u0053&lt;/td&gt;
                  &lt;td&gt;small letter sharp s -&amp;gt; two letters: SS&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;(all)&lt;/td&gt;
                  &lt;td&gt;Fahrvergn&amp;uuml;gen&lt;/td&gt;
                  &lt;td&gt;FAHRVERGN&amp;Uuml;GEN&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    locale use the case transformation rules for this locale                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt;, converted to uppercase.                    
                </return>
                <see>
                    java.lang.String#toUpperCase()                    
                </see>
                <see>
                    java.lang.String#toLowerCase()                    
                </see>
                <see>
                    java.lang.String#toLowerCase(Locale)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="toUpperCase" type="String" line="2623">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="2631">
                                        
                </comment>
                <comment line="2653">
                                        
                </comment>
                <comment line="2654">
                    int     resultOffset = 0;   result may grow, so i+resultOffset                    
                </comment>
                <comment line="2657">
                                        
                </comment>
                <comment line="2697">
                                        
                </comment>
                <scope line="2624"/>
                <declaration name="firstLower" type="int" line="2628"/>
                <scope line="2631">
                    <scope line="2632">
                        <declaration name="c" type="int" line="2633"/>
                        <declaration name="srcCount" type="int" line="2634"/>
                        <scope line="2636"/>
                        <scope line="2639"/>
                        <declaration name="upperCaseChar" type="int" line="2642"/>
                        <scope line="2644"/>
                    </scope>
                </scope>
                <declaration name="result" type="char[]" line="2652"/>
                <declaration name="resultOffset" type="int" line="2653"/>
                <declaration name="lang" type="String" line="2659"/>
                <declaration name="localeDependent" type="boolean" line="2660"/>
                <declaration name="upperCharArray" type="char[]" line="2662"/>
                <declaration name="upperChar" type="int" line="2663"/>
                <declaration name="srcChar" type="int" line="2664"/>
                <declaration name="srcCount" type="int" line="2665"/>
                <scope line="2666">
                    <scope line="2669"/>
                    <scope line="2672"/>
                    <scope line="2675"/>
                    <scope line="2677"/>
                    <scope line="2681">
                        <scope line="2682">
                            <scope line="2683"/>
                            <scope line="2686"/>
                        </scope>
                        <scope line="2689"/>
                        <scope line="2692"/>
                        <declaration name="mapLen" type="int" line="2697"/>
                        <scope line="2698">
                            <declaration name="result2" type="char[]" line="2699"/>
                        </scope>
                        <scope line="2704"/>
                    </scope>
                    <scope line="2708"/>
                </scope>
            </method>
            <javadoc line="2715">
                Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to upper
                  case using the rules of the default locale. This method is equivalent to
                  &lt;code&gt;toUpperCase(Locale.getDefault())&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected
                  results if used for strings that are intended to be interpreted locale
                  independently.
                  Examples are programming language identifiers, protocol keys, and HTML
                  tags.
                  For instance, &lt;code&gt;&quot;title&quot;.toUpperCase()&lt;/code&gt; in a Turkish locale
                  returns &lt;code&gt;&quot;T\u005Cu0130TLE&quot;&lt;/code&gt;, where &apos;\u005Cu0130&apos; is the
                  LATIN CAPITAL LETTER I WITH DOT ABOVE character.
                  To obtain correct results for locale insensitive strings, use
                  &lt;code&gt;toUpperCase(Locale.ENGLISH)&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the &lt;code&gt;String&lt;/code&gt;, converted to uppercase.                    
                </return>
                <see>
                    java.lang.String#toUpperCase(Locale)                    
                </see>
            </javadoc>
            <method name="toUpperCase" type="String" line="2734"/>
            <javadoc line="2738">
                Returns a copy of the string, with leading and trailing whitespace
                  omitted.
                  &lt;p&gt;
                  If this &lt;code&gt;String&lt;/code&gt; object represents an empty character
                  sequence, or the first and last characters of character sequence
                  represented by this &lt;code&gt;String&lt;/code&gt; object both have codes
                  greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt; (the space character), then a
                  reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
                  &lt;p&gt;
                  Otherwise, if there is no character with a code greater than
                  &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt; in the string, then a new
                  &lt;code&gt;String&lt;/code&gt; object representing an empty string is created
                  and returned.
                  &lt;p&gt;
                  Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the
                  string whose code is greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;, and let
                  &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code
                  is greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;. A new &lt;code&gt;String&lt;/code&gt;
                  object is created, representing the substring of this string that
                  begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the
                  character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of
                  &lt;code&gt;this.substring(&lt;i&gt;k&lt;/i&gt;,&amp;nbsp;&lt;i&gt;m&lt;/i&gt;+1)&lt;/code&gt;.
                  &lt;p&gt;
                  This method may be used to trim whitespace (as defined above) from
                  the beginning and end of a string.                
                <return>
                    A copy of this string with leading and trailing white
                      space removed, or this string if it has no leading or
                      trailing white space.                    
                </return>
            </javadoc>
            <method name="trim" type="String" line="2769">
                <comment line="2773">
                                        
                </comment>
                <comment line="2774">
                                        
                </comment>
                <declaration name="len" type="int" line="2770"/>
                <declaration name="st" type="int" line="2771"/>
                <declaration name="off" type="int" line="2772"/>
                <declaration name="val" type="char[]" line="2773"/>
                <scope line="2775"/>
                <scope line="2778"/>
            </method>
            <javadoc line="2784">
                This object (which is already a string!) is itself returned.                
                <return>
                    the string itself.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="2789"/>
            <javadoc line="2793">
                Converts this string to a new character array.                
                <return>
                    a newly allocated character array whose length is the length
                      of this string and whose contents are initialized to contain
                      the character sequence represented by this string.                    
                </return>
            </javadoc>
            <method name="toCharArray" type="char[]" line="2800">
                <declaration name="result" type="char" line="2801"/>
            </method>
            <javadoc line="2806">
                Returns a formatted string using the specified format string and
                  arguments.
                  &lt;p&gt; The locale always used is the one returned by {@link java.util.Locale#getDefault() Locale.getDefault()}.                
                <param>
                    formatA &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification.                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    A formatted string                    
                </return>
                <see>
                    java.util.Formatter                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="String" line="2844">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="2848">
                Returns a formatted string using the specified locale, format string,
                  and arguments.                
                <param>
                    lThe {@linkplain java.util.Locale locale} to apply during
                      formatting.  If &lt;tt&gt;l&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt; then no localization
                      is applied.                    
                </param>
                <param>
                    formatA &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;                    
                </param>
                <param>
                    argsArguments referenced by the format specifiers in the format
                      string.  If there are more arguments than format specifiers, the
                      extra arguments are ignored.  The number of arguments is
                      variable and may be zero.  The maximum number of arguments is
                      limited by the maximum dimension of a Java array as defined by
                      &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.
                      The behaviour on a
                      &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
                      href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.                    
                </param>
                <throws>
                    IllegalFormatExceptionIf a format string contains an illegal syntax, a format
                      specifier that is incompatible with the given arguments,
                      insufficient arguments given the format string, or other
                      illegal conditions.  For specification of all possible
                      formatting errors, see the &lt;a
                      href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
                      formatter class specification                    
                </throws>
                <throws>
                    NullPointerExceptionIf the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <return>
                    A formatted string                    
                </return>
                <see>
                    java.util.Formatter                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="format" type="String" line="2888">
                <params>
                    <param name="l" type="Locale"/>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
            </method>
            <javadoc line="2892">
                Returns the string representation of the &lt;code&gt;Object&lt;/code&gt; argument.                
                <param>
                    obj   an &lt;code&gt;Object&lt;/code&gt;.                    
                </param>
                <return>
                    if the argument is &lt;code&gt;null&lt;/code&gt;, then a string equal to
                      &lt;code&gt;&quot;null&quot;&lt;/code&gt;; otherwise, the value of
                      &lt;code&gt;obj.toString()&lt;/code&gt; is returned.                    
                </return>
                <see>
                    java.lang.Object#toString()                    
                </see>
            </javadoc>
            <method name="valueOf" type="String" line="2901">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="2905">
                Returns the string representation of the &lt;code&gt;char&lt;/code&gt; array
                  argument. The contents of the character array are copied; subsequent
                  modification of the character array does not affect the newly
                  created string.                
                <param>
                    data   a &lt;code&gt;char&lt;/code&gt; array.                    
                </param>
                <return>
                    a newly allocated string representing the same sequence of
                      characters contained in the character array argument.                    
                </return>
            </javadoc>
            <method name="valueOf" type="String" line="2915">
                <params>
                    <param name="data" type="char"/>
                </params>
            </method>
            <javadoc line="2919">
                Returns the string representation of a specific subarray of the
                  &lt;code&gt;char&lt;/code&gt; array argument.
                  &lt;p&gt;
                  The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first
                  character of the subarray. The &lt;code&gt;count&lt;/code&gt; argument
                  specifies the length of the subarray. The contents of the subarray
                  are copied; subsequent modification of the character array does not
                  affect the newly created string.                
                <param>
                    data     the character array.                    
                </param>
                <param>
                    offset   the initial offset into the value of the
                      &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <param>
                    count    the length of the value of the &lt;code&gt;String&lt;/code&gt;.                    
                </param>
                <return>
                    a string representing the sequence of characters contained
                      in the subarray of the character array argument.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;offset&lt;/code&gt; is
                      negative, or &lt;code&gt;count&lt;/code&gt; is negative, or
                      &lt;code&gt;offset+count&lt;/code&gt; is larger than
                      &lt;code&gt;data.length&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="valueOf" type="String" line="2940">
                <params>
                    <param name="data" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="2944">
                Returns a String that represents the character sequence in the
                  array specified.                
                <param>
                    data     the character array.                    
                </param>
                <param>
                    offset   initial offset of the subarray.                    
                </param>
                <param>
                    count    length of the subarray.                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
                      specified subarray of the character array.                    
                </return>
            </javadoc>
            <method name="copyValueOf" type="String" line="2954">
                <params>
                    <param name="data" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <comment line="2956">
                    All public String constructors now copy the data.                    
                </comment>
            </method>
            <javadoc line="2959">
                Returns a String that represents the character sequence in the
                  array specified.                
                <param>
                    data   the character array.                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
                      character array.                    
                </return>
            </javadoc>
            <method name="copyValueOf" type="String" line="2967">
                <params>
                    <param name="data" type="char"/>
                </params>
            </method>
            <javadoc line="2971">
                Returns the string representation of the &lt;code&gt;boolean&lt;/code&gt; argument.                
                <param>
                    b   a &lt;code&gt;boolean&lt;/code&gt;.                    
                </param>
                <return>
                    if the argument is &lt;code&gt;true&lt;/code&gt;, a string equal to
                      &lt;code&gt;&quot;true&quot;&lt;/code&gt; is returned; otherwise, a string equal to
                      &lt;code&gt;&quot;false&quot;&lt;/code&gt; is returned.                    
                </return>
            </javadoc>
            <method name="valueOf" type="String" line="2979">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="2983">
                Returns the string representation of the &lt;code&gt;char&lt;/code&gt;
                  argument.                
                <param>
                    c   a &lt;code&gt;char&lt;/code&gt;.                    
                </param>
                <return>
                    a string of length &lt;code&gt;1&lt;/code&gt; containing
                      as its single character the argument &lt;code&gt;c&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="valueOf" type="String" line="2991">
                <params>
                    <param name="c" type="char"/>
                </params>
                <declaration name="data" type="char" line="2992"/>
            </method>
            <javadoc line="2996">
                Returns the string representation of the &lt;code&gt;int&lt;/code&gt; argument.
                  &lt;p&gt;
                  The representation is exactly the one returned by the
                  &lt;code&gt;Integer.toString&lt;/code&gt; method of one argument.                
                <param>
                    i   an &lt;code&gt;int&lt;/code&gt;.                    
                </param>
                <return>
                    a string representation of the &lt;code&gt;int&lt;/code&gt; argument.                    
                </return>
                <see>
                    java.lang.Integer#toString(int,int)                    
                </see>
            </javadoc>
            <method name="valueOf" type="String" line="3006">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="3010">
                Returns the string representation of the &lt;code&gt;long&lt;/code&gt; argument.
                  &lt;p&gt;
                  The representation is exactly the one returned by the
                  &lt;code&gt;Long.toString&lt;/code&gt; method of one argument.                
                <param>
                    l   a &lt;code&gt;long&lt;/code&gt;.                    
                </param>
                <return>
                    a string representation of the &lt;code&gt;long&lt;/code&gt; argument.                    
                </return>
                <see>
                    java.lang.Long#toString(long)                    
                </see>
            </javadoc>
            <method name="valueOf" type="String" line="3020">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="3024">
                Returns the string representation of the &lt;code&gt;float&lt;/code&gt; argument.
                  &lt;p&gt;
                  The representation is exactly the one returned by the
                  &lt;code&gt;Float.toString&lt;/code&gt; method of one argument.                
                <param>
                    f   a &lt;code&gt;float&lt;/code&gt;.                    
                </param>
                <return>
                    a string representation of the &lt;code&gt;float&lt;/code&gt; argument.                    
                </return>
                <see>
                    java.lang.Float#toString(float)                    
                </see>
            </javadoc>
            <method name="valueOf" type="String" line="3034">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="3038">
                Returns the string representation of the &lt;code&gt;double&lt;/code&gt; argument.
                  &lt;p&gt;
                  The representation is exactly the one returned by the
                  &lt;code&gt;Double.toString&lt;/code&gt; method of one argument.                
                <param>
                    d   a &lt;code&gt;double&lt;/code&gt;.                    
                </param>
                <return>
                    a  string representation of the &lt;code&gt;double&lt;/code&gt; argument.                    
                </return>
                <see>
                    java.lang.Double#toString(double)                    
                </see>
            </javadoc>
            <method name="valueOf" type="String" line="3048">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <method name="intern" type="String" line="3052"/>
            <javadoc line="3052">
                Returns a canonical representation for the string object.
                  &lt;p&gt;
                  A pool of strings, initially empty, is maintained privately by the
                  class &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;
                  When the intern method is invoked, if the pool already contains a
                  string equal to this &lt;code&gt;String&lt;/code&gt; object as determined by
                  the {@link #equals(Object)} method, then the string from the pool is
                  returned. Otherwise, this &lt;code&gt;String&lt;/code&gt; object is added to the
                  pool and a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
                  &lt;p&gt;
                  It follows that for any two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;,
                  &lt;code&gt;s.intern()&amp;nbsp;==&amp;nbsp;t.intern()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;
                  if and only if &lt;code&gt;s.equals(t)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  All literal strings and string-valued constant expressions are
                  interned. String literals are defined in section 3.10.5 of the
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.                
                <return>
                    a string that has the same contents as this string, but is
                      guaranteed to be from a pool of unique strings.                    
                </return>
            </javadoc>
        </class>
    </source>