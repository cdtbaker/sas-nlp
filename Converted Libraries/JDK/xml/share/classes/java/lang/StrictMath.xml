<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.util.Random"/>
        <import package="sun.misc.FpUtils"/>
        <import package="sun.misc.DoubleConsts"/>
        <class name="StrictMath" line="31">
            <comment line="799">
                Use raw bit-wise conversions on guaranteed non-NaN arguments.                
            </comment>
            <javadoc line="31">
                The class {@code StrictMath} contains methods for performing basic
                  numeric operations such as the elementary exponential, logarithm,
                  square root, and trigonometric functions.
                  &lt;p&gt;To help ensure portability of Java programs, the definitions of
                  some of the numeric functions in this package require that they
                  produce the same results as certain published algorithms. These
                  algorithms are available from the well-known network library{@code netlib} as the package &quot;Freely Distributable Math
                  Library,&quot; &lt;a
                  href=&quot;ftp://ftp.netlib.org/fdlibm.tar&quot;&gt;{@code fdlibm}&lt;/a&gt;. These
                  algorithms, which are written in the C programming language, are
                  then to be understood as executed with all floating-point
                  operations following the rules of Java floating-point arithmetic.
                  &lt;p&gt;The Java math library is defined with respect to{@code fdlibm} version 5.3. Where {@code fdlibm} provides
                  more than one definition for a function (such as{@code acos}), use the &quot;IEEE 754 core function&quot; version
                  (residing in a file whose name begins with the letter{@code e}).  The methods which require {@code fdlibm}semantics are {@code sin}, {@code cos}, {@code tan},{@code asin}, {@code acos}, {@code atan},{@code exp}, {@code log}, {@code log10},{@code cbrt}, {@code atan2}, {@code pow},{@code sinh}, {@code cosh}, {@code tanh},{@code hypot}, {@code expm1}, and {@code log1p}.                
                <author>
                    unascribed                    
                </author>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="67">
                Don&apos;t let anyone instantiate this class.                
            </javadoc>
            <method name="StrictMath" type="constructor" line="70"/>
            <declaration name="E" type="double" line="72"/>
            <javadoc line="72">
                The {@code double} value that is closer than any other to
                  &lt;i&gt;e&lt;/i&gt;, the base of the natural logarithms.                
            </javadoc>
            <declaration name="PI" type="double" line="78"/>
            <javadoc line="78">
                The {@code double} value that is closer than any other to
                  &lt;i&gt;pi&lt;/i&gt;, the ratio of the circumference of a circle to its
                  diameter.                
            </javadoc>
            <method name="sin" type="double" line="85"/>
            <javadoc line="85">
                Returns the trigonometric sine of an angle. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
                  result is NaN.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.&lt;/ul&gt;                
                <param>
                    a   an angle, in radians.                    
                </param>
                <return>
                    the sine of the argument.                    
                </return>
            </javadoc>
            <method name="cos" type="double" line="97"/>
            <javadoc line="97">
                Returns the trigonometric cosine of an angle. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
                  result is NaN.&lt;/ul&gt;                
                <param>
                    a   an angle, in radians.                    
                </param>
                <return>
                    the cosine of the argument.                    
                </return>
            </javadoc>
            <method name="tan" type="double" line="107"/>
            <javadoc line="107">
                Returns the trigonometric tangent of an angle. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the result
                  is NaN.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.&lt;/ul&gt;                
                <param>
                    a   an angle, in radians.                    
                </param>
                <return>
                    the tangent of the argument.                    
                </return>
            </javadoc>
            <method name="asin" type="double" line="119"/>
            <javadoc line="119">
                Returns the arc sine of a value; the returned angle is in the
                  range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
                  than 1, then the result is NaN.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.&lt;/ul&gt;                
                <param>
                    a   the value whose arc sine is to be returned.                    
                </param>
                <return>
                    the arc sine of the argument.                    
                </return>
            </javadoc>
            <method name="acos" type="double" line="132"/>
            <javadoc line="132">
                Returns the arc cosine of a value; the returned angle is in the
                  range 0.0 through &lt;i&gt;pi&lt;/i&gt;.  Special case:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
                  than 1, then the result is NaN.&lt;/ul&gt;                
                <param>
                    a   the value whose arc cosine is to be returned.                    
                </param>
                <return>
                    the arc cosine of the argument.                    
                </return>
            </javadoc>
            <method name="atan" type="double" line="143"/>
            <javadoc line="143">
                Returns the arc tangent of a value; the returned angle is in the
                  range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN, then the result is NaN.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.&lt;/ul&gt;                
                <param>
                    a   the value whose arc tangent is to be returned.                    
                </param>
                <return>
                    the arc tangent of the argument.                    
                </return>
            </javadoc>
            <javadoc line="155">
                Converts an angle measured in degrees to an approximately
                  equivalent angle measured in radians.  The conversion from
                  degrees to radians is generally inexact.                
                <param>
                    angdeg   an angle, in degrees                    
                </param>
                <return>
                    the measurement of the angle {@code angdeg}in radians.                    
                </return>
            </javadoc>
            <method name="toRadians" type="double" line="164">
                <params>
                    <param name="angdeg" type="double"/>
                </params>
            </method>
            <javadoc line="168">
                Converts an angle measured in radians to an approximately
                  equivalent angle measured in degrees.  The conversion from
                  radians to degrees is generally inexact; users should
                  &lt;i&gt;not&lt;/i&gt; expect {@code cos(toRadians(90.0))} to exactly
                  equal {@code 0.0}.                
                <param>
                    angrad   an angle, in radians                    
                </param>
                <return>
                    the measurement of the angle {@code angrad}in degrees.                    
                </return>
            </javadoc>
            <method name="toDegrees" type="double" line="179">
                <params>
                    <param name="angrad" type="double"/>
                </params>
            </method>
            <method name="exp" type="double" line="183"/>
            <javadoc line="183">
                Returns Euler&apos;s number &lt;i&gt;e&lt;/i&gt; raised to the power of a{@code double} value. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is
                  positive infinity.
                  &lt;li&gt;If the argument is negative infinity, then the result is
                  positive zero.&lt;/ul&gt;                
                <param>
                    a   the exponent to raise &lt;i&gt;e&lt;/i&gt; to.                    
                </param>
                <return>
                    the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code a}&lt;/sup&gt;,
                      where &lt;i&gt;e&lt;/i&gt; is the base of the natural logarithms.                    
                </return>
            </javadoc>
            <method name="log" type="double" line="198"/>
            <javadoc line="198">
                Returns the natural logarithm (base &lt;i&gt;e&lt;/i&gt;) of a {@code double}value. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
                  is NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is
                  positive infinity.
                  &lt;li&gt;If the argument is positive zero or negative zero, then the
                  result is negative infinity.&lt;/ul&gt;                
                <param>
                    a   a value                    
                </param>
                <return>
                    the value ln&amp;nbsp;{@code a}, the natural logarithm of{@code a}.                    
                </return>
            </javadoc>
            <method name="log10" type="double" line="215"/>
            <javadoc line="215">
                Returns the base 10 logarithm of a {@code double} value.
                  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
                  is NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is
                  positive infinity.
                  &lt;li&gt;If the argument is positive zero or negative zero, then the
                  result is negative infinity.
                  &lt;li&gt; If the argument is equal to 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; for
                  integer &lt;i&gt;n&lt;/i&gt;, then the result is &lt;i&gt;n&lt;/i&gt;.
                  &lt;/ul&gt;                
                <param>
                    a   a value                    
                </param>
                <return>
                    the base 10 logarithm of  {@code a}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="sqrt" type="double" line="235"/>
            <javadoc line="235">
                Returns the correctly rounded positive square root of a{@code double} value.
                  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
                  is NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is positive
                  infinity.
                  &lt;li&gt;If the argument is positive zero or negative zero, then the
                  result is the same as the argument.&lt;/ul&gt;
                  Otherwise, the result is the {@code double} value closest to
                  the true mathematical square root of the argument value.                
                <param>
                    a   a value.                    
                </param>
                <return>
                    the positive square root of {@code a}.                    
                </return>
            </javadoc>
            <method name="cbrt" type="double" line="253"/>
            <javadoc line="253">
                Returns the cube root of a {@code double} value.  For
                  positive finite {@code x}, {@code cbrt(-x) ==
                  -cbrt(x)}; that is, the cube root of a negative value is
                  the negative of the cube root of that value&apos;s magnitude.
                  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN, then the result is NaN.
                  &lt;li&gt;If the argument is infinite, then the result is an infinity
                  with the same sign as the argument.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.
                  &lt;/ul&gt;                
                <param>
                    a   a value.                    
                </param>
                <return>
                    the cube root of {@code a}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="IEEEremainder" type="double" line="278"/>
            <javadoc line="278">
                Computes the remainder operation on two arguments as prescribed
                  by the IEEE 754 standard.
                  The remainder value is mathematically equal to
                  &lt;code&gt;f1&amp;nbsp;-&amp;nbsp;f2&lt;/code&gt;&amp;nbsp;&amp;times;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;,
                  where &lt;i&gt;n&lt;/i&gt; is the mathematical integer closest to the exact
                  mathematical value of the quotient {@code f1/f2}, and if two
                  mathematical integers are equally close to {@code f1/f2},
                  then &lt;i&gt;n&lt;/i&gt; is the integer that is even. If the remainder is
                  zero, its sign is the same as the sign of the first argument.
                  Special cases:
                  &lt;ul&gt;&lt;li&gt;If either argument is NaN, or the first argument is infinite,
                  or the second argument is positive zero or negative zero, then the
                  result is NaN.
                  &lt;li&gt;If the first argument is finite and the second argument is
                  infinite, then the result is the same as the first argument.&lt;/ul&gt;                
                <param>
                    f1   the dividend.                    
                </param>
                <param>
                    f2   the divisor.                    
                </param>
                <return>
                    the remainder when {@code f1} is divided by{@code f2}.                    
                </return>
            </javadoc>
            <javadoc line="302">
                Returns the smallest (closest to negative infinity){@code double} value that is greater than or equal to the
                  argument and is equal to a mathematical integer. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
                  mathematical integer, then the result is the same as the
                  argument.  &lt;li&gt;If the argument is NaN or an infinity or
                  positive zero or negative zero, then the result is the same as
                  the argument.  &lt;li&gt;If the argument value is less than zero but
                  greater than -1.0, then the result is negative zero.&lt;/ul&gt; Note
                  that the value of {@code StrictMath.ceil(x)} is exactly the
                  value of {@code -StrictMath.floor(-x)}.                
                <param>
                    a   a value.                    
                </param>
                <return>
                    the smallest (closest to negative infinity)
                      floating-point value that is greater than or equal to
                      the argument and is equal to a mathematical integer.                    
                </return>
            </javadoc>
            <method name="ceil" type="double" line="320">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="324">
                Returns the largest (closest to positive infinity){@code double} value that is less than or equal to the
                  argument and is equal to a mathematical integer. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
                  mathematical integer, then the result is the same as the
                  argument.  &lt;li&gt;If the argument is NaN or an infinity or
                  positive zero or negative zero, then the result is the same as
                  the argument.&lt;/ul&gt;                
                <param>
                    a   a value.                    
                </param>
                <return>
                    the largest (closest to positive infinity)
                      floating-point value that less than or equal to the argument
                      and is equal to a mathematical integer.                    
                </return>
            </javadoc>
            <method name="floor" type="double" line="339">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="343">
                Internal method to share logic between floor and ceil.                
                <param>
                    a the value to be floored or ceiled                    
                </param>
                <param>
                    negativeBoundary result for values in (-1, 0)                    
                </param>
                <param>
                    positiveBoundary result for values in (0, 1)                    
                </param>
                <param>
                    increment value to add when the argument is non-integral                    
                </param>
            </javadoc>
            <method name="floorOrCeil" type="double" line="354">
                <params>
                    <param name="a" type="double"/>
                    <param name="negativeBoundary" type="double"/>
                    <param name="positiveBoundary" type="double"/>
                    <param name="sign" type="double"/>
                </params>
                <comment line="359">
                    Absolute value of argument is less than 1.
                     floorOrceil(-0.0) =&gt; -0.0
                     floorOrceil(+0.0) =&gt; +0.0                    
                </comment>
                <comment line="367">
                    Infinity, NaN, or a value so large it must be integral.                    
                </comment>
                <comment line="372">
                    Else the argument is either an integral value already XOR it
                     has to be rounded to one.                    
                </comment>
                <comment line="380">
                    integral value                    
                </comment>
                <declaration name="exponent" type="int" line="355"/>
                <scope line="357"/>
                <scope line="365"/>
                <declaration name="doppel" type="long" line="375"/>
                <declaration name="mask" type="long" line="376"/>
                <scope line="380">
                    <declaration name="result" type="double" line="381"/>
                </scope>
            </method>
            <javadoc line="388">
                Returns the {@code double} value that is closest in value
                  to the argument and is equal to a mathematical integer. If two{@code double} values that are mathematical integers are
                  equally close to the value of the argument, the result is the
                  integer value that is even. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a mathematical
                  integer, then the result is the same as the argument.
                  &lt;li&gt;If the argument is NaN or an infinity or positive zero or negative
                  zero, then the result is the same as the argument.&lt;/ul&gt;                
                <param>
                    a   a value.                    
                </param>
                <return>
                    the closest floating-point value to {@code a} that is
                      equal to a mathematical integer.                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
            </javadoc>
            <method name="rint" type="double" line="404">
                <params>
                    <param name="a" type="double"/>
                </params>
                <comment line="406">
                    If the absolute value of a is not less than 2^52, it
                     is either a finite integer (the double format does not have
                     enough significand bits for a number that large to have any
                     fractional portion), an infinity, or a NaN.  In any of
                     these cases, rint of the argument is the argument.
                    
                     Otherwise, the sum (twoToThe52 + a ) will properly round
                     away any fractional portion of a since ulp(twoToThe52) ==
                     1.0; subtracting out twoToThe52 from this sum will then be
                     exact and leave the rounded integer portion of a.
                    
                     This method does not need to be declared strictfp to get
                     fully reproducible results.  Whether or not a method is
                     declared strictfp can only make a difference in the
                     returned result if some operation would overflow or
                     underflow with strictfp semantics.  The operation
                     (twoToThe52 + a ) cannot overflow since large values of a
                     are screened out; the add cannot underflow since twoToThe52
                     is too large.  The subtraction ((twoToThe52 + a ) -
                     twoToThe52) will be exact as discussed above and thus
                     cannot overflow or meaningfully underflow.  Finally, the
                     last multiply in the return statement is by plus or minus
                     1.0, which is exact too.                    
                </comment>
                <comment line="431">
                    2^52                    
                </comment>
                <comment line="432">
                    preserve sign info                    
                </comment>
                <comment line="435">
                    E_min &lt;= ilogb(a) &lt;= 51                    
                </comment>
                <comment line="439">
                    restore original sign                    
                </comment>
                <declaration name="twoToThe52" type="double" line="430"/>
                <declaration name="sign" type="double" line="431"/>
                <scope line="434"/>
            </method>
            <method name="atan2" type="double" line="441"/>
            <javadoc line="441">
                Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular
                  coordinates ({@code x},&amp;nbsp;{@code y}) to polar
                  coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).
                  This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent
                  of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special
                  cases:
                  &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.
                  &lt;li&gt;If the first argument is positive zero and the second argument
                  is positive, or the first argument is positive and finite and the
                  second argument is positive infinity, then the result is positive
                  zero.
                  &lt;li&gt;If the first argument is negative zero and the second argument
                  is positive, or the first argument is negative and finite and the
                  second argument is positive infinity, then the result is negative zero.
                  &lt;li&gt;If the first argument is positive zero and the second argument
                  is negative, or the first argument is positive and finite and the
                  second argument is negative infinity, then the result is the{@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.
                  &lt;li&gt;If the first argument is negative zero and the second argument
                  is negative, or the first argument is negative and finite and the
                  second argument is negative infinity, then the result is the{@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.
                  &lt;li&gt;If the first argument is positive and the second argument is
                  positive zero or negative zero, or the first argument is positive
                  infinity and the second argument is finite, then the result is the{@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.
                  &lt;li&gt;If the first argument is negative and the second argument is
                  positive zero or negative zero, or the first argument is negative
                  infinity and the second argument is finite, then the result is the{@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.
                  &lt;li&gt;If both arguments are positive infinity, then the result is the{@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.
                  &lt;li&gt;If the first argument is positive infinity and the second argument
                  is negative infinity, then the result is the {@code double}value closest to 3&lt;i&gt;pi&lt;/i&gt;/4.
                  &lt;li&gt;If the first argument is negative infinity and the second argument
                  is positive infinity, then the result is the {@code double} value
                  closest to -&lt;i&gt;pi&lt;/i&gt;/4.
                  &lt;li&gt;If both arguments are negative infinity, then the result is the{@code double} value closest to -3&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;                
                <param>
                    y   the ordinate coordinate                    
                </param>
                <param>
                    x   the abscissa coordinate                    
                </param>
                <return>
                    the &lt;i&gt;theta&lt;/i&gt; component of the point
                      (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)
                      in polar coordinates that corresponds to the point
                      (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.                    
                </return>
            </javadoc>
            <method name="pow" type="double" line="493"/>
            <javadoc line="493">
                Returns the value of the first argument raised to the power of the
                  second argument. Special cases:
                  &lt;ul&gt;&lt;li&gt;If the second argument is positive or negative zero, then the
                  result is 1.0.
                  &lt;li&gt;If the second argument is 1.0, then the result is the same as the
                  first argument.
                  &lt;li&gt;If the second argument is NaN, then the result is NaN.
                  &lt;li&gt;If the first argument is NaN and the second argument is nonzero,
                  then the result is NaN.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the absolute value of the first argument is greater than 1
                  and the second argument is positive infinity, or
                  &lt;li&gt;the absolute value of the first argument is less than 1 and
                  the second argument is negative infinity,
                  &lt;/ul&gt;
                  then the result is positive infinity.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the absolute value of the first argument is greater than 1 and
                  the second argument is negative infinity, or
                  &lt;li&gt;the absolute value of the
                  first argument is less than 1 and the second argument is positive
                  infinity,
                  &lt;/ul&gt;
                  then the result is positive zero.
                  &lt;li&gt;If the absolute value of the first argument equals 1 and the
                  second argument is infinite, then the result is NaN.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is positive zero and the second argument
                  is greater than zero, or
                  &lt;li&gt;the first argument is positive infinity and the second
                  argument is less than zero,
                  &lt;/ul&gt;
                  then the result is positive zero.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is positive zero and the second argument
                  is less than zero, or
                  &lt;li&gt;the first argument is positive infinity and the second
                  argument is greater than zero,
                  &lt;/ul&gt;
                  then the result is positive infinity.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is negative zero and the second argument
                  is greater than zero but not a finite odd integer, or
                  &lt;li&gt;the first argument is negative infinity and the second
                  argument is less than zero but not a finite odd integer,
                  &lt;/ul&gt;
                  then the result is positive zero.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is negative zero and the second argument
                  is a positive finite odd integer, or
                  &lt;li&gt;the first argument is negative infinity and the second
                  argument is a negative finite odd integer,
                  &lt;/ul&gt;
                  then the result is negative zero.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is negative zero and the second argument
                  is less than zero but not a finite odd integer, or
                  &lt;li&gt;the first argument is negative infinity and the second
                  argument is greater than zero but not a finite odd integer,
                  &lt;/ul&gt;
                  then the result is positive infinity.
                  &lt;li&gt;If
                  &lt;ul&gt;
                  &lt;li&gt;the first argument is negative zero and the second argument
                  is a negative finite odd integer, or
                  &lt;li&gt;the first argument is negative infinity and the second
                  argument is a positive finite odd integer,
                  &lt;/ul&gt;
                  then the result is negative infinity.
                  &lt;li&gt;If the first argument is finite and less than zero
                  &lt;ul&gt;
                  &lt;li&gt; if the second argument is a finite even integer, the
                  result is equal to the result of raising the absolute value of
                  the first argument to the power of the second argument
                  &lt;li&gt;if the second argument is a finite odd integer, the result
                  is equal to the negative of the result of raising the absolute
                  value of the first argument to the power of the second
                  argument
                  &lt;li&gt;if the second argument is finite and not an integer, then
                  the result is NaN.
                  &lt;/ul&gt;
                  &lt;li&gt;If both arguments are integers, then the result is exactly equal
                  to the mathematical result of raising the first argument to the power
                  of the second argument if that result can in fact be represented
                  exactly as a {@code double} value.&lt;/ul&gt;
                  &lt;p&gt;(In the foregoing descriptions, a floating-point value is
                  considered to be an integer if and only if it is finite and a
                  fixed point of the method {@link #ceil ceil} or,
                  equivalently, a fixed point of the method {@link #floorfloor}. A value is a fixed point of a one-argument
                  method if and only if the result of applying the method to the
                  value is equal to the value.)                
                <param>
                    a   base.                    
                </param>
                <param>
                    b   the exponent.                    
                </param>
                <return>
                    the value {@code a}&lt;sup&gt;{@code b}&lt;/sup&gt;.                    
                </return>
            </javadoc>
            <javadoc line="615">
                Returns the closest {@code int} to the argument, with ties
                  rounding up.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
                  &lt;li&gt;If the argument is negative infinity or any value less than or
                  equal to the value of {@code Integer.MIN_VALUE}, the result is
                  equal to the value of {@code Integer.MIN_VALUE}.
                  &lt;li&gt;If the argument is positive infinity or any value greater than or
                  equal to the value of {@code Integer.MAX_VALUE}, the result is
                  equal to the value of {@code Integer.MAX_VALUE}.&lt;/ul&gt;                
                <param>
                    a   a floating-point value to be rounded to an integer.                    
                </param>
                <return>
                    the value of the argument rounded to the nearest{@code int} value.                    
                </return>
                <see>
                    java.lang.Integer#MAX_VALUE                    
                </see>
                <see>
                    java.lang.Integer#MIN_VALUE                    
                </see>
            </javadoc>
            <method name="round" type="int" line="634">
                <params>
                    <param name="a" type="float"/>
                </params>
            </method>
            <javadoc line="638">
                Returns the closest {@code long} to the argument, with ties
                  rounding up.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
                  &lt;li&gt;If the argument is negative infinity or any value less than or
                  equal to the value of {@code Long.MIN_VALUE}, the result is
                  equal to the value of {@code Long.MIN_VALUE}.
                  &lt;li&gt;If the argument is positive infinity or any value greater than or
                  equal to the value of {@code Long.MAX_VALUE}, the result is
                  equal to the value of {@code Long.MAX_VALUE}.&lt;/ul&gt;                
                <param>
                    a  a floating-point value to be rounded to a{@code long}.                    
                </param>
                <return>
                    the value of the argument rounded to the nearest{@code long} value.                    
                </return>
                <see>
                    java.lang.Long#MAX_VALUE                    
                </see>
                <see>
                    java.lang.Long#MIN_VALUE                    
                </see>
            </javadoc>
            <method name="round" type="long" line="658">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <declaration name="randomNumberGenerator" type="Random" line="662"/>
            <method name="initRNG" type="Random" line="664">
                <declaration name="rnd" type="Random" line="665"/>
            </method>
            <javadoc line="669">
                Returns a {@code double} value with a positive sign, greater
                  than or equal to {@code 0.0} and less than {@code 1.0}.
                  Returned values are chosen pseudorandomly with (approximately)
                  uniform distribution from that range.
                  &lt;p&gt;When this method is first called, it creates a single new
                  pseudorandom-number generator, exactly as if by the expression
                  &lt;blockquote&gt;{@code new java.util.Random()}&lt;/blockquote&gt;
                  This new pseudorandom-number generator is used thereafter for
                  all calls to this method and is used nowhere else.
                  &lt;p&gt;This method is properly synchronized to allow correct use by
                  more than one thread. However, if many threads need to generate
                  pseudorandom numbers at a great rate, it may reduce contention
                  for each thread to have its own pseudorandom number generator.                
                <return>
                    a pseudorandom {@code double} greater than or equal
                      to {@code 0.0} and less than {@code 1.0}.                    
                </return>
                <see>
                    Random#nextDouble()                    
                </see>
            </javadoc>
            <method name="random" type="double" line="692">
                <declaration name="rnd" type="Random" line="693"/>
            </method>
            <javadoc line="698">
                Returns the absolute value of an {@code int} value..
                  If the argument is not negative, the argument is returned.
                  If the argument is negative, the negation of the argument is returned.
                  &lt;p&gt;Note that if the argument is equal to the value of{@link Integer#MIN_VALUE}, the most negative representable{@code int} value, the result is that same value, which is
                  negative.                
                <param>
                    a   the  argument whose absolute value is to be determined.                    
                </param>
                <return>
                    the absolute value of the argument.                    
                </return>
            </javadoc>
            <method name="abs" type="int" line="711">
                <params>
                    <param name="a" type="int"/>
                </params>
            </method>
            <javadoc line="715">
                Returns the absolute value of a {@code long} value.
                  If the argument is not negative, the argument is returned.
                  If the argument is negative, the negation of the argument is returned.
                  &lt;p&gt;Note that if the argument is equal to the value of{@link Long#MIN_VALUE}, the most negative representable{@code long} value, the result is that same value, which
                  is negative.                
                <param>
                    a   the  argument whose absolute value is to be determined.                    
                </param>
                <return>
                    the absolute value of the argument.                    
                </return>
            </javadoc>
            <method name="abs" type="long" line="728">
                <params>
                    <param name="a" type="long"/>
                </params>
            </method>
            <javadoc line="732">
                Returns the absolute value of a {@code float} value.
                  If the argument is not negative, the argument is returned.
                  If the argument is negative, the negation of the argument is returned.
                  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the
                  result is positive zero.
                  &lt;li&gt;If the argument is infinite, the result is positive infinity.
                  &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
                  In other words, the result is the same as the value of the expression:
                  &lt;p&gt;{@code Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))}                
                <param>
                    a   the argument whose absolute value is to be determined                    
                </param>
                <return>
                    the absolute value of the argument.                    
                </return>
            </javadoc>
            <method name="abs" type="float" line="747">
                <params>
                    <param name="a" type="float"/>
                </params>
            </method>
            <javadoc line="751">
                Returns the absolute value of a {@code double} value.
                  If the argument is not negative, the argument is returned.
                  If the argument is negative, the negation of the argument is returned.
                  Special cases:
                  &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the result
                  is positive zero.
                  &lt;li&gt;If the argument is infinite, the result is positive infinity.
                  &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
                  In other words, the result is the same as the value of the expression:
                  &lt;p&gt;{@code Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)}                
                <param>
                    a   the argument whose absolute value is to be determined                    
                </param>
                <return>
                    the absolute value of the argument.                    
                </return>
            </javadoc>
            <method name="abs" type="double" line="766">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="770">
                Returns the greater of two {@code int} values. That is, the
                  result is the argument closer to the value of{@link Integer#MAX_VALUE}. If the arguments have the same value,
                  the result is that same value.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the larger of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="max" type="int" line="780">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="784">
                Returns the greater of two {@code long} values. That is, the
                  result is the argument closer to the value of{@link Long#MAX_VALUE}. If the arguments have the same value,
                  the result is that same value.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the larger of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="max" type="long" line="794">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <declaration name="negativeZeroFloatBits" type="long" line="799"/>
            <declaration name="negativeZeroDoubleBits" type="long" line="800"/>
            <javadoc line="802">
                Returns the greater of two {@code float} values.  That is,
                  the result is the argument closer to positive infinity. If the
                  arguments have the same value, the result is that same
                  value. If either value is NaN, then the result is NaN.  Unlike
                  the numerical comparison operators, this method considers
                  negative zero to be strictly smaller than positive zero. If one
                  argument is positive zero and the other negative zero, the
                  result is positive zero.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the larger of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="max" type="float" line="816">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
                <comment line="819">
                    a is NaN                    
                </comment>
                <comment line="823">
                    Raw conversion ok since NaN can&apos;t map to -0.0.                    
                </comment>
                <scope line="821"/>
            </method>
            <javadoc line="828">
                Returns the greater of two {@code double} values.  That
                  is, the result is the argument closer to positive infinity. If
                  the arguments have the same value, the result is that same
                  value. If either value is NaN, then the result is NaN.  Unlike
                  the numerical comparison operators, this method considers
                  negative zero to be strictly smaller than positive zero. If one
                  argument is positive zero and the other negative zero, the
                  result is positive zero.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the larger of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="max" type="double" line="842">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="845">
                    a is NaN                    
                </comment>
                <comment line="849">
                    Raw conversion ok since NaN can&apos;t map to -0.0.                    
                </comment>
                <scope line="847"/>
            </method>
            <javadoc line="854">
                Returns the smaller of two {@code int} values. That is,
                  the result the argument closer to the value of{@link Integer#MIN_VALUE}.  If the arguments have the same
                  value, the result is that same value.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the smaller of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="min" type="int" line="864">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="868">
                Returns the smaller of two {@code long} values. That is,
                  the result is the argument closer to the value of{@link Long#MIN_VALUE}. If the arguments have the same
                  value, the result is that same value.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the smaller of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="min" type="long" line="878">
                <params>
                    <param name="a" type="long"/>
                    <param name="b" type="long"/>
                </params>
            </method>
            <javadoc line="882">
                Returns the smaller of two {@code float} values.  That is,
                  the result is the value closer to negative infinity. If the
                  arguments have the same value, the result is that same
                  value. If either value is NaN, then the result is NaN.  Unlike
                  the numerical comparison operators, this method considers
                  negative zero to be strictly smaller than positive zero.  If
                  one argument is positive zero and the other is negative zero,
                  the result is negative zero.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the smaller of {@code a} and {@code b.}                    
                </return>
            </javadoc>
            <method name="min" type="float" line="896">
                <params>
                    <param name="a" type="float"/>
                    <param name="b" type="float"/>
                </params>
                <comment line="899">
                    a is NaN                    
                </comment>
                <comment line="903">
                    Raw conversion ok since NaN can&apos;t map to -0.0.                    
                </comment>
                <scope line="901"/>
            </method>
            <javadoc line="908">
                Returns the smaller of two {@code double} values.  That
                  is, the result is the value closer to negative infinity. If the
                  arguments have the same value, the result is that same
                  value. If either value is NaN, then the result is NaN.  Unlike
                  the numerical comparison operators, this method considers
                  negative zero to be strictly smaller than positive zero. If one
                  argument is positive zero and the other is negative zero, the
                  result is negative zero.                
                <param>
                    a   an argument.                    
                </param>
                <param>
                    b   another argument.                    
                </param>
                <return>
                    the smaller of {@code a} and {@code b}.                    
                </return>
            </javadoc>
            <method name="min" type="double" line="922">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                </params>
                <comment line="925">
                    a is NaN                    
                </comment>
                <comment line="929">
                    Raw conversion ok since NaN can&apos;t map to -0.0.                    
                </comment>
                <scope line="927"/>
            </method>
            <javadoc line="934">
                Returns the size of an ulp of the argument.  An ulp of a{@code double} value is the positive distance between this
                  floating-point value and the {@code double} value next
                  larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
                  &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive or negative infinity, then the
                  result is positive infinity.
                  &lt;li&gt; If the argument is positive or negative zero, then the result is{@code Double.MIN_VALUE}.
                  &lt;li&gt; If the argument is &amp;plusmn;{@code Double.MAX_VALUE}, then
                  the result is equal to 2&lt;sup&gt;971&lt;/sup&gt;.
                  &lt;/ul&gt;                
                <param>
                    d the floating-point value whose ulp is to be returned                    
                </param>
                <return>
                    the size of an ulp of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="ulp" type="double" line="957">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="961">
                Returns the size of an ulp of the argument.  An ulp of a{@code float} value is the positive distance between this
                  floating-point value and the {@code float} value next
                  larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
                  &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive or negative infinity, then the
                  result is positive infinity.
                  &lt;li&gt; If the argument is positive or negative zero, then the result is{@code Float.MIN_VALUE}.
                  &lt;li&gt; If the argument is &amp;plusmn;{@code Float.MAX_VALUE}, then
                  the result is equal to 2&lt;sup&gt;104&lt;/sup&gt;.
                  &lt;/ul&gt;                
                <param>
                    f the floating-point value whose ulp is to be returned                    
                </param>
                <return>
                    the size of an ulp of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="ulp" type="float" line="984">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="988">
                Returns the signum function of the argument; zero if the argument
                  is zero, 1.0 if the argument is greater than zero, -1.0 if the
                  argument is less than zero.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive zero or negative zero, then the
                  result is the same as the argument.
                  &lt;/ul&gt;                
                <param>
                    d the floating-point value whose signum is to be returned                    
                </param>
                <return>
                    the signum function of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="double" line="1005">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="1009">
                Returns the signum function of the argument; zero if the argument
                  is zero, 1.0f if the argument is greater than zero, -1.0f if the
                  argument is less than zero.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, then the result is NaN.
                  &lt;li&gt; If the argument is positive zero or negative zero, then the
                  result is the same as the argument.
                  &lt;/ul&gt;                
                <param>
                    f the floating-point value whose signum is to be returned                    
                </param>
                <return>
                    the signum function of the argument                    
                </return>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="float" line="1026">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="sinh" type="double" line="1030"/>
            <javadoc line="1030">
                Returns the hyperbolic sine of a {@code double} value.
                  The hyperbolic sine of &lt;i&gt;x&lt;/i&gt; is defined to be
                  (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
                  where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN, then the result is NaN.
                  &lt;li&gt;If the argument is infinite, then the result is an infinity
                  with the same sign as the argument.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.
                  &lt;/ul&gt;                
                <param>
                    x The number whose hyperbolic sine is to be returned.                    
                </param>
                <return>
                    The hyperbolic sine of {@code x}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="cosh" type="double" line="1055"/>
            <javadoc line="1055">
                Returns the hyperbolic cosine of a {@code double} value.
                  The hyperbolic cosine of &lt;i&gt;x&lt;/i&gt; is defined to be
                  (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
                  where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN, then the result is NaN.
                  &lt;li&gt;If the argument is infinite, then the result is positive
                  infinity.
                  &lt;li&gt;If the argument is zero, then the result is {@code 1.0}.
                  &lt;/ul&gt;                
                <param>
                    x The number whose hyperbolic cosine is to be returned.                    
                </param>
                <return>
                    The hyperbolic cosine of {@code x}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="tanh" type="double" line="1079"/>
            <javadoc line="1079">
                Returns the hyperbolic tangent of a {@code double} value.
                  The hyperbolic tangent of &lt;i&gt;x&lt;/i&gt; is defined to be
                  (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/(&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;),
                  in other words, {@linkplain Math#sinhsinh(&lt;i&gt;x&lt;/i&gt;)}/{@linkplain Math#cosh cosh(&lt;i&gt;x&lt;/i&gt;)}.  Note
                  that the absolute value of the exact tanh is always less than
                  1.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN, then the result is NaN.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.
                  &lt;li&gt;If the argument is positive infinity, then the result is{@code +1.0}.
                  &lt;li&gt;If the argument is negative infinity, then the result is{@code -1.0}.
                  &lt;/ul&gt;                
                <param>
                    x The number whose hyperbolic tangent is to be returned.                    
                </param>
                <return>
                    The hyperbolic tangent of {@code x}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hypot" type="double" line="1110"/>
            <javadoc line="1110">
                Returns sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
                  without intermediate overflow or underflow.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is infinite, then the result
                  is positive infinity.
                  &lt;li&gt; If either argument is NaN and neither argument is infinite,
                  then the result is NaN.
                  &lt;/ul&gt;                
                <param>
                    x a value                    
                </param>
                <param>
                    y a value                    
                </param>
                <return>
                    sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
                      without intermediate overflow or underflow                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="expm1" type="double" line="1133"/>
            <javadoc line="1133">
                Returns &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-1.  Note that for values of
                  &lt;i&gt;x&lt;/i&gt; near 0, the exact sum of{@code expm1(x)}&amp;nbsp;+&amp;nbsp;1 is much closer to the true
                  result of &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt; than {@code exp(x)}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN, the result is NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is
                  positive infinity.
                  &lt;li&gt;If the argument is negative infinity, then the result is
                  -1.0.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.
                  &lt;/ul&gt;                
                <param>
                    x   the exponent to raise &lt;i&gt;e&lt;/i&gt; to in the computation of
                      &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-1.                    
                </param>
                <return>
                    the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="log1p" type="double" line="1161"/>
            <javadoc line="1161">
                Returns the natural logarithm of the sum of the argument and 1.
                  Note that for small values {@code x}, the result of{@code log1p(x)} is much closer to the true result of ln(1
                  + {@code x}) than the floating-point evaluation of{@code log(1.0+x)}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN or less than -1, then the result is
                  NaN.
                  &lt;li&gt;If the argument is positive infinity, then the result is
                  positive infinity.
                  &lt;li&gt;If the argument is negative one, then the result is
                  negative infinity.
                  &lt;li&gt;If the argument is zero, then the result is a zero with the
                  same sign as the argument.
                  &lt;/ul&gt;                
                <param>
                    x   a value                    
                </param>
                <return>
                    the value ln({@code x}&amp;nbsp;+&amp;nbsp;1), the natural
                      log of {@code x}&amp;nbsp;+&amp;nbsp;1                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="1192">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  For this method, a NaN{@code sign} argument is always treated as if it were
                  positive.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copySign" type="double" line="1204">
                <params>
                    <param name="magnitude" type="double"/>
                    <param name="sign" type="double"/>
                </params>
            </method>
            <javadoc line="1208">
                Returns the first floating-point argument with the sign of the
                  second floating-point argument.  For this method, a NaN{@code sign} argument is always treated as if it were
                  positive.                
                <param>
                    magnitude  the parameter providing the magnitude of the result                    
                </param>
                <param>
                    sign   the parameter providing the sign of the result                    
                </param>
                <return>
                    a value with the magnitude of {@code magnitude}and the sign of {@code sign}.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="copySign" type="float" line="1220">
                <params>
                    <param name="magnitude" type="float"/>
                    <param name="sign" type="float"/>
                </params>
            </method>
            <javadoc line="1223">
                Returns the unbiased exponent used in the representation of a{@code float}.  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN or infinite, then the result is{@link Float#MAX_EXPONENT} + 1.
                  &lt;li&gt;If the argument is zero or subnormal, then the result is{@link Float#MIN_EXPONENT} -1.
                  &lt;/ul&gt;                
                <param>
                    f a {@code float} value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getExponent" type="int" line="1236">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="1240">
                Returns the unbiased exponent used in the representation of a{@code double}.  Special cases:
                  &lt;ul&gt;
                  &lt;li&gt;If the argument is NaN or infinite, then the result is{@link Double#MAX_EXPONENT} + 1.
                  &lt;li&gt;If the argument is zero or subnormal, then the result is{@link Double#MIN_EXPONENT} -1.
                  &lt;/ul&gt;                
                <param>
                    d a {@code double} value                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getExponent" type="int" line="1253">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="1257">
                Returns the floating-point number adjacent to the first
                  argument in the direction of the second argument.  If both
                  arguments compare as equal the second argument is returned.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is a NaN, then NaN is returned.
                  &lt;li&gt; If both arguments are signed zeros, {@code direction}is returned unchanged (as implied by the requirement of
                  returning the second argument if the arguments compare as
                  equal).
                  &lt;li&gt; If {@code start} is
                  &amp;plusmn;{@link Double#MIN_VALUE} and {@code direction}has a value such that the result should have a smaller
                  magnitude, then a zero with the same sign as {@code start}is returned.
                  &lt;li&gt; If {@code start} is infinite and{@code direction} has a value such that the result should
                  have a smaller magnitude, {@link Double#MAX_VALUE} with the
                  same sign as {@code start} is returned.
                  &lt;li&gt; If {@code start} is equal to &amp;plusmn;{@link Double#MAX_VALUE} and {@code direction} has a
                  value such that the result should have a larger magnitude, an
                  infinity with same sign as {@code start} is returned.
                  &lt;/ul&gt;                
                <param>
                    start  starting floating-point value                    
                </param>
                <param>
                    direction value indicating which of{@code start}&apos;s neighbors or {@code start} should
                      be returned                    
                </param>
                <return>
                    The floating-point number adjacent to {@code start} in the
                      direction of {@code direction}.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="nextAfter" type="double" line="1296">
                <params>
                    <param name="start" type="double"/>
                    <param name="direction" type="double"/>
                </params>
            </method>
            <javadoc line="1300">
                Returns the floating-point number adjacent to the first
                  argument in the direction of the second argument.  If both
                  arguments compare as equal a value equivalent to the second argument
                  is returned.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If either argument is a NaN, then NaN is returned.
                  &lt;li&gt; If both arguments are signed zeros, a value equivalent
                  to {@code direction} is returned.
                  &lt;li&gt; If {@code start} is
                  &amp;plusmn;{@link Float#MIN_VALUE} and {@code direction}has a value such that the result should have a smaller
                  magnitude, then a zero with the same sign as {@code start}is returned.
                  &lt;li&gt; If {@code start} is infinite and{@code direction} has a value such that the result should
                  have a smaller magnitude, {@link Float#MAX_VALUE} with the
                  same sign as {@code start} is returned.
                  &lt;li&gt; If {@code start} is equal to &amp;plusmn;{@link Float#MAX_VALUE} and {@code direction} has a
                  value such that the result should have a larger magnitude, an
                  infinity with same sign as {@code start} is returned.
                  &lt;/ul&gt;                
                <param>
                    start  starting floating-point value                    
                </param>
                <param>
                    direction value indicating which of{@code start}&apos;s neighbors or {@code start} should
                      be returned                    
                </param>
                <return>
                    The floating-point number adjacent to {@code start} in the
                      direction of {@code direction}.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="nextAfter" type="float" line="1338">
                <params>
                    <param name="start" type="float"/>
                    <param name="direction" type="double"/>
                </params>
            </method>
            <javadoc line="1342">
                Returns the floating-point value adjacent to {@code d} in
                  the direction of positive infinity.  This method is
                  semantically equivalent to {@code nextAfter(d,
                  Double.POSITIVE_INFINITY)}; however, a {@code nextUp}implementation may run faster than its equivalent{@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is positive infinity, the result is
                  positive infinity.
                  &lt;li&gt; If the argument is zero, the result is{@link Double#MIN_VALUE}&lt;/ul&gt;                
                <param>
                    d starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to positive
                      infinity.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="nextUp" type="double" line="1367">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="1371">
                Returns the floating-point value adjacent to {@code f} in
                  the direction of positive infinity.  This method is
                  semantically equivalent to {@code nextAfter(f,
                  Float.POSITIVE_INFINITY)}; however, a {@code nextUp}implementation may run faster than its equivalent{@code nextAfter} call.
                  &lt;p&gt;Special Cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the argument is NaN, the result is NaN.
                  &lt;li&gt; If the argument is positive infinity, the result is
                  positive infinity.
                  &lt;li&gt; If the argument is zero, the result is{@link Float#MIN_VALUE}&lt;/ul&gt;                
                <param>
                    f starting floating-point value                    
                </param>
                <return>
                    The adjacent floating-point value closer to positive
                      infinity.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="nextUp" type="float" line="1396">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="1401">
                Return {@code d} &amp;times;
                  2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
                  by a single correctly rounded floating-point multiply to a
                  member of the double value set.  See the Java
                  Language Specification for a discussion of floating-point
                  value sets.  If the exponent of the result is between {@link Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the
                  answer is calculated exactly.  If the exponent of the result
                  would be larger than {@code Double.MAX_EXPONENT}, an
                  infinity is returned.  Note that if the result is subnormal,
                  precision may be lost; that is, when {@code scalb(x, n)}is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
                  &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
                  sign as {@code d}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the first argument is NaN, NaN is returned.
                  &lt;li&gt; If the first argument is infinite, then an infinity of the
                  same sign is returned.
                  &lt;li&gt; If the first argument is zero, then a zero of the same
                  sign is returned.
                  &lt;/ul&gt;                
                <param>
                    d number to be scaled by a power of two.                    
                </param>
                <param>
                    scaleFactor power of 2 used to scale {@code d}                    
                </param>
                <return>
                    {@code d} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="scalb" type="double" line="1431">
                <params>
                    <param name="d" type="double"/>
                    <param name="scaleFactor" type="int"/>
                </params>
            </method>
            <javadoc line="1435">
                Return {@code f} &amp;times;
                  2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
                  by a single correctly rounded floating-point multiply to a
                  member of the float value set.  See the Java
                  Language Specification for a discussion of floating-point
                  value sets.  If the exponent of the result is between {@link Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the
                  answer is calculated exactly.  If the exponent of the result
                  would be larger than {@code Float.MAX_EXPONENT}, an
                  infinity is returned.  Note that if the result is subnormal,
                  precision may be lost; that is, when {@code scalb(x, n)}is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
                  &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
                  sign as {@code f}.
                  &lt;p&gt;Special cases:
                  &lt;ul&gt;
                  &lt;li&gt; If the first argument is NaN, NaN is returned.
                  &lt;li&gt; If the first argument is infinite, then an infinity of the
                  same sign is returned.
                  &lt;li&gt; If the first argument is zero, then a zero of the same
                  sign is returned.
                  &lt;/ul&gt;                
                <param>
                    f number to be scaled by a power of two.                    
                </param>
                <param>
                    scaleFactor power of 2 used to scale {@code f}                    
                </param>
                <return>
                    {@code f} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="scalb" type="float" line="1465">
                <params>
                    <param name="f" type="float"/>
                    <param name="scaleFactor" type="int"/>
                </params>
            </method>
        </class>
    </source>