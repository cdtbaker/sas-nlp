<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * Provides classes that are fundamental to the design of the Java
 * programming language. The most important classes are {@codeObject}, which is the root of the class hierarchy, and {@codeClass}, instances of which represent classes at run time.
 * <p>Frequently it is necessary to represent a value of primitive
 * type as if it were an object. The wrapper classes {@code Boolean},{@code Character}, {@code Integer}, {@code Long}, {@code Float},
 * and {@code Double} serve this purpose.  An object of type {@codeDouble}, for example, contains a field whose type is double,
 * representing that value in such a way that a reference to it can be
 * stored in a variable of reference type.  These classes also provide
 * a number of methods for converting among primitive values, as well
 * as supporting such standard methods as equals and hashCode.  The{@code Void} class is a non-instantiable class that holds a
 * reference to a {@code Class} object representing the type void.
 * <p>The class {@code Math} provides commonly used mathematical
 * functions such as sine, cosine, and square root. The classes {@codeString}, {@code StringBuffer}, and {@code StringBuilder} similarly
 * provide commonly used operations on character strings.
 * <p>Classes {@code ClassLoader}, {@code Process}, {@codeProcessBuilder}, {@code Runtime}, {@code SecurityManager}, and{@code System} provide "system operations" that manage the dynamic
 * loading of classes, creation of external processes, host
 * environment inquiries such as the time of day, and enforcement of
 * security policies.
 * <p>Class {@code Throwable} encompasses objects that may be thrown
 * by the {@code throw} statement. Subclasses of {@code Throwable}represent errors and exceptions.
 * <a name="charenc"></a>
 * <h3>Character Encodings</h3>
 * The specification of the {@link java.nio.charset.Charsetjava.nio.charset.Charset} class describes the naming conventions
 * for character encodings as well as the set of standard encodings
 * that must be supported by every implementation of the Java
 * platform.
 * @since JDK1.0
 */
package java.lang">
        <javadoc line="26">
            Provides classes that are fundamental to the design of the Java
              programming language. The most important classes are {@codeObject}, which is the root of the class hierarchy, and {@codeClass}, instances of which represent classes at run time.
              &lt;p&gt;Frequently it is necessary to represent a value of primitive
              type as if it were an object. The wrapper classes {@code Boolean},{@code Character}, {@code Integer}, {@code Long}, {@code Float},
              and {@code Double} serve this purpose.  An object of type {@codeDouble}, for example, contains a field whose type is double,
              representing that value in such a way that a reference to it can be
              stored in a variable of reference type.  These classes also provide
              a number of methods for converting among primitive values, as well
              as supporting such standard methods as equals and hashCode.  The{@code Void} class is a non-instantiable class that holds a
              reference to a {@code Class} object representing the type void.
              &lt;p&gt;The class {@code Math} provides commonly used mathematical
              functions such as sine, cosine, and square root. The classes {@codeString}, {@code StringBuffer}, and {@code StringBuilder} similarly
              provide commonly used operations on character strings.
              &lt;p&gt;Classes {@code ClassLoader}, {@code Process}, {@codeProcessBuilder}, {@code Runtime}, {@code SecurityManager}, and{@code System} provide &quot;system operations&quot; that manage the dynamic
              loading of classes, creation of external processes, host
              environment inquiries such as the time of day, and enforcement of
              security policies.
              &lt;p&gt;Class {@code Throwable} encompasses objects that may be thrown
              by the {@code throw} statement. Subclasses of {@code Throwable}represent errors and exceptions.
              &lt;a name=&quot;charenc&quot;&gt;&lt;/a&gt;
              &lt;h3&gt;Character Encodings&lt;/h3&gt;
              The specification of the {@link java.nio.charset.Charsetjava.nio.charset.Charset} class describes the naming conventions
              for character encodings as well as the set of standard encodings
              that must be supported by every implementation of the Java
              platform.            
            <since>
                JDK1.0                
            </since>
        </javadoc>
    </source>