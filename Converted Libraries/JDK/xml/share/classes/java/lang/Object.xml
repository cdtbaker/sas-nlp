<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Object" line="28">
            <javadoc line="28">
                Class {@code Object} is the root of the class hierarchy.
                  Every class has {@code Object} as a superclass. All objects,
                  including arrays, implement the methods of this class.                
                <author>
                    unascribed                    
                </author>
                <see>
                    java.lang.Class                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="registerNatives" type="void" line="39"/>
            <scope line="40"/>
            <method name="getClass" type="Class<?>" line="44"/>
            <javadoc line="44">
                Returns the runtime class of this {@code Object}. The returned{@code Class} object is the object that is locked by {@codestatic synchronized} methods of the represented class.
                  &lt;p&gt;&lt;b&gt;The actual result type is {@code Class&lt;? extends |X|&gt;}where {@code |X|} is the erasure of the static type of the
                  expression on which {@code getClass} is called.&lt;/b&gt; For
                  example, no cast is required in this code fragment:&lt;/p&gt;
                  &lt;p&gt;{@code Number n = 0;                             }&lt;br&gt;{@code Class&lt;? extends Number&gt; c = n.getClass(); }&lt;/p&gt;                
                <return>
                    The {@code Class} object that represents the runtime
                      class of this object.                    
                </return>
                <see>
                    Class Literals, section 15.8.2 of
                      <cite>The Java&trade; Language Specification</cite>.                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="66"/>
            <javadoc line="66">
                Returns a hash code value for the object. This method is
                  supported for the benefit of hash tables such as those provided by{@link java.util.HashMap}.
                  &lt;p&gt;
                  The general contract of {@code hashCode} is:
                  &lt;ul&gt;
                  &lt;li&gt;Whenever it is invoked on the same object more than once during
                  an execution of a Java application, the {@code hashCode} method
                  must consistently return the same integer, provided no information
                  used in {@code equals} comparisons on the object is modified.
                  This integer need not remain consistent from one execution of an
                  application to another execution of the same application.
                  &lt;li&gt;If two objects are equal according to the {@code equals(Object)}method, then calling the {@code hashCode} method on each of
                  the two objects must produce the same integer result.
                  &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal
                  according to the {@link java.lang.Object#equals(java.lang.Object)}method, then calling the {@code hashCode} method on each of the
                  two objects must produce distinct integer results.  However, the
                  programmer should be aware that producing distinct integer results
                  for unequal objects may improve the performance of hash tables.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As much as is reasonably practical, the hashCode method defined by
                  class {@code Object} does return distinct integers for distinct
                  objects. (This is typically implemented by converting the internal
                  address of the object into an integer, but this implementation
                  technique is not required by the
                  Java&lt;font size=&quot;-2&quot;&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/font&gt; programming language.)                
                <return>
                    a hash code value for this object.                    
                </return>
                <see>
                    java.lang.Object#equals(java.lang.Object)                    
                </see>
                <see>
                    java.lang.System#identityHashCode                    
                </see>
            </javadoc>
            <javadoc line="103">
                Indicates whether some other object is &quot;equal to&quot; this one.
                  &lt;p&gt;
                  The {@code equals} method implements an equivalence relation
                  on non-null object references:
                  &lt;ul&gt;
                  &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value{@code x}, {@code x.equals(x)} should return{@code true}.
                  &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values{@code x} and {@code y}, {@code x.equals(y)}should return {@code true} if and only if{@code y.equals(x)} returns {@code true}.
                  &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values{@code x}, {@code y}, and {@code z}, if{@code x.equals(y)} returns {@code true} and{@code y.equals(z)} returns {@code true}, then{@code x.equals(z)} should return {@code true}.
                  &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values{@code x} and {@code y}, multiple invocations of{@code x.equals(y)} consistently return {@code true}or consistently return {@code false}, provided no
                  information used in {@code equals} comparisons on the
                  objects is modified.
                  &lt;li&gt;For any non-null reference value {@code x},{@code x.equals(null)} should return {@code false}.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The {@code equals} method for class {@code Object} implements
                  the most discriminating possible equivalence relation on objects;
                  that is, for any non-null reference values {@code x} and{@code y}, this method returns {@code true} if and only
                  if {@code x} and {@code y} refer to the same object
                  ({@code x == y} has the value {@code true}).
                  &lt;p&gt;
                  Note that it is generally necessary to override the {@code hashCode}method whenever this method is overridden, so as to maintain the
                  general contract for the {@code hashCode} method, which states
                  that equal objects must have equal hash codes.                
                <param>
                    obj   the reference object with which to compare.                    
                </param>
                <return>
                    {@code true} if this object is the same as the obj
                      argument; {@code false} otherwise.                    
                </return>
                <see>
                    #hashCode()                    
                </see>
                <see>
                    java.util.HashMap                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="149">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="clone" type="Object" line="153"/>
            <javadoc line="153">
                Creates and returns a copy of this object.  The precise meaning
                  of &quot;copy&quot; may depend on the class of the object. The general
                  intent is that, for any object {@code x}, the expression:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;
                  will be true, and that the expression:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;
                  will be {@code true}, but these are not absolute requirements.
                  While it is typically the case that:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;
                  will be {@code true}, this is not an absolute requirement.
                  &lt;p&gt;
                  By convention, the returned object should be obtained by calling{@code super.clone}.  If a class and all of its superclasses (except{@code Object}) obey this convention, it will be the case that{@code x.clone().getClass() == x.getClass()}.
                  &lt;p&gt;
                  By convention, the object returned by this method should be independent
                  of this object (which is being cloned).  To achieve this independence,
                  it may be necessary to modify one or more fields of the object returned
                  by {@code super.clone} before returning it.  Typically, this means
                  copying any mutable objects that comprise the internal &quot;deep structure&quot;
                  of the object being cloned and replacing the references to these
                  objects with references to the copies.  If a class contains only
                  primitive fields or references to immutable objects, then it is usually
                  the case that no fields in the object returned by {@code super.clone}need to be modified.
                  &lt;p&gt;
                  The method {@code clone} for class {@code Object} performs a
                  specific cloning operation. First, if the class of this object does
                  not implement the interface {@code Cloneable}, then a{@code CloneNotSupportedException} is thrown. Note that all arrays
                  are considered to implement the interface {@code Cloneable} and that
                  the return type of the {@code clone} method of an array type {@code T[]}is {@code T[]} where T is any reference or primitive type.
                  Otherwise, this method creates a new instance of the class of this
                  object and initializes all its fields with exactly the contents of
                  the corresponding fields of this object, as if by assignment; the
                  contents of the fields are not themselves cloned. Thus, this method
                  performs a &quot;shallow copy&quot; of this object, not a &quot;deep copy&quot; operation.
                  &lt;p&gt;
                  The class {@code Object} does not itself implement the interface{@code Cloneable}, so calling the {@code clone} method on an object
                  whose class is {@code Object} will result in throwing an
                  exception at run time.                
                <return>
                    a clone of this instance.                    
                </return>
                <exception>
                    CloneNotSupportedException  if the object's class does not
                      support the {@code Cloneable} interface. Subclasses
                      that override the {@code clone} method can also
                      throw this exception to indicate that an instance cannot
                      be cloned.                    
                </exception>
                <see>
                    java.lang.Cloneable                    
                </see>
            </javadoc>
            <javadoc line="215">
                Returns a string representation of the object. In general, the{@code toString} method returns a string that
                  &quot;textually represents&quot; this object. The result should
                  be a concise but informative representation that is easy for a
                  person to read.
                  It is recommended that all subclasses override this method.
                  &lt;p&gt;
                  The {@code toString} method for class {@code Object}returns a string consisting of the name of the class of which the
                  object is an instance, the at-sign character `{@code @}&apos;, and
                  the unsigned hexadecimal representation of the hash code of the
                  object. In other words, this method returns a string equal to the
                  value of:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    a string representation of the object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="236"/>
            <method name="notify" type="void" line="240"/>
            <javadoc line="240">
                Wakes up a single thread that is waiting on this object&apos;s
                  monitor. If any threads are waiting on this object, one of them
                  is chosen to be awakened. The choice is arbitrary and occurs at
                  the discretion of the implementation. A thread waits on an object&apos;s
                  monitor by calling one of the {@code wait} methods.
                  &lt;p&gt;
                  The awakened thread will not be able to proceed until the current
                  thread relinquishes the lock on this object. The awakened thread will
                  compete in the usual manner with any other threads that might be
                  actively competing to synchronize on this object; for example, the
                  awakened thread enjoys no reliable privilege or disadvantage in being
                  the next thread to lock this object.
                  &lt;p&gt;
                  This method should only be called by a thread that is the owner
                  of this object&apos;s monitor. A thread becomes the owner of the
                  object&apos;s monitor in one of three ways:
                  &lt;ul&gt;
                  &lt;li&gt;By executing a synchronized instance method of that object.
                  &lt;li&gt;By executing the body of a {@code synchronized} statement
                  that synchronizes on the object.
                  &lt;li&gt;For objects of type {@code Class,} by executing a
                  synchronized static method of that class.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Only one thread at a time can own an object&apos;s monitor.                
                <exception>
                    IllegalMonitorStateException  if the current thread is not
                      the owner of this object's monitor.                    
                </exception>
                <see>
                    java.lang.Object#notifyAll()                    
                </see>
                <see>
                    java.lang.Object#wait()                    
                </see>
            </javadoc>
            <method name="notifyAll" type="void" line="274"/>
            <javadoc line="274">
                Wakes up all threads that are waiting on this object&apos;s monitor. A
                  thread waits on an object&apos;s monitor by calling one of the{@code wait} methods.
                  &lt;p&gt;
                  The awakened threads will not be able to proceed until the current
                  thread relinquishes the lock on this object. The awakened threads
                  will compete in the usual manner with any other threads that might
                  be actively competing to synchronize on this object; for example,
                  the awakened threads enjoy no reliable privilege or disadvantage in
                  being the next thread to lock this object.
                  &lt;p&gt;
                  This method should only be called by a thread that is the owner
                  of this object&apos;s monitor. See the {@code notify} method for a
                  description of the ways in which a thread can become the owner of
                  a monitor.                
                <exception>
                    IllegalMonitorStateException  if the current thread is not
                      the owner of this object's monitor.                    
                </exception>
                <see>
                    java.lang.Object#notify()                    
                </see>
                <see>
                    java.lang.Object#wait()                    
                </see>
            </javadoc>
            <method name="wait" type="void" line="298"/>
            <javadoc line="298">
                Causes the current thread to wait until either another thread invokes the{@link java.lang.Object#notify()} method or the{@link java.lang.Object#notifyAll()} method for this object, or a
                  specified amount of time has elapsed.
                  &lt;p&gt;
                  The current thread must own this object&apos;s monitor.
                  &lt;p&gt;
                  This method causes the current thread (call it &lt;var&gt;T&lt;/var&gt;) to
                  place itself in the wait set for this object and then to relinquish
                  any and all synchronization claims on this object. Thread &lt;var&gt;T&lt;/var&gt;
                  becomes disabled for thread scheduling purposes and lies dormant
                  until one of four things happens:
                  &lt;ul&gt;
                  &lt;li&gt;Some other thread invokes the {@code notify} method for this
                  object and thread &lt;var&gt;T&lt;/var&gt; happens to be arbitrarily chosen as
                  the thread to be awakened.
                  &lt;li&gt;Some other thread invokes the {@code notifyAll} method for this
                  object.
                  &lt;li&gt;Some other thread {@linkplain Thread#interrupt() interrupts}thread &lt;var&gt;T&lt;/var&gt;.
                  &lt;li&gt;The specified amount of real time has elapsed, more or less.  If{@code timeout} is zero, however, then real time is not taken into
                  consideration and the thread simply waits until notified.
                  &lt;/ul&gt;
                  The thread &lt;var&gt;T&lt;/var&gt; is then removed from the wait set for this
                  object and re-enabled for thread scheduling. It then competes in the
                  usual manner with other threads for the right to synchronize on the
                  object; once it has gained control of the object, all its
                  synchronization claims on the object are restored to the status quo
                  ante - that is, to the situation as of the time that the {@code wait}method was invoked. Thread &lt;var&gt;T&lt;/var&gt; then returns from the
                  invocation of the {@code wait} method. Thus, on return from the{@code wait} method, the synchronization state of the object and of
                  thread {@code T} is exactly as it was when the {@code wait} method
                  was invoked.
                  &lt;p&gt;
                  A thread can also wake up without being notified, interrupted, or
                  timing out, a so-called &lt;i&gt;spurious wakeup&lt;/i&gt;.  While this will rarely
                  occur in practice, applications must guard against it by testing for
                  the condition that should have caused the thread to be awakened, and
                  continuing to wait if the condition is not satisfied.  In other words,
                  waits should always occur in loops, like this one:
                  &lt;pre&gt;
                  synchronized (obj) {
                  while (&amp;lt;condition does not hold&amp;gt;)
                  obj.wait(timeout);
                  ... // Perform action appropriate to condition
                  }
                  &lt;/pre&gt;
                  (For more information on this topic, see Section 3.2.3 in Doug Lea&apos;s
                  &quot;Concurrent Programming in Java (Second Edition)&quot; (Addison-Wesley,
                  2000), or Item 50 in Joshua Bloch&apos;s &quot;Effective Java Programming
                  Language Guide&quot; (Addison-Wesley, 2001).
                  &lt;p&gt;If the current thread is {@linkplain java.lang.Thread#interrupt()interrupted} by any thread before or while it is waiting, then an{@code InterruptedException} is thrown.  This exception is not
                  thrown until the lock status of this object has been restored as
                  described above.
                  &lt;p&gt;
                  Note that the {@code wait} method, as it places the current thread
                  into the wait set for this object, unlocks only this object; any
                  other objects on which the current thread may be synchronized remain
                  locked while the thread waits.
                  &lt;p&gt;
                  This method should only be called by a thread that is the owner
                  of this object&apos;s monitor. See the {@code notify} method for a
                  description of the ways in which a thread can become the owner of
                  a monitor.                
                <param>
                    timeout   the maximum time to wait in milliseconds.                    
                </param>
                <exception>
                    IllegalArgumentException      if the value of timeout is
                      negative.                    
                </exception>
                <exception>
                    IllegalMonitorStateException  if the current thread is not
                      the owner of the object's monitor.                    
                </exception>
                <exception>
                    InterruptedException if any thread interrupted the
                      current thread before or while the current thread
                      was waiting for a notification.  The <i>interrupted
                      status</i> of the current thread is cleared when
                      this exception is thrown.                    
                </exception>
                <see>
                    java.lang.Object#notify()                    
                </see>
                <see>
                    java.lang.Object#notifyAll()                    
                </see>
            </javadoc>
            <javadoc line="385">
                Causes the current thread to wait until another thread invokes the{@link java.lang.Object#notify()} method or the{@link java.lang.Object#notifyAll()} method for this object, or
                  some other thread interrupts the current thread, or a certain
                  amount of real time has elapsed.
                  &lt;p&gt;
                  This method is similar to the {@code wait} method of one
                  argument, but it allows finer control over the amount of time to
                  wait for a notification before giving up. The amount of real time,
                  measured in nanoseconds, is given by:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  1000000timeout+nanos&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  In all other respects, this method does the same thing as the
                  method {@link #wait(long)} of one argument. In particular,{@code wait(0, 0)} means the same thing as {@code wait(0)}.
                  &lt;p&gt;
                  The current thread must own this object&apos;s monitor. The thread
                  releases ownership of this monitor and waits until either of the
                  following two conditions has occurred:
                  &lt;ul&gt;
                  &lt;li&gt;Another thread notifies threads waiting on this object&apos;s monitor
                  to wake up either through a call to the {@code notify} method
                  or the {@code notifyAll} method.
                  &lt;li&gt;The timeout period, specified by {@code timeout}milliseconds plus {@code nanos} nanoseconds arguments, has
                  elapsed.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The thread then waits until it can re-obtain ownership of the
                  monitor and resumes execution.
                  &lt;p&gt;
                  As in the one argument version, interrupts and spurious wakeups are
                  possible, and this method should always be used in a loop:
                  &lt;pre&gt;
                  synchronized (obj) {
                  while (&amp;lt;condition does not hold&amp;gt;)
                  obj.wait(timeout, nanos);
                  ... // Perform action appropriate to condition
                  }
                  &lt;/pre&gt;
                  This method should only be called by a thread that is the owner
                  of this object&apos;s monitor. See the {@code notify} method for a
                  description of the ways in which a thread can become the owner of
                  a monitor.                
                <param>
                    timeout   the maximum time to wait in milliseconds.                    
                </param>
                <param>
                    nanos      additional time, in nanoseconds range
                      0-999999.                    
                </param>
                <exception>
                    IllegalArgumentException      if the value of timeout is
                      negative or the value of nanos is
                      not in the range 0-999999.                    
                </exception>
                <exception>
                    IllegalMonitorStateException  if the current thread is not
                      the owner of this object's monitor.                    
                </exception>
                <exception>
                    InterruptedException if any thread interrupted the
                      current thread before or while the current thread
                      was waiting for a notification.  The <i>interrupted
                      status</i> of the current thread is cleared when
                      this exception is thrown.                    
                </exception>
            </javadoc>
            <method name="wait" type="void" line="447">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="nanos" type="int"/>
                </params>
                <scope line="448"/>
                <scope line="452"/>
                <scope line="457"/>
            </method>
            <javadoc line="464">
                Causes the current thread to wait until another thread invokes the{@link java.lang.Object#notify()} method or the{@link java.lang.Object#notifyAll()} method for this object.
                  In other words, this method behaves exactly as if it simply
                  performs the call {@code wait(0)}.
                  &lt;p&gt;
                  The current thread must own this object&apos;s monitor. The thread
                  releases ownership of this monitor and waits until another thread
                  notifies threads waiting on this object&apos;s monitor to wake up
                  either through a call to the {@code notify} method or the{@code notifyAll} method. The thread then waits until it can
                  re-obtain ownership of the monitor and resumes execution.
                  &lt;p&gt;
                  As in the one argument version, interrupts and spurious wakeups are
                  possible, and this method should always be used in a loop:
                  &lt;pre&gt;
                  synchronized (obj) {
                  while (&amp;lt;condition does not hold&amp;gt;)
                  obj.wait();
                  ... // Perform action appropriate to condition
                  }
                  &lt;/pre&gt;
                  This method should only be called by a thread that is the owner
                  of this object&apos;s monitor. See the {@code notify} method for a
                  description of the ways in which a thread can become the owner of
                  a monitor.                
                <exception>
                    IllegalMonitorStateException  if the current thread is not
                      the owner of the object's monitor.                    
                </exception>
                <exception>
                    InterruptedException if any thread interrupted the
                      current thread before or while the current thread
                      was waiting for a notification.  The <i>interrupted
                      status</i> of the current thread is cleared when
                      this exception is thrown.                    
                </exception>
                <see>
                    java.lang.Object#notify()                    
                </see>
                <see>
                    java.lang.Object#notifyAll()                    
                </see>
            </javadoc>
            <method name="wait" type="void" line="502"/>
            <javadoc line="506">
                Called by the garbage collector on an object when garbage collection
                  determines that there are no more references to the object.
                  A subclass overrides the {@code finalize} method to dispose of
                  system resources or to perform other cleanup.
                  &lt;p&gt;
                  The general contract of {@code finalize} is that it is invoked
                  if and when the Java&lt;font size=&quot;-2&quot;&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/font&gt; virtual
                  machine has determined that there is no longer any
                  means by which this object can be accessed by any thread that has
                  not yet died, except as a result of an action taken by the
                  finalization of some other object or class which is ready to be
                  finalized. The {@code finalize} method may take any action, including
                  making this object available again to other threads; the usual purpose
                  of {@code finalize}, however, is to perform cleanup actions before
                  the object is irrevocably discarded. For example, the finalize method
                  for an object that represents an input/output connection might perform
                  explicit I/O transactions to break the connection before the object is
                  permanently discarded.
                  &lt;p&gt;
                  The {@code finalize} method of class {@code Object} performs no
                  special action; it simply returns normally. Subclasses of{@code Object} may override this definition.
                  &lt;p&gt;
                  The Java programming language does not guarantee which thread will
                  invoke the {@code finalize} method for any given object. It is
                  guaranteed, however, that the thread that invokes finalize will not
                  be holding any user-visible synchronization locks when finalize is
                  invoked. If an uncaught exception is thrown by the finalize method,
                  the exception is ignored and finalization of that object terminates.
                  &lt;p&gt;
                  After the {@code finalize} method has been invoked for an object, no
                  further action is taken until the Java virtual machine has again
                  determined that there is no longer any means by which this object can
                  be accessed by any thread that has not yet died, including possible
                  actions by other objects or classes which are ready to be finalized,
                  at which point the object may be discarded.
                  &lt;p&gt;
                  The {@code finalize} method is never invoked more than once by a Java
                  virtual machine for any given object.
                  &lt;p&gt;
                  Any exception thrown by the {@code finalize} method causes
                  the finalization of this object to be halted, but is otherwise
                  ignored.                
                <throws>
                    Throwable the {@code Exception} raised by this method                    
                </throws>
            </javadoc>
            <method name="finalize" type="void" line="553"/>
        </class>
    </source>