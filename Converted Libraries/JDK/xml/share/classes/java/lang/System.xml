<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io"/>
        <import package="java.util.Properties"/>
        <import package="java.util.PropertyPermission"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AllPermission"/>
        <import package="java.nio.channels.Channel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <import package="sun.nio.ch.Interruptible"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.reflect.annotation.AnnotationType"/>
        <class name="System" line="41">
            <comment line="57">
                register the natives via the static initializer.
                
                 VM will invoke the initializeSystemClass method to complete
                 the initialization for this class separated from clinit.
                 Note that to use properties set by the VM, see the constraints
                 described in the initializeSystemClass method.                
            </comment>
            <comment line="122">
                The security manager for the system.                
            </comment>
            <comment line="1202">
                                
            </comment>
            <javadoc line="41">
                The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields
                  and methods. It cannot be instantiated.
                  &lt;p&gt;Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class
                  are standard input, standard output, and error output streams;
                  access to externally defined properties and environment
                  variables; a means of loading files and libraries; and a utility
                  method for quickly copying a portion of an array.                
                <author>
                    unascribed                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="registerNatives" type="void" line="63"/>
            <scope line="64"/>
            <javadoc line="68">
                Don&apos;t let anyone instantiate this class                
            </javadoc>
            <method name="System" type="constructor" line="69"/>
            <declaration name="in" type="InputStream" line="72"/>
            <javadoc line="72">
                The &quot;standard&quot; input stream. This stream is already
                  open and ready to supply input data. Typically this stream
                  corresponds to keyboard input or another input source specified by
                  the host environment or user.                
            </javadoc>
            <declaration name="out" type="PrintStream" line="80"/>
            <javadoc line="80">
                The &quot;standard&quot; output stream. This stream is already
                  open and ready to accept output data. Typically this stream
                  corresponds to display output or another output destination
                  specified by the host environment or user.
                  &lt;p&gt;
                  For simple stand-alone Java applications, a typical way to write
                  a line of output data is:
                  &lt;blockquote&gt;&lt;pre&gt;
                  System.out.println(data)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  See the &lt;code&gt;println&lt;/code&gt; methods in class &lt;code&gt;PrintStream&lt;/code&gt;.                
                <see>
                    java.io.PrintStream#println()                    
                </see>
                <see>
                    java.io.PrintStream#println(boolean)                    
                </see>
                <see>
                    java.io.PrintStream#println(char)                    
                </see>
                <see>
                    java.io.PrintStream#println(char[])                    
                </see>
                <see>
                    java.io.PrintStream#println(double)                    
                </see>
                <see>
                    java.io.PrintStream#println(float)                    
                </see>
                <see>
                    java.io.PrintStream#println(int)                    
                </see>
                <see>
                    java.io.PrintStream#println(long)                    
                </see>
                <see>
                    java.io.PrintStream#println(java.lang.Object)                    
                </see>
                <see>
                    java.io.PrintStream#println(java.lang.String)                    
                </see>
            </javadoc>
            <declaration name="err" type="PrintStream" line="107"/>
            <javadoc line="107">
                The &quot;standard&quot; error output stream. This stream is already
                  open and ready to accept output data.
                  &lt;p&gt;
                  Typically this stream corresponds to display output or another
                  output destination specified by the host environment or user. By
                  convention, this output stream is used to display error messages
                  or other information that should come to the immediate attention
                  of a user even if the principal output stream, the value of the
                  variable &lt;code&gt;out&lt;/code&gt;, has been redirected to a file or other
                  destination that is typically not continuously monitored.                
            </javadoc>
            <declaration name="security" type="SecurityManager" line="123"/>
            <javadoc line="125">
                Reassigns the &quot;standard&quot; input stream.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
                  to see if it&apos;s ok to reassign the &quot;standard&quot; input stream.
                  &lt;p&gt;                
                <param>
                    in the new standard input stream.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      reassigning of the standard input stream.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setIn" type="void" line="145">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <javadoc line="150">
                Reassigns the &quot;standard&quot; output stream.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
                  to see if it&apos;s ok to reassign the &quot;standard&quot; output stream.                
                <param>
                    out the new standard output stream                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      reassigning of the standard output stream.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setOut" type="void" line="169">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="174">
                Reassigns the &quot;standard&quot; error output stream.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
                  to see if it&apos;s ok to reassign the &quot;standard&quot; error output stream.                
                <param>
                    err the new standard error output stream.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      reassigning of the standard error output stream.                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setErr" type="void" line="193">
                <params>
                    <param name="err" type="PrintStream"/>
                </params>
            </method>
            <declaration name="cons" type="Console" line="198"/>
            <javadoc line="199">
                Returns the unique {@link java.io.Console Console} object associated
                  with the current Java virtual machine, if any.                
                <return>
                    The system console, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="console" type="Console" line="207">
                <scope line="208">
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="216">
                Returns the channel inherited from the entity that created this
                  Java virtual machine.
                  &lt;p&gt; This method returns the channel obtained by invoking the{@link java.nio.channels.spi.SelectorProvider#inheritedChannelinheritedChannel} method of the system-wide default{@link java.nio.channels.spi.SelectorProvider} object. &lt;/p&gt;
                  &lt;p&gt; In addition to the network-oriented channels described in{@link java.nio.channels.spi.SelectorProvider#inheritedChannelinheritedChannel}, this method may return other kinds of
                  channels in the future.                
                <return>
                    The inherited channel, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;.                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager is present and it does not
                      permit access to the channel.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="inheritedChannel" type="Channel" line="241"/>
            <method name="checkIO" type="void" line="245">
                <declaration name="sm" type="SecurityManager" line="246"/>
                <scope line="247"/>
            </method>
            <method name="setIn0" type="void" line="252"/>
            <method name="setOut0" type="void" line="253"/>
            <method name="setErr0" type="void" line="254"/>
            <javadoc line="256">
                Sets the System security.
                  &lt;p&gt; If there is a security manager already installed, this method first
                  calls the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with a &lt;code&gt;RuntimePermission(&quot;setSecurityManager&quot;)&lt;/code&gt;
                  permission to ensure it&apos;s ok to replace the existing
                  security manager.
                  This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.
                  &lt;p&gt; Otherwise, the argument is established as the current
                  security manager. If the argument is &lt;code&gt;null&lt;/code&gt; and no
                  security manager has been established, then no action is taken and
                  the method simply returns.                
                <param>
                    s   the security manager.                    
                </param>
                <exception>
                    SecurityException  if the security manager has already
                      been set and its &lt;code&gt;checkPermission&lt;/code&gt; method
                      doesn&apos;t allow it to be replaced.                    
                </exception>
                <see>
                    #getSecurityManager                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="setSecurityManager" type="void" line="280">
                <params>
                    <param name="s" type="SecurityManager"/>
                </params>
                <comment line="285">
                    no-op                    
                </comment>
                <scope line="281"/>
                <scope line="283"/>
            </method>
            <method name="setSecurityManager0" type="void" line="290">
                <params>
                    <param name="s" type="SecurityManager"/>
                </params>
                <comment line="294">
                    ask the currently installed security manager if we
                     can replace it.                    
                </comment>
                <comment line="301">
                    New security manager class is not on bootstrap classpath.
                     Cause policy to get initialized before we install the new
                     security manager, in order to prevent infinite loops when
                     trying to initialize the policy (which usually involves
                     accessing some security and/or system properties, which in turn
                     calls the installed security manager&apos;s checkPermission method
                     which will loop infinitely if there is a non-system class
                     (in this case: the new security manager class) on the stack).                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="291"/>
                <scope line="292"/>
                <scope line="299">
                    <anonymous_class line="308">
                        <method name="run" type="Object" line="309"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="320">
                Gets the system security interface.                
                <return>
                    if a security manager has already been established for the
                      current application, then that security manager is returned;
                      otherwise, &lt;code&gt;null&lt;/code&gt; is returned.                    
                </return>
                <see>
                    #setSecurityManager                    
                </see>
            </javadoc>
            <method name="getSecurityManager" type="SecurityManager" line="328"/>
            <method name="currentTimeMillis" type="long" line="332"/>
            <javadoc line="332">
                Returns the current time in milliseconds.  Note that
                  while the unit of time of the return value is a millisecond,
                  the granularity of the value depends on the underlying
                  operating system and may be larger.  For example, many
                  operating systems measure time in units of tens of
                  milliseconds.
                  &lt;p&gt; See the description of the class &lt;code&gt;Date&lt;/code&gt; for
                  a discussion of slight discrepancies that may arise between
                  &quot;computer time&quot; and coordinated universal time (UTC).                
                <return>
                    the difference, measured in milliseconds, between
                      the current time and midnight, January 1, 1970 UTC.                    
                </return>
                <see>
                    java.util.Date                    
                </see>
            </javadoc>
            <method name="nanoTime" type="long" line="350"/>
            <javadoc line="350">
                Returns the current value of the running Java Virtual Machine&apos;s
                  high-resolution time source, in nanoseconds.
                  &lt;p&gt;This method can only be used to measure elapsed time and is
                  not related to any other notion of system or wall-clock time.
                  The value returned represents nanoseconds since some fixed but
                  arbitrary &lt;i&gt;origin&lt;/i&gt; time (perhaps in the future, so values
                  may be negative).  The same origin is used by all invocations of
                  this method in an instance of a Java virtual machine; other
                  virtual machine instances are likely to use a different origin.
                  &lt;p&gt;This method provides nanosecond precision, but not necessarily
                  nanosecond resolution (that is, how frequently the value changes)
                  - no guarantees are made except that the resolution is at least as
                  good as that of {@link #currentTimeMillis()}.
                  &lt;p&gt;Differences in successive calls that span greater than
                  approximately 292 years (2&lt;sup&gt;63&lt;/sup&gt; nanoseconds) will not
                  correctly compute elapsed time due to numerical overflow.
                  &lt;p&gt;The values returned by this method become meaningful only when
                  the difference between two such values, obtained within the same
                  instance of a Java virtual machine, is computed.
                  &lt;p&gt; For example, to measure how long some code takes to execute:
                  &lt;pre&gt; {@codelong startTime = System.nanoTime();
                  // ... the code being measured ...
                  long estimatedTime = System.nanoTime() - startTime;}&lt;/pre&gt;
                  &lt;p&gt;To compare two nanoTime values
                  &lt;pre&gt; {@codelong t0 = System.nanoTime();
                  ...
                  long t1 = System.nanoTime();}&lt;/pre&gt;
                  one should use {@code t1 - t0 &lt; 0}, not {@code t1 &lt; t0},
                  because of the possibility of numerical overflow.                
                <return>
                    the current value of the running Java Virtual Machine&apos;s
                      high-resolution time source, in nanoseconds                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="arraycopy" type="void" line="396"/>
            <javadoc line="396">
                Copies an array from the specified source array, beginning at the
                  specified position, to the specified position of the destination array.
                  A subsequence of array components are copied from the source
                  array referenced by &lt;code&gt;src&lt;/code&gt; to the destination array
                  referenced by &lt;code&gt;dest&lt;/code&gt;. The number of components copied is
                  equal to the &lt;code&gt;length&lt;/code&gt; argument. The components at
                  positions &lt;code&gt;srcPos&lt;/code&gt; through
                  &lt;code&gt;srcPos+length-1&lt;/code&gt; in the source array are copied into
                  positions &lt;code&gt;destPos&lt;/code&gt; through
                  &lt;code&gt;destPos+length-1&lt;/code&gt;, respectively, of the destination
                  array.
                  &lt;p&gt;
                  If the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments refer to the
                  same array object, then the copying is performed as if the
                  components at positions &lt;code&gt;srcPos&lt;/code&gt; through
                  &lt;code&gt;srcPos+length-1&lt;/code&gt; were first copied to a temporary
                  array with &lt;code&gt;length&lt;/code&gt; components and then the contents of
                  the temporary array were copied into positions
                  &lt;code&gt;destPos&lt;/code&gt; through &lt;code&gt;destPos+length-1&lt;/code&gt; of the
                  destination array.
                  &lt;p&gt;
                  If &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If &lt;code&gt;src&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown and the destination
                  array is not modified.
                  &lt;p&gt;
                  Otherwise, if any of the following is true, an
                  &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown and the destination is
                  not modified:
                  &lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an
                  array.
                  &lt;li&gt;The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an
                  array.
                  &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer
                  to arrays whose component types are different primitive types.
                  &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive
                  component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array
                  with a reference component type.
                  &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference
                  component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array
                  with a primitive component type.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Otherwise, if any of the following is true, an
                  &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is
                  thrown and the destination is not modified:
                  &lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;srcPos&lt;/code&gt; argument is negative.
                  &lt;li&gt;The &lt;code&gt;destPos&lt;/code&gt; argument is negative.
                  &lt;li&gt;The &lt;code&gt;length&lt;/code&gt; argument is negative.
                  &lt;li&gt;&lt;code&gt;srcPos+length&lt;/code&gt; is greater than
                  &lt;code&gt;src.length&lt;/code&gt;, the length of the source array.
                  &lt;li&gt;&lt;code&gt;destPos+length&lt;/code&gt; is greater than
                  &lt;code&gt;dest.length&lt;/code&gt;, the length of the destination array.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Otherwise, if any actual component of the source array from
                  position &lt;code&gt;srcPos&lt;/code&gt; through
                  &lt;code&gt;srcPos+length-1&lt;/code&gt; cannot be converted to the component
                  type of the destination array by assignment conversion, an
                  &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown. In this case, let
                  &lt;b&gt;&lt;i&gt;k&lt;/i&gt;&lt;/b&gt; be the smallest nonnegative integer less than
                  length such that &lt;code&gt;src[srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt;
                  cannot be converted to the component type of the destination
                  array; when the exception is thrown, source array components from
                  positions &lt;code&gt;srcPos&lt;/code&gt; through
                  &lt;code&gt;srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1&lt;/code&gt;
                  will already have been copied to destination array positions
                  &lt;code&gt;destPos&lt;/code&gt; through
                  &lt;code&gt;destPos+&lt;/code&gt;&lt;i&gt;k&lt;/I&gt;&lt;code&gt;-1&lt;/code&gt; and no other
                  positions of the destination array will have been modified.
                  (Because of the restrictions already itemized, this
                  paragraph effectively applies only to the situation where both
                  arrays have component types that are reference types.)                
                <param>
                    src      the source array.                    
                </param>
                <param>
                    srcPos   starting position in the source array.                    
                </param>
                <param>
                    dest     the destination array.                    
                </param>
                <param>
                    destPos  starting position in the destination data.                    
                </param>
                <param>
                    length   the number of array elements to be copied.                    
                </param>
                <exception>
                    IndexOutOfBoundsException  if copying would cause
                      access of data outside array bounds.                    
                </exception>
                <exception>
                    ArrayStoreException  if an element in the &lt;code&gt;src&lt;/code&gt;
                      array could not be stored into the &lt;code&gt;dest&lt;/code&gt; array
                      because of a type mismatch.                    
                </exception>
                <exception>
                    NullPointerException if either &lt;code&gt;src&lt;/code&gt; or
                      &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="identityHashCode" type="int" line="492"/>
            <javadoc line="492">
                Returns the same hash code for the given object as
                  would be returned by the default method hashCode(),
                  whether or not the given object&apos;s class overrides
                  hashCode().
                  The hash code for the null reference is zero.                
                <param>
                    x object for which the hashCode is to be calculated                    
                </param>
                <return>
                    the hashCode                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="props" type="Properties" line="505"/>
            <javadoc line="505">
                System properties. The following properties are guaranteed to be defined:
                  &lt;dl&gt;
                  &lt;dt&gt;java.version         &lt;dd&gt;Java version number
                  &lt;dt&gt;java.vendor          &lt;dd&gt;Java vendor specific string
                  &lt;dt&gt;java.vendor.url      &lt;dd&gt;Java vendor URL
                  &lt;dt&gt;java.home            &lt;dd&gt;Java installation directory
                  &lt;dt&gt;java.class.version   &lt;dd&gt;Java class version number
                  &lt;dt&gt;java.class.path      &lt;dd&gt;Java classpath
                  &lt;dt&gt;os.name              &lt;dd&gt;Operating System Name
                  &lt;dt&gt;os.arch              &lt;dd&gt;Operating System Architecture
                  &lt;dt&gt;os.version           &lt;dd&gt;Operating System Version
                  &lt;dt&gt;file.separator       &lt;dd&gt;File separator (&quot;/&quot; on Unix)
                  &lt;dt&gt;path.separator       &lt;dd&gt;Path separator (&quot;:&quot; on Unix)
                  &lt;dt&gt;line.separator       &lt;dd&gt;Line separator (&quot;\n&quot; on Unix)
                  &lt;dt&gt;user.name            &lt;dd&gt;User account name
                  &lt;dt&gt;user.home            &lt;dd&gt;User home directory
                  &lt;dt&gt;user.dir             &lt;dd&gt;User&apos;s current working directory
                  &lt;/dl&gt;                
            </javadoc>
            <method name="initProperties" type="Properties" line="527"/>
            <javadoc line="529">
                Determines the current system properties.
                  &lt;p&gt;
                  First, if there is a security manager, its
                  &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method is called with no
                  arguments. This may result in a security exception.
                  &lt;p&gt;
                  The current set of system properties for use by the{@link #getProperty(String)} method is returned as a
                  &lt;code&gt;Properties&lt;/code&gt; object. If there is no current set of
                  system properties, a set of system properties is first created and
                  initialized. This set of system properties always includes values
                  for the following keys:
                  &lt;table summary=&quot;Shows property keys and associated values&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;
                  &lt;th&gt;Description of Associated Value&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Runtime Environment version&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vendor&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Runtime Environment vendor&lt;/td&gt;&lt;/tr
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vendor.url&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java vendor URL&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.home&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java installation directory&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine specification version&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.vendor&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine specification vendor&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine specification name&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine implementation version&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.vendor&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine implementation vendor&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Virtual Machine implementation name&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Runtime Environment specification  version&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.vendor&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Runtime Environment specification  vendor&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java Runtime Environment specification  name&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.class.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java class format version number&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.class.path&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Java class path&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.library.path&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;List of paths to search when loading libraries&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.io.tmpdir&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Default temp file path&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.compiler&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Name of JIT compiler to use&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.ext.dirs&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Path of extension directory or directories&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system name&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.arch&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system architecture&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.version&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system version&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;file.separator&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;File separator (&quot;/&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;path.separator&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Path separator (&quot;:&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;line.separator&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;Line separator (&quot;\n&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.name&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;User&apos;s account name&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.home&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;User&apos;s home directory&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.dir&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;User&apos;s current working directory&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  Multiple paths in a system property value are separated by the path
                  separator character of the platform.
                  &lt;p&gt;
                  Note that even if the security manager does not permit the
                  &lt;code&gt;getProperties&lt;/code&gt; operation, it may choose to permit the{@link #getProperty(String)} operation.                
                <return>
                    the system properties                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
                      to the system properties.                    
                </exception>
                <see>
                    #setProperties                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkPropertiesAccess()                    
                </see>
                <see>
                    java.util.Properties                    
                </see>
            </javadoc>
            <method name="getProperties" type="Properties" line="619">
                <declaration name="sm" type="SecurityManager" line="620"/>
                <scope line="621"/>
            </method>
            <javadoc line="628">
                Returns the system-dependent line separator string.  It always
                  returns the same value - the initial value of the {@linkplain #getProperty(String) system property} {@code line.separator}.
                  &lt;p&gt;On UNIX systems, it returns {@code &quot;\n&quot;}; on Microsoft
                  Windows systems it returns {@code &quot;\r\n&quot;}.                
            </javadoc>
            <method name="lineSeparator" type="String" line="636"/>
            <declaration name="lineSeparator" type="String" line="640"/>
            <javadoc line="642">
                Sets the system properties to the &lt;code&gt;Properties&lt;/code&gt;
                  argument.
                  &lt;p&gt;
                  First, if there is a security manager, its
                  &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method is called with no
                  arguments. This may result in a security exception.
                  &lt;p&gt;
                  The argument becomes the current set of system properties for use
                  by the {@link #getProperty(String)} method. If the argument is
                  &lt;code&gt;null&lt;/code&gt;, then the current set of system properties is
                  forgotten.                
                <param>
                    props   the new system properties.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
                      to the system properties.                    
                </exception>
                <see>
                    #getProperties                    
                </see>
                <see>
                    java.util.Properties                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkPropertiesAccess()                    
                </see>
            </javadoc>
            <method name="setProperties" type="void" line="664">
                <params>
                    <param name="props" type="Properties"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="665"/>
                <scope line="666"/>
                <scope line="669"/>
            </method>
            <javadoc line="676">
                Gets the system property indicated by the specified key.
                  &lt;p&gt;
                  First, if there is a security manager, its
                  &lt;code&gt;checkPropertyAccess&lt;/code&gt; method is called with the key as
                  its argument. This may result in a SecurityException.
                  &lt;p&gt;
                  If there is no current set of system properties, a set of system
                  properties is first created and initialized in the same manner as
                  for the &lt;code&gt;getProperties&lt;/code&gt; method.                
                <param>
                    key   the name of the system property.                    
                </param>
                <return>
                    the string value of the system property,
                      or &lt;code&gt;null&lt;/code&gt; if there is no property with that key.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
                      access to the specified system property.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.                    
                </exception>
                <see>
                    #setProperty                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperties()                    
                </see>
            </javadoc>
            <method name="getProperty" type="String" line="702">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="704"/>
                <scope line="705"/>
            </method>
            <javadoc line="712">
                Gets the system property indicated by the specified key.
                  &lt;p&gt;
                  First, if there is a security manager, its
                  &lt;code&gt;checkPropertyAccess&lt;/code&gt; method is called with the
                  &lt;code&gt;key&lt;/code&gt; as its argument.
                  &lt;p&gt;
                  If there is no current set of system properties, a set of system
                  properties is first created and initialized in the same manner as
                  for the &lt;code&gt;getProperties&lt;/code&gt; method.                
                <param>
                    key   the name of the system property.                    
                </param>
                <param>
                    def   a default value.                    
                </param>
                <return>
                    the string value of the system property,
                      or the default value if there is no property with that key.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
                      access to the specified system property.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.                    
                </exception>
                <see>
                    #setProperty                    
                </see>
                <see>
                    java.lang.SecurityManager#checkPropertyAccess(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperties()                    
                </see>
            </javadoc>
            <method name="getProperty" type="String" line="738">
                <params>
                    <param name="key" type="String"/>
                    <param name="def" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="740"/>
                <scope line="741"/>
            </method>
            <javadoc line="748">
                Sets the system property indicated by the specified key.
                  &lt;p&gt;
                  First, if a security manager exists, its
                  &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method
                  is called with a &lt;code&gt;PropertyPermission(key, &quot;write&quot;)&lt;/code&gt;
                  permission. This may result in a SecurityException being thrown.
                  If no exception is thrown, the specified property is set to the given
                  value.
                  &lt;p&gt;                
                <param>
                    key   the name of the system property.                    
                </param>
                <param>
                    value the value of the system property.                    
                </param>
                <return>
                    the previous value of the system property,
                      or &lt;code&gt;null&lt;/code&gt; if it did not have one.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
                      setting of the specified property.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; or
                      &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.                    
                </exception>
                <see>
                    #getProperty                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
                <see>
                    java.util.PropertyPermission                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setProperty" type="String" line="777">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="779"/>
                <scope line="780"/>
            </method>
            <javadoc line="788">
                Removes the system property indicated by the specified key.
                  &lt;p&gt;
                  First, if a security manager exists, its
                  &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method
                  is called with a &lt;code&gt;PropertyPermission(key, &quot;write&quot;)&lt;/code&gt;
                  permission. This may result in a SecurityException being thrown.
                  If no exception is thrown, the specified property is removed.
                  &lt;p&gt;                
                <param>
                    key   the name of the system property to be removed.                    
                </param>
                <return>
                    the previous string value of the system property,
                      or &lt;code&gt;null&lt;/code&gt; if there was no property with that key.                    
                </return>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
                      access to the specified system property.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.                    
                </exception>
                <see>
                    #getProperty                    
                </see>
                <see>
                    #setProperty                    
                </see>
                <see>
                    java.util.Properties                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkPropertiesAccess()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="clearProperty" type="String" line="815">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="817"/>
                <scope line="818"/>
            </method>
            <method name="checkKey" type="void" line="825">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="826"/>
                <scope line="829"/>
            </method>
            <javadoc line="834">
                Gets the value of the specified environment variable. An
                  environment variable is a system-dependent external named
                  value.
                  &lt;p&gt;If a security manager exists, its{@link SecurityManager#checkPermission checkPermission}method is called with a
                  &lt;code&gt;{@link RuntimePermission}(&quot;getenv.&quot;+name)&lt;/code&gt;
                  permission.  This may result in a {@link SecurityException}being thrown.  If no exception is thrown the value of the
                  variable &lt;code&gt;name&lt;/code&gt; is returned.
                  &lt;p&gt;&lt;a name=&quot;EnvironmentVSSystemProperties&quot;&gt;&lt;i&gt;System
                  properties&lt;/i&gt; and &lt;i&gt;environment variables&lt;/i&gt;&lt;/a&gt; are both
                  conceptually mappings between names and values.  Both
                  mechanisms can be used to pass user-defined information to a
                  Java process.  Environment variables have a more global effect,
                  because they are visible to all descendants of the process
                  which defines them, not just the immediate Java subprocess.
                  They can have subtly different semantics, such as case
                  insensitivity, on different operating systems.  For these
                  reasons, environment variables are more likely to have
                  unintended side effects.  It is best to use system properties
                  where possible.  Environment variables should be used when a
                  global effect is desired, or when an external system interface
                  requires an environment variable (such as &lt;code&gt;PATH&lt;/code&gt;).
                  &lt;p&gt;On UNIX systems the alphabetic case of &lt;code&gt;name&lt;/code&gt; is
                  typically significant, while on Microsoft Windows systems it is
                  typically not.  For example, the expression
                  &lt;code&gt;System.getenv(&quot;FOO&quot;).equals(System.getenv(&quot;foo&quot;))&lt;/code&gt;
                  is likely to be true on Microsoft Windows.                
                <param>
                    name the name of the environment variable                    
                </param>
                <return>
                    the string value of the variable, or &lt;code&gt;null&lt;/code&gt;
                      if the variable is not defined in the system environment                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and its{@link SecurityManager#checkPermission checkPermission}method doesn&apos;t allow access to the environment variable
                      &lt;code&gt;name&lt;/code&gt;                    
                </throws>
                <see>
                    #getenv()                    
                </see>
                <see>
                    ProcessBuilder#environment()                    
                </see>
            </javadoc>
            <method name="getenv" type="String" line="880">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="881"/>
                <scope line="882"/>
            </method>
            <javadoc line="890">
                Returns an unmodifiable string map view of the current system environment.
                  The environment is a system-dependent mapping from names to
                  values which is passed from parent to child processes.
                  &lt;p&gt;If the system does not support environment variables, an
                  empty map is returned.
                  &lt;p&gt;The returned map will never contain null keys or values.
                  Attempting to query the presence of a null key or value will
                  throw a {@link NullPointerException}.  Attempting to query
                  the presence of a key or value which is not of type{@link String} will throw a {@link ClassCastException}.
                  &lt;p&gt;The returned map and its collection views may not obey the
                  general contract of the {@link Object#equals} and{@link Object#hashCode} methods.
                  &lt;p&gt;The returned map is typically case-sensitive on all platforms.
                  &lt;p&gt;If a security manager exists, its{@link SecurityManager#checkPermission checkPermission}method is called with a
                  &lt;code&gt;{@link RuntimePermission}(&quot;getenv.&quot;)&lt;/code&gt;
                  permission.  This may result in a {@link SecurityException} being
                  thrown.
                  &lt;p&gt;When passing information to a Java subprocess,
                  &lt;a href=#EnvironmentVSSystemProperties&gt;system properties&lt;/a&gt;
                  are generally preferred over environment variables.                
                <return>
                    the environment as a map of variable names to values                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its{@link SecurityManager#checkPermission checkPermission}method doesn&apos;t allow access to the process environment                    
                </throws>
                <see>
                    #getenv(String)                    
                </see>
                <see>
                    ProcessBuilder#environment()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getenv" type="java.util.Map<String,String>" line="930">
                <declaration name="sm" type="SecurityManager" line="931"/>
                <scope line="932"/>
            </method>
            <javadoc line="939">
                Terminates the currently running Java Virtual Machine. The
                  argument serves as a status code; by convention, a nonzero status
                  code indicates abnormal termination.
                  &lt;p&gt;
                  This method calls the &lt;code&gt;exit&lt;/code&gt; method in class
                  &lt;code&gt;Runtime&lt;/code&gt;. This method never returns normally.
                  &lt;p&gt;
                  The call &lt;code&gt;System.exit(n)&lt;/code&gt; is effectively equivalent to
                  the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Runtime.getRuntime().exit(n)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    status   exit status.                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;
                      method doesn&apos;t allow exit with the specified status.                    
                </throws>
                <see>
                    java.lang.Runtime#exit(int)                    
                </see>
            </javadoc>
            <method name="exit" type="void" line="959">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <javadoc line="963">
                Runs the garbage collector.
                  &lt;p&gt;
                  Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual
                  Machine expend effort toward recycling unused objects in order to
                  make the memory they currently occupy available for quick reuse.
                  When control returns from the method call, the Java Virtual
                  Machine has made a best effort to reclaim space from all discarded
                  objects.
                  &lt;p&gt;
                  The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the
                  call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Runtime.getRuntime().gc()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    java.lang.Runtime#gc()                    
                </see>
            </javadoc>
            <method name="gc" type="void" line="981"/>
            <javadoc line="985">
                Runs the finalization methods of any objects pending finalization.
                  &lt;p&gt;
                  Calling this method suggests that the Java Virtual Machine expend
                  effort toward running the &lt;code&gt;finalize&lt;/code&gt; methods of objects
                  that have been found to be discarded but whose &lt;code&gt;finalize&lt;/code&gt;
                  methods have not yet been run. When control returns from the
                  method call, the Java Virtual Machine has made a best effort to
                  complete all outstanding finalizations.
                  &lt;p&gt;
                  The call &lt;code&gt;System.runFinalization()&lt;/code&gt; is effectively
                  equivalent to the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Runtime.getRuntime().runFinalization()
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    java.lang.Runtime#runFinalization()                    
                </see>
            </javadoc>
            <method name="runFinalization" type="void" line="1003"/>
            <javadoc line="1007">
                Enable or disable finalization on exit; doing so specifies that the
                  finalizers of all objects that have finalizers that have not yet been
                  automatically invoked are to be run before the Java runtime exits.
                  By default, finalization on exit is disabled.
                  &lt;p&gt;If there is a security manager,
                  its &lt;code&gt;checkExit&lt;/code&gt; method is first called
                  with 0 as its argument to ensure the exit is allowed.
                  This could result in a SecurityException.                
                <deprecated>
                    This method is inherently unsafe.  It may result in
                      finalizers being called on live objects while other threads are
                      concurrently manipulating those objects, resulting in erratic
                      behavior or deadlock.                    
                </deprecated>
                <param>
                    value indicating enabling or disabling of finalization                    
                </param>
                <throws>
                    SecurityExceptionif a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;
                      method doesn&apos;t allow the exit.                    
                </throws>
                <see>
                    java.lang.Runtime#exit(int)                    
                </see>
                <see>
                    java.lang.Runtime#gc()                    
                </see>
                <see>
                    java.lang.SecurityManager#checkExit(int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="runFinalizersOnExit" type="void" line="1033">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="1037">
                Loads a code file with the specified filename from the local file
                  system as a dynamic library. The filename
                  argument must be a complete path name.
                  &lt;p&gt;
                  The call &lt;code&gt;System.load(name)&lt;/code&gt; is effectively equivalent
                  to the call:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Runtime.getRuntime().load(name)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    filename   the file to load.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
                      loading of the specified dynamic library                    
                </exception>
                <exception>
                    UnsatisfiedLinkError  if the file does not exist.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;filename&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    java.lang.Runtime#load(java.lang.String)                    
                </see>
                <see>
                    java.lang.SecurityManager#checkLink(java.lang.String)                    
                </see>
            </javadoc>
            <method name="load" type="void" line="1058">
                <params>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <javadoc line="1062">
                Loads the system library specified by the &lt;code&gt;libname&lt;/code&gt;
                  argument. The manner in which a library name is mapped to the
                  actual system library is system dependent.
                  &lt;p&gt;
                  The call &lt;code&gt;System.loadLibrary(name)&lt;/code&gt; is effectively
                  equivalent to the call
                  &lt;blockquote&gt;&lt;pre&gt;
                  Runtime.getRuntime().loadLibrary(name)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    libname   the name of the library.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
                      loading of the specified dynamic library                    
                </exception>
                <exception>
                    UnsatisfiedLinkError  if the library does not exist.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;libname&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    java.lang.Runtime#loadLibrary(java.lang.String)                    
                </see>
                <see>
                    java.lang.SecurityManager#checkLink(java.lang.String)                    
                </see>
            </javadoc>
            <method name="loadLibrary" type="void" line="1083">
                <params>
                    <param name="libname" type="String"/>
                </params>
            </method>
            <method name="mapLibraryName" type="String" line="1087"/>
            <javadoc line="1087">
                Maps a library name into a platform-specific string representing
                  a native library.                
                <param>
                    libname the name of the library.                    
                </param>
                <return>
                    a platform-dependent native library name.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;libname&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    java.lang.System#loadLibrary(java.lang.String)                    
                </see>
                <see>
                    java.lang.ClassLoader#findLibrary(java.lang.String)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="1101">
                Initialize the system class.  Called after thread initialization.                
            </javadoc>
            <method name="initializeSystemClass" type="void" line="1104">
                <comment line="1107">
                    VM might invoke JNU_NewStringPlatform() to set those encoding
                     sensitive properties (user.home, user.name, boot.class.path, etc.)
                     during &quot;props&quot; initialization, in which it may need access, via
                     System.getProperty(), to the related system encoding property that
                     have been initialized (put into &quot;props&quot;) at early stage of the
                     initialization. So make sure the &quot;props&quot; is available at the
                     very beginning of the initialization and all system properties to
                     be put into it directly.                    
                </comment>
                <comment line="1116">
                    initialized by the VM                    
                </comment>
                <comment line="1118">
                    There are certain system configurations that may be controlled by
                     VM options such as the maximum amount of direct memory and
                     Integer cache size used to support the object identity semantics
                     of autoboxing.  Typically, the library will obtain these values
                     from the properties set by the VM.  If the properties are for
                     internal implementation use only, these properties should be
                     removed from the system properties.
                    
                     See java.lang.Integer.IntegerCache and the
                     sun.misc.VM.saveAndRemoveProperties method for example.
                    
                     Save a private copy of the system properties object that
                     can only be accessed by the internal implementation.  Remove
                     certain system properties that are not intended for public access.                    
                </comment>
                <comment line="1144">
                    Load the zip library now in order to keep java.util.zip.ZipFile
                     from trying to use itself to load this library later.                    
                </comment>
                <comment line="1148">
                    Setup Java signal handlers for HUP, TERM, and INT (where available).                    
                </comment>
                <comment line="1151">
                    Initialize any miscellenous operating system settings that need to be
                     set for the class libraries. Currently this is no-op everywhere except
                     for Windows where the process-wide error mode is set before the java.io
                     classes are used.                    
                </comment>
                <comment line="1157">
                    Subsystems that are invoked during initialization can invoke
                     sun.misc.VM.isBooted() in order to avoid doing things that should
                     wait until the application class loader has been set up.                    
                </comment>
                <comment line="1162">
                    The main thread is not added to its thread group in the same
                     way as other threads; we must do it ourselves here.                    
                </comment>
                <comment line="1167">
                    register shared secrets                    
                </comment>
                <declaration name="fdIn" type="FileInputStream" line="1137"/>
                <declaration name="fdOut" type="FileOutputStream" line="1138"/>
                <declaration name="fdErr" type="FileOutputStream" line="1139"/>
                <declaration name="current" type="Thread" line="1163"/>
            </method>
            <method name="setJavaLangAccess" type="void" line="1170">
                <comment line="1172">
                    Allow privileged classes outside of java.lang                    
                </comment>
                <anonymous_class line="1172">
                    <method name="getConstantPool" type="sun.reflect.ConstantPool" line="1173">
                        <params>
                            <param name="klass" type="Class"/>
                        </params>
                    </method>
                    <method name="setAnnotationType" type="void" line="1176">
                        <params>
                            <param name="klass" type="Class"/>
                            <param name="type" type="AnnotationType"/>
                        </params>
                    </method>
                    <method name="getAnnotationType" type="AnnotationType" line="1179">
                        <params>
                            <param name="klass" type="Class"/>
                        </params>
                    </method>
                    <method name="getEnumConstantsShared" type="E[]" line="1183">
                        <params>
                            <param name="klass" type="Class<E>"/>
                        </params>
                    </method>
                    <method name="blockedOn" type="void" line="1186">
                        <params>
                            <param name="t" type="Thread"/>
                            <param name="b" type="Interruptible"/>
                        </params>
                    </method>
                    <method name="registerShutdownHook" type="void" line="1189">
                        <params>
                            <param name="slot" type="int"/>
                            <param name="registerShutdownInProgress" type="boolean"/>
                            <param name="hook" type="Runnable"/>
                        </params>
                    </method>
                    <method name="getStackTraceDepth" type="int" line="1192">
                        <params>
                            <param name="t" type="Throwable"/>
                        </params>
                    </method>
                    <method name="getStackTraceElement" type="StackTraceElement" line="1195">
                        <params>
                            <param name="t" type="Throwable"/>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="getCallerClass" type="Class<?>" line="1202">
                <comment line="1204">
                    NOTE use of more generic Reflection.getCallerClass()                    
                </comment>
            </method>
        </class>
    </source>