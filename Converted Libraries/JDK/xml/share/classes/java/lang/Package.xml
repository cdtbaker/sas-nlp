<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.InputStream"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.jar.JarInputStream"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Attributes.Name"/>
        <import package="java.util.jar.JarException"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="sun.net.www.ParseUtil"/>
        <import package="java.lang.annotation.Annotation"/>
        <class name="Package" line="54">
            <comment line="440">
                Construct a package using the attributes from the specified manifest.
                
                 @param name the package name
                 @param man the optional manifest for the package
                 @param url the optional code source url for the package                
            </comment>
            <comment line="505">
                Returns the loaded system package for the specified name.                
            </comment>
            <comment line="522">
                Return an array of loaded system packages.                
            </comment>
            <comment line="575">
                Returns the Manifest for the specified JAR file name.                
            </comment>
            <comment line="588">
                The map of loaded system packages                
            </comment>
            <comment line="591">
                Maps each directory or zip file name to its corresponding url                
            </comment>
            <comment line="594">
                Maps each code source url for a jar file to its manifest                
            </comment>
            <comment line="600">
                Private storage for the package name and attributes.                
            </comment>
            <implements interface="java.lang.reflect.AnnotatedElement"/>
            <javadoc line="54">
                {@code Package} objects contain version information
                  about the implementation and specification of a Java package.
                  This versioning information is retrieved and made available
                  by the {@link ClassLoader} instance that
                  loaded the class(es).  Typically, it is stored in the manifest that is
                  distributed with the classes.
                  &lt;p&gt;The set of classes that make up the package may implement a
                  particular specification and if so the specification title, version number,
                  and vendor strings identify that specification.
                  An application can ask if the package is
                  compatible with a particular version, see the {@link #isCompatibleWith isCompatibleWith}method for details.
                  &lt;p&gt;Specification version numbers use a syntax that consists of nonnegative
                  decimal integers separated by periods &quot;.&quot;, for example &quot;2.0&quot; or
                  &quot;1.2.3.4.5.6.7&quot;.  This allows an extensible number to be used to represent
                  major, minor, micro, etc. versions.  The version specification is described
                  by the following formal grammar:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;SpecificationVersion:
                  &lt;dd&gt;Digits RefinedVersion&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
                  &lt;p&gt;&lt;dt&gt;&lt;i&gt;RefinedVersion:&lt;/i&gt;
                  &lt;dd&gt;{@code .} &lt;i&gt;Digits&lt;/i&gt;
                  &lt;dd&gt;{@code .} &lt;i&gt;Digits RefinedVersion&lt;/i&gt;
                  &lt;p&gt;&lt;dt&gt;&lt;i&gt;Digits:
                  &lt;dd&gt;Digit
                  &lt;dd&gt;Digits&lt;/i&gt;
                  &lt;p&gt;&lt;dt&gt;&lt;i&gt;Digit:&lt;/i&gt;
                  &lt;dd&gt;any character for which {@link Character#isDigit} returns {@code true},
                  e.g. 0, 1, 2, ...
                  &lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;The implementation title, version, and vendor strings identify an
                  implementation and are made available conveniently to enable accurate
                  reporting of the packages involved when a problem occurs. The contents
                  all three implementation strings are vendor specific. The
                  implementation version strings have no specified syntax and should
                  only be compared for equality with desired version identifiers.
                  &lt;p&gt;Within each {@code ClassLoader} instance all classes from the same
                  java package have the same Package object.  The static methods allow a package
                  to be found by name or the set of all packages known to the current class
                  loader to be found.                
                <see>
                    ClassLoader#definePackage                    
                </see>
            </javadoc>
            <javadoc line="109">
                Return the name of this package.                
                <return>
                    The fully-qualified name of this package as defined in section 6.5.3 of
                      <cite>The Java&trade; Language Specification</cite>,
                      for example, {@code java.lang}                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="116"/>
            <javadoc line="121">
                Return the title of the specification that this package implements.                
                <return>
                    the specification title, null is returned if it is not known.                    
                </return>
            </javadoc>
            <method name="getSpecificationTitle" type="String" line="125"/>
            <javadoc line="129">
                Returns the version number of the specification
                  that this package implements.
                  This version string must be a sequence of nonnegative decimal
                  integers separated by &quot;.&quot;&apos;s and may have leading zeros.
                  When version strings are compared the most significant
                  numbers are compared.                
                <return>
                    the specification version, null is returned if it is not known.                    
                </return>
            </javadoc>
            <method name="getSpecificationVersion" type="String" line="138"/>
            <javadoc line="142">
                Return the name of the organization, vendor,
                  or company that owns and maintains the specification
                  of the classes that implement this package.                
                <return>
                    the specification vendor, null is returned if it is not known.                    
                </return>
            </javadoc>
            <method name="getSpecificationVendor" type="String" line="148"/>
            <javadoc line="152">
                Return the title of this package.                
                <return>
                    the title of the implementation, null is returned if it is not known.                    
                </return>
            </javadoc>
            <method name="getImplementationTitle" type="String" line="156"/>
            <javadoc line="160">
                Return the version of this implementation. It consists of any string
                  assigned by the vendor of this implementation and does
                  not have any particular syntax specified or expected by the Java
                  runtime. It may be compared for equality with other
                  package version strings used for this implementation
                  by this vendor for this package.                
                <return>
                    the version of the implementation, null is returned if it is not known.                    
                </return>
            </javadoc>
            <method name="getImplementationVersion" type="String" line="169"/>
            <javadoc line="173">
                Returns the name of the organization,
                  vendor or company that provided this implementation.                
                <return>
                    the vendor that implemented this package..                    
                </return>
            </javadoc>
            <method name="getImplementationVendor" type="String" line="178"/>
            <javadoc line="182">
                Returns true if this package is sealed.                
                <return>
                    true if the package is sealed, false otherwise                    
                </return>
            </javadoc>
            <method name="isSealed" type="boolean" line="187"/>
            <javadoc line="191">
                Returns true if this package is sealed with respect to the specified
                  code source url.                
                <param>
                    url the code source url                    
                </param>
                <return>
                    true if this package is sealed with respect to url                    
                </return>
            </javadoc>
            <method name="isSealed" type="boolean" line="198">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="202">
                Compare this package&apos;s specification version with a
                  desired version. It returns true if
                  this packages specification version number is greater than or equal
                  to the desired version number. &lt;p&gt;
                  Version numbers are compared by sequentially comparing corresponding
                  components of the desired and specification strings.
                  Each component is converted as a decimal integer and the values
                  compared.
                  If the specification value is greater than the desired
                  value true is returned. If the value is less false is returned.
                  If the values are equal the period is skipped and the next pair of
                  components is compared.                
                <param>
                    desired the version string of the desired version.                    
                </param>
                <return>
                    true if this package's version number is greater
                      than or equal to the desired version number                    
                </return>
                <exception>
                    NumberFormatException if the desired or current version
                      is not of the correct dotted form.                    
                </exception>
            </javadoc>
            <method name="isCompatibleWith" type="boolean" line="226">
                <params>
                    <param name="desired" type="String"/>
                </params>
                <scope line="227"/>
                <declaration name="sa" type="String[]" line="231"/>
                <declaration name="si" type="int[]" line="232"/>
                <scope line="233"/>
                <declaration name="da" type="String[]" line="239"/>
                <declaration name="di" type="int[]" line="240"/>
                <scope line="241"/>
                <declaration name="len" type="int" line="247"/>
                <scope line="248">
                    <declaration name="d" type="int" line="249"/>
                    <declaration name="s" type="int" line="250"/>
                </scope>
            </method>
            <javadoc line="259">
                Find a package by name in the callers {@code ClassLoader} instance.
                  The callers {@code ClassLoader} instance is used to find the package
                  instance corresponding to the named class. If the callers{@code ClassLoader} instance is null then the set of packages loaded
                  by the system {@code ClassLoader} instance is searched to find the
                  named package. &lt;p&gt;
                  Packages have attributes for versions and specifications only if the class
                  loader created the package instance with the appropriate attributes. Typically,
                  those attributes are defined in the manifests that accompany the classes.                
                <param>
                    name a package name, for example, java.lang.                    
                </param>
                <return>
                    the package of the requested name. It may be null if no package
                      information is available from the archive or codebase.                    
                </return>
            </javadoc>
            <method name="getPackage" type="Package" line="275">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="l" type="ClassLoader" line="276"/>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                Get all the packages currently known for the caller&apos;s {@code ClassLoader}instance.  Those packages correspond to classes loaded via or accessible by
                  name to that {@code ClassLoader} instance.  If the caller&apos;s{@code ClassLoader} instance is the bootstrap {@code ClassLoader}instance, which may be represented by {@code null} in some implementations,
                  only packages corresponding to classes loaded by the bootstrap{@code ClassLoader} instance will be returned.                
                <return>
                    a new array of packages known to the callers {@code ClassLoader}instance.  An zero length array is returned if none are known.                    
                </return>
            </javadoc>
            <method name="getPackages" type="Package[]" line="296">
                <declaration name="l" type="ClassLoader" line="297"/>
                <scope line="298"/>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Get the package for the specified class.
                  The class&apos;s class loader is used to find the package instance
                  corresponding to the specified class. If the class loader
                  is the bootstrap class loader, which may be represented by{@code null} in some implementations, then the set of packages
                  loaded by the bootstrap class loader is searched to find the package.
                  &lt;p&gt;
                  Packages have attributes for versions and specifications only
                  if the class loader created the package
                  instance with the appropriate attributes. Typically those
                  attributes are defined in the manifests that accompany
                  the classes.                
                <param>
                    class the class to get the package of.                    
                </param>
                <return>
                    the package of the class. It may be null if no package
                      information is available from the archive or codebase.                    
                </return>
            </javadoc>
            <method name="getPackage" type="Package" line="322">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <declaration name="name" type="String" line="323"/>
                <declaration name="i" type="int" line="324"/>
                <scope line="325">
                    <declaration name="cl" type="ClassLoader" line="327"/>
                    <scope line="328"/>
                    <scope line="330"/>
                </scope>
                <scope line="333"/>
            </method>
            <javadoc line="338">
                Return the hash code computed from the package name.                
                <return>
                    the hash code computed from the package name.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="342"/>
            <javadoc line="346">
                Returns the string representation of this Package.
                  Its value is the string &quot;package &quot; and the package name.
                  If the package title is defined it is appended.
                  If the package version is defined it is appended.                
                <return>
                    the string representation of the package.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="353">
                <declaration name="spec" type="String" line="354"/>
                <declaration name="ver" type="String" line="355"/>
            </method>
            <method name="getPackageInfo" type="Class<?>" line="367">
                <comment line="372">
                    store a proxy for the package info that has no annotations                    
                </comment>
                <scope line="368">
                    <scope line="369"/>
                    <scope line="371">
                        <class name="PackageInfoProxy" line="373"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="380">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAnnotation" type="A" line="384">
                <params>
                    <param name="annotationClass" type="Class<A>"/>
                </params>
            </method>
            <javadoc line="388">
                @throws NullPointerException {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAnnotationPresent" type="boolean" line="393">
                <params>
                    <param name="annotationClass" type="Class<? extends Annotation>"/>
                </params>
            </method>
            <javadoc line="397">
                @since 1.5                
            </javadoc>
            <method name="getAnnotations" type="Annotation[]" line="400"/>
            <javadoc line="404">
                @since 1.5                
            </javadoc>
            <method name="getDeclaredAnnotations" type="Annotation[]" line="407"/>
            <javadoc line="411">
                Construct a package instance with the specified version
                  information.                
                <param>
                    pkgName the name of the package                    
                </param>
                <param>
                    spectitle the title of the specification                    
                </param>
                <param>
                    specversion the version of the specification                    
                </param>
                <param>
                    specvendor the organization that maintains the specification                    
                </param>
                <param>
                    impltitle the title of the implementation                    
                </param>
                <param>
                    implversion the version of the implementation                    
                </param>
                <param>
                    implvendor the organization that maintains the implementation                    
                </param>
                <return>
                    a new package for containing the specified information.                    
                </return>
            </javadoc>
            <method name="Package" type="constructor" line="427">
                <params>
                    <param name="name" type="String"/>
                    <param name="spectitle" type="String"/>
                    <param name="specversion" type="String"/>
                    <param name="specvendor" type="String"/>
                    <param name="impltitle" type="String"/>
                    <param name="implversion" type="String"/>
                    <param name="implvendor" type="String"/>
                    <param name="sealbase" type="URL"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="Package" type="constructor" line="446">
                <params>
                    <param name="name" type="String"/>
                    <param name="man" type="Manifest"/>
                    <param name="url" type="URL"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="path" type="String" line="447"/>
                <declaration name="sealed" type="String" line="448"/>
                <declaration name="specTitle" type="String" line="449"/>
                <declaration name="specVersion" type="String" line="450"/>
                <declaration name="specVendor" type="String" line="451"/>
                <declaration name="implTitle" type="String" line="452"/>
                <declaration name="implVersion" type="String" line="453"/>
                <declaration name="implVendor" type="String" line="454"/>
                <declaration name="sealBase" type="URL" line="455"/>
                <declaration name="attr" type="Attributes" line="456"/>
                <scope line="457"/>
                <scope line="467">
                    <scope line="468"/>
                    <scope line="471"/>
                    <scope line="474"/>
                    <scope line="477"/>
                    <scope line="480"/>
                    <scope line="483"/>
                    <scope line="486"/>
                </scope>
                <scope line="490"/>
            </method>
            <method name="getSystemPackage" type="Package" line="507">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="508">
                    <declaration name="pkg" type="Package" line="509"/>
                    <scope line="510">
                        <declaration name="fn" type="String" line="512"/>
                        <scope line="513"/>
                    </scope>
                </scope>
            </method>
            <method name="getSystemPackages" type="Package[]" line="524">
                <comment line="525">
                    First, update the system package map with new package names                    
                </comment>
                <declaration name="names" type="String[]" line="526"/>
                <scope line="527">
                    <scope line="528"/>
                </scope>
            </method>
            <method name="defineSystemPackage" type="Package" line="537">
                <params>
                    <param name="iname" type="String"/>
                    <param name="fn" type="String"/>
                </params>
                <comment line="541">
                    Get the cached code source url for the file name                    
                </comment>
                <comment line="544">
                    URL not found, so create one                    
                </comment>
                <comment line="552">
                    If loading a JAR file, then also cache the manifest                    
                </comment>
                <comment line="558">
                    Convert to &quot;.&quot;-separated package name                    
                </comment>
                <anonymous_class line="538">
                    <method name="run" type="Package" line="539">
                        <comment line="541">
                            Get the cached code source url for the file name                            
                        </comment>
                        <comment line="544">
                            URL not found, so create one                            
                        </comment>
                        <comment line="552">
                            If loading a JAR file, then also cache the manifest                            
                        </comment>
                        <comment line="558">
                            Convert to &quot;.&quot;-separated package name                            
                        </comment>
                        <declaration name="name" type="String" line="540"/>
                        <declaration name="url" type="URL" line="542"/>
                        <scope line="543">
                            <declaration name="file" type="File" line="545"/>
                            <scope line="546"/>
                            <scope line="548"/>
                            <scope line="550">
                                <scope line="553"/>
                            </scope>
                        </scope>
                        <declaration name="pkg" type="Package" line="560"/>
                        <declaration name="man" type="Manifest" line="561"/>
                        <scope line="562"/>
                        <scope line="564"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="loadManifest" type="Manifest" line="577">
                <params>
                    <param name="fn" type="String"/>
                </params>
                <scope line="580"/>
                <scope line="582"/>
            </method>
            <declaration name="pkgs" type="Map&lt;String,Package&gt;" line="588"/>
            <declaration name="urls" type="Map&lt;String,URL&gt;" line="591"/>
            <declaration name="mans" type="Map&lt;String,Manifest&gt;" line="594"/>
            <method name="getSystemPackage0" type="String" line="596"/>
            <method name="getSystemPackages0" type="String[]" line="597"/>
            <declaration name="pkgName" type="String" line="602"/>
            <declaration name="specTitle" type="String" line="603"/>
            <declaration name="specVersion" type="String" line="604"/>
            <declaration name="specVendor" type="String" line="605"/>
            <declaration name="implTitle" type="String" line="606"/>
            <declaration name="implVersion" type="String" line="607"/>
            <declaration name="implVendor" type="String" line="608"/>
            <declaration name="sealBase" type="URL" line="609"/>
            <declaration name="loader" type="ClassLoader" line="610"/>
            <declaration name="packageInfo" type="Class" line="611"/>
        </class>
    </source>