<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Error" line="28">
            <extends class="Throwable"/>
            <javadoc line="28">
                An {@code Error} is a subclass of {@code Throwable}that indicates serious problems that a reasonable application
                  should not try to catch. Most such errors are abnormal conditions.
                  The {@code ThreadDeath} error, though a &quot;normal&quot; condition,
                  is also a subclass of {@code Error} because most applications
                  should not try to catch it.
                  &lt;p&gt;
                  A method is not required to declare in its {@code throws}clause any subclasses of {@code Error} that might be thrown
                  during the execution of the method but not caught, since these
                  errors are abnormal conditions that should never occur.
                  That is, {@code Error} and its subclasses are regarded as unchecked
                  exceptions for the purposes of compile-time checking of exceptions.                
                <author>
                    Frank Yellin                    
                </author>
                <see>
                    java.lang.ThreadDeath                    
                </see>
                <jls>
                    11.2 Compile-Time Checking of Exceptions                    
                </jls>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <javadoc line="52">
                Constructs a new error with {@code null} as its detail message.
                  The cause is not initialized, and may subsequently be initialized by a
                  call to {@link #initCause}.                
            </javadoc>
            <method name="Error" type="constructor" line="57"/>
            <javadoc line="61">
                Constructs a new error with the specified detail message.  The
                  cause is not initialized, and may subsequently be initialized by
                  a call to {@link #initCause}.                
                <param>
                    message   the detail message. The detail message is saved for
                      later retrieval by the {@link #getMessage()} method.                    
                </param>
            </javadoc>
            <method name="Error" type="constructor" line="69">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="73">
                Constructs a new error with the specified detail message and
                  cause.  &lt;p&gt;Note that the detail message associated with{@code cause} is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
                  this error&apos;s detail message.                
                <param>
                    message the detail message (which is saved for later retrieval
                      by the {@link #getMessage()} method).                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Error" type="constructor" line="87">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="91">
                Constructs a new error with the specified cause and a detail
                  message of {@code (cause==null ? null : cause.toString())} (which
                  typically contains the class and detail message of {@code cause}).
                  This constructor is useful for errors that are little more than
                  wrappers for other throwables.                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="Error" type="constructor" line="104">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="108">
                Constructs a new error with the specified detail message,
                  cause, suppression enabled or disabled, and writable stack
                  trace enabled or disabled.                
                <param>
                    message the detail message.                    
                </param>
                <param>
                    cause the cause.  (A {@code null} value is permitted,
                      and indicates that the cause is nonexistent or unknown.)                    
                </param>
                <param>
                    enableSuppression whether or not suppression is enabled
                      or disabled                    
                </param>
                <param>
                    writableStackTrace whether or not the stack trace should
                      be writable                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="Error" type="constructor" line="125">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                    <param name="enableSuppression" type="boolean"/>
                    <param name="writableStackTrace" type="boolean"/>
                </params>
            </method>
        </class>
    </source>