<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.util.Arrays"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <class name="Character" line="33">
            <comment line="178">
                Normative general types                
            </comment>
            <comment line="182">
                General character types                
            </comment>
            <comment line="637">
                See http://www.unicode.org/Public/UNIDATA/Blocks.txt                
            </comment>
            <comment line="638">
                for the latest specification of Unicode Blocks.                
            </comment>
            <comment line="4738">
                throws ArrayIndexOutofBoundsException if index out of bounds                
            </comment>
            <comment line="4845">
                throws ArrayIndexOutofBoundsException if index-1 out of bounds                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Character"/>
                </type_params>
            </implements>
            <javadoc line="33">
                The {@code Character} class wraps a value of the primitive
                  type {@code char} in an object. An object of type{@code Character} contains a single field whose type is{@code char}.
                  &lt;p&gt;
                  In addition, this class provides several methods for determining
                  a character&apos;s category (lowercase letter, digit, etc.) and for converting
                  characters from uppercase to lowercase and vice versa.
                  &lt;p&gt;
                  Character information is based on the Unicode Standard, version 6.0.0.
                  &lt;p&gt;
                  The methods and data of class {@code Character} are defined by
                  the information in the &lt;i&gt;UnicodeData&lt;/i&gt; file that is part of the
                  Unicode Character Database maintained by the Unicode
                  Consortium. This file specifies various properties including name
                  and general category for every defined Unicode code point or
                  character range.
                  &lt;p&gt;
                  The file and its description are available from the Unicode Consortium at:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;
                  &lt;/ul&gt;
                  &lt;h4&gt;&lt;a name=&quot;unicode&quot;&gt;Unicode Character Representations&lt;/a&gt;&lt;/h4&gt;
                  &lt;p&gt;The {@code char} data type (and therefore the value that a{@code Character} object encapsulates) are based on the
                  original Unicode specification, which defined characters as
                  fixed-width 16-bit entities. The Unicode Standard has since been
                  changed to allow for characters whose representation requires more
                  than 16 bits.  The range of legal &lt;em&gt;code point&lt;/em&gt;s is now
                  U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;.
                  (Refer to the &lt;a
                  href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;
                  definition&lt;/i&gt;&lt;/a&gt; of the U+&lt;i&gt;n&lt;/i&gt; notation in the Unicode
                  Standard.)
                  &lt;p&gt;&lt;a name=&quot;BMP&quot;&gt;The set of characters from U+0000 to U+FFFF is
                  sometimes referred to as the &lt;em&gt;Basic Multilingual Plane (BMP)&lt;/em&gt;.
                  &lt;a name=&quot;supplementary&quot;&gt;Characters&lt;/a&gt; whose code points are greater
                  than U+FFFF are called &lt;em&gt;supplementary character&lt;/em&gt;s.  The Java
                  platform uses the UTF-16 representation in {@code char} arrays and
                  in the {@code String} and {@code StringBuffer} classes. In
                  this representation, supplementary characters are represented as a pair
                  of {@code char} values, the first from the &lt;em&gt;high-surrogates&lt;/em&gt;
                  range, (&amp;#92;uD800-&amp;#92;uDBFF), the second from the
                  &lt;em&gt;low-surrogates&lt;/em&gt; range (&amp;#92;uDC00-&amp;#92;uDFFF).
                  &lt;p&gt;A {@code char} value, therefore, represents Basic
                  Multilingual Plane (BMP) code points, including the surrogate
                  code points, or code units of the UTF-16 encoding. An{@code int} value represents all Unicode code points,
                  including supplementary code points. The lower (least significant)
                  21 bits of {@code int} are used to represent Unicode code
                  points and the upper (most significant) 11 bits must be zero.
                  Unless otherwise specified, the behavior with respect to
                  supplementary characters and surrogate {@code char} values is
                  as follows:
                  &lt;ul&gt;
                  &lt;li&gt;The methods that only accept a {@code char} value cannot support
                  supplementary characters. They treat {@code char} values from the
                  surrogate ranges as undefined characters. For example,{@code Character.isLetter(&apos;\u005CuD840&apos;)} returns {@code false}, even though
                  this specific value if followed by any low-surrogate value in a string
                  would represent a letter.
                  &lt;li&gt;The methods that accept an {@code int} value support all
                  Unicode characters, including supplementary characters. For
                  example, {@code Character.isLetter(0x2F81A)} returns{@code true} because the code point value represents a letter
                  (a CJK ideograph).
                  &lt;/ul&gt;
                  &lt;p&gt;In the Java SE API documentation, &lt;em&gt;Unicode code point&lt;/em&gt; is
                  used for character values in the range between U+0000 and U+10FFFF,
                  and &lt;em&gt;Unicode code unit&lt;/em&gt; is used for 16-bit{@code char} values that are code units of the &lt;em&gt;UTF-16&lt;/em&gt;
                  encoding. For more information on Unicode terminology, refer to the
                  &lt;a href=&quot;http://www.unicode.org/glossary/&quot;&gt;Unicode Glossary&lt;/a&gt;.                
                <author>
                    Lee Boynton                    
                </author>
                <author>
                    Guy Steele                    
                </author>
                <author>
                    Akira Tanaka                    
                </author>
                <author>
                    Martin Buchholz                    
                </author>
                <author>
                    Ulf Zibis                    
                </author>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="MIN_RADIX" type="int" line="124"/>
            <javadoc line="124">
                The minimum radix available for conversion to and from strings.
                  The constant value of this field is the smallest value permitted
                  for the radix argument in radix-conversion methods such as the{@code digit} method, the {@code forDigit} method, and the{@code toString} method of class {@code Integer}.                
                <see>
                    Character#digit(char,int)                    
                </see>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Integer#toString(int,int)                    
                </see>
                <see>
                    Integer#valueOf(String)                    
                </see>
            </javadoc>
            <declaration name="MAX_RADIX" type="int" line="138"/>
            <javadoc line="138">
                The maximum radix available for conversion to and from strings.
                  The constant value of this field is the largest value permitted
                  for the radix argument in radix-conversion methods such as the{@code digit} method, the {@code forDigit} method, and the{@code toString} method of class {@code Integer}.                
                <see>
                    Character#digit(char,int)                    
                </see>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Integer#toString(int,int)                    
                </see>
                <see>
                    Integer#valueOf(String)                    
                </see>
            </javadoc>
            <declaration name="MIN_VALUE" type="char" line="152"/>
            <javadoc line="152">
                The constant value of this field is the smallest value of type{@code char}, {@code &apos;\u005Cu0000&apos;}.                
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <declaration name="MAX_VALUE" type="char" line="160"/>
            <javadoc line="160">
                The constant value of this field is the largest value of type{@code char}, {@code &apos;\u005CuFFFF&apos;}.                
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <declaration name="TYPE" type="Class&lt;Character&gt;" line="168"/>
            <javadoc line="168">
                The {@code Class} instance representing the primitive type{@code char}.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="UNASSIGNED" type="byte" line="185"/>
            <javadoc line="185">
                General category &quot;Cn&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="UPPERCASE_LETTER" type="byte" line="191"/>
            <javadoc line="191">
                General category &quot;Lu&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="LOWERCASE_LETTER" type="byte" line="197"/>
            <javadoc line="197">
                General category &quot;Ll&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="TITLECASE_LETTER" type="byte" line="203"/>
            <javadoc line="203">
                General category &quot;Lt&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="MODIFIER_LETTER" type="byte" line="209"/>
            <javadoc line="209">
                General category &quot;Lm&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="OTHER_LETTER" type="byte" line="215"/>
            <javadoc line="215">
                General category &quot;Lo&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="NON_SPACING_MARK" type="byte" line="221"/>
            <javadoc line="221">
                General category &quot;Mn&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="ENCLOSING_MARK" type="byte" line="227"/>
            <javadoc line="227">
                General category &quot;Me&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="COMBINING_SPACING_MARK" type="byte" line="233"/>
            <javadoc line="233">
                General category &quot;Mc&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="DECIMAL_DIGIT_NUMBER" type="byte" line="239"/>
            <javadoc line="239">
                General category &quot;Nd&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="LETTER_NUMBER" type="byte" line="245"/>
            <javadoc line="245">
                General category &quot;Nl&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="OTHER_NUMBER" type="byte" line="251"/>
            <javadoc line="251">
                General category &quot;No&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="SPACE_SEPARATOR" type="byte" line="257"/>
            <javadoc line="257">
                General category &quot;Zs&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="LINE_SEPARATOR" type="byte" line="263"/>
            <javadoc line="263">
                General category &quot;Zl&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="PARAGRAPH_SEPARATOR" type="byte" line="269"/>
            <javadoc line="269">
                General category &quot;Zp&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="CONTROL" type="byte" line="275"/>
            <javadoc line="275">
                General category &quot;Cc&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="FORMAT" type="byte" line="281"/>
            <javadoc line="281">
                General category &quot;Cf&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="PRIVATE_USE" type="byte" line="287"/>
            <javadoc line="287">
                General category &quot;Co&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="SURROGATE" type="byte" line="293"/>
            <javadoc line="293">
                General category &quot;Cs&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="DASH_PUNCTUATION" type="byte" line="299"/>
            <javadoc line="299">
                General category &quot;Pd&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="START_PUNCTUATION" type="byte" line="305"/>
            <javadoc line="305">
                General category &quot;Ps&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="END_PUNCTUATION" type="byte" line="311"/>
            <javadoc line="311">
                General category &quot;Pe&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="CONNECTOR_PUNCTUATION" type="byte" line="317"/>
            <javadoc line="317">
                General category &quot;Pc&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="OTHER_PUNCTUATION" type="byte" line="323"/>
            <javadoc line="323">
                General category &quot;Po&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="MATH_SYMBOL" type="byte" line="329"/>
            <javadoc line="329">
                General category &quot;Sm&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="CURRENCY_SYMBOL" type="byte" line="335"/>
            <javadoc line="335">
                General category &quot;Sc&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="MODIFIER_SYMBOL" type="byte" line="341"/>
            <javadoc line="341">
                General category &quot;Sk&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="OTHER_SYMBOL" type="byte" line="347"/>
            <javadoc line="347">
                General category &quot;So&quot; in the Unicode specification.                
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="INITIAL_QUOTE_PUNCTUATION" type="byte" line="353"/>
            <javadoc line="353">
                General category &quot;Pi&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FINAL_QUOTE_PUNCTUATION" type="byte" line="359"/>
            <javadoc line="359">
                General category &quot;Pf&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="ERROR" type="int" line="365"/>
            <javadoc line="365">
                Error flag. Use int (code point) to avoid confusion with U+FFFF.                
            </javadoc>
            <declaration name="DIRECTIONALITY_UNDEFINED" type="byte" line="371"/>
            <javadoc line="371">
                Undefined bidirectional character type. Undefined {@code char}values have undefined directionality in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_LEFT_TO_RIGHT" type="byte" line="378"/>
            <javadoc line="378">
                Strong bidirectional character type &quot;L&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_RIGHT_TO_LEFT" type="byte" line="384"/>
            <javadoc line="384">
                Strong bidirectional character type &quot;R&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC" type="byte" line="390"/>
            <javadoc line="390">
                Strong bidirectional character type &quot;AL&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_EUROPEAN_NUMBER" type="byte" line="396"/>
            <javadoc line="396">
                Weak bidirectional character type &quot;EN&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR" type="byte" line="402"/>
            <javadoc line="402">
                Weak bidirectional character type &quot;ES&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR" type="byte" line="408"/>
            <javadoc line="408">
                Weak bidirectional character type &quot;ET&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_ARABIC_NUMBER" type="byte" line="414"/>
            <javadoc line="414">
                Weak bidirectional character type &quot;AN&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_COMMON_NUMBER_SEPARATOR" type="byte" line="420"/>
            <javadoc line="420">
                Weak bidirectional character type &quot;CS&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_NONSPACING_MARK" type="byte" line="426"/>
            <javadoc line="426">
                Weak bidirectional character type &quot;NSM&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_BOUNDARY_NEUTRAL" type="byte" line="432"/>
            <javadoc line="432">
                Weak bidirectional character type &quot;BN&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_PARAGRAPH_SEPARATOR" type="byte" line="438"/>
            <javadoc line="438">
                Neutral bidirectional character type &quot;B&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_SEGMENT_SEPARATOR" type="byte" line="444"/>
            <javadoc line="444">
                Neutral bidirectional character type &quot;S&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_WHITESPACE" type="byte" line="450"/>
            <javadoc line="450">
                Neutral bidirectional character type &quot;WS&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_OTHER_NEUTRALS" type="byte" line="456"/>
            <javadoc line="456">
                Neutral bidirectional character type &quot;ON&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING" type="byte" line="462"/>
            <javadoc line="462">
                Strong bidirectional character type &quot;LRE&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE" type="byte" line="468"/>
            <javadoc line="468">
                Strong bidirectional character type &quot;LRO&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING" type="byte" line="474"/>
            <javadoc line="474">
                Strong bidirectional character type &quot;RLE&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE" type="byte" line="480"/>
            <javadoc line="480">
                Strong bidirectional character type &quot;RLO&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIRECTIONALITY_POP_DIRECTIONAL_FORMAT" type="byte" line="486"/>
            <javadoc line="486">
                Weak bidirectional character type &quot;PDF&quot; in the Unicode specification.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="MIN_HIGH_SURROGATE" type="char" line="492"/>
            <javadoc line="492">
                The minimum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#high_surrogate_code_unit&quot;&gt;
                  Unicode high-surrogate code unit&lt;/a&gt;
                  in the UTF-16 encoding, constant {@code &apos;\u005CuD800&apos;}.
                  A high-surrogate is also known as a &lt;i&gt;leading-surrogate&lt;/i&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MAX_HIGH_SURROGATE" type="char" line="503"/>
            <javadoc line="503">
                The maximum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#high_surrogate_code_unit&quot;&gt;
                  Unicode high-surrogate code unit&lt;/a&gt;
                  in the UTF-16 encoding, constant {@code &apos;\u005CuDBFF&apos;}.
                  A high-surrogate is also known as a &lt;i&gt;leading-surrogate&lt;/i&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MIN_LOW_SURROGATE" type="char" line="514"/>
            <javadoc line="514">
                The minimum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#low_surrogate_code_unit&quot;&gt;
                  Unicode low-surrogate code unit&lt;/a&gt;
                  in the UTF-16 encoding, constant {@code &apos;\u005CuDC00&apos;}.
                  A low-surrogate is also known as a &lt;i&gt;trailing-surrogate&lt;/i&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MAX_LOW_SURROGATE" type="char" line="525"/>
            <javadoc line="525">
                The maximum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#low_surrogate_code_unit&quot;&gt;
                  Unicode low-surrogate code unit&lt;/a&gt;
                  in the UTF-16 encoding, constant {@code &apos;\u005CuDFFF&apos;}.
                  A low-surrogate is also known as a &lt;i&gt;trailing-surrogate&lt;/i&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MIN_SURROGATE" type="char" line="536"/>
            <javadoc line="536">
                The minimum value of a Unicode surrogate code unit in the
                  UTF-16 encoding, constant {@code &apos;\u005CuD800&apos;}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MAX_SURROGATE" type="char" line="544"/>
            <javadoc line="544">
                The maximum value of a Unicode surrogate code unit in the
                  UTF-16 encoding, constant {@code &apos;\u005CuDFFF&apos;}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MIN_SUPPLEMENTARY_CODE_POINT" type="int" line="552"/>
            <javadoc line="552">
                The minimum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#supplementary_code_point&quot;&gt;
                  Unicode supplementary code point&lt;/a&gt;, constant {@code U+10000}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MIN_CODE_POINT" type="int" line="561"/>
            <javadoc line="561">
                The minimum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#code_point&quot;&gt;
                  Unicode code point&lt;/a&gt;, constant {@code U+0000}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MAX_CODE_POINT" type="int" line="570"/>
            <javadoc line="570">
                The maximum value of a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#code_point&quot;&gt;
                  Unicode code point&lt;/a&gt;, constant {@code U+10FFFF}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="Subset" line="580">
                <javadoc line="580">
                    Instances of this class represent particular subsets of the Unicode
                      character set.  The only family of subsets defined in the{@code Character} class is {@link Character.UnicodeBlock}.
                      Other portions of the Java API may define other subsets for their
                      own purposes.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="name" type="String" line="591"/>
                <javadoc line="593">
                    Constructs a new {@code Subset} instance.                    
                    <param>
                        name  The name of this subset                        
                    </param>
                    <exception>
                        NullPointerException if name is {@code null}                        
                    </exception>
                </javadoc>
                <method name="Subset" type="constructor" line="599">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="600"/>
                </method>
                <javadoc line="606">
                    Compares two {@code Subset} objects for equality.
                      This method returns {@code true} if and only if{@code this} and the argument refer to the same
                      object; since this method is {@code final}, this
                      guarantee holds for all subclasses.                    
                </javadoc>
                <method name="equals" type="boolean" line="613">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="617">
                    Returns the standard hash code as defined by the{@link Object#hashCode} method.  This method
                      is {@code final} in order to ensure that the{@code equals} and {@code hashCode} methods will
                      be consistent in all subclasses.                    
                </javadoc>
                <method name="hashCode" type="int" line="624"/>
                <javadoc line="628">
                    Returns the name of this subset.                    
                </javadoc>
                <method name="toString" type="String" line="631"/>
            </class>
            <class name="UnicodeBlock" line="639">
                <extends class="Subset"/>
                <javadoc line="639">
                    A family of character subsets representing the character blocks in the
                      Unicode specification. Character blocks generally define characters
                      used for a specific script or purpose. A character is contained by
                      at most one Unicode block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="map" type="Map&lt;String,UnicodeBlock&gt;" line="649"/>
                <javadoc line="651">
                    Creates a UnicodeBlock with the given identifier name.
                      This name must be the same as the block identifier.                    
                </javadoc>
                <method name="UnicodeBlock" type="constructor" line="655">
                    <params>
                        <param name="idName" type="String"/>
                    </params>
                </method>
                <javadoc line="660">
                    Creates a UnicodeBlock with the given identifier name and
                      alias name.                    
                </javadoc>
                <method name="UnicodeBlock" type="constructor" line="664">
                    <params>
                        <param name="idName" type="String"/>
                        <param name="alias" type="String"/>
                    </params>
                </method>
                <javadoc line="669">
                    Creates a UnicodeBlock with the given identifier name and
                      alias names.                    
                </javadoc>
                <method name="UnicodeBlock" type="constructor" line="673">
                    <params>
                        <param name="idName" type="String"/>
                        <param name="aliases" type="String"/>
                    </params>
                </method>
                <declaration name="BASIC_LATIN" type="UnicodeBlock" line="679"/>
                <javadoc line="679">
                    Constant for the &quot;Basic Latin&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LATIN_1_SUPPLEMENT" type="UnicodeBlock" line="688"/>
                <javadoc line="688">
                    Constant for the &quot;Latin-1 Supplement&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LATIN_EXTENDED_A" type="UnicodeBlock" line="697"/>
                <javadoc line="697">
                    Constant for the &quot;Latin Extended-A&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LATIN_EXTENDED_B" type="UnicodeBlock" line="706"/>
                <javadoc line="706">
                    Constant for the &quot;Latin Extended-B&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="IPA_EXTENSIONS" type="UnicodeBlock" line="715"/>
                <javadoc line="715">
                    Constant for the &quot;IPA Extensions&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="SPACING_MODIFIER_LETTERS" type="UnicodeBlock" line="724"/>
                <javadoc line="724">
                    Constant for the &quot;Spacing Modifier Letters&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="COMBINING_DIACRITICAL_MARKS" type="UnicodeBlock" line="733"/>
                <javadoc line="733">
                    Constant for the &quot;Combining Diacritical Marks&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GREEK" type="UnicodeBlock" line="742"/>
                <javadoc line="742">
                    Constant for the &quot;Greek and Coptic&quot; Unicode character block.
                      &lt;p&gt;
                      This block was previously known as the &quot;Greek&quot; block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CYRILLIC" type="UnicodeBlock" line="754"/>
                <javadoc line="754">
                    Constant for the &quot;Cyrillic&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ARMENIAN" type="UnicodeBlock" line="761"/>
                <javadoc line="761">
                    Constant for the &quot;Armenian&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HEBREW" type="UnicodeBlock" line="768"/>
                <javadoc line="768">
                    Constant for the &quot;Hebrew&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ARABIC" type="UnicodeBlock" line="775"/>
                <javadoc line="775">
                    Constant for the &quot;Arabic&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="DEVANAGARI" type="UnicodeBlock" line="782"/>
                <javadoc line="782">
                    Constant for the &quot;Devanagari&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="BENGALI" type="UnicodeBlock" line="789"/>
                <javadoc line="789">
                    Constant for the &quot;Bengali&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GURMUKHI" type="UnicodeBlock" line="796"/>
                <javadoc line="796">
                    Constant for the &quot;Gurmukhi&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GUJARATI" type="UnicodeBlock" line="803"/>
                <javadoc line="803">
                    Constant for the &quot;Gujarati&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ORIYA" type="UnicodeBlock" line="810"/>
                <javadoc line="810">
                    Constant for the &quot;Oriya&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="TAMIL" type="UnicodeBlock" line="817"/>
                <javadoc line="817">
                    Constant for the &quot;Tamil&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="TELUGU" type="UnicodeBlock" line="824"/>
                <javadoc line="824">
                    Constant for the &quot;Telugu&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="KANNADA" type="UnicodeBlock" line="831"/>
                <javadoc line="831">
                    Constant for the &quot;Kannada&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="MALAYALAM" type="UnicodeBlock" line="838"/>
                <javadoc line="838">
                    Constant for the &quot;Malayalam&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="THAI" type="UnicodeBlock" line="845"/>
                <javadoc line="845">
                    Constant for the &quot;Thai&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LAO" type="UnicodeBlock" line="852"/>
                <javadoc line="852">
                    Constant for the &quot;Lao&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="TIBETAN" type="UnicodeBlock" line="859"/>
                <javadoc line="859">
                    Constant for the &quot;Tibetan&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GEORGIAN" type="UnicodeBlock" line="866"/>
                <javadoc line="866">
                    Constant for the &quot;Georgian&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HANGUL_JAMO" type="UnicodeBlock" line="873"/>
                <javadoc line="873">
                    Constant for the &quot;Hangul Jamo&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LATIN_EXTENDED_ADDITIONAL" type="UnicodeBlock" line="882"/>
                <javadoc line="882">
                    Constant for the &quot;Latin Extended Additional&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GREEK_EXTENDED" type="UnicodeBlock" line="891"/>
                <javadoc line="891">
                    Constant for the &quot;Greek Extended&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GENERAL_PUNCTUATION" type="UnicodeBlock" line="900"/>
                <javadoc line="900">
                    Constant for the &quot;General Punctuation&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="SUPERSCRIPTS_AND_SUBSCRIPTS" type="UnicodeBlock" line="909"/>
                <javadoc line="909">
                    Constant for the &quot;Superscripts and Subscripts&quot; Unicode character
                      block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CURRENCY_SYMBOLS" type="UnicodeBlock" line="919"/>
                <javadoc line="919">
                    Constant for the &quot;Currency Symbols&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="COMBINING_MARKS_FOR_SYMBOLS" type="UnicodeBlock" line="928"/>
                <javadoc line="928">
                    Constant for the &quot;Combining Diacritical Marks for Symbols&quot; Unicode
                      character block.
                      &lt;p&gt;
                      This block was previously known as &quot;Combining Marks for Symbols&quot;.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="LETTERLIKE_SYMBOLS" type="UnicodeBlock" line="942"/>
                <javadoc line="942">
                    Constant for the &quot;Letterlike Symbols&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="NUMBER_FORMS" type="UnicodeBlock" line="951"/>
                <javadoc line="951">
                    Constant for the &quot;Number Forms&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ARROWS" type="UnicodeBlock" line="960"/>
                <javadoc line="960">
                    Constant for the &quot;Arrows&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="MATHEMATICAL_OPERATORS" type="UnicodeBlock" line="967"/>
                <javadoc line="967">
                    Constant for the &quot;Mathematical Operators&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_TECHNICAL" type="UnicodeBlock" line="976"/>
                <javadoc line="976">
                    Constant for the &quot;Miscellaneous Technical&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CONTROL_PICTURES" type="UnicodeBlock" line="985"/>
                <javadoc line="985">
                    Constant for the &quot;Control Pictures&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="OPTICAL_CHARACTER_RECOGNITION" type="UnicodeBlock" line="994"/>
                <javadoc line="994">
                    Constant for the &quot;Optical Character Recognition&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ENCLOSED_ALPHANUMERICS" type="UnicodeBlock" line="1003"/>
                <javadoc line="1003">
                    Constant for the &quot;Enclosed Alphanumerics&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="BOX_DRAWING" type="UnicodeBlock" line="1012"/>
                <javadoc line="1012">
                    Constant for the &quot;Box Drawing&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="BLOCK_ELEMENTS" type="UnicodeBlock" line="1021"/>
                <javadoc line="1021">
                    Constant for the &quot;Block Elements&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="GEOMETRIC_SHAPES" type="UnicodeBlock" line="1030"/>
                <javadoc line="1030">
                    Constant for the &quot;Geometric Shapes&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_SYMBOLS" type="UnicodeBlock" line="1039"/>
                <javadoc line="1039">
                    Constant for the &quot;Miscellaneous Symbols&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="DINGBATS" type="UnicodeBlock" line="1048"/>
                <javadoc line="1048">
                    Constant for the &quot;Dingbats&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CJK_SYMBOLS_AND_PUNCTUATION" type="UnicodeBlock" line="1055"/>
                <javadoc line="1055">
                    Constant for the &quot;CJK Symbols and Punctuation&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HIRAGANA" type="UnicodeBlock" line="1064"/>
                <javadoc line="1064">
                    Constant for the &quot;Hiragana&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="KATAKANA" type="UnicodeBlock" line="1071"/>
                <javadoc line="1071">
                    Constant for the &quot;Katakana&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="BOPOMOFO" type="UnicodeBlock" line="1078"/>
                <javadoc line="1078">
                    Constant for the &quot;Bopomofo&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HANGUL_COMPATIBILITY_JAMO" type="UnicodeBlock" line="1085"/>
                <javadoc line="1085">
                    Constant for the &quot;Hangul Compatibility Jamo&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="KANBUN" type="UnicodeBlock" line="1094"/>
                <javadoc line="1094">
                    Constant for the &quot;Kanbun&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ENCLOSED_CJK_LETTERS_AND_MONTHS" type="UnicodeBlock" line="1101"/>
                <javadoc line="1101">
                    Constant for the &quot;Enclosed CJK Letters and Months&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CJK_COMPATIBILITY" type="UnicodeBlock" line="1110"/>
                <javadoc line="1110">
                    Constant for the &quot;CJK Compatibility&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CJK_UNIFIED_IDEOGRAPHS" type="UnicodeBlock" line="1119"/>
                <javadoc line="1119">
                    Constant for the &quot;CJK Unified Ideographs&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HANGUL_SYLLABLES" type="UnicodeBlock" line="1128"/>
                <javadoc line="1128">
                    Constant for the &quot;Hangul Syllables&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="PRIVATE_USE_AREA" type="UnicodeBlock" line="1137"/>
                <javadoc line="1137">
                    Constant for the &quot;Private Use Area&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CJK_COMPATIBILITY_IDEOGRAPHS" type="UnicodeBlock" line="1146"/>
                <javadoc line="1146">
                    Constant for the &quot;CJK Compatibility Ideographs&quot; Unicode character
                      block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ALPHABETIC_PRESENTATION_FORMS" type="UnicodeBlock" line="1156"/>
                <javadoc line="1156">
                    Constant for the &quot;Alphabetic Presentation Forms&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ARABIC_PRESENTATION_FORMS_A" type="UnicodeBlock" line="1165"/>
                <javadoc line="1165">
                    Constant for the &quot;Arabic Presentation Forms-A&quot; Unicode character
                      block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="COMBINING_HALF_MARKS" type="UnicodeBlock" line="1175"/>
                <javadoc line="1175">
                    Constant for the &quot;Combining Half Marks&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="CJK_COMPATIBILITY_FORMS" type="UnicodeBlock" line="1184"/>
                <javadoc line="1184">
                    Constant for the &quot;CJK Compatibility Forms&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="SMALL_FORM_VARIANTS" type="UnicodeBlock" line="1193"/>
                <javadoc line="1193">
                    Constant for the &quot;Small Form Variants&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="ARABIC_PRESENTATION_FORMS_B" type="UnicodeBlock" line="1202"/>
                <javadoc line="1202">
                    Constant for the &quot;Arabic Presentation Forms-B&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="HALFWIDTH_AND_FULLWIDTH_FORMS" type="UnicodeBlock" line="1211"/>
                <javadoc line="1211">
                    Constant for the &quot;Halfwidth and Fullwidth Forms&quot; Unicode character
                      block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="SPECIALS" type="UnicodeBlock" line="1221"/>
                <javadoc line="1221">
                    Constant for the &quot;Specials&quot; Unicode character block.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="SURROGATES_AREA" type="UnicodeBlock" line="1228"/>
                <javadoc line="1228">
                    @deprecated As of J2SE 5, use {@link #HIGH_SURROGATES},{@link #HIGH_PRIVATE_USE_SURROGATES}, and{@link #LOW_SURROGATES}. These new constants match
                      the block definitions of the Unicode Standard.
                      The {@link #of(char)} and {@link #of(int)} methods
                      return the new constants, not SURROGATES_AREA.                    
                </javadoc>
                <declaration name="SYRIAC" type="UnicodeBlock" line="1240"/>
                <javadoc line="1240">
                    Constant for the &quot;Syriac&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="THAANA" type="UnicodeBlock" line="1247"/>
                <javadoc line="1247">
                    Constant for the &quot;Thaana&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="SINHALA" type="UnicodeBlock" line="1254"/>
                <javadoc line="1254">
                    Constant for the &quot;Sinhala&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="MYANMAR" type="UnicodeBlock" line="1261"/>
                <javadoc line="1261">
                    Constant for the &quot;Myanmar&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="ETHIOPIC" type="UnicodeBlock" line="1268"/>
                <javadoc line="1268">
                    Constant for the &quot;Ethiopic&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="CHEROKEE" type="UnicodeBlock" line="1275"/>
                <javadoc line="1275">
                    Constant for the &quot;Cherokee&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" type="UnicodeBlock" line="1282"/>
                <javadoc line="1282">
                    Constant for the &quot;Unified Canadian Aboriginal Syllabics&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="OGHAM" type="UnicodeBlock" line="1291"/>
                <javadoc line="1291">
                    Constant for the &quot;Ogham&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="RUNIC" type="UnicodeBlock" line="1298"/>
                <javadoc line="1298">
                    Constant for the &quot;Runic&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="KHMER" type="UnicodeBlock" line="1305"/>
                <javadoc line="1305">
                    Constant for the &quot;Khmer&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="MONGOLIAN" type="UnicodeBlock" line="1312"/>
                <javadoc line="1312">
                    Constant for the &quot;Mongolian&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="BRAILLE_PATTERNS" type="UnicodeBlock" line="1319"/>
                <javadoc line="1319">
                    Constant for the &quot;Braille Patterns&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="CJK_RADICALS_SUPPLEMENT" type="UnicodeBlock" line="1328"/>
                <javadoc line="1328">
                    Constant for the &quot;CJK Radicals Supplement&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="KANGXI_RADICALS" type="UnicodeBlock" line="1337"/>
                <javadoc line="1337">
                    Constant for the &quot;Kangxi Radicals&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="IDEOGRAPHIC_DESCRIPTION_CHARACTERS" type="UnicodeBlock" line="1346"/>
                <javadoc line="1346">
                    Constant for the &quot;Ideographic Description Characters&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="BOPOMOFO_EXTENDED" type="UnicodeBlock" line="1355"/>
                <javadoc line="1355">
                    Constant for the &quot;Bopomofo Extended&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" type="UnicodeBlock" line="1364"/>
                <javadoc line="1364">
                    Constant for the &quot;CJK Unified Ideographs Extension A&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="YI_SYLLABLES" type="UnicodeBlock" line="1373"/>
                <javadoc line="1373">
                    Constant for the &quot;Yi Syllables&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="YI_RADICALS" type="UnicodeBlock" line="1382"/>
                <javadoc line="1382">
                    Constant for the &quot;Yi Radicals&quot; Unicode character block.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="CYRILLIC_SUPPLEMENTARY" type="UnicodeBlock" line="1391"/>
                <javadoc line="1391">
                    Constant for the &quot;Cyrillic Supplementary&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="TAGALOG" type="UnicodeBlock" line="1402"/>
                <javadoc line="1402">
                    Constant for the &quot;Tagalog&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="HANUNOO" type="UnicodeBlock" line="1409"/>
                <javadoc line="1409">
                    Constant for the &quot;Hanunoo&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="BUHID" type="UnicodeBlock" line="1416"/>
                <javadoc line="1416">
                    Constant for the &quot;Buhid&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="TAGBANWA" type="UnicodeBlock" line="1423"/>
                <javadoc line="1423">
                    Constant for the &quot;Tagbanwa&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="LIMBU" type="UnicodeBlock" line="1430"/>
                <javadoc line="1430">
                    Constant for the &quot;Limbu&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="TAI_LE" type="UnicodeBlock" line="1437"/>
                <javadoc line="1437">
                    Constant for the &quot;Tai Le&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="KHMER_SYMBOLS" type="UnicodeBlock" line="1446"/>
                <javadoc line="1446">
                    Constant for the &quot;Khmer Symbols&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="PHONETIC_EXTENSIONS" type="UnicodeBlock" line="1455"/>
                <javadoc line="1455">
                    Constant for the &quot;Phonetic Extensions&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A" type="UnicodeBlock" line="1464"/>
                <javadoc line="1464">
                    Constant for the &quot;Miscellaneous Mathematical Symbols-A&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTAL_ARROWS_A" type="UnicodeBlock" line="1473"/>
                <javadoc line="1473">
                    Constant for the &quot;Supplemental Arrows-A&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTAL_ARROWS_B" type="UnicodeBlock" line="1482"/>
                <javadoc line="1482">
                    Constant for the &quot;Supplemental Arrows-B&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B" type="UnicodeBlock" line="1491"/>
                <javadoc line="1491">
                    Constant for the &quot;Miscellaneous Mathematical Symbols-B&quot; Unicode
                      character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTAL_MATHEMATICAL_OPERATORS" type="UnicodeBlock" line="1501"/>
                <javadoc line="1501">
                    Constant for the &quot;Supplemental Mathematical Operators&quot; Unicode
                      character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_SYMBOLS_AND_ARROWS" type="UnicodeBlock" line="1511"/>
                <javadoc line="1511">
                    Constant for the &quot;Miscellaneous Symbols and Arrows&quot; Unicode character
                      block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="KATAKANA_PHONETIC_EXTENSIONS" type="UnicodeBlock" line="1521"/>
                <javadoc line="1521">
                    Constant for the &quot;Katakana Phonetic Extensions&quot; Unicode character
                      block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="YIJING_HEXAGRAM_SYMBOLS" type="UnicodeBlock" line="1531"/>
                <javadoc line="1531">
                    Constant for the &quot;Yijing Hexagram Symbols&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="VARIATION_SELECTORS" type="UnicodeBlock" line="1540"/>
                <javadoc line="1540">
                    Constant for the &quot;Variation Selectors&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="LINEAR_B_SYLLABARY" type="UnicodeBlock" line="1549"/>
                <javadoc line="1549">
                    Constant for the &quot;Linear B Syllabary&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="LINEAR_B_IDEOGRAMS" type="UnicodeBlock" line="1558"/>
                <javadoc line="1558">
                    Constant for the &quot;Linear B Ideograms&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="AEGEAN_NUMBERS" type="UnicodeBlock" line="1567"/>
                <javadoc line="1567">
                    Constant for the &quot;Aegean Numbers&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="OLD_ITALIC" type="UnicodeBlock" line="1576"/>
                <javadoc line="1576">
                    Constant for the &quot;Old Italic&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="GOTHIC" type="UnicodeBlock" line="1585"/>
                <javadoc line="1585">
                    Constant for the &quot;Gothic&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="UGARITIC" type="UnicodeBlock" line="1592"/>
                <javadoc line="1592">
                    Constant for the &quot;Ugaritic&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="DESERET" type="UnicodeBlock" line="1599"/>
                <javadoc line="1599">
                    Constant for the &quot;Deseret&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SHAVIAN" type="UnicodeBlock" line="1606"/>
                <javadoc line="1606">
                    Constant for the &quot;Shavian&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="OSMANYA" type="UnicodeBlock" line="1613"/>
                <javadoc line="1613">
                    Constant for the &quot;Osmanya&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="CYPRIOT_SYLLABARY" type="UnicodeBlock" line="1620"/>
                <javadoc line="1620">
                    Constant for the &quot;Cypriot Syllabary&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="BYZANTINE_MUSICAL_SYMBOLS" type="UnicodeBlock" line="1629"/>
                <javadoc line="1629">
                    Constant for the &quot;Byzantine Musical Symbols&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MUSICAL_SYMBOLS" type="UnicodeBlock" line="1638"/>
                <javadoc line="1638">
                    Constant for the &quot;Musical Symbols&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="TAI_XUAN_JING_SYMBOLS" type="UnicodeBlock" line="1647"/>
                <javadoc line="1647">
                    Constant for the &quot;Tai Xuan Jing Symbols&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="MATHEMATICAL_ALPHANUMERIC_SYMBOLS" type="UnicodeBlock" line="1656"/>
                <javadoc line="1656">
                    Constant for the &quot;Mathematical Alphanumeric Symbols&quot; Unicode
                      character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B" type="UnicodeBlock" line="1666"/>
                <javadoc line="1666">
                    Constant for the &quot;CJK Unified Ideographs Extension B&quot; Unicode
                      character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT" type="UnicodeBlock" line="1676"/>
                <javadoc line="1676">
                    Constant for the &quot;CJK Compatibility Ideographs Supplement&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="TAGS" type="UnicodeBlock" line="1685"/>
                <javadoc line="1685">
                    Constant for the &quot;Tags&quot; Unicode character block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="VARIATION_SELECTORS_SUPPLEMENT" type="UnicodeBlock" line="1692"/>
                <javadoc line="1692">
                    Constant for the &quot;Variation Selectors Supplement&quot; Unicode character
                      block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTARY_PRIVATE_USE_AREA_A" type="UnicodeBlock" line="1702"/>
                <javadoc line="1702">
                    Constant for the &quot;Supplementary Private Use Area-A&quot; Unicode character
                      block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTARY_PRIVATE_USE_AREA_B" type="UnicodeBlock" line="1712"/>
                <javadoc line="1712">
                    Constant for the &quot;Supplementary Private Use Area-B&quot; Unicode character
                      block.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="HIGH_SURROGATES" type="UnicodeBlock" line="1722"/>
                <javadoc line="1722">
                    Constant for the &quot;High Surrogates&quot; Unicode character block.
                      This block represents codepoint values in the high surrogate
                      range: U+D800 through U+DB7F                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="HIGH_PRIVATE_USE_SURROGATES" type="UnicodeBlock" line="1734"/>
                <javadoc line="1734">
                    Constant for the &quot;High Private Use Surrogates&quot; Unicode character
                      block.
                      This block represents codepoint values in the private use high
                      surrogate range: U+DB80 through U+DBFF                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="LOW_SURROGATES" type="UnicodeBlock" line="1747"/>
                <javadoc line="1747">
                    Constant for the &quot;Low Surrogates&quot; Unicode character block.
                      This block represents codepoint values in the low surrogate
                      range: U+DC00 through U+DFFF                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="ARABIC_SUPPLEMENT" type="UnicodeBlock" line="1759"/>
                <javadoc line="1759">
                    Constant for the &quot;Arabic Supplement&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="NKO" type="UnicodeBlock" line="1768"/>
                <javadoc line="1768">
                    Constant for the &quot;NKo&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="SAMARITAN" type="UnicodeBlock" line="1775"/>
                <javadoc line="1775">
                    Constant for the &quot;Samaritan&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MANDAIC" type="UnicodeBlock" line="1782"/>
                <javadoc line="1782">
                    Constant for the &quot;Mandaic&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ETHIOPIC_SUPPLEMENT" type="UnicodeBlock" line="1789"/>
                <javadoc line="1789">
                    Constant for the &quot;Ethiopic Supplement&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED" type="UnicodeBlock" line="1798"/>
                <javadoc line="1798">
                    Constant for the &quot;Unified Canadian Aboriginal Syllabics Extended&quot;
                      Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="NEW_TAI_LUE" type="UnicodeBlock" line="1808"/>
                <javadoc line="1808">
                    Constant for the &quot;New Tai Lue&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BUGINESE" type="UnicodeBlock" line="1817"/>
                <javadoc line="1817">
                    Constant for the &quot;Buginese&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="TAI_THAM" type="UnicodeBlock" line="1824"/>
                <javadoc line="1824">
                    Constant for the &quot;Tai Tham&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BALINESE" type="UnicodeBlock" line="1833"/>
                <javadoc line="1833">
                    Constant for the &quot;Balinese&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="SUNDANESE" type="UnicodeBlock" line="1840"/>
                <javadoc line="1840">
                    Constant for the &quot;Sundanese&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BATAK" type="UnicodeBlock" line="1847"/>
                <javadoc line="1847">
                    Constant for the &quot;Batak&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LEPCHA" type="UnicodeBlock" line="1854"/>
                <javadoc line="1854">
                    Constant for the &quot;Lepcha&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="OL_CHIKI" type="UnicodeBlock" line="1861"/>
                <javadoc line="1861">
                    Constant for the &quot;Ol Chiki&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="VEDIC_EXTENSIONS" type="UnicodeBlock" line="1870"/>
                <javadoc line="1870">
                    Constant for the &quot;Vedic Extensions&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="PHONETIC_EXTENSIONS_SUPPLEMENT" type="UnicodeBlock" line="1879"/>
                <javadoc line="1879">
                    Constant for the &quot;Phonetic Extensions Supplement&quot; Unicode character
                      block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="COMBINING_DIACRITICAL_MARKS_SUPPLEMENT" type="UnicodeBlock" line="1889"/>
                <javadoc line="1889">
                    Constant for the &quot;Combining Diacritical Marks Supplement&quot; Unicode
                      character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="GLAGOLITIC" type="UnicodeBlock" line="1899"/>
                <javadoc line="1899">
                    Constant for the &quot;Glagolitic&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LATIN_EXTENDED_C" type="UnicodeBlock" line="1906"/>
                <javadoc line="1906">
                    Constant for the &quot;Latin Extended-C&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="COPTIC" type="UnicodeBlock" line="1915"/>
                <javadoc line="1915">
                    Constant for the &quot;Coptic&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="GEORGIAN_SUPPLEMENT" type="UnicodeBlock" line="1922"/>
                <javadoc line="1922">
                    Constant for the &quot;Georgian Supplement&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="TIFINAGH" type="UnicodeBlock" line="1931"/>
                <javadoc line="1931">
                    Constant for the &quot;Tifinagh&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ETHIOPIC_EXTENDED" type="UnicodeBlock" line="1938"/>
                <javadoc line="1938">
                    Constant for the &quot;Ethiopic Extended&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CYRILLIC_EXTENDED_A" type="UnicodeBlock" line="1947"/>
                <javadoc line="1947">
                    Constant for the &quot;Cyrillic Extended-A&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="SUPPLEMENTAL_PUNCTUATION" type="UnicodeBlock" line="1956"/>
                <javadoc line="1956">
                    Constant for the &quot;Supplemental Punctuation&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CJK_STROKES" type="UnicodeBlock" line="1965"/>
                <javadoc line="1965">
                    Constant for the &quot;CJK Strokes&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LISU" type="UnicodeBlock" line="1974"/>
                <javadoc line="1974">
                    Constant for the &quot;Lisu&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="VAI" type="UnicodeBlock" line="1981"/>
                <javadoc line="1981">
                    Constant for the &quot;Vai&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CYRILLIC_EXTENDED_B" type="UnicodeBlock" line="1988"/>
                <javadoc line="1988">
                    Constant for the &quot;Cyrillic Extended-B&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BAMUM" type="UnicodeBlock" line="1997"/>
                <javadoc line="1997">
                    Constant for the &quot;Bamum&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MODIFIER_TONE_LETTERS" type="UnicodeBlock" line="2004"/>
                <javadoc line="2004">
                    Constant for the &quot;Modifier Tone Letters&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LATIN_EXTENDED_D" type="UnicodeBlock" line="2013"/>
                <javadoc line="2013">
                    Constant for the &quot;Latin Extended-D&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="SYLOTI_NAGRI" type="UnicodeBlock" line="2022"/>
                <javadoc line="2022">
                    Constant for the &quot;Syloti Nagri&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="COMMON_INDIC_NUMBER_FORMS" type="UnicodeBlock" line="2031"/>
                <javadoc line="2031">
                    Constant for the &quot;Common Indic Number Forms&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="PHAGS_PA" type="UnicodeBlock" line="2040"/>
                <javadoc line="2040">
                    Constant for the &quot;Phags-pa&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="SAURASHTRA" type="UnicodeBlock" line="2048"/>
                <javadoc line="2048">
                    Constant for the &quot;Saurashtra&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="DEVANAGARI_EXTENDED" type="UnicodeBlock" line="2055"/>
                <javadoc line="2055">
                    Constant for the &quot;Devanagari Extended&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="KAYAH_LI" type="UnicodeBlock" line="2064"/>
                <javadoc line="2064">
                    Constant for the &quot;Kayah Li&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="REJANG" type="UnicodeBlock" line="2073"/>
                <javadoc line="2073">
                    Constant for the &quot;Rejang&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="HANGUL_JAMO_EXTENDED_A" type="UnicodeBlock" line="2080"/>
                <javadoc line="2080">
                    Constant for the &quot;Hangul Jamo Extended-A&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="JAVANESE" type="UnicodeBlock" line="2089"/>
                <javadoc line="2089">
                    Constant for the &quot;Javanese&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CHAM" type="UnicodeBlock" line="2096"/>
                <javadoc line="2096">
                    Constant for the &quot;Cham&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MYANMAR_EXTENDED_A" type="UnicodeBlock" line="2103"/>
                <javadoc line="2103">
                    Constant for the &quot;Myanmar Extended-A&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="TAI_VIET" type="UnicodeBlock" line="2112"/>
                <javadoc line="2112">
                    Constant for the &quot;Tai Viet&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ETHIOPIC_EXTENDED_A" type="UnicodeBlock" line="2121"/>
                <javadoc line="2121">
                    Constant for the &quot;Ethiopic Extended-A&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MEETEI_MAYEK" type="UnicodeBlock" line="2130"/>
                <javadoc line="2130">
                    Constant for the &quot;Meetei Mayek&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="HANGUL_JAMO_EXTENDED_B" type="UnicodeBlock" line="2139"/>
                <javadoc line="2139">
                    Constant for the &quot;Hangul Jamo Extended-B&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="VERTICAL_FORMS" type="UnicodeBlock" line="2148"/>
                <javadoc line="2148">
                    Constant for the &quot;Vertical Forms&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ANCIENT_GREEK_NUMBERS" type="UnicodeBlock" line="2157"/>
                <javadoc line="2157">
                    Constant for the &quot;Ancient Greek Numbers&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ANCIENT_SYMBOLS" type="UnicodeBlock" line="2166"/>
                <javadoc line="2166">
                    Constant for the &quot;Ancient Symbols&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="PHAISTOS_DISC" type="UnicodeBlock" line="2175"/>
                <javadoc line="2175">
                    Constant for the &quot;Phaistos Disc&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LYCIAN" type="UnicodeBlock" line="2184"/>
                <javadoc line="2184">
                    Constant for the &quot;Lycian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CARIAN" type="UnicodeBlock" line="2191"/>
                <javadoc line="2191">
                    Constant for the &quot;Carian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="OLD_PERSIAN" type="UnicodeBlock" line="2198"/>
                <javadoc line="2198">
                    Constant for the &quot;Old Persian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="IMPERIAL_ARAMAIC" type="UnicodeBlock" line="2207"/>
                <javadoc line="2207">
                    Constant for the &quot;Imperial Aramaic&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="PHOENICIAN" type="UnicodeBlock" line="2216"/>
                <javadoc line="2216">
                    Constant for the &quot;Phoenician&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="LYDIAN" type="UnicodeBlock" line="2223"/>
                <javadoc line="2223">
                    Constant for the &quot;Lydian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="KHAROSHTHI" type="UnicodeBlock" line="2230"/>
                <javadoc line="2230">
                    Constant for the &quot;Kharoshthi&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="OLD_SOUTH_ARABIAN" type="UnicodeBlock" line="2237"/>
                <javadoc line="2237">
                    Constant for the &quot;Old South Arabian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="AVESTAN" type="UnicodeBlock" line="2246"/>
                <javadoc line="2246">
                    Constant for the &quot;Avestan&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="INSCRIPTIONAL_PARTHIAN" type="UnicodeBlock" line="2253"/>
                <javadoc line="2253">
                    Constant for the &quot;Inscriptional Parthian&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="INSCRIPTIONAL_PAHLAVI" type="UnicodeBlock" line="2262"/>
                <javadoc line="2262">
                    Constant for the &quot;Inscriptional Pahlavi&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="OLD_TURKIC" type="UnicodeBlock" line="2271"/>
                <javadoc line="2271">
                    Constant for the &quot;Old Turkic&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="RUMI_NUMERAL_SYMBOLS" type="UnicodeBlock" line="2280"/>
                <javadoc line="2280">
                    Constant for the &quot;Rumi Numeral Symbols&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BRAHMI" type="UnicodeBlock" line="2289"/>
                <javadoc line="2289">
                    Constant for the &quot;Brahmi&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="KAITHI" type="UnicodeBlock" line="2296"/>
                <javadoc line="2296">
                    Constant for the &quot;Kaithi&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CUNEIFORM" type="UnicodeBlock" line="2303"/>
                <javadoc line="2303">
                    Constant for the &quot;Cuneiform&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CUNEIFORM_NUMBERS_AND_PUNCTUATION" type="UnicodeBlock" line="2310"/>
                <javadoc line="2310">
                    Constant for the &quot;Cuneiform Numbers and Punctuation&quot; Unicode
                      character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="EGYPTIAN_HIEROGLYPHS" type="UnicodeBlock" line="2320"/>
                <javadoc line="2320">
                    Constant for the &quot;Egyptian Hieroglyphs&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="BAMUM_SUPPLEMENT" type="UnicodeBlock" line="2329"/>
                <javadoc line="2329">
                    Constant for the &quot;Bamum Supplement&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="KANA_SUPPLEMENT" type="UnicodeBlock" line="2338"/>
                <javadoc line="2338">
                    Constant for the &quot;Kana Supplement&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ANCIENT_GREEK_MUSICAL_NOTATION" type="UnicodeBlock" line="2347"/>
                <javadoc line="2347">
                    Constant for the &quot;Ancient Greek Musical Notation&quot; Unicode character
                      block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="COUNTING_ROD_NUMERALS" type="UnicodeBlock" line="2357"/>
                <javadoc line="2357">
                    Constant for the &quot;Counting Rod Numerals&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MAHJONG_TILES" type="UnicodeBlock" line="2366"/>
                <javadoc line="2366">
                    Constant for the &quot;Mahjong Tiles&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="DOMINO_TILES" type="UnicodeBlock" line="2375"/>
                <javadoc line="2375">
                    Constant for the &quot;Domino Tiles&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="PLAYING_CARDS" type="UnicodeBlock" line="2384"/>
                <javadoc line="2384">
                    Constant for the &quot;Playing Cards&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ENCLOSED_ALPHANUMERIC_SUPPLEMENT" type="UnicodeBlock" line="2393"/>
                <javadoc line="2393">
                    Constant for the &quot;Enclosed Alphanumeric Supplement&quot; Unicode character
                      block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ENCLOSED_IDEOGRAPHIC_SUPPLEMENT" type="UnicodeBlock" line="2403"/>
                <javadoc line="2403">
                    Constant for the &quot;Enclosed Ideographic Supplement&quot; Unicode character
                      block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS" type="UnicodeBlock" line="2413"/>
                <javadoc line="2413">
                    Constant for the &quot;Miscellaneous Symbols And Pictographs&quot; Unicode
                      character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="EMOTICONS" type="UnicodeBlock" line="2423"/>
                <javadoc line="2423">
                    Constant for the &quot;Emoticons&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="TRANSPORT_AND_MAP_SYMBOLS" type="UnicodeBlock" line="2430"/>
                <javadoc line="2430">
                    Constant for the &quot;Transport And Map Symbols&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ALCHEMICAL_SYMBOLS" type="UnicodeBlock" line="2439"/>
                <javadoc line="2439">
                    Constant for the &quot;Alchemical Symbols&quot; Unicode character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C" type="UnicodeBlock" line="2448"/>
                <javadoc line="2448">
                    Constant for the &quot;CJK Unified Ideographs Extension C&quot; Unicode
                      character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D" type="UnicodeBlock" line="2458"/>
                <javadoc line="2458">
                    Constant for the &quot;CJK Unified Ideographs Extension D&quot; Unicode
                      character block.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="blockStarts" type="int" line="2468"/>
                <declaration name="blocks" type="UnicodeBlock[]" line="2713"/>
                <javadoc line="2959">
                    Returns the object representing the Unicode block containing the
                      given character, or {@code null} if the character is not a
                      member of a defined block.
                      &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle
                      &lt;a href=&quot;Character.html#supplementary&quot;&gt; supplementary
                      characters&lt;/a&gt;.  To support all Unicode characters, including
                      supplementary characters, use the {@link #of(int)} method.                    
                    <param>
                        c  The character in question                        
                    </param>
                    <return>
                        The {@code UnicodeBlock} instance representing the
                          Unicode block of which this character is a member, or{@code null} if the character is not a member of any
                          Unicode block                        
                    </return>
                </javadoc>
                <method name="of" type="UnicodeBlock" line="2975">
                    <params>
                        <param name="c" type="char"/>
                    </params>
                </method>
                <javadoc line="2979">
                    Returns the object representing the Unicode block
                      containing the given character (Unicode code point), or{@code null} if the character is not a member of a
                      defined block.                    
                    <param>
                        codePoint the character (Unicode code point) in question.                        
                    </param>
                    <return>
                        The {@code UnicodeBlock} instance representing the
                          Unicode block of which this character is a member, or{@code null} if the character is not a member of any
                          Unicode block                        
                    </return>
                    <exception>
                        IllegalArgumentException if the specified{@code codePoint} is an invalid Unicode code point.                        
                    </exception>
                    <see>
                        Character#isValidCodePoint(int)                        
                    </see>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="of" type="UnicodeBlock" line="2995">
                    <params>
                        <param name="codePoint" type="int"/>
                    </params>
                    <comment line="3005">
                        invariant: top &gt; current &gt;= bottom &amp;&amp; codePoint &gt;= unicodeBlockStarts[bottom]                        
                    </comment>
                    <scope line="2996"/>
                    <declaration name="top" type="int" line="3000"/>
                    <scope line="3006">
                        <scope line="3007"/>
                        <scope line="3009"/>
                    </scope>
                </method>
                <javadoc line="3017">
                    Returns the UnicodeBlock with the given name. Block
                      names are determined by The Unicode Standard. The file
                      Blocks-&amp;lt;version&amp;gt;.txt defines blocks for a particular
                      version of the standard. The {@link Character} class specifies
                      the version of the standard that it supports.
                      &lt;p&gt;
                      This method accepts block names in the following forms:
                      &lt;ol&gt;
                      &lt;li&gt; Canonical block names as defined by the Unicode Standard.
                      For example, the standard defines a &quot;Basic Latin&quot; block. Therefore, this
                      method accepts &quot;Basic Latin&quot; as a valid block name. The documentation of
                      each UnicodeBlock provides the canonical name.
                      &lt;li&gt;Canonical block names with all spaces removed. For example, &quot;BasicLatin&quot;
                      is a valid block name for the &quot;Basic Latin&quot; block.
                      &lt;li&gt;The text representation of each constant UnicodeBlock identifier.
                      For example, this method will return the {@link #BASIC_LATIN} block if
                      provided with the &quot;BASIC_LATIN&quot; name. This form replaces all spaces and
                      hyphens in the canonical name with underscores.
                      &lt;/ol&gt;
                      Finally, character case is ignored for all of the valid block name forms.
                      For example, &quot;BASIC_LATIN&quot; and &quot;basic_latin&quot; are both valid block names.
                      The en_US locale&apos;s case mapping rules are used to provide case-insensitive
                      string comparisons for block name validation.
                      &lt;p&gt;
                      If the Unicode Standard changes block names, both the previous and
                      current names will be accepted.                    
                    <param>
                        blockName A {@code UnicodeBlock} name.                        
                    </param>
                    <return>
                        The {@code UnicodeBlock} instance identified
                          by {@code blockName}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code blockName} is an
                          invalid name                        
                    </throws>
                    <throws>
                        NullPointerException if {@code blockName} is null                        
                    </throws>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="forName" type="UnicodeBlock" line="3053">
                    <params>
                        <param name="blockName" type="String"/>
                    </params>
                    <declaration name="block" type="UnicodeBlock" line="3054"/>
                    <scope line="3055"/>
                </method>
            </class>
            <javadoc line="3063">
                A family of character subsets representing the character scripts
                  defined in the &lt;a href=&quot;http://www.unicode.org/reports/tr24/&quot;&gt;
                  &lt;i&gt;Unicode Standard Annex #24: Script Names&lt;/i&gt;&lt;/a&gt;. Every Unicode
                  character is assigned to a single Unicode script, either a specific
                  script, such as {@link Character.UnicodeScript#LATIN Latin}, or
                  one of the following three special values,{@link Character.UnicodeScript#INHERITED Inherited},{@link Character.UnicodeScript#COMMON Common} or{@link Character.UnicodeScript#UNKNOWN Unknown}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="3077">
                Unicode script &quot;Common&quot;.                
            </javadoc>
            <javadoc line="3082">
                Unicode script &quot;Latin&quot;.                
            </javadoc>
            <javadoc line="3087">
                Unicode script &quot;Greek&quot;.                
            </javadoc>
            <javadoc line="3092">
                Unicode script &quot;Cyrillic&quot;.                
            </javadoc>
            <javadoc line="3097">
                Unicode script &quot;Armenian&quot;.                
            </javadoc>
            <javadoc line="3102">
                Unicode script &quot;Hebrew&quot;.                
            </javadoc>
            <javadoc line="3107">
                Unicode script &quot;Arabic&quot;.                
            </javadoc>
            <javadoc line="3112">
                Unicode script &quot;Syriac&quot;.                
            </javadoc>
            <javadoc line="3117">
                Unicode script &quot;Thaana&quot;.                
            </javadoc>
            <javadoc line="3122">
                Unicode script &quot;Devanagari&quot;.                
            </javadoc>
            <javadoc line="3127">
                Unicode script &quot;Bengali&quot;.                
            </javadoc>
            <javadoc line="3132">
                Unicode script &quot;Gurmukhi&quot;.                
            </javadoc>
            <javadoc line="3137">
                Unicode script &quot;Gujarati&quot;.                
            </javadoc>
            <javadoc line="3142">
                Unicode script &quot;Oriya&quot;.                
            </javadoc>
            <javadoc line="3147">
                Unicode script &quot;Tamil&quot;.                
            </javadoc>
            <javadoc line="3152">
                Unicode script &quot;Telugu&quot;.                
            </javadoc>
            <javadoc line="3157">
                Unicode script &quot;Kannada&quot;.                
            </javadoc>
            <javadoc line="3162">
                Unicode script &quot;Malayalam&quot;.                
            </javadoc>
            <javadoc line="3167">
                Unicode script &quot;Sinhala&quot;.                
            </javadoc>
            <javadoc line="3172">
                Unicode script &quot;Thai&quot;.                
            </javadoc>
            <javadoc line="3177">
                Unicode script &quot;Lao&quot;.                
            </javadoc>
            <javadoc line="3182">
                Unicode script &quot;Tibetan&quot;.                
            </javadoc>
            <javadoc line="3187">
                Unicode script &quot;Myanmar&quot;.                
            </javadoc>
            <javadoc line="3192">
                Unicode script &quot;Georgian&quot;.                
            </javadoc>
            <javadoc line="3197">
                Unicode script &quot;Hangul&quot;.                
            </javadoc>
            <javadoc line="3202">
                Unicode script &quot;Ethiopic&quot;.                
            </javadoc>
            <javadoc line="3207">
                Unicode script &quot;Cherokee&quot;.                
            </javadoc>
            <javadoc line="3212">
                Unicode script &quot;Canadian_Aboriginal&quot;.                
            </javadoc>
            <javadoc line="3217">
                Unicode script &quot;Ogham&quot;.                
            </javadoc>
            <javadoc line="3222">
                Unicode script &quot;Runic&quot;.                
            </javadoc>
            <javadoc line="3227">
                Unicode script &quot;Khmer&quot;.                
            </javadoc>
            <javadoc line="3232">
                Unicode script &quot;Mongolian&quot;.                
            </javadoc>
            <javadoc line="3237">
                Unicode script &quot;Hiragana&quot;.                
            </javadoc>
            <javadoc line="3242">
                Unicode script &quot;Katakana&quot;.                
            </javadoc>
            <javadoc line="3247">
                Unicode script &quot;Bopomofo&quot;.                
            </javadoc>
            <javadoc line="3252">
                Unicode script &quot;Han&quot;.                
            </javadoc>
            <javadoc line="3257">
                Unicode script &quot;Yi&quot;.                
            </javadoc>
            <javadoc line="3262">
                Unicode script &quot;Old_Italic&quot;.                
            </javadoc>
            <javadoc line="3267">
                Unicode script &quot;Gothic&quot;.                
            </javadoc>
            <javadoc line="3272">
                Unicode script &quot;Deseret&quot;.                
            </javadoc>
            <javadoc line="3277">
                Unicode script &quot;Inherited&quot;.                
            </javadoc>
            <javadoc line="3282">
                Unicode script &quot;Tagalog&quot;.                
            </javadoc>
            <javadoc line="3287">
                Unicode script &quot;Hanunoo&quot;.                
            </javadoc>
            <javadoc line="3292">
                Unicode script &quot;Buhid&quot;.                
            </javadoc>
            <javadoc line="3297">
                Unicode script &quot;Tagbanwa&quot;.                
            </javadoc>
            <javadoc line="3302">
                Unicode script &quot;Limbu&quot;.                
            </javadoc>
            <javadoc line="3307">
                Unicode script &quot;Tai_Le&quot;.                
            </javadoc>
            <javadoc line="3312">
                Unicode script &quot;Linear_B&quot;.                
            </javadoc>
            <javadoc line="3317">
                Unicode script &quot;Ugaritic&quot;.                
            </javadoc>
            <javadoc line="3322">
                Unicode script &quot;Shavian&quot;.                
            </javadoc>
            <javadoc line="3327">
                Unicode script &quot;Osmanya&quot;.                
            </javadoc>
            <javadoc line="3332">
                Unicode script &quot;Cypriot&quot;.                
            </javadoc>
            <javadoc line="3337">
                Unicode script &quot;Braille&quot;.                
            </javadoc>
            <javadoc line="3342">
                Unicode script &quot;Buginese&quot;.                
            </javadoc>
            <javadoc line="3347">
                Unicode script &quot;Coptic&quot;.                
            </javadoc>
            <javadoc line="3352">
                Unicode script &quot;New_Tai_Lue&quot;.                
            </javadoc>
            <javadoc line="3357">
                Unicode script &quot;Glagolitic&quot;.                
            </javadoc>
            <javadoc line="3362">
                Unicode script &quot;Tifinagh&quot;.                
            </javadoc>
            <javadoc line="3367">
                Unicode script &quot;Syloti_Nagri&quot;.                
            </javadoc>
            <javadoc line="3372">
                Unicode script &quot;Old_Persian&quot;.                
            </javadoc>
            <javadoc line="3377">
                Unicode script &quot;Kharoshthi&quot;.                
            </javadoc>
            <javadoc line="3382">
                Unicode script &quot;Balinese&quot;.                
            </javadoc>
            <javadoc line="3387">
                Unicode script &quot;Cuneiform&quot;.                
            </javadoc>
            <javadoc line="3392">
                Unicode script &quot;Phoenician&quot;.                
            </javadoc>
            <javadoc line="3397">
                Unicode script &quot;Phags_Pa&quot;.                
            </javadoc>
            <javadoc line="3402">
                Unicode script &quot;Nko&quot;.                
            </javadoc>
            <javadoc line="3407">
                Unicode script &quot;Sundanese&quot;.                
            </javadoc>
            <javadoc line="3412">
                Unicode script &quot;Batak&quot;.                
            </javadoc>
            <javadoc line="3417">
                Unicode script &quot;Lepcha&quot;.                
            </javadoc>
            <javadoc line="3422">
                Unicode script &quot;Ol_Chiki&quot;.                
            </javadoc>
            <javadoc line="3427">
                Unicode script &quot;Vai&quot;.                
            </javadoc>
            <javadoc line="3432">
                Unicode script &quot;Saurashtra&quot;.                
            </javadoc>
            <javadoc line="3437">
                Unicode script &quot;Kayah_Li&quot;.                
            </javadoc>
            <javadoc line="3442">
                Unicode script &quot;Rejang&quot;.                
            </javadoc>
            <javadoc line="3447">
                Unicode script &quot;Lycian&quot;.                
            </javadoc>
            <javadoc line="3452">
                Unicode script &quot;Carian&quot;.                
            </javadoc>
            <javadoc line="3457">
                Unicode script &quot;Lydian&quot;.                
            </javadoc>
            <javadoc line="3462">
                Unicode script &quot;Cham&quot;.                
            </javadoc>
            <javadoc line="3467">
                Unicode script &quot;Tai_Tham&quot;.                
            </javadoc>
            <javadoc line="3472">
                Unicode script &quot;Tai_Viet&quot;.                
            </javadoc>
            <javadoc line="3477">
                Unicode script &quot;Avestan&quot;.                
            </javadoc>
            <javadoc line="3482">
                Unicode script &quot;Egyptian_Hieroglyphs&quot;.                
            </javadoc>
            <javadoc line="3487">
                Unicode script &quot;Samaritan&quot;.                
            </javadoc>
            <javadoc line="3492">
                Unicode script &quot;Mandaic&quot;.                
            </javadoc>
            <javadoc line="3497">
                Unicode script &quot;Lisu&quot;.                
            </javadoc>
            <javadoc line="3502">
                Unicode script &quot;Bamum&quot;.                
            </javadoc>
            <javadoc line="3507">
                Unicode script &quot;Javanese&quot;.                
            </javadoc>
            <javadoc line="3512">
                Unicode script &quot;Meetei_Mayek&quot;.                
            </javadoc>
            <javadoc line="3517">
                Unicode script &quot;Imperial_Aramaic&quot;.                
            </javadoc>
            <javadoc line="3522">
                Unicode script &quot;Old_South_Arabian&quot;.                
            </javadoc>
            <javadoc line="3527">
                Unicode script &quot;Inscriptional_Parthian&quot;.                
            </javadoc>
            <javadoc line="3532">
                Unicode script &quot;Inscriptional_Pahlavi&quot;.                
            </javadoc>
            <javadoc line="3537">
                Unicode script &quot;Old_Turkic&quot;.                
            </javadoc>
            <javadoc line="3542">
                Unicode script &quot;Brahmi&quot;.                
            </javadoc>
            <javadoc line="3547">
                Unicode script &quot;Kaithi&quot;.                
            </javadoc>
            <javadoc line="3552">
                Unicode script &quot;Unknown&quot;.                
            </javadoc>
            <declaration name="scriptStarts" type="int[]" line="3557"/>
            <declaration name="scripts" type="UnicodeScript[]" line="3867"/>
            <declaration name="aliases" type="HashMap&lt;String,Character.UnicodeScript&gt;" line="4176"/>
            <scope line="4177"/>
            <javadoc line="4279">
                Returns the enum constant representing the Unicode script of which
                  the given character (Unicode code point) is assigned to.                
                <param>
                    codePoint the character (Unicode code point) in question.                    
                </param>
                <return>
                    The {@code UnicodeScript} constant representing the
                      Unicode script of which this character is assigned to.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified{@code codePoint} is an invalid Unicode code point.                    
                </exception>
                <see>
                    Character#isValidCodePoint(int)                    
                </see>
            </javadoc>
            <method name="of" type="UnicodeScript" line="4292">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="4296">
                    leave SURROGATE and PRIVATE_USE for table lookup                    
                </comment>
                <declaration name="type" type="int" line="4295"/>
                <declaration name="index" type="int" line="4299"/>
            </method>
            <javadoc line="4305">
                Returns the UnicodeScript constant with the given Unicode script
                  name or the script name alias. Script names and their aliases are
                  determined by The Unicode Standard. The files Scripts&amp;lt;version&amp;gt;.txt
                  and PropertyValueAliases&amp;lt;version&amp;gt;.txt define script names
                  and the script name aliases for a particular version of the
                  standard. The {@link Character} class specifies the version of
                  the standard that it supports.
                  &lt;p&gt;
                  Character case is ignored for all of the valid script names.
                  The en_US locale&apos;s case mapping rules are used to provide
                  case-insensitive string comparisons for script name validation.
                  &lt;p&gt;                
                <param>
                    scriptName A {@code UnicodeScript} name.                    
                </param>
                <return>
                    The {@code UnicodeScript} constant identified
                      by {@code scriptName}                    
                </return>
                <throws>
                    IllegalArgumentException if {@code scriptName} is an
                      invalid name                    
                </throws>
                <throws>
                    NullPointerException if {@code scriptName} is null                    
                </throws>
            </javadoc>
            <method name="forName" type="UnicodeScript" line="4326">
                <params>
                    <param name="scriptName" type="String"/>
                </params>
                <comment line="4328">
                    .replace(&apos; &apos;, &apos;_&apos;));                    
                </comment>
                <declaration name="sc" type="UnicodeScript" line="4329"/>
            </method>
            <declaration name="value" type="char" line="4336"/>
            <javadoc line="4336">
                The value of the {@code Character}.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="4343"/>
            <javadoc line="4343">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
            <javadoc line="4346">
                Constructs a newly allocated {@code Character} object that
                  represents the specified {@code char} value.                
                <param>
                    value   the value to be represented by the{@code Character} object.                    
                </param>
            </javadoc>
            <method name="Character" type="constructor" line="4353">
                <params>
                    <param name="value" type="char"/>
                </params>
            </method>
            <class name="CharacterCache" line="4357">
                <method name="CharacterCache" type="constructor" line="4358"/>
                <declaration name="cache" type="Character" line="4360"/>
                <scope line="4362"/>
            </class>
            <javadoc line="4368">
                Returns a &lt;tt&gt;Character&lt;/tt&gt; instance representing the specified
                  &lt;tt&gt;char&lt;/tt&gt; value.
                  If a new &lt;tt&gt;Character&lt;/tt&gt; instance is not required, this method
                  should generally be used in preference to the constructor{@link #Character(char)}, as this method is likely to yield
                  significantly better space and time performance by caching
                  frequently requested values.
                  This method will always cache values in the range {@code&apos;\u005Cu0000&apos;} to {@code &apos;\u005Cu007F&apos;}, inclusive, and may
                  cache other values outside of this range.                
                <param>
                    c a char value.                    
                </param>
                <return>
                    a <tt>Character</tt> instance representing <tt>c</tt>.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="valueOf" type="Character" line="4385">
                <params>
                    <param name="c" type="char"/>
                </params>
                <comment line="4386">
                    must cache                    
                </comment>
                <scope line="4386"/>
            </method>
            <javadoc line="4392">
                Returns the value of this {@code Character} object.                
                <return>
                    the primitive {@code char} value represented by
                      this object.                    
                </return>
            </javadoc>
            <method name="charValue" type="char" line="4397"/>
            <javadoc line="4401">
                Returns a hash code for this {@code Character}; equal to the result
                  of invoking {@code charValue()}.                
                <return>
                    a hash code value for this {@code Character}                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="4407"/>
            <javadoc line="4411">
                Compares this object against the specified object.
                  The result is {@code true} if and only if the argument is not{@code null} and is a {@code Character} object that
                  represents the same {@code char} value as this object.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    {@code true} if the objects are the same;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="4421">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="4422"/>
            </method>
            <javadoc line="4428">
                Returns a {@code String} object representing this{@code Character}&apos;s value.  The result is a string of
                  length 1 whose sole component is the primitive{@code char} value represented by this{@code Character} object.                
                <return>
                    a string representation of this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="4437">
                <declaration name="buf" type="char" line="4438"/>
            </method>
            <javadoc line="4442">
                Returns a {@code String} object representing the
                  specified {@code char}.  The result is a string of length
                  1 consisting solely of the specified {@code char}.                
                <param>
                    c the {@code char} to be converted                    
                </param>
                <return>
                    the string representation of the specified {@code char}                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="4451">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="4455">
                Determines whether the specified code point is a valid
                  &lt;a href=&quot;http://www.unicode.org/glossary/#code_point&quot;&gt;
                  Unicode code point value&lt;/a&gt;.                
                <param>
                    codePoint the Unicode code point to be tested                    
                </param>
                <return>
                    {@code true} if the specified code point value is between{@link #MIN_CODE_POINT} and{@link #MAX_CODE_POINT} inclusive;{@code false} otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isValidCodePoint" type="boolean" line="4467">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="4468">
                    Optimized form of:                    
                </comment>
                <comment line="4469">
                    codePoint &gt;= MIN_CODE_POINT &amp;&amp; codePoint &lt;= MAX_CODE_POINT                    
                </comment>
                <declaration name="plane" type="int" line="4470"/>
            </method>
            <javadoc line="4474">
                Determines whether the specified character (Unicode code point)
                  is in the &lt;a href=&quot;#BMP&quot;&gt;Basic Multilingual Plane (BMP)&lt;/a&gt;.
                  Such code points can be represented using a single {@code char}.                
                <param>
                    codePoint the character (Unicode code point) to be tested                    
                </param>
                <return>
                    {@code true} if the specified code point is between{@link #MIN_VALUE} and {@link #MAX_VALUE} inclusive;{@code false} otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isBmpCodePoint" type="boolean" line="4485">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="4487">
                    Optimized form of:                    
                </comment>
                <comment line="4488">
                    codePoint &gt;= MIN_VALUE &amp;&amp; codePoint &lt;= MAX_VALUE                    
                </comment>
                <comment line="4489">
                    We consistently use logical shift (&gt;&gt;&gt;) to facilitate                    
                </comment>
                <comment line="4490">
                    additional runtime optimizations.                    
                </comment>
            </method>
            <javadoc line="4493">
                Determines whether the specified character (Unicode code point)
                  is in the &lt;a href=&quot;#supplementary&quot;&gt;supplementary character&lt;/a&gt; range.                
                <param>
                    codePoint the character (Unicode code point) to be tested                    
                </param>
                <return>
                    {@code true} if the specified code point is between{@link #MIN_SUPPLEMENTARY_CODE_POINT} and{@link #MAX_CODE_POINT} inclusive;{@code false} otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSupplementaryCodePoint" type="boolean" line="4504">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="4509">
                Determines if the given {@code char} value is a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#high_surrogate_code_unit&quot;&gt;
                  Unicode high-surrogate code unit&lt;/a&gt;
                  (also known as &lt;i&gt;leading-surrogate code unit&lt;/i&gt;).
                  &lt;p&gt;Such values do not represent characters by themselves,
                  but are used in the representation of
                  &lt;a href=&quot;#supplementary&quot;&gt;supplementary characters&lt;/a&gt;
                  in the UTF-16 encoding.                
                <param>
                    ch the {@code char} value to be tested.                    
                </param>
                <return>
                    {@code true} if the {@code char} value is between{@link #MIN_HIGH_SURROGATE} and{@link #MAX_HIGH_SURROGATE} inclusive;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowSurrogate(char)                    
                </see>
                <see>
                    Character.UnicodeBlock#of(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isHighSurrogate" type="boolean" line="4529">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <comment line="4530">
                    Help VM constant-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE                    
                </comment>
            </method>
            <javadoc line="4534">
                Determines if the given {@code char} value is a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#low_surrogate_code_unit&quot;&gt;
                  Unicode low-surrogate code unit&lt;/a&gt;
                  (also known as &lt;i&gt;trailing-surrogate code unit&lt;/i&gt;).
                  &lt;p&gt;Such values do not represent characters by themselves,
                  but are used in the representation of
                  &lt;a href=&quot;#supplementary&quot;&gt;supplementary characters&lt;/a&gt;
                  in the UTF-16 encoding.                
                <param>
                    ch the {@code char} value to be tested.                    
                </param>
                <return>
                    {@code true} if the {@code char} value is between{@link #MIN_LOW_SURROGATE} and{@link #MAX_LOW_SURROGATE} inclusive;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isHighSurrogate(char)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLowSurrogate" type="boolean" line="4553">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="4557">
                Determines if the given {@code char} value is a Unicode
                  &lt;i&gt;surrogate code unit&lt;/i&gt;.
                  &lt;p&gt;Such values do not represent characters by themselves,
                  but are used in the representation of
                  &lt;a href=&quot;#supplementary&quot;&gt;supplementary characters&lt;/a&gt;
                  in the UTF-16 encoding.
                  &lt;p&gt;A char value is a surrogate code unit if and only if it is either
                  a {@linkplain #isLowSurrogate(char) low-surrogate code unit} or
                  a {@linkplain #isHighSurrogate(char) high-surrogate code unit}.                
                <param>
                    ch the {@code char} value to be tested.                    
                </param>
                <return>
                    {@code true} if the {@code char} value is between{@link #MIN_SURROGATE} and{@link #MAX_SURROGATE} inclusive;{@code false} otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isSurrogate" type="boolean" line="4577">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="4581">
                Determines whether the specified pair of {@code char}values is a valid
                  &lt;a href=&quot;http://www.unicode.org/glossary/#surrogate_pair&quot;&gt;
                  Unicode surrogate pair&lt;/a&gt;.
                  &lt;p&gt;This method is equivalent to the expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  isHighSurrogate(high) &amp;&amp; isLowSurrogate(low)
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    high the high-surrogate code value to be tested                    
                </param>
                <param>
                    low the low-surrogate code value to be tested                    
                </param>
                <return>
                    {@code true} if the specified high and
                      low-surrogate code values represent a valid surrogate pair;{@code false} otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSurrogatePair" type="boolean" line="4599">
                <params>
                    <param name="high" type="char"/>
                    <param name="low" type="char"/>
                </params>
            </method>
            <javadoc line="4603">
                Determines the number of {@code char} values needed to
                  represent the specified character (Unicode code point). If the
                  specified character is equal to or greater than 0x10000, then
                  the method returns 2. Otherwise, the method returns 1.
                  &lt;p&gt;This method doesn&apos;t validate the specified character to be a
                  valid Unicode code point. The caller must validate the
                  character value using {@link #isValidCodePoint(int) isValidCodePoint}if necessary.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    2 if the character is a valid supplementary character; 1 otherwise.                    
                </return>
                <see>
                    Character#isSupplementaryCodePoint(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="charCount" type="int" line="4619">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="4623">
                Converts the specified surrogate pair to its supplementary code
                  point value. This method does not validate the specified
                  surrogate pair. The caller must validate it using {@link #isSurrogatePair(char,char) isSurrogatePair} if necessary.                
                <param>
                    high the high-surrogate code unit                    
                </param>
                <param>
                    low the low-surrogate code unit                    
                </param>
                <return>
                    the supplementary code point composed from the
                      specified surrogate pair.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toCodePoint" type="int" line="4635">
                <params>
                    <param name="high" type="char"/>
                    <param name="low" type="char"/>
                </params>
                <comment line="4636">
                    Optimized form of:                    
                </comment>
                <comment line="4637">
                    return ((high - MIN_HIGH_SURROGATE) &lt;&lt; 10)                    
                </comment>
                <comment line="4638">
                    + (low - MIN_LOW_SURROGATE)                    
                </comment>
                <comment line="4639">
                    + MIN_SUPPLEMENTARY_CODE_POINT;                    
                </comment>
            </method>
            <javadoc line="4645">
                Returns the code point at the given index of the{@code CharSequence}. If the {@code char} value at
                  the given index in the {@code CharSequence} is in the
                  high-surrogate range, the following index is less than the
                  length of the {@code CharSequence}, and the{@code char} value at the following index is in the
                  low-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at the given index is returned.                
                <param>
                    seq a sequence of {@code char} values (Unicode code
                      units)                    
                </param>
                <param>
                    index the index to the {@code char} values (Unicode
                      code units) in {@code seq} to be converted                    
                </param>
                <return>
                    the Unicode code point at the given index                    
                </return>
                <exception>
                    NullPointerException if {@code seq} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the value{@code index} is negative or not less than{@link CharSequence#length() seq.length()}.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointAt" type="int" line="4667">
                <params>
                    <param name="seq" type="CharSequence"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="c1" type="char" line="4668"/>
                <scope line="4669">
                    <scope line="4670">
                        <declaration name="c2" type="char" line="4671"/>
                        <scope line="4672"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4680">
                Returns the code point at the given index of the{@code char} array. If the {@code char} value at
                  the given index in the {@code char} array is in the
                  high-surrogate range, the following index is less than the
                  length of the {@code char} array, and the{@code char} value at the following index is in the
                  low-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at the given index is returned.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    index the index to the {@code char} values (Unicode
                      code units) in the {@code char} array to be converted                    
                </param>
                <return>
                    the Unicode code point at the given index                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the value{@code index} is negative or not less than
                      the length of the {@code char} array.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointAt" type="int" line="4701">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="4705">
                Returns the code point at the given index of the{@code char} array, where only array elements with{@code index} less than {@code limit} can be used. If
                  the {@code char} value at the given index in the{@code char} array is in the high-surrogate range, the
                  following index is less than the {@code limit}, and the{@code char} value at the following index is in the
                  low-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at the given index is returned.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    index the index to the {@code char} values (Unicode
                      code units) in the {@code char} array to be converted                    
                </param>
                <param>
                    limit the index after the last array element that
                      can be used in the {@code char} array                    
                </param>
                <return>
                    the Unicode code point at the given index                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the {@code index}argument is negative or not less than the {@code limit}argument, or if the {@code limit} argument is negative or
                      greater than the length of the {@code char} array.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointAt" type="int" line="4730">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="4731"/>
            </method>
            <method name="codePointAtImpl" type="int" line="4738">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                    <param name="limit" type="int"/>
                </params>
                <declaration name="c1" type="char" line="4739"/>
                <scope line="4740">
                    <scope line="4741">
                        <declaration name="c2" type="char" line="4742"/>
                        <scope line="4743"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4751">
                Returns the code point preceding the given index of the{@code CharSequence}. If the {@code char} value at{@code (index - 1)} in the {@code CharSequence} is in
                  the low-surrogate range, {@code (index - 2)} is not
                  negative, and the {@code char} value at {@code (index - 2)}in the {@code CharSequence} is in the
                  high-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at {@code (index - 1)} is
                  returned.                
                <param>
                    seq the {@code CharSequence} instance                    
                </param>
                <param>
                    index the index following the code point that should be returned                    
                </param>
                <return>
                    the Unicode code point value before the given index.                    
                </return>
                <exception>
                    NullPointerException if {@code seq} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the {@code index}argument is less than 1 or greater than {@link CharSequence#length() seq.length()}.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointBefore" type="int" line="4772">
                <params>
                    <param name="seq" type="CharSequence"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="c2" type="char" line="4773"/>
                <scope line="4774">
                    <scope line="4775">
                        <declaration name="c1" type="char" line="4776"/>
                        <scope line="4777"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4785">
                Returns the code point preceding the given index of the{@code char} array. If the {@code char} value at{@code (index - 1)} in the {@code char} array is in
                  the low-surrogate range, {@code (index - 2)} is not
                  negative, and the {@code char} value at {@code (index - 2)}in the {@code char} array is in the
                  high-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at {@code (index - 1)} is
                  returned.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    index the index following the code point that should be returned                    
                </param>
                <return>
                    the Unicode code point value before the given index.                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the {@code index}argument is less than 1 or greater than the length of the{@code char} array                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointBefore" type="int" line="4806">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="4810">
                Returns the code point preceding the given index of the{@code char} array, where only array elements with{@code index} greater than or equal to {@code start}can be used. If the {@code char} value at {@code (index - 1)}in the {@code char} array is in the
                  low-surrogate range, {@code (index - 2)} is not less than{@code start}, and the {@code char} value at{@code (index - 2)} in the {@code char} array is in
                  the high-surrogate range, then the supplementary code point
                  corresponding to this surrogate pair is returned. Otherwise,
                  the {@code char} value at {@code (index - 1)} is
                  returned.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    index the index following the code point that should be returned                    
                </param>
                <param>
                    start the index of the first array element in the{@code char} array                    
                </param>
                <return>
                    the Unicode code point value before the given index.                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the {@code index}argument is not greater than the {@code start} argument or
                      is greater than the length of the {@code char} array, or
                      if the {@code start} argument is negative or not less than
                      the length of the {@code char} array.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointBefore" type="int" line="4837">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="4838"/>
            </method>
            <method name="codePointBeforeImpl" type="int" line="4845">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="index" type="int"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="c2" type="char" line="4846"/>
                <scope line="4847">
                    <scope line="4848">
                        <declaration name="c1" type="char" line="4849"/>
                        <scope line="4850"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4858">
                Returns the leading surrogate (a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#high_surrogate_code_unit&quot;&gt;
                  high surrogate code unit&lt;/a&gt;) of the
                  &lt;a href=&quot;http://www.unicode.org/glossary/#surrogate_pair&quot;&gt;
                  surrogate pair&lt;/a&gt;
                  representing the specified supplementary character (Unicode
                  code point) in the UTF-16 encoding.  If the specified character
                  is not a
                  &lt;a href=&quot;Character.html#supplementary&quot;&gt;supplementary character&lt;/a&gt;,
                  an unspecified {@code char} is returned.
                  &lt;p&gt;If{@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}is {@code true}, then{@link #isHighSurrogate isHighSurrogate}{@code (highSurrogate(x))} and{@link #toCodePoint toCodePoint}{@code (highSurrogate(x), }{@link #lowSurrogate lowSurrogate}{@code (x)) == x}are also always {@code true}.                
                <param>
                    codePoint a supplementary character (Unicode code point)                    
                </param>
                <return>
                    the leading surrogate code unit used to represent the
                      character in the UTF-16 encoding                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="highSurrogate" type="char" line="4882">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="4887">
                Returns the trailing surrogate (a
                  &lt;a href=&quot;http://www.unicode.org/glossary/#low_surrogate_code_unit&quot;&gt;
                  low surrogate code unit&lt;/a&gt;) of the
                  &lt;a href=&quot;http://www.unicode.org/glossary/#surrogate_pair&quot;&gt;
                  surrogate pair&lt;/a&gt;
                  representing the specified supplementary character (Unicode
                  code point) in the UTF-16 encoding.  If the specified character
                  is not a
                  &lt;a href=&quot;Character.html#supplementary&quot;&gt;supplementary character&lt;/a&gt;,
                  an unspecified {@code char} is returned.
                  &lt;p&gt;If{@link #isSupplementaryCodePoint isSupplementaryCodePoint(x)}is {@code true}, then{@link #isLowSurrogate isLowSurrogate}{@code (lowSurrogate(x))} and{@link #toCodePoint toCodePoint}{@code (}{@link #highSurrogate highSurrogate}{@code (x), lowSurrogate(x)) == x}are also always {@code true}.                
                <param>
                    codePoint a supplementary character (Unicode code point)                    
                </param>
                <return>
                    the trailing surrogate code unit used to represent the
                      character in the UTF-16 encoding                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="lowSurrogate" type="char" line="4911">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="4915">
                Converts the specified character (Unicode code point) to its
                  UTF-16 representation. If the specified code point is a BMP
                  (Basic Multilingual Plane or Plane 0) value, the same value is
                  stored in {@code dst[dstIndex]}, and 1 is returned. If the
                  specified code point is a supplementary character, its
                  surrogate values are stored in {@code dst[dstIndex]}(high-surrogate) and {@code dst[dstIndex+1]}(low-surrogate), and 2 is returned.                
                <param>
                    codePoint the character (Unicode code point) to be converted.                    
                </param>
                <param>
                    dst an array of {@code char} in which the{@code codePoint}'s UTF-16 value is stored.                    
                </param>
                <param>
                    dstIndex the start index into the {@code dst}array where the converted value is stored.                    
                </param>
                <return>
                    1 if the code point is a BMP code point, 2 if the
                      code point is a supplementary code point.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified{@code codePoint} is not a valid Unicode code point.                    
                </exception>
                <exception>
                    NullPointerException if the specified {@code dst} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if {@code dstIndex}is negative or not less than {@code dst.length}, or if{@code dst} at {@code dstIndex} doesn't have enough
                      array element(s) to store the resulting {@code char}value(s). (If {@code dstIndex} is equal to{@code dst.length-1} and the specified{@code codePoint} is a supplementary character, the
                      high-surrogate value is not stored in{@code dst[dstIndex]}.)                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toChars" type="int" line="4946">
                <params>
                    <param name="codePoint" type="int"/>
                    <param name="dst" type="char[]"/>
                    <param name="dstIndex" type="int"/>
                </params>
                <scope line="4947"/>
                <scope line="4950"/>
                <scope line="4953"/>
            </method>
            <javadoc line="4958">
                Converts the specified character (Unicode code point) to its
                  UTF-16 representation stored in a {@code char} array. If
                  the specified code point is a BMP (Basic Multilingual Plane or
                  Plane 0) value, the resulting {@code char} array has
                  the same value as {@code codePoint}. If the specified code
                  point is a supplementary code point, the resulting{@code char} array has the corresponding surrogate pair.                
                <param>
                    codePoint a Unicode code point                    
                </param>
                <return>
                    a {@code char} array having{@code codePoint}'s UTF-16 representation.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified{@code codePoint} is not a valid Unicode code point.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toChars" type="char[]" line="4974">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <scope line="4975"/>
                <scope line="4977">
                    <declaration name="result" type="char[]" line="4978"/>
                </scope>
                <scope line="4981"/>
            </method>
            <method name="toSurrogates" type="void" line="4986">
                <params>
                    <param name="codePoint" type="int"/>
                    <param name="dst" type="char[]"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="4987">
                    We write elements &quot;backwards&quot; to guarantee all-or-nothing                    
                </comment>
            </method>
            <javadoc line="4992">
                Returns the number of Unicode code points in the text range of
                  the specified char sequence. The text range begins at the
                  specified {@code beginIndex} and extends to the{@code char} at index {@code endIndex - 1}. Thus the
                  length (in {@code char}s) of the text range is{@code endIndex-beginIndex}. Unpaired surrogates within
                  the text range count as one code point each.                
                <param>
                    seq the char sequence                    
                </param>
                <param>
                    beginIndex the index to the first {@code char} of
                      the text range.                    
                </param>
                <param>
                    endIndex the index after the last {@code char} of
                      the text range.                    
                </param>
                <return>
                    the number of Unicode code points in the specified text
                      range                    
                </return>
                <exception>
                    NullPointerException if {@code seq} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the{@code beginIndex} is negative, or {@code endIndex}is larger than the length of the given sequence, or{@code beginIndex} is larger than {@code endIndex}.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointCount" type="int" line="5015">
                <params>
                    <param name="seq" type="CharSequence"/>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <declaration name="length" type="int" line="5016"/>
                <scope line="5017"/>
                <declaration name="n" type="int" line="5020"/>
                <scope line="5021">
                    <scope line="5023"/>
                </scope>
            </method>
            <javadoc line="5031">
                Returns the number of Unicode code points in a subarray of the{@code char} array argument. The {@code offset}argument is the index of the first {@code char} of the
                  subarray and the {@code count} argument specifies the
                  length of the subarray in {@code char}s. Unpaired
                  surrogates within the subarray count as one code point each.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    offset the index of the first {@code char} in the
                      given {@code char} array                    
                </param>
                <param>
                    count the length of the subarray in {@code char}s                    
                </param>
                <return>
                    the number of Unicode code points in the specified subarray                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if {@code offset} or{@code count} is negative, or if {@code offset +
                      count} is larger than the length of the given array.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="codePointCount" type="int" line="5050">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="5051"/>
            </method>
            <method name="codePointCountImpl" type="int" line="5057">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="endIndex" type="int" line="5058"/>
                <declaration name="n" type="int" line="5059"/>
                <scope line="5060">
                    <scope line="5062"/>
                </scope>
            </method>
            <javadoc line="5070">
                Returns the index within the given char sequence that is offset
                  from the given {@code index} by {@code codePointOffset}code points. Unpaired surrogates within the text range given by{@code index} and {@code codePointOffset} count as
                  one code point each.                
                <param>
                    seq the char sequence                    
                </param>
                <param>
                    index the index to be offset                    
                </param>
                <param>
                    codePointOffset the offset in code points                    
                </param>
                <return>
                    the index within the char sequence                    
                </return>
                <exception>
                    NullPointerException if {@code seq} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if {@code index}is negative or larger then the length of the char sequence,
                      or if {@code codePointOffset} is positive and the
                      subsequence starting with {@code index} has fewer than{@code codePointOffset} code points, or if{@code codePointOffset} is negative and the subsequence
                      before {@code index} has fewer than the absolute value
                      of {@code codePointOffset} code points.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="offsetByCodePoints" type="int" line="5093">
                <params>
                    <param name="seq" type="CharSequence"/>
                    <param name="index" type="int"/>
                    <param name="codePointOffset" type="int"/>
                </params>
                <declaration name="length" type="int" line="5094"/>
                <scope line="5095"/>
                <declaration name="x" type="int" line="5099"/>
                <scope line="5100">
                    <declaration name="i" type="int" line="5101"/>
                    <scope line="5102">
                        <scope line="5104"/>
                    </scope>
                    <scope line="5108"/>
                </scope>
                <scope line="5111">
                    <declaration name="i" type="int" line="5112"/>
                    <scope line="5113">
                        <scope line="5115"/>
                    </scope>
                    <scope line="5119"/>
                </scope>
            </method>
            <javadoc line="5126">
                Returns the index within the given {@code char} subarray
                  that is offset from the given {@code index} by{@code codePointOffset} code points. The{@code start} and {@code count} arguments specify a
                  subarray of the {@code char} array. Unpaired surrogates
                  within the text range given by {@code index} and{@code codePointOffset} count as one code point each.                
                <param>
                    a the {@code char} array                    
                </param>
                <param>
                    start the index of the first {@code char} of the
                      subarray                    
                </param>
                <param>
                    count the length of the subarray in {@code char}s                    
                </param>
                <param>
                    index the index to be offset                    
                </param>
                <param>
                    codePointOffset the offset in code points                    
                </param>
                <return>
                    the index within the subarray                    
                </return>
                <exception>
                    NullPointerException if {@code a} is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsExceptionif {@code start} or {@code count} is negative,
                      or if {@code start + count} is larger than the length of
                      the given array,
                      or if {@code index} is less than {@code start} or
                      larger then {@code start + count},
                      or if {@code codePointOffset} is positive and the text range
                      starting with {@code index} and ending with {@code start + count - 1}has fewer than {@code codePointOffset} code
                      points,
                      or if {@code codePointOffset} is negative and the text range
                      starting with {@code start} and ending with {@code index - 1}has fewer than the absolute value of{@code codePointOffset} code points.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="offsetByCodePoints" type="int" line="5160">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="index" type="int"/>
                    <param name="codePointOffset" type="int"/>
                </params>
                <scope line="5162"/>
            </method>
            <method name="offsetByCodePointsImpl" type="int" line="5169">
                <params>
                    <param name="a" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                    <param name="index" type="int"/>
                    <param name="codePointOffset" type="int"/>
                </params>
                <declaration name="x" type="int" line="5170"/>
                <scope line="5171">
                    <declaration name="limit" type="int" line="5172"/>
                    <declaration name="i" type="int" line="5173"/>
                    <scope line="5174">
                        <scope line="5176"/>
                    </scope>
                    <scope line="5180"/>
                </scope>
                <scope line="5183">
                    <declaration name="i" type="int" line="5184"/>
                    <scope line="5185">
                        <scope line="5187"/>
                    </scope>
                    <scope line="5191"/>
                </scope>
            </method>
            <javadoc line="5198">
                Determines if the specified character is a lowercase character.
                  &lt;p&gt;
                  A character is lowercase if its general category type, provided
                  by {@code Character.getType(ch)}, is{@code LOWERCASE_LETTER}, or it has contributory property
                  Other_Lowercase as defined by the Unicode Standard.
                  &lt;p&gt;
                  The following are examples of lowercase characters:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  a b c d e f g h i j k l m n o p q r s t u v w x y z
                  &apos;&amp;#92;u00DF&apos; &apos;&amp;#92;u00E0&apos; &apos;&amp;#92;u00E1&apos; &apos;&amp;#92;u00E2&apos; &apos;&amp;#92;u00E3&apos; &apos;&amp;#92;u00E4&apos; &apos;&amp;#92;u00E5&apos; &apos;&amp;#92;u00E6&apos;
                  &apos;&amp;#92;u00E7&apos; &apos;&amp;#92;u00E8&apos; &apos;&amp;#92;u00E9&apos; &apos;&amp;#92;u00EA&apos; &apos;&amp;#92;u00EB&apos; &apos;&amp;#92;u00EC&apos; &apos;&amp;#92;u00ED&apos; &apos;&amp;#92;u00EE&apos;
                  &apos;&amp;#92;u00EF&apos; &apos;&amp;#92;u00F0&apos; &apos;&amp;#92;u00F1&apos; &apos;&amp;#92;u00F2&apos; &apos;&amp;#92;u00F3&apos; &apos;&amp;#92;u00F4&apos; &apos;&amp;#92;u00F5&apos; &apos;&amp;#92;u00F6&apos;
                  &apos;&amp;#92;u00F8&apos; &apos;&amp;#92;u00F9&apos; &apos;&amp;#92;u00FA&apos; &apos;&amp;#92;u00FB&apos; &apos;&amp;#92;u00FC&apos; &apos;&amp;#92;u00FD&apos; &apos;&amp;#92;u00FE&apos; &apos;&amp;#92;u00FF&apos;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Many other Unicode characters are lowercase too.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isLowerCase(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is lowercase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isTitleCase(char)                    
                </see>
                <see>
                    Character#toLowerCase(char)                    
                </see>
                <see>
                    Character#getType(char)                    
                </see>
            </javadoc>
            <method name="isLowerCase" type="boolean" line="5229">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5233">
                Determines if the specified character (Unicode code point) is a
                  lowercase character.
                  &lt;p&gt;
                  A character is lowercase if its general category type, provided
                  by {@link Character#getType getType(codePoint)}, is{@code LOWERCASE_LETTER}, or it has contributory property
                  Other_Lowercase as defined by the Unicode Standard.
                  &lt;p&gt;
                  The following are examples of lowercase characters:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  a b c d e f g h i j k l m n o p q r s t u v w x y z
                  &apos;&amp;#92;u00DF&apos; &apos;&amp;#92;u00E0&apos; &apos;&amp;#92;u00E1&apos; &apos;&amp;#92;u00E2&apos; &apos;&amp;#92;u00E3&apos; &apos;&amp;#92;u00E4&apos; &apos;&amp;#92;u00E5&apos; &apos;&amp;#92;u00E6&apos;
                  &apos;&amp;#92;u00E7&apos; &apos;&amp;#92;u00E8&apos; &apos;&amp;#92;u00E9&apos; &apos;&amp;#92;u00EA&apos; &apos;&amp;#92;u00EB&apos; &apos;&amp;#92;u00EC&apos; &apos;&amp;#92;u00ED&apos; &apos;&amp;#92;u00EE&apos;
                  &apos;&amp;#92;u00EF&apos; &apos;&amp;#92;u00F0&apos; &apos;&amp;#92;u00F1&apos; &apos;&amp;#92;u00F2&apos; &apos;&amp;#92;u00F3&apos; &apos;&amp;#92;u00F4&apos; &apos;&amp;#92;u00F5&apos; &apos;&amp;#92;u00F6&apos;
                  &apos;&amp;#92;u00F8&apos; &apos;&amp;#92;u00F9&apos; &apos;&amp;#92;u00FA&apos; &apos;&amp;#92;u00FB&apos; &apos;&amp;#92;u00FC&apos; &apos;&amp;#92;u00FD&apos; &apos;&amp;#92;u00FE&apos; &apos;&amp;#92;u00FF&apos;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Many other Unicode characters are lowercase too.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is lowercase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    Character#isTitleCase(int)                    
                </see>
                <see>
                    Character#toLowerCase(int)                    
                </see>
                <see>
                    Character#getType(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLowerCase" type="boolean" line="5261">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5266">
                Determines if the specified character is an uppercase character.
                  &lt;p&gt;
                  A character is uppercase if its general category type, provided by{@code Character.getType(ch)}, is {@code UPPERCASE_LETTER}.
                  or it has contributory property Other_Uppercase as defined by the Unicode Standard.
                  &lt;p&gt;
                  The following are examples of uppercase characters:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                  &apos;&amp;#92;u00C0&apos; &apos;&amp;#92;u00C1&apos; &apos;&amp;#92;u00C2&apos; &apos;&amp;#92;u00C3&apos; &apos;&amp;#92;u00C4&apos; &apos;&amp;#92;u00C5&apos; &apos;&amp;#92;u00C6&apos; &apos;&amp;#92;u00C7&apos;
                  &apos;&amp;#92;u00C8&apos; &apos;&amp;#92;u00C9&apos; &apos;&amp;#92;u00CA&apos; &apos;&amp;#92;u00CB&apos; &apos;&amp;#92;u00CC&apos; &apos;&amp;#92;u00CD&apos; &apos;&amp;#92;u00CE&apos; &apos;&amp;#92;u00CF&apos;
                  &apos;&amp;#92;u00D0&apos; &apos;&amp;#92;u00D1&apos; &apos;&amp;#92;u00D2&apos; &apos;&amp;#92;u00D3&apos; &apos;&amp;#92;u00D4&apos; &apos;&amp;#92;u00D5&apos; &apos;&amp;#92;u00D6&apos; &apos;&amp;#92;u00D8&apos;
                  &apos;&amp;#92;u00D9&apos; &apos;&amp;#92;u00DA&apos; &apos;&amp;#92;u00DB&apos; &apos;&amp;#92;u00DC&apos; &apos;&amp;#92;u00DD&apos; &apos;&amp;#92;u00DE&apos;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Many other Unicode characters are uppercase too.&lt;p&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isUpperCase(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is uppercase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isTitleCase(char)                    
                </see>
                <see>
                    Character#toUpperCase(char)                    
                </see>
                <see>
                    Character#getType(char)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="isUpperCase" type="boolean" line="5297">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5301">
                Determines if the specified character (Unicode code point) is an uppercase character.
                  &lt;p&gt;
                  A character is uppercase if its general category type, provided by{@link Character#getType(int) getType(codePoint)}, is {@code UPPERCASE_LETTER},
                  or it has contributory property Other_Uppercase as defined by the Unicode Standard.
                  &lt;p&gt;
                  The following are examples of uppercase characters:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                  &apos;&amp;#92;u00C0&apos; &apos;&amp;#92;u00C1&apos; &apos;&amp;#92;u00C2&apos; &apos;&amp;#92;u00C3&apos; &apos;&amp;#92;u00C4&apos; &apos;&amp;#92;u00C5&apos; &apos;&amp;#92;u00C6&apos; &apos;&amp;#92;u00C7&apos;
                  &apos;&amp;#92;u00C8&apos; &apos;&amp;#92;u00C9&apos; &apos;&amp;#92;u00CA&apos; &apos;&amp;#92;u00CB&apos; &apos;&amp;#92;u00CC&apos; &apos;&amp;#92;u00CD&apos; &apos;&amp;#92;u00CE&apos; &apos;&amp;#92;u00CF&apos;
                  &apos;&amp;#92;u00D0&apos; &apos;&amp;#92;u00D1&apos; &apos;&amp;#92;u00D2&apos; &apos;&amp;#92;u00D3&apos; &apos;&amp;#92;u00D4&apos; &apos;&amp;#92;u00D5&apos; &apos;&amp;#92;u00D6&apos; &apos;&amp;#92;u00D8&apos;
                  &apos;&amp;#92;u00D9&apos; &apos;&amp;#92;u00DA&apos; &apos;&amp;#92;u00DB&apos; &apos;&amp;#92;u00DC&apos; &apos;&amp;#92;u00DD&apos; &apos;&amp;#92;u00DE&apos;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Many other Unicode characters are uppercase too.&lt;p&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is uppercase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    Character#isTitleCase(int)                    
                </see>
                <see>
                    Character#toUpperCase(int)                    
                </see>
                <see>
                    Character#getType(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isUpperCase" type="boolean" line="5327">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5332">
                Determines if the specified character is a titlecase character.
                  &lt;p&gt;
                  A character is a titlecase character if its general
                  category type, provided by {@code Character.getType(ch)},
                  is {@code TITLECASE_LETTER}.
                  &lt;p&gt;
                  Some characters look like pairs of Latin letters. For example, there
                  is an uppercase letter that looks like &quot;LJ&quot; and has a corresponding
                  lowercase letter that looks like &quot;lj&quot;. A third form, which looks like &quot;Lj&quot;,
                  is the appropriate form to use when rendering a word in lowercase
                  with initial capitals, as for a book title.
                  &lt;p&gt;
                  These are some of the Unicode characters for which this method returns{@code true}:
                  &lt;ul&gt;
                  &lt;li&gt;{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}&lt;li&gt;{@code LATIN CAPITAL LETTER L WITH SMALL LETTER J}&lt;li&gt;{@code LATIN CAPITAL LETTER N WITH SMALL LETTER J}&lt;li&gt;{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z}&lt;/ul&gt;
                  &lt;p&gt; Many other Unicode characters are titlecase too.&lt;p&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isTitleCase(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is titlecase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isUpperCase(char)                    
                </see>
                <see>
                    Character#toTitleCase(char)                    
                </see>
                <see>
                    Character#getType(char)                    
                </see>
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <method name="isTitleCase" type="boolean" line="5369">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5373">
                Determines if the specified character (Unicode code point) is a titlecase character.
                  &lt;p&gt;
                  A character is a titlecase character if its general
                  category type, provided by {@link Character#getType(int) getType(codePoint)},
                  is {@code TITLECASE_LETTER}.
                  &lt;p&gt;
                  Some characters look like pairs of Latin letters. For example, there
                  is an uppercase letter that looks like &quot;LJ&quot; and has a corresponding
                  lowercase letter that looks like &quot;lj&quot;. A third form, which looks like &quot;Lj&quot;,
                  is the appropriate form to use when rendering a word in lowercase
                  with initial capitals, as for a book title.
                  &lt;p&gt;
                  These are some of the Unicode characters for which this method returns{@code true}:
                  &lt;ul&gt;
                  &lt;li&gt;{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}&lt;li&gt;{@code LATIN CAPITAL LETTER L WITH SMALL LETTER J}&lt;li&gt;{@code LATIN CAPITAL LETTER N WITH SMALL LETTER J}&lt;li&gt;{@code LATIN CAPITAL LETTER D WITH SMALL LETTER Z}&lt;/ul&gt;
                  &lt;p&gt; Many other Unicode characters are titlecase too.&lt;p&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is titlecase;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    Character#isUpperCase(int)                    
                </see>
                <see>
                    Character#toTitleCase(int)                    
                </see>
                <see>
                    Character#getType(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isTitleCase" type="boolean" line="5405">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5409">
                Determines if the specified character is a digit.
                  &lt;p&gt;
                  A character is a digit if its general category type, provided
                  by {@code Character.getType(ch)}, is{@code DECIMAL_DIGIT_NUMBER}.
                  &lt;p&gt;
                  Some Unicode character ranges that contain digits:
                  &lt;ul&gt;
                  &lt;li&gt;{@code &apos;\u005Cu0030&apos;} through {@code &apos;\u005Cu0039&apos;},
                  ISO-LATIN-1 digits ({@code &apos;0&apos;} through {@code &apos;9&apos;})
                  &lt;li&gt;{@code &apos;\u005Cu0660&apos;} through {@code &apos;\u005Cu0669&apos;},
                  Arabic-Indic digits
                  &lt;li&gt;{@code &apos;\u005Cu06F0&apos;} through {@code &apos;\u005Cu06F9&apos;},
                  Extended Arabic-Indic digits
                  &lt;li&gt;{@code &apos;\u005Cu0966&apos;} through {@code &apos;\u005Cu096F&apos;},
                  Devanagari digits
                  &lt;li&gt;{@code &apos;\u005CuFF10&apos;} through {@code &apos;\u005CuFF19&apos;},
                  Fullwidth digits
                  &lt;/ul&gt;
                  Many other character ranges contain digits as well.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isDigit(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a digit;{@code false} otherwise.                    
                </return>
                <see>
                    Character#digit(char,int)                    
                </see>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#getType(char)                    
                </see>
            </javadoc>
            <method name="isDigit" type="boolean" line="5444">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5448">
                Determines if the specified character (Unicode code point) is a digit.
                  &lt;p&gt;
                  A character is a digit if its general category type, provided
                  by {@link Character#getType(int) getType(codePoint)}, is{@code DECIMAL_DIGIT_NUMBER}.
                  &lt;p&gt;
                  Some Unicode character ranges that contain digits:
                  &lt;ul&gt;
                  &lt;li&gt;{@code &apos;\u005Cu0030&apos;} through {@code &apos;\u005Cu0039&apos;},
                  ISO-LATIN-1 digits ({@code &apos;0&apos;} through {@code &apos;9&apos;})
                  &lt;li&gt;{@code &apos;\u005Cu0660&apos;} through {@code &apos;\u005Cu0669&apos;},
                  Arabic-Indic digits
                  &lt;li&gt;{@code &apos;\u005Cu06F0&apos;} through {@code &apos;\u005Cu06F9&apos;},
                  Extended Arabic-Indic digits
                  &lt;li&gt;{@code &apos;\u005Cu0966&apos;} through {@code &apos;\u005Cu096F&apos;},
                  Devanagari digits
                  &lt;li&gt;{@code &apos;\u005CuFF10&apos;} through {@code &apos;\u005CuFF19&apos;},
                  Fullwidth digits
                  &lt;/ul&gt;
                  Many other character ranges contain digits as well.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a digit;{@code false} otherwise.                    
                </return>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#getType(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isDigit" type="boolean" line="5478">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5482">
                Determines if a character is defined in Unicode.
                  &lt;p&gt;
                  A character is defined if at least one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt;It has an entry in the UnicodeData file.
                  &lt;li&gt;It has a value in a range defined by the UnicodeData file.
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isDefined(int)} method.                
                <param>
                    ch   the character to be tested                    
                </param>
                <return>
                    {@code true} if the character has a defined meaning
                      in Unicode; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isTitleCase(char)                    
                </see>
                <see>
                    Character#isUpperCase(char)                    
                </see>
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <method name="isDefined" type="boolean" line="5507">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5511">
                Determines if a character (Unicode code point) is defined in Unicode.
                  &lt;p&gt;
                  A character is defined if at least one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt;It has an entry in the UnicodeData file.
                  &lt;li&gt;It has a value in a range defined by the UnicodeData file.
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character has a defined meaning
                      in Unicode; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(int)                    
                </see>
                <see>
                    Character#isLetter(int)                    
                </see>
                <see>
                    Character#isLetterOrDigit(int)                    
                </see>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    Character#isTitleCase(int)                    
                </see>
                <see>
                    Character#isUpperCase(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isDefined" type="boolean" line="5531">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5535">
                Determines if the specified character is a letter.
                  &lt;p&gt;
                  A character is considered to be a letter if its general
                  category type, provided by {@code Character.getType(ch)},
                  is any of the following:
                  &lt;ul&gt;
                  &lt;li&gt; {@code UPPERCASE_LETTER}&lt;li&gt; {@code LOWERCASE_LETTER}&lt;li&gt; {@code TITLECASE_LETTER}&lt;li&gt; {@code MODIFIER_LETTER}&lt;li&gt; {@code OTHER_LETTER}&lt;/ul&gt;
                  Not all letters have case. Many characters are
                  letters but are neither uppercase nor lowercase nor titlecase.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isLetter(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a letter;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(char)                    
                </see>
                <see>
                    Character#isJavaLetter(char)                    
                </see>
                <see>
                    Character#isJavaLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isTitleCase(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(char)                    
                </see>
                <see>
                    Character#isUpperCase(char)                    
                </see>
            </javadoc>
            <method name="isLetter" type="boolean" line="5570">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5574">
                Determines if the specified character (Unicode code point) is a letter.
                  &lt;p&gt;
                  A character is considered to be a letter if its general
                  category type, provided by {@link Character#getType(int) getType(codePoint)},
                  is any of the following:
                  &lt;ul&gt;
                  &lt;li&gt; {@code UPPERCASE_LETTER}&lt;li&gt; {@code LOWERCASE_LETTER}&lt;li&gt; {@code TITLECASE_LETTER}&lt;li&gt; {@code MODIFIER_LETTER}&lt;li&gt; {@code OTHER_LETTER}&lt;/ul&gt;
                  Not all letters have case. Many characters are
                  letters but are neither uppercase nor lowercase nor titlecase.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a letter;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(int)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(int)                    
                </see>
                <see>
                    Character#isLetterOrDigit(int)                    
                </see>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    Character#isTitleCase(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(int)                    
                </see>
                <see>
                    Character#isUpperCase(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLetter" type="boolean" line="5603">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5612">
                Determines if the specified character is a letter or digit.
                  &lt;p&gt;
                  A character is considered to be a letter or digit if either{@code Character.isLetter(char ch)} or{@code Character.isDigit(char ch)} returns{@code true} for the character.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isLetterOrDigit(int)} method.                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a letter or digit;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isJavaLetter(char)                    
                </see>
                <see>
                    Character#isJavaLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(char)                    
                </see>
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <method name="isLetterOrDigit" type="boolean" line="5636">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5640">
                Determines if the specified character (Unicode code point) is a letter or digit.
                  &lt;p&gt;
                  A character is considered to be a letter or digit if either{@link #isLetter(int) isLetter(codePoint)} or{@link #isDigit(int) isDigit(codePoint)} returns{@code true} for the character.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a letter or digit;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isDigit(int)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(int)                    
                </see>
                <see>
                    Character#isLetter(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isLetterOrDigit" type="boolean" line="5657">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5667">
                Determines if the specified character is permissible as the first
                  character in a Java identifier.
                  &lt;p&gt;
                  A character may start a Java identifier if and only if
                  one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns {@code true}&lt;li&gt; {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}&lt;li&gt; {@code ch} is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt; {@code ch} is a connecting punctuation character (such as {@code &apos;_&apos;}).
                  &lt;/ul&gt;                
                <param>
                    ch the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may start a Java
                      identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(char)                    
                </see>
                <since>
                    1.02                    
                </since>
                <deprecated>
                    Replaced by isJavaIdentifierStart(char).                    
                </deprecated>
            </javadoc>
            <method name="isJavaLetter" type="boolean" line="5693">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5697">
                Determines if the specified character may be part of a Java
                  identifier as other than the first character.
                  &lt;p&gt;
                  A character may be part of a Java identifier if and only if any
                  of the following are true:
                  &lt;ul&gt;
                  &lt;li&gt;  it is a letter
                  &lt;li&gt;  it is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt;  it is a connecting punctuation character (such as {@code &apos;_&apos;})
                  &lt;li&gt;  it is a digit
                  &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
                  &lt;li&gt;  it is a combining mark
                  &lt;li&gt;  it is a non-spacing mark
                  &lt;li&gt; {@code isIdentifierIgnorable} returns{@code true} for the character.
                  &lt;/ul&gt;                
                <param>
                    ch the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may be part of a
                      Java identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaLetter(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(char)                    
                </see>
                <see>
                    Character#isIdentifierIgnorable(char)                    
                </see>
                <since>
                    1.02                    
                </since>
                <deprecated>
                    Replaced by isJavaIdentifierPart(char).                    
                </deprecated>
            </javadoc>
            <method name="isJavaLetterOrDigit" type="boolean" line="5729">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5733">
                Determines if the specified character (Unicode code point) is an alphabet.
                  &lt;p&gt;
                  A character is considered to be alphabetic if its general category type,
                  provided by {@link Character#getType(int) getType(codePoint)}, is any of
                  the following:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;code&gt;UPPERCASE_LETTER&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;LOWERCASE_LETTER&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;TITLECASE_LETTER&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;MODIFIER_LETTER&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;OTHER_LETTER&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;LETTER_NUMBER&lt;/code&gt;
                  &lt;/ul&gt;
                  or it has contributory property Other_Alphabetic as defined by the
                  Unicode Standard.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    <code>true</code> if the character is a Unicode alphabet
                      character, <code>false</code> otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isAlphabetic" type="boolean" line="5755">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5765">
                Determines if the specified character (Unicode code point) is a CJKV
                  (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by
                  the Unicode Standard.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    <code>true</code> if the character is a Unicode ideograph
                      character, <code>false</code> otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isIdeographic" type="boolean" line="5775">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5779">
                Determines if the specified character is
                  permissible as the first character in a Java identifier.
                  &lt;p&gt;
                  A character may start a Java identifier if and only if
                  one of the following conditions is true:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns {@code true}&lt;li&gt; {@link #getType(char) getType(ch)} returns {@code LETTER_NUMBER}&lt;li&gt; {@code ch} is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt; {@code ch} is a connecting punctuation character (such as {@code &apos;_&apos;}).
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isJavaIdentifierStart(int)} method.                
                <param>
                    ch the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may start a Java identifier;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(char)                    
                </see>
                <see>
                    javax.lang.model.SourceVersion#isIdentifier(CharSequence)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isJavaIdentifierStart" type="boolean" line="5806">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5810">
                Determines if the character (Unicode code point) is
                  permissible as the first character in a Java identifier.
                  &lt;p&gt;
                  A character may start a Java identifier if and only if
                  one of the following conditions is true:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #isLetter(int) isLetter(codePoint)}returns {@code true}&lt;li&gt; {@link #getType(int) getType(codePoint)}returns {@code LETTER_NUMBER}&lt;li&gt; the referenced character is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt; the referenced character is a connecting punctuation character
                  (such as {@code &apos;_&apos;}).
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character may start a Java identifier;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierPart(int)                    
                </see>
                <see>
                    Character#isLetter(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(int)                    
                </see>
                <see>
                    javax.lang.model.SourceVersion#isIdentifier(CharSequence)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isJavaIdentifierStart" type="boolean" line="5835">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5839">
                Determines if the specified character may be part of a Java
                  identifier as other than the first character.
                  &lt;p&gt;
                  A character may be part of a Java identifier if any of the following
                  are true:
                  &lt;ul&gt;
                  &lt;li&gt;  it is a letter
                  &lt;li&gt;  it is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt;  it is a connecting punctuation character (such as {@code &apos;_&apos;})
                  &lt;li&gt;  it is a digit
                  &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
                  &lt;li&gt;  it is a combining mark
                  &lt;li&gt;  it is a non-spacing mark
                  &lt;li&gt; {@code isIdentifierIgnorable} returns{@code true} for the character
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isJavaIdentifierPart(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may be part of a
                      Java identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isIdentifierIgnorable(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(char)                    
                </see>
                <see>
                    javax.lang.model.SourceVersion#isIdentifier(CharSequence)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isJavaIdentifierPart" type="boolean" line="5872">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5876">
                Determines if the character (Unicode code point) may be part of a Java
                  identifier as other than the first character.
                  &lt;p&gt;
                  A character may be part of a Java identifier if any of the following
                  are true:
                  &lt;ul&gt;
                  &lt;li&gt;  it is a letter
                  &lt;li&gt;  it is a currency symbol (such as {@code &apos;$&apos;})
                  &lt;li&gt;  it is a connecting punctuation character (such as {@code &apos;_&apos;})
                  &lt;li&gt;  it is a digit
                  &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
                  &lt;li&gt;  it is a combining mark
                  &lt;li&gt;  it is a non-spacing mark
                  &lt;li&gt; {@link #isIdentifierIgnorable(int)isIdentifierIgnorable(codePoint)} returns {@code true} for
                  the character
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character may be part of a
                      Java identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isIdentifierIgnorable(int)                    
                </see>
                <see>
                    Character#isJavaIdentifierStart(int)                    
                </see>
                <see>
                    Character#isLetterOrDigit(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(int)                    
                </see>
                <see>
                    javax.lang.model.SourceVersion#isIdentifier(CharSequence)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isJavaIdentifierPart" type="boolean" line="5905">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5909">
                Determines if the specified character is permissible as the
                  first character in a Unicode identifier.
                  &lt;p&gt;
                  A character may start a Unicode identifier if and only if
                  one of the following conditions is true:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns {@code true}&lt;li&gt; {@link #getType(char) getType(ch)} returns{@code LETTER_NUMBER}.
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isUnicodeIdentifierStart(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may start a Unicode
                      identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierStart(char)                    
                </see>
                <see>
                    Character#isLetter(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isUnicodeIdentifierStart" type="boolean" line="5934">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5938">
                Determines if the specified character (Unicode code point) is permissible as the
                  first character in a Unicode identifier.
                  &lt;p&gt;
                  A character may start a Unicode identifier if and only if
                  one of the following conditions is true:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #isLetter(int) isLetter(codePoint)}returns {@code true}&lt;li&gt; {@link #getType(int) getType(codePoint)}returns {@code LETTER_NUMBER}.
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character may start a Unicode
                      identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierStart(int)                    
                </see>
                <see>
                    Character#isLetter(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isUnicodeIdentifierStart" type="boolean" line="5958">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="5962">
                Determines if the specified character may be part of a Unicode
                  identifier as other than the first character.
                  &lt;p&gt;
                  A character may be part of a Unicode identifier if and only if
                  one of the following statements is true:
                  &lt;ul&gt;
                  &lt;li&gt;  it is a letter
                  &lt;li&gt;  it is a connecting punctuation character (such as {@code &apos;_&apos;})
                  &lt;li&gt;  it is a digit
                  &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
                  &lt;li&gt;  it is a combining mark
                  &lt;li&gt;  it is a non-spacing mark
                  &lt;li&gt; {@code isIdentifierIgnorable} returns{@code true} for this character.
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isUnicodeIdentifierPart(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character may be part of a
                      Unicode identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isIdentifierIgnorable(char)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isLetterOrDigit(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isUnicodeIdentifierPart" type="boolean" line="5993">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="5997">
                Determines if the specified character (Unicode code point) may be part of a Unicode
                  identifier as other than the first character.
                  &lt;p&gt;
                  A character may be part of a Unicode identifier if and only if
                  one of the following statements is true:
                  &lt;ul&gt;
                  &lt;li&gt;  it is a letter
                  &lt;li&gt;  it is a connecting punctuation character (such as {@code &apos;_&apos;})
                  &lt;li&gt;  it is a digit
                  &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
                  &lt;li&gt;  it is a combining mark
                  &lt;li&gt;  it is a non-spacing mark
                  &lt;li&gt; {@code isIdentifierIgnorable} returns{@code true} for this character.
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character may be part of a
                      Unicode identifier; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isIdentifierIgnorable(int)                    
                </see>
                <see>
                    Character#isJavaIdentifierPart(int)                    
                </see>
                <see>
                    Character#isLetterOrDigit(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierStart(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isUnicodeIdentifierPart" type="boolean" line="6022">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6026">
                Determines if the specified character should be regarded as
                  an ignorable character in a Java identifier or a Unicode identifier.
                  &lt;p&gt;
                  The following Unicode characters are ignorable in a Java identifier
                  or a Unicode identifier:
                  &lt;ul&gt;
                  &lt;li&gt;ISO control characters that are not whitespace
                  &lt;ul&gt;
                  &lt;li&gt;{@code &apos;\u005Cu0000&apos;} through {@code &apos;\u005Cu0008&apos;}&lt;li&gt;{@code &apos;\u005Cu000E&apos;} through {@code &apos;\u005Cu001B&apos;}&lt;li&gt;{@code &apos;\u005Cu007F&apos;} through {@code &apos;\u005Cu009F&apos;}&lt;/ul&gt;
                  &lt;li&gt;all characters that have the {@code FORMAT} general
                  category value
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isIdentifierIgnorable(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is an ignorable control
                      character that may be part of a Java or Unicode identifier;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierPart(char)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isIdentifierIgnorable" type="boolean" line="6057">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6061">
                Determines if the specified character (Unicode code point) should be regarded as
                  an ignorable character in a Java identifier or a Unicode identifier.
                  &lt;p&gt;
                  The following Unicode characters are ignorable in a Java identifier
                  or a Unicode identifier:
                  &lt;ul&gt;
                  &lt;li&gt;ISO control characters that are not whitespace
                  &lt;ul&gt;
                  &lt;li&gt;{@code &apos;\u005Cu0000&apos;} through {@code &apos;\u005Cu0008&apos;}&lt;li&gt;{@code &apos;\u005Cu000E&apos;} through {@code &apos;\u005Cu001B&apos;}&lt;li&gt;{@code &apos;\u005Cu007F&apos;} through {@code &apos;\u005Cu009F&apos;}&lt;/ul&gt;
                  &lt;li&gt;all characters that have the {@code FORMAT} general
                  category value
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is an ignorable control
                      character that may be part of a Java or Unicode identifier;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isJavaIdentifierPart(int)                    
                </see>
                <see>
                    Character#isUnicodeIdentifierPart(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isIdentifierIgnorable" type="boolean" line="6087">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6091">
                Converts the character argument to lowercase using case
                  mapping information from the UnicodeData file.
                  &lt;p&gt;
                  Note that{@code Character.isLowerCase(Character.toLowerCase(ch))}does not always return {@code true} for some ranges of
                  characters, particularly those that are symbols or ideographs.
                  &lt;p&gt;In general, {@link String#toLowerCase()} should be used to map
                  characters to lowercase. {@code String} case mapping methods
                  have several benefits over {@code Character} case mapping methods.{@code String} case mapping methods can perform locale-sensitive
                  mappings, context-sensitive mappings, and 1:M character mappings, whereas
                  the {@code Character} case mapping methods cannot.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #toLowerCase(int)} method.                
                <param>
                    ch   the character to be converted.                    
                </param>
                <return>
                    the lowercase equivalent of the character, if any;
                      otherwise, the character itself.                    
                </return>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    String#toLowerCase()                    
                </see>
            </javadoc>
            <method name="toLowerCase" type="char" line="6118">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6122">
                Converts the character (Unicode code point) argument to
                  lowercase using case mapping information from the UnicodeData
                  file.
                  &lt;p&gt; Note that{@code Character.isLowerCase(Character.toLowerCase(codePoint))}does not always return {@code true} for some ranges of
                  characters, particularly those that are symbols or ideographs.
                  &lt;p&gt;In general, {@link String#toLowerCase()} should be used to map
                  characters to lowercase. {@code String} case mapping methods
                  have several benefits over {@code Character} case mapping methods.{@code String} case mapping methods can perform locale-sensitive
                  mappings, context-sensitive mappings, and 1:M character mappings, whereas
                  the {@code Character} case mapping methods cannot.                
                <param>
                    codePoint   the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    the lowercase equivalent of the character (Unicode code
                      point), if any; otherwise, the character itself.                    
                </return>
                <see>
                    Character#isLowerCase(int)                    
                </see>
                <see>
                    String#toLowerCase()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toLowerCase" type="int" line="6147">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6151">
                Converts the character argument to uppercase using case mapping
                  information from the UnicodeData file.
                  &lt;p&gt;
                  Note that{@code Character.isUpperCase(Character.toUpperCase(ch))}does not always return {@code true} for some ranges of
                  characters, particularly those that are symbols or ideographs.
                  &lt;p&gt;In general, {@link String#toUpperCase()} should be used to map
                  characters to uppercase. {@code String} case mapping methods
                  have several benefits over {@code Character} case mapping methods.{@code String} case mapping methods can perform locale-sensitive
                  mappings, context-sensitive mappings, and 1:M character mappings, whereas
                  the {@code Character} case mapping methods cannot.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #toUpperCase(int)} method.                
                <param>
                    ch   the character to be converted.                    
                </param>
                <return>
                    the uppercase equivalent of the character, if any;
                      otherwise, the character itself.                    
                </return>
                <see>
                    Character#isUpperCase(char)                    
                </see>
                <see>
                    String#toUpperCase()                    
                </see>
            </javadoc>
            <method name="toUpperCase" type="char" line="6178">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6182">
                Converts the character (Unicode code point) argument to
                  uppercase using case mapping information from the UnicodeData
                  file.
                  &lt;p&gt;Note that{@code Character.isUpperCase(Character.toUpperCase(codePoint))}does not always return {@code true} for some ranges of
                  characters, particularly those that are symbols or ideographs.
                  &lt;p&gt;In general, {@link String#toUpperCase()} should be used to map
                  characters to uppercase. {@code String} case mapping methods
                  have several benefits over {@code Character} case mapping methods.{@code String} case mapping methods can perform locale-sensitive
                  mappings, context-sensitive mappings, and 1:M character mappings, whereas
                  the {@code Character} case mapping methods cannot.                
                <param>
                    codePoint   the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    the uppercase equivalent of the character, if any;
                      otherwise, the character itself.                    
                </return>
                <see>
                    Character#isUpperCase(int)                    
                </see>
                <see>
                    String#toUpperCase()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toUpperCase" type="int" line="6207">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6211">
                Converts the character argument to titlecase using case mapping
                  information from the UnicodeData file. If a character has no
                  explicit titlecase mapping and is not itself a titlecase char
                  according to UnicodeData, then the uppercase mapping is
                  returned as an equivalent titlecase mapping. If the{@code char} argument is already a titlecase{@code char}, the same {@code char} value will be
                  returned.
                  &lt;p&gt;
                  Note that{@code Character.isTitleCase(Character.toTitleCase(ch))}does not always return {@code true} for some ranges of
                  characters.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #toTitleCase(int)} method.                
                <param>
                    ch   the character to be converted.                    
                </param>
                <return>
                    the titlecase equivalent of the character, if any;
                      otherwise, the character itself.                    
                </return>
                <see>
                    Character#isTitleCase(char)                    
                </see>
                <see>
                    Character#toLowerCase(char)                    
                </see>
                <see>
                    Character#toUpperCase(char)                    
                </see>
                <since>
                    1.0.2                    
                </since>
            </javadoc>
            <method name="toTitleCase" type="char" line="6239">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6243">
                Converts the character (Unicode code point) argument to titlecase using case mapping
                  information from the UnicodeData file. If a character has no
                  explicit titlecase mapping and is not itself a titlecase char
                  according to UnicodeData, then the uppercase mapping is
                  returned as an equivalent titlecase mapping. If the
                  character argument is already a titlecase
                  character, the same character value will be
                  returned.
                  &lt;p&gt;Note that{@code Character.isTitleCase(Character.toTitleCase(codePoint))}does not always return {@code true} for some ranges of
                  characters.                
                <param>
                    codePoint   the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    the titlecase equivalent of the character, if any;
                      otherwise, the character itself.                    
                </return>
                <see>
                    Character#isTitleCase(int)                    
                </see>
                <see>
                    Character#toLowerCase(int)                    
                </see>
                <see>
                    Character#toUpperCase(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="toTitleCase" type="int" line="6266">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6270">
                Returns the numeric value of the character {@code ch} in the
                  specified radix.
                  &lt;p&gt;
                  If the radix is not in the range {@code MIN_RADIX} &amp;le;{@code radix} &amp;le; {@code MAX_RADIX} or if the
                  value of {@code ch} is not a valid digit in the specified
                  radix, {@code -1} is returned. A character is a valid digit
                  if at least one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt;The method {@code isDigit} is {@code true} of the character
                  and the Unicode decimal digit value of the character (or its
                  single-character decomposition) is less than the specified radix.
                  In this case the decimal digit value is returned.
                  &lt;li&gt;The character is one of the uppercase Latin letters{@code &apos;A&apos;} through {@code &apos;Z&apos;} and its code is less than{@code radix + &apos;A&apos; - 10}.
                  In this case, {@code ch - &apos;A&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the lowercase Latin letters{@code &apos;a&apos;} through {@code &apos;z&apos;} and its code is less than{@code radix + &apos;a&apos; - 10}.
                  In this case, {@code ch - &apos;a&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the fullwidth uppercase Latin letters A
                  ({@code &apos;\u005CuFF21&apos;}) through Z ({@code &apos;\u005CuFF3A&apos;})
                  and its code is less than{@code radix + &apos;\u005CuFF21&apos; - 10}.
                  In this case, {@code ch - &apos;\u005CuFF21&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the fullwidth lowercase Latin letters a
                  ({@code &apos;\u005CuFF41&apos;}) through z ({@code &apos;\u005CuFF5A&apos;})
                  and its code is less than{@code radix + &apos;\u005CuFF41&apos; - 10}.
                  In this case, {@code ch - &apos;\u005CuFF41&apos; + 10}is returned.
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #digit(int,int)} method.                
                <param>
                    ch      the character to be converted.                    
                </param>
                <param>
                    radix   the radix.                    
                </param>
                <return>
                    the numeric value represented by the character in the
                      specified radix.                    
                </return>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#isDigit(char)                    
                </see>
            </javadoc>
            <method name="digit" type="int" line="6320">
                <params>
                    <param name="ch" type="char"/>
                    <param name="radix" type="int"/>
                </params>
            </method>
            <javadoc line="6324">
                Returns the numeric value of the specified character (Unicode
                  code point) in the specified radix.
                  &lt;p&gt;If the radix is not in the range {@code MIN_RADIX} &amp;le;{@code radix} &amp;le; {@code MAX_RADIX} or if the
                  character is not a valid digit in the specified
                  radix, {@code -1} is returned. A character is a valid digit
                  if at least one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt;The method {@link #isDigit(int) isDigit(codePoint)} is {@code true} of the character
                  and the Unicode decimal digit value of the character (or its
                  single-character decomposition) is less than the specified radix.
                  In this case the decimal digit value is returned.
                  &lt;li&gt;The character is one of the uppercase Latin letters{@code &apos;A&apos;} through {@code &apos;Z&apos;} and its code is less than{@code radix + &apos;A&apos; - 10}.
                  In this case, {@code codePoint - &apos;A&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the lowercase Latin letters{@code &apos;a&apos;} through {@code &apos;z&apos;} and its code is less than{@code radix + &apos;a&apos; - 10}.
                  In this case, {@code codePoint - &apos;a&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the fullwidth uppercase Latin letters A
                  ({@code &apos;\u005CuFF21&apos;}) through Z ({@code &apos;\u005CuFF3A&apos;})
                  and its code is less than{@code radix + &apos;\u005CuFF21&apos; - 10}.
                  In this case,{@code codePoint - &apos;\u005CuFF21&apos; + 10}is returned.
                  &lt;li&gt;The character is one of the fullwidth lowercase Latin letters a
                  ({@code &apos;\u005CuFF41&apos;}) through z ({@code &apos;\u005CuFF5A&apos;})
                  and its code is less than{@code radix + &apos;\u005CuFF41&apos;- 10}.
                  In this case,{@code codePoint - &apos;\u005CuFF41&apos; + 10}is returned.
                  &lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be converted.                    
                </param>
                <param>
                    radix   the radix.                    
                </param>
                <return>
                    the numeric value represented by the character in the
                      specified radix.                    
                </return>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#isDigit(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="digit" type="int" line="6372">
                <params>
                    <param name="codePoint" type="int"/>
                    <param name="radix" type="int"/>
                </params>
            </method>
            <javadoc line="6376">
                Returns the {@code int} value that the specified Unicode
                  character represents. For example, the character{@code &apos;\u005Cu216C&apos;} (the roman numeral fifty) will return
                  an int with a value of 50.
                  &lt;p&gt;
                  The letters A-Z in their uppercase ({@code &apos;\u005Cu0041&apos;} through{@code &apos;\u005Cu005A&apos;}), lowercase
                  ({@code &apos;\u005Cu0061&apos;} through {@code &apos;\u005Cu007A&apos;}), and
                  full width variant ({@code &apos;\u005CuFF21&apos;} through{@code &apos;\u005CuFF3A&apos;} and {@code &apos;\u005CuFF41&apos;} through{@code &apos;\u005CuFF5A&apos;}) forms have numeric values from 10
                  through 35. This is independent of the Unicode specification,
                  which does not assign numeric values to these {@code char}values.
                  &lt;p&gt;
                  If the character does not have a numeric value, then -1 is returned.
                  If the character has a numeric value that cannot be represented as a
                  nonnegative integer (for example, a fractional value), then -2
                  is returned.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #getNumericValue(int)} method.                
                <param>
                    ch      the character to be converted.                    
                </param>
                <return>
                    the numeric value of the character, as a nonnegative {@code int}value; -2 if the character has a numeric value that is not a
                      nonnegative integer; -1 if the character has no numeric value.                    
                </return>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#isDigit(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getNumericValue" type="int" line="6410">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6414">
                Returns the {@code int} value that the specified
                  character (Unicode code point) represents. For example, the character{@code &apos;\u005Cu216C&apos;} (the Roman numeral fifty) will return
                  an {@code int} with a value of 50.
                  &lt;p&gt;
                  The letters A-Z in their uppercase ({@code &apos;\u005Cu0041&apos;} through{@code &apos;\u005Cu005A&apos;}), lowercase
                  ({@code &apos;\u005Cu0061&apos;} through {@code &apos;\u005Cu007A&apos;}), and
                  full width variant ({@code &apos;\u005CuFF21&apos;} through{@code &apos;\u005CuFF3A&apos;} and {@code &apos;\u005CuFF41&apos;} through{@code &apos;\u005CuFF5A&apos;}) forms have numeric values from 10
                  through 35. This is independent of the Unicode specification,
                  which does not assign numeric values to these {@code char}values.
                  &lt;p&gt;
                  If the character does not have a numeric value, then -1 is returned.
                  If the character has a numeric value that cannot be represented as a
                  nonnegative integer (for example, a fractional value), then -2
                  is returned.                
                <param>
                    codePoint the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    the numeric value of the character, as a nonnegative {@code int}value; -2 if the character has a numeric value that is not a
                      nonnegative integer; -1 if the character has no numeric value.                    
                </return>
                <see>
                    Character#forDigit(int,int)                    
                </see>
                <see>
                    Character#isDigit(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getNumericValue" type="int" line="6443">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6447">
                Determines if the specified character is ISO-LATIN-1 white space.
                  This method returns {@code true} for the following five
                  characters only:
                  &lt;table&gt;
                  &lt;tr&gt;&lt;td&gt;{@code &apos;\t&apos;}&lt;/td&gt;            &lt;td&gt;{@code U+0009}&lt;/td&gt;
                  &lt;td&gt;{@code HORIZONTAL TABULATION}&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;{@code &apos;\n&apos;}&lt;/td&gt;            &lt;td&gt;{@code U+000A}&lt;/td&gt;
                  &lt;td&gt;{@code NEW LINE}&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;{@code &apos;\f&apos;}&lt;/td&gt;            &lt;td&gt;{@code U+000C}&lt;/td&gt;
                  &lt;td&gt;{@code FORM FEED}&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;{@code &apos;\r&apos;}&lt;/td&gt;            &lt;td&gt;{@code U+000D}&lt;/td&gt;
                  &lt;td&gt;{@code CARRIAGE RETURN}&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;{@code &apos;&amp;nbsp;&apos;}&lt;/td&gt;  &lt;td&gt;{@code U+0020}&lt;/td&gt;
                  &lt;td&gt;{@code SPACE}&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    ch   the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is ISO-LATIN-1 white
                      space; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isSpaceChar(char)                    
                </see>
                <see>
                    Character#isWhitespace(char)                    
                </see>
                <deprecated>
                    Replaced by isWhitespace(char).                    
                </deprecated>
            </javadoc>
            <method name="isSpace" type="boolean" line="6472">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6482">
                Determines if the specified character is a Unicode space character.
                  A character is considered to be a space character if and only if
                  it is specified to be a space character by the Unicode Standard. This
                  method returns true if the character&apos;s general category type is any of
                  the following:
                  &lt;ul&gt;
                  &lt;li&gt; {@code SPACE_SEPARATOR}&lt;li&gt; {@code LINE_SEPARATOR}&lt;li&gt; {@code PARAGRAPH_SEPARATOR}&lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isSpaceChar(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a space character;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isWhitespace(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isSpaceChar" type="boolean" line="6505">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6509">
                Determines if the specified character (Unicode code point) is a
                  Unicode space character.  A character is considered to be a
                  space character if and only if it is specified to be a space
                  character by the Unicode Standard. This method returns true if
                  the character&apos;s general category type is any of the following:
                  &lt;ul&gt;
                  &lt;li&gt; {@link #SPACE_SEPARATOR}&lt;li&gt; {@link #LINE_SEPARATOR}&lt;li&gt; {@link #PARAGRAPH_SEPARATOR}&lt;/ul&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a space character;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isWhitespace(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isSpaceChar" type="boolean" line="6528">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6535">
                Determines if the specified character is white space according to Java.
                  A character is a Java whitespace character if and only if it satisfies
                  one of the following criteria:
                  &lt;ul&gt;
                  &lt;li&gt; It is a Unicode space character ({@code SPACE_SEPARATOR},{@code LINE_SEPARATOR}, or {@code PARAGRAPH_SEPARATOR})
                  but is not also a non-breaking space ({@code &apos;\u005Cu00A0&apos;},{@code &apos;\u005Cu2007&apos;}, {@code &apos;\u005Cu202F&apos;}).
                  &lt;li&gt; It is {@code &apos;\u005Ct&apos;}, U+0009 HORIZONTAL TABULATION.
                  &lt;li&gt; It is {@code &apos;\u005Cn&apos;}, U+000A LINE FEED.
                  &lt;li&gt; It is {@code &apos;\u005Cu000B&apos;}, U+000B VERTICAL TABULATION.
                  &lt;li&gt; It is {@code &apos;\u005Cf&apos;}, U+000C FORM FEED.
                  &lt;li&gt; It is {@code &apos;\u005Cr&apos;}, U+000D CARRIAGE RETURN.
                  &lt;li&gt; It is {@code &apos;\u005Cu001C&apos;}, U+001C FILE SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001D&apos;}, U+001D GROUP SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001E&apos;}, U+001E RECORD SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001F&apos;}, U+001F UNIT SEPARATOR.
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isWhitespace(int)} method.                
                <param>
                    ch the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a Java whitespace
                      character; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isSpaceChar(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isWhitespace" type="boolean" line="6566">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6570">
                Determines if the specified character (Unicode code point) is
                  white space according to Java.  A character is a Java
                  whitespace character if and only if it satisfies one of the
                  following criteria:
                  &lt;ul&gt;
                  &lt;li&gt; It is a Unicode space character ({@link #SPACE_SEPARATOR},{@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR})
                  but is not also a non-breaking space ({@code &apos;\u005Cu00A0&apos;},{@code &apos;\u005Cu2007&apos;}, {@code &apos;\u005Cu202F&apos;}).
                  &lt;li&gt; It is {@code &apos;\u005Ct&apos;}, U+0009 HORIZONTAL TABULATION.
                  &lt;li&gt; It is {@code &apos;\u005Cn&apos;}, U+000A LINE FEED.
                  &lt;li&gt; It is {@code &apos;\u005Cu000B&apos;}, U+000B VERTICAL TABULATION.
                  &lt;li&gt; It is {@code &apos;\u005Cf&apos;}, U+000C FORM FEED.
                  &lt;li&gt; It is {@code &apos;\u005Cr&apos;}, U+000D CARRIAGE RETURN.
                  &lt;li&gt; It is {@code &apos;\u005Cu001C&apos;}, U+001C FILE SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001D&apos;}, U+001D GROUP SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001E&apos;}, U+001E RECORD SEPARATOR.
                  &lt;li&gt; It is {@code &apos;\u005Cu001F&apos;}, U+001F UNIT SEPARATOR.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is a Java whitespace
                      character; {@code false} otherwise.                    
                </return>
                <see>
                    Character#isSpaceChar(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isWhitespace" type="boolean" line="6598">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6602">
                Determines if the specified character is an ISO control
                  character.  A character is considered to be an ISO control
                  character if its code is in the range {@code &apos;\u005Cu0000&apos;}through {@code &apos;\u005Cu001F&apos;} or in the range{@code &apos;\u005Cu007F&apos;} through {@code &apos;\u005Cu009F&apos;}.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isISOControl(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    {@code true} if the character is an ISO control character;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isSpaceChar(char)                    
                </see>
                <see>
                    Character#isWhitespace(char)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="isISOControl" type="boolean" line="6622">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6626">
                Determines if the referenced character (Unicode code point) is an ISO control
                  character.  A character is considered to be an ISO control
                  character if its code is in the range {@code &apos;\u005Cu0000&apos;}through {@code &apos;\u005Cu001F&apos;} or in the range{@code &apos;\u005Cu007F&apos;} through {@code &apos;\u005Cu009F&apos;}.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is an ISO control character;{@code false} otherwise.                    
                </return>
                <see>
                    Character#isSpaceChar(int)                    
                </see>
                <see>
                    Character#isWhitespace(int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isISOControl" type="boolean" line="6640">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="6641">
                    Optimized form of:                    
                </comment>
                <comment line="6642">
                    (codePoint &gt;= 0x00 &amp;&amp; codePoint &lt;= 0x1F) ||                    
                </comment>
                <comment line="6643">
                    (codePoint &gt;= 0x7F &amp;&amp; codePoint &lt;= 0x9F);                    
                </comment>
            </method>
            <javadoc line="6648">
                Returns a value indicating a character&apos;s general category.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #getType(int)} method.                
                <param>
                    ch      the character to be tested.                    
                </param>
                <return>
                    a value of type {@code int} representing the
                      character's general category.                    
                </return>
                <see>
                    Character#COMBINING_SPACING_MARK                    
                </see>
                <see>
                    Character#CONNECTOR_PUNCTUATION                    
                </see>
                <see>
                    Character#CONTROL                    
                </see>
                <see>
                    Character#CURRENCY_SYMBOL                    
                </see>
                <see>
                    Character#DASH_PUNCTUATION                    
                </see>
                <see>
                    Character#DECIMAL_DIGIT_NUMBER                    
                </see>
                <see>
                    Character#ENCLOSING_MARK                    
                </see>
                <see>
                    Character#END_PUNCTUATION                    
                </see>
                <see>
                    Character#FINAL_QUOTE_PUNCTUATION                    
                </see>
                <see>
                    Character#FORMAT                    
                </see>
                <see>
                    Character#INITIAL_QUOTE_PUNCTUATION                    
                </see>
                <see>
                    Character#LETTER_NUMBER                    
                </see>
                <see>
                    Character#LINE_SEPARATOR                    
                </see>
                <see>
                    Character#LOWERCASE_LETTER                    
                </see>
                <see>
                    Character#MATH_SYMBOL                    
                </see>
                <see>
                    Character#MODIFIER_LETTER                    
                </see>
                <see>
                    Character#MODIFIER_SYMBOL                    
                </see>
                <see>
                    Character#NON_SPACING_MARK                    
                </see>
                <see>
                    Character#OTHER_LETTER                    
                </see>
                <see>
                    Character#OTHER_NUMBER                    
                </see>
                <see>
                    Character#OTHER_PUNCTUATION                    
                </see>
                <see>
                    Character#OTHER_SYMBOL                    
                </see>
                <see>
                    Character#PARAGRAPH_SEPARATOR                    
                </see>
                <see>
                    Character#PRIVATE_USE                    
                </see>
                <see>
                    Character#SPACE_SEPARATOR                    
                </see>
                <see>
                    Character#START_PUNCTUATION                    
                </see>
                <see>
                    Character#SURROGATE                    
                </see>
                <see>
                    Character#TITLECASE_LETTER                    
                </see>
                <see>
                    Character#UNASSIGNED                    
                </see>
                <see>
                    Character#UPPERCASE_LETTER                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getType" type="int" line="6691">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6695">
                Returns a value indicating a character&apos;s general category.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    a value of type {@code int} representing the
                      character's general category.                    
                </return>
                <see>
                    Character#COMBINING_SPACING_MARK COMBINING_SPACING_MARK                    
                </see>
                <see>
                    Character#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION                    
                </see>
                <see>
                    Character#CONTROL CONTROL                    
                </see>
                <see>
                    Character#CURRENCY_SYMBOL CURRENCY_SYMBOL                    
                </see>
                <see>
                    Character#DASH_PUNCTUATION DASH_PUNCTUATION                    
                </see>
                <see>
                    Character#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER                    
                </see>
                <see>
                    Character#ENCLOSING_MARK ENCLOSING_MARK                    
                </see>
                <see>
                    Character#END_PUNCTUATION END_PUNCTUATION                    
                </see>
                <see>
                    Character#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION                    
                </see>
                <see>
                    Character#FORMAT FORMAT                    
                </see>
                <see>
                    Character#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION                    
                </see>
                <see>
                    Character#LETTER_NUMBER LETTER_NUMBER                    
                </see>
                <see>
                    Character#LINE_SEPARATOR LINE_SEPARATOR                    
                </see>
                <see>
                    Character#LOWERCASE_LETTER LOWERCASE_LETTER                    
                </see>
                <see>
                    Character#MATH_SYMBOL MATH_SYMBOL                    
                </see>
                <see>
                    Character#MODIFIER_LETTER MODIFIER_LETTER                    
                </see>
                <see>
                    Character#MODIFIER_SYMBOL MODIFIER_SYMBOL                    
                </see>
                <see>
                    Character#NON_SPACING_MARK NON_SPACING_MARK                    
                </see>
                <see>
                    Character#OTHER_LETTER OTHER_LETTER                    
                </see>
                <see>
                    Character#OTHER_NUMBER OTHER_NUMBER                    
                </see>
                <see>
                    Character#OTHER_PUNCTUATION OTHER_PUNCTUATION                    
                </see>
                <see>
                    Character#OTHER_SYMBOL OTHER_SYMBOL                    
                </see>
                <see>
                    Character#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR                    
                </see>
                <see>
                    Character#PRIVATE_USE PRIVATE_USE                    
                </see>
                <see>
                    Character#SPACE_SEPARATOR SPACE_SEPARATOR                    
                </see>
                <see>
                    Character#START_PUNCTUATION START_PUNCTUATION                    
                </see>
                <see>
                    Character#SURROGATE SURROGATE                    
                </see>
                <see>
                    Character#TITLECASE_LETTER TITLECASE_LETTER                    
                </see>
                <see>
                    Character#UNASSIGNED UNASSIGNED                    
                </see>
                <see>
                    Character#UPPERCASE_LETTER UPPERCASE_LETTER                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getType" type="int" line="6733">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6737">
                Determines the character representation for a specific digit in
                  the specified radix. If the value of {@code radix} is not a
                  valid radix, or the value of {@code digit} is not a valid
                  digit in the specified radix, the null character
                  ({@code &apos;\u005Cu0000&apos;}) is returned.
                  &lt;p&gt;
                  The {@code radix} argument is valid if it is greater than or
                  equal to {@code MIN_RADIX} and less than or equal to{@code MAX_RADIX}. The {@code digit} argument is valid if{@code 0 &lt;= digit &lt; radix}.
                  &lt;p&gt;
                  If the digit is less than 10, then{@code &apos;0&apos; + digit} is returned. Otherwise, the value{@code &apos;a&apos; + digit - 10} is returned.                
                <param>
                    digit   the number to convert to a character.                    
                </param>
                <param>
                    radix   the radix.                    
                </param>
                <return>
                    the {@code char} representation of the specified digit
                      in the specified radix.                    
                </return>
                <see>
                    Character#MIN_RADIX                    
                </see>
                <see>
                    Character#MAX_RADIX                    
                </see>
                <see>
                    Character#digit(char,int)                    
                </see>
            </javadoc>
            <method name="forDigit" type="char" line="6761">
                <params>
                    <param name="digit" type="int"/>
                    <param name="radix" type="int"/>
                </params>
                <scope line="6762"/>
                <scope line="6765"/>
                <scope line="6768"/>
            </method>
            <javadoc line="6774">
                Returns the Unicode directionality property for the given
                  character.  Character directionality is used to calculate the
                  visual ordering of text. The directionality value of undefined{@code char} values is {@code DIRECTIONALITY_UNDEFINED}.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #getDirectionality(int)} method.                
                <param>
                    ch {@code char} for which the directionality property
                      is requested.                    
                </param>
                <return>
                    the directionality property of the {@code char} value.                    
                </return>
                <see>
                    Character#DIRECTIONALITY_UNDEFINED                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_ARABIC_NUMBER                    
                </see>
                <see>
                    Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_NONSPACING_MARK                    
                </see>
                <see>
                    Character#DIRECTIONALITY_BOUNDARY_NEUTRAL                    
                </see>
                <see>
                    Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_SEGMENT_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_WHITESPACE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_OTHER_NEUTRALS                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDirectionality" type="byte" line="6811">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6815">
                Returns the Unicode directionality property for the given
                  character (Unicode code point).  Character directionality is
                  used to calculate the visual ordering of text. The
                  directionality value of undefined character is {@link #DIRECTIONALITY_UNDEFINED}.                
                <param>
                    codePoint the character (Unicode code point) for which
                      the directionality property is requested.                    
                </param>
                <return>
                    the directionality property of the character.                    
                </return>
                <see>
                    Character#DIRECTIONALITY_UNDEFINED DIRECTIONALITY_UNDEFINED                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT DIRECTIONALITY_LEFT_TO_RIGHT                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT DIRECTIONALITY_RIGHT_TO_LEFT                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER DIRECTIONALITY_EUROPEAN_NUMBER                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_ARABIC_NUMBER DIRECTIONALITY_ARABIC_NUMBER                    
                </see>
                <see>
                    Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR DIRECTIONALITY_COMMON_NUMBER_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_NONSPACING_MARK DIRECTIONALITY_NONSPACING_MARK                    
                </see>
                <see>
                    Character#DIRECTIONALITY_BOUNDARY_NEUTRAL DIRECTIONALITY_BOUNDARY_NEUTRAL                    
                </see>
                <see>
                    Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR DIRECTIONALITY_PARAGRAPH_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_SEGMENT_SEPARATOR DIRECTIONALITY_SEGMENT_SEPARATOR                    
                </see>
                <see>
                    Character#DIRECTIONALITY_WHITESPACE DIRECTIONALITY_WHITESPACE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_OTHER_NEUTRALS DIRECTIONALITY_OTHER_NEUTRALS                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING                    
                </see>
                <see>
                    Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING                    
                </see>
                <see>
                    Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE                    
                </see>
                <see>
                    Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT DIRECTIONALITY_POP_DIRECTIONAL_FORMAT                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDirectionality" type="byte" line="6848">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6852">
                Determines whether the character is mirrored according to the
                  Unicode specification.  Mirrored characters should have their
                  glyphs horizontally mirrored when displayed in text that is
                  right-to-left.  For example, {@code &apos;\u005Cu0028&apos;} LEFT
                  PARENTHESIS is semantically defined to be an &lt;i&gt;opening
                  parenthesis&lt;/i&gt;.  This will appear as a &quot;(&quot; in text that is
                  left-to-right but as a &quot;)&quot; in text that is right-to-left.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
                  all Unicode characters, including supplementary characters, use
                  the {@link #isMirrored(int)} method.                
                <param>
                    ch {@code char} for which the mirrored property is requested                    
                </param>
                <return>
                    {@code true} if the char is mirrored, {@code false}if the {@code char} is not mirrored or is not defined.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMirrored" type="boolean" line="6871">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6875">
                Determines whether the specified character (Unicode code point)
                  is mirrored according to the Unicode specification.  Mirrored
                  characters should have their glyphs horizontally mirrored when
                  displayed in text that is right-to-left.  For example,{@code &apos;\u005Cu0028&apos;} LEFT PARENTHESIS is semantically
                  defined to be an &lt;i&gt;opening parenthesis&lt;/i&gt;.  This will appear
                  as a &quot;(&quot; in text that is left-to-right but as a &quot;)&quot; in text
                  that is right-to-left.                
                <param>
                    codePoint the character (Unicode code point) to be tested.                    
                </param>
                <return>
                    {@code true} if the character is mirrored, {@code false}if the character is not mirrored or is not defined.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isMirrored" type="boolean" line="6890">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6894">
                Compares two {@code Character} objects numerically.                
                <param>
                    anotherCharacter   the {@code Character} to be compared.                    
                </param>
                <return>
                    the value {@code 0} if the argument {@code Character}is equal to this {@code Character}; a value less than{@code 0} if this {@code Character} is numerically less
                      than the {@code Character} argument; and a value greater than{@code 0} if this {@code Character} is numerically greater
                      than the {@code Character} argument (unsigned comparison).
                      Note that this is strictly a numerical comparison; it is not
                      locale-dependent.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="6909">
                <params>
                    <param name="anotherCharacter" type="Character"/>
                </params>
            </method>
            <javadoc line="6913">
                Compares two {@code char} values numerically.
                  The value returned is identical to what would be returned by:
                  &lt;pre&gt;
                  Character.valueOf(x).compareTo(Character.valueOf(y))
                  &lt;/pre&gt;                
                <param>
                    x the first {@code char} to compare                    
                </param>
                <param>
                    y the second {@code char} to compare                    
                </param>
                <return>
                    the value {@code 0} if {@code x == y};
                      a value less than {@code 0} if {@code x < y}; and
                      a value greater than {@code 0} if {@code x > y}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="6927">
                <params>
                    <param name="x" type="char"/>
                    <param name="y" type="char"/>
                </params>
            </method>
            <javadoc line="6931">
                Converts the character (Unicode code point) argument to uppercase using
                  information from the UnicodeData file.
                  &lt;p&gt;                
                <param>
                    codePoint   the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    either the uppercase equivalent of the character, if
                      any, or an error flag ({@code Character.ERROR})
                      that indicates that a 1:M {@code char} mapping exists.                    
                </return>
                <see>
                    Character#isLowerCase(char)                    
                </see>
                <see>
                    Character#isUpperCase(char)                    
                </see>
                <see>
                    Character#toLowerCase(char)                    
                </see>
                <see>
                    Character#toTitleCase(char)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="toUpperCaseEx" type="int" line="6946">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
            </method>
            <javadoc line="6951">
                Converts the character (Unicode code point) argument to uppercase using case
                  mapping information from the SpecialCasing file in the Unicode
                  specification. If a character has no explicit uppercase
                  mapping, then the {@code char} itself is returned in the{@code char[]}.                
                <param>
                    codePoint   the character (Unicode code point) to be converted.                    
                </param>
                <return>
                    a {@code char[]} with the uppercased character.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="toUpperCaseCharArray" type="char[]" line="6962">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="6963">
                    As of Unicode 6.0, 1:M uppercasings only happen in the BMP.                    
                </comment>
            </method>
            <declaration name="SIZE" type="int" line="6968"/>
            <javadoc line="6968">
                The number of bits used to represent a &lt;tt&gt;char&lt;/tt&gt; value in unsigned
                  binary form, constant {@code 16}.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="6976">
                Returns the value obtained by reversing the order of the bytes in the
                  specified &lt;tt&gt;char&lt;/tt&gt; value.                
                <return>
                    the value obtained by reversing (or, equivalently, swapping)
                      the bytes in the specified <tt>char</tt> value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverseBytes" type="char" line="6984">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <javadoc line="6988">
                Returns the Unicode name of the specified character{@code codePoint}, or null if the code point is{@link #UNASSIGNED unassigned}.
                  &lt;p&gt;
                  Note: if the specified character is not assigned a name by
                  the &lt;i&gt;UnicodeData&lt;/i&gt; file (part of the Unicode Character
                  Database maintained by the Unicode Consortium), the returned
                  name is the same as the result of expression.
                  &lt;blockquote&gt;{@codeCharacter.UnicodeBlock.of(codePoint).toString().replace(&apos;_&apos;, &apos; &apos;)
                  + &quot; &quot;
                  + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);}&lt;/blockquote&gt;                
                <param>
                    codePoint the character (Unicode code point)                    
                </param>
                <return>
                    the Unicode name of the specified character, or null if
                      the code point is unassigned.                    
                </return>
                <exception>
                    IllegalArgumentException if the specified{@code codePoint} is not a valid Unicode
                      code point.                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="7016">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <comment line="7029">
                    should never come here                    
                </comment>
                <scope line="7017"/>
                <declaration name="name" type="String" line="7020"/>
                <declaration name="block" type="UnicodeBlock" line="7025"/>
            </method>
        </class>
    </source>