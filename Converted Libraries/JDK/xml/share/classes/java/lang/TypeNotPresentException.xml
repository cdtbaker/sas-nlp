<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="TypeNotPresentException" line="28">
            <extends class="RuntimeException"/>
            <javadoc line="28">
                Thrown when an application tries to access a type using a string
                  representing the type&apos;s name, but no definition for the type with
                  the specified name can be found.   This exception differs from{@link ClassNotFoundException} in that &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; is a
                  checked exception, whereas this exception is unchecked.
                  &lt;p&gt;Note that this exception may be used when undefined type variables
                  are accessed as well as when types (e.g., classes, interfaces or
                  annotation types) are loaded.
                  In particular, this exception can be thrown by the {@linkplain java.lang.reflect.AnnotatedElement API used to read annotations
                  reflectively}.                
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    java.lang.reflect.AnnotatedElement                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <declaration name="typeName" type="String" line="49"/>
            <javadoc line="51">
                Constructs a &lt;tt&gt;TypeNotPresentException&lt;/tt&gt; for the named type
                  with the specified cause.                
                <param>
                    typeName the fully qualified name of the unavailable type                    
                </param>
                <param>
                    cause the exception that was thrown when the system attempted to
                      load the named type, or &lt;tt&gt;null&lt;/tt&gt; if unavailable or inapplicable                    
                </param>
            </javadoc>
            <method name="TypeNotPresentException" type="constructor" line="59">
                <params>
                    <param name="typeName" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="64">
                Returns the fully qualified name of the unavailable type.                
                <return>
                    the fully qualified name of the unavailable type                    
                </return>
            </javadoc>
            <method name="typeName" type="String" line="69"/>
        </class>
    </source>