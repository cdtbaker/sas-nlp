<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.security"/>
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.File"/>
        <import package="java.io.FilePermission"/>
        <import package="java.awt.AWTPermission"/>
        <import package="java.util.PropertyPermission"/>
        <import package="java.lang.RuntimePermission"/>
        <import package="java.net.SocketPermission"/>
        <import package="java.net.NetPermission"/>
        <import package="java.util.Hashtable"/>
        <import package="java.net.InetAddress"/>
        <import package="java.lang.reflect.Member"/>
        <import package="java.lang.reflect"/>
        <import package="java.net.URL"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="SecurityManager" line="17">
            <javadoc line="17">
                The security manager is a class that allows
                  applications to implement a security policy. It allows an
                  application to determine, before performing a possibly unsafe or
                  sensitive operation, what the operation is and whether
                  it is being attempted in a security context that allows the
                  operation to be performed. The
                  application can allow or disallow the operation.
                  &lt;p&gt;
                  The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with
                  names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods
                  are called by various methods in the Java libraries before those
                  methods perform certain potentially sensitive operations. The
                  invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  SecurityManager security = System.getSecurityManager();
                  if (security != null) {
                  security.check&lt;i&gt;XXX&lt;/i&gt;(argument, &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  The security manager is thereby given an opportunity to prevent
                  completion of the operation by throwing an exception. A security
                  manager routine simply returns if the operation is permitted, but
                  throws a &lt;code&gt;SecurityException&lt;/code&gt; if the operation is not
                  permitted. The only exception to this convention is
                  &lt;code&gt;checkTopLevelWindow&lt;/code&gt;, which returns a
                  &lt;code&gt;boolean&lt;/code&gt; value.
                  &lt;p&gt;
                  The current security manager is set by the
                  &lt;code&gt;setSecurityManager&lt;/code&gt; method in class
                  &lt;code&gt;System&lt;/code&gt;. The current security manager is obtained
                  by the &lt;code&gt;getSecurityManager&lt;/code&gt; method.
                  &lt;p&gt;
                  The special method{@link SecurityManager#checkPermission(java.security.Permission)}determines whether an access request indicated by a specified
                  permission should be granted or denied. The
                  default implementation calls
                  &lt;pre&gt;
                  AccessController.checkPermission(perm);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  If a requested access is allowed,
                  &lt;code&gt;checkPermission&lt;/code&gt; returns quietly. If denied, a
                  &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  As of Java 2 SDK v1.2, the default implementation of each of the other
                  &lt;code&gt;check&lt;/code&gt; methods in &lt;code&gt;SecurityManager&lt;/code&gt; is to
                  call the &lt;code&gt;SecurityManager checkPermission&lt;/code&gt; method
                  to determine if the calling thread has permission to perform the requested
                  operation.
                  &lt;p&gt;
                  Note that the &lt;code&gt;checkPermission&lt;/code&gt; method with
                  just a single permission argument always performs security checks
                  within the context of the currently executing thread.
                  Sometimes a security check that should be made within a given context
                  will actually need to be done from within a
                  &lt;i&gt;different&lt;/i&gt; context (for example, from within a worker thread).
                  The {@link SecurityManager#getSecurityContext getSecurityContext} method
                  and the {@link SecurityManager#checkPermission(java.security.Permission,java.lang.Object) checkPermission}method that includes a context argument are provided
                  for this situation. The
                  &lt;code&gt;getSecurityContext&lt;/code&gt; method returns a &quot;snapshot&quot;
                  of the current calling context. (The default implementation
                  returns an AccessControlContext object.) A sample call is
                  the following:
                  &lt;pre&gt;
                  Object context = null;
                  SecurityManager sm = System.getSecurityManager();
                  if (sm != null) context = sm.getSecurityContext();
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The &lt;code&gt;checkPermission&lt;/code&gt; method
                  that takes a context object in addition to a permission
                  makes access decisions based on that context,
                  rather than on that of the current execution thread.
                  Code within a different context can thus call that method,
                  passing the permission and the
                  previously-saved context object. A sample call, using the
                  SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example,
                  is the following:
                  &lt;pre&gt;
                  if (sm != null) sm.checkPermission(permission, context);
                  &lt;/pre&gt;
                  &lt;p&gt;Permissions fall into these categories: File, Socket, Net,
                  Security, Runtime, Property, AWT, Reflect, and Serializable.
                  The classes managing these various
                  permission categories are &lt;code&gt;java.io.FilePermission&lt;/code&gt;,
                  &lt;code&gt;java.net.SocketPermission&lt;/code&gt;,
                  &lt;code&gt;java.net.NetPermission&lt;/code&gt;,
                  &lt;code&gt;java.security.SecurityPermission&lt;/code&gt;,
                  &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt;,
                  &lt;code&gt;java.util.PropertyPermission&lt;/code&gt;,
                  &lt;code&gt;java.awt.AWTPermission&lt;/code&gt;,
                  &lt;code&gt;java.lang.reflect.ReflectPermission&lt;/code&gt;, and
                  &lt;code&gt;java.io.SerializablePermission&lt;/code&gt;.
                  &lt;p&gt;All but the first two (FilePermission and SocketPermission) are
                  subclasses of &lt;code&gt;java.security.BasicPermission&lt;/code&gt;, which itself
                  is an abstract subclass of the
                  top-level class for permissions, which is
                  &lt;code&gt;java.security.Permission&lt;/code&gt;. BasicPermission defines the
                  functionality needed for all permissions that contain a name
                  that follows the hierarchical property naming convention
                  (for example, &quot;exitVM&quot;, &quot;setFactory&quot;, &quot;queuePrintJob&quot;, etc).
                  An asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &quot;a.&quot; or &quot;&quot; is valid,
                  &quot;a&quot; or &quot;ab&quot; is not valid.
                  &lt;p&gt;FilePermission and SocketPermission are subclasses of the
                  top-level class for permissions
                  (&lt;code&gt;java.security.Permission&lt;/code&gt;). Classes like these
                  that have a more complicated name syntax than that used by
                  BasicPermission subclass directly from Permission rather than from
                  BasicPermission. For example,
                  for a &lt;code&gt;java.io.FilePermission&lt;/code&gt; object, the permission name is
                  the path name of a file (or directory).
                  &lt;p&gt;Some of the permission classes have an &quot;actions&quot; list that tells
                  the actions that are permitted for the object.  For example,
                  for a &lt;code&gt;java.io.FilePermission&lt;/code&gt; object, the actions list
                  (such as &quot;read, write&quot;) specifies which actions are granted for the
                  specified file (or for files in the specified directory).
                  &lt;p&gt;Other permission classes are for &quot;named&quot; permissions -
                  ones that contain a name but no actions list; you either have the
                  named permission or you don&apos;t.
                  &lt;p&gt;Note: There is also a &lt;code&gt;java.security.AllPermission&lt;/code&gt;
                  permission that implies all permissions. It exists to simplify the work
                  of system administrators who might need to perform multiple
                  tasks that require all (or numerous) permissions.
                  &lt;p&gt;
                  See &lt;a href =&quot;../../../technotes/guides/security/permissions.html&quot;&gt;
                  Permissions in the JDK&lt;/a&gt; for permission-related information.
                  This document includes, for example, a table listing the various SecurityManager
                  &lt;code&gt;check&lt;/code&gt; methods and the permission(s) the default
                  implementation of each such method requires.
                  It also contains a table of all the version 1.2 methods
                  that require permissions, and for each such method tells
                  which permission it requires.
                  &lt;p&gt;
                  For more information about &lt;code&gt;SecurityManager&lt;/code&gt; changes made in
                  the JDK and advice regarding porting of 1.1-style security managers,
                  see the &lt;a href=&quot;../../../technotes/guides/security/index.html&quot;&gt;security documentation&lt;/a&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
                <see>
                    java.lang.ClassLoader                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)checkTopLevelWindow                    
                </see>
                <see>
                    java.lang.System#getSecurityManager() getSecurityManager                    
                </see>
                <see>
                    java.lang.System#setSecurityManager(java.lang.SecurityManager)setSecurityManager                    
                </see>
                <see>
                    java.security.AccessController AccessController                    
                </see>
                <see>
                    java.security.AccessControlContext AccessControlContext                    
                </see>
                <see>
                    java.security.AccessControlException AccessControlException                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.io.FilePermission                    
                </see>
                <see>
                    java.net.SocketPermission                    
                </see>
                <see>
                    java.util.PropertyPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <see>
                    java.awt.AWTPermission                    
                </see>
                <see>
                    java.security.Policy Policy                    
                </see>
                <see>
                    java.security.SecurityPermission SecurityPermission                    
                </see>
                <see>
                    java.security.ProtectionDomain                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="inCheck" type="boolean" line="179"/>
            <javadoc line="179">
                This field is &lt;code&gt;true&lt;/code&gt; if there is a security check in
                  progress; &lt;code&gt;false&lt;/code&gt; otherwise.                
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
            </javadoc>
            <declaration name="initialized" type="boolean" line="187"/>
            <javadoc line="188">
                returns true if the current context has been granted AllPermission                
            </javadoc>
            <method name="hasAllPermission" type="boolean" line="191">
                <scope line="192"/>
                <scope line="196"/>
            </method>
            <javadoc line="200">
                Tests if there is a security check in progress.                
                <return>
                    the value of the &lt;code&gt;inCheck&lt;/code&gt; field. This field
                      should contain &lt;code&gt;true&lt;/code&gt; if a security check is
                      in progress,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.lang.SecurityManager#inCheck                    
                </see>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
            </javadoc>
            <method name="getInCheck" type="boolean" line="211"/>
            <javadoc line="214">
                Constructs a new &lt;code&gt;SecurityManager&lt;/code&gt;.
                  &lt;p&gt; If there is a security manager already installed, this method first
                  calls the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  with the &lt;code&gt;RuntimePermission(&quot;createSecurityManager&quot;)&lt;/code&gt;
                  permission to ensure the calling thread has permission to create a new
                  security manager.
                  This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.                
                <exception>
                    java.lang.SecurityException if a security manager already
                      exists and its &lt;code&gt;checkPermission&lt;/code&gt; method
                      doesn&apos;t allow creation of a new security manager.                    
                </exception>
                <see>
                    java.lang.System#getSecurityManager()                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
            </javadoc>
            <method name="SecurityManager" type="constructor" line="229">
                <scope line="230">
                    <declaration name="sm" type="SecurityManager" line="231"/>
                    <scope line="232"/>
                </scope>
            </method>
            <method name="getClassContext" type="Class[]" line="238"/>
            <javadoc line="238">
                Returns the current execution stack as an array of classes.
                  &lt;p&gt;
                  The length of the array is the number of methods on the execution
                  stack. The element at index &lt;code&gt;0&lt;/code&gt; is the class of the
                  currently executing method, the element at index &lt;code&gt;1&lt;/code&gt; is
                  the class of that method&apos;s caller, and so on.                
                <return>
                    the execution stack.                    
                </return>
            </javadoc>
            <javadoc line="248">
                Returns the class loader of the most recently executing method from
                  a class defined using a non-system class loader. A non-system
                  class loader is defined as being a class loader that is not equal to
                  the system class loader (as returned
                  by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
                  &lt;p&gt;
                  This method will return
                  &lt;code&gt;null&lt;/code&gt; in the following three cases:&lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;All methods on the execution stack are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt;All methods on the execution stack up to the first
                  &quot;privileged&quot; caller
                  (see {@link java.security.AccessController#doPrivileged})
                  are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
                  &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
                  result in a SecurityException.
                  &lt;/ol&gt;                
                <return>
                    the class loader of the most recent occurrence on the stack
                      of a method from a class defined using a non-system class
                      loader.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
                <see>
                    java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="currentClassLoader" type="ClassLoader" line="278">
                <declaration name="cl" type="ClassLoader" line="279"/>
            </method>
            <method name="currentClassLoader0" type="ClassLoader" line="283"/>
            <javadoc line="284">
                Returns the class of the most recently executing method from
                  a class defined using a non-system class loader. A non-system
                  class loader is defined as being a class loader that is not equal to
                  the system class loader (as returned
                  by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
                  &lt;p&gt;
                  This method will return
                  &lt;code&gt;null&lt;/code&gt; in the following three cases:&lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;All methods on the execution stack are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt;All methods on the execution stack up to the first
                  &quot;privileged&quot; caller
                  (see {@link java.security.AccessController#doPrivileged})
                  are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
                  &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
                  result in a SecurityException.
                  &lt;/ol&gt;                
                <return>
                    the class  of the most recent occurrence on the stack
                      of a method from a class defined using a non-system class
                      loader.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
                <see>
                    java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="currentLoadedClass" type="Class&lt;?&gt;" line="314">
                <declaration name="c" type="Class" line="315"/>
            </method>
            <method name="classDepth" type="int" line="319"/>
            <javadoc line="319">
                Returns the stack depth of the specified class.                
                <param>
                    name   the fully qualified name of the class to search for.                    
                </param>
                <return>
                    the depth on the stack frame of the first occurrence of a
                      method from a class with the specified name;
                      &lt;code&gt;-1&lt;/code&gt; if such a frame cannot be found.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
            </javadoc>
            <javadoc line="330">
                Returns the stack depth of the most recently executing method
                  from a class defined using a non-system class loader.  A non-system
                  class loader is defined as being a class loader that is not equal to
                  the system class loader (as returned
                  by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
                  &lt;p&gt;
                  This method will return
                  -1 in the following three cases:&lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;All methods on the execution stack are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt;All methods on the execution stack up to the first
                  &quot;privileged&quot; caller
                  (see {@link java.security.AccessController#doPrivileged})
                  are from classes
                  defined using the system class loader or one of its ancestors.
                  &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
                  &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
                  result in a SecurityException.
                  &lt;/ol&gt;                
                <return>
                    the depth on the stack frame of the most recent occurrence of
                      a method from a class defined using a non-system class loader.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
                <see>
                    java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="classLoaderDepth" type="int" line="359">
                <declaration name="depth" type="int" line="360"/>
                <scope line="361"/>
            </method>
            <method name="classLoaderDepth0" type="int" line="367"/>
            <javadoc line="368">
                Tests if a method from a class with the specified
                  name is on the execution stack.                
                <param>
                    name   the fully qualified name of the class.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if a method from a class with the specified
                      name is on the execution stack; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
            </javadoc>
            <method name="inClass" type="boolean" line="378">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="381">
                Basically, tests if a method from a class defined using a
                  class loader is on the execution stack.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if a call to &lt;code&gt;currentClassLoader&lt;/code&gt;
                      has a non-null return value.                    
                </return>
                <deprecated>
                    This type of security checking is not recommended.
                      It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
                      call be used instead.                    
                </deprecated>
                <see>
                    #currentClassLoader() currentClassLoader                    
                </see>
            </javadoc>
            <method name="inClassLoader" type="boolean" line="391"/>
            <javadoc line="394">
                Creates an object that encapsulates the current execution
                  environment. The result of this method is used, for example, by the
                  three-argument &lt;code&gt;checkConnect&lt;/code&gt; method and by the
                  two-argument &lt;code&gt;checkRead&lt;/code&gt; method.
                  These methods are needed because a trusted method may be called
                  on to read a file or open a socket on behalf of another method.
                  The trusted method needs to determine if the other (possibly
                  untrusted) method would be allowed to perform the operation on its
                  own.
                  &lt;p&gt; The default implementation of this method is to return
                  an &lt;code&gt;AccessControlContext&lt;/code&gt; object.                
                <return>
                    an implementation-dependent object that encapsulates
                      sufficient information about the current execution environment
                      to perform some security checks later.                    
                </return>
                <see>
                    java.lang.SecurityManager#checkConnect(java.lang.String,int,java.lang.Object) checkConnect                    
                </see>
                <see>
                    java.lang.SecurityManager#checkRead(java.lang.String,java.lang.Object) checkRead                    
                </see>
                <see>
                    java.security.AccessControlContext AccessControlContext                    
                </see>
            </javadoc>
            <method name="getSecurityContext" type="Object" line="413"/>
            <javadoc line="416">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the requested
                  access, specified by the given permission, is not permitted based
                  on the security policy currently in effect.
                  &lt;p&gt;
                  This method calls &lt;code&gt;AccessController.checkPermission&lt;/code&gt;
                  with the given permission.                
                <param>
                    perm   the requested permission.                    
                </param>
                <exception>
                    SecurityException if access is not permitted based on
                      the current security policy.                    
                </exception>
                <exception>
                    NullPointerException if the permission argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="checkPermission" type="void" line="430">
                <params>
                    <param name="perm" type="Permission"/>
                </params>
            </method>
            <javadoc line="433">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  specified security context is denied access to the resource
                  specified by the given permission.
                  The context must be a security
                  context returned by a previous call to
                  &lt;code&gt;getSecurityContext&lt;/code&gt; and the access control
                  decision is based upon the configured security policy for
                  that security context.
                  &lt;p&gt;
                  If &lt;code&gt;context&lt;/code&gt; is an instance of
                  &lt;code&gt;AccessControlContext&lt;/code&gt; then the
                  &lt;code&gt;AccessControlContext.checkPermission&lt;/code&gt; method is
                  invoked with the specified permission.
                  &lt;p&gt;
                  If &lt;code&gt;context&lt;/code&gt; is not an instance of
                  &lt;code&gt;AccessControlContext&lt;/code&gt; then a
                  &lt;code&gt;SecurityException&lt;/code&gt; is thrown.                
                <param>
                    perm      the specified permission                    
                </param>
                <param>
                    context   a system-dependent security context.                    
                </param>
                <exception>
                    SecurityException  if the specified security context
                      is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
                      (e.g., is &lt;code&gt;null&lt;/code&gt;), or is denied access to the
                      resource specified by the given permission.                    
                </exception>
                <exception>
                    NullPointerException if the permission argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.SecurityManager#getSecurityContext()                    
                </see>
                <see>
                    java.security.AccessControlContext#checkPermission(java.security.Permission)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="checkPermission" type="void" line="463">
                <params>
                    <param name="perm" type="Permission"/>
                    <param name="context" type="Object"/>
                </params>
                <scope line="464"/>
                <scope line="467"/>
            </method>
            <javadoc line="471">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to create a new class loader.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;createClassLoader&quot;)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkCreateClassLoader&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <exception>
                    SecurityException if the calling thread does not
                      have permission
                      to create a new class loader.                    
                </exception>
                <see>
                    java.lang.ClassLoader#ClassLoader()                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkCreateClassLoader" type="void" line="489"/>
            <declaration name="rootGroup" type="ThreadGroup" line="492"/>
            <javadoc line="492">
                reference to the root thread group, used for the checkAccess
                  methods.                
            </javadoc>
            <method name="getRootGroup" type="ThreadGroup" line="497">
                <declaration name="root" type="ThreadGroup" line="498"/>
                <scope line="499"/>
            </method>
            <javadoc line="504">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to modify the thread argument.
                  &lt;p&gt;
                  This method is invoked for the current security manager by the
                  &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;suspend&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;,
                  &lt;code&gt;setPriority&lt;/code&gt;, &lt;code&gt;setName&lt;/code&gt;, and
                  &lt;code&gt;setDaemon&lt;/code&gt; methods of class &lt;code&gt;Thread&lt;/code&gt;.
                  &lt;p&gt;
                  If the thread argument is a system thread (belongs to
                  the thread group with a &lt;code&gt;null&lt;/code&gt; parent) then
                  this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission.
                  If the thread argument is &lt;i&gt;not&lt;/i&gt; a system thread,
                  this method just returns silently.
                  &lt;p&gt;
                  Applications that want a stricter policy should override this
                  method. If this method is overridden, the method that overrides
                  it should additionally check to see if the calling thread has the
                  &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission, and
                  if so, return silently. This is to ensure that code granted
                  that permission (such as the JDK itself) is allowed to
                  manipulate any thread.
                  &lt;p&gt;
                  If this method is overridden, then
                  &lt;code&gt;super.checkAccess&lt;/code&gt; should
                  be called by the first statement in the overridden method, or the
                  equivalent security check should be placed in the overridden method.                
                <param>
                    t   the thread to be checked.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to modify the thread.                    
                </exception>
                <exception>
                    NullPointerException if the thread argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.Thread#resume() resume                    
                </see>
                <see>
                    java.lang.Thread#setDaemon(boolean) setDaemon                    
                </see>
                <see>
                    java.lang.Thread#setName(java.lang.String) setName                    
                </see>
                <see>
                    java.lang.Thread#setPriority(int) setPriority                    
                </see>
                <see>
                    java.lang.Thread#stop() stop                    
                </see>
                <see>
                    java.lang.Thread#suspend() suspend                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkAccess" type="void" line="545">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <scope line="546"/>
                <scope line="549"/>
                <scope line="552"/>
            </method>
            <javadoc line="555">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to modify the thread group argument.
                  &lt;p&gt;
                  This method is invoked for the current security manager when a
                  new child thread or child thread group is created, and by the
                  &lt;code&gt;setDaemon&lt;/code&gt;, &lt;code&gt;setMaxPriority&lt;/code&gt;,
                  &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;suspend&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;, and
                  &lt;code&gt;destroy&lt;/code&gt; methods of class &lt;code&gt;ThreadGroup&lt;/code&gt;.
                  &lt;p&gt;
                  If the thread group argument is the system thread group (
                  has a &lt;code&gt;null&lt;/code&gt; parent) then
                  this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission.
                  If the thread group argument is &lt;i&gt;not&lt;/i&gt; the system thread group,
                  this method just returns silently.
                  &lt;p&gt;
                  Applications that want a stricter policy should override this
                  method. If this method is overridden, the method that overrides
                  it should additionally check to see if the calling thread has the
                  &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission, and
                  if so, return silently. This is to ensure that code granted
                  that permission (such as the JDK itself) is allowed to
                  manipulate any thread.
                  &lt;p&gt;
                  If this method is overridden, then
                  &lt;code&gt;super.checkAccess&lt;/code&gt; should
                  be called by the first statement in the overridden method, or the
                  equivalent security check should be placed in the overridden method.                
                <param>
                    g   the thread group to be checked.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to modify the thread group.                    
                </exception>
                <exception>
                    NullPointerException if the thread group argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.ThreadGroup#destroy() destroy                    
                </see>
                <see>
                    java.lang.ThreadGroup#resume() resume                    
                </see>
                <see>
                    java.lang.ThreadGroup#setDaemon(boolean) setDaemon                    
                </see>
                <see>
                    java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority                    
                </see>
                <see>
                    java.lang.ThreadGroup#stop() stop                    
                </see>
                <see>
                    java.lang.ThreadGroup#suspend() suspend                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkAccess" type="void" line="597">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
                <scope line="598"/>
                <scope line="601"/>
                <scope line="604"/>
            </method>
            <javadoc line="607">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to cause the Java Virtual Machine to
                  halt with the specified status code.
                  &lt;p&gt;
                  This method is invoked for the current security manager by the
                  &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt;. A status
                  of &lt;code&gt;0&lt;/code&gt; indicates success; other values indicate various
                  errors.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;exitVM.&quot;+status)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkExit&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    status   the exit status.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have
                      permission to halt the Java Virtual Machine with
                      the specified status.                    
                </exception>
                <see>
                    java.lang.Runtime#exit(int) exit                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkExit" type="void" line="631">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <javadoc line="634">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to create a subprocess.
                  &lt;p&gt;
                  This method is invoked for the current security manager by the
                  &lt;code&gt;exec&lt;/code&gt; methods of class &lt;code&gt;Runtime&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;FilePermission(cmd,&quot;execute&quot;)&lt;/code&gt; permission
                  if cmd is an absolute path, otherwise it calls
                  &lt;code&gt;checkPermission&lt;/code&gt; with
                  &lt;code&gt;FilePermission(&quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,&quot;execute&quot;)&lt;/code&gt;.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkExec&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    cmd   the specified system command.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have
                      permission to create a subprocess.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;cmd&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.Runtime#exec(java.lang.String)                    
                </see>
                <see>
                    java.lang.Runtime#exec(java.lang.String,java.lang.String[])                    
                </see>
                <see>
                    java.lang.Runtime#exec(java.lang.String[])                    
                </see>
                <see>
                    java.lang.Runtime#exec(java.lang.String[],java.lang.String[])                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkExec" type="void" line="662">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="f" type="File" line="663"/>
                <scope line="664"/>
                <scope line="667"/>
            </method>
            <javadoc line="671">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to dynamic link the library code
                  specified by the string argument file. The argument is either a
                  simple library name or a complete filename.
                  &lt;p&gt;
                  This method is invoked for the current security manager by
                  methods &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;loadLibrary&lt;/code&gt; of class
                  &lt;code&gt;Runtime&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;loadLibrary.&quot;+lib)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkLink&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    lib   the name of the library.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have
                      permission to dynamically link the library.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;lib&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.Runtime#load(java.lang.String)                    
                </see>
                <see>
                    java.lang.Runtime#loadLibrary(java.lang.String)                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkLink" type="void" line="697">
                <params>
                    <param name="lib" type="String"/>
                </params>
                <scope line="698"/>
            </method>
            <javadoc line="703">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to read from the specified file
                  descriptor.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;readFileDescriptor&quot;)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkRead&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    fd   the system-dependent file descriptor.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the specified file descriptor.                    
                </exception>
                <exception>
                    NullPointerException if the file descriptor argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.io.FileDescriptor                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkRead" type="void" line="724">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                </params>
                <scope line="725"/>
            </method>
            <javadoc line="730">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to read the file specified by the
                  string argument.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;FilePermission(file,&quot;read&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkRead&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    file   the system-dependent file name.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have
                      permission to access the specified file.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkRead" type="void" line="749">
                <params>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="752">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  specified security context is not allowed to read the file
                  specified by the string argument. The context must be a security
                  context returned by a previous call to
                  &lt;code&gt;getSecurityContext&lt;/code&gt;.
                  &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is an instance of
                  &lt;code&gt;AccessControlContext&lt;/code&gt; then the
                  &lt;code&gt;AccessControlContext.checkPermission&lt;/code&gt; method will
                  be invoked with the &lt;code&gt;FilePermission(file,&quot;read&quot;)&lt;/code&gt; permission.
                  &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is not an instance of
                  &lt;code&gt;AccessControlContext&lt;/code&gt; then a
                  &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkRead&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    file      the system-dependent filename.                    
                </param>
                <param>
                    context   a system-dependent security context.                    
                </param>
                <exception>
                    SecurityException  if the specified security context
                      is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
                      (e.g., is &lt;code&gt;null&lt;/code&gt;), or does not have permission
                      to read the specified file.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.SecurityManager#getSecurityContext()                    
                </see>
                <see>
                    java.security.AccessControlContext#checkPermission(java.security.Permission)                    
                </see>
            </javadoc>
            <method name="checkRead" type="void" line="781">
                <params>
                    <param name="file" type="String"/>
                    <param name="context" type="Object"/>
                </params>
            </method>
            <javadoc line="784">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to write to the specified file
                  descriptor.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;writeFileDescriptor&quot;)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkWrite&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    fd   the system-dependent file descriptor.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the specified file descriptor.                    
                </exception>
                <exception>
                    NullPointerException if the file descriptor argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.io.FileDescriptor                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkWrite" type="void" line="805">
                <params>
                    <param name="fd" type="FileDescriptor"/>
                </params>
                <scope line="806"/>
            </method>
            <javadoc line="811">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to write to the file specified by
                  the string argument.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;FilePermission(file,&quot;write&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkWrite&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    file   the system-dependent filename.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not
                      have permission to access the specified file.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkWrite" type="void" line="830">
                <params>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="833">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to delete the specified file.
                  &lt;p&gt;
                  This method is invoked for the current security manager by the
                  &lt;code&gt;delete&lt;/code&gt; method of class &lt;code&gt;File&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;FilePermission(file,&quot;delete&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkDelete&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    file   the system-dependent filename.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not
                      have permission to delete the file.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.io.File#delete()                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkDelete" type="void" line="855">
                <params>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="858">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to open a socket connection to the
                  specified host and port number.
                  &lt;p&gt;
                  A port number of &lt;code&gt;-1&lt;/code&gt; indicates that the calling
                  method is attempting to determine the IP address of the specified
                  host name.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code&gt; permission if
                  the port is not equal to -1. If the port is equal to -1, then
                  it calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;SocketPermission(host,&quot;resolve&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkConnect&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    host   the host name port to connect to.                    
                </param>
                <param>
                    port   the protocol port to connect to.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to open a socket connection to the specified
                      &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkConnect" type="void" line="886">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="887"/>
                <scope line="890"/>
                <scope line="893"/>
                <scope line="896"/>
            </method>
            <javadoc line="900">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  specified security context is not allowed to open a socket
                  connection to the specified host and port number.
                  &lt;p&gt;
                  A port number of &lt;code&gt;-1&lt;/code&gt; indicates that the calling
                  method is attempting to determine the IP address of the specified
                  host name.
                  &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is not an instance of
                  &lt;code&gt;AccessControlContext&lt;/code&gt; then a
                  &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  Otherwise, the port number is checked. If it is not equal
                  to -1, the &lt;code&gt;context&lt;/code&gt;&apos;s &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with a
                  &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code&gt; permission.
                  If the port is equal to -1, then
                  the &lt;code&gt;context&lt;/code&gt;&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
                  is called with a
                  &lt;code&gt;SocketPermission(host,&quot;resolve&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkConnect&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    host      the host name port to connect to.                    
                </param>
                <param>
                    port      the protocol port to connect to.                    
                </param>
                <param>
                    context   a system-dependent security context.                    
                </param>
                <exception>
                    SecurityException if the specified security context
                      is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
                      (e.g., is &lt;code&gt;null&lt;/code&gt;), or does not have permission
                      to open a socket connection to the specified
                      &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.SecurityManager#getSecurityContext()                    
                </see>
                <see>
                    java.security.AccessControlContext#checkPermission(java.security.Permission)                    
                </see>
            </javadoc>
            <method name="checkConnect" type="void" line="938">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="context" type="Object"/>
                </params>
                <scope line="939"/>
                <scope line="942"/>
            </method>
            <javadoc line="948">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to wait for a connection request on
                  the specified local port number.
                  &lt;p&gt;
                  If port is not 0, this method calls
                  &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;SocketPermission(&quot;localhost:&quot;+port,&quot;listen&quot;)&lt;/code&gt;.
                  If port is zero, this method calls &lt;code&gt;checkPermission&lt;/code&gt;
                  with &lt;code&gt;SocketPermission(&quot;localhost:1024-&quot;,&quot;listen&quot;).&lt;/code&gt;
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkListen&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    port   the local port.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to listen on the specified port.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkListen" type="void" line="968">
                <params>
                    <param name="port" type="int"/>
                </params>
                <scope line="969"/>
                <scope line="972"/>
            </method>
            <javadoc line="976">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not permitted to accept a socket connection from
                  the specified host and port number.
                  &lt;p&gt;
                  This method is invoked for the current security manager by the
                  &lt;code&gt;accept&lt;/code&gt; method of class &lt;code&gt;ServerSocket&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;accept&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkAccept&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    host   the host name of the socket connection.                    
                </param>
                <param>
                    port   the port number of the socket connection.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to accept the connection.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.net.ServerSocket#accept()                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkAccept" type="void" line="1000">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="1001"/>
                <scope line="1004"/>
            </method>
            <javadoc line="1009">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to use
                  (join/leave/send/receive) IP multicast.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;java.net.SocketPermission(maddr.getHostAddress(),
                  &quot;accept,connect&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkMulticast&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    maddr  Internet group address to be used.                    
                </param>
                <exception>
                    SecurityException  if the calling thread is not allowed to
                      use (join/leave/send/receive) IP multicast.                    
                </exception>
                <exception>
                    NullPointerException if the address argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkMulticast" type="void" line="1030">
                <params>
                    <param name="maddr" type="InetAddress"/>
                </params>
                <declaration name="host" type="String" line="1031"/>
                <scope line="1032"/>
            </method>
            <javadoc line="1037">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to use
                  (join/leave/send/receive) IP multicast.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;java.net.SocketPermission(maddr.getHostAddress(),
                  &quot;accept,connect&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkMulticast&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    maddr  Internet group address to be used.                    
                </param>
                <param>
                    ttl        value in use, if it is multicast send.
                      Note: this particular implementation does not use the ttl
                      parameter.                    
                </param>
                <exception>
                    SecurityException  if the calling thread is not allowed to
                      use (join/leave/send/receive) IP multicast.                    
                </exception>
                <exception>
                    NullPointerException if the address argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    Use #checkPermission(java.security.Permission) instead                    
                </deprecated>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkMulticast" type="void" line="1062">
                <params>
                    <param name="maddr" type="InetAddress"/>
                    <param name="ttl" type="byte"/>
                </params>
                <declaration name="host" type="String" line="1063"/>
                <scope line="1064"/>
            </method>
            <javadoc line="1069">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access or modify the system
                  properties.
                  &lt;p&gt;
                  This method is used by the &lt;code&gt;getProperties&lt;/code&gt; and
                  &lt;code&gt;setProperties&lt;/code&gt; methods of class &lt;code&gt;System&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;PropertyPermission(&quot;&quot;, &quot;read,write&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkPropertiesAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.
                  &lt;p&gt;                
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access or modify the system properties.                    
                </exception>
                <see>
                    java.lang.System#getProperties()                    
                </see>
                <see>
                    java.lang.System#setProperties(java.util.Properties)                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkPropertiesAccess" type="void" line="1091"/>
            <javadoc line="1094">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access the system property with
                  the specified &lt;code&gt;key&lt;/code&gt; name.
                  &lt;p&gt;
                  This method is used by the &lt;code&gt;getProperty&lt;/code&gt; method of
                  class &lt;code&gt;System&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;PropertyPermission(key, &quot;read&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkPropertyAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    key   a system property key.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the specified system property.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;key&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.                    
                </exception>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkPropertyAccess" type="void" line="1119">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="1122">
                Returns &lt;code&gt;false&lt;/code&gt; if the calling
                  thread is not trusted to bring up the top-level window indicated
                  by the &lt;code&gt;window&lt;/code&gt; argument. In this case, the caller can
                  still decide to show the window, but the window should include
                  some sort of visual warning. If the method returns
                  &lt;code&gt;true&lt;/code&gt;, then the window can be shown without any
                  special restrictions.
                  &lt;p&gt;
                  See class &lt;code&gt;Window&lt;/code&gt; for more information on trusted and
                  untrusted windows.
                  &lt;p&gt;
                  This method calls
                  &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt; permission,
                  and returns &lt;code&gt;true&lt;/code&gt; if a SecurityException is not thrown,
                  otherwise it returns &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt;
                  at the point the overridden method would normally return
                  &lt;code&gt;false&lt;/code&gt;, and the value of
                  &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt; should
                  be returned.                
                <param>
                    window   the new window that is being created.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the calling thread is trusted to put up
                      top-level windows; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <exception>
                    NullPointerException if the &lt;code&gt;window&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.awt.Window                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkTopLevelWindow" type="boolean" line="1154">
                <params>
                    <param name="window" type="Object"/>
                </params>
                <scope line="1155"/>
                <scope line="1158"/>
                <scope line="1162"/>
            </method>
            <javadoc line="1166">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to initiate a print job request.
                  &lt;p&gt;
                  This method calls
                  &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;queuePrintJob&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkPrintJobAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.
                  &lt;p&gt;                
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to initiate a print job request.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkPrintJobAccess" type="void" line="1184"/>
            <javadoc line="1187">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access the system clipboard.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AWTPermission(&quot;accessClipboard&quot;)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkSystemClipboardAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <since>
                    JDK1.1                    
                </since>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the system clipboard.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkSystemClipboardAccess" type="void" line="1204"/>
            <javadoc line="1207">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access the AWT event queue.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AWTPermission(&quot;accessEventQueue&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkAwtEventQueueAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <since>
                    JDK1.1                    
                </since>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the AWT event queue.                    
                </exception>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkAwtEventQueueAccess" type="void" line="1223"/>
            <declaration name="packageAccessValid" type="boolean" line="1226"/>
            <declaration name="packageAccess" type="String[]" line="1227"/>
            <declaration name="packageAccessLock" type="Object" line="1228"/>
            <declaration name="packageDefinitionValid" type="boolean" line="1229"/>
            <declaration name="packageDefinition" type="String[]" line="1230"/>
            <declaration name="packageDefinitionLock" type="Object" line="1231"/>
            <method name="getPackages" type="String[]" line="1232">
                <params>
                    <param name="p" type="String"/>
                </params>
                <declaration name="packages" type="String" line="1233"/>
                <scope line="1234">
                    <declaration name="tok" type="java.util.StringTokenizer" line="1235"/>
                    <declaration name="n" type="int" line="1236"/>
                    <scope line="1237">
                        <declaration name="i" type="int" line="1239"/>
                        <scope line="1240">
                            <declaration name="s" type="String" line="1241"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1249">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access the package specified by
                  the argument.
                  &lt;p&gt;
                  This method is used by the &lt;code&gt;loadClass&lt;/code&gt; method of class
                  loaders.
                  &lt;p&gt;
                  This method first gets a list of
                  restricted packages by obtaining a comma-separated list from
                  a call to
                  &lt;code&gt;java.security.Security.getProperty(&quot;package.access&quot;)&lt;/code&gt;,
                  and checks to see if &lt;code&gt;pkg&lt;/code&gt; starts with or equals
                  any of the restricted packages. If it does, then
                  &lt;code&gt;checkPermission&lt;/code&gt; gets called with the
                  &lt;code&gt;RuntimePermission(&quot;accessClassInPackage.&quot;+pkg)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If this method is overridden, then
                  &lt;code&gt;super.checkPackageAccess&lt;/code&gt; should be called
                  as the first line in the overridden method.                
                <param>
                    pkg   the package name.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to access the specified package.                    
                </exception>
                <exception>
                    NullPointerException if the package name argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.ClassLoader#loadClass(java.lang.String,boolean)loadClass                    
                </see>
                <see>
                    java.security.Security#getProperty getProperty                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkPackageAccess" type="void" line="1279">
                <params>
                    <param name="pkg" type="String"/>
                </params>
                <scope line="1280"/>
                <declaration name="pkgs" type="String[]" line="1283"/>
                <scope line="1284">
                    <scope line="1285">
                        <anonymous_class line="1286">
                            <method name="run" type="String" line="1287"/>
                        </anonymous_class>
                        <declaration name="tmpPropertyStr" type="String" line="1286"/>
                    </scope>
                </scope>
                <scope line="1297">
                    <scope line="1298"/>
                </scope>
            </method>
            <javadoc line="1304">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to define classes in the package
                  specified by the argument.
                  &lt;p&gt;
                  This method is used by the &lt;code&gt;loadClass&lt;/code&gt; method of some
                  class loaders.
                  &lt;p&gt;
                  This method first gets a list of restricted packages by
                  obtaining a comma-separated list from a call to
                  &lt;code&gt;java.security.Security.getProperty(&quot;package.definition&quot;)&lt;/code&gt;,
                  and checks to see if &lt;code&gt;pkg&lt;/code&gt; starts with or equals
                  any of the restricted packages. If it does, then
                  &lt;code&gt;checkPermission&lt;/code&gt; gets called with the
                  &lt;code&gt;RuntimePermission(&quot;defineClassInPackage.&quot;+pkg)&lt;/code&gt;
                  permission.
                  &lt;p&gt;
                  If this method is overridden, then
                  &lt;code&gt;super.checkPackageDefinition&lt;/code&gt; should be called
                  as the first line in the overridden method.                
                <param>
                    pkg   the package name.                    
                </param>
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to define classes in the specified package.                    
                </exception>
                <see>
                    java.lang.ClassLoader#loadClass(java.lang.String,boolean)                    
                </see>
                <see>
                    java.security.Security#getProperty getProperty                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkPackageDefinition" type="void" line="1331">
                <params>
                    <param name="pkg" type="String"/>
                </params>
                <scope line="1332"/>
                <declaration name="pkgs" type="String[]" line="1335"/>
                <scope line="1336">
                    <scope line="1337">
                        <anonymous_class line="1338">
                            <method name="run" type="String" line="1339"/>
                        </anonymous_class>
                        <declaration name="tmpPropertyStr" type="String" line="1338"/>
                    </scope>
                </scope>
                <scope line="1349">
                    <scope line="1350"/>
                </scope>
            </method>
            <javadoc line="1356">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to set the socket factory used by
                  &lt;code&gt;ServerSocket&lt;/code&gt; or &lt;code&gt;Socket&lt;/code&gt;, or the stream
                  handler factory used by &lt;code&gt;URL&lt;/code&gt;.
                  &lt;p&gt;
                  This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
                  &lt;code&gt;RuntimePermission(&quot;setFactory&quot;)&lt;/code&gt; permission.
                  &lt;p&gt;
                  If you override this method, then you should make a call to
                  &lt;code&gt;super.checkSetFactory&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.
                  &lt;p&gt;                
                <exception>
                    SecurityException  if the calling thread does not have
                      permission to specify a socket factory or a stream
                      handler factory.                    
                </exception>
                <see>
                    java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory                    
                </see>
                <see>
                    java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory                    
                </see>
                <see>
                    java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory                    
                </see>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkSetFactory" type="void" line="1378"/>
            <javadoc line="1381">
                Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
                  calling thread is not allowed to access members.
                  &lt;p&gt;
                  The default policy is to allow access to PUBLIC members, as well
                  as access to classes that have the same class loader as the caller.
                  In all other cases, this method calls &lt;code&gt;checkPermission&lt;/code&gt;
                  with the &lt;code&gt;RuntimePermission(&quot;accessDeclaredMembers&quot;)
                  &lt;/code&gt; permission.
                  &lt;p&gt;
                  If this method is overridden, then a call to
                  &lt;code&gt;super.checkMemberAccess&lt;/code&gt; cannot be made,
                  as the default implementation of &lt;code&gt;checkMemberAccess&lt;/code&gt;
                  relies on the code being checked being at a stack depth of
                  4.                
                <param>
                    clazz the class that reflection is to be performed on.                    
                </param>
                <param>
                    which type of access, PUBLIC or DECLARED.                    
                </param>
                <exception>
                    SecurityException if the caller does not have
                      permission to access members.                    
                </exception>
                <exception>
                    NullPointerException if the &lt;code&gt;clazz&lt;/code&gt; argument is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <see>
                    java.lang.reflect.Member                    
                </see>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkMemberAccess" type="void" line="1406">
                <params>
                    <param name="clazz" type="Class&lt;?&gt;"/>
                    <param name="which" type="int"/>
                </params>
                <scope line="1407"/>
                <scope line="1410">
                    <declaration name="stack" type="Class" line="1411"/>
                    <scope line="1412"/>
                </scope>
            </method>
            <javadoc line="1417">
                Determines whether the permission with the specified permission target
                  name should be granted or denied.
                  &lt;p&gt; If the requested permission is allowed, this method returns
                  quietly. If denied, a SecurityException is raised.
                  &lt;p&gt; This method creates a &lt;code&gt;SecurityPermission&lt;/code&gt; object for
                  the given permission target name and calls &lt;code&gt;checkPermission&lt;/code&gt;
                  with it.
                  &lt;p&gt; See the documentation for
                  &lt;code&gt;{@link java.security.SecurityPermission}&lt;/code&gt; for
                  a list of possible permission target names.
                  &lt;p&gt; If you override this method, then you should make a call to
                  &lt;code&gt;super.checkSecurityAccess&lt;/code&gt;
                  at the point the overridden method would normally throw an
                  exception.                
                <param>
                    target the target name of the &lt;code&gt;SecurityPermission&lt;/code&gt;.                    
                </param>
                <exception>
                    SecurityException if the calling thread does not have
                      permission for the requested access.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;target&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;target&lt;/code&gt; is empty.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    #checkPermission(java.security.Permission) checkPermission                    
                </see>
            </javadoc>
            <method name="checkSecurityAccess" type="void" line="1440">
                <params>
                    <param name="target" type="String"/>
                </params>
            </method>
            <method name="currentLoadedClass0" type="Class" line="1443"/>
            <javadoc line="1444">
                Returns the thread group into which to instantiate any new
                  thread being created at the time this is being called.
                  By default, it returns the thread group of the current
                  thread. This should be overridden by a specific security
                  manager to return the appropriate thread group.                
                <return>
                    ThreadGroup that new threads are instantiated into                    
                </return>
                <since>
                    JDK1.1                    
                </since>
                <see>
                    java.lang.ThreadGroup                    
                </see>
            </javadoc>
            <method name="getThreadGroup" type="ThreadGroup" line="1454"/>
        </class>
    </source>