<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.util"/>
        <interface name="Comparable">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="3">
                This interface imposes a total ordering on the objects of each class that
                  implements it.  This ordering is referred to as the class&apos;s &lt;i&gt;natural
                  ordering&lt;/i&gt;, and the class&apos;s &lt;tt&gt;compareTo&lt;/tt&gt; method is referred to as
                  its &lt;i&gt;natural comparison method&lt;/i&gt;.&lt;p&gt;
                  Lists (and arrays) of objects that implement this interface can be sorted
                  automatically by {@link Collections#sort(List) Collections.sort} (and{@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this
                  interface can be used as keys in a {@linkplain SortedMap sorted map} or as
                  elements in a {@linkplain SortedSet sorted set}, without the need to
                  specify a {@linkplain Comparator comparator}.&lt;p&gt;
                  The natural ordering for a class &lt;tt&gt;C&lt;/tt&gt; is said to be &lt;i&gt;consistent
                  with equals&lt;/i&gt; if and only if &lt;tt&gt;e1.compareTo(e2) == 0&lt;/tt&gt; has
                  the same boolean value as &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; for every
                  &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; of class &lt;tt&gt;C&lt;/tt&gt;.  Note that &lt;tt&gt;null&lt;/tt&gt;
                  is not an instance of any class, and &lt;tt&gt;e.compareTo(null)&lt;/tt&gt; should
                  throw a &lt;tt&gt;NullPointerException&lt;/tt&gt; even though &lt;tt&gt;e.equals(null)&lt;/tt&gt;
                  returns &lt;tt&gt;false&lt;/tt&gt;.&lt;p&gt;
                  It is strongly recommended (though not required) that natural orderings be
                  consistent with equals.  This is so because sorted sets (and sorted maps)
                  without explicit comparators behave &quot;strangely&quot; when they are used with
                  elements (or keys) whose natural ordering is inconsistent with equals.  In
                  particular, such a sorted set (or sorted map) violates the general contract
                  for set (or map), which is defined in terms of the &lt;tt&gt;equals&lt;/tt&gt;
                  method.&lt;p&gt;
                  For example, if one adds two keys &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; such that
                  &lt;tt&gt;(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)&lt;/tt&gt; to a sorted
                  set that does not use an explicit comparator, the second &lt;tt&gt;add&lt;/tt&gt;
                  operation returns false (and the size of the sorted set does not increase)
                  because &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are equivalent from the sorted set&apos;s
                  perspective.&lt;p&gt;
                  Virtually all Java core classes that implement &lt;tt&gt;Comparable&lt;/tt&gt; have natural
                  orderings that are consistent with equals.  One exception is
                  &lt;tt&gt;java.math.BigDecimal&lt;/tt&gt;, whose natural ordering equates
                  &lt;tt&gt;BigDecimal&lt;/tt&gt; objects with equal values and different precisions
                  (such as 4.0 and 4.00).&lt;p&gt;
                  For the mathematically inclined, the &lt;i&gt;relation&lt;/i&gt; that defines
                  the natural ordering on a given class C is:&lt;pre&gt;
                  {(x, y) such that x.compareTo(y) &amp;lt;= 0}.
                  &lt;/pre&gt; The &lt;i&gt;quotient&lt;/i&gt; for this total order is: &lt;pre&gt;
                  {(x, y) such that x.compareTo(y) == 0}.
                  &lt;/pre&gt;
                  It follows immediately from the contract for &lt;tt&gt;compareTo&lt;/tt&gt; that the
                  quotient is an &lt;i&gt;equivalence relation&lt;/i&gt; on &lt;tt&gt;C&lt;/tt&gt;, and that the
                  natural ordering is a &lt;i&gt;total order&lt;/i&gt; on &lt;tt&gt;C&lt;/tt&gt;.  When we say that a
                  class&apos;s natural ordering is &lt;i&gt;consistent with equals&lt;/i&gt;, we mean that the
                  quotient for the natural ordering is the equivalence relation defined by
                  the class&apos;s {@link Object#equals(Object) equals(Object)} method:&lt;pre&gt;
                  {(x, y) such that x.equals(y)}. &lt;/pre&gt;&lt;p&gt;
                  This interface is a member of the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
                  Java Collections Framework&lt;/a&gt;.                
                <param>
                    <T>
                      the type of objects that this object may be compared to                    
                </param>
                <author>
                    Josh Bloch                    
                </author>
                <see>
                    java.util.Comparator                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="61"/>
            <javadoc line="61">
                Compares this object with the specified object for order.  Returns a
                  negative integer, zero, or a positive integer as this object is less
                  than, equal to, or greater than the specified object.
                  &lt;p&gt;The implementor must ensure &lt;tt&gt;sgn(x.compareTo(y)) ==
                  -sgn(y.compareTo(x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;.  (This
                  implies that &lt;tt&gt;x.compareTo(y)&lt;/tt&gt; must throw an exception iff
                  &lt;tt&gt;y.compareTo(x)&lt;/tt&gt; throws an exception.)
                  &lt;p&gt;The implementor must also ensure that the relation is transitive:
                  &lt;tt&gt;(x.compareTo(y)&amp;gt;0 &amp;amp;&amp;amp; y.compareTo(z)&amp;gt;0)&lt;/tt&gt; implies
                  &lt;tt&gt;x.compareTo(z)&amp;gt;0&lt;/tt&gt;.
                  &lt;p&gt;Finally, the implementor must ensure that &lt;tt&gt;x.compareTo(y)==0&lt;/tt&gt;
                  implies that &lt;tt&gt;sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/tt&gt;, for
                  all &lt;tt&gt;z&lt;/tt&gt;.
                  &lt;p&gt;It is strongly recommended, but &lt;i&gt;not&lt;/i&gt; strictly required that
                  &lt;tt&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/tt&gt;.  Generally speaking, any
                  class that implements the &lt;tt&gt;Comparable&lt;/tt&gt; interface and violates
                  this condition should clearly indicate this fact.  The recommended
                  language is &quot;Note: this class has a natural ordering that is
                  inconsistent with equals.&quot;
                  &lt;p&gt;In the foregoing description, the notation
                  &lt;tt&gt;sgn(&lt;/tt&gt;&lt;i&gt;expression&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; designates the mathematical
                  &lt;i&gt;signum&lt;/i&gt; function, which is defined to return one of &lt;tt&gt;-1&lt;/tt&gt;,
                  &lt;tt&gt;0&lt;/tt&gt;, or &lt;tt&gt;1&lt;/tt&gt; according to whether the value of
                  &lt;i&gt;expression&lt;/i&gt; is negative, zero or positive.                
                <param>
                    o the object to be compared.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this object
                      is less than, equal to, or greater than the specified object.                    
                </return>
                <throws>
                    NullPointerException if the specified object is null                    
                </throws>
                <throws>
                    ClassCastException if the specified object's type prevents it
                      from being compared to this object.                    
                </throws>
            </javadoc>
        </interface>
    </source>