<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="Compiler" line="28">
            <comment line="49">
                don&apos;t make instances                
            </comment>
            <javadoc line="28">
                The {@code Compiler} class is provided to support Java-to-native-code
                  compilers and related services. By design, the {@code Compiler} class does
                  nothing; it serves as a placeholder for a JIT compiler implementation.
                  &lt;p&gt; When the Java Virtual Machine first starts, it determines if the system
                  property {@code java.compiler} exists. (System properties are accessible
                  through {@link System#getProperty(String)} and {@link System#getProperty(String,String)}.  If so, it is assumed to be the name of
                  a library (with a platform-dependent exact location and type); {@link System#loadLibrary} is called to load that library. If this loading
                  succeeds, the function named {@code java_lang_Compiler_start()} in that
                  library is called.
                  &lt;p&gt; If no compiler is available, these methods do nothing.                
                <author>
                    Frank Yellin                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="Compiler" type="constructor" line="48"/>
            <method name="initialize" type="void" line="50"/>
            <method name="registerNatives" type="void" line="52"/>
            <scope line="54">
                <anonymous_class line="57">
                    <method name="run" type="Void" line="58">
                        <declaration name="loaded" type="boolean" line="59"/>
                        <declaration name="jit" type="String" line="60"/>
                        <scope line="63">
                            <scope line="64"/>
                            <scope line="68"/>
                        </scope>
                        <declaration name="info" type="String" line="73"/>
                        <scope line="74"/>
                        <scope line="76"/>
                    </method>
                </anonymous_class>
            </scope>
            <method name="compileClass" type="boolean" line="84"/>
            <javadoc line="84">
                Compiles the specified class.                
                <param>
                    clazzA class                    
                </param>
                <return>
                    {@code true} if the compilation succeeded; {@code false} if the
                      compilation failed or no compiler is available                    
                </return>
                <throws>
                    NullPointerExceptionIf {@code clazz} is {@code null}                    
                </throws>
            </javadoc>
            <method name="compileClasses" type="boolean" line="98"/>
            <javadoc line="98">
                Compiles all classes whose name matches the specified string.                
                <param>
                    stringThe name of the classes to compile                    
                </param>
                <return>
                    {@code true} if the compilation succeeded; {@code false} if the
                      compilation failed or no compiler is available                    
                </return>
                <throws>
                    NullPointerExceptionIf {@code string} is {@code null}                    
                </throws>
            </javadoc>
            <method name="command" type="Object" line="112"/>
            <javadoc line="112">
                Examines the argument type and its fields and perform some documented
                  operation.  No specific operations are required.                
                <param>
                    anyAn argument                    
                </param>
                <return>
                    A compiler-specific value, or {@code null} if no compiler is
                      available                    
                </return>
                <throws>
                    NullPointerExceptionIf {@code any} is {@code null}                    
                </throws>
            </javadoc>
            <method name="enable" type="void" line="127"/>
            <javadoc line="127">
                Cause the Compiler to resume operation.                
            </javadoc>
            <method name="disable" type="void" line="132"/>
            <javadoc line="132">
                Cause the Compiler to cease operation.                
            </javadoc>
        </class>
    </source>