<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <interface name="AutoCloseable">
            <javadoc line="2">
                A resource that must be closed when it is no longer needed.                
                <author>
                    Josh Bloch                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="close" type="void" line="8"/>
            <javadoc line="8">
                Closes this resource, relinquishing any underlying resources.
                  This method is invoked automatically on objects managed by the{@code try}-with-resources statement.
                  &lt;p&gt;While this interface method is declared to throw {@codeException}, implementers are &lt;em&gt;strongly&lt;/em&gt; encouraged to
                  declare concrete implementations of the {@code close} method to
                  throw more specific exceptions, or to throw no exception at all
                  if the close operation cannot fail.
                  &lt;p&gt;&lt;em&gt;Implementers of this interface are also strongly advised
                  to not have the {@code close} method throw {@link InterruptedException}.&lt;/em&gt;
                  This exception interacts with a thread&apos;s interrupted status,
                  and runtime misbehavior is likely to occur if an {@codeInterruptedException} is {@linkplain Throwable#addSuppressedsuppressed}.
                  More generally, if it would cause problems for an
                  exception to be suppressed, the {@code AutoCloseable.close}method should not throw it.
                  &lt;p&gt;Note that unlike the {@link java.io.Closeable#close close}method of {@link java.io.Closeable}, this {@code close} method
                  is &lt;em&gt;not&lt;/em&gt; required to be idempotent.  In other words,
                  calling this {@code close} method more than once may have some
                  visible side effect, unlike {@code Closeable.close} which is
                  required to have no effect if called more than once.
                  However, implementers of this interface are strongly encouraged
                  to make their {@code close} methods idempotent.                
                <throws>
                    Exception if this resource cannot be closed                    
                </throws>
            </javadoc>
        </interface>
    </source>