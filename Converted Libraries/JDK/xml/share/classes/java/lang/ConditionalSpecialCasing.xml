<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.text.BreakIterator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="sun.text.Normalizer"/>
        <class name="ConditionalSpecialCasing" line="36">
            <comment line="50">
                context conditions.                
            </comment>
            <comment line="57">
                combining class definitions                
            </comment>
            <comment line="60">
                Special case mapping entries                
            </comment>
            <comment line="95">
                A hash table that contains the above entries                
            </comment>
            <javadoc line="36">
                This is a utility class for &lt;code&gt;String.toLowerCase()&lt;/code&gt; and
                  &lt;code&gt;String.toUpperCase()&lt;/code&gt;, that handles special casing with
                  conditions.  In other words, it handles the mappings with conditions
                  that are defined in
                  &lt;a href=&quot;http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt&quot;&gt;Special
                  Casing Properties&lt;/a&gt; file.
                  &lt;p&gt;
                  Note that the unconditional case mappings (including 1:M mappings)
                  are handled in &lt;code&gt;Character.toLower/UpperCase()&lt;/code&gt;.                
            </javadoc>
            <declaration name="FINAL_CASED" type="int" line="50"/>
            <declaration name="AFTER_SOFT_DOTTED" type="int" line="51"/>
            <declaration name="MORE_ABOVE" type="int" line="52"/>
            <declaration name="AFTER_I" type="int" line="53"/>
            <declaration name="NOT_BEFORE_DOT" type="int" line="54"/>
            <declaration name="COMBINING_CLASS_ABOVE" type="int" line="57"/>
            <declaration name="entry" type="Entry[]" line="60"/>
            <declaration name="entryTable" type="Hashtable" line="95"/>
            <scope line="96">
                <scope line="98">
                    <declaration name="cur" type="Entry" line="99"/>
                    <declaration name="cp" type="Integer" line="100"/>
                    <declaration name="set" type="HashSet" line="101"/>
                    <scope line="102"/>
                </scope>
            </scope>
            <method name="toLowerCaseEx" type="int" line="110">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="120">
                    default to Character class&apos; one                    
                </comment>
                <declaration name="result" type="char[]" line="111"/>
                <scope line="113">
                    <scope line="114"/>
                    <scope line="116"/>
                </scope>
                <scope line="119"/>
            </method>
            <method name="toUpperCaseEx" type="int" line="125">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="135">
                    default to Character class&apos; one                    
                </comment>
                <declaration name="result" type="char[]" line="126"/>
                <scope line="128">
                    <scope line="129"/>
                    <scope line="131"/>
                </scope>
                <scope line="134"/>
            </method>
            <method name="toLowerCaseCharArray" type="char[]" line="140">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="toUpperCaseCharArray" type="char[]" line="144">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="result" type="char[]" line="145"/>
                <scope line="146"/>
                <scope line="148"/>
            </method>
            <method name="lookUpTable" type="char[]" line="153">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                    <param name="bLowerCasing" type="boolean"/>
                </params>
                <declaration name="set" type="HashSet" line="154"/>
                <scope line="156">
                    <declaration name="iter" type="Iterator" line="157"/>
                    <declaration name="currentLang" type="String" line="158"/>
                    <scope line="159">
                        <declaration name="entry" type="Entry" line="160"/>
                        <declaration name="conditionLang" type="String" line="161"/>
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <method name="isConditionMet" type="boolean" line="172">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                    <param name="condition" type="int"/>
                </params>
            </method>
            <javadoc line="194">
                Implements the &quot;Final_Cased&quot; condition
                  Specification: Within the closest word boundaries containing C, there is a cased
                  letter before C, and there is no cased letter after C.
                  Regular Expression:
                  Before C: [{cased==true}][{wordBoundary!=true}]
                  After C: !([{wordBoundary!=true}][{cased}])                
            </javadoc>
            <method name="isFinalCased" type="boolean" line="204">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="209">
                    Look for a preceding &apos;cased&apos; letter                    
                </comment>
                <comment line="217">
                    Check that there is no &apos;cased&apos; letter after the index                    
                </comment>
                <declaration name="wordBoundary" type="BreakIterator" line="205"/>
                <declaration name="ch" type="int" line="207"/>
                <scope line="211">
                    <scope line="214">
                        <declaration name="len" type="int" line="216"/>
                        <scope line="220">
                            <scope line="223"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="235">
                Implements the &quot;After_I&quot; condition
                  Specification: The last preceding base character was an uppercase I,
                  and there is no intervening combining character class 230 (ABOVE).
                  Regular Expression:
                  Before C: [I]([{cc!=230}&amp;{cc!=0}])                
            </javadoc>
            <method name="isAfterI" type="boolean" line="244">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="248">
                    Look for the last preceding base character                    
                </comment>
                <declaration name="ch" type="int" line="245"/>
                <declaration name="cc" type="int" line="246"/>
                <scope line="249">
                    <scope line="253"/>
                    <scope line="255">
                        <scope line="257"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="266">
                Implements the &quot;After_Soft_Dotted&quot; condition
                  Specification: The last preceding character with combining class
                  of zero before C was Soft_Dotted, and there is no intervening
                  combining character class 230 (ABOVE).
                  Regular Expression:
                  Before C: [{Soft_Dotted==true}]([{cc!=230}&amp;{cc!=0}])                
            </javadoc>
            <method name="isAfterSoftDotted" type="boolean" line="276">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="280">
                    Look for the last preceding character                    
                </comment>
                <declaration name="ch" type="int" line="277"/>
                <declaration name="cc" type="int" line="278"/>
                <scope line="281">
                    <scope line="285"/>
                    <scope line="287">
                        <scope line="289"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="298">
                Implements the &quot;More_Above&quot; condition
                  Specification: C is followed by one or more characters of combining
                  class 230 (ABOVE) in the combining character sequence.
                  Regular Expression:
                  After C: [{cc!=0}][{cc==230}]                
            </javadoc>
            <method name="isMoreAbove" type="boolean" line="307">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="312">
                    Look for a following ABOVE combining class character                    
                </comment>
                <declaration name="ch" type="int" line="308"/>
                <declaration name="cc" type="int" line="309"/>
                <declaration name="len" type="int" line="310"/>
                <scope line="314">
                    <scope line="319"/>
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="329">
                Implements the &quot;Before_Dot&quot; condition
                  Specification: C is followed by &lt;code&gt;U+0307 COMBINING DOT ABOVE&lt;/code&gt;.
                  Any sequence of characters with a combining class that is
                  neither 0 nor 230 may intervene between the current character
                  and the combining dot above.
                  Regular Expression:
                  After C: ([{cc!=230}&amp;{cc!=0}])[\u0307]                
            </javadoc>
            <method name="isBeforeDot" type="boolean" line="340">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="345">
                    Look for a following COMBINING DOT ABOVE                    
                </comment>
                <declaration name="ch" type="int" line="341"/>
                <declaration name="cc" type="int" line="342"/>
                <declaration name="len" type="int" line="343"/>
                <scope line="347">
                    <scope line="351"/>
                    <scope line="353">
                        <scope line="355"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="364">
                Examines whether a character is &apos;cased&apos;.
                  A character C is defined to be &apos;cased&apos; if and only if at least one of
                  following are true for C: uppercase==true, or lowercase==true, or
                  general_category==titlecase_letter.
                  The uppercase and lowercase property values are specified in the data
                  file DerivedCoreProperties.txt in the Unicode Character Database.                
            </javadoc>
            <method name="isCased" type="boolean" line="374">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="381">
                    Check for Other_Lowercase and Other_Uppercase                    
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="384">
                    MODIFIER LETTER SMALL H..MODIFIER LETTER SMALL Y                    
                </comment>
                <comment line="387">
                    MODIFIER LETTER GLOTTAL STOP..MODIFIER LETTER REVERSED GLOTTAL STOP                    
                </comment>
                <comment line="390">
                    MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP                    
                </comment>
                <comment line="393">
                    COMBINING GREEK YPOGEGRAMMENI                    
                </comment>
                <comment line="396">
                    GREEK YPOGEGRAMMENI                    
                </comment>
                <comment line="399">
                    MODIFIER LETTER CAPITAL A..MODIFIER LETTER SMALL CHI                    
                </comment>
                <comment line="402">
                    ROMAN NUMERAL ONE..ROMAN NUMERAL ONE THOUSAND                    
                </comment>
                <comment line="403">
                    SMALL ROMAN NUMERAL ONE..SMALL ROMAN NUMERAL ONE THOUSAND                    
                </comment>
                <comment line="406">
                    CIRCLED LATIN CAPITAL LETTER A..CIRCLED LATIN CAPITAL LETTER Z                    
                </comment>
                <comment line="407">
                    CIRCLED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z                    
                </comment>
                <declaration name="type" type="int" line="375"/>
                <scope line="378"/>
                <scope line="380">
                    <scope line="383"/>
                    <scope line="386"/>
                    <scope line="389"/>
                    <scope line="392"/>
                    <scope line="395"/>
                    <scope line="398"/>
                    <scope line="401"/>
                    <scope line="405"/>
                    <scope line="409"/>
                </scope>
            </method>
            <method name="isSoftDotted" type="boolean" line="415">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <comment line="417">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER I                    
                </comment>
                <comment line="418">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER J                    
                </comment>
                <comment line="419">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER I WITH OGONEK                    
                </comment>
                <comment line="420">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER I WITH STROKE                    
                </comment>
                <comment line="421">
                    Soft_Dotted # L&amp;       CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I                    
                </comment>
                <comment line="422">
                    Soft_Dotted # L&amp;       CYRILLIC SMALL LETTER JE                    
                </comment>
                <comment line="423">
                    Soft_Dotted # L&amp;       LATIN SUBSCRIPT SMALL LETTER I                    
                </comment>
                <comment line="424">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER I WITH TILDE BELOW                    
                </comment>
                <comment line="425">
                    Soft_Dotted # L&amp;       LATIN SMALL LETTER I WITH DOT BELOW                    
                </comment>
                <comment line="426">
                    Soft_Dotted # L&amp;       SUPERSCRIPT LATIN SMALL LETTER I                    
                </comment>
            </method>
            <class name="Entry" line="433">
                <javadoc line="433">
                    An internal class that represents an entry in the Special Casing Properties.                    
                </javadoc>
                <declaration name="ch" type="int" line="437"/>
                <declaration name="lower" type="char[]" line="438"/>
                <declaration name="upper" type="char[]" line="439"/>
                <declaration name="lang" type="String" line="440"/>
                <declaration name="condition" type="int" line="441"/>
                <method name="Entry" type="constructor" line="443">
                    <params>
                        <param name="ch" type="int"/>
                        <param name="lower" type="char[]"/>
                        <param name="upper" type="char[]"/>
                        <param name="lang" type="String"/>
                        <param name="condition" type="int"/>
                    </params>
                </method>
                <method name="getCodePoint" type="int" line="451"/>
                <method name="getLowerCase" type="char[]" line="455"/>
                <method name="getUpperCase" type="char[]" line="459"/>
                <method name="getLanguage" type="String" line="463"/>
                <method name="getCondition" type="int" line="467"/>
            </class>
        </class>
    </source>