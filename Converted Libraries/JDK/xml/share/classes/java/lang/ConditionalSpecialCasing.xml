<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.text.BreakIterator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="sun.text.Normalizer"/>
        <class name="ConditionalSpecialCasing" line="8">
            <javadoc line="8">
                This is a utility class for &lt;code&gt;String.toLowerCase()&lt;/code&gt; and
                  &lt;code&gt;String.toUpperCase()&lt;/code&gt;, that handles special casing with
                  conditions.  In other words, it handles the mappings with conditions
                  that are defined in
                  &lt;a href=&quot;http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt&quot;&gt;Special
                  Casing Properties&lt;/a&gt; file.
                  &lt;p&gt;
                  Note that the unconditional case mappings (including 1:M mappings)
                  are handled in &lt;code&gt;Character.toLower/UpperCase()&lt;/code&gt;.                
            </javadoc>
            <declaration name="FINAL_CASED" type="int" line="20"/>
            <declaration name="AFTER_SOFT_DOTTED" type="int" line="21"/>
            <declaration name="MORE_ABOVE" type="int" line="22"/>
            <declaration name="AFTER_I" type="int" line="23"/>
            <declaration name="NOT_BEFORE_DOT" type="int" line="24"/>
            <declaration name="COMBINING_CLASS_ABOVE" type="int" line="25"/>
            <declaration name="entry" type="Entry[]" line="26"/>
            <declaration name="entryTable" type="Hashtable" line="27"/>
            <scope line="28">
                <scope line="29">
                    <declaration name="cur" type="Entry" line="30"/>
                    <declaration name="cp" type="Integer" line="31"/>
                    <declaration name="set" type="HashSet" line="32"/>
                    <scope line="33"/>
                </scope>
            </scope>
            <method name="toLowerCaseEx" type="int" line="40">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="result" type="char[]" line="41"/>
                <scope line="42">
                    <scope line="43"/>
                    <scope line="46"/>
                </scope>
                <scope line="50"/>
            </method>
            <method name="toUpperCaseEx" type="int" line="54">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="result" type="char[]" line="55"/>
                <scope line="56">
                    <scope line="57"/>
                    <scope line="60"/>
                </scope>
                <scope line="64"/>
            </method>
            <method name="toLowerCaseCharArray" type="char[]" line="68">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="toUpperCaseCharArray" type="char[]" line="71">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="result" type="char[]" line="72"/>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <method name="lookUpTable" type="char[]" line="80">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                    <param name="bLowerCasing" type="boolean"/>
                </params>
                <declaration name="set" type="HashSet" line="81"/>
                <scope line="82">
                    <declaration name="iter" type="Iterator" line="83"/>
                    <declaration name="currentLang" type="String" line="84"/>
                    <scope line="85">
                        <declaration name="entry" type="Entry" line="86"/>
                        <declaration name="conditionLang" type="String" line="87"/>
                        <scope line="88"/>
                    </scope>
                </scope>
            </method>
            <method name="isConditionMet" type="boolean" line="95">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                    <param name="condition" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Implements the &quot;Final_Cased&quot; condition
                  Specification: Within the closest word boundaries containing C, there is a cased
                  letter before C, and there is no cased letter after C.
                  Regular Expression:
                  Before C: [{cased==true}][{wordBoundary!=true}]
                  After C: !([{wordBoundary!=true}][{cased}])                
            </javadoc>
            <method name="isFinalCased" type="boolean" line="119">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                    <param name="locale" type="Locale"/>
                </params>
                <declaration name="wordBoundary" type="BreakIterator" line="120"/>
                <declaration name="ch" type="int" line="122"/>
                <scope line="123">
                    <scope line="125">
                        <declaration name="len" type="int" line="126"/>
                        <scope line="127">
                            <scope line="129"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="138">
                Implements the &quot;After_I&quot; condition
                  Specification: The last preceding base character was an uppercase I,
                  and there is no intervening combining character class 230 (ABOVE).
                  Regular Expression:
                  Before C: [I]([{cc!=230}&amp;{cc!=0}])                
            </javadoc>
            <method name="isAfterI" type="boolean" line="145">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="ch" type="int" line="146"/>
                <declaration name="cc" type="int" line="147"/>
                <scope line="148">
                    <scope line="150"/>
                    <scope line="153">
                        <scope line="155"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="162">
                Implements the &quot;After_Soft_Dotted&quot; condition
                  Specification: The last preceding character with combining class
                  of zero before C was Soft_Dotted, and there is no intervening
                  combining character class 230 (ABOVE).
                  Regular Expression:
                  Before C: [{Soft_Dotted==true}]([{cc!=230}&amp;{cc!=0}])                
            </javadoc>
            <method name="isAfterSoftDotted" type="boolean" line="170">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="ch" type="int" line="171"/>
                <declaration name="cc" type="int" line="172"/>
                <scope line="173">
                    <scope line="175"/>
                    <scope line="178">
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Implements the &quot;More_Above&quot; condition
                  Specification: C is followed by one or more characters of combining
                  class 230 (ABOVE) in the combining character sequence.
                  Regular Expression:
                  After C: [{cc!=0}][{cc==230}]                
            </javadoc>
            <method name="isMoreAbove" type="boolean" line="194">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="ch" type="int" line="195"/>
                <declaration name="cc" type="int" line="196"/>
                <declaration name="len" type="int" line="197"/>
                <scope line="198">
                    <scope line="201"/>
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="210">
                Implements the &quot;Before_Dot&quot; condition
                  Specification: C is followed by &lt;code&gt;U+0307 COMBINING DOT ABOVE&lt;/code&gt;.
                  Any sequence of characters with a combining class that is
                  neither 0 nor 230 may intervene between the current character
                  and the combining dot above.
                  Regular Expression:
                  After C: ([{cc!=230}&amp;{cc!=0}])[\u0307]                
            </javadoc>
            <method name="isBeforeDot" type="boolean" line="219">
                <params>
                    <param name="src" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="ch" type="int" line="220"/>
                <declaration name="cc" type="int" line="221"/>
                <declaration name="len" type="int" line="222"/>
                <scope line="223">
                    <scope line="225"/>
                    <scope line="228">
                        <scope line="230"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="237">
                Examines whether a character is &apos;cased&apos;.
                  A character C is defined to be &apos;cased&apos; if and only if at least one of
                  following are true for C: uppercase==true, or lowercase==true, or
                  general_category==titlecase_letter.
                  The uppercase and lowercase property values are specified in the data
                  file DerivedCoreProperties.txt in the Unicode Character Database.                
            </javadoc>
            <method name="isCased" type="boolean" line="245">
                <params>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="type" type="int" line="246"/>
                <scope line="247"/>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="254"/>
                    <scope line="257"/>
                    <scope line="260"/>
                    <scope line="263"/>
                    <scope line="266"/>
                    <scope line="269"/>
                    <scope line="272"/>
                    <scope line="275"/>
                </scope>
            </method>
            <method name="isSoftDotted" type="boolean" line="280">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <class name="Entry" line="297">
                <javadoc line="297">
                    An internal class that represents an entry in the Special Casing Properties.                    
                </javadoc>
                <declaration name="ch" type="int" line="301"/>
                <declaration name="lower" type="char[]" line="302"/>
                <declaration name="upper" type="char[]" line="303"/>
                <declaration name="lang" type="String" line="304"/>
                <declaration name="condition" type="int" line="305"/>
                <method name="Entry" type="constructor" line="306">
                    <params>
                        <param name="ch" type="int"/>
                        <param name="lower" type="char[]"/>
                        <param name="upper" type="char[]"/>
                        <param name="lang" type="String"/>
                        <param name="condition" type="int"/>
                    </params>
                </method>
                <method name="getCodePoint" type="int" line="313"/>
                <method name="getLowerCase" type="char[]" line="316"/>
                <method name="getUpperCase" type="char[]" line="319"/>
                <method name="getLanguage" type="String" line="322"/>
                <method name="getCondition" type="int" line="325"/>
            </class>
        </class>
    </source>