<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <class name="VolatileCallSite" line="28">
            <extends class="CallSite"/>
            <javadoc line="28">
                A {@code VolatileCallSite} is a {@link CallSite} whose target acts like a volatile variable.
                  An {@code invokedynamic} instruction linked to a {@code VolatileCallSite} sees updates
                  to its call site target immediately, even if the update occurs in another thread.
                  There may be a performance penalty for such tight coupling between threads.
                  &lt;p&gt;
                  Unlike {@code MutableCallSite}, there is no{@linkplain MutableCallSite#syncAll syncAll operation} on volatile
                  call sites, since every write to a volatile variable is implicitly
                  synchronized with reader threads.
                  &lt;p&gt;
                  In other respects, a {@code VolatileCallSite} is interchangeable
                  with {@code MutableCallSite}.                
                <see>
                    MutableCallSite                    
                </see>
                <author>
                    John Rose, JSR 292 EG                    
                </author>
            </javadoc>
            <javadoc line="45">
                Creates a call site with a volatile binding to its target.
                  The initial target is set to a method handle
                  of the given type which will throw an {@code IllegalStateException} if called.                
                <param>
                    type the method type that this call site will have                    
                </param>
                <throws>
                    NullPointerException if the proposed type is null                    
                </throws>
            </javadoc>
            <method name="VolatileCallSite" type="constructor" line="52">
                <params>
                    <param name="type" type="MethodType"/>
                </params>
            </method>
            <javadoc line="56">
                Creates a call site with a volatile binding to its target.
                  The target is set to the given value.                
                <param>
                    target the method handle that will be the initial target of the call site                    
                </param>
                <throws>
                    NullPointerException if the proposed target is null                    
                </throws>
            </javadoc>
            <method name="VolatileCallSite" type="constructor" line="62">
                <params>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="66">
                Returns the target method of the call site, which behaves
                  like a {@code volatile} field of the {@code VolatileCallSite}.
                  &lt;p&gt;
                  The interactions of {@code getTarget} with memory are the same
                  as of a read from a {@code volatile} field.
                  &lt;p&gt;
                  In particular, the current thread is required to issue a fresh
                  read of the target from memory, and must not fail to see
                  a recent update to the target by another thread.                
                <return>
                    the linkage state of this call site, a method handle which can change over time                    
                </return>
                <see>
                    #setTarget                    
                </see>
            </javadoc>
            <method name="getTarget" type="MethodHandle" line="80"/>
            <javadoc line="84">
                Updates the target method of this call site, as a volatile variable.
                  The type of the new target must agree with the type of the old target.
                  &lt;p&gt;
                  The interactions with memory are the same as of a write to a volatile field.
                  In particular, any threads is guaranteed to see the updated target
                  the next time it calls {@code getTarget}.                
                <param>
                    newTarget the new target                    
                </param>
                <throws>
                    NullPointerException if the proposed new target is null                    
                </throws>
                <throws>
                    WrongMethodTypeException if the proposed new target
                      has a method type that differs from the previous target                    
                </throws>
                <see>
                    #getTarget                    
                </see>
            </javadoc>
            <method name="setTarget" type="void" line="97">
                <params>
                    <param name="newTarget" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="102">
                {@inheritDoc}                
            </javadoc>
            <method name="dynamicInvoker" type="MethodHandle" line="106"/>
        </class>
    </source>