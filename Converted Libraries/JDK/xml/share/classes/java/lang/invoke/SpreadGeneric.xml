<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.ValueConversions"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="SpreadGeneric" line="35">
            <comment line="42">
                type for the outgoing call                
            </comment>
            <comment line="44">
                number of arguments to spread                
            </comment>
            <comment line="46">
                prototype adapter (clone and customize for each new target!)                
            </comment>
            <comment line="48">
                entry point for adapter (Adapter mh, a...) =&gt; ...                
            </comment>
            <comment line="134">
                This mini-api is called from an Adapter to manage the spread.                
            </comment>
            <comment line="145">
                protected int select_I(Object av, int n) {
                 maybe return ((int[])select)[n]
                throw new UnsupportedOperationException(&quot;subclass resp.&quot;);
                }
                protected int select_J(Object av, int n) {
                 maybe return ((long[])select)[n]
                throw new UnsupportedOperationException(&quot;subclass resp.&quot;);
                }                
            </comment>
            <comment line="156">
                                
            </comment>
            <comment line="279">
                generated classes follow this pattern:
                static class xS2 extends Adapter {
                protected xS2(SpreadGeneric outer) { super(outer); }   to build prototype
                protected xS2(SpreadGeneric outer, MethodHandle t) { super(outer, t); }
                protected xS2 makeInstance(SpreadGeneric outer, MethodHandle t) { return new xS2(outer, t); }
                protected Object invoke_S0(Object a0, Object a1, Object av) throws Throwable { av = super.check(av,0);
                return target.invokeExact(a0, a1)); }
                protected Object invoke_S1(Object a0, Object av) throws Throwable { av = super.check(av,1);
                return target.invokeExact(a0,
                super.select(av,0)); }
                protected Object invoke_S2(Object a0, Object av) throws Throwable { av = super.check(av,1);
                return target.invokeExact(
                super.select(av,0), super.select(av,1)); }
                }                
            </comment>
            <comment line="295">
                : SHELL; n=SpreadGeneric; cp -p $n.java $n.java-; sed &lt; $n.java- &gt; $n.java+ -e &apos;{{{{,}}}}w tmpgenclasses.java&apos; -e &apos;}}}}q&apos;; (cd tmp; javac -d . genclasses.java; java -cp . genclasses) &gt;&gt; $n.java+; echo &apos;}&apos; &gt;&gt; $n.java+; mv $n.java+ $n.java; mv $n.java- $n.java~
                {{{
                import java.util.;
                class genclasses {
                static String[][] TEMPLATES = { {
                &quot;@for@ N=0..10&quot;,
                &quot;    @each-cat@&quot;,
                &quot;    static class @cat@ extends Adapter {&quot;,
                &quot;        protected @cat@(SpreadGeneric outer) { super(outer); }   to build prototype&quot;,
                &quot;        protected @cat@(SpreadGeneric outer, MethodHandle t) { super(outer, t); }&quot;,
                &quot;        protected @cat@ makeInstance(SpreadGeneric outer, MethodHandle t) { return new @cat@(outer, t); }&quot;,
                &quot;        protected Object invoke_S0(@Tvav,@Object av) throws Throwable { av = super.check(av, 0);&quot;,
                &quot;            return target.invokeExact(@av@); }&quot;,
                &quot;        @each-S@&quot;,
                &quot;        protected Object invoke_S@S@(@Tvav,@Object av) throws Throwable { av = super.check(av, @S@);&quot;,
                &quot;            return target.invokeExact(@av,@@sv@); }&quot;,
                &quot;        @end-S@&quot;,
                &quot;    }&quot;,
                } };
                static final String NEWLINE_INDENT = &quot;\n                &quot;;
                enum VAR {
                cat, N, S, av, av_, Tvav_, sv;
                public final String pattern = &quot;@&quot;+toString().replace(&apos;_&apos;,&apos;.&apos;)+&quot;@&quot;;
                public String binding = toString();
                static void makeBindings(boolean topLevel, int outargs, int spread) {
                int inargs = outargs - spread;
                VAR.cat.binding = &quot;S&quot;+outargs;
                VAR.N.binding = String.valueOf(outargs);  outgoing arg count
                VAR.S.binding = String.valueOf(spread);   spread count
                String[] av = new String[inargs];
                String[] Tvav = new String[inargs];
                for (int i = 0; i &lt; inargs; i++) {
                av[i] = arg(i);
                Tvav[i] = param(&quot;Object&quot;, av[i]);
                }
                VAR.av.binding = comma(av);
                VAR.av_.binding = comma(av, &quot;, &quot;);
                VAR.Tvav_.binding = comma(Tvav, &quot;, &quot;);
                String[] sv = new String[spread];
                for (int i = 0; i &lt; spread; i++) {
                String spc = &quot;&quot;;
                if (i % 4 == 0) spc = NEWLINE_INDENT;
                sv[i] = spc+&quot;super.select(av,&quot;+i+&quot;)&quot;;
                }
                VAR.sv.binding = comma(sv);
                }
                static String arg(int i) { return &quot;a&quot;+i; }
                static String param(String t, String a) { return t+&quot; &quot;+a; }
                static String comma(String[] v) { return comma(v, &quot;&quot;); }
                static String comma(String[] v, String sep) {
                if (v.length == 0)  return &quot;&quot;;
                String res = v[0];
                for (int i = 1; i &lt; v.length; i++)  res += &quot;, &quot;+v[i];
                return res + sep;
                }
                static String transform(String string) {
                for (VAR var : values())
                string = string.replaceAll(var.pattern, var.binding);
                return string;
                }
                }
                static String[] stringsIn(String[] strings, int beg, int end) {
                return Arrays.copyOfRange(strings, beg, Math.min(end, strings.length));
                }
                static String[] stringsBefore(String[] strings, int pos) {
                return stringsIn(strings, 0, pos);
                }
                static String[] stringsAfter(String[] strings, int pos) {
                return stringsIn(strings, pos, strings.length);
                }
                static int indexAfter(String[] strings, int pos, String tag) {
                return Math.min(indexBefore(strings, pos, tag) + 1, strings.length);
                }
                static int indexBefore(String[] strings, int pos, String tag) {
                for (int i = pos, end = strings.length; ; i++) {
                if (i == end || strings[i].endsWith(tag))  return i;
                }
                }
                static int MIN_ARITY, MAX_ARITY;
                public static void main(String... av) {
                for (String[] template : TEMPLATES) {
                int forLinesLimit = indexBefore(template, 0, &quot;@each-cat@&quot;);
                String[] forLines = stringsBefore(template, forLinesLimit);
                template = stringsAfter(template, forLinesLimit);
                for (String forLine : forLines)
                expandTemplate(forLine, template);
                }
                }
                static void expandTemplate(String forLine, String[] template) {
                String[] params = forLine.split(&quot;[^0-9]+&quot;);
                if (params[0].length() == 0)  params = stringsAfter(params, 1);
                System.out.println(&quot;params=&quot;+Arrays.asList(params));
                int pcur = 0;
                MIN_ARITY = Integer.valueOf(params[pcur++]);
                MAX_ARITY = Integer.valueOf(params[pcur++]);
                if (pcur != params.length)  throw new RuntimeException(&quot;bad extra param: &quot;+forLine);
                for (int outargs = MIN_ARITY; outargs &lt;= MAX_ARITY; outargs++) {
                expandTemplate(template, true, outargs, 0);
                }
                }
                static void expandTemplate(String[] template, boolean topLevel, int outargs, int spread) {
                VAR.makeBindings(topLevel, outargs, spread);
                for (int i = 0; i &lt; template.length; i++) {
                String line = template[i];
                if (line.endsWith(&quot;@each-cat@&quot;)) {
                 ignore
                } else if (line.endsWith(&quot;@each-S@&quot;)) {
                int blockEnd = indexAfter(template, i, &quot;@end-S@&quot;);
                String[] block = stringsIn(template, i+1, blockEnd-1);
                for (int spread1 = spread+1; spread1 &lt;= outargs; spread1++)
                expandTemplate(block, false, outargs, spread1);
                VAR.makeBindings(topLevel, outargs, spread);
                i = blockEnd-1; continue;
                } else {
                System.out.println(VAR.transform(line));
                }
                }
                }
                }                
            </comment>
            <comment line="416">
                params=[0, 10]                
            </comment>
            <javadoc line="35">
                Generic spread adapter.
                  Expands a final argument into multiple (zero or more) arguments, keeping the others the same.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="targetType" type="MethodType" line="42"/>
            <declaration name="spreadCount" type="int" line="44"/>
            <declaration name="adapter" type="Adapter" line="46"/>
            <declaration name="entryPoint" type="MethodHandle" line="48"/>
            <javadoc line="50">
                Compute and cache information common to all spreading adapters
                  that accept calls of the given (generic) type.                
            </javadoc>
            <method name="SpreadGeneric" type="constructor" line="53">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="spreadCount" type="int"/>
                </params>
                <comment line="57">
                    the target invoker will generally need casts on reference arguments                    
                </comment>
                <declaration name="ep" type="MethodHandle[]" line="58"/>
                <declaration name="ad" type="Adapter" line="59"/>
                <scope line="60"/>
            </method>
            <scope line="69"/>
            <javadoc line="73">
                From targetType remove the last spreadCount arguments, and instead
                  append a simple Object argument.                
            </javadoc>
            <method name="preSpreadType" type="MethodType" line="76">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="spreadCount" type="int"/>
                </params>
                <declaration name="params" type="ArrayList&lt;Class&lt;?&gt;&gt;" line="77"/>
                <declaration name="outargs" type="int" line="79"/>
            </method>
            <method name="makeInstance" type="MethodHandle" line="85">
                <params>
                    <param name="target" type="MethodHandle"/>
                </params>
                <declaration name="type" type="MethodType" line="86"/>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Build an adapter of the given generic type, which invokes typedTarget
                  on the incoming arguments, after unboxing as necessary.
                  The return value is boxed if necessary.                
                <param>
                    genericType  the required type of the result                    
                </param>
                <param>
                    typedTarget the target                    
                </param>
                <return>
                    an adapter method handle                    
                </return>
            </javadoc>
            <method name="make" type="MethodHandle" line="100">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="spreadCount" type="int"/>
                </params>
                <declaration name="type" type="MethodType" line="101"/>
                <declaration name="gtype" type="MethodType" line="102"/>
                <scope line="103"/>
                <scope line="105">
                    <declaration name="gtarget" type="MethodHandle" line="106"/>
                    <declaration name="gspread" type="MethodHandle" line="108"/>
                </scope>
            </method>
            <javadoc line="113">
                Return the adapter information for this type&apos;s erasure.                
            </javadoc>
            <method name="of" type="SpreadGeneric" line="114">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="spreadCount" type="int"/>
                </params>
                <declaration name="form" type="MethodTypeForm" line="117"/>
                <declaration name="outcount" type="int" line="118"/>
                <declaration name="spreadGens" type="SpreadGeneric[]" line="120"/>
                <declaration name="spreadGen" type="SpreadGeneric" line="123"/>
            </method>
            <method name="debugString" type="String" line="129"/>
            <javadoc line="134">
                A check/coercion that happens once before any selections.                
            </javadoc>
            <method name="check" type="Object" line="135">
                <params>
                    <param name="av" type="Object"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                The selection operator for spreading; note that it takes Object not Object[].                
            </javadoc>
            <method name="select" type="Object" line="141">
                <params>
                    <param name="av" type="Object"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="findAdapter" type="Adapter" line="156">
                <params>
                    <param name="outer" type="SpreadGeneric"/>
                    <param name="ep" type="MethodHandle[]"/>
                </params>
                <comment line="162">
                    1 for av                    
                </comment>
                <comment line="166">
                    e.g., D5I2, D5, L5I2, L5; invoke_D5                    
                </comment>
                <comment line="170">
                    see if it has the required invoke method                    
                </comment>
                <comment line="185">
                    Produce an instance configured as a prototype.                    
                </comment>
                <declaration name="targetType" type="MethodType" line="157"/>
                <declaration name="spreadCount" type="int" line="158"/>
                <declaration name="outargs" type="int" line="159"/>
                <declaration name="inargs" type="int" line="160"/>
                <declaration name="entryType" type="MethodType" line="162"/>
                <declaration name="cname1" type="String" line="163"/>
                <declaration name="cnames" type="String[]" line="164"/>
                <declaration name="iname" type="String" line="165"/>
                <scope line="167">
                    <declaration name="acls" type="Class&lt;? extends Adapter&gt;" line="168"/>
                    <declaration name="entryPoint" type="MethodHandle" line="171"/>
                    <scope line="172"/>
                    <scope line="174"/>
                    <declaration name="ctor" type="Constructor&lt;? extends Adapter&gt;" line="177"/>
                    <scope line="178"/>
                    <scope line="180"/>
                    <scope line="181"/>
                    <scope line="184">
                        <declaration name="ad" type="Adapter" line="186"/>
                    </scope>
                    <scope line="189"/>
                    <scope line="190">
                        <declaration name="ex" type="Throwable" line="191"/>
                    </scope>
                    <scope line="194"/>
                    <scope line="195"/>
                </scope>
            </method>
            <method name="buildAdapterFromBytecodes" type="Adapter" line="202">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="spreadCount" type="int"/>
                    <param name="ep" type="MethodHandle[]"/>
                </params>
            </method>
            <class name="Adapter" line="206">
                <extends class="BoundMethodHandle"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <javadoc line="206">
                    This adapter takes some untyped arguments, and returns an untyped result.
                      Internally, it applies the invoker to the target, which causes the
                      objects to be unboxed; the result is a raw type in L/I/J/F/D.
                      This result is passed to convert, which is responsible for
                      converting the raw result into a boxed object.
                      The invoker is kept separate from the target because it can be
                      generated once per type erasure family, and reused across adapters.                    
                </javadoc>
                <declaration name="outer" type="SpreadGeneric" line="223"/>
                <declaration name="target" type="MethodHandle" line="224"/>
                <method name="debugString" type="String" line="227"/>
                <declaration name="NO_ENTRY" type="MethodHandle" line="231"/>
                <method name="isPrototype" type="boolean" line="233"/>
                <method name="Adapter" type="constructor" line="234">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="Adapter" type="constructor" line="241">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="target" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="Adapter" line="247"/>
                <javadoc line="247">
                    Make a copy of self, with new fields.                    
                </javadoc>
                <method name="check" type="Object" line="251">
                    <params>
                        <param name="av" type="Object"/>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="select" type="Object" line="254">
                    <params>
                        <param name="av" type="Object"/>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <declaration name="CLASS_PREFIX" type="String" line="258"/>
                <scope line="259">
                    <declaration name="aname" type="String" line="260"/>
                    <declaration name="sname" type="String" line="261"/>
                </scope>
                <javadoc line="265">
                    Find a sibing class of Adapter.                    
                </javadoc>
                <method name="findSubClass" type="Class<? extends Adapter>" line="266">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="cname" type="String" line="267"/>
                    <scope line="268"/>
                    <scope line="270"/>
                    <scope line="272"/>
                </method>
            </class>
            <class name="S0" line="416">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S0" type="constructor" line="417">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S0" type="constructor" line="418">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S0" line="419">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="420">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S1" line="423">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S1" type="constructor" line="424">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S1" type="constructor" line="425">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S1" line="426">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="427">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="429">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S2" line="433">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S2" type="constructor" line="434">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S2" type="constructor" line="435">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S2" line="436">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="437">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="439">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="442">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S3" line="446">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S3" type="constructor" line="447">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S3" type="constructor" line="448">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S3" line="449">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="450">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="452">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="455">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="458">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S4" line="462">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S4" type="constructor" line="463">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S4" type="constructor" line="464">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S4" line="465">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="466">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="468">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="471">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="474">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="477">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S5" line="481">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S5" type="constructor" line="482">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S5" type="constructor" line="483">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S5" line="484">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="485">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="487">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="490">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="493">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="496">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="499">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S6" line="504">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S6" type="constructor" line="505">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S6" type="constructor" line="506">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S6" line="507">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="508">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="510">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="513">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="516">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="519">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="522">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S6" type="Object" line="526">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S7" line="531">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S7" type="constructor" line="532">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S7" type="constructor" line="533">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S7" line="534">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="535">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="537">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="540">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="543">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="546">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="549">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S6" type="Object" line="553">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S7" type="Object" line="557">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S8" line="562">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S8" type="constructor" line="563">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S8" type="constructor" line="564">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S8" line="565">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="566">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="568">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="571">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="574">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="577">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="580">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S6" type="Object" line="584">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S7" type="Object" line="588">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S8" type="Object" line="592">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S9" line="597">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S9" type="constructor" line="598">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S9" type="constructor" line="599">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S9" line="600">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="601">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="603">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="606">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="609">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="612">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="615">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S6" type="Object" line="619">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S7" type="Object" line="623">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S8" type="Object" line="627">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S9" type="Object" line="631">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="S10" line="637">
                <extends class="Adapter"/>
                <comment line="217">
                    class X&lt;&lt;R,int M,int N&gt;&gt; extends Adapter {
                       (ObjectN)=&gt;R target;
                       static int S = N-M;
                       Object invoke(ObjectM a, Object v) = target(a..., v[0]...v[S-1]);
                     }                    
                </comment>
                <comment line="225">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="250">
                    { return new ThisType(outer, target); }                    
                </comment>
                <comment line="259">
                    &quot;java.lang.invoke.SpreadGeneric$&quot;                    
                </comment>
                <comment line="418">
                    to build prototype                    
                </comment>
                <comment line="425">
                    to build prototype                    
                </comment>
                <comment line="435">
                    to build prototype                    
                </comment>
                <comment line="448">
                    to build prototype                    
                </comment>
                <comment line="464">
                    to build prototype                    
                </comment>
                <comment line="483">
                    to build prototype                    
                </comment>
                <comment line="506">
                    to build prototype                    
                </comment>
                <comment line="533">
                    to build prototype                    
                </comment>
                <comment line="564">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="639">
                    to build prototype                    
                </comment>
                <method name="S10" type="constructor" line="638">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                    </params>
                </method>
                <method name="S10" type="constructor" line="639">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="S10" line="640">
                    <params>
                        <param name="outer" type="SpreadGeneric"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_S0" type="Object" line="641">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S1" type="Object" line="643">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S2" type="Object" line="646">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S3" type="Object" line="649">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S4" type="Object" line="652">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S5" type="Object" line="655">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S6" type="Object" line="659">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S7" type="Object" line="663">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S8" type="Object" line="667">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S9" type="Object" line="671">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_S10" type="Object" line="676">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>