<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.Wrapper"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <class name="MethodTypeForm" line="31">
            <comment line="47">
                packed slot &amp; value counts                
            </comment>
            <comment line="48">
                packed prim &amp; double counts                
            </comment>
            <comment line="49">
                total number of parameter slots                
            </comment>
            <comment line="50">
                vm-specific information for calls                
            </comment>
            <comment line="51">
                the canonical erasure                
            </comment>
            <comment line="53">
                                
            </comment>
            <comment line="53">
                replace prims by wrappers                
            </comment>
            <comment line="54">
                                
            </comment>
            <comment line="54">
                wrap args only; make raw return                
            </comment>
            <comment line="55">
                                
            </comment>
            <comment line="55">
                replace prims by int/long                
            </comment>
            <comment line="56">
                                
            </comment>
            <comment line="56">
                replace prims by long                
            </comment>
            <comment line="57">
                                
            </comment>
            <comment line="57">
                reorder primitives to the end                
            </comment>
            <comment line="59">
                Cached adapter information:                
            </comment>
            <comment line="60">
                                
            </comment>
            <comment line="60">
                convert cs. with prims to w/o                
            </comment>
            <comment line="61">
                                
            </comment>
            <comment line="61">
                convert cs. w/o prims to with                
            </comment>
            <comment line="62">
                                
            </comment>
            <comment line="62">
                expand one argument to many                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="63">
                convert argument(s) on the fly                
            </comment>
            <comment line="64">
                                
            </comment>
            <comment line="64">
                hook for inexact invoke                
            </comment>
            <comment line="333">
                public boolean hasNonVoidPrimitives() {                
            </comment>
            <comment line="334">
                if (primCounts == 0)  return false;                
            </comment>
            <comment line="335">
                if (primitiveParameterCount() != 0)  return true;                
            </comment>
            <comment line="336">
                return (primitiveReturnCount() != 0 &amp;&amp; returnCount() != 0);                
            </comment>
            <comment line="337">
                }                
            </comment>
            <comment line="463">
                                
            </comment>
            <javadoc line="31">
                Shared information for a group of method types, which differ
                  only by reference types, and therefore share a common erasure
                  and wrapping.
                  &lt;p&gt;
                  For an empirical discussion of the structure of method types,
                  see &lt;a href=&quot;http://groups.google.com/group/jvm-languages/browse_thread/thread/ac9308ae74da9b7e/&quot;&gt;
                  the thread &quot;Avoiding Boxing&quot; on jvm-languages&lt;/a&gt;.
                  There are approximately 2000 distinct erased method types in the JDK.
                  There are a little over 10 times that number of unerased types.
                  No more than half of these are likely to be loaded at once.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="argToSlotTable" type="int[]" line="45"/>
            <declaration name="argCounts" type="long" line="46"/>
            <declaration name="primCounts" type="long" line="47"/>
            <declaration name="vmslots" type="int" line="48"/>
            <declaration name="vmlayout" type="Object" line="49"/>
            <declaration name="erasedType" type="MethodType" line="50"/>
            <declaration name="primsAsBoxes" type="MethodType" line="52"/>
            <declaration name="primArgsAsBoxes" type="MethodType" line="53"/>
            <declaration name="primsAsInts" type="MethodType" line="54"/>
            <declaration name="primsAsLongs" type="MethodType" line="55"/>
            <declaration name="primsAtEnd" type="MethodType" line="56"/>
            <declaration name="toGeneric" type="ToGeneric" line="59"/>
            <declaration name="fromGeneric" type="FromGeneric" line="60"/>
            <declaration name="spreadGeneric" type="SpreadGeneric[]" line="61"/>
            <declaration name="filterGeneric" type="FilterGeneric" line="62"/>
            <declaration name="genericInvoker" type="MethodHandle" line="63"/>
            <method name="erasedType" type="MethodType" line="65"/>
            <method name="MethodTypeForm" type="constructor" line="69">
                <params>
                    <param name="erasedType" type="MethodType"/>
                </params>
                <comment line="74">
                    temp. estimate                    
                </comment>
                <comment line="75">
                    temp. estimate                    
                </comment>
                <comment line="76">
                    temp. estimate                    
                </comment>
                <comment line="80">
                    Walk the argument types, looking for primitives.                    
                </comment>
                <comment line="91">
                    #slots = #args + #longs                    
                </comment>
                <comment line="94">
                    even void.class counts as a prim here                    
                </comment>
                <comment line="96">
                    adjust #slots, #args                    
                </comment>
                <comment line="106">
                    argument &quot;-1&quot; is past end of slots                    
                </comment>
                <comment line="111">
                    &quot;+1&quot; see argSlotToParameter note                    
                </comment>
                <comment line="114">
                    filled the table                    
                </comment>
                <comment line="119">
                    first arg is deepest in stack                    
                </comment>
                <comment line="122">
                    argument &quot;-1&quot; is past end of slots                    
                </comment>
                <comment line="125">
                    &quot;+1&quot; see argSlotToParameter note                    
                </comment>
                <comment line="134">
                    send a few bits down to the JVM:                    
                </comment>
                <comment line="137">
                    short circuit some no-op canonicalizations:                    
                </comment>
                <declaration name="ptypes" type="Class&lt;?&gt;[]" line="72"/>
                <declaration name="ptypeCount" type="int" line="73"/>
                <declaration name="pslotCount" type="int" line="74"/>
                <declaration name="rtypeCount" type="int" line="75"/>
                <declaration name="rslotCount" type="int" line="76"/>
                <declaration name="argToSlotTab" type="int[]" line="78"/>
                <declaration name="pac" type="int" line="81"/>
                <declaration name="epts" type="Class&lt;?&gt;" line="82"/>
                <scope line="83">
                    <declaration name="pt" type="Class&lt;?&gt;" line="84"/>
                    <scope line="85"/>
                </scope>
                <declaration name="rt" type="Class&lt;?&gt;" line="92"/>
                <scope line="93"/>
                <scope line="102">
                    <declaration name="slot" type="int" line="103"/>
                    <scope line="107">
                        <declaration name="pt" type="Class&lt;?&gt;" line="108"/>
                    </scope>
                </scope>
                <scope line="118">
                    <declaration name="slot" type="int" line="119"/>
                    <scope line="123"/>
                </scope>
                <scope line="138"/>
            </method>
            <javadoc line="147">
                Turn all primitive types to corresponding wrapper types.                
            </javadoc>
            <method name="primsAsBoxes" type="MethodType" line="149">
                <comment line="154">
                    no prims to box                    
                </comment>
                <declaration name="ct" type="MethodType" line="150"/>
                <declaration name="t" type="MethodType" line="152"/>
            </method>
            <javadoc line="158">
                Turn all primitive argument types to corresponding wrapper types.
                  Subword and void return types are promoted to int.                
            </javadoc>
            <method name="primArgsAsBoxes" type="MethodType" line="161">
                <comment line="166">
                    no prims to box                    
                </comment>
                <declaration name="ct" type="MethodType" line="162"/>
                <declaration name="t" type="MethodType" line="164"/>
            </method>
            <javadoc line="170">
                Turn all primitive types to either int or long.
                  Floating point return types are not changed, because
                  they may require special calling sequences.
                  A void return value is turned to int.                
            </javadoc>
            <method name="primsAsInts" type="MethodType" line="175">
                <comment line="180">
                    no prims to int-ify                    
                </comment>
                <declaration name="ct" type="MethodType" line="176"/>
                <declaration name="t" type="MethodType" line="178"/>
            </method>
            <javadoc line="184">
                Turn all primitive types to either int or long.
                  Floating point return types are not changed, because
                  they may require special calling sequences.
                  A void return value is turned to int.                
            </javadoc>
            <method name="primsAsLongs" type="MethodType" line="189">
                <comment line="194">
                    no prims to int-ify                    
                </comment>
                <declaration name="ct" type="MethodType" line="190"/>
                <declaration name="t" type="MethodType" line="192"/>
            </method>
            <javadoc line="198">
                Stably sort parameters into 3 buckets: ref, int, long.                
            </javadoc>
            <method name="primsAtEnd" type="MethodType" line="199">
                <comment line="213">
                    known to have a mix of 2 or 3 of ref, int, long                    
                </comment>
                <comment line="216">
                    System.out.println(&quot;t=&quot;+t+&quot; / reorder=&quot;+java.util.Arrays.toString(reorder)+&quot; =&gt; &quot;+ct);                    
                </comment>
                <declaration name="ct" type="MethodType" line="200"/>
                <declaration name="t" type="MethodType" line="202"/>
                <declaration name="pac" type="int" line="204"/>
                <declaration name="argc" type="int" line="208"/>
                <declaration name="lac" type="int" line="209"/>
                <declaration name="reorder" type="int[]" line="214"/>
            </method>
            <javadoc line="220">
                Compute a new ordering of parameters so that all references
                  are before all ints or longs, and all ints are before all longs.
                  For this ordering, doubles count as longs, and all other primitive
                  values count as ints.
                  As a special case, if the parameters are already in the specified
                  order, this method returns a null reference, rather than an array
                  specifying a null permutation.
                  &lt;p&gt;
                  For example, the type {@code (int,boolean,int,Object,String)void}produces the order {@code} 
                  3,4,0,1,2}}, the type{@code (long,int,String)void} produces {@code} 
                  2,1,2}}, and
                  the type {@code (Object,int)Object} produces {@code null}.                
            </javadoc>
            <method name="primsAtEndOrder" type="int[]" line="233">
                <params>
                    <param name="mt" type="MethodType"/>
                </params>
                <comment line="236">
                    quick check shows no reordering is necessary                    
                </comment>
                <comment line="242">
                    3-way bucket sort:                    
                </comment>
                <declaration name="form" type="MethodTypeForm" line="234"/>
                <declaration name="argc" type="int" line="239"/>
                <declaration name="paramOrder" type="int[]" line="240"/>
                <declaration name="pac" type="int" line="243"/>
                <declaration name="lac" type="int" line="244"/>
                <declaration name="rfill" type="int" line="245"/>
                <declaration name="ptypes" type="Class&lt;?&gt;[]" line="247"/>
                <declaration name="changed" type="boolean" line="248"/>
                <scope line="249">
                    <declaration name="pt" type="Class&lt;?&gt;" line="250"/>
                    <declaration name="ord" type="int" line="251"/>
                </scope>
                <scope line="260"/>
            </method>
            <javadoc line="267">
                Put the existing parameters of mt into a new order, given by newParamOrder.
                  The third argument is logically appended to mt.parameterArray,
                  so that elements of newParamOrder can index either pre-existing or
                  new parameter types.                
            </javadoc>
            <method name="reorderParameters" type="MethodType" line="272">
                <params>
                    <param name="mt" type="MethodType"/>
                    <param name="newParamOrder" type="int[]"/>
                    <param name="moreParams" type="Class<?>[]"/>
                </params>
                <comment line="273">
                    no-op reordering                    
                </comment>
                <declaration name="ptypes" type="Class&lt;?&gt;[]" line="274"/>
                <declaration name="ntypes" type="Class&lt;?&gt;[]" line="275"/>
                <declaration name="maxParam" type="int" line="276"/>
                <declaration name="changed" type="boolean" line="277"/>
                <scope line="278">
                    <declaration name="param" type="int" line="279"/>
                    <declaration name="nt" type="Class&lt;?&gt;" line="281"/>
                </scope>
            </method>
            <method name="hasTwoArgSlots" type="boolean" line="291">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <method name="pack" type="long" line="295">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="d" type="int"/>
                </params>
                <declaration name="hw" type="long" line="297"/>
            </method>
            <method name="unpack" type="char" line="300">
                <params>
                    <param name="packed" type="long"/>
                    <param name="word" type="int"/>
                </params>
            </method>
            <method name="parameterCount" type="int" line="305"/>
            <method name="parameterSlotCount" type="int" line="308"/>
            <method name="returnCount" type="int" line="311"/>
            <method name="returnSlotCount" type="int" line="314"/>
            <method name="primitiveParameterCount" type="int" line="317"/>
            <method name="longPrimitiveParameterCount" type="int" line="320"/>
            <method name="primitiveReturnCount" type="int" line="323"/>
            <method name="longPrimitiveReturnCount" type="int" line="326"/>
            <method name="hasPrimitives" type="boolean" line="329"/>
            <method name="hasLongPrimitives" type="boolean" line="337"/>
            <method name="parameterToArgSlot" type="int" line="340">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="argSlotToParameter" type="int" line="343">
                <params>
                    <param name="argSlot" type="int"/>
                </params>
                <comment line="344">
                    Note:  Empty slots are represented by zero in this table.                    
                </comment>
                <comment line="345">
                    Valid arguments slots contain incremented entries, so as to be non-zero.                    
                </comment>
                <comment line="346">
                    We return -1 the caller to mean an empty slot.                    
                </comment>
            </method>
            <method name="findForm" type="MethodTypeForm" line="350">
                <params>
                    <param name="mt" type="MethodType"/>
                </params>
                <comment line="353">
                    It is already erased.  Make a new MethodTypeForm.                    
                </comment>
                <comment line="356">
                    Share the MethodTypeForm with the erased version.                    
                </comment>
                <declaration name="erased" type="MethodType" line="351"/>
                <scope line="352"/>
                <scope line="355"/>
            </method>
            <declaration name="NO_CHANGE" type="int" line="361"/>
            <javadoc line="361">
                Codes for {@link #canonicalize(java.lang.Class,int)}.
                  ERASE means change every reference to {@code Object}.
                  WRAP means convert primitives (including {@code void} to their
                  corresponding wrapper types.  UNWRAP means the reverse of WRAP.
                  INTS means convert all non-void primitive types to int or long,
                  according to size.  LONGS means convert all non-void primitives
                  to long, regardless of size.  RAW_RETURN means convert a type
                  (assumed to be a return type) to int if it is smaller than an int,
                  or if it is void.                
            </javadoc>
            <javadoc line="373">
                Canonicalize the types in the given method type.
                  If any types change, intern the new type, and return it.
                  Otherwise return null.                
            </javadoc>
            <method name="canonicalize" type="MethodType" line="377">
                <params>
                    <param name="mt" type="MethodType"/>
                    <param name="howRet" type="int"/>
                    <param name="howArgs" type="int"/>
                </params>
                <comment line="383">
                    It is already canonical.                    
                </comment>
                <comment line="386">
                    Find the erased version of the method type:                    
                </comment>
                <declaration name="ptypes" type="Class&lt;?&gt;[]" line="378"/>
                <declaration name="ptc" type="Class&lt;?&gt;[]" line="379"/>
                <declaration name="rtype" type="Class&lt;?&gt;" line="380"/>
                <declaration name="rtc" type="Class&lt;?&gt;" line="381"/>
                <scope line="382"/>
            </method>
            <javadoc line="392">
                Canonicalize the given return or param type.
                  Return null if the type is already canonicalized.                
            </javadoc>
            <method name="canonicalize" type="Class<?>" line="395">
                <params>
                    <param name="t" type="Class<?>"/>
                    <param name="how" type="int"/>
                </params>
                <comment line="398">
                    no change, ever                    
                </comment>
                <comment line="410">
                    no change, usually                    
                </comment>
                <comment line="418">
                    non-void primitive                    
                </comment>
                <comment line="424">
                    no change                    
                </comment>
                <comment line="430">
                    no change                    
                </comment>
                <comment line="435">
                    no change                    
                </comment>
                <comment line="436">
                    everything else returns as an int                    
                </comment>
                <comment line="440">
                    no change; return null to signify                    
                </comment>
                <declaration name="ct" type="Class&lt;?&gt;" line="396"/>
                <scope line="397"/>
                <scope line="399"/>
                <scope line="409"/>
                <scope line="417"/>
            </method>
            <javadoc line="444">
                Canonicalize each param type in the given array.
                  Return null if all types are already canonicalized.                
            </javadoc>
            <method name="canonicalizes" type="Class<?>[]" line="447">
                <params>
                    <param name="ts" type="Class<?>[]"/>
                    <param name="how" type="int"/>
                </params>
                <comment line="452">
                    a Void parameter was unwrapped to void; ignore                    
                </comment>
                <declaration name="cs" type="Class&lt;?&gt;[]" line="448"/>
                <scope line="449">
                    <declaration name="c" type="Class&lt;?&gt;" line="450"/>
                    <scope line="453"/>
                </scope>
            </method>
            <method name="notifyGenericMethodType" type="void" line="462">
                <comment line="465">
                    Trigger adapter creation.                    
                </comment>
                <scope line="464"/>
                <scope line="467">
                    <declaration name="err" type="Error" line="468"/>
                </scope>
            </method>
            <method name="toString" type="String" line="475"/>
        </class>
    </source>