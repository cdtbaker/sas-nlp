<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.Wrapper"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <class name="MethodTypeForm" line="4">
            <javadoc line="4">
                Shared information for a group of method types, which differ
                  only by reference types, and therefore share a common erasure
                  and wrapping.
                  &lt;p&gt;
                  For an empirical discussion of the structure of method types,
                  see &lt;a href=&quot;http://groups.google.com/group/jvm-languages/browse_thread/thread/ac9308ae74da9b7e/&quot;&gt;
                  the thread &quot;Avoiding Boxing&quot; on jvm-languages&lt;/a&gt;.
                  There are approximately 2000 distinct erased method types in the JDK.
                  There are a little over 10 times that number of unerased types.
                  No more than half of these are likely to be loaded at once.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="argToSlotTable" type="int[]" line="18"/>
            <declaration name="argCounts" type="long" line="19"/>
            <declaration name="primCounts" type="long" line="20"/>
            <declaration name="vmslots" type="int" line="21"/>
            <declaration name="vmlayout" type="Object" line="22"/>
            <declaration name="erasedType" type="MethodType" line="23"/>
            <declaration name="primsAsBoxes" type="MethodType" line="24"/>
            <declaration name="primArgsAsBoxes" type="MethodType" line="25"/>
            <declaration name="primsAsInts" type="MethodType" line="26"/>
            <declaration name="primsAsLongs" type="MethodType" line="27"/>
            <declaration name="primsAtEnd" type="MethodType" line="28"/>
            <declaration name="toGeneric" type="ToGeneric" line="29"/>
            <declaration name="fromGeneric" type="FromGeneric" line="30"/>
            <declaration name="spreadGeneric" type="SpreadGeneric[]" line="31"/>
            <declaration name="filterGeneric" type="FilterGeneric" line="32"/>
            <declaration name="genericInvoker" type="MethodHandle" line="33"/>
            <method name="erasedType" type="MethodType" line="34"/>
            <method name="MethodTypeForm" type="constructor" line="37">
                <params>
                    <param name="erasedType" type="MethodType"/>
                </params>
                <declaration name="ptypes" type="Class&amp;lt;?&amp;gt;[]" line="39"/>
                <declaration name="ptypeCount" type="int" line="40"/>
                <declaration name="pslotCount" type="int" line="41"/>
                <declaration name="rtypeCount" type="int" line="42"/>
                <declaration name="rslotCount" type="int" line="43"/>
                <declaration name="argToSlotTab" type="int[]" line="44"/>
                <declaration name="pac" type="int" line="45"/>
                <declaration name="epts" type="Class&amp;lt;?&amp;gt;" line="46"/>
                <scope line="47">
                    <declaration name="pt" type="Class&amp;lt;?&amp;gt;" line="48"/>
                    <scope line="49"/>
                </scope>
                <declaration name="rt" type="Class&amp;lt;?&amp;gt;" line="56"/>
                <scope line="57"/>
                <scope line="63">
                    <declaration name="slot" type="int" line="64"/>
                    <scope line="68">
                        <declaration name="pt" type="Class&amp;lt;?&amp;gt;" line="69"/>
                    </scope>
                </scope>
                <scope line="79">
                    <declaration name="slot" type="int" line="80"/>
                    <scope line="84"/>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="102">
                Turn all primitive types to corresponding wrapper types.                
            </javadoc>
            <method name="primsAsBoxes" type="MethodType" line="105">
                <declaration name="ct" type="MethodType" line="106"/>
                <declaration name="t" type="MethodType" line="108"/>
            </method>
            <javadoc line="113">
                Turn all primitive argument types to corresponding wrapper types.
                  Subword and void return types are promoted to int.                
            </javadoc>
            <method name="primArgsAsBoxes" type="MethodType" line="117">
                <declaration name="ct" type="MethodType" line="118"/>
                <declaration name="t" type="MethodType" line="120"/>
            </method>
            <javadoc line="125">
                Turn all primitive types to either int or long.
                  Floating point return types are not changed, because
                  they may require special calling sequences.
                  A void return value is turned to int.                
            </javadoc>
            <method name="primsAsInts" type="MethodType" line="131">
                <declaration name="ct" type="MethodType" line="132"/>
                <declaration name="t" type="MethodType" line="134"/>
            </method>
            <javadoc line="139">
                Turn all primitive types to either int or long.
                  Floating point return types are not changed, because
                  they may require special calling sequences.
                  A void return value is turned to int.                
            </javadoc>
            <method name="primsAsLongs" type="MethodType" line="145">
                <declaration name="ct" type="MethodType" line="146"/>
                <declaration name="t" type="MethodType" line="148"/>
            </method>
            <javadoc line="153">
                Stably sort parameters into 3 buckets: ref, int, long.                
            </javadoc>
            <method name="primsAtEnd" type="MethodType" line="156">
                <declaration name="ct" type="MethodType" line="157"/>
                <declaration name="t" type="MethodType" line="159"/>
                <declaration name="pac" type="int" line="160"/>
                <declaration name="argc" type="int" line="162"/>
                <declaration name="lac" type="int" line="163"/>
                <declaration name="reorder" type="int[]" line="165"/>
            </method>
            <javadoc line="169">
                Compute a new ordering of parameters so that all references
                  are before all ints or longs, and all ints are before all longs.
                  For this ordering, doubles count as longs, and all other primitive
                  values count as ints.
                  As a special case, if the parameters are already in the specified
                  order, this method returns a null reference, rather than an array
                  specifying a null permutation.
                  &lt;p&gt;
                  For example, the type {@code (int,boolean,int,Object,String)void}produces the order {@code} 
                  3,4,0,1,2}}, the type{@code (long,int,String)void} produces {@code} 
                  2,1,2}}, and
                  the type {@code (Object,int)Object} produces {@code null}.                
            </javadoc>
            <method name="primsAtEndOrder" type="int[]" line="183">
                <params>
                    <param name="mt" type="MethodType"/>
                </params>
                <declaration name="form" type="MethodTypeForm" line="184"/>
                <declaration name="argc" type="int" line="186"/>
                <declaration name="paramOrder" type="int[]" line="187"/>
                <declaration name="pac" type="int" line="188"/>
                <declaration name="lac" type="int" line="189"/>
                <declaration name="rfill" type="int" line="190"/>
                <declaration name="ptypes" type="Class&amp;lt;?&amp;gt;[]" line="191"/>
                <declaration name="changed" type="boolean" line="192"/>
                <scope line="193">
                    <declaration name="pt" type="Class&amp;lt;?&amp;gt;" line="194"/>
                    <declaration name="ord" type="int" line="195"/>
                </scope>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Put the existing parameters of mt into a new order, given by newParamOrder.
                  The third argument is logically appended to mt.parameterArray,
                  so that elements of newParamOrder can index either pre-existing or
                  new parameter types.                
            </javadoc>
            <method name="reorderParameters" type="MethodType" line="216">
                <params>
                    <param name="mt" type="MethodType"/>
                    <param name="newParamOrder" type="int[]"/>
                    <param name="moreParams" type="Class&lt;?&gt;[]"/>
                </params>
                <declaration name="ptypes" type="Class&amp;lt;?&amp;gt;[]" line="218"/>
                <declaration name="ntypes" type="Class&amp;lt;?&amp;gt;[]" line="219"/>
                <declaration name="maxParam" type="int" line="220"/>
                <declaration name="changed" type="boolean" line="221"/>
                <scope line="222">
                    <declaration name="param" type="int" line="223"/>
                    <declaration name="nt" type="Class&amp;lt;?&amp;gt;" line="225"/>
                </scope>
            </method>
            <method name="hasTwoArgSlots" type="boolean" line="234">
                <params>
                    <param name="type" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <method name="pack" type="long" line="237">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="d" type="int"/>
                </params>
                <declaration name="hw" type="long" line="239"/>
            </method>
            <method name="unpack" type="char" line="242">
                <params>
                    <param name="packed" type="long"/>
                    <param name="word" type="int"/>
                </params>
            </method>
            <method name="parameterCount" type="int" line="246"/>
            <method name="parameterSlotCount" type="int" line="249"/>
            <method name="returnCount" type="int" line="252"/>
            <method name="returnSlotCount" type="int" line="255"/>
            <method name="primitiveParameterCount" type="int" line="258"/>
            <method name="longPrimitiveParameterCount" type="int" line="261"/>
            <method name="primitiveReturnCount" type="int" line="264"/>
            <method name="longPrimitiveReturnCount" type="int" line="267"/>
            <method name="hasPrimitives" type="boolean" line="270"/>
            <method name="hasLongPrimitives" type="boolean" line="273"/>
            <method name="parameterToArgSlot" type="int" line="276">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="argSlotToParameter" type="int" line="279">
                <params>
                    <param name="argSlot" type="int"/>
                </params>
            </method>
            <method name="findForm" type="MethodTypeForm" line="282">
                <params>
                    <param name="mt" type="MethodType"/>
                </params>
                <declaration name="erased" type="MethodType" line="283"/>
                <scope line="284"/>
                <scope line="287"/>
            </method>
            <declaration name="NO_CHANGE" type="int" line="291"/>
            <javadoc line="291">
                Codes for {@link #canonicalize(java.lang.Class,int)}.
                  ERASE means change every reference to {@code Object}.
                  WRAP means convert primitives (including {@code void} to their
                  corresponding wrapper types.  UNWRAP means the reverse of WRAP.
                  INTS means convert all non-void primitive types to int or long,
                  according to size.  LONGS means convert all non-void primitives
                  to long, regardless of size.  RAW_RETURN means convert a type
                  (assumed to be a return type) to int if it is smaller than an int,
                  or if it is void.                
            </javadoc>
            <javadoc line="303">
                Canonicalize the types in the given method type.
                  If any types change, intern the new type, and return it.
                  Otherwise return null.                
            </javadoc>
            <method name="canonicalize" type="MethodType" line="308">
                <params>
                    <param name="mt" type="MethodType"/>
                    <param name="howRet" type="int"/>
                    <param name="howArgs" type="int"/>
                </params>
                <declaration name="ptypes" type="Class&amp;lt;?&amp;gt;[]" line="309"/>
                <declaration name="ptc" type="Class&amp;lt;?&amp;gt;[]" line="310"/>
                <declaration name="rtype" type="Class&amp;lt;?&amp;gt;" line="311"/>
                <declaration name="rtc" type="Class&amp;lt;?&amp;gt;" line="312"/>
                <scope line="313"/>
            </method>
            <javadoc line="320">
                Canonicalize the given return or param type.
                  Return null if the type is already canonicalized.                
            </javadoc>
            <method name="canonicalize" type="Class&lt;?&gt;" line="324">
                <params>
                    <param name="t" type="Class&lt;?&gt;"/>
                    <param name="how" type="int"/>
                </params>
                <declaration name="ct" type="Class&amp;lt;?&amp;gt;" line="325"/>
                <scope line="326"/>
                <scope line="328"/>
                <scope line="339"/>
                <scope line="347"/>
            </method>
            <javadoc line="365">
                Canonicalize each param type in the given array.
                  Return null if all types are already canonicalized.                
            </javadoc>
            <method name="canonicalizes" type="Class&lt;?&gt;[]" line="369">
                <params>
                    <param name="ts" type="Class&lt;?&gt;[]"/>
                    <param name="how" type="int"/>
                </params>
                <declaration name="cs" type="Class&amp;lt;?&amp;gt;[]" line="370"/>
                <scope line="371">
                    <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="372"/>
                    <scope line="374"/>
                </scope>
            </method>
            <method name="notifyGenericMethodType" type="void" line="381">
                <scope line="383"/>
                <scope line="386">
                    <declaration name="err" type="Error" line="387"/>
                </scope>
            </method>
            <method name="toString" type="String" line="392"/>
        </class>
    </source>