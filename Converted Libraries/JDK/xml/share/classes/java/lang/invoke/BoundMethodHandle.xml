<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.VerifyType"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <class name="BoundMethodHandle" line="5">
            <extends class="MethodHandle"/>
            <javadoc line="5">
                The flavor of method handle which emulates an invoke instruction
                  on a predetermined argument.  The JVM dispatches to the correct method
                  when the handle is created, not when it is invoked.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="argument" type="Object" line="12"/>
            <declaration name="vmargslot" type="int" line="13"/>
            <javadoc line="14">
                Bind a direct MH to its receiver (or first ref. argument).
                  The JVM will pre-dispatch the MH if it is not already static.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="18">
                <params>
                    <param name="mh" type="DirectMethodHandle"/>
                    <param name="argument" type="Object"/>
                </params>
            </method>
            <javadoc line="24">
                Insert an argument into an arbitrary method handle.
                  If argnum is zero, inserts the first argument, etc.
                  The argument type must be a reference.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="29">
                <params>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argument" type="Object"/>
                    <param name="argnum" type="int"/>
                </params>
            </method>
            <javadoc line="32">
                Insert an argument into an arbitrary method handle.
                  If argnum is zero, inserts the first argument, etc.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="36">
                <params>
                    <param name="type" type="MethodType"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argument" type="Object"/>
                    <param name="argnum" type="int"/>
                </params>
                <scope line="39"/>
            </method>
            <method name="initTarget" type="void" line="45">
                <params>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
            </method>
            <javadoc line="48">
                For the AdapterMethodHandle subclass.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="51">
                <params>
                    <param name="type" type="MethodType"/>
                    <param name="argument" type="Object"/>
                    <param name="vmargslot" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Initialize the current object as a self-bound method handle, binding it
                  as the first argument of the method handle {@code entryPoint}.
                  The invocation type of the resulting method handle will be the
                  same as {@code entryPoint},  except that the first argument
                  type will be dropped.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="64">
                <params>
                    <param name="entryPoint" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="70">
                Make sure the given {@code argument} can be used as {@code argnum}-th
                  parameter of the given method handle {@code mh}, which must be a reference.
                  &lt;p&gt;
                  If this fails, throw a suitable {@code WrongMethodTypeException},
                  which will prevent the creation of an illegally typed bound
                  method handle.                
            </javadoc>
            <method name="checkReferenceArgument" type="Object" line="78">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="ptype" type="Class&amp;lt;?&amp;gt;" line="79"/>
                <scope line="80"/>
                <scope line="82"/>
                <scope line="85"/>
            </method>
            <javadoc line="90">
                Make sure the given {@code argument} can be used as {@code argnum}-th
                  parameter of the given method handle {@code mh}, which must be a primitive.
                  &lt;p&gt;
                  If this fails, throw a suitable {@code WrongMethodTypeException},
                  which will prevent the creation of an illegally typed bound
                  method handle.                
            </javadoc>
            <method name="bindPrimitiveArgument" type="Object" line="98">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="ptype" type="Class&amp;lt;?&amp;gt;" line="99"/>
                <declaration name="wrap" type="Wrapper" line="100"/>
                <declaration name="zero" type="Object" line="101"/>
                <scope line="102"/>
                <scope line="104"/>
                <scope line="108"/>
            </method>
            <method name="badBoundArgumentException" type="RuntimeException" line="114">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="atype" type="String" line="115"/>
            </method>
            <method name="debugString" type="String" line="118"/>
            <javadoc line="121">
                Component of toString() before the type string.                
            </javadoc>
            <method name="baseName" type="String" line="124">
                <declaration name="mh" type="MethodHandle" line="125"/>
                <scope line="126">
                    <declaration name="info" type="Object" line="127"/>
                    <scope line="128"/>
                    <scope line="131">
                        <declaration name="name" type="String" line="132"/>
                    </scope>
                </scope>
            </method>
            <method name="noParens" type="String" line="141">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="paren" type="int" line="142"/>
            </method>
        </class>
    </source>