<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.VerifyType"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <class name="BoundMethodHandle" line="32">
            <extends class="MethodHandle"/>
            <comment line="40">
                MethodHandle vmtarget;           // next BMH or final DMH or methodOop                
            </comment>
            <comment line="41">
                argument to insert                
            </comment>
            <comment line="42">
                position at which it is inserted                
            </comment>
            <comment line="44">
                Constructors in this class *must* be package scoped or private.                
            </comment>
            <javadoc line="32">
                The flavor of method handle which emulates an invoke instruction
                  on a predetermined argument.  The JVM dispatches to the correct method
                  when the handle is created, not when it is invoked.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="argument" type="Object" line="40"/>
            <declaration name="vmargslot" type="int" line="41"/>
            <javadoc line="45">
                Bind a direct MH to its receiver (or first ref. argument).
                  The JVM will pre-dispatch the MH if it is not already static.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="48">
                <params>
                    <param name="mh" type="DirectMethodHandle"/>
                    <param name="argument" type="Object"/>
                </params>
                <comment line="49">
                                        
                </comment>
                <comment line="51">
                    check the type now, once for all:                    
                </comment>
            </method>
            <javadoc line="56">
                Insert an argument into an arbitrary method handle.
                  If argnum is zero, inserts the first argument, etc.
                  The argument type must be a reference.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="60">
                <params>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argument" type="Object"/>
                    <param name="argnum" type="int"/>
                </params>
                <comment line="61">
                                        
                </comment>
            </method>
            <javadoc line="65">
                Insert an argument into an arbitrary method handle.
                  If argnum is zero, inserts the first argument, etc.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="68">
                <params>
                    <param name="type" type="MethodType"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argument" type="Object"/>
                    <param name="argnum" type="int"/>
                </params>
                <comment line="69">
                                        
                </comment>
                <scope line="72"/>
            </method>
            <method name="initTarget" type="void" line="79">
                <params>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <comment line="81">
                    this.vmtarget = mh;  // maybe updated by JVM                    
                </comment>
            </method>
            <javadoc line="84">
                For the AdapterMethodHandle subclass.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="86">
                <params>
                    <param name="type" type="MethodType"/>
                    <param name="argument" type="Object"/>
                    <param name="vmargslot" type="int"/>
                </params>
                <comment line="87">
                                        
                </comment>
            </method>
            <javadoc line="93">
                Initialize the current object as a self-bound method handle, binding it
                  as the first argument of the method handle {@code entryPoint}.
                  The invocation type of the resulting method handle will be the
                  same as {@code entryPoint},  except that the first argument
                  type will be dropped.                
            </javadoc>
            <method name="BoundMethodHandle" type="constructor" line="99">
                <params>
                    <param name="entryPoint" type="MethodHandle"/>
                </params>
                <comment line="100">
                                        
                </comment>
                <comment line="102">
                    kludge; get rid of                    
                </comment>
            </method>
            <javadoc line="106">
                Make sure the given {@code argument} can be used as {@code argnum}-th
                  parameter of the given method handle {@code mh}, which must be a reference.
                  &lt;p&gt;
                  If this fails, throw a suitable {@code WrongMethodTypeException},
                  which will prevent the creation of an illegally typed bound
                  method handle.                
            </javadoc>
            <method name="checkReferenceArgument" type="Object" line="113">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <comment line="117">
                    fail                    
                </comment>
                <declaration name="ptype" type="Class&lt;?&gt;" line="114"/>
                <scope line="115"/>
                <scope line="117"/>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Make sure the given {@code argument} can be used as {@code argnum}-th
                  parameter of the given method handle {@code mh}, which must be a primitive.
                  &lt;p&gt;
                  If this fails, throw a suitable {@code WrongMethodTypeException},
                  which will prevent the creation of an illegally typed bound
                  method handle.                
            </javadoc>
            <method name="bindPrimitiveArgument" type="Object" line="132">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <comment line="138">
                    fail                    
                </comment>
                <declaration name="ptype" type="Class&lt;?&gt;" line="133"/>
                <declaration name="wrap" type="Wrapper" line="134"/>
                <declaration name="zero" type="Object" line="135"/>
                <scope line="136"/>
                <scope line="138"/>
                <scope line="143"/>
            </method>
            <method name="badBoundArgumentException" type="RuntimeException" line="152">
                <params>
                    <param name="argument" type="Object"/>
                    <param name="mh" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="atype" type="String" line="153"/>
            </method>
            <method name="debugString" type="String" line="158"/>
            <javadoc line="162">
                Component of toString() before the type string.                
            </javadoc>
            <method name="baseName" type="String" line="163">
                <comment line="177">
                    &quot;invoke&quot;, probably                    
                </comment>
                <declaration name="mh" type="MethodHandle" line="164"/>
                <scope line="165">
                    <declaration name="info" type="Object" line="166"/>
                    <scope line="167"/>
                    <scope line="169">
                        <declaration name="name" type="String" line="170"/>
                    </scope>
                </scope>
            </method>
            <method name="noParens" type="String" line="183">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="paren" type="int" line="184"/>
            </method>
        </class>
    </source>