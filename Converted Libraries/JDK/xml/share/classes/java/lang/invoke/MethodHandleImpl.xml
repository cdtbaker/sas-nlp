<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.VerifyType"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="sun.invoke.empty.Empty"/>
        <import package="sun.invoke.util.ValueConversions"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="sun.misc.Unsafe"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="MethodHandleImpl" line="43">
            <comment line="48">
                                
            </comment>
            <comment line="49">
                / Factory methods to create method handles:                
            </comment>
            <comment line="716">
                                
            </comment>
            <comment line="792">
                called internally only                
            </comment>
            <comment line="1263">
                Linkage support:                
            </comment>
            <javadoc line="43">
                Trusted implementation code for MethodHandle.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="LOOKUP" type="MemberName.Factory" line="50"/>
            <method name="initStatics" type="void" line="52">
                <comment line="53">
                    Trigger preceding sequence.                    
                </comment>
            </method>
            <javadoc line="56">
                Look up a given method.
                  Callable only from sun.invoke and related packages.
                  &lt;p&gt;
                  The resulting method handle type will be of the given type,
                  with a receiver type {@code rcvc} prepended if the member is not static.
                  &lt;p&gt;
                  Access checks are made as of the given lookup class.
                  In particular, if the method is protected and {@code defc} is in a
                  different package from the lookup class, then {@code rcvc} must be
                  the lookup class or a subclass.                
                <param>
                    token Proof that the lookup class has access to this package.                    
                </param>
                <param>
                    member Resolved method or constructor to call.                    
                </param>
                <param>
                    name Name of the desired method.                    
                </param>
                <param>
                    rcvc Receiver type of desired non-static method (else null)                    
                </param>
                <param>
                    doDispatch whether the method handle will test the receiver type                    
                </param>
                <param>
                    lookupClass access-check relative to this class                    
                </param>
                <return>
                    a direct handle to the matching method                    
                </return>
                <throws>
                    IllegalAccessException if the given method cannot be accessed by the lookup class                    
                </throws>
            </javadoc>
            <method name="findMethod" type="MethodHandle" line="77">
                <params>
                    <param name="method" type="MemberName"/>
                    <param name="doDispatch" type="boolean"/>
                    <param name="lookupClass" type="Class<?>"/>
                </params>
                <comment line="80">
                    adjust the advertised receiver type to be exactly the one requested                    
                </comment>
                <comment line="81">
                    (in the case of invokespecial, this will be the calling class)                    
                </comment>
                <declaration name="mtype" type="MethodType" line="78"/>
                <scope line="79">
                    <declaration name="recvType" type="Class&lt;?&gt;" line="82"/>
                </scope>
                <declaration name="mh" type="DirectMethodHandle" line="85"/>
                <declaration name="argc" type="int" line="91"/>
                <scope line="92">
                    <declaration name="arrayType" type="Class&lt;?&gt;" line="93"/>
                </scope>
            </method>
            <method name="makeAllocator" type="MethodHandle" line="101">
                <params>
                    <param name="rawConstructor" type="MethodHandle"/>
                </params>
                <comment line="104">
                    Wrap the raw (unsafe) constructor with the allocation of a suitable object.                    
                </comment>
                <comment line="106">
                    allocator(arg...)                    
                </comment>
                <comment line="107">
                    [fold]=&gt; cookedConstructor(obj=allocate(C), arg...)                    
                </comment>
                <comment line="108">
                    [dup,collect]=&gt; identity(obj, void=rawConstructor(obj, arg...))                    
                </comment>
                <comment line="116">
                    allocate() =&gt; new C(void)                    
                </comment>
                <comment line="122">
                    this code is deprecated                    
                </comment>
                <declaration name="rawConType" type="MethodType" line="102"/>
                <declaration name="allocateClass" type="Class&lt;?&gt;" line="103"/>
                <scope line="105">
                    <declaration name="returner" type="MethodHandle" line="109"/>
                    <declaration name="ctype" type="MethodType" line="110"/>
                    <declaration name="cookedConstructor" type="MethodHandle" line="111"/>
                    <declaration name="allocator" type="MethodHandle" line="115"/>
                    <declaration name="fold" type="MethodHandle" line="119"/>
                </scope>
                <declaration name="allocator" type="MethodHandle" line="123"/>
            </method>
            <class name="AllocateObject" line="130">
                <type_params>
                    <type_param name="C"/>
                </type_params>
                <extends class="BoundMethodHandle"/>
                <comment line="144">
                    for allocation only:                    
                </comment>
                <comment line="249">
                    For testing use this:                    
                </comment>
                <comment line="250">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="261">
                    Corresponding generic constructor types:                    
                </comment>
                <comment line="307">
                    for static refs only                    
                </comment>
                <comment line="340">
                    cast (V) is OK here, since we wrap convertArguments around the MH.                    
                </comment>
                <comment line="420">
                    / Support for array element access                    
                </comment>
                <comment line="423">
                    FIXME: Cache on the classes themselves, not here.                    
                </comment>
                <comment line="1027">
                    For testing use this:                    
                </comment>
                <comment line="1028">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="1093">
                    FIXME: Build the control flow out of foldArguments.                    
                </comment>
                <comment line="1203">
                    For testing use this:                    
                </comment>
                <comment line="1204">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <declaration name="unsafe" type="Unsafe" line="131"/>
                <declaration name="allocateClass" type="Class&lt;C&gt;" line="133"/>
                <declaration name="rawConstructor" type="MethodHandle" line="134"/>
                <method name="AllocateObject" type="constructor" line="137">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="allocateClass" type="Class<C>"/>
                        <param name="rawConstructor" type="MethodHandle"/>
                    </params>
                    <comment line="141">
                        this code is deprecated                        
                    </comment>
                </method>
                <method name="AllocateObject" type="constructor" line="144">
                    <params>
                        <param name="allocateClass" type="Class<C>"/>
                    </params>
                </method>
                <method name="make" type="MethodHandle" line="149">
                    <params>
                        <param name="allocateClass" type="Class<?>"/>
                        <param name="rawConstructor" type="MethodHandle"/>
                    </params>
                    <comment line="150">
                        this code is deprecated                        
                    </comment>
                    <declaration name="rawConType" type="MethodType" line="151"/>
                    <declaration name="newType" type="MethodType" line="153"/>
                    <declaration name="nargs" type="int" line="154"/>
                    <scope line="155">
                        <declaration name="invoke" type="MethodHandle" line="156"/>
                        <declaration name="conType" type="MethodType" line="157"/>
                        <declaration name="gcon" type="MethodHandle" line="158"/>
                        <declaration name="galloc" type="MethodHandle" line="160"/>
                    </scope>
                    <scope line="163">
                        <declaration name="invoke" type="MethodHandle" line="164"/>
                        <declaration name="conType" type="MethodType" line="165"/>
                        <declaration name="gcon" type="MethodHandle" line="166"/>
                        <declaration name="galloc" type="MethodHandle" line="168"/>
                    </scope>
                </method>
                <method name="debugString" type="String" line="173"/>
                <method name="allocate" type="C" line="177"/>
                <method name="invoke_V" type="C" line="180">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="181"/>
                </method>
                <method name="invoke_L0" type="C" line="185">
                    <declaration name="obj" type="C" line="186"/>
                </method>
                <method name="invoke_L1" type="C" line="190">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="191"/>
                </method>
                <method name="invoke_L2" type="C" line="195">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="196"/>
                </method>
                <method name="invoke_L3" type="C" line="200">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="201"/>
                </method>
                <method name="invoke_L4" type="C" line="205">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="206"/>
                </method>
                <method name="invoke_L5" type="C" line="210">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="211"/>
                </method>
                <method name="invoke_L6" type="C" line="215">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="216"/>
                </method>
                <method name="invoke_L7" type="C" line="220">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="221"/>
                </method>
                <method name="invoke_L8" type="C" line="225">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="226"/>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="230">
                    <comment line="244">
                        current number of methods                        
                    </comment>
                    <declaration name="invokes" type="ArrayList&lt;MethodHandle&gt;" line="231"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="232"/>
                    <scope line="233">
                        <declaration name="nargs" type="int" line="234"/>
                        <declaration name="name" type="String" line="235"/>
                        <declaration name="invoke" type="MethodHandle" line="236"/>
                        <scope line="237"/>
                        <scope line="239"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="247"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="250"/>
                <declaration name="ALLOCATE" type="MethodHandle" line="251"/>
                <scope line="252">
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
                <declaration name="CON_TYPES" type="MethodType[]" line="261"/>
                <scope line="262"/>
                <declaration name="VARARGS_CON_TYPE" type="MethodType" line="266"/>
                <method name="makeConType" type="MethodType" line="267">
                    <params>
                        <param name="invoke" type="MethodHandle"/>
                    </params>
                    <declaration name="invType" type="MethodType" line="268"/>
                </method>
            </class>
            <method name="accessField" type="MethodHandle" line="275">
                <params>
                    <param name="member" type="MemberName"/>
                    <param name="isSetter" type="boolean"/>
                    <param name="lookupClass" type="Class<?>"/>
                </params>
                <comment line="276">
                    Use sun. misc.Unsafe to dig up the dirt on the field.                    
                </comment>
                <declaration name="mh" type="MethodHandle" line="277"/>
            </method>
            <method name="accessArrayElement" type="MethodHandle" line="282">
                <params>
                    <param name="arrayClass" type="Class<?>"/>
                    <param name="isSetter" type="boolean"/>
                </params>
                <comment line="298">
                    memory barrier                    
                </comment>
                <declaration name="elemClass" type="Class&lt;?&gt;" line="285"/>
                <declaration name="mhs" type="MethodHandle[]" line="286"/>
                <scope line="287">
                    <scope line="294"/>
                    <scope line="298"/>
                </scope>
            </method>
            <class name="FieldAccessor" line="304">
                <type_params>
                    <type_param name="C"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="BoundMethodHandle"/>
                <comment line="144">
                    for allocation only:                    
                </comment>
                <comment line="249">
                    For testing use this:                    
                </comment>
                <comment line="250">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="261">
                    Corresponding generic constructor types:                    
                </comment>
                <comment line="307">
                    for static refs only                    
                </comment>
                <comment line="340">
                    cast (V) is OK here, since we wrap convertArguments around the MH.                    
                </comment>
                <comment line="420">
                    / Support for array element access                    
                </comment>
                <comment line="423">
                    FIXME: Cache on the classes themselves, not here.                    
                </comment>
                <comment line="1027">
                    For testing use this:                    
                </comment>
                <comment line="1028">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="1093">
                    FIXME: Build the control flow out of foldArguments.                    
                </comment>
                <comment line="1203">
                    For testing use this:                    
                </comment>
                <comment line="1204">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <declaration name="unsafe" type="Unsafe" line="305"/>
                <declaration name="base" type="Object" line="306"/>
                <declaration name="offset" type="long" line="307"/>
                <declaration name="name" type="String" line="308"/>
                <method name="FieldAccessor" type="constructor" line="310">
                    <params>
                        <param name="field" type="MemberName"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                </method>
                <method name="debugString" type="String" line="317"/>
                <method name="getFieldI" type="int" line="319">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldI" type="void" line="320">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getFieldJ" type="long" line="321">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldJ" type="void" line="322">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getFieldF" type="float" line="323">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldF" type="void" line="324">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getFieldD" type="double" line="325">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldD" type="void" line="326">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getFieldZ" type="boolean" line="327">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldZ" type="void" line="328">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getFieldB" type="byte" line="329">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldB" type="void" line="330">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getFieldS" type="short" line="331">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldS" type="void" line="332">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getFieldC" type="char" line="333">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldC" type="void" line="334">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getFieldL" type="V" line="336">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldL" type="void" line="338">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="staticBase" type="Object" line="341">
                    <params>
                        <param name="field" type="MemberName"/>
                    </params>
                    <comment line="347">
                        FIXME:  Should not have to create &apos;f&apos; to get this value.                        
                    </comment>
                    <anonymous_class line="343">
                        <method name="run" type="Object" line="344">
                            <comment line="347">
                                FIXME:  Should not have to create &apos;f&apos; to get this value.                                
                            </comment>
                            <scope line="345">
                                <declaration name="c" type="Class" line="346"/>
                                <declaration name="f" type="java.lang.reflect.Field" line="348"/>
                            </scope>
                            <scope line="350"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getStaticI" type="int" line="357"/>
                <method name="setStaticI" type="void" line="358">
                    <params>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getStaticJ" type="long" line="359"/>
                <method name="setStaticJ" type="void" line="360">
                    <params>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getStaticF" type="float" line="361"/>
                <method name="setStaticF" type="void" line="362">
                    <params>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getStaticD" type="double" line="363"/>
                <method name="setStaticD" type="void" line="364">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getStaticZ" type="boolean" line="365"/>
                <method name="setStaticZ" type="void" line="366">
                    <params>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getStaticB" type="byte" line="367"/>
                <method name="setStaticB" type="void" line="368">
                    <params>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getStaticS" type="short" line="369"/>
                <method name="setStaticS" type="void" line="370">
                    <params>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getStaticC" type="char" line="371"/>
                <method name="setStaticC" type="void" line="372">
                    <params>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getStaticL" type="V" line="373"/>
                <method name="setStaticL" type="void" line="374">
                    <params>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="fname" type="String" line="376">
                    <params>
                        <param name="vclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <declaration name="stem" type="String" line="377"/>
                </method>
                <method name="ftype" type="MethodType" line="384">
                    <params>
                        <param name="cclass" type="Class<?>"/>
                        <param name="vclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <declaration name="type" type="MethodType" line="385"/>
                    <scope line="386"/>
                    <scope line="391"/>
                </method>
                <method name="fhandle" type="MethodHandle" line="398">
                    <params>
                        <param name="cclass" type="Class<?>"/>
                        <param name="vclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <comment line="401">
                        erase this type                        
                    </comment>
                    <declaration name="name" type="String" line="399"/>
                    <declaration name="ecclass" type="Class&lt;?&gt;" line="401"/>
                    <declaration name="evclass" type="Class&lt;?&gt;" line="402"/>
                    <declaration name="type" type="MethodType" line="404"/>
                    <declaration name="mh" type="MethodHandle" line="405"/>
                    <scope line="406"/>
                    <scope line="408"/>
                    <scope line="411">
                        <declaration name="strongType" type="MethodType" line="412"/>
                    </scope>
                </method>
                <declaration name="ARRAY_CACHE" type="HashMap&lt;Class&lt;?&gt;,MethodHandle[]&gt;" line="420"/>
                <method name="doCache" type="boolean" line="423">
                    <params>
                        <param name="elemClass" type="Class<?>"/>
                    </params>
                    <declaration name="cl" type="ClassLoader" line="425"/>
                </method>
                <method name="getElementI" type="int" line="428">
                    <params>
                        <param name="a" type="int[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementI" type="void" line="429">
                    <params>
                        <param name="a" type="int[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getElementJ" type="long" line="430">
                    <params>
                        <param name="a" type="long[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementJ" type="void" line="431">
                    <params>
                        <param name="a" type="long[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getElementF" type="float" line="432">
                    <params>
                        <param name="a" type="float[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementF" type="void" line="433">
                    <params>
                        <param name="a" type="float[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getElementD" type="double" line="434">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementD" type="void" line="435">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getElementZ" type="boolean" line="436">
                    <params>
                        <param name="a" type="boolean[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementZ" type="void" line="437">
                    <params>
                        <param name="a" type="boolean[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getElementB" type="byte" line="438">
                    <params>
                        <param name="a" type="byte[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementB" type="void" line="439">
                    <params>
                        <param name="a" type="byte[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getElementS" type="short" line="440">
                    <params>
                        <param name="a" type="short[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementS" type="void" line="441">
                    <params>
                        <param name="a" type="short[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getElementC" type="char" line="442">
                    <params>
                        <param name="a" type="char[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementC" type="void" line="443">
                    <params>
                        <param name="a" type="char[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getElementL" type="Object" line="444">
                    <params>
                        <param name="a" type="Object[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementL" type="void" line="445">
                    <params>
                        <param name="a" type="Object[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="Object"/>
                    </params>
                </method>
                <method name="getElementL" type="V" line="446">
                    <params>
                        <param name="aclass" type="Class<V[]>"/>
                        <param name="a" type="V[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementL" type="void" line="447">
                    <params>
                        <param name="aclass" type="Class<V[]>"/>
                        <param name="a" type="V[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="aname" type="String" line="449">
                    <params>
                        <param name="aclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&lt;?&gt;" line="450"/>
                </method>
                <method name="atype" type="MethodType" line="454">
                    <params>
                        <param name="aclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&lt;?&gt;" line="455"/>
                </method>
                <method name="ahandle" type="MethodHandle" line="461">
                    <params>
                        <param name="aclass" type="Class<?>"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&lt;?&gt;" line="462"/>
                    <declaration name="name" type="String" line="463"/>
                    <declaration name="caclass" type="Class&lt;?&gt;" line="464"/>
                    <scope line="465"/>
                    <declaration name="type" type="MethodType" line="470"/>
                    <declaration name="mh" type="MethodHandle" line="473"/>
                    <scope line="474"/>
                    <scope line="476"/>
                    <scope line="479">
                        <declaration name="strongType" type="MethodType" line="480"/>
                    </scope>
                </method>
            </class>
            <javadoc line="488">
                Bind a predetermined first argument to the given direct method handle.
                  Callable only from MethodHandles.                
                <param>
                    token Proof that the caller has access to this package.                    
                </param>
                <param>
                    target Any direct method handle.                    
                </param>
                <param>
                    receiver Receiver (or first static method argument) to pre-bind.                    
                </param>
                <return>
                    a BoundMethodHandle for the given DirectMethodHandle, or null if it does not exist                    
                </return>
            </javadoc>
            <method name="bindReceiver" type="MethodHandle" line="496">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="receiver" type="Object"/>
                </params>
                <comment line="513">
                    let caller try something else                    
                </comment>
                <scope line="500">
                    <declaration name="info" type="Object" line="501"/>
                    <scope line="502">
                        <declaration name="dmh" type="DirectMethodHandle" line="503"/>
                        <scope line="504">
                            <declaration name="bmh" type="MethodHandle" line="505"/>
                            <declaration name="newType" type="MethodType" line="506"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="516">
                Bind a predetermined argument to the given arbitrary method handle.
                  Callable only from MethodHandles.                
                <param>
                    token Proof that the caller has access to this package.                    
                </param>
                <param>
                    target Any method handle.                    
                </param>
                <param>
                    receiver Argument (which can be a boxed primitive) to pre-bind.                    
                </param>
                <return>
                    a suitable BoundMethodHandle                    
                </return>
            </javadoc>
            <method name="bindArgument" type="MethodHandle" line="524">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                    <param name="receiver" type="Object"/>
                </params>
            </method>
            <method name="permuteArguments" type="MethodHandle" line="531">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="oldType" type="MethodType"/>
                    <param name="permutationOrNull" type="int[]"/>
                </params>
                <comment line="536">
                    Make the individual outgoing argument types match up first.                    
                </comment>
                <comment line="544">
                    i*TOKEN                    
                </comment>
                <comment line="545">
                    i*TOKEN                    
                </comment>
                <comment line="546">
                    not tokens                    
                </comment>
                <comment line="547">
                    not tokens                    
                </comment>
                <comment line="548">
                    to mark items which are symbolic only                    
                </comment>
                <comment line="549">
                    state represents the argument values coming into target                    
                </comment>
                <comment line="553">
                    goal represents the desired state                    
                </comment>
                <comment line="558">
                    adapter must initially drop all unused arguments                    
                </comment>
                <comment line="562">
                    detect duplications                    
                </comment>
                <comment line="568">
                    found duplicate occurrence at i2                    
                </comment>
                <comment line="579">
                    Look for a maximal sequence of adjacent misplaced arguments,                    
                </comment>
                <comment line="580">
                    and try to rotate them into place.                    
                </comment>
                <comment line="585">
                    Does this argument match the current run?                    
                </comment>
                <comment line="594">
                    The old sequence (if any) stops here.                    
                </comment>
                <comment line="597">
                    But maybe a new one starts here also.                    
                </comment>
                <comment line="609">
                    Do a rotation if it can improve argument positioning                    
                </comment>
                <comment line="610">
                    by at least 2 arguments.  This is not always optimal,                    
                </comment>
                <comment line="611">
                    but it seems to catch common cases.                    
                </comment>
                <comment line="617">
                    no negs                    
                </comment>
                <comment line="618">
                    Make a span which covers both source and destination.                    
                </comment>
                <comment line="627">
                    reverse direction                    
                </comment>
                <comment line="633">
                    Improved at least two argument positions.  Do it.                    
                </comment>
                <comment line="641">
                    System.out.println(&quot;Rot: &quot;+rotSpan+&quot; by &quot;+rotBy);                    
                </comment>
                <comment line="647">
                    Else de-rotate, and drop through to the swap-fest.                    
                </comment>
                <comment line="651">
                    Now swap like the wind!                    
                </comment>
                <comment line="654">
                    What argument do I want here?                    
                </comment>
                <comment line="657">
                    Where is it now?                    
                </comment>
                <comment line="668">
                    One pass of swapping must finish the job.                    
                </comment>
                <comment line="672">
                    Grab a contiguous trailing sequence of dups.                    
                </comment>
                <comment line="682">
                    if (dupArgCount &gt; 1)  System.out.println(&quot;Dup: &quot;+dups.subList(grab, dups.size()));                    
                </comment>
                <comment line="684">
                    In the new target type drop that many args from the tail:                    
                </comment>
                <comment line="694">
                    Grab a contiguous initial sequence of drops.                    
                </comment>
                <comment line="701">
                    if (dropArgCount &gt; 1)  System.out.println(&quot;Drop: &quot;+drops.subList(0, dropArgCount));                    
                </comment>
                <declaration name="outargs" type="int" line="533"/>
                <declaration name="callTypeArgs" type="Class&lt;?&gt;[]" line="537"/>
                <declaration name="callType" type="MethodType" line="540"/>
                <declaration name="goal" type="List&lt;Integer&gt;" line="544"/>
                <declaration name="state" type="List&lt;Integer&gt;" line="545"/>
                <declaration name="drops" type="List&lt;Integer&gt;" line="546"/>
                <declaration name="dups" type="List&lt;Integer&gt;" line="547"/>
                <declaration name="TOKEN" type="int" line="548"/>
                <scope line="550"/>
                <scope line="554">
                    <scope line="555"/>
                    <scope line="557"/>
                </scope>
                <scope line="563">
                    <scope line="564">
                        <declaration name="arg1" type="int" line="565"/>
                        <declaration name="i1" type="int" line="566"/>
                        <scope line="567">
                            <declaration name="arg2" type="int" line="569"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="size" type="int" line="577"/>
                <scope line="578">
                    <declaration name="bestRotArg" type="int" line="581"/>
                    <declaration name="thisRotArg" type="int" line="582"/>
                    <scope line="583">
                        <declaration name="arg" type="int" line="584"/>
                        <scope line="586">
                            <scope line="589"/>
                        </scope>
                        <scope line="593">
                            <declaration name="wantArg" type="int" line="598"/>
                            <declaration name="MAX_ARG_ROTATION" type="int" line="599"/>
                            <scope line="602"/>
                        </scope>
                    </scope>
                    <scope line="608">
                        <declaration name="dstEnd" type="int" line="612"/>
                        <declaration name="srcEnd" type="int" line="613"/>
                        <declaration name="rotBy" type="int" line="614"/>
                        <declaration name="dstBeg" type="int" line="615"/>
                        <declaration name="srcBeg" type="int" line="616"/>
                        <declaration name="rotBeg" type="int" line="619"/>
                        <declaration name="rotEnd" type="int" line="620"/>
                        <declaration name="score" type="int" line="621"/>
                        <scope line="622"/>
                        <declaration name="rotSpan" type="List&lt;Integer&gt;" line="626"/>
                        <scope line="628"/>
                        <scope line="632">
                            <declaration name="ptypes" type="List&lt;Class&lt;?&gt;&gt;" line="634"/>
                            <declaration name="rotType" type="MethodType" line="636"/>
                            <declaration name="nextTarget" type="MethodHandle" line="637"/>
                            <scope line="640"/>
                        </scope>
                    </scope>
                    <declaration name="ptypes" type="List&lt;Class&lt;?&gt;&gt;" line="652"/>
                    <scope line="653">
                        <declaration name="arg" type="int" line="655"/>
                        <scope line="656">
                            <declaration name="j" type="int" line="658"/>
                            <declaration name="swapType" type="MethodType" line="660"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="671">
                    <declaration name="grab" type="int" line="673"/>
                    <declaration name="dupArgPos" type="int" line="674"/>
                    <scope line="675">
                        <declaration name="dup0" type="int" line="676"/>
                    </scope>
                    <declaration name="ptypes" type="List&lt;Class&lt;?&gt;&gt;" line="685"/>
                    <declaration name="dupType" type="MethodType" line="687"/>
                </scope>
                <scope line="693">
                    <declaration name="dropArgPos" type="int" line="695"/>
                    <scope line="696">
                        <declaration name="drop1" type="int" line="697"/>
                    </scope>
                    <declaration name="dropTypes" type="List&lt;Class&lt;?&gt;&gt;" line="703"/>
                    <declaration name="dropType" type="MethodType" line="705"/>
                </scope>
            </method>
            <method name="convertArguments" type="MethodHandle" line="716">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="717"/>
                <declaration name="retFilter" type="MethodHandle" line="721"/>
                <declaration name="oldRT" type="Class&lt;?&gt;" line="722"/>
                <declaration name="newRT" type="Class&lt;?&gt;" line="723"/>
                <scope line="724">
                    <scope line="725">
                        <declaration name="wrap" type="Wrapper" line="726"/>
                    </scope>
                    <scope line="728"/>
                </scope>
                <declaration name="res" type="MethodHandle" line="734"/>
                <declaration name="ex" type="Exception" line="735"/>
                <scope line="736"/>
                <scope line="738"/>
                <scope line="741">
                    <declaration name="wmt" type="WrongMethodTypeException" line="742"/>
                </scope>
            </method>
            <method name="convertArguments" type="MethodHandle" line="754">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="oldType" type="MethodType"/>
                    <param name="level" type="int"/>
                </params>
                <comment line="763">
                    We can come here in the case of target(int)void =&gt; (Object)void,                    
                </comment>
                <comment line="764">
                    because the unboxing logic for Object =&gt; int is complex.                    
                </comment>
                <comment line="766">
                    this code is deprecated                    
                </comment>
                <comment line="767">
                    The JVM can&apos;t do it directly, so fill in the gap with a Java adapter.                    
                </comment>
                <comment line="768">
                    TO DO: figure out what to put here from case-by-case experience                    
                </comment>
                <comment line="769">
                    Use a heavier method:  Convert all the arguments to Object,                    
                </comment>
                <comment line="770">
                    then back to the desired types.  We might have to use Java-based                    
                </comment>
                <comment line="771">
                    method handles to do this.                    
                </comment>
                <declaration name="res" type="MethodHandle" line="760"/>
                <declaration name="argc" type="int" line="765"/>
                <declaration name="objType" type="MethodType" line="772"/>
                <declaration name="objTarget" type="MethodHandle" line="773"/>
            </method>
            <method name="spreadArguments" type="MethodHandle" line="782">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="arrayType" type="Class<?>"/>
                    <param name="arrayLength" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="783"/>
                <declaration name="nargs" type="int" line="784"/>
                <declaration name="keepPosArgs" type="int" line="785"/>
                <declaration name="newType" type="MethodType" line="786"/>
            </method>
            <method name="spreadArgumentsFromPos" type="MethodHandle" line="792">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="spreadArgPos" type="int"/>
                </params>
                <declaration name="arrayLength" type="int" line="793"/>
            </method>
            <method name="spreadArguments" type="MethodHandle" line="800">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="spreadArgPos" type="int"/>
                    <param name="arrayType" type="Class<?>"/>
                    <param name="arrayLength" type="int"/>
                </params>
                <comment line="801">
                    TO DO: maybe allow the restarg to be Object and implicitly cast to Object[]                    
                </comment>
                <comment line="803">
                    spread the last argument of newType to oldType                    
                </comment>
                <declaration name="oldType" type="MethodType" line="802"/>
            </method>
            <method name="collectArguments" type="MethodHandle" line="811">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="collectArg" type="int"/>
                    <param name="collector" type="MethodHandle"/>
                </params>
                <comment line="814">
                    else use foldArguments                    
                </comment>
                <declaration name="type" type="MethodType" line="812"/>
                <declaration name="collectType" type="Class&lt;?&gt;" line="813"/>
                <declaration name="newType" type="MethodType" line="817"/>
            </method>
            <method name="collectArguments" type="MethodHandle" line="825">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="collectArg" type="int"/>
                    <param name="collector" type="MethodHandle"/>
                </params>
                <comment line="826">
                    (a...,c)=&gt;r                    
                </comment>
                <comment line="827">
                    newType                      // (a..., b...)=&gt;r                    
                </comment>
                <comment line="828">
                    (b...)=&gt;c                    
                </comment>
                <comment line="829">
                    oldType                      // (a..., b...)=&gt;r                    
                </comment>
                <comment line="837">
                    this code is deprecated                    
                </comment>
                <declaration name="oldType" type="MethodType" line="826"/>
                <declaration name="colType" type="MethodType" line="828"/>
                <declaration name="result" type="MethodHandle" line="832"/>
                <scope line="833"/>
                <scope line="836">
                    <declaration name="gtarget" type="MethodHandle" line="838"/>
                    <declaration name="gcollector" type="MethodHandle" line="839"/>
                    <declaration name="gresult" type="MethodHandle" line="841"/>
                </scope>
            </method>
            <method name="filterArgument" type="MethodHandle" line="849">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="pos" type="int"/>
                    <param name="filter" type="MethodHandle"/>
                </params>
                <comment line="858">
                    this code is deprecated                    
                </comment>
                <comment line="871">
                    simple unary case                    
                </comment>
                <declaration name="ttype" type="MethodType" line="850"/>
                <declaration name="ftype" type="MethodType" line="851"/>
                <declaration name="result" type="MethodHandle" line="853"/>
                <scope line="854"/>
                <declaration name="rtype" type="MethodType" line="859"/>
                <declaration name="gttype" type="MethodType" line="860"/>
                <scope line="861"/>
                <declaration name="gftype" type="MethodType" line="865"/>
                <scope line="866"/>
                <scope line="870"/>
                <scope line="873"/>
            </method>
            <method name="foldArguments" type="MethodHandle" line="884">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="foldPos" type="int"/>
                    <param name="combiner" type="MethodHandle"/>
                </params>
                <comment line="891">
                    this code is deprecated                    
                </comment>
                <declaration name="oldType" type="MethodType" line="885"/>
                <declaration name="ctype" type="MethodType" line="886"/>
                <scope line="887">
                    <declaration name="res" type="MethodHandle" line="888"/>
                </scope>
                <declaration name="gtarget" type="MethodHandle" line="893"/>
                <declaration name="gcombiner" type="MethodHandle" line="894"/>
                <scope line="895"/>
                <declaration name="gresult" type="MethodHandle" line="899"/>
            </method>
            <method name="dropArguments" type="MethodHandle" line="905">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="drops" type="int" line="906"/>
                <declaration name="res" type="MethodHandle" line="907"/>
            </method>
            <class name="GuardWithTest" line="913">
                <extends class="BoundMethodHandle"/>
                <comment line="144">
                    for allocation only:                    
                </comment>
                <comment line="249">
                    For testing use this:                    
                </comment>
                <comment line="250">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="261">
                    Corresponding generic constructor types:                    
                </comment>
                <comment line="307">
                    for static refs only                    
                </comment>
                <comment line="340">
                    cast (V) is OK here, since we wrap convertArguments around the MH.                    
                </comment>
                <comment line="420">
                    / Support for array element access                    
                </comment>
                <comment line="423">
                    FIXME: Cache on the classes themselves, not here.                    
                </comment>
                <comment line="1027">
                    For testing use this:                    
                </comment>
                <comment line="1028">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="1093">
                    FIXME: Build the control flow out of foldArguments.                    
                </comment>
                <comment line="1203">
                    For testing use this:                    
                </comment>
                <comment line="1204">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <declaration name="test" type="MethodHandle" line="914"/>
                <method name="GuardWithTest" type="constructor" line="916">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="test" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="fallback" type="MethodHandle"/>
                    </params>
                </method>
                <method name="preferRicochetFrame" type="boolean" line="922">
                    <params>
                        <param name="type" type="MethodType"/>
                    </params>
                    <comment line="923">
                        always use RF if available                        
                    </comment>
                </method>
                <method name="make" type="MethodHandle" line="925">
                    <params>
                        <param name="test" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="fallback" type="MethodHandle"/>
                    </params>
                    <comment line="930">
                        this code is deprecated                        
                    </comment>
                    <comment line="934">
                        Note: convertArguments(...2) avoids interface casts present in convertArguments(...0)                        
                    </comment>
                    <comment line="942">
                        this code is deprecated                        
                    </comment>
                    <declaration name="type" type="MethodType" line="926"/>
                    <declaration name="nargs" type="int" line="927"/>
                    <scope line="928">
                        <declaration name="invoke" type="MethodHandle" line="931"/>
                        <declaration name="gtype" type="MethodType" line="932"/>
                        <declaration name="gtest" type="MethodHandle" line="935"/>
                        <declaration name="gtarget" type="MethodHandle" line="936"/>
                        <declaration name="gfallback" type="MethodHandle" line="937"/>
                        <declaration name="gguard" type="MethodHandle" line="939"/>
                    </scope>
                    <scope line="941">
                        <declaration name="invoke" type="MethodHandle" line="943"/>
                        <declaration name="gtype" type="MethodType" line="944"/>
                        <declaration name="gtest" type="MethodHandle" line="946"/>
                        <declaration name="gtarget" type="MethodHandle" line="947"/>
                        <declaration name="gfallback" type="MethodHandle" line="948"/>
                        <declaration name="gguard" type="MethodHandle" line="949"/>
                    </scope>
                </method>
                <method name="debugString" type="String" line="955"/>
                <method name="invoke_V" type="Object" line="958">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L0" type="Object" line="963"/>
                <method name="invoke_L1" type="Object" line="968">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L2" type="Object" line="973">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L3" type="Object" line="978">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L4" type="Object" line="983">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L5" type="Object" line="988">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L6" type="Object" line="993">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L7" type="Object" line="998">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L8" type="Object" line="1003">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="1008">
                    <comment line="1022">
                        current number of methods                        
                    </comment>
                    <declaration name="invokes" type="ArrayList&lt;MethodHandle&gt;" line="1009"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="1010"/>
                    <scope line="1011">
                        <declaration name="nargs" type="int" line="1012"/>
                        <declaration name="name" type="String" line="1013"/>
                        <declaration name="invoke" type="MethodHandle" line="1014"/>
                        <scope line="1015"/>
                        <scope line="1017"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="1025"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="1028"/>
                <scope line="1029">
                    <scope line="1030"/>
                    <scope line="1032"/>
                </scope>
            </class>
            <method name="selectAlternative" type="MethodHandle" line="1039">
                <params>
                    <param name="testResult" type="boolean"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="fallback" type="MethodHandle"/>
                </params>
            </method>
            <declaration name="SELECT_ALTERNATIVE" type="MethodHandle" line="1043"/>
            <method name="selectAlternative" type="MethodHandle" line="1044">
                <scope line="1046"/>
                <scope line="1050"/>
            </method>
            <method name="makeGuardWithTest" type="MethodHandle" line="1059">
                <params>
                    <param name="test" type="MethodHandle"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="fallback" type="MethodHandle"/>
                </params>
                <comment line="1060">
                    gwt(arg...)                    
                </comment>
                <comment line="1061">
                    [fold]=&gt; continueAfterTest(z=test(arg...), arg...)                    
                </comment>
                <comment line="1062">
                    [filter]=&gt; (tf=select(z))(arg...)                    
                </comment>
                <comment line="1063">
                    where select(z) = select(z, t, f).bindTo(t, f) =&gt; z ? t f                    
                </comment>
                <comment line="1064">
                    [tailcall]=&gt; tf(arg...)                    
                </comment>
                <comment line="1070">
                    working backwards, as usual:                    
                </comment>
                <comment line="1076">
                    select(z: boolean) =&gt; (z ? target : fallback)                    
                </comment>
                <declaration name="targetType" type="MethodType" line="1066"/>
                <declaration name="foldTargetType" type="MethodType" line="1067"/>
                <scope line="1069">
                    <declaration name="tailcall" type="MethodHandle" line="1072"/>
                    <declaration name="select" type="MethodHandle" line="1073"/>
                    <declaration name="filter" type="MethodHandle" line="1077"/>
                    <declaration name="fold" type="MethodHandle" line="1079"/>
                </scope>
            </method>
            <class name="GuardWithCatch" line="1085">
                <extends class="BoundMethodHandle"/>
                <comment line="144">
                    for allocation only:                    
                </comment>
                <comment line="249">
                    For testing use this:                    
                </comment>
                <comment line="250">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="261">
                    Corresponding generic constructor types:                    
                </comment>
                <comment line="307">
                    for static refs only                    
                </comment>
                <comment line="340">
                    cast (V) is OK here, since we wrap convertArguments around the MH.                    
                </comment>
                <comment line="420">
                    / Support for array element access                    
                </comment>
                <comment line="423">
                    FIXME: Cache on the classes themselves, not here.                    
                </comment>
                <comment line="1027">
                    For testing use this:                    
                </comment>
                <comment line="1028">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <comment line="1093">
                    FIXME: Build the control flow out of foldArguments.                    
                </comment>
                <comment line="1203">
                    For testing use this:                    
                </comment>
                <comment line="1204">
                    static final MethodHandle[] INVOKES = Arrays.copyOf(makeInvokes(), 2);                    
                </comment>
                <declaration name="target" type="MethodHandle" line="1086"/>
                <declaration name="exType" type="Class&lt;? extends Throwable&gt;" line="1087"/>
                <declaration name="catcher" type="MethodHandle" line="1088"/>
                <method name="GuardWithCatch" type="constructor" line="1089">
                    <params>
                        <param name="target" type="MethodHandle"/>
                        <param name="exType" type="Class<? extends Throwable>"/>
                        <param name="catcher" type="MethodHandle"/>
                    </params>
                </method>
                <method name="GuardWithCatch" type="constructor" line="1094">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="exType" type="Class<? extends Throwable>"/>
                        <param name="catcher" type="MethodHandle"/>
                    </params>
                </method>
                <method name="debugString" type="String" line="1101"/>
                <method name="invoke_V" type="Object" line="1104">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                    <scope line="1105"/>
                    <scope line="1107"/>
                </method>
                <method name="invoke_L0" type="Object" line="1112">
                    <scope line="1113"/>
                    <scope line="1115"/>
                </method>
                <method name="invoke_L1" type="Object" line="1120">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                    <scope line="1121"/>
                    <scope line="1123"/>
                </method>
                <method name="invoke_L2" type="Object" line="1128">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                    <scope line="1129"/>
                    <scope line="1131"/>
                </method>
                <method name="invoke_L3" type="Object" line="1136">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                    <scope line="1137"/>
                    <scope line="1139"/>
                </method>
                <method name="invoke_L4" type="Object" line="1144">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                    <scope line="1145"/>
                    <scope line="1147"/>
                </method>
                <method name="invoke_L5" type="Object" line="1152">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                    <scope line="1153"/>
                    <scope line="1155"/>
                </method>
                <method name="invoke_L6" type="Object" line="1160">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                    <scope line="1161"/>
                    <scope line="1163"/>
                </method>
                <method name="invoke_L7" type="Object" line="1168">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                    <scope line="1169"/>
                    <scope line="1171"/>
                </method>
                <method name="invoke_L8" type="Object" line="1176">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                    <scope line="1177"/>
                    <scope line="1179"/>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="1184">
                    <comment line="1198">
                        current number of methods                        
                    </comment>
                    <declaration name="invokes" type="ArrayList&lt;MethodHandle&gt;" line="1185"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="1186"/>
                    <scope line="1187">
                        <declaration name="nargs" type="int" line="1188"/>
                        <declaration name="name" type="String" line="1189"/>
                        <declaration name="invoke" type="MethodHandle" line="1190"/>
                        <scope line="1191"/>
                        <scope line="1193"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="1201"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="1204"/>
                <scope line="1205">
                    <scope line="1206"/>
                    <scope line="1208"/>
                </scope>
            </class>
            <method name="makeGuardWithCatch" type="MethodHandle" line="1218">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="exType" type="Class<? extends Throwable>"/>
                    <param name="catcher" type="MethodHandle"/>
                </params>
                <comment line="1225">
                    Note: convertArguments(...2) avoids interface casts present in convertArguments(...0)                    
                </comment>
                <declaration name="type" type="MethodType" line="1219"/>
                <declaration name="ctype" type="MethodType" line="1220"/>
                <declaration name="nargs" type="int" line="1221"/>
                <scope line="1222">
                    <declaration name="gtype" type="MethodType" line="1223"/>
                    <declaration name="gcatchType" type="MethodType" line="1224"/>
                    <declaration name="gtarget" type="MethodHandle" line="1226"/>
                    <declaration name="gcatcher" type="MethodHandle" line="1227"/>
                    <declaration name="gguard" type="MethodHandle" line="1228"/>
                </scope>
                <scope line="1231">
                    <declaration name="gtype" type="MethodType" line="1232"/>
                    <declaration name="gcatchType" type="MethodType" line="1233"/>
                    <declaration name="gtarget" type="MethodHandle" line="1234"/>
                    <declaration name="gcatcher" type="MethodHandle" line="1236"/>
                    <declaration name="gguard" type="MethodHandle" line="1237"/>
                </scope>
            </method>
            <method name="throwException" type="MethodHandle" line="1244">
                <params>
                    <param name="type" type="MethodType"/>
                </params>
            </method>
            <declaration name="THROW_EXCEPTION" type="MethodHandle" line="1248"/>
            <method name="throwException" type="MethodHandle" line="1249">
                <scope line="1251"/>
                <scope line="1255"/>
            </method>
            <method name="throwException" type="Empty" line="1260">
                <params>
                    <param name="t" type="T"/>
                </params>
            </method>
            <method name="registerBootstrap" type="void" line="1263">
                <params>
                    <param name="callerClass" type="Class<?>"/>
                    <param name="bootstrapMethod" type="MethodHandle"/>
                </params>
            </method>
            <method name="getBootstrap" type="MethodHandle" line="1266">
                <params>
                    <param name="callerClass" type="Class<?>"/>
                </params>
            </method>
        </class>
    </source>