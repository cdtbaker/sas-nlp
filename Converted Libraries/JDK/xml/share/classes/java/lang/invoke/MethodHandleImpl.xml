<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.VerifyType"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="sun.invoke.empty.Empty"/>
        <import package="sun.invoke.util.ValueConversions"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="sun.misc.Unsafe"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="MethodHandleImpl" line="16">
            <javadoc line="16">
                Trusted implementation code for MethodHandle.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="LOOKUP" type="MemberName.Factory" line="21"/>
            <method name="initStatics" type="void" line="22"/>
            <javadoc line="24">
                Look up a given method.
                  Callable only from sun.invoke and related packages.
                  &lt;p&gt;
                  The resulting method handle type will be of the given type,
                  with a receiver type {@code rcvc} prepended if the member is not static.
                  &lt;p&gt;
                  Access checks are made as of the given lookup class.
                  In particular, if the method is protected and {@code defc} is in a
                  different package from the lookup class, then {@code rcvc} must be
                  the lookup class or a subclass.                
                <param>
                    token Proof that the lookup class has access to this package.                    
                </param>
                <param>
                    member Resolved method or constructor to call.                    
                </param>
                <param>
                    name Name of the desired method.                    
                </param>
                <param>
                    rcvc Receiver type of desired non-static method (else null)                    
                </param>
                <param>
                    doDispatch whether the method handle will test the receiver type                    
                </param>
                <param>
                    lookupClass access-check relative to this class                    
                </param>
                <return>
                    a direct handle to the matching method                    
                </return>
                <throws>
                    IllegalAccessException if the given method cannot be accessed by the lookup class                    
                </throws>
            </javadoc>
            <method name="findMethod" type="MethodHandle" line="44">
                <params>
                    <param name="method" type="MemberName"/>
                    <param name="doDispatch" type="boolean"/>
                    <param name="lookupClass" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="mtype" type="MethodType" line="45"/>
                <scope line="46">
                    <declaration name="recvType" type="Class&amp;lt;?&amp;gt;" line="47"/>
                </scope>
                <declaration name="mh" type="DirectMethodHandle" line="50"/>
                <declaration name="argc" type="int" line="54"/>
                <scope line="55">
                    <declaration name="arrayType" type="Class&amp;lt;?&amp;gt;" line="56"/>
                </scope>
            </method>
            <method name="makeAllocator" type="MethodHandle" line="61">
                <params>
                    <param name="rawConstructor" type="MethodHandle"/>
                </params>
                <declaration name="rawConType" type="MethodType" line="62"/>
                <declaration name="allocateClass" type="Class&amp;lt;?&amp;gt;" line="63"/>
                <scope line="64">
                    <declaration name="returner" type="MethodHandle" line="65"/>
                    <declaration name="ctype" type="MethodType" line="66"/>
                    <declaration name="cookedConstructor" type="MethodHandle" line="67"/>
                    <declaration name="allocator" type="MethodHandle" line="71"/>
                    <declaration name="fold" type="MethodHandle" line="74"/>
                </scope>
                <declaration name="allocator" type="MethodHandle" line="78"/>
            </method>
            <class name="AllocateObject" line="82">
                <type_params>
                    <type_param name="C"/>
                </type_params>
                <extends class="BoundMethodHandle"/>
                <declaration name="unsafe" type="Unsafe" line="83"/>
                <declaration name="allocateClass" type="Class&amp;lt;C&amp;gt;" line="84"/>
                <declaration name="rawConstructor" type="MethodHandle" line="85"/>
                <method name="AllocateObject" type="constructor" line="86">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="allocateClass" type="Class&lt;C&gt;"/>
                        <param name="rawConstructor" type="MethodHandle"/>
                    </params>
                </method>
                <method name="AllocateObject" type="constructor" line="92">
                    <params>
                        <param name="allocateClass" type="Class&lt;C&gt;"/>
                    </params>
                </method>
                <method name="make" type="MethodHandle" line="97">
                    <params>
                        <param name="allocateClass" type="Class&lt;?&gt;"/>
                        <param name="rawConstructor" type="MethodHandle"/>
                    </params>
                    <declaration name="rawConType" type="MethodType" line="99"/>
                    <declaration name="newType" type="MethodType" line="101"/>
                    <declaration name="nargs" type="int" line="102"/>
                    <scope line="103">
                        <declaration name="invoke" type="MethodHandle" line="104"/>
                        <declaration name="conType" type="MethodType" line="105"/>
                        <declaration name="gcon" type="MethodHandle" line="106"/>
                        <declaration name="galloc" type="MethodHandle" line="108"/>
                    </scope>
                    <scope line="112">
                        <declaration name="invoke" type="MethodHandle" line="113"/>
                        <declaration name="conType" type="MethodType" line="114"/>
                        <declaration name="gcon" type="MethodHandle" line="115"/>
                        <declaration name="galloc" type="MethodHandle" line="117"/>
                    </scope>
                </method>
                <method name="debugString" type="String" line="121"/>
                <method name="allocate" type="C" line="124"/>
                <method name="invoke_V" type="C" line="127">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="128"/>
                </method>
                <method name="invoke_L0" type="C" line="132">
                    <declaration name="obj" type="C" line="133"/>
                </method>
                <method name="invoke_L1" type="C" line="137">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="138"/>
                </method>
                <method name="invoke_L2" type="C" line="142">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="143"/>
                </method>
                <method name="invoke_L3" type="C" line="147">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="148"/>
                </method>
                <method name="invoke_L4" type="C" line="152">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="153"/>
                </method>
                <method name="invoke_L5" type="C" line="157">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="158"/>
                </method>
                <method name="invoke_L6" type="C" line="162">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="163"/>
                </method>
                <method name="invoke_L7" type="C" line="167">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="168"/>
                </method>
                <method name="invoke_L8" type="C" line="172">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                    <declaration name="obj" type="C" line="173"/>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="177">
                    <declaration name="invokes" type="ArrayList&amp;lt;MethodHandle&amp;gt;" line="178"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="179"/>
                    <scope line="180">
                        <declaration name="nargs" type="int" line="181"/>
                        <declaration name="name" type="String" line="182"/>
                        <declaration name="invoke" type="MethodHandle" line="183"/>
                        <scope line="184"/>
                        <scope line="187"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="195"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="196"/>
                <declaration name="ALLOCATE" type="MethodHandle" line="197"/>
                <scope line="198">
                    <scope line="199"/>
                    <scope line="203"/>
                </scope>
                <declaration name="CON_TYPES" type="MethodType[]" line="207"/>
                <scope line="208"/>
                <declaration name="VARARGS_CON_TYPE" type="MethodType" line="211"/>
                <method name="makeConType" type="MethodType" line="212">
                    <params>
                        <param name="invoke" type="MethodHandle"/>
                    </params>
                    <declaration name="invType" type="MethodType" line="213"/>
                </method>
            </class>
            <method name="accessField" type="MethodHandle" line="217">
                <params>
                    <param name="member" type="MemberName"/>
                    <param name="isSetter" type="boolean"/>
                    <param name="lookupClass" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="mh" type="MethodHandle" line="218"/>
            </method>
            <method name="accessArrayElement" type="MethodHandle" line="221">
                <params>
                    <param name="arrayClass" type="Class&lt;?&gt;"/>
                    <param name="isSetter" type="boolean"/>
                </params>
                <declaration name="elemClass" type="Class&amp;lt;?&amp;gt;" line="223"/>
                <declaration name="mhs" type="MethodHandle[]" line="224"/>
                <scope line="225">
                    <scope line="228"/>
                    <scope line="232"/>
                </scope>
            </method>
            <class name="FieldAccessor" line="238">
                <type_params>
                    <type_param name="C"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="BoundMethodHandle"/>
                <declaration name="unsafe" type="Unsafe" line="239"/>
                <declaration name="base" type="Object" line="240"/>
                <declaration name="offset" type="long" line="241"/>
                <declaration name="name" type="String" line="242"/>
                <method name="FieldAccessor" type="constructor" line="243">
                    <params>
                        <param name="field" type="MemberName"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                </method>
                <method name="debugString" type="String" line="249"/>
                <method name="getFieldI" type="int" line="252">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldI" type="void" line="255">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getFieldJ" type="long" line="258">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldJ" type="void" line="261">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getFieldF" type="float" line="264">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldF" type="void" line="267">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getFieldD" type="double" line="270">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldD" type="void" line="273">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getFieldZ" type="boolean" line="276">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldZ" type="void" line="279">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getFieldB" type="byte" line="282">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldB" type="void" line="285">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getFieldS" type="short" line="288">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldS" type="void" line="291">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getFieldC" type="char" line="294">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldC" type="void" line="297">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getFieldL" type="V" line="300">
                    <params>
                        <param name="obj" type="C"/>
                    </params>
                </method>
                <method name="setFieldL" type="void" line="303">
                    <params>
                        <param name="obj" type="C"/>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="staticBase" type="Object" line="306">
                    <params>
                        <param name="field" type="MemberName"/>
                    </params>
                    <anonymous_class line="308">
                        <method name="run" type="Object" line="309">
                            <scope line="310">
                                <declaration name="c" type="Class" line="311"/>
                                <declaration name="f" type="java.lang.reflect.Field" line="312"/>
                            </scope>
                            <scope line="315"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="getStaticI" type="int" line="322"/>
                <method name="setStaticI" type="void" line="325">
                    <params>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getStaticJ" type="long" line="328"/>
                <method name="setStaticJ" type="void" line="331">
                    <params>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getStaticF" type="float" line="334"/>
                <method name="setStaticF" type="void" line="337">
                    <params>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getStaticD" type="double" line="340"/>
                <method name="setStaticD" type="void" line="343">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getStaticZ" type="boolean" line="346"/>
                <method name="setStaticZ" type="void" line="349">
                    <params>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getStaticB" type="byte" line="352"/>
                <method name="setStaticB" type="void" line="355">
                    <params>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getStaticS" type="short" line="358"/>
                <method name="setStaticS" type="void" line="361">
                    <params>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getStaticC" type="char" line="364"/>
                <method name="setStaticC" type="void" line="367">
                    <params>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getStaticL" type="V" line="370"/>
                <method name="setStaticL" type="void" line="373">
                    <params>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="fname" type="String" line="376">
                    <params>
                        <param name="vclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <declaration name="stem" type="String" line="377"/>
                </method>
                <method name="ftype" type="MethodType" line="382">
                    <params>
                        <param name="cclass" type="Class&lt;?&gt;"/>
                        <param name="vclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <declaration name="type" type="MethodType" line="383"/>
                    <scope line="384"/>
                    <scope line="388"/>
                </method>
                <method name="fhandle" type="MethodHandle" line="393">
                    <params>
                        <param name="cclass" type="Class&lt;?&gt;"/>
                        <param name="vclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                        <param name="isStatic" type="boolean"/>
                    </params>
                    <declaration name="name" type="String" line="394"/>
                    <declaration name="ecclass" type="Class&amp;lt;?&amp;gt;" line="396"/>
                    <declaration name="evclass" type="Class&amp;lt;?&amp;gt;" line="397"/>
                    <declaration name="type" type="MethodType" line="399"/>
                    <declaration name="mh" type="MethodHandle" line="400"/>
                    <scope line="401"/>
                    <scope line="404"/>
                    <scope line="407">
                        <declaration name="strongType" type="MethodType" line="408"/>
                    </scope>
                </method>
                <declaration name="ARRAY_CACHE" type="HashMap&amp;lt;Class&amp;lt;?&amp;gt;,MethodHandle[]&amp;gt;" line="414"/>
                <method name="doCache" type="boolean" line="415">
                    <params>
                        <param name="elemClass" type="Class&lt;?&gt;"/>
                    </params>
                    <declaration name="cl" type="ClassLoader" line="417"/>
                </method>
                <method name="getElementI" type="int" line="420">
                    <params>
                        <param name="a" type="int[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementI" type="void" line="423">
                    <params>
                        <param name="a" type="int[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getElementJ" type="long" line="426">
                    <params>
                        <param name="a" type="long[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementJ" type="void" line="429">
                    <params>
                        <param name="a" type="long[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="long"/>
                    </params>
                </method>
                <method name="getElementF" type="float" line="432">
                    <params>
                        <param name="a" type="float[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementF" type="void" line="435">
                    <params>
                        <param name="a" type="float[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="float"/>
                    </params>
                </method>
                <method name="getElementD" type="double" line="438">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementD" type="void" line="441">
                    <params>
                        <param name="a" type="double[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="getElementZ" type="boolean" line="444">
                    <params>
                        <param name="a" type="boolean[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementZ" type="void" line="447">
                    <params>
                        <param name="a" type="boolean[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="boolean"/>
                    </params>
                </method>
                <method name="getElementB" type="byte" line="450">
                    <params>
                        <param name="a" type="byte[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementB" type="void" line="453">
                    <params>
                        <param name="a" type="byte[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="byte"/>
                    </params>
                </method>
                <method name="getElementS" type="short" line="456">
                    <params>
                        <param name="a" type="short[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementS" type="void" line="459">
                    <params>
                        <param name="a" type="short[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="short"/>
                    </params>
                </method>
                <method name="getElementC" type="char" line="462">
                    <params>
                        <param name="a" type="char[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementC" type="void" line="465">
                    <params>
                        <param name="a" type="char[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="char"/>
                    </params>
                </method>
                <method name="getElementL" type="Object" line="468">
                    <params>
                        <param name="a" type="Object[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementL" type="void" line="471">
                    <params>
                        <param name="a" type="Object[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="Object"/>
                    </params>
                </method>
                <method name="getElementL" type="V" line="474">
                    <params>
                        <param name="aclass" type="Class&lt;V[]&gt;"/>
                        <param name="a" type="V[]"/>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setElementL" type="void" line="477">
                    <params>
                        <param name="aclass" type="Class&lt;V[]&gt;"/>
                        <param name="a" type="V[]"/>
                        <param name="i" type="int"/>
                        <param name="x" type="V"/>
                    </params>
                </method>
                <method name="aname" type="String" line="480">
                    <params>
                        <param name="aclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&amp;lt;?&amp;gt;" line="481"/>
                </method>
                <method name="atype" type="MethodType" line="485">
                    <params>
                        <param name="aclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&amp;lt;?&amp;gt;" line="486"/>
                </method>
                <method name="ahandle" type="MethodHandle" line="490">
                    <params>
                        <param name="aclass" type="Class&lt;?&gt;"/>
                        <param name="isSetter" type="boolean"/>
                    </params>
                    <declaration name="vclass" type="Class&amp;lt;?&amp;gt;" line="491"/>
                    <declaration name="name" type="String" line="492"/>
                    <declaration name="caclass" type="Class&amp;lt;?&amp;gt;" line="493"/>
                    <scope line="494"/>
                    <declaration name="type" type="MethodType" line="499"/>
                    <declaration name="mh" type="MethodHandle" line="501"/>
                    <scope line="502"/>
                    <scope line="505"/>
                    <scope line="508">
                        <declaration name="strongType" type="MethodType" line="509"/>
                    </scope>
                </method>
            </class>
            <javadoc line="516">
                Bind a predetermined first argument to the given direct method handle.
                  Callable only from MethodHandles.                
                <param>
                    token Proof that the caller has access to this package.                    
                </param>
                <param>
                    target Any direct method handle.                    
                </param>
                <param>
                    receiver Receiver (or first static method argument) to pre-bind.                    
                </param>
                <return>
                    a BoundMethodHandle for the given DirectMethodHandle, or null if it does not exist                    
                </return>
            </javadoc>
            <method name="bindReceiver" type="MethodHandle" line="524">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="receiver" type="Object"/>
                </params>
                <scope line="526">
                    <declaration name="info" type="Object" line="527"/>
                    <scope line="528">
                        <declaration name="dmh" type="DirectMethodHandle" line="529"/>
                        <scope line="530">
                            <declaration name="bmh" type="MethodHandle" line="531"/>
                            <declaration name="newType" type="MethodType" line="532"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="540">
                Bind a predetermined argument to the given arbitrary method handle.
                  Callable only from MethodHandles.                
                <param>
                    token Proof that the caller has access to this package.                    
                </param>
                <param>
                    target Any method handle.                    
                </param>
                <param>
                    receiver Argument (which can be a boxed primitive) to pre-bind.                    
                </param>
                <return>
                    a suitable BoundMethodHandle                    
                </return>
            </javadoc>
            <method name="bindArgument" type="MethodHandle" line="548">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="argnum" type="int"/>
                    <param name="receiver" type="Object"/>
                </params>
            </method>
            <method name="permuteArguments" type="MethodHandle" line="551">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="oldType" type="MethodType"/>
                    <param name="permutationOrNull" type="int[]"/>
                </params>
                <declaration name="outargs" type="int" line="553"/>
                <declaration name="callTypeArgs" type="Class&amp;lt;?&amp;gt;[]" line="555"/>
                <declaration name="callType" type="MethodType" line="557"/>
                <declaration name="goal" type="List&amp;lt;Integer&amp;gt;" line="561"/>
                <declaration name="state" type="List&amp;lt;Integer&amp;gt;" line="562"/>
                <declaration name="drops" type="List&amp;lt;Integer&amp;gt;" line="563"/>
                <declaration name="dups" type="List&amp;lt;Integer&amp;gt;" line="564"/>
                <declaration name="TOKEN" type="int" line="565"/>
                <scope line="566"/>
                <scope line="569">
                    <scope line="570"/>
                    <scope line="573"/>
                </scope>
                <scope line="577">
                    <scope line="578">
                        <declaration name="arg1" type="int" line="579"/>
                        <declaration name="i1" type="int" line="580"/>
                        <scope line="581">
                            <declaration name="arg2" type="int" line="582"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="size" type="int" line="590"/>
                <scope line="591">
                    <declaration name="bestRotArg" type="int" line="592"/>
                    <declaration name="thisRotArg" type="int" line="593"/>
                    <scope line="594">
                        <declaration name="arg" type="int" line="595"/>
                        <scope line="596">
                            <scope line="599"/>
                        </scope>
                        <scope line="604">
                            <declaration name="wantArg" type="int" line="607"/>
                            <declaration name="MAX_ARG_ROTATION" type="int" line="608"/>
                            <scope line="609"/>
                        </scope>
                    </scope>
                    <scope line="615">
                        <declaration name="dstEnd" type="int" line="616"/>
                        <declaration name="srcEnd" type="int" line="617"/>
                        <declaration name="rotBy" type="int" line="618"/>
                        <declaration name="dstBeg" type="int" line="619"/>
                        <declaration name="srcBeg" type="int" line="620"/>
                        <declaration name="rotBeg" type="int" line="622"/>
                        <declaration name="rotEnd" type="int" line="623"/>
                        <declaration name="score" type="int" line="624"/>
                        <scope line="625"/>
                        <declaration name="rotSpan" type="List&amp;lt;Integer&amp;gt;" line="628"/>
                        <scope line="630"/>
                        <scope line="633">
                            <declaration name="ptypes" type="List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="634"/>
                            <declaration name="rotType" type="MethodType" line="636"/>
                            <declaration name="nextTarget" type="MethodHandle" line="637"/>
                            <scope line="638"/>
                        </scope>
                    </scope>
                    <declaration name="ptypes" type="List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="646"/>
                    <scope line="647">
                        <declaration name="arg" type="int" line="648"/>
                        <scope line="649">
                            <declaration name="j" type="int" line="650"/>
                            <declaration name="swapType" type="MethodType" line="652"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="662">
                    <declaration name="grab" type="int" line="663"/>
                    <declaration name="dupArgPos" type="int" line="664"/>
                    <scope line="665">
                        <declaration name="dup0" type="int" line="666"/>
                    </scope>
                    <declaration name="ptypes" type="List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="673"/>
                    <declaration name="dupType" type="MethodType" line="675"/>
                </scope>
                <scope line="680">
                    <declaration name="dropArgPos" type="int" line="681"/>
                    <scope line="682">
                        <declaration name="drop1" type="int" line="683"/>
                    </scope>
                    <declaration name="dropTypes" type="List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;" line="688"/>
                    <declaration name="dropType" type="MethodType" line="689"/>
                </scope>
            </method>
            <method name="convertArguments" type="MethodHandle" line="698">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="699"/>
                <declaration name="retFilter" type="MethodHandle" line="702"/>
                <declaration name="oldRT" type="Class&amp;lt;?&amp;gt;" line="703"/>
                <declaration name="newRT" type="Class&amp;lt;?&amp;gt;" line="704"/>
                <scope line="705">
                    <scope line="706">
                        <declaration name="wrap" type="Wrapper" line="707"/>
                    </scope>
                    <scope line="710"/>
                </scope>
                <declaration name="res" type="MethodHandle" line="716"/>
                <declaration name="ex" type="Exception" line="717"/>
                <scope line="718"/>
                <scope line="721"/>
                <scope line="724">
                    <declaration name="wmt" type="WrongMethodTypeException" line="725"/>
                </scope>
            </method>
            <method name="convertArguments" type="MethodHandle" line="732">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="oldType" type="MethodType"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="res" type="MethodHandle" line="736"/>
                <declaration name="argc" type="int" line="738"/>
                <declaration name="objType" type="MethodType" line="740"/>
                <declaration name="objTarget" type="MethodHandle" line="741"/>
            </method>
            <method name="spreadArguments" type="MethodHandle" line="747">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="arrayType" type="Class&lt;?&gt;"/>
                    <param name="arrayLength" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="748"/>
                <declaration name="nargs" type="int" line="749"/>
                <declaration name="keepPosArgs" type="int" line="750"/>
                <declaration name="newType" type="MethodType" line="751"/>
            </method>
            <method name="spreadArgumentsFromPos" type="MethodHandle" line="754">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="spreadArgPos" type="int"/>
                </params>
                <declaration name="arrayLength" type="int" line="755"/>
            </method>
            <method name="spreadArguments" type="MethodHandle" line="758">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="spreadArgPos" type="int"/>
                    <param name="arrayType" type="Class&lt;?&gt;"/>
                    <param name="arrayLength" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="759"/>
            </method>
            <method name="collectArguments" type="MethodHandle" line="764">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="collectArg" type="int"/>
                    <param name="collector" type="MethodHandle"/>
                </params>
                <declaration name="type" type="MethodType" line="765"/>
                <declaration name="collectType" type="Class&amp;lt;?&amp;gt;" line="766"/>
                <declaration name="newType" type="MethodType" line="769"/>
            </method>
            <method name="collectArguments" type="MethodHandle" line="772">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="collectArg" type="int"/>
                    <param name="collector" type="MethodHandle"/>
                </params>
                <declaration name="oldType" type="MethodType" line="773"/>
                <declaration name="colType" type="MethodType" line="774"/>
                <declaration name="result" type="MethodHandle" line="777"/>
                <scope line="778"/>
                <scope line="781">
                    <declaration name="gtarget" type="MethodHandle" line="783"/>
                    <declaration name="gcollector" type="MethodHandle" line="784"/>
                    <declaration name="gresult" type="MethodHandle" line="786"/>
                </scope>
            </method>
            <method name="filterArgument" type="MethodHandle" line="791">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="pos" type="int"/>
                    <param name="filter" type="MethodHandle"/>
                </params>
                <declaration name="ttype" type="MethodType" line="792"/>
                <declaration name="ftype" type="MethodType" line="793"/>
                <declaration name="result" type="MethodHandle" line="795"/>
                <scope line="796"/>
                <declaration name="rtype" type="MethodType" line="801"/>
                <declaration name="gttype" type="MethodType" line="802"/>
                <scope line="803"/>
                <declaration name="gftype" type="MethodType" line="807"/>
                <scope line="808"/>
                <scope line="812"/>
                <scope line="815"/>
            </method>
            <method name="foldArguments" type="MethodHandle" line="821">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="foldPos" type="int"/>
                    <param name="combiner" type="MethodHandle"/>
                </params>
                <declaration name="oldType" type="MethodType" line="822"/>
                <declaration name="ctype" type="MethodType" line="823"/>
                <scope line="824">
                    <declaration name="res" type="MethodHandle" line="825"/>
                </scope>
                <declaration name="gtarget" type="MethodHandle" line="830"/>
                <declaration name="gcombiner" type="MethodHandle" line="831"/>
                <scope line="832"/>
                <declaration name="gresult" type="MethodHandle" line="836"/>
            </method>
            <method name="dropArguments" type="MethodHandle" line="839">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="argnum" type="int"/>
                </params>
                <declaration name="drops" type="int" line="840"/>
                <declaration name="res" type="MethodHandle" line="841"/>
            </method>
            <class name="GuardWithTest" line="845">
                <extends class="BoundMethodHandle"/>
                <declaration name="test" type="MethodHandle" line="846"/>
                <method name="GuardWithTest" type="constructor" line="847">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="test" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="fallback" type="MethodHandle"/>
                    </params>
                </method>
                <method name="preferRicochetFrame" type="boolean" line="853">
                    <params>
                        <param name="type" type="MethodType"/>
                    </params>
                </method>
                <method name="make" type="MethodHandle" line="856">
                    <params>
                        <param name="test" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="fallback" type="MethodHandle"/>
                    </params>
                    <declaration name="type" type="MethodType" line="857"/>
                    <declaration name="nargs" type="int" line="858"/>
                    <scope line="859">
                        <declaration name="invoke" type="MethodHandle" line="861"/>
                        <declaration name="gtype" type="MethodType" line="862"/>
                        <declaration name="gtest" type="MethodHandle" line="864"/>
                        <declaration name="gtarget" type="MethodHandle" line="865"/>
                        <declaration name="gfallback" type="MethodHandle" line="866"/>
                        <declaration name="gguard" type="MethodHandle" line="868"/>
                    </scope>
                    <scope line="871">
                        <declaration name="invoke" type="MethodHandle" line="873"/>
                        <declaration name="gtype" type="MethodType" line="874"/>
                        <declaration name="gtest" type="MethodHandle" line="876"/>
                        <declaration name="gtarget" type="MethodHandle" line="877"/>
                        <declaration name="gfallback" type="MethodHandle" line="878"/>
                        <declaration name="gguard" type="MethodHandle" line="879"/>
                    </scope>
                </method>
                <method name="debugString" type="String" line="884"/>
                <method name="invoke_V" type="Object" line="887">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L0" type="Object" line="891"/>
                <method name="invoke_L1" type="Object" line="895">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L2" type="Object" line="899">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L3" type="Object" line="903">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L4" type="Object" line="907">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L5" type="Object" line="911">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L6" type="Object" line="915">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L7" type="Object" line="919">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_L8" type="Object" line="923">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="927">
                    <declaration name="invokes" type="ArrayList&amp;lt;MethodHandle&amp;gt;" line="928"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="929"/>
                    <scope line="930">
                        <declaration name="nargs" type="int" line="931"/>
                        <declaration name="name" type="String" line="932"/>
                        <declaration name="invoke" type="MethodHandle" line="933"/>
                        <scope line="934"/>
                        <scope line="937"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="945"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="946"/>
                <scope line="947">
                    <scope line="948"/>
                    <scope line="951"/>
                </scope>
            </class>
            <method name="selectAlternative" type="MethodHandle" line="956">
                <params>
                    <param name="testResult" type="boolean"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="fallback" type="MethodHandle"/>
                </params>
            </method>
            <declaration name="SELECT_ALTERNATIVE" type="MethodHandle" line="959"/>
            <method name="selectAlternative" type="MethodHandle" line="960">
                <scope line="962"/>
                <scope line="965"/>
            </method>
            <method name="makeGuardWithTest" type="MethodHandle" line="970">
                <params>
                    <param name="test" type="MethodHandle"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="fallback" type="MethodHandle"/>
                </params>
                <declaration name="targetType" type="MethodType" line="972"/>
                <declaration name="foldTargetType" type="MethodType" line="973"/>
                <scope line="974">
                    <declaration name="tailcall" type="MethodHandle" line="976"/>
                    <declaration name="select" type="MethodHandle" line="977"/>
                    <declaration name="filter" type="MethodHandle" line="980"/>
                    <declaration name="fold" type="MethodHandle" line="982"/>
                </scope>
            </method>
            <class name="GuardWithCatch" line="987">
                <extends class="BoundMethodHandle"/>
                <declaration name="target" type="MethodHandle" line="988"/>
                <declaration name="exType" type="Class&amp;lt;? extends Throwable&amp;gt;" line="989"/>
                <declaration name="catcher" type="MethodHandle" line="990"/>
                <method name="GuardWithCatch" type="constructor" line="991">
                    <params>
                        <param name="target" type="MethodHandle"/>
                        <param name="exType" type="Class&lt;? extends Throwable&gt;"/>
                        <param name="catcher" type="MethodHandle"/>
                    </params>
                </method>
                <method name="GuardWithCatch" type="constructor" line="994">
                    <params>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                        <param name="exType" type="Class&lt;? extends Throwable&gt;"/>
                        <param name="catcher" type="MethodHandle"/>
                    </params>
                </method>
                <method name="debugString" type="String" line="1000"/>
                <method name="invoke_V" type="Object" line="1003">
                    <params>
                        <param name="av" type="Object"/>
                    </params>
                    <scope line="1004"/>
                    <scope line="1007"/>
                </method>
                <method name="invoke_L0" type="Object" line="1012">
                    <scope line="1013"/>
                    <scope line="1016"/>
                </method>
                <method name="invoke_L1" type="Object" line="1021">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                    <scope line="1022"/>
                    <scope line="1025"/>
                </method>
                <method name="invoke_L2" type="Object" line="1030">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                    <scope line="1031"/>
                    <scope line="1034"/>
                </method>
                <method name="invoke_L3" type="Object" line="1039">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                    <scope line="1040"/>
                    <scope line="1043"/>
                </method>
                <method name="invoke_L4" type="Object" line="1048">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                    <scope line="1049"/>
                    <scope line="1052"/>
                </method>
                <method name="invoke_L5" type="Object" line="1057">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                    <scope line="1058"/>
                    <scope line="1061"/>
                </method>
                <method name="invoke_L6" type="Object" line="1066">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                    <scope line="1067"/>
                    <scope line="1070"/>
                </method>
                <method name="invoke_L7" type="Object" line="1075">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                    <scope line="1076"/>
                    <scope line="1079"/>
                </method>
                <method name="invoke_L8" type="Object" line="1084">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                    <scope line="1085"/>
                    <scope line="1088"/>
                </method>
                <method name="makeInvokes" type="MethodHandle[]" line="1093">
                    <declaration name="invokes" type="ArrayList&amp;lt;MethodHandle&amp;gt;" line="1094"/>
                    <declaration name="lookup" type="MethodHandles.Lookup" line="1095"/>
                    <scope line="1096">
                        <declaration name="nargs" type="int" line="1097"/>
                        <declaration name="name" type="String" line="1098"/>
                        <declaration name="invoke" type="MethodHandle" line="1099"/>
                        <scope line="1100"/>
                        <scope line="1103"/>
                    </scope>
                </method>
                <declaration name="INVOKES" type="MethodHandle[]" line="1111"/>
                <declaration name="VARARGS_INVOKE" type="MethodHandle" line="1112"/>
                <scope line="1113">
                    <scope line="1114"/>
                    <scope line="1117"/>
                </scope>
            </class>
            <method name="makeGuardWithCatch" type="MethodHandle" line="1122">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="exType" type="Class&lt;? extends Throwable&gt;"/>
                    <param name="catcher" type="MethodHandle"/>
                </params>
                <declaration name="type" type="MethodType" line="1123"/>
                <declaration name="ctype" type="MethodType" line="1124"/>
                <declaration name="nargs" type="int" line="1125"/>
                <scope line="1126">
                    <declaration name="gtype" type="MethodType" line="1127"/>
                    <declaration name="gcatchType" type="MethodType" line="1128"/>
                    <declaration name="gtarget" type="MethodHandle" line="1129"/>
                    <declaration name="gcatcher" type="MethodHandle" line="1130"/>
                    <declaration name="gguard" type="MethodHandle" line="1131"/>
                </scope>
                <scope line="1135">
                    <declaration name="gtype" type="MethodType" line="1136"/>
                    <declaration name="gcatchType" type="MethodType" line="1137"/>
                    <declaration name="gtarget" type="MethodHandle" line="1138"/>
                    <declaration name="gcatcher" type="MethodHandle" line="1140"/>
                    <declaration name="gguard" type="MethodHandle" line="1141"/>
                </scope>
            </method>
            <method name="throwException" type="MethodHandle" line="1146">
                <params>
                    <param name="type" type="MethodType"/>
                </params>
            </method>
            <declaration name="THROW_EXCEPTION" type="MethodHandle" line="1149"/>
            <method name="throwException" type="MethodHandle" line="1150">
                <scope line="1152"/>
                <scope line="1155"/>
            </method>
            <method name="throwException" type="Empty" line="1160">
                <params>
                    <param name="t" type="T"/>
                </params>
            </method>
            <method name="registerBootstrap" type="void" line="1163">
                <params>
                    <param name="callerClass" type="Class&lt;?&gt;"/>
                    <param name="bootstrapMethod" type="MethodHandle"/>
                </params>
            </method>
            <method name="getBootstrap" type="MethodHandle" line="1166">
                <params>
                    <param name="callerClass" type="Class&lt;?&gt;"/>
                </params>
            </method>
        </class>
    </source>