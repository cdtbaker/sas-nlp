<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.ValueConversions"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="java.lang.reflect"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="FromGeneric" line="34">
            <comment line="53">
                type for the outgoing call (may have primitives, etc.)                
            </comment>
            <comment line="55">
                type of the outgoing call internal to the adapter                
            </comment>
            <comment line="57">
                prototype adapter (clone and customize for each new target!)                
            </comment>
            <comment line="59">
                entry point for adapter (Adapter mh, a...) =&gt; ...                
            </comment>
            <comment line="61">
                unboxing invoker of type (MH, Object**N) =&gt; raw return value                
            </comment>
            <comment line="62">
                it makes up the difference of internalType =&gt; targetType                
            </comment>
            <comment line="64">
                conversion which boxes a the target&apos;s raw return value                
            </comment>
            <comment line="190">
                                
            </comment>
            <comment line="318">
                generated classes follow this pattern:
                static class xA2 extends Adapter {
                protected xA2(MethodHandle entryPoint) { super(entryPoint); }   to build prototype
                protected xA2(MethodHandle e, MethodHandle i, MethodHandle c, MethodHandle t)
                { super(e, i, c, t); }
                protected xA2 makeInstance(MethodHandle e, MethodHandle i, MethodHandle c, MethodHandle t)
                { return new xA2(e, i, c, t); }
                protected Object invoke_L2(Object a0, Object a1) throws Throwable { return convert_L((Object)invoker.invokeExact(target, a0, a1)); }
                protected Object invoke_I2(Object a0, Object a1) throws Throwable { return convert_I((int)   invoker.invokeExact(target, a0, a1)); }
                protected Object invoke_J2(Object a0, Object a1) throws Throwable { return convert_J((long)  invoker.invokeExact(target, a0, a1)); }
                protected Object invoke_F2(Object a0, Object a1) throws Throwable { return convert_F((float) invoker.invokeExact(target, a0, a1)); }
                protected Object invoke_D2(Object a0, Object a1) throws Throwable { return convert_D((double)invoker.invokeExact(target, a0, a1)); }
                }                
            </comment>
            <comment line="333">
                : SHELL; n=FromGeneric; cp -p $n.java $n.java-; sed &lt; $n.java- &gt; $n.java+ -e &apos;{{{{,}}}}w tmpgenclasses.java&apos; -e &apos;}}}}q&apos;; (cd tmp; javac -d . genclasses.java; java -cp . genclasses) &gt;&gt; $n.java+; echo &apos;}&apos; &gt;&gt; $n.java+; mv $n.java+ $n.java; mv $n.java- $n.java~
                {{{
                import java.util.;
                class genclasses {
                static String[] TYPES = { &quot;Object&quot;,    &quot;int   &quot;,    &quot;long  &quot;,    &quot;float &quot;,    &quot;double&quot; };
                static String[] WRAPS = { &quot;         &quot;, &quot;(Integer)&quot;, &quot;(Long)   &quot;, &quot;(Float)  &quot;, &quot;(Double) &quot; };
                static String[] TCHARS = { &quot;L&quot;,     &quot;I&quot;,      &quot;J&quot;,      &quot;F&quot;,      &quot;D&quot;,     &quot;A&quot; };
                static String[][] TEMPLATES = { {
                &quot;@for@ arity=0..10  rcat&lt;=4 nrefs&lt;=99 nints=0   nlongs=0&quot;,
                &quot;    @each-cat@&quot;,
                &quot;    static class @cat@ extends Adapter {&quot;,
                &quot;        protected @cat@(MethodHandle entryPoint) { super(entryPoint); }   to build prototype&quot;,
                &quot;        protected @cat@(MethodHandle e, MethodHandle i, MethodHandle c, MethodHandle t)&quot;,
                &quot;                        { super(e, i, c, t); }&quot;,
                &quot;        protected @cat@ makeInstance(MethodHandle e, MethodHandle i, MethodHandle c, MethodHandle t)&quot;,
                &quot;                        { return new @cat@(e, i, c, t); }&quot;,
                &quot;        @each-R@&quot;,
                &quot;        protected Object invoke_@catN@(@Tvav@) throws Throwable { return convert_@Rc@((@R@)@W@invoker.invokeExact(target@av@)); }&quot;,
                &quot;        @end-R@&quot;,
                &quot;    }&quot;,
                } };
                static final String NEWLINE_INDENT = &quot;\n                &quot;;
                enum VAR {
                cat, catN, R, Rc, W, av, Tvav, Ovav;
                public final String pattern = &quot;@&quot;+toString().replace(&apos;_&apos;,&apos;.&apos;)+&quot;@&quot;;
                public String binding;
                static void makeBindings(boolean topLevel, int rcat, int nrefs, int nints, int nlongs) {
                int nargs = nrefs + nints + nlongs;
                if (topLevel)
                VAR.cat.binding = catstr(ALL_RETURN_TYPES ? TYPES.length : rcat, nrefs, nints, nlongs);
                VAR.catN.binding = catstr(rcat, nrefs, nints, nlongs);
                VAR.R.binding = TYPES[rcat];
                VAR.Rc.binding = TCHARS[rcat];
                VAR.W.binding = WRAPS[rcat];
                String[] Tv = new String[nargs];
                String[] av = new String[nargs];
                String[] Tvav = new String[nargs];
                String[] Ovav = new String[nargs];
                for (int i = 0; i &lt; nargs; i++) {
                int tcat = (i &lt; nrefs) ? 0 : (i &lt; nrefs + nints) ? 1 : 2;
                Tv[i] = TYPES[tcat];
                av[i] = arg(i);
                Tvav[i] = param(Tv[i], av[i]);
                Ovav[i] = param(&quot;Object&quot;, av[i]);
                }
                VAR.av.binding = comma(&quot;, &quot;, av);
                VAR.Tvav.binding = comma(Tvav);
                VAR.Ovav.binding = comma(Ovav);
                }
                static String arg(int i) { return &quot;a&quot;+i; }
                static String param(String t, String a) { return t+&quot; &quot;+a; }
                static String comma(String[] v) { return comma(&quot;&quot;, v); }
                static String comma(String sep, String[] v) {
                if (v.length == 0)  return &quot;&quot;;
                String res = sep+v[0];
                for (int i = 1; i &lt; v.length; i++)  res += &quot;, &quot;+v[i];
                return res;
                }
                static String transform(String string) {
                for (VAR var : values())
                string = string.replaceAll(var.pattern, var.binding);
                return string;
                }
                }
                static String[] stringsIn(String[] strings, int beg, int end) {
                return Arrays.copyOfRange(strings, beg, Math.min(end, strings.length));
                }
                static String[] stringsBefore(String[] strings, int pos) {
                return stringsIn(strings, 0, pos);
                }
                static String[] stringsAfter(String[] strings, int pos) {
                return stringsIn(strings, pos, strings.length);
                }
                static int indexAfter(String[] strings, int pos, String tag) {
                return Math.min(indexBefore(strings, pos, tag) + 1, strings.length);
                }
                static int indexBefore(String[] strings, int pos, String tag) {
                for (int i = pos, end = strings.length; ; i++) {
                if (i == end || strings[i].endsWith(tag))  return i;
                }
                }
                static int MIN_ARITY, MAX_ARITY, MAX_RCAT, MAX_REFS, MAX_INTS, MAX_LONGS;
                static boolean ALL_ARG_TYPES, ALL_RETURN_TYPES;
                static HashSet&lt;String&gt; done = new HashSet&lt;String&gt;();
                public static void main(String... av) {
                for (String[] template : TEMPLATES) {
                int forLinesLimit = indexBefore(template, 0, &quot;@each-cat@&quot;);
                String[] forLines = stringsBefore(template, forLinesLimit);
                template = stringsAfter(template, forLinesLimit);
                for (String forLine : forLines)
                expandTemplate(forLine, template);
                }
                }
                static void expandTemplate(String forLine, String[] template) {
                String[] params = forLine.split(&quot;[^0-9]+&quot;);
                if (params[0].length() == 0)  params = stringsAfter(params, 1);
                System.out.println(&quot;params=&quot;+Arrays.asList(params));
                int pcur = 0;
                MIN_ARITY = Integer.valueOf(params[pcur++]);
                MAX_ARITY = Integer.valueOf(params[pcur++]);
                MAX_RCAT  = Integer.valueOf(params[pcur++]);
                MAX_REFS  = Integer.valueOf(params[pcur++]);
                MAX_INTS  = Integer.valueOf(params[pcur++]);
                MAX_LONGS = Integer.valueOf(params[pcur++]);
                if (pcur != params.length)  throw new RuntimeException(&quot;bad extra param: &quot;+forLine);
                if (MAX_RCAT &gt;= TYPES.length)  MAX_RCAT = TYPES.length - 1;
                ALL_ARG_TYPES = (indexBefore(template, 0, &quot;@each-Tv@&quot;) &lt; template.length);
                ALL_RETURN_TYPES = (indexBefore(template, 0, &quot;@each-R@&quot;) &lt; template.length);
                for (int nargs = MIN_ARITY; nargs &lt;= MAX_ARITY; nargs++) {
                for (int rcat = 0; rcat &lt;= MAX_RCAT; rcat++) {
                expandTemplate(template, true, rcat, nargs, 0, 0);
                if (ALL_ARG_TYPES)  break;
                expandTemplateForPrims(template, true, rcat, nargs, 1, 1);
                if (ALL_RETURN_TYPES)  break;
                }
                }
                }
                static String catstr(int rcat, int nrefs, int nints, int nlongs) {
                int nargs = nrefs + nints + nlongs;
                String cat = TCHARS[rcat] + nargs;
                if (!ALL_ARG_TYPES)  cat += (nints==0?&quot;&quot;:&quot;I&quot;+nints)+(nlongs==0?&quot;&quot;:&quot;J&quot;+nlongs);
                return cat;
                }
                static void expandTemplateForPrims(String[] template, boolean topLevel, int rcat, int nargs, int minints, int minlongs) {
                for (int isLong = 0; isLong &lt;= 1; isLong++) {
                for (int nprims = 1; nprims &lt;= nargs; nprims++) {
                int nrefs = nargs - nprims;
                int nints = ((1-isLong)  nprims);
                int nlongs = (isLong  nprims);
                expandTemplate(template, topLevel, rcat, nrefs, nints, nlongs);
                }
                }
                }
                static void expandTemplate(String[] template, boolean topLevel,
                int rcat, int nrefs, int nints, int nlongs) {
                int nargs = nrefs + nints + nlongs;
                if (nrefs &gt; MAX_REFS || nints &gt; MAX_INTS || nlongs &gt; MAX_LONGS)  return;
                VAR.makeBindings(topLevel, rcat, nrefs, nints, nlongs);
                if (topLevel &amp;&amp; !done.add(VAR.cat.binding)) {
                System.out.println(&quot;    repeat &quot;+VAR.cat.binding);
                return;
                }
                for (int i = 0; i &lt; template.length; i++) {
                String line = template[i];
                if (line.endsWith(&quot;@each-cat@&quot;)) {
                 ignore
                } else if (line.endsWith(&quot;@each-R@&quot;)) {
                int blockEnd = indexAfter(template, i, &quot;@end-R@&quot;);
                String[] block = stringsIn(template, i+1, blockEnd-1);
                for (int rcat1 = rcat; rcat1 &lt;= MAX_RCAT; rcat1++)
                expandTemplate(block, false, rcat1, nrefs, nints, nlongs);
                VAR.makeBindings(topLevel, rcat, nrefs, nints, nlongs);
                i = blockEnd-1; continue;
                } else if (line.endsWith(&quot;@each-Tv@&quot;)) {
                int blockEnd = indexAfter(template, i, &quot;@end-Tv@&quot;);
                String[] block = stringsIn(template, i+1, blockEnd-1);
                expandTemplate(block, false, rcat, nrefs, nints, nlongs);
                expandTemplateForPrims(block, false, rcat, nargs, nints+1, nlongs+1);
                VAR.makeBindings(topLevel, rcat, nrefs, nints, nlongs);
                i = blockEnd-1; continue;
                } else {
                System.out.println(VAR.transform(line));
                }
                }
                }
                }                
            </comment>
            <comment line="501">
                params=[0, 10, 4, 99, 0, 0]                
            </comment>
            <javadoc line="34">
                Adapters which mediate between incoming calls which are generic
                  and outgoing calls which are not.  Any call can be represented generically
                  boxing up its arguments, and (on return) unboxing the return value.
                  &lt;p&gt;
                  A call is &quot;generic&quot; (in MethodHandle terms) if its MethodType features
                  only Object arguments.  A non-generic call therefore features
                  primitives and/or reference types other than Object.
                  An adapter has types for its incoming and outgoing calls.
                  The incoming call type is simply determined by the adapter&apos;s type
                  (the MethodType it presents to callers).  The outgoing call type
                  is determined by the adapter&apos;s target (a MethodHandle that the adapter
                  either binds internally or else takes as a leading argument).
                  (To stretch the term, adapter-like method handles may have multiple
                  targets or be polymorphic across multiple call types.)                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="targetType" type="MethodType" line="53"/>
            <declaration name="internalType" type="MethodType" line="55"/>
            <declaration name="adapter" type="Adapter" line="57"/>
            <declaration name="entryPoint" type="MethodHandle" line="59"/>
            <declaration name="unboxingInvoker" type="MethodHandle" line="62"/>
            <declaration name="returnConversion" type="MethodHandle" line="64"/>
            <javadoc line="66">
                Compute and cache information common to all unboxing adapters
                  that can call out to targets of the erasure-family of the given erased type.                
            </javadoc>
            <method name="FromGeneric" type="constructor" line="69">
                <params>
                    <param name="targetType" type="MethodType"/>
                </params>
                <comment line="72">
                    the target invoker will generally need casts on reference arguments                    
                </comment>
                <comment line="75">
                    Immediate hit to exactly the adapter we want,                    
                </comment>
                <comment line="76">
                    with no monkeying around with primitive types.                    
                </comment>
                <comment line="85">
                    outgoing primitive arguments will be wrapped; unwrap them                    
                </comment>
                <declaration name="internalType0" type="MethodType" line="71"/>
                <declaration name="ad" type="Adapter" line="73"/>
                <scope line="74"/>
                <declaration name="primsAsObj" type="MethodType" line="86"/>
                <declaration name="objArgsRawRet" type="MethodType" line="87"/>
                <scope line="90"/>
                <declaration name="tepType" type="MethodType" line="95"/>
            </method>
            <scope line="101"/>
            <javadoc line="105">
                The typed target will be called according to targetType.
                  The adapter code will in fact see the raw result from internalType,
                  and must box it into an object.  Produce a converter for this.                
            </javadoc>
            <method name="computeReturnConversion" type="MethodHandle" line="111">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="internalType" type="MethodType"/>
                </params>
                <declaration name="tret" type="Class&lt;?&gt;" line="112"/>
                <declaration name="iret" type="Class&lt;?&gt;" line="113"/>
                <declaration name="wrap" type="Wrapper" line="114"/>
                <scope line="115"/>
                <scope line="118"/>
                <scope line="120"/>
            </method>
            <javadoc line="126">
                The typed target will need an exact invocation point; provide it here.
                  The adapter will possibly need to make a slightly different call,
                  so adapt the invoker.  This way, the logic for making up the
                  difference between what the adapter can call and what the target
                  needs can be cached once per type.                
            </javadoc>
            <method name="computeUnboxingInvoker" type="MethodHandle" line="134">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="internalType" type="MethodType"/>
                </params>
                <comment line="135">
                    All the adapters we have here have reference-untyped internal calls.                    
                </comment>
                <comment line="138">
                    cast all narrow reference types, unbox all primitive arguments:                    
                </comment>
                <comment line="145">
                    reinterpret the calling sequence as raw:                    
                </comment>
                <declaration name="invoker" type="MethodHandle" line="137"/>
                <declaration name="fixArgsType" type="MethodType" line="139"/>
                <declaration name="fixArgs" type="MethodHandle" line="140"/>
                <declaration name="retyper" type="MethodHandle" line="146"/>
            </method>
            <method name="makeInstance" type="Adapter" line="153">
                <params>
                    <param name="typedTarget" type="MethodHandle"/>
                </params>
                <comment line="158">
                    my erased-type is not exactly the same as the desired type                    
                </comment>
                <comment line="159">
                    else we are busted                    
                </comment>
                <declaration name="type" type="MethodType" line="154"/>
                <scope line="155"/>
                <declaration name="invoker" type="MethodHandle" line="160"/>
            </method>
            <javadoc line="164">
                Build an adapter of the given generic type, which invokes typedTarget
                  on the incoming arguments, after unboxing as necessary.
                  The return value is boxed if necessary.                
                <param>
                    typedTarget the target                    
                </param>
                <return>
                    an adapter method handle                    
                </return>
            </javadoc>
            <method name="make" type="MethodHandle" line="170">
                <params>
                    <param name="typedTarget" type="MethodHandle"/>
                </params>
                <declaration name="type" type="MethodType" line="171"/>
            </method>
            <javadoc line="176">
                Return the adapter information for this type&apos;s erasure.                
            </javadoc>
            <method name="of" type="FromGeneric" line="177">
                <params>
                    <param name="type" type="MethodType"/>
                </params>
                <declaration name="form" type="MethodTypeForm" line="178"/>
                <declaration name="fromGen" type="FromGeneric" line="179"/>
            </method>
            <method name="toString" type="String" line="185"/>
            <method name="findAdapter" type="Adapter" line="190">
                <params>
                    <param name="internalType" type="MethodType"/>
                </params>
                <comment line="203">
                    e.g., D5I2, D5, L5I2, L5; invoke_D5                    
                </comment>
                <comment line="207">
                    see if it has the required invoke method                    
                </comment>
                <comment line="222">
                    Produce an instance configured as a prototype.                    
                </comment>
                <declaration name="entryType" type="MethodType" line="191"/>
                <declaration name="form" type="MethodTypeForm" line="192"/>
                <declaration name="rtype" type="Class&lt;?&gt;" line="193"/>
                <declaration name="argc" type="int" line="194"/>
                <declaration name="lac" type="int" line="195"/>
                <declaration name="iac" type="int" line="196"/>
                <declaration name="intsAndLongs" type="String" line="197"/>
                <declaration name="rawReturn" type="String" line="198"/>
                <declaration name="cname0" type="String" line="199"/>
                <declaration name="cname1" type="String" line="200"/>
                <declaration name="cnames" type="String[]" line="201"/>
                <declaration name="iname" type="String" line="202"/>
                <scope line="204">
                    <declaration name="acls" type="Class&lt;? extends Adapter&gt;" line="205"/>
                    <declaration name="entryPoint" type="MethodHandle" line="208"/>
                    <scope line="209"/>
                    <scope line="211"/>
                    <declaration name="ctor" type="Constructor&lt;? extends Adapter&gt;" line="214"/>
                    <scope line="215"/>
                    <scope line="217"/>
                    <scope line="218"/>
                    <scope line="221"/>
                    <scope line="224"/>
                    <scope line="225">
                        <declaration name="ex" type="Throwable" line="226"/>
                    </scope>
                    <scope line="229"/>
                    <scope line="230"/>
                </scope>
            </method>
            <method name="buildAdapterFromBytecodes" type="Adapter" line="236">
                <params>
                    <param name="internalType" type="MethodType"/>
                </params>
            </method>
            <class name="Adapter" line="240">
                <extends class="BoundMethodHandle"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <javadoc line="240">
                    This adapter takes some untyped arguments, and returns an untyped result.
                      Internally, it applies the invoker to the target, which causes the
                      objects to be unboxed; the result is a raw type in L/I/J/F/D.
                      This result is passed to convert, which is responsible for
                      converting the raw result into a boxed object.
                      The invoker is kept separate from the target because it can be
                      generated once per type erasure family, and reused across adapters.                    
                </javadoc>
                <declaration name="invoker" type="MethodHandle" line="258"/>
                <declaration name="convert" type="MethodHandle" line="259"/>
                <declaration name="target" type="MethodHandle" line="260"/>
                <method name="debugString" type="String" line="263"/>
                <method name="isPrototype" type="boolean" line="267"/>
                <method name="Adapter" type="constructor" line="268">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="prototypeEntryPoint" type="MethodHandle" line="272"/>
                <method name="Adapter" type="constructor" line="278">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                        <param name="invoker" type="MethodHandle"/>
                        <param name="convert" type="MethodHandle"/>
                        <param name="target" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="Adapter" line="285"/>
                <javadoc line="285">
                    Make a copy of self, with new fields.                    
                </javadoc>
                <method name="convert_L" type="Object" line="291">
                    <params>
                        <param name="result" type="Object"/>
                    </params>
                </method>
                <method name="convert_I" type="Object" line="292">
                    <params>
                        <param name="result" type="int"/>
                    </params>
                </method>
                <method name="convert_J" type="Object" line="293">
                    <params>
                        <param name="result" type="long"/>
                    </params>
                </method>
                <method name="convert_F" type="Object" line="294">
                    <params>
                        <param name="result" type="float"/>
                    </params>
                </method>
                <method name="convert_D" type="Object" line="295">
                    <params>
                        <param name="result" type="double"/>
                    </params>
                </method>
                <declaration name="CLASS_PREFIX" type="String" line="297"/>
                <scope line="298">
                    <declaration name="aname" type="String" line="299"/>
                    <declaration name="sname" type="String" line="300"/>
                </scope>
                <javadoc line="304">
                    Find a sibing class of Adapter.                    
                </javadoc>
                <method name="findSubClass" type="Class<? extends Adapter>" line="305">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="cname" type="String" line="306"/>
                    <scope line="307"/>
                    <scope line="309"/>
                    <scope line="311"/>
                </method>
            </class>
            <class name="A0" line="501">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A0" type="constructor" line="502">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A0" type="constructor" line="504">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A0" line="506">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L0" type="Object" line="507"/>
                <method name="invoke_I0" type="Object" line="508"/>
                <method name="invoke_J0" type="Object" line="509"/>
                <method name="invoke_F0" type="Object" line="510"/>
                <method name="invoke_D0" type="Object" line="511"/>
            </class>
            <class name="A1" line="513">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A1" type="constructor" line="514">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A1" type="constructor" line="516">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A1" line="518">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L1" type="Object" line="519">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I1" type="Object" line="520">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J1" type="Object" line="521">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F1" type="Object" line="522">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D1" type="Object" line="523">
                    <params>
                        <param name="a0" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A2" line="525">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A2" type="constructor" line="526">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A2" type="constructor" line="528">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A2" line="530">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L2" type="Object" line="531">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I2" type="Object" line="532">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J2" type="Object" line="533">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F2" type="Object" line="534">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D2" type="Object" line="535">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A3" line="537">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A3" type="constructor" line="538">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A3" type="constructor" line="540">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A3" line="542">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L3" type="Object" line="543">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I3" type="Object" line="544">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J3" type="Object" line="545">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F3" type="Object" line="546">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D3" type="Object" line="547">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A4" line="549">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A4" type="constructor" line="550">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A4" type="constructor" line="552">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A4" line="554">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L4" type="Object" line="555">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I4" type="Object" line="556">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J4" type="Object" line="557">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F4" type="Object" line="558">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D4" type="Object" line="559">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A5" line="561">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A5" type="constructor" line="562">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A5" type="constructor" line="564">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A5" line="566">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L5" type="Object" line="567">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I5" type="Object" line="568">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J5" type="Object" line="569">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F5" type="Object" line="570">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D5" type="Object" line="571">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A6" line="573">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A6" type="constructor" line="574">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A6" type="constructor" line="576">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A6" line="578">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L6" type="Object" line="579">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I6" type="Object" line="580">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J6" type="Object" line="581">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F6" type="Object" line="582">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D6" type="Object" line="583">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A7" line="585">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A7" type="constructor" line="586">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A7" type="constructor" line="588">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A7" line="590">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L7" type="Object" line="591">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I7" type="Object" line="592">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J7" type="Object" line="593">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F7" type="Object" line="594">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D7" type="Object" line="595">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A8" line="597">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A8" type="constructor" line="598">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A8" type="constructor" line="600">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A8" line="602">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L8" type="Object" line="603">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I8" type="Object" line="604">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J8" type="Object" line="605">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F8" type="Object" line="606">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D8" type="Object" line="607">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A9" line="609">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A9" type="constructor" line="610">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A9" type="constructor" line="612">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A9" line="614">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L9" type="Object" line="615">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I9" type="Object" line="616">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J9" type="Object" line="617">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F9" type="Object" line="618">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D9" type="Object" line="619">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="A10" line="621">
                <extends class="Adapter"/>
                <comment line="251">
                    class X&lt;&lt;R,int N&gt;&gt; extends Adapter {
                       (MH, ObjectN)=&gt;raw(R) invoker;
                       (anyN)=&gt;R target;
                       raw(R)=&gt;Object convert;
                       Object invoke(ObjectN a) = convert(invoker(target, a...))
                     }                    
                </comment>
                <comment line="259">
                    (MH, Object**N) =&gt; raw(R)                    
                </comment>
                <comment line="260">
                    raw(R) =&gt; Object                    
                </comment>
                <comment line="261">
                    (any**N) =&gt; R                    
                </comment>
                <comment line="289">
                    { return new ThisType(entryPoint, convert, target); }                    
                </comment>
                <comment line="291">
                    / Conversions on the value returned from the target.                    
                </comment>
                <comment line="298">
                    &quot;java.lang.invoke.FromGeneric$&quot;                    
                </comment>
                <comment line="503">
                    to build prototype                    
                </comment>
                <comment line="515">
                    to build prototype                    
                </comment>
                <comment line="527">
                    to build prototype                    
                </comment>
                <comment line="539">
                    to build prototype                    
                </comment>
                <comment line="551">
                    to build prototype                    
                </comment>
                <comment line="563">
                    to build prototype                    
                </comment>
                <comment line="575">
                    to build prototype                    
                </comment>
                <comment line="587">
                    to build prototype                    
                </comment>
                <comment line="599">
                    to build prototype                    
                </comment>
                <comment line="611">
                    to build prototype                    
                </comment>
                <comment line="623">
                    to build prototype                    
                </comment>
                <method name="A10" type="constructor" line="622">
                    <params>
                        <param name="entryPoint" type="MethodHandle"/>
                    </params>
                </method>
                <method name="A10" type="constructor" line="624">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="makeInstance" type="A10" line="626">
                    <params>
                        <param name="e" type="MethodHandle"/>
                        <param name="i" type="MethodHandle"/>
                        <param name="c" type="MethodHandle"/>
                        <param name="t" type="MethodHandle"/>
                    </params>
                </method>
                <method name="invoke_L10" type="Object" line="627">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                    </params>
                </method>
                <method name="invoke_I10" type="Object" line="628">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                    </params>
                </method>
                <method name="invoke_J10" type="Object" line="629">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                    </params>
                </method>
                <method name="invoke_F10" type="Object" line="630">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                    </params>
                </method>
                <method name="invoke_D10" type="Object" line="631">
                    <params>
                        <param name="a0" type="Object"/>
                        <param name="a1" type="Object"/>
                        <param name="a2" type="Object"/>
                        <param name="a3" type="Object"/>
                        <param name="a4" type="Object"/>
                        <param name="a5" type="Object"/>
                        <param name="a6" type="Object"/>
                        <param name="a7" type="Object"/>
                        <param name="a8" type="Object"/>
                        <param name="a9" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>