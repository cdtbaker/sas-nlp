<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="FilterOneArgument" line="4">
            <extends class="BoundMethodHandle"/>
            <javadoc line="4">
                Unary function composition, useful for many small plumbing jobs.
                  The invoke method takes a single reference argument, and returns a reference
                  Internally, it first calls the {@code filter} method on the argument,
                  Making up the difference between the raw method type and the
                  final method type is the responsibility of a JVM-level adapter.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="filter" type="MethodHandle" line="13"/>
            <declaration name="target" type="MethodHandle" line="14"/>
            <method name="debugString" type="String" line="15"/>
            <method name="invoke" type="Object" line="18">
                <params>
                    <param name="argument" type="Object"/>
                </params>
                <declaration name="filteredArgument" type="Object" line="19"/>
            </method>
            <declaration name="INVOKE" type="MethodHandle" line="22"/>
            <scope line="23">
                <scope line="24"/>
                <scope line="27"/>
            </scope>
            <method name="FilterOneArgument" type="constructor" line="31">
                <params>
                    <param name="filter" type="MethodHandle"/>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
            <scope line="36"/>
            <method name="make" type="MethodHandle" line="39">
                <params>
                    <param name="filter" type="MethodHandle"/>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
        </class>
    </source>