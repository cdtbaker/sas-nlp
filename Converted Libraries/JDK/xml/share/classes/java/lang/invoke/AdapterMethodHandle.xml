<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util.VerifyType"/>
        <import package="sun.invoke.util.Wrapper"/>
        <import package="sun.invoke.util.ValueConversions"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.lang.invoke.MethodHandleNatives.Constants"/>
        <import package="java.lang.invoke.MethodHandleStatics"/>
        <class name="AdapterMethodHandle" line="10">
            <extends class="BoundMethodHandle"/>
            <javadoc line="10">
                This method handle performs simple conversion or checking of a single argument.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="conversion" type="int" line="15"/>
            <method name="AdapterMethodHandle" type="constructor" line="16">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="conv" type="long"/>
                    <param name="convArg" type="Object"/>
                </params>
            </method>
            <method name="AdapterMethodHandle" type="constructor" line="21">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="newType" type="MethodType"/>
                    <param name="conv" type="long"/>
                </params>
            </method>
            <method name="getConversion" type="int" line="24"/>
            <javadoc line="27">
                Can a JVM-level adapter directly implement the proposed
                  argument conversions, as if by fixed-arity MethodHandle.asType?                
            </javadoc>
            <method name="canPairwiseConvert" type="boolean" line="31">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="oldType" type="MethodType"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="len" type="int" line="32"/>
                <declaration name="exp" type="Class&lt;?&gt;" line="34"/>
                <declaration name="ret" type="Class&lt;?&gt;" line="35"/>
                <scope line="36"/>
                <scope line="40">
                    <declaration name="src" type="Class&lt;?&gt;" line="41"/>
                    <declaration name="dst" type="Class&lt;?&gt;" line="42"/>
                </scope>
            </method>
            <javadoc line="47">
                Can a JVM-level adapter directly implement the proposed
                  argument conversion, as if by fixed-arity MethodHandle.asType?                
            </javadoc>
            <method name="canConvertArgument" type="boolean" line="51">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                    <param name="level" type="int"/>
                </params>
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="62"/>
            </method>
            <javadoc line="67">
                Create a JVM-level adapter method handle to conform the given method
                  handle to the similar newType, using only pairwise argument conversions.
                  For each argument, convert incoming argument to the exact type needed.
                  The argument conversions allowed are casting, boxing and unboxing,
                  integral widening or narrowing, and floating point widening or narrowing.                
                <param>
                    newType required call type                    
                </param>
                <param>
                    target original method handle                    
                </param>
                <param>
                    level which strength of conversion is allowed                    
                </param>
                <return>
                    an adapter to the original handle with the desired new type,
                      or the original target if the types are already identical
                      or null if the adaptation cannot be made                    
                </return>
            </javadoc>
            <method name="makePairwiseConvert" type="MethodHandle" line="80">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="level" type="int"/>
                </params>
            </method>
            <method name="isTrivialConversion" type="boolean" line="147">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="sp" type="boolean" line="151"/>
                <declaration name="dp" type="boolean" line="152"/>
                <scope line="154"/>
                <scope line="157"/>
            </method>
            <method name="makeReturnConversion" type="MethodHandle" line="161">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="haveReturn" type="Class<?>"/>
                    <param name="needReturn" type="Class<?>"/>
                </params>
                <declaration name="adjustReturn" type="MethodHandle" line="162"/>
                <scope line="163">
                    <declaration name="zero" type="Object" line="164"/>
                </scope>
                <scope line="167">
                    <declaration name="needConversion" type="MethodType" line="168"/>
                </scope>
                <scope line="171"/>
            </method>
            <javadoc line="177">
                Create a JVM-level adapter method handle to permute the arguments
                  of the given method.                
                <param>
                    newType required call type                    
                </param>
                <param>
                    target original method handle                    
                </param>
                <param>
                    argumentMap for each target argument, position of its source in newType                    
                </param>
                <return>
                    an adapter to the original handle with the desired new type,
                      or the original target if the types are already identical
                      and the permutation is null                    
                </return>
                <throws>
                    IllegalArgumentException if the adaptation cannot be made
                      directly by a JVM-level adapter, without help from Java code                    
                </throws>
            </javadoc>
            <method name="makePermutation" type="MethodHandle" line="189">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="argumentMap" type="int[]"/>
                </params>
                <declaration name="oldType" type="MethodType" line="190"/>
                <declaration name="nullPermutation" type="boolean" line="191"/>
                <scope line="192">
                    <declaration name="pos" type="int" line="193"/>
                    <scope line="195"/>
                </scope>
                <scope line="201">
                    <declaration name="res" type="MethodHandle" line="202"/>
                </scope>
                <declaration name="exp" type="Class&lt;?&gt;" line="206"/>
                <declaration name="ret" type="Class&lt;?&gt;" line="207"/>
                <scope line="209">
                    <declaration name="j" type="int" line="210"/>
                    <declaration name="src" type="Class&lt;?&gt;" line="211"/>
                    <declaration name="dst" type="Class&lt;?&gt;" line="212"/>
                </scope>
            </method>
            <method name="basicType" type="byte" line="217">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="243">
                Number of stack slots for the given type.
                  Two for T_DOUBLE and T_FLOAT, one for the rest.                
            </javadoc>
            <method name="type2size" type="int" line="247">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <method name="type2size" type="int" line="251">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="254">
                The given stackMove is the number of slots pushed.
                  It might be negative.  Scale it (multiply) by the
                  VM&apos;s notion of how an address changes with a push,
                  to get the raw SP change for stackMove.
                  Then shift and mask it into the correct field.                
            </javadoc>
            <method name="insertStackMove" type="long" line="261">
                <params>
                    <param name="stackMove" type="int"/>
                </params>
                <declaration name="spChange" type="long" line="262"/>
            </method>
            <method name="extractStackMove" type="int" line="265">
                <params>
                    <param name="convOp" type="int"/>
                </params>
                <declaration name="spChange" type="int" line="266"/>
            </method>
            <method name="extractStackMove" type="int" line="269">
                <params>
                    <param name="target" type="MethodHandle"/>
                </params>
                <scope line="270">
                    <declaration name="amh" type="AdapterMethodHandle" line="271"/>
                </scope>
                <scope line="274"/>
            </method>
            <javadoc line="278">
                Construct an adapter conversion descriptor for a single-argument conversion.                
            </javadoc>
            <method name="makeConv" type="long" line="281">
                <params>
                    <param name="convOp" type="int"/>
                    <param name="argnum" type="int"/>
                    <param name="src" type="int"/>
                    <param name="dest" type="int"/>
                </params>
                <declaration name="stackMove" type="int" line="285"/>
            </method>
            <method name="makeDupConv" type="long" line="288">
                <params>
                    <param name="convOp" type="int"/>
                    <param name="argnum" type="int"/>
                    <param name="stackMove" type="int"/>
                </params>
                <declaration name="src" type="byte" line="290"/>
            </method>
            <method name="makeSwapConv" type="long" line="293">
                <params>
                    <param name="convOp" type="int"/>
                    <param name="srcArg" type="int"/>
                    <param name="srcType" type="byte"/>
                    <param name="destSlot" type="int"/>
                    <param name="destType" type="byte"/>
                </params>
            </method>
            <method name="makeSpreadConv" type="long" line="297">
                <params>
                    <param name="convOp" type="int"/>
                    <param name="argnum" type="int"/>
                    <param name="src" type="int"/>
                    <param name="dest" type="int"/>
                    <param name="stackMove" type="int"/>
                </params>
            </method>
            <method name="makeConv" type="long" line="301">
                <params>
                    <param name="convOp" type="int"/>
                </params>
            </method>
            <method name="convCode" type="int" line="305">
                <params>
                    <param name="conv" type="long"/>
                </params>
            </method>
            <method name="convArgPos" type="int" line="308">
                <params>
                    <param name="conv" type="long"/>
                </params>
            </method>
            <method name="convOpSupported" type="boolean" line="311">
                <params>
                    <param name="convOp" type="int"/>
                </params>
            </method>
            <javadoc line="315">
                One of OP_RETYPE_ONLY, etc.                
            </javadoc>
            <method name="conversionOp" type="int" line="318"/>
            <method name="diffTypes" type="int" line="321">
                <params>
                    <param name="adapterType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="raw" type="boolean"/>
                </params>
                <declaration name="diff" type="int" line="322"/>
                <declaration name="nargs" type="int" line="325"/>
            </method>
            <method name="diffReturnTypes" type="int" line="330">
                <params>
                    <param name="adapterType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="raw" type="boolean"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="331"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="332"/>
            </method>
            <method name="diffParamTypes" type="int" line="337">
                <params>
                    <param name="adapterType" type="MethodType"/>
                    <param name="astart" type="int"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="tstart" type="int"/>
                    <param name="nargs" type="int"/>
                    <param name="raw" type="boolean"/>
                </params>
                <declaration name="res" type="int" line="339"/>
                <scope line="340">
                    <declaration name="src" type="Class&lt;?&gt;" line="341"/>
                    <declaration name="dest" type="Class&lt;?&gt;" line="342"/>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="350">
                Can a retyping adapter (alone) validly convert the target to newType?                
            </javadoc>
            <method name="canRetypeOnly" type="boolean" line="353">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                </params>
            </method>
            <javadoc line="356">
                Can a retyping adapter (alone) convert the target to newType?
                  It is allowed to widen subword types and void to int, to make bitwise
                  conversions between float/int and double/long, and to perform unchecked
                  reference conversions on return.  This last feature requires that the
                  caller be trusted, and perform explicit cast conversions on return values.                
            </javadoc>
            <method name="canRetypeRaw" type="boolean" line="363">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                </params>
            </method>
            <method name="canRetype" type="boolean" line="366">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="raw" type="boolean"/>
                </params>
                <declaration name="diff" type="int" line="368"/>
            </method>
            <javadoc line="372">
                Factory method:  Performs no conversions; simply retypes the adapter.
                  Allows unchecked argument conversions pairwise, if they are safe.
                  Returns null if not possible.                
            </javadoc>
            <method name="makeRetypeOnly" type="MethodHandle" line="377">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
            <method name="makeRetypeRaw" type="MethodHandle" line="380">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
            <method name="makeRetype" type="MethodHandle" line="383">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="raw" type="boolean"/>
                </params>
                <declaration name="oldType" type="MethodType" line="384"/>
            </method>
            <method name="makeVarargsCollector" type="MethodHandle" line="389">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="arrayType" type="Class<?>"/>
                </params>
                <declaration name="type" type="MethodType" line="390"/>
                <declaration name="last" type="int" line="391"/>
            </method>
            <class name="AsVarargsCollector" line="396">
                <extends class="AdapterMethodHandle"/>
                <declaration name="target" type="MethodHandle" line="397"/>
                <declaration name="arrayType" type="Class&lt;?&gt;" line="398"/>
                <declaration name="cache" type="MethodHandle" line="399"/>
                <method name="AsVarargsCollector" type="constructor" line="400">
                    <params>
                        <param name="target" type="MethodHandle"/>
                        <param name="arrayType" type="Class<?>"/>
                    </params>
                </method>
                <method name="isVarargsCollector" type="boolean" line="406"/>
                <method name="asFixedArity" type="MethodHandle" line="409"/>
                <method name="asType" type="MethodHandle" line="412">
                    <params>
                        <param name="newType" type="MethodType"/>
                    </params>
                    <declaration name="type" type="MethodType" line="413"/>
                    <declaration name="collectArg" type="int" line="414"/>
                    <declaration name="newArity" type="int" line="415"/>
                    <scope line="416"/>
                    <declaration name="arrayLength" type="int" line="420"/>
                    <declaration name="collector" type="MethodHandle" line="421"/>
                    <scope line="422"/>
                    <scope line="425"/>
                </method>
            </class>
            <javadoc line="432">
                Can a checkcast adapter validly convert the target to newType?
                  The JVM supports all kind of reference casts, even silly ones.                
            </javadoc>
            <method name="canCheckCast" type="boolean" line="436">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="arg" type="int"/>
                    <param name="castType" type="Class<?>"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="438"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="439"/>
                <declaration name="diff" type="int" line="441"/>
            </method>
            <javadoc line="444">
                Can an primitive conversion adapter validly convert src to dst?                
            </javadoc>
            <method name="canCheckCast" type="boolean" line="447">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="450">
                Factory method:  Forces a cast at the given argument.
                  The castType is the target of the cast, and can be any type
                  with a null conversion to the corresponding target parameter.
                  Return null if this cannot be done.                
            </javadoc>
            <method name="makeCheckCast" type="MethodHandle" line="456">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="arg" type="int"/>
                    <param name="castType" type="Class<?>"/>
                </params>
                <declaration name="conv" type="long" line="458"/>
            </method>
            <javadoc line="461">
                Can an primitive conversion adapter validly convert the target to newType?
                  The JVM currently supports all conversions except those between
                  floating and integral types.                
            </javadoc>
            <method name="canPrimCast" type="boolean" line="466">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="468"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="469"/>
                <declaration name="diff" type="int" line="471"/>
            </method>
            <javadoc line="474">
                Can an primitive conversion adapter validly convert src to dst?                
            </javadoc>
            <method name="canPrimCast" type="boolean" line="477">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
                <scope line="478"/>
                <scope line="481">
                    <declaration name="sflt" type="boolean" line="482"/>
                    <declaration name="dflt" type="boolean" line="483"/>
                </scope>
            </method>
            <javadoc line="487">
                Factory method:  Truncate the given argument with zero or sign extension,
                  and/or convert between single and doubleword versions of integer or float.
                  The convType is the target of the conversion, and can be any type
                  with a null conversion to the corresponding target parameter.
                  Return null if this cannot be done.                
            </javadoc>
            <method name="makePrimCast" type="MethodHandle" line="494">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="495"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="497"/>
                <declaration name="sflt" type="boolean" line="498"/>
                <declaration name="dflt" type="boolean" line="499"/>
                <scope line="500">
                    <declaration name="convMethod" type="MethodHandle" line="501"/>
                    <declaration name="conv" type="long" line="504"/>
                </scope>
            </method>
            <method name="makePrimCastOnly" type="MethodHandle" line="509">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                </params>
                <declaration name="oldType" type="MethodType" line="510"/>
                <declaration name="src" type="Class&lt;?&gt;" line="512"/>
                <declaration name="conv" type="long" line="513"/>
            </method>
            <javadoc line="516">
                Can an unboxing conversion validly convert src to dst?
                  The JVM currently supports all kinds of casting and unboxing.
                  The convType is the unboxed type; it can be either a primitive or wrapper.                
            </javadoc>
            <method name="canUnboxArgument" type="boolean" line="521">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="523"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="524"/>
                <declaration name="boxType" type="Class&lt;?&gt;" line="525"/>
                <declaration name="diff" type="int" line="528"/>
            </method>
            <javadoc line="531">
                Can an primitive unboxing adapter validly convert src to dst?                
            </javadoc>
            <method name="canUnboxArgument" type="boolean" line="534">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="dw" type="Wrapper" line="537"/>
            </method>
            <javadoc line="542">
                Factory method:  Unbox the given argument.
                  Return null if this cannot be done.                
            </javadoc>
            <method name="makeUnboxArgument" type="MethodHandle" line="546">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                    <param name="level" type="int"/>
                </params>
                <declaration name="oldType" type="MethodType" line="547"/>
                <declaration name="src" type="Class&lt;?&gt;" line="548"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="549"/>
                <declaration name="boxType" type="Class&lt;?&gt;" line="550"/>
                <declaration name="primType" type="Class&lt;?&gt;" line="551"/>
                <declaration name="castDone" type="MethodType" line="553"/>
                <scope line="554">
                    <scope line="555">
                        <scope line="556">
                            <declaration name="unboxMethod" type="MethodHandle" line="557"/>
                            <declaration name="conv" type="long" line="558"/>
                        </scope>
                        <declaration name="srcPrim" type="Class&lt;?&gt;" line="561"/>
                        <declaration name="midType" type="MethodType" line="562"/>
                        <declaration name="fixPrim" type="MethodHandle" line="563"/>
                    </scope>
                </scope>
                <declaration name="conv" type="long" line="570"/>
                <declaration name="adapter" type="MethodHandle" line="571"/>
            </method>
            <javadoc line="575">
                Can a boxing conversion validly convert src to dst?                
            </javadoc>
            <method name="canBoxArgument" type="boolean" line="578">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                </params>
                <declaration name="src" type="Class&lt;?&gt;" line="580"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="581"/>
                <declaration name="boxType" type="Class&lt;?&gt;" line="582"/>
                <declaration name="diff" type="int" line="585"/>
            </method>
            <javadoc line="588">
                Can an primitive boxing adapter validly convert src to dst?                
            </javadoc>
            <method name="canBoxArgument" type="boolean" line="591">
                <params>
                    <param name="src" type="Class<?>"/>
                    <param name="dst" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="595">
                Factory method:  Box the given argument.
                  Return null if this cannot be done.                
            </javadoc>
            <method name="makeBoxArgument" type="MethodHandle" line="599">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="arg" type="int"/>
                    <param name="convType" type="Class<?>"/>
                </params>
                <declaration name="oldType" type="MethodType" line="600"/>
                <declaration name="src" type="Class&lt;?&gt;" line="601"/>
                <declaration name="dst" type="Class&lt;?&gt;" line="602"/>
                <declaration name="boxType" type="Class&lt;?&gt;" line="603"/>
                <declaration name="primType" type="Class&lt;?&gt;" line="604"/>
                <scope line="605"/>
                <declaration name="boxerMethod" type="MethodHandle" line="609"/>
                <declaration name="conv" type="long" line="610"/>
            </method>
            <javadoc line="613">
                Can an adapter simply drop arguments to convert the target to newType?                
            </javadoc>
            <method name="canDropArguments" type="boolean" line="616">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="dropArgPos" type="int"/>
                    <param name="dropArgCount" type="int"/>
                </params>
                <declaration name="nptypes" type="int" line="620"/>
                <declaration name="afterPos" type="int" line="622"/>
                <declaration name="afterCount" type="int" line="623"/>
            </method>
            <javadoc line="628">
                Factory method:  Drop selected arguments.
                  Allow unchecked retyping of remaining arguments, pairwise.
                  Return null if this is not possible.                
            </javadoc>
            <method name="makeDropArguments" type="MethodHandle" line="633">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="dropArgPos" type="int"/>
                    <param name="dropArgCount" type="int"/>
                </params>
                <declaration name="keep2InPos" type="int" line="636"/>
                <declaration name="dropSlot" type="int" line="637"/>
                <declaration name="keep1InSlot" type="int" line="638"/>
                <declaration name="slotCount" type="int" line="639"/>
                <declaration name="conv" type="long" line="642"/>
            </method>
            <javadoc line="645">
                Can an adapter duplicate an argument to convert the target to newType?                
            </javadoc>
            <method name="canDupArguments" type="boolean" line="648">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="dupArgPos" type="int"/>
                    <param name="dupArgCount" type="int"/>
                </params>
                <declaration name="nptypes" type="int" line="651"/>
            </method>
            <javadoc line="658">
                Factory method:  Duplicate the selected argument.
                  Return null if this is not possible.                
            </javadoc>
            <method name="makeDupArguments" type="MethodHandle" line="662">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="dupArgPos" type="int"/>
                    <param name="dupArgCount" type="int"/>
                </params>
                <declaration name="keep2InPos" type="int" line="665"/>
                <declaration name="dupSlot" type="int" line="666"/>
                <declaration name="keep1InSlot" type="int" line="667"/>
                <declaration name="slotCount" type="int" line="668"/>
                <declaration name="conv" type="long" line="670"/>
            </method>
            <javadoc line="673">
                Can an adapter swap two arguments to convert the target to newType?                
            </javadoc>
            <method name="canSwapArguments" type="boolean" line="676">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="swapArg1" type="int"/>
                    <param name="swapArg2" type="int"/>
                </params>
                <declaration name="nptypes" type="int" line="680"/>
            </method>
            <javadoc line="690">
                Factory method:  Swap the selected arguments.
                  Return null if this is not possible.                
            </javadoc>
            <method name="makeSwapArguments" type="MethodHandle" line="694">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="swapArg1" type="int"/>
                    <param name="swapArg2" type="int"/>
                </params>
                <scope line="696">
                    <declaration name="t" type="int" line="697"/>
                </scope>
                <scope line="701">
                    <declaration name="argc" type="int" line="702"/>
                    <declaration name="ROT" type="int" line="703"/>
                    <declaration name="rot1Params" type="ArrayList&lt;Class&lt;?&gt;&gt;" line="704"/>
                    <declaration name="rot1Type" type="MethodType" line="706"/>
                    <declaration name="rot1" type="MethodHandle" line="707"/>
                    <declaration name="rot2" type="MethodHandle" line="710"/>
                </scope>
                <declaration name="type1" type="Class&lt;?&gt;" line="715"/>
                <declaration name="type2" type="Class&lt;?&gt;" line="716"/>
                <declaration name="swapSlot2" type="int" line="717"/>
                <declaration name="conv" type="long" line="718"/>
            </method>
            <method name="positiveRotation" type="int" line="721">
                <params>
                    <param name="argCount" type="int"/>
                    <param name="rotateBy" type="int"/>
                </params>
                <scope line="723"/>
                <scope line="727"/>
                <scope line="730"/>
            </method>
            <declaration name="MAX_ARG_ROTATION" type="int" line="734"/>
            <javadoc line="735">
                Can an adapter rotate arguments to convert the target to newType?                
            </javadoc>
            <method name="canRotateArguments" type="boolean" line="738">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="firstArg" type="int"/>
                    <param name="argCount" type="int"/>
                    <param name="rotateBy" type="int"/>
                </params>
                <declaration name="nptypes" type="int" line="744"/>
                <declaration name="argLimit" type="int" line="747"/>
                <declaration name="newChunk1" type="int" line="750"/>
            </method>
            <javadoc line="755">
                Factory method:  Rotate the selected argument range.
                  Return null if this is not possible.                
            </javadoc>
            <method name="makeRotateArguments" type="MethodHandle" line="759">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="firstArg" type="int"/>
                    <param name="argCount" type="int"/>
                    <param name="rotateBy" type="int"/>
                </params>
                <declaration name="limit" type="int" line="762"/>
                <declaration name="depth0" type="int" line="763"/>
                <declaration name="depth1" type="int" line="764"/>
                <declaration name="depth2" type="int" line="765"/>
                <declaration name="chunk1Slots" type="int" line="766"/>
                <declaration name="chunk2Slots" type="int" line="768"/>
                <declaration name="srcArg" type="int" line="771"/>
                <declaration name="dstSlot" type="int" line="772"/>
                <declaration name="moveChunk" type="int" line="773"/>
                <scope line="774"/>
                <scope line="780"/>
                <declaration name="srcType" type="byte" line="786"/>
                <declaration name="dstType" type="byte" line="787"/>
                <declaration name="conv" type="long" line="789"/>
            </method>
            <javadoc line="792">
                Can an adapter spread an argument to convert the target to newType?                
            </javadoc>
            <method name="canSpreadArguments" type="boolean" line="795">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="targetType" type="MethodType"/>
                    <param name="spreadArgType" type="Class<?>"/>
                    <param name="spreadArgPos" type="int"/>
                    <param name="spreadArgCount" type="int"/>
                </params>
                <declaration name="nptypes" type="int" line="798"/>
                <declaration name="afterPos" type="int" line="800"/>
                <declaration name="afterCount" type="int" line="801"/>
                <declaration name="rawSpreadArgType" type="Class&lt;?&gt;" line="804"/>
                <scope line="806">
                    <declaration name="src" type="Class&lt;?&gt;" line="807"/>
                    <declaration name="dst" type="Class&lt;?&gt;" line="808"/>
                </scope>
            </method>
            <javadoc line="813">
                Factory method:  Spread selected argument.                
            </javadoc>
            <method name="makeSpreadArguments" type="MethodHandle" line="816">
                <params>
                    <param name="newType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                    <param name="spreadArgType" type="Class<?>"/>
                    <param name="spreadArgPos" type="int"/>
                    <param name="spreadArgCount" type="int"/>
                </params>
            </method>
            <javadoc line="843">
                Can an adapter collect a series of arguments, replacing them by zero or one results?                
            </javadoc>
            <method name="canCollectArguments" type="boolean" line="846">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="collectorType" type="MethodType"/>
                    <param name="collectArgPos" type="int"/>
                    <param name="retainOriginalArgs" type="boolean"/>
                </params>
            </method>
            <javadoc line="853">
                Factory method:  Collect or filter selected argument(s).                
            </javadoc>
            <method name="makeCollectArguments" type="MethodHandle" line="856">
                <params>
                    <param name="target" type="MethodHandle"/>
                    <param name="collector" type="MethodHandle"/>
                    <param name="collectArgPos" type="int"/>
                    <param name="retainOriginalArgs" type="boolean"/>
                </params>
            </method>
            <method name="debugString" type="String" line="893"/>
            <method name="nonAdapter" type="MethodHandle" line="896">
                <params>
                    <param name="mh" type="MethodHandle"/>
                </params>
                <scope line="897"/>
            </method>
        </class>
    </source>