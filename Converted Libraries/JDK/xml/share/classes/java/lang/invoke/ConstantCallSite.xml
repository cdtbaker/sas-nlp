<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <class name="ConstantCallSite" line="2">
            <extends class="CallSite"/>
            <javadoc line="2">
                A {@code ConstantCallSite} is a {@link CallSite} whose target is permanent, and can never be changed.
                  An {@code invokedynamic} instruction linked to a {@code ConstantCallSite} is permanently
                  bound to the call site&apos;s target.                
                <author>
                    John Rose, JSR 292 EG                    
                </author>
            </javadoc>
            <declaration name="isFrozen" type="boolean" line="9"/>
            <javadoc line="10">
                Creates a call site with a permanent target.                
                <param>
                    target the target to be permanently associated with this call site                    
                </param>
                <throws>
                    NullPointerException if the proposed target is null                    
                </throws>
            </javadoc>
            <method name="ConstantCallSite" type="constructor" line="15">
                <params>
                    <param name="target" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="19">
                Creates a call site with a permanent target, possibly bound to the call site itself.
                  &lt;p&gt;
                  During construction of the call site, the {@code createTargetHook} is invoked to
                  produce the actual target, as if by a call of the form{@code (MethodHandle) createTargetHook.invoke(this)}.
                  &lt;p&gt;
                  Note that user code cannot perform such an action directly in a subclass constructor,
                  since the target must be fixed before the {@code ConstantCallSite} constructor returns.
                  &lt;p&gt;
                  The hook is said to bind the call site to a target method handle,
                  and a typical action would be {@code someTarget.bindTo(this)}.
                  However, the hook is free to take any action whatever,
                  including ignoring the call site and returning a constant target.
                  &lt;p&gt;
                  The result returned by the hook must be a method handle of exactly
                  the same type as the call site.
                  &lt;p&gt;
                  While the hook is being called, the new {@code ConstantCallSite}object is in a partially constructed state.
                  In this state,
                  a call to {@code getTarget}, or any other attempt to use the target,
                  will result in an {@code IllegalStateException}.
                  It is legal at all times to obtain the call site&apos;s type using the {@code type} method.                
                <param>
                    targetType the type of the method handle to be permanently associated with this call site                    
                </param>
                <param>
                    createTargetHook a method handle to invoke (on the call site) to produce the call site's target                    
                </param>
                <throws>
                    WrongMethodTypeException if the hook cannot be invoked on the required arguments,
                      or if the target returned by the hook is not of the given {@code targetType}                    
                </throws>
                <throws>
                    NullPointerException if the hook returns a null value                    
                </throws>
                <throws>
                    ClassCastException if the hook returns something other than a {@code MethodHandle}                    
                </throws>
                <throws>
                    Throwable anything else thrown by the the hook function                    
                </throws>
            </javadoc>
            <method name="ConstantCallSite" type="constructor" line="49">
                <params>
                    <param name="targetType" type="MethodType"/>
                    <param name="createTargetHook" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="53">
                Returns the target method of the call site, which behaves
                  like a {@code final} field of the {@code ConstantCallSite}.
                  That is, the the target is always the original value passed
                  to the constructor call which created this instance.                
                <return>
                    the immutable linkage state of this call site, a constant method handle                    
                </return>
                <throws>
                    IllegalStateException if the {@code ConstantCallSite} constructor has not completed                    
                </throws>
            </javadoc>
            <method name="getTarget" type="MethodHandle" line="61"/>
            <javadoc line="65">
                Always throws an {@link UnsupportedOperationException}.
                  This kind of call site cannot change its target.                
                <param>
                    ignore a new target proposed for the call site, which is ignored                    
                </param>
                <throws>
                    UnsupportedOperationException because this kind of call site cannot change its target                    
                </throws>
            </javadoc>
            <method name="setTarget" type="void" line="71">
                <params>
                    <param name="ignore" type="MethodHandle"/>
                </params>
            </method>
            <javadoc line="74">
                Returns this call site&apos;s permanent target.
                  Since that target will never change, this is a correct implementation
                  of {@link CallSite#dynamicInvoker CallSite.dynamicInvoker}.                
                <return>
                    the immutable linkage state of this call site, a constant method handle                    
                </return>
                <throws>
                    IllegalStateException if the {@code ConstantCallSite} constructor has not completed                    
                </throws>
            </javadoc>
            <method name="dynamicInvoker" type="MethodHandle" line="81"/>
        </class>
    </source>