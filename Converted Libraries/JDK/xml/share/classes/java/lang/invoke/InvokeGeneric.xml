<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang.invoke">
        <import package="sun.invoke.util"/>
        <import package="java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP"/>
        <class name="InvokeGeneric" line="31">
            <comment line="38">
                erased type for the call, which originates from an inexact invoke site                
            </comment>
            <comment line="40">
                an invoker of type (MT, MH; A...) -&gt; R                
            </comment>
            <javadoc line="31">
                Adapters which manage inexact MethodHandle.invoke calls.
                  The JVM calls one of these when the exact type match fails.                
                <author>
                    jrose                    
                </author>
            </javadoc>
            <declaration name="erasedCallerType" type="MethodType" line="38"/>
            <declaration name="initialInvoker" type="MethodHandle" line="40"/>
            <javadoc line="42">
                Compute and cache information for this adapter, so that it can
                  call out to targets of the erasure-family of the given erased type.                
            </javadoc>
            <method name="InvokeGeneric" type="constructor" line="45">
                <params>
                    <param name="erasedCallerType" type="MethodType"/>
                </params>
                <comment line="45">
                                        
                </comment>
            </method>
            <method name="lookup" type="MethodHandles.Lookup" line="54"/>
            <javadoc line="58">
                Return the adapter information for this type&apos;s erasure.                
            </javadoc>
            <method name="generalInvokerOf" type="MethodHandle" line="59">
                <params>
                    <param name="erasedCallerType" type="MethodType"/>
                </params>
                <comment line="59">
                                        
                </comment>
                <declaration name="gen" type="InvokeGeneric" line="60"/>
            </method>
            <method name="makeInitialInvoker" type="MethodHandle" line="64">
                <comment line="65">
                    postDispatch = #(MH&apos;; MT, MH; A...){MH&apos;(MT, MH; A)}                    
                </comment>
                <declaration name="postDispatch" type="MethodHandle" line="66"/>
                <declaration name="invoker" type="MethodHandle" line="67"/>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <declaration name="EXTRA_ARGS" type="Class&lt;?&gt;[]" line="77"/>
            <method name="makePostDispatchInvoker" type="MethodHandle" line="78">
                <comment line="79">
                    Take (MH&apos;; MT, MH; A...) and run MH&apos;(MT, MH; A...).                    
                </comment>
                <declaration name="invokerType" type="MethodType" line="80"/>
            </method>
            <method name="dropDispatchArguments" type="MethodHandle" line="83">
                <params>
                    <param name="targetInvoker" type="MethodHandle"/>
                </params>
            </method>
            <method name="dispatcher" type="MethodHandle" line="88">
                <params>
                    <param name="dispatchName" type="String"/>
                </params>
            </method>
            <declaration name="USE_AS_TYPE_PATH" type="boolean" line="94"/>
            <javadoc line="96">
                Return a method handle to invoke on the callerType, target, and remaining arguments.
                  The method handle must finish the call.
                  This is the first look at the caller type and target.                
            </javadoc>
            <method name="dispatch" type="MethodHandle" line="100">
                <params>
                    <param name="callerType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                </params>
                <declaration name="targetType" type="MethodType" line="101"/>
                <scope line="102">
                    <declaration name="newTarget" type="MethodHandle" line="103"/>
                    <declaration name="invokers" type="Invokers" line="105"/>
                    <declaration name="invoker" type="MethodHandle" line="106"/>
                    <scope line="107"/>
                </scope>
            </method>
            <method name="dispatchWithConversion" type="MethodHandle" line="116">
                <params>
                    <param name="callerType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                </params>
                <comment line="119">
                    FIXME: slow                    
                </comment>
                <declaration name="finisher" type="MethodHandle" line="117"/>
            </method>
            <method name="returnConversionPossible" type="boolean" line="123">
                <declaration name="needType" type="Class&lt;?&gt;" line="124"/>
            </method>
            <method name="returnConversionNeeded" type="boolean" line="127">
                <params>
                    <param name="callerType" type="MethodType"/>
                    <param name="target" type="MethodHandle"/>
                </params>
                <comment line="130">
                    no conversions possible, since must be primitive or Object                    
                </comment>
                <declaration name="needType" type="Class&lt;?&gt;" line="128"/>
                <declaration name="haveType" type="Class&lt;?&gt;" line="131"/>
            </method>
            <method name="addReturnConversion" type="MethodHandle" line="136">
                <params>
                    <param name="finisher" type="MethodHandle"/>
                    <param name="type" type="Class<?>"/>
                </params>
                <comment line="137">
                    FIXME: This is slow because it creates a closure node on every call that requires a return cast.                    
                </comment>
                <declaration name="finisherType" type="MethodType" line="138"/>
                <declaration name="caster" type="MethodHandle" line="139"/>
            </method>
            <method name="toString" type="String" line="145"/>
        </class>
    </source>