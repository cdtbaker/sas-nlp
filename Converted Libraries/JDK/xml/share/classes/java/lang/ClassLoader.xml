<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Policy"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.Stack"/>
        <import package="java.util.Map"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="sun.misc.ClassFileTransformer"/>
        <import package="sun.misc.CompoundEnumeration"/>
        <import package="sun.misc.Resource"/>
        <import package="sun.misc.URLClassPath"/>
        <import package="sun.misc.VM"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="ClassLoader" line="62">
            <comment line="185">
                The parent class loader for delegation                
            </comment>
            <comment line="186">
                Note: VM hardcoded the offset of this field, thus all new fields                
            </comment>
            <comment line="187">
                must be added *after* it.                
            </comment>
            <comment line="236">
                Maps class name to the corresponding lock object when the current                
            </comment>
            <comment line="237">
                class loader is parallel capable.                
            </comment>
            <comment line="238">
                Note: VM also uses this field to decide if the current class loader                
            </comment>
            <comment line="239">
                is parallel capable and the appropriate lock object for class loading.                
            </comment>
            <comment line="242">
                Hashtable that maps packages to certs                
            </comment>
            <comment line="245">
                Shared among all packages with unsigned classes                
            </comment>
            <comment line="248">
                The classes loaded by this class loader. The only purpose of this table                
            </comment>
            <comment line="249">
                is to keep the classes from being GC&apos;ed until the loader is GC&apos;ed.                
            </comment>
            <comment line="252">
                The &quot;default&quot; domain. Set as the default ProtectionDomain on newly                
            </comment>
            <comment line="253">
                created classes.                
            </comment>
            <comment line="258">
                The initiating protection domains for all classes loaded by this loader                
            </comment>
            <comment line="261">
                Invoked by the VM to record every loaded class with this loader.                
            </comment>
            <comment line="266">
                The packages defined in this class loader.  Each package name is mapped                
            </comment>
            <comment line="267">
                to its corresponding Package object.                
            </comment>
            <comment line="268">
                @GuardedBy(&quot;itself&quot;)                
            </comment>
            <comment line="338">
                -- Class --                
            </comment>
            <comment line="471">
                This method is invoked by the virtual machine to load a class.                
            </comment>
            <comment line="486">
                Invoked by the VM after loading class with this loader.                
            </comment>
            <comment line="638">
                Determine protection domain, and check that:
                - not define java. class,
                - signer of this class matches signers for the rest of the classes in
                package.                
            </comment>
            <comment line="913">
                true if the name is null or has the potential to be a valid binary name                
            </comment>
            <comment line="1065">
                return null if not found                
            </comment>
            <comment line="1107">
                -- Resource --                
            </comment>
            <comment line="1219">
                index 0: java.lang.ClassLoader.class                
            </comment>
            <comment line="1220">
                index 1: the immediate caller of index 0.                
            </comment>
            <comment line="1221">
                index 2: the immediate caller of index 1.                
            </comment>
            <comment line="1321">
                Returns the URLClassPath that is used for finding system resources.                
            </comment>
            <comment line="1373">
                -- Hierarchy --                
            </comment>
            <comment line="1513">
                Returns true if the specified class loader can be found in this class                
            </comment>
            <comment line="1514">
                loader&apos;s delegation chain.                
            </comment>
            <comment line="1526">
                Returns the invoker&apos;s class loader, or null if none.                
            </comment>
            <comment line="1527">
                NOTE: This must always be invoked when there is exactly one intervening                
            </comment>
            <comment line="1528">
                frame from the core libraries on the stack between this method&apos;s                
            </comment>
            <comment line="1529">
                invocation and the desired invoker.                
            </comment>
            <comment line="1541">
                The class loader for the system                
            </comment>
            <comment line="1542">
                @GuardedBy(&quot;ClassLoader.class&quot;)                
            </comment>
            <comment line="1545">
                Set to true once the system class loader has been set                
            </comment>
            <comment line="1546">
                @GuardedBy(&quot;ClassLoader.class&quot;)                
            </comment>
            <comment line="1550">
                -- Package --                
            </comment>
            <comment line="1681">
                -- Native library access --                
            </comment>
            <comment line="1767">
                All native library names we&apos;ve loaded.                
            </comment>
            <comment line="1770">
                Native libraries belonging to system classes.                
            </comment>
            <comment line="1774">
                Native libraries associated with the class loader.                
            </comment>
            <comment line="1777">
                native libraries being loaded/unloaded.                
            </comment>
            <comment line="1780">
                The paths searched for libraries                
            </comment>
            <comment line="1816">
                Invoked in the java.lang.Runtime class to implement load and loadLibrary.                
            </comment>
            <comment line="1943">
                Invoked in the VM class linking code.                
            </comment>
            <comment line="1960">
                -- Assertion management --                
            </comment>
            <comment line="1964">
                The default toggle for assertion checking.                
            </comment>
            <comment line="1965">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="1968">
                Maps String packageName to Boolean package default assertion status Note                
            </comment>
            <comment line="1969">
                that the default package is placed under a null map key.  If this field                
            </comment>
            <comment line="1970">
                is null then we are delegating assertion status queries to the VM, i.e.,                
            </comment>
            <comment line="1971">
                none of this ClassLoader&apos;s assertion status modification methods have                
            </comment>
            <comment line="1972">
                been invoked.                
            </comment>
            <comment line="1973">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="1976">
                Maps String fullyQualifiedClassName to Boolean assertionStatus If this                
            </comment>
            <comment line="1977">
                field is null then we are delegating assertion status queries to the VM,                
            </comment>
            <comment line="1978">
                i.e., none of this ClassLoader&apos;s assertion status modification methods                
            </comment>
            <comment line="1979">
                have been invoked.                
            </comment>
            <comment line="1980">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="2159">
                Set up the assertions with information provided by the VM.                
            </comment>
            <comment line="2160">
                Note: Should only be called inside a synchronized block                
            </comment>
            <comment line="2179">
                Retrieves the assertion directives from the VM.                
            </comment>
            <javadoc line="62">
                A class loader is an object that is responsible for loading classes. The
                  class &lt;tt&gt;ClassLoader&lt;/tt&gt; is an abstract class.  Given the &lt;a
                  href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of a class, a class loader should attempt to
                  locate or generate data that constitutes a definition for the class.  A
                  typical strategy is to transform the name into a file name and then read a
                  &quot;class file&quot; of that name from a file system.
                  &lt;p&gt; Every {@link Class &lt;tt&gt;Class&lt;/tt&gt;} object contains a {@link Class#getClassLoader() reference} to the &lt;tt&gt;ClassLoader&lt;/tt&gt; that defined
                  it.
                  &lt;p&gt; &lt;tt&gt;Class&lt;/tt&gt; objects for array classes are not created by class
                  loaders, but are created automatically as required by the Java runtime.
                  The class loader for an array class, as returned by {@link Class#getClassLoader()} is the same as the class loader for its element
                  type; if the element type is a primitive type, then the array class has no
                  class loader.
                  &lt;p&gt; Applications implement subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; in order to
                  extend the manner in which the Java virtual machine dynamically loads
                  classes.
                  &lt;p&gt; Class loaders may typically be used by security managers to indicate
                  security domains.
                  &lt;p&gt; The &lt;tt&gt;ClassLoader&lt;/tt&gt; class uses a delegation model to search for
                  classes and resources.  Each instance of &lt;tt&gt;ClassLoader&lt;/tt&gt; has an
                  associated parent class loader.  When requested to find a class or
                  resource, a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance will delegate the search for the
                  class or resource to its parent class loader before attempting to find the
                  class or resource itself.  The virtual machine&apos;s built-in class loader,
                  called the &quot;bootstrap class loader&quot;, does not itself have a parent but may
                  serve as the parent of a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance.
                  &lt;p&gt; Class loaders that support concurrent loading of classes are known as
                  &lt;em&gt;parallel capable&lt;/em&gt; class loaders and are required to register
                  themselves at their class initialization time by invoking the{@link #registerAsParallelCapable &lt;tt&gt;ClassLoader.registerAsParallelCapable&lt;/tt&gt;}method. Note that the &lt;tt&gt;ClassLoader&lt;/tt&gt; class is registered as parallel
                  capable by default. However, its subclasses still need to register themselves
                  if they are parallel capable. &lt;br&gt;
                  In environments in which the delegation model is not strictly
                  hierarchical, class loaders need to be parallel capable, otherwise class
                  loading can lead to deadlocks because the loader lock is held for the
                  duration of the class loading process (see {@link #loadClass&lt;tt&gt;loadClass&lt;/tt&gt;} methods).
                  &lt;p&gt; Normally, the Java virtual machine loads classes from the local file
                  system in a platform-dependent manner.  For example, on UNIX systems, the
                  virtual machine loads classes from the directory defined by the
                  &lt;tt&gt;CLASSPATH&lt;/tt&gt; environment variable.
                  &lt;p&gt; However, some classes may not originate from a file; they may originate
                  from other sources, such as the network, or they could be constructed by an
                  application.  The method {@link #defineClass(String,byte[],int,int)&lt;tt&gt;defineClass&lt;/tt&gt;} converts an array of bytes into an instance of class
                  &lt;tt&gt;Class&lt;/tt&gt;. Instances of this newly defined class can be created using{@link Class#newInstance &lt;tt&gt;Class.newInstance&lt;/tt&gt;}.
                  &lt;p&gt; The methods and constructors of objects created by a class loader may
                  reference other classes.  To determine the class(es) referred to, the Java
                  virtual machine invokes the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method of
                  the class loader that originally created the class.
                  &lt;p&gt; For example, an application could create a network class loader to
                  download class files from a server.  Sample code might look like:
                  &lt;blockquote&gt;&lt;pre&gt;
                  ClassLoader loader&amp;nbsp;= new NetworkClassLoader(host,&amp;nbsp;port);
                  Object main&amp;nbsp;= loader.loadClass(&quot;Main&quot;, true).newInstance();
                  &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; The network class loader subclass must define the methods {@link #findClass &lt;tt&gt;findClass&lt;/tt&gt;} and &lt;tt&gt;loadClassData&lt;/tt&gt; to load a class
                  from the network.  Once it has downloaded the bytes that make up the class,
                  it should use the method {@link #defineClass &lt;tt&gt;defineClass&lt;/tt&gt;} to
                  create a class instance.  A sample implementation is:
                  &lt;blockquote&gt;&lt;pre&gt;
                  class NetworkClassLoader extends ClassLoader {
                  String host;
                  int port;
                  public Class findClass(String name) {
                  byte[] b = loadClassData(name);
                  return defineClass(name, b, 0, b.length);
                  }
                  private byte[] loadClassData(String name) {
                  // load the class data from the connection
                  &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;h4&gt; &lt;a name=&quot;name&quot;&gt;Binary names&lt;/a&gt; &lt;/h4&gt;
                  &lt;p&gt; Any class name provided as a {@link String} parameter to methods in
                  &lt;tt&gt;ClassLoader&lt;/tt&gt; must be a binary name as defined by
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  &lt;p&gt; Examples of valid class names include:
                  &lt;blockquote&gt;&lt;pre&gt;
                  &quot;java.lang.String&quot;
                  &quot;javax.swing.JSpinner$DefaultEditor&quot;
                  &quot;java.security.KeyStore$Builder$FileBuilder$1&quot;
                  &quot;java.net.URLClassLoader$3$1&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <see>
                    #resolveClass(Class)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="registerNatives" type="void" line="179"/>
            <scope line="180"/>
            <declaration name="parent" type="ClassLoader" line="187"/>
            <class name="ParallelLoaders" line="189">
                <comment line="196">
                    the set of parallel capable loader types                    
                </comment>
                <comment line="1720">
                    opaque handle to native library, used in native code.                    
                </comment>
                <comment line="1722">
                    the version of JNI environment the native library requires.                    
                </comment>
                <comment line="1724">
                    the class from which the library is loaded, also indicates                    
                </comment>
                <comment line="1725">
                    the loader this native library belongs.                    
                </comment>
                <comment line="1727">
                    the canonicalized name of the native library.                    
                </comment>
                <comment line="1760">
                    Invoked in the VM to determine the context class in                    
                </comment>
                <comment line="1761">
                    JNI_Load/JNI_Unload                    
                </comment>
                <javadoc line="189">
                    Encapsulates the set of parallel capable loader types.                    
                </javadoc>
                <method name="ParallelLoaders" type="constructor" line="193"/>
                <declaration name="loaderTypes" type="Set&lt;Class&lt;? extends ClassLoader&gt;&gt;" line="196"/>
                <scope line="199">
                    <scope line="200"/>
                </scope>
                <javadoc line="203">
                    Registers the given class loader type as parallel capabale.
                      Returns {@code true} is successfully registered; {@code false} if
                      loader&apos;s super class is not registered.                    
                </javadoc>
                <method name="register" type="boolean" line="208">
                    <params>
                        <param name="c" type="Class<? extends ClassLoader>"/>
                    </params>
                    <comment line="211">
                        register the class loader as parallel capable                        
                    </comment>
                    <comment line="212">
                        if and only if all of its super classes are.                        
                    </comment>
                    <comment line="213">
                        Note: given current classloading sequence, if                        
                    </comment>
                    <comment line="214">
                        the immediate super class is parallel capable,                        
                    </comment>
                    <comment line="215">
                        all the super classes higher up must be too.                        
                    </comment>
                    <scope line="209">
                        <scope line="210"/>
                        <scope line="218"/>
                    </scope>
                </method>
                <javadoc line="224">
                    Returns {@code true} if the given class loader type is
                      registered as parallel capable.                    
                </javadoc>
                <method name="isRegistered" type="boolean" line="228">
                    <params>
                        <param name="c" type="Class<? extends ClassLoader>"/>
                    </params>
                    <scope line="229"/>
                </method>
            </class>
            <declaration name="parallelLockMap" type="ConcurrentHashMap&lt;String,Object&gt;" line="239"/>
            <declaration name="package2certs" type="Map&lt;String,Certificate[]&gt;" line="242"/>
            <declaration name="nocerts" type="Certificate[]" line="245"/>
            <declaration name="classes" type="Vector&lt;Class&lt;?&gt;&gt;" line="249"/>
            <declaration name="defaultDomain" type="ProtectionDomain" line="253"/>
            <declaration name="domains" type="Set&lt;ProtectionDomain&gt;" line="258"/>
            <method name="addClass" type="void" line="261">
                <params>
                    <param name="c" type="Class"/>
                </params>
            </method>
            <declaration name="packages" type="HashMap&lt;String,Package&gt;" line="268"/>
            <method name="checkCreateClassLoader" type="Void" line="270">
                <declaration name="security" type="SecurityManager" line="271"/>
                <scope line="272"/>
            </method>
            <method name="ClassLoader" type="constructor" line="278">
                <params>
                    <param name="unused" type="Void"/>
                    <param name="parent" type="ClassLoader"/>
                </params>
                <comment line="287">
                    no finer-grained lock; lock on the classloader instance                    
                </comment>
                <scope line="280"/>
                <scope line="286"/>
            </method>
            <javadoc line="295">
                Creates a new class loader using the specified parent class loader for
                  delegation.
                  &lt;p&gt; If there is a security manager, its {@link SecurityManager#checkCreateClassLoader()&lt;tt&gt;checkCreateClassLoader&lt;/tt&gt;} method is invoked.  This may result in
                  a security exception.  &lt;/p&gt;                
                <param>
                    parentThe parent class loader                    
                </param>
                <throws>
                    SecurityExceptionIf a security manager exists and its
                      <tt>checkCreateClassLoader</tt> method doesn't allow creation
                      of a new class loader.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ClassLoader" type="constructor" line="314">
                <params>
                    <param name="parent" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="318">
                Creates a new class loader using the &lt;tt&gt;ClassLoader&lt;/tt&gt; returned by
                  the method {@link #getSystemClassLoader()&lt;tt&gt;getSystemClassLoader()&lt;/tt&gt;} as the parent class loader.
                  &lt;p&gt; If there is a security manager, its {@link SecurityManager#checkCreateClassLoader()&lt;tt&gt;checkCreateClassLoader&lt;/tt&gt;} method is invoked.  This may result in
                  a security exception.  &lt;/p&gt;                
                <throws>
                    SecurityExceptionIf a security manager exists and its
                      <tt>checkCreateClassLoader</tt> method doesn't allow creation
                      of a new class loader.                    
                </throws>
            </javadoc>
            <method name="ClassLoader" type="constructor" line="333"/>
            <javadoc line="339">
                Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.
                  This method searches for classes in the same manner as the {@link #loadClass(String,boolean)} method.  It is invoked by the Java virtual
                  machine to resolve class references.  Invoking this method is equivalent
                  to invoking {@link #loadClass(String,boolean) &lt;tt&gt;loadClass(name,
                  false)&lt;/tt&gt;}.  &lt;/p&gt;                
                <param>
                    nameThe <a href="#name">binary name</a> of the class                    
                </param>
                <return>
                    The resulting <tt>Class</tt> object                    
                </return>
                <throws>
                    ClassNotFoundExceptionIf the class was not found                    
                </throws>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="355">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="359">
                Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  The
                  default implementation of this method searches for classes in the
                  following order:
                  &lt;p&gt;&lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; Invoke {@link #findLoadedClass(String)} to check if the class
                  has already been loaded.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Invoke the {@link #loadClass(String) &lt;tt&gt;loadClass&lt;/tt&gt;} method
                  on the parent class loader.  If the parent is &lt;tt&gt;null&lt;/tt&gt; the class
                  loader built-in to the virtual machine is used, instead.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Invoke the {@link #findClass(String)} method to find the
                  class.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; If the class was found using the above steps, and the
                  &lt;tt&gt;resolve&lt;/tt&gt; flag is true, this method will then invoke the {@link #resolveClass(Class)} method on the resulting &lt;tt&gt;Class&lt;/tt&gt; object.
                  &lt;p&gt; Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; are encouraged to override {@link #findClass(String)}, rather than this method.  &lt;/p&gt;
                  &lt;p&gt; Unless overridden, this method synchronizes on the result of{@link #getClassLoadingLock &lt;tt&gt;getClassLoadingLock&lt;/tt&gt;} method
                  during the entire class loading process.                
                <param>
                    nameThe <a href="#name">binary name</a> of the class                    
                </param>
                <param>
                    resolveIf <tt>true</tt> then resolve the class                    
                </param>
                <return>
                    The resulting <tt>Class</tt> object                    
                </return>
                <throws>
                    ClassNotFoundExceptionIf the class could not be found                    
                </throws>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="402">
                <params>
                    <param name="name" type="String"/>
                    <param name="resolve" type="boolean"/>
                </params>
                <comment line="404">
                    First, check if the class has already been loaded                    
                </comment>
                <comment line="415">
                    ClassNotFoundException thrown if class not found                    
                </comment>
                <comment line="416">
                    from the non-null parent class loader                    
                </comment>
                <comment line="420">
                    If still not found, then invoke findClass in order                    
                </comment>
                <comment line="421">
                    to find the class.                    
                </comment>
                <comment line="425">
                    this is the defining class loader; record the stats                    
                </comment>
                <scope line="403">
                    <declaration name="c" type="Class" line="405"/>
                    <scope line="406">
                        <declaration name="t0" type="long" line="407"/>
                        <scope line="408">
                            <scope line="409"/>
                            <scope line="411"/>
                        </scope>
                        <scope line="414"/>
                        <scope line="419">
                            <declaration name="t1" type="long" line="422"/>
                        </scope>
                    </scope>
                    <scope line="431"/>
                </scope>
            </method>
            <javadoc line="438">
                Returns the lock object for class loading operations.
                  For backward compatibility, the default implementation of this method
                  behaves as follows. If this ClassLoader object is registered as
                  parallel capable, the method returns a dedicated object associated
                  with the specified class name. Otherwise, the method returns this
                  ClassLoader object. &lt;/p&gt;                
                <param>
                    classNameThe name of the to-be-loaded class                    
                </param>
                <return>
                    the lock for class loading operations                    
                </return>
                <throws>
                    NullPointerExceptionIf registered as parallel capable and <tt>className</tt> is null                    
                </throws>
                <see>
                    #loadClass(String,boolean)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getClassLoadingLock" type="Object" line="458">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="lock" type="Object" line="459"/>
                <scope line="460">
                    <declaration name="newLock" type="Object" line="461"/>
                    <scope line="463"/>
                </scope>
            </method>
            <method name="loadClassInternal" type="Class" line="473">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="474">
                    For backward compatibility, explicitly lock on &apos;this&apos; when                    
                </comment>
                <comment line="475">
                    the current class loader is not parallel capable.                    
                </comment>
                <scope line="476">
                    <scope line="477"/>
                </scope>
                <scope line="480"/>
            </method>
            <method name="checkPackageAccess" type="void" line="486">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="pd" type="ProtectionDomain"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="487"/>
                <scope line="488">
                    <declaration name="name" type="String" line="489"/>
                    <declaration name="i" type="int" line="490"/>
                    <scope line="491">
                        <anonymous_class line="492">
                            <method name="run" type="Void" line="493"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="503">
                Finds the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.
                  This method should be overridden by class loader implementations that
                  follow the delegation model for loading classes, and will be invoked by
                  the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method after checking the
                  parent class loader for the requested class.  The default implementation
                  throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.  &lt;/p&gt;                
                <param>
                    nameThe <a href="#name">binary name</a> of the class                    
                </param>
                <return>
                    The resulting <tt>Class</tt> object                    
                </return>
                <throws>
                    ClassNotFoundExceptionIf the class could not be found                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="findClass" type="Class<?>" line="521">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="525">
                Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;.
                  Before the &lt;tt&gt;Class&lt;/tt&gt; can be used it must be resolved.  This method
                  is deprecated in favor of the version that takes a &lt;a
                  href=&quot;#name&quot;&gt;binary name&lt;/a&gt; as its first argument, and is more secure.                
                <param>
                    bThe bytes that make up the class data.  The bytes in positions
                      <tt>off</tt> through <tt>off+len-1</tt> should have the format
                      of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    offThe start offset in <tt>b</tt> of the class data                    
                </param>
                <param>
                    lenThe length of the class data                    
                </param>
                <return>
                    The <tt>Class</tt> object that was created from the specified
                      class data                    
                </return>
                <throws>
                    ClassFormatErrorIf the data did not contain a valid class                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf either <tt>off</tt> or <tt>len</tt> is negative, or if
                      <tt>off+len</tt> is greater than <tt>b.length</tt>.                    
                </throws>
                <throws>
                    SecurityExceptionIf an attempt is made to add this class to a package that
                      contains classes that were signed by a different set of
                      certificates than this class, or if an attempt is made
                      to define a class in a package with a fully-qualified name
                      that starts with "{@code java.}".                    
                </throws>
                <see>
                    #loadClass(String,boolean)                    
                </see>
                <see>
                    #resolveClass(Class)                    
                </see>
                <deprecated>
                    Replaced by {@link #defineClass(String,byte[],int,int)defineClass(String, byte[], int, int)}                    
                </deprecated>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="569">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="573">
                Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;.
                  Before the &lt;tt&gt;Class&lt;/tt&gt; can be used it must be resolved.
                  &lt;p&gt; This method assigns a default {@link java.security.ProtectionDomain&lt;tt&gt;ProtectionDomain&lt;/tt&gt;} to the newly defined class.  The
                  &lt;tt&gt;ProtectionDomain&lt;/tt&gt; is effectively granted the same set of
                  permissions returned when {@link java.security.Policy#getPermissions(java.security.CodeSource)&lt;tt&gt;Policy.getPolicy().getPermissions(new CodeSource(null, null))&lt;/tt&gt;}is invoked.  The default domain is created on the first invocation of{@link #defineClass(String,byte[],int,int) &lt;tt&gt;defineClass&lt;/tt&gt;},
                  and re-used on subsequent invocations.
                  &lt;p&gt; To assign a specific &lt;tt&gt;ProtectionDomain&lt;/tt&gt; to the class, use
                  the {@link #defineClass(String,byte[],int,int,java.security.ProtectionDomain) &lt;tt&gt;defineClass&lt;/tt&gt;} method that takes a
                  &lt;tt&gt;ProtectionDomain&lt;/tt&gt; as one of its arguments.  &lt;/p&gt;                
                <param>
                    nameThe expected <a href="#name">binary name</a> of the class, or
                      <tt>null</tt> if not known                    
                </param>
                <param>
                    bThe bytes that make up the class data.  The bytes in positions
                      <tt>off</tt> through <tt>off+len-1</tt> should have the format
                      of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    offThe start offset in <tt>b</tt> of the class data                    
                </param>
                <param>
                    lenThe length of the class data                    
                </param>
                <return>
                    The <tt>Class</tt> object that was created from the specified
                      class data.                    
                </return>
                <throws>
                    ClassFormatErrorIf the data did not contain a valid class                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf either <tt>off</tt> or <tt>len</tt> is negative, or if
                      <tt>off+len</tt> is greater than <tt>b.length</tt>.                    
                </throws>
                <throws>
                    SecurityExceptionIf an attempt is made to add this class to a package that
                      contains classes that were signed by a different set of
                      certificates than this class (which is unsigned), or if
                      <tt>name</tt> begins with "<tt>java.</tt>".                    
                </throws>
                <see>
                    #loadClass(String,boolean)                    
                </see>
                <see>
                    #resolveClass(Class)                    
                </see>
                <see>
                    java.security.CodeSource                    
                </see>
                <see>
                    java.security.SecureClassLoader                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="633">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="preDefineClass" type="ProtectionDomain" line="644">
                <params>
                    <param name="name" type="String"/>
                    <param name="pd" type="ProtectionDomain"/>
                </params>
                <scope line="648"/>
                <scope line="653"/>
            </method>
            <method name="defineClassSourceLocation" type="String" line="663">
                <params>
                    <param name="pd" type="ProtectionDomain"/>
                </params>
                <declaration name="cs" type="CodeSource" line="664"/>
                <declaration name="source" type="String" line="665"/>
                <scope line="666"/>
            </method>
            <method name="defineTransformedClass" type="Class" line="676">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="pd" type="ProtectionDomain"/>
                    <param name="cfe" type="ClassFormatError"/>
                    <param name="source" type="String"/>
                </params>
                <comment line="677">
                    Class format error - try to transform the bytecode and                    
                </comment>
                <comment line="678">
                    define the class again                    
                </comment>
                <comment line="679">
                                        
                </comment>
                <comment line="687">
                    Transform byte code using transformer                    
                </comment>
                <comment line="693">
                    If ClassFormatError occurs, try next transformer                    
                </comment>
                <comment line="698">
                    Rethrow original ClassFormatError if unable to transform                    
                </comment>
                <comment line="699">
                    bytecode to well-formed                    
                </comment>
                <comment line="700">
                                        
                </comment>
                <declaration name="transformers" type="ClassFileTransformer[]" line="680"/>
                <declaration name="c" type="Class" line="682"/>
                <scope line="684">
                    <scope line="685">
                        <scope line="686">
                            <declaration name="tb" type="byte[]" line="688"/>
                        </scope>
                        <scope line="692"/>
                    </scope>
                </scope>
            </method>
            <method name="postDefineClass" type="void" line="708">
                <params>
                    <param name="c" type="Class"/>
                    <param name="pd" type="ProtectionDomain"/>
                </params>
                <scope line="709">
                    <declaration name="certs" type="Certificate" line="710"/>
                </scope>
            </method>
            <javadoc line="716">
                Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;,
                  with an optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.  If the domain is
                  &lt;tt&gt;null&lt;/tt&gt;, then a default domain will be assigned to the class as
                  specified in the documentation for {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved.
                  &lt;p&gt; The first class defined in a package determines the exact set of
                  certificates that all subsequent classes defined in that package must
                  contain.  The set of certificates for a class is obtained from the{@link java.security.CodeSource &lt;tt&gt;CodeSource&lt;/tt&gt;} within the
                  &lt;tt&gt;ProtectionDomain&lt;/tt&gt; of the class.  Any classes added to that
                  package must contain the same set of certificates or a
                  &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  Note that if
                  &lt;tt&gt;name&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this check is not performed.
                  You should always pass in the &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the
                  class you are defining as well as the bytes.  This ensures that the
                  class you are defining is indeed the class you think it is.
                  &lt;p&gt; The specified &lt;tt&gt;name&lt;/tt&gt; cannot begin with &quot;&lt;tt&gt;java.&lt;/tt&gt;&quot;, since
                  all classes in the &quot;&lt;tt&gt;java.&lt;/tt&gt; packages can only be defined by the
                  bootstrap class loader.  If &lt;tt&gt;name&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, it
                  must be equal to the &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class
                  specified by the byte array &quot;&lt;tt&gt;b&lt;/tt&gt;&quot;, otherwise a {@link&lt;tt&gt;NoClassDefFoundError&lt;/tt&gt;} will be thrown.  &lt;/p&gt;                
                <param>
                    nameThe expected <a href="#name">binary name</a> of the class, or
                      <tt>null</tt> if not known                    
                </param>
                <param>
                    bThe bytes that make up the class data. The bytes in positions
                      <tt>off</tt> through <tt>off+len-1</tt> should have the format
                      of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    offThe start offset in <tt>b</tt> of the class data                    
                </param>
                <param>
                    lenThe length of the class data                    
                </param>
                <param>
                    protectionDomainThe ProtectionDomain of the class                    
                </param>
                <return>
                    The <tt>Class</tt> object created from the data,
                      and optional <tt>ProtectionDomain</tt>.                    
                </return>
                <throws>
                    ClassFormatErrorIf the data did not contain a valid class                    
                </throws>
                <throws>
                    NoClassDefFoundErrorIf <tt>name</tt> is not equal to the <a href="#name">binary
                      name</a> of the class specified by <tt>b</tt>                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionIf either <tt>off</tt> or <tt>len</tt> is negative, or if
                      <tt>off+len</tt> is greater than <tt>b.length</tt>.                    
                </throws>
                <throws>
                    SecurityExceptionIf an attempt is made to add this class to a package that
                      contains classes that were signed by a different set of
                      certificates than this class, or if <tt>name</tt> begins with
                      "<tt>java.</tt>".                    
                </throws>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="784">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                    <param name="protectionDomain" type="ProtectionDomain"/>
                </params>
                <declaration name="c" type="Class" line="787"/>
                <declaration name="source" type="String" line="788"/>
                <scope line="790"/>
                <scope line="792"/>
            </method>
            <javadoc line="801">
                Converts a {@link java.nio.ByteBuffer &lt;tt&gt;ByteBuffer&lt;/tt&gt;}into an instance of class &lt;tt&gt;Class&lt;/tt&gt;,
                  with an optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.  If the domain is
                  &lt;tt&gt;null&lt;/tt&gt;, then a default domain will be assigned to the class as
                  specified in the documentation for {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved.
                  &lt;p&gt;The rules about the first class defined in a package determining the
                  set of certificates for the package, and the restrictions on class names
                  are identical to those specified in the documentation for {@link #defineClass(String,byte[],int,int,ProtectionDomain)}.
                  &lt;p&gt; An invocation of this method of the form
                  &lt;i&gt;cl&lt;/i&gt;&lt;tt&gt;.defineClass(&lt;/tt&gt;&lt;i&gt;name&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;
                  &lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;pd&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; yields exactly the same
                  result as the statements
                  &lt;blockquote&gt;&lt;tt&gt;
                  ...&lt;br&gt;
                  byte[] temp = new byte[&lt;/tt&gt;&lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;.{@link java.nio.ByteBuffer#remaining remaining}()];&lt;br&gt;
                  &lt;/tt&gt;&lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;.{@link java.nio.ByteBuffer#get(byte[])get}(temp);&lt;br&gt;
                  return {@link #defineClass(String,byte[],int,int,ProtectionDomain)&lt;/tt&gt;&lt;i&gt;cl&lt;/i&gt;&lt;tt&gt;.defineClass}(&lt;/tt&gt;&lt;i&gt;name&lt;/i&gt;&lt;tt&gt;, temp, 0,
                  temp.length, &lt;/tt&gt;&lt;i&gt;pd&lt;/i&gt;&lt;tt&gt;);&lt;br&gt;
                  &lt;/tt&gt;&lt;/blockquote&gt;                
                <param>
                    nameThe expected <a href="#name">binary name</a>. of the class, or
                      <tt>null</tt> if not known                    
                </param>
                <param>
                    bThe bytes that make up the class data. The bytes from positions
                      <tt>b.position()</tt> through <tt>b.position() + b.limit() -1
                      </tt> should have the format of a valid class file as defined by
                      <cite>The Java&trade; Virtual Machine Specification</cite>.                    
                </param>
                <param>
                    protectionDomainThe ProtectionDomain of the class, or <tt>null</tt>.                    
                </param>
                <return>
                    The <tt>Class</tt> object created from the data,
                      and optional <tt>ProtectionDomain</tt>.                    
                </return>
                <throws>
                    ClassFormatErrorIf the data did not contain a valid class.                    
                </throws>
                <throws>
                    NoClassDefFoundErrorIf <tt>name</tt> is not equal to the <a href="#name">binary
                      name</a> of the class specified by <tt>b</tt>                    
                </throws>
                <throws>
                    SecurityExceptionIf an attempt is made to add this class to a package that
                      contains classes that were signed by a different set of
                      certificates than this class, or if <tt>name</tt> begins with
                      "<tt>java.</tt>".                    
                </throws>
                <see>
                    #defineClass(String,byte[],int,int,ProtectionDomain)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="defineClass" type="Class<?>" line="866">
                <params>
                    <param name="name" type="String"/>
                    <param name="b" type="java.nio.ByteBuffer"/>
                    <param name="protectionDomain" type="ProtectionDomain"/>
                </params>
                <comment line="869">
                    Use byte[] if not a direct ByteBufer:                    
                </comment>
                <comment line="876">
                    no array, or read-only array                    
                </comment>
                <comment line="878">
                    get bytes out of byte buffer.                    
                </comment>
                <comment line="893">
                    get bytes out of byte buffer.                    
                </comment>
                <declaration name="len" type="int" line="867"/>
                <scope line="870">
                    <scope line="871"/>
                    <scope line="875">
                        <declaration name="tb" type="byte[]" line="877"/>
                    </scope>
                </scope>
                <declaration name="c" type="Class" line="885"/>
                <declaration name="source" type="String" line="886"/>
                <scope line="888"/>
                <scope line="891">
                    <declaration name="tb" type="byte[]" line="892"/>
                </scope>
            </method>
            <method name="defineClass0" type="Class" line="902"/>
            <method name="defineClass1" type="Class" line="905"/>
            <method name="defineClass2" type="Class" line="908"/>
            <method name="checkName" type="boolean" line="913">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="checkCerts" type="void" line="922">
                <params>
                    <param name="name" type="String"/>
                    <param name="cs" type="CodeSource"/>
                </params>
                <declaration name="i" type="int" line="923"/>
                <declaration name="pname" type="String" line="924"/>
                <declaration name="certs" type="Certificate[]" line="926"/>
                <scope line="927"/>
                <declaration name="pcerts" type="Certificate[]" line="930"/>
                <scope line="931">
                    <scope line="932">
                        <scope line="934"/>
                    </scope>
                </scope>
                <scope line="938"/>
                <scope line="942"/>
            </method>
            <javadoc line="948">
                check to make sure the certs for the new class (certs) are the same as
                  the certs for the first class inserted in the package (pcerts)                
            </javadoc>
            <method name="compareCerts" type="boolean" line="954">
                <params>
                    <param name="pcerts" type="Certificate[]"/>
                    <param name="certs" type="Certificate[]"/>
                </params>
                <comment line="955">
                    certs can be null, indicating no certs.                    
                </comment>
                <comment line="960">
                    the length must be the same at this point                    
                </comment>
                <comment line="964">
                    go through and make sure all the certs in one array                    
                </comment>
                <comment line="965">
                    are in the other and vice-versa.                    
                </comment>
                <comment line="978">
                    now do the same for pcerts                    
                </comment>
                <scope line="956"/>
                <declaration name="match" type="boolean" line="966"/>
                <scope line="967">
                    <scope line="969">
                        <scope line="970"/>
                    </scope>
                </scope>
                <scope line="979">
                    <scope line="981">
                        <scope line="982"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="993">
                Links the specified class.  This (misleadingly named) method may be
                  used by a class loader to link a class.  If the class &lt;tt&gt;c&lt;/tt&gt; has
                  already been linked, then this method simply returns. Otherwise, the
                  class is linked as described in the &quot;Execution&quot; chapter of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  &lt;/p&gt;                
                <param>
                    cThe class to link                    
                </param>
                <throws>
                    NullPointerExceptionIf <tt>c</tt> is <tt>null</tt>.                    
                </throws>
                <see>
                    #defineClass(String,byte[],int,int)                    
                </see>
            </javadoc>
            <method name="resolveClass" type="void" line="1009">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
            </method>
            <method name="resolveClass0" type="void" line="1013"/>
            <javadoc line="1015">
                Finds a class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;,
                  loading it if necessary.
                  &lt;p&gt; This method loads the class through the system class loader (see{@link #getSystemClassLoader()}).  The &lt;tt&gt;Class&lt;/tt&gt; object returned
                  might have more than one &lt;tt&gt;ClassLoader&lt;/tt&gt; associated with it.
                  Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; need not usually invoke this method,
                  because most class loaders need to override just {@link #findClass(String)}.  &lt;/p&gt;                
                <param>
                    nameThe <a href="#name">binary name</a> of the class                    
                </param>
                <return>
                    The <tt>Class</tt> object for the specified <tt>name</tt>                    
                </return>
                <throws>
                    ClassNotFoundExceptionIf the class could not be found                    
                </throws>
                <see>
                    #ClassLoader(ClassLoader)                    
                </see>
                <see>
                    #getParent()                    
                </see>
            </javadoc>
            <method name="findSystemClass" type="Class<?>" line="1039">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="system" type="ClassLoader" line="1040"/>
                <scope line="1041">
                    <declaration name="cls" type="Class" line="1044"/>
                    <scope line="1045"/>
                </scope>
            </method>
            <javadoc line="1053">
                Returns a class loaded by the bootstrap class loader;
                  or return null if not found.                
            </javadoc>
            <method name="findBootstrapClassOrNull" type="Class" line="1058">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="findBootstrapClass" type="Class" line="1065"/>
            <javadoc line="1067">
                Returns the class with the given &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; if this
                  loader has been recorded by the Java virtual machine as an initiating
                  loader of a class with that &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  Otherwise
                  &lt;tt&gt;null&lt;/tt&gt; is returned.  &lt;/p&gt;                
                <param>
                    nameThe <a href="#name">binary name</a> of the class                    
                </param>
                <return>
                    The <tt>Class</tt> object, or <tt>null</tt> if the class has
                      not been loaded                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="findLoadedClass" type="Class<?>" line="1081">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="findLoadedClass0" type="Class" line="1087"/>
            <javadoc line="1089">
                Sets the signers of a class.  This should be invoked after defining a
                  class.  &lt;/p&gt;                
                <param>
                    cThe <tt>Class</tt> object                    
                </param>
                <param>
                    signersThe signers for the class                    
                </param>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setSigners" type="void" line="1101">
                <params>
                    <param name="c" type="Class<?>"/>
                    <param name="signers" type="Object[]"/>
                </params>
            </method>
            <javadoc line="1108">
                Finds the resource with the given name.  A resource is some data
                  (images, audio, text, etc) that can be accessed by class code in a way
                  that is independent of the location of the code.
                  &lt;p&gt; The name of a resource is a &apos;&lt;tt&gt;/&lt;/tt&gt;&apos;-separated path name that
                  identifies the resource.
                  &lt;p&gt; This method will first search the parent class loader for the
                  resource; if the parent is &lt;tt&gt;null&lt;/tt&gt; the path of the class loader
                  built-in to the virtual machine is searched.  That failing, this method
                  will invoke {@link #findResource(String)} to find the resource.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    A <tt>URL</tt> object for reading the resource, or
                      <tt>null</tt> if the resource could not be found or the invoker
                      doesn't have adequate  privileges to get the resource.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getResource" type="URL" line="1130">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="1131"/>
                <scope line="1132"/>
                <scope line="1134"/>
                <scope line="1137"/>
            </method>
            <javadoc line="1143">
                Finds all the resources with the given name. A resource is some data
                  (images, audio, text, etc) that can be accessed by class code in a way
                  that is independent of the location of the code.
                  &lt;p&gt;The name of a resource is a &lt;tt&gt;/&lt;/tt&gt;-separated path name that
                  identifies the resource.
                  &lt;p&gt; The search order is described in the documentation for {@link #getResource(String)}.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
                      the resource.  If no resources could  be found, the enumeration
                      will be empty.  Resources that the class loader doesn't have
                      access to will not be in the enumeration.                    
                </return>
                <throws>
                    IOExceptionIf I/O errors occur                    
                </throws>
                <see>
                    #findResources(String)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getResources" type="Enumeration<URL>" line="1169">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="tmp" type="Enumeration[]" line="1170"/>
                <scope line="1171"/>
                <scope line="1173"/>
            </method>
            <javadoc line="1181">
                Finds the resource with the given name. Class loader implementations
                  should override this method to specify where to find resources.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    A <tt>URL</tt> object for reading the resource, or
                      <tt>null</tt> if the resource could not be found                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="findResource" type="URL" line="1193">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1197">
                Returns an enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects
                  representing all the resources with the given name. Class loader
                  implementations should override this method to specify where to load
                  resources from.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
                      the resources                    
                </return>
                <throws>
                    IOExceptionIf I/O errors occur                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="findResources" type="Enumeration<URL>" line="1214">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getCaller" type="Class<? extends ClassLoader>" line="1221"/>
            <javadoc line="1223">
                Registers the caller as parallel capable.&lt;/p&gt;
                  The registration succeeds if and only if all of the following
                  conditions are met: &lt;br&gt;
                  1. no instance of the caller has been created&lt;/p&gt;
                  2. all of the super classes (except class Object) of the caller are
                  registered as parallel capable&lt;/p&gt;
                  Note that once a class loader is registered as parallel capable, there
                  is no way to change it back. &lt;/p&gt;                
                <return>
                    true if the caller is successfully registered as
                      parallel capable and false if otherwise.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="registerAsParallelCapable" type="boolean" line="1238"/>
            <javadoc line="1242">
                Find a resource of the specified name from the search path used to load
                  classes.  This method locates the resource through the system class
                  loader (see {@link #getSystemClassLoader()}).  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    A {@link java.net.URL <tt>URL</tt>} object for reading the
                      resource, or <tt>null</tt> if the resource could not be found                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getSystemResource" type="URL" line="1255">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="system" type="ClassLoader" line="1256"/>
                <scope line="1257"/>
            </method>
            <javadoc line="1263">
                Finds all resources of the specified name from the search path used to
                  load classes.  The resources thus found are returned as an{@link java.util.Enumeration &lt;tt&gt;Enumeration&lt;/tt&gt;} of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects.
                  &lt;p&gt; The search order is described in the documentation for {@link #getSystemResource(String)}.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An enumeration of resource {@link java.net.URL <tt>URL</tt>}objects                    
                </return>
                <throws>
                    IOExceptionIf I/O errors occur                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSystemResources" type="Enumeration<URL>" line="1285">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="system" type="ClassLoader" line="1286"/>
                <scope line="1287"/>
            </method>
            <javadoc line="1293">
                Find resources from the VM&apos;s built-in classloader.                
            </javadoc>
            <method name="getBootstrapResource" type="URL" line="1296">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="ucp" type="URLClassPath" line="1297"/>
                <declaration name="res" type="Resource" line="1298"/>
            </method>
            <javadoc line="1302">
                Find resources from the VM&apos;s built-in classloader.                
            </javadoc>
            <method name="getBootstrapResources" type="Enumeration<URL>" line="1307">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="Enumeration&lt;Resource&gt;" line="1308"/>
                <anonymous_class line="1310">
                    <method name="nextElement" type="URL" line="1311"/>
                    <method name="hasMoreElements" type="boolean" line="1314"/>
                </anonymous_class>
            </method>
            <method name="getBootstrapClassPath" type="URLClassPath" line="1321"/>
            <javadoc line="1326">
                Returns an input stream for reading the specified resource.
                  &lt;p&gt; The search order is described in the documentation for {@link #getResource(String)}.  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An input stream for reading the resource, or <tt>null</tt>
                      if the resource could not be found                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="1340">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="1341"/>
                <scope line="1342"/>
                <scope line="1344"/>
            </method>
            <javadoc line="1349">
                Open for reading, a resource of the specified name from the search path
                  used to load classes.  This method locates the resource through the
                  system class loader (see {@link #getSystemClassLoader()}).  &lt;/p&gt;                
                <param>
                    nameThe resource name                    
                </param>
                <return>
                    An input stream for reading the resource, or <tt>null</tt>
                      if the resource could not be found                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getSystemResourceAsStream" type="InputStream" line="1362">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="url" type="URL" line="1363"/>
                <scope line="1364"/>
                <scope line="1366"/>
            </method>
            <javadoc line="1374">
                Returns the parent class loader for delegation. Some implementations may
                  use &lt;tt&gt;null&lt;/tt&gt; to represent the bootstrap class loader. This method
                  will return &lt;tt&gt;null&lt;/tt&gt; in such implementations if this class loader&apos;s
                  parent is the bootstrap class loader.
                  &lt;p&gt; If a security manager is present, and the invoker&apos;s class loader is
                  not &lt;tt&gt;null&lt;/tt&gt; and is not an ancestor of this class loader, then this
                  method invokes the security manager&apos;s {@link SecurityManager#checkPermission(java.security.Permission)&lt;tt&gt;checkPermission&lt;/tt&gt;} method with a {@link RuntimePermission#RuntimePermission(String)&lt;tt&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/tt&gt;} permission to verify
                  access to the parent class loader is permitted.  If not, a
                  &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  &lt;/p&gt;                
                <return>
                    The parent <tt>ClassLoader</tt>                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its <tt>checkPermission</tt>
                      method doesn't allow access to this class loader's parent class
                      loader.                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getParent" type="ClassLoader" line="1399">
                <declaration name="sm" type="SecurityManager" line="1402"/>
                <scope line="1403">
                    <declaration name="ccl" type="ClassLoader" line="1404"/>
                    <scope line="1405"/>
                </scope>
            </method>
            <javadoc line="1412">
                Returns the system class loader for delegation.  This is the default
                  delegation parent for new &lt;tt&gt;ClassLoader&lt;/tt&gt; instances, and is
                  typically the class loader used to start the application.
                  &lt;p&gt; This method is first invoked early in the runtime&apos;s startup
                  sequence, at which point it creates the system class loader and sets it
                  as the context class loader of the invoking &lt;tt&gt;Thread&lt;/tt&gt;.
                  &lt;p&gt; The default system class loader is an implementation-dependent
                  instance of this class.
                  &lt;p&gt; If the system property &quot;&lt;tt&gt;java.system.class.loader&lt;/tt&gt;&quot; is defined
                  when this method is first invoked then the value of that property is
                  taken to be the name of a class that will be returned as the system
                  class loader.  The class is loaded using the default system class loader
                  and must define a public constructor that takes a single parameter of
                  type &lt;tt&gt;ClassLoader&lt;/tt&gt; which is used as the delegation parent.  An
                  instance is then created using this constructor with the default system
                  class loader as the parameter.  The resulting class loader is defined
                  to be the system class loader.
                  &lt;p&gt; If a security manager is present, and the invoker&apos;s class loader is
                  not &lt;tt&gt;null&lt;/tt&gt; and the invoker&apos;s class loader is not the same as or
                  an ancestor of the system class loader, then this method invokes the
                  security manager&apos;s {@link SecurityManager#checkPermission(java.security.Permission)&lt;tt&gt;checkPermission&lt;/tt&gt;} method with a {@link RuntimePermission#RuntimePermission(String)&lt;tt&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/tt&gt;} permission to verify
                  access to the system class loader.  If not, a
                  &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  &lt;/p&gt;                
                <return>
                    The system <tt>ClassLoader</tt> for delegation, or
                      <tt>null</tt> if none                    
                </return>
                <throws>
                    SecurityExceptionIf a security manager exists and its <tt>checkPermission</tt>
                      method doesn't allow access to the system class loader.                    
                </throws>
                <throws>
                    IllegalStateExceptionIf invoked recursively during the construction of the class
                      loader specified by the "<tt>java.system.class.loader</tt>"
                      property.                    
                </throws>
                <throws>
                    ErrorIf the system property "<tt>java.system.class.loader</tt>"
                      is defined but the named class could not be loaded, the
                      provider class does not define the required constructor, or an
                      exception is thrown by that constructor when it is invoked. The
                      underlying cause of the error can be retrieved via the{@link Throwable#getCause()} method.                    
                </throws>
                <revised>
                    1.4                    
                </revised>
            </javadoc>
            <method name="getSystemClassLoader" type="ClassLoader" line="1467">
                <scope line="1469"/>
                <declaration name="sm" type="SecurityManager" line="1472"/>
                <scope line="1473">
                    <declaration name="ccl" type="ClassLoader" line="1474"/>
                    <scope line="1475"/>
                </scope>
            </method>
            <method name="initSystemClassLoader" type="void" line="1482">
                <comment line="1503">
                    wrap the exception                    
                </comment>
                <scope line="1483">
                    <declaration name="l" type="sun.misc.Launcher" line="1486"/>
                    <scope line="1487">
                        <declaration name="oops" type="Throwable" line="1488"/>
                        <scope line="1490"/>
                        <scope line="1493">
                            <scope line="1495"/>
                        </scope>
                        <scope line="1499">
                            <scope line="1500"/>
                            <scope line="1502"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isAncestor" type="boolean" line="1514">
                <params>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <declaration name="acl" type="ClassLoader" line="1515"/>
                <scope line="1516">
                    <scope line="1518"/>
                </scope>
            </method>
            <method name="getCallerClassLoader" type="ClassLoader" line="1529">
                <comment line="1530">
                    NOTE use of more generic Reflection.getCallerClass()                    
                </comment>
                <comment line="1532">
                    This can be null if the VM is requesting it                    
                </comment>
                <comment line="1536">
                    Circumvent security check since this is package-private                    
                </comment>
                <declaration name="caller" type="Class" line="1531"/>
                <scope line="1533"/>
            </method>
            <declaration name="scl" type="ClassLoader" line="1542"/>
            <declaration name="sclSet" type="boolean" line="1546"/>
            <javadoc line="1551">
                Defines a package by name in this &lt;tt&gt;ClassLoader&lt;/tt&gt;.  This allows
                  class loaders to define the packages for their classes. Packages must
                  be created before the class is defined, and package names must be
                  unique within a class loader and cannot be redefined or changed once
                  created.  &lt;/p&gt;                
                <param>
                    nameThe package name                    
                </param>
                <param>
                    specTitleThe specification title                    
                </param>
                <param>
                    specVersionThe specification version                    
                </param>
                <param>
                    specVendorThe specification vendor                    
                </param>
                <param>
                    implTitleThe implementation title                    
                </param>
                <param>
                    implVersionThe implementation version                    
                </param>
                <param>
                    implVendorThe implementation vendor                    
                </param>
                <param>
                    sealBaseIf not <tt>null</tt>, then this package is sealed with
                      respect to the given code source {@link java.net.URL<tt>URL</tt>}  object.  Otherwise, the package is not sealed.                    
                </param>
                <return>
                    The newly defined <tt>Package</tt> object                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf package name duplicates an existing package either in this
                      class loader or one of its ancestors                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="definePackage" type="Package" line="1597">
                <params>
                    <param name="name" type="String"/>
                    <param name="specTitle" type="String"/>
                    <param name="specVersion" type="String"/>
                    <param name="specVendor" type="String"/>
                    <param name="implTitle" type="String"/>
                    <param name="implVersion" type="String"/>
                    <param name="implVendor" type="String"/>
                    <param name="sealBase" type="URL"/>
                </params>
                <scope line="1598">
                    <declaration name="pkg" type="Package" line="1599"/>
                    <scope line="1600"/>
                </scope>
            </method>
            <javadoc line="1611">
                Returns a &lt;tt&gt;Package&lt;/tt&gt; that has been defined by this class loader
                  or any of its ancestors.  &lt;/p&gt;                
                <param>
                    nameThe package name                    
                </param>
                <return>
                    The <tt>Package</tt> corresponding to the given name, or
                      <tt>null</tt> if not found                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPackage" type="Package" line="1623">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="pkg" type="Package" line="1624"/>
                <scope line="1625"/>
                <scope line="1628">
                    <scope line="1629"/>
                    <scope line="1631"/>
                    <scope line="1634">
                        <scope line="1635">
                            <declaration name="pkg2" type="Package" line="1636"/>
                            <scope line="1637"/>
                            <scope line="1639"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1648">
                Returns all of the &lt;tt&gt;Packages&lt;/tt&gt; defined by this class loader and
                  its ancestors.  &lt;/p&gt;                
                <return>
                    The array of <tt>Package</tt> objects defined by this
                      <tt>ClassLoader</tt>                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPackages" type="Package[]" line="1657">
                <declaration name="map" type="Map&lt;String,Package&gt;" line="1658"/>
                <scope line="1659"/>
                <declaration name="pkgs" type="Package[]" line="1662"/>
                <scope line="1663"/>
                <scope line="1665"/>
                <scope line="1668">
                    <scope line="1669">
                        <declaration name="pkgName" type="String" line="1670"/>
                        <scope line="1671"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1682">
                Returns the absolute path name of a native library.  The VM invokes this
                  method to locate the native libraries that belong to classes loaded with
                  this class loader. If this method returns &lt;tt&gt;null&lt;/tt&gt;, the VM
                  searches the library along the path specified as the
                  &quot;&lt;tt&gt;java.library.path&lt;/tt&gt;&quot; property.  &lt;/p&gt;                
                <param>
                    libnameThe library name                    
                </param>
                <return>
                    The absolute path of the native library                    
                </return>
                <see>
                    System#loadLibrary(String)                    
                </see>
                <see>
                    System#mapLibraryName(String)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="findLibrary" type="String" line="1699">
                <params>
                    <param name="libname" type="String"/>
                </params>
            </method>
            <class name="NativeLibrary" line="1703">
                <comment line="196">
                    the set of parallel capable loader types                    
                </comment>
                <comment line="1720">
                    opaque handle to native library, used in native code.                    
                </comment>
                <comment line="1722">
                    the version of JNI environment the native library requires.                    
                </comment>
                <comment line="1724">
                    the class from which the library is loaded, also indicates                    
                </comment>
                <comment line="1725">
                    the loader this native library belongs.                    
                </comment>
                <comment line="1727">
                    the canonicalized name of the native library.                    
                </comment>
                <comment line="1760">
                    Invoked in the VM to determine the context class in                    
                </comment>
                <comment line="1761">
                    JNI_Load/JNI_Unload                    
                </comment>
                <javadoc line="1703">
                    The inner class NativeLibrary denotes a loaded native library instance.
                      Every classloader contains a vector of loaded native libraries in the
                      private field &lt;tt&gt;nativeLibraries&lt;/tt&gt;.  The native libraries loaded
                      into the system are entered into the &lt;tt&gt;systemNativeLibraries&lt;/tt&gt;
                      vector.
                      &lt;p&gt; Every native library requires a particular version of JNI. This is
                      denoted by the private &lt;tt&gt;jniVersion&lt;/tt&gt; field.  This field is set by
                      the VM when it loads the library, and used by the VM to pass the correct
                      version of JNI to the native methods.  &lt;/p&gt;                    
                    <see>
                        ClassLoader                        
                    </see>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="handle" type="long" line="1720"/>
                <declaration name="jniVersion" type="int" line="1722"/>
                <declaration name="fromClass" type="Class" line="1725"/>
                <declaration name="name" type="String" line="1727"/>
                <method name="load" type="void" line="1729"/>
                <method name="find" type="long" line="1730"/>
                <method name="unload" type="void" line="1731"/>
                <method name="NativeLibrary" type="constructor" line="1733">
                    <params>
                        <param name="fromClass" type="Class"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="finalize" type="void" line="1738">
                    <comment line="1741">
                                                
                    </comment>
                    <comment line="1749">
                                                
                    </comment>
                    <scope line="1739">
                        <scope line="1740">
                            <declaration name="size" type="int" line="1742"/>
                            <scope line="1743">
                                <scope line="1744"/>
                            </scope>
                            <scope line="1751"/>
                            <scope line="1753"/>
                        </scope>
                    </scope>
                </method>
                <method name="getFromClass" type="Class" line="1761"/>
            </class>
            <declaration name="loadedLibraryNames" type="Vector&lt;String&gt;" line="1767"/>
            <declaration name="systemNativeLibraries" type="Vector&lt;NativeLibrary&gt;" line="1770"/>
            <declaration name="nativeLibraries" type="Vector&lt;NativeLibrary&gt;" line="1774"/>
            <declaration name="nativeLibraryContext" type="Stack&lt;NativeLibrary&gt;" line="1777"/>
            <declaration name="usr_paths" type="String" line="1780"/>
            <declaration name="sys_paths" type="String" line="1781"/>
            <method name="initializePath" type="String[]" line="1783">
                <params>
                    <param name="propname" type="String"/>
                </params>
                <comment line="1788">
                    Count the separators in the path                    
                </comment>
                <comment line="1796">
                    allocate the array of paths - n :&apos;s = n + 1 path elements                    
                </comment>
                <comment line="1799">
                    Fill the array with paths from the ldpath                    
                </comment>
                <declaration name="ldpath" type="String" line="1784"/>
                <declaration name="ps" type="String" line="1785"/>
                <declaration name="ldlen" type="int" line="1786"/>
                <declaration name="i" type="int" line="1787"/>
                <scope line="1791"/>
                <declaration name="paths" type="String[]" line="1797"/>
                <scope line="1802">
                    <scope line="1803"/>
                    <scope line="1805"/>
                </scope>
            </method>
            <method name="loadLibrary" type="void" line="1817">
                <params>
                    <param name="fromClass" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="isAbsolute" type="boolean"/>
                </params>
                <comment line="1859">
                    Oops, it failed                    
                </comment>
                <declaration name="loader" type="ClassLoader" line="1818"/>
                <scope line="1820"/>
                <scope line="1824">
                    <scope line="1825"/>
                </scope>
                <scope line="1830">
                    <declaration name="libfilename" type="String" line="1831"/>
                    <scope line="1832">
                        <declaration name="libfile" type="File" line="1833"/>
                        <scope line="1834"/>
                        <scope line="1838"/>
                    </scope>
                </scope>
                <scope line="1844">
                    <declaration name="libfile" type="File" line="1845"/>
                    <scope line="1846"/>
                </scope>
                <scope line="1850">
                    <scope line="1851">
                        <declaration name="libfile" type="File" line="1852"/>
                        <scope line="1854"/>
                    </scope>
                </scope>
            </method>
            <method name="loadLibrary0" type="boolean" line="1863">
                <params>
                    <param name="fromClass" type="Class"/>
                    <param name="file" type="File"/>
                </params>
                <comment line="1899">
                    If the library is being loaded (must be by the same thread,
                     because Runtime.load and Runtime.loadLibrary are
                     synchronous). The reason is can occur is that the JNI_OnLoad
                     function can cause another loadLibrary invocation.
                    
                     Thus we can use a static stack to hold the list of libraries
                     we are loading.
                    
                     If there is a pending load operation for the library, we
                     immediately return success; otherwise, we raise
                     UnsatisfiedLinkError.                    
                </comment>
                <anonymous_class line="1865">
                    <method name="run" type="Object" line="1866"/>
                </anonymous_class>
                <declaration name="exists" type="boolean" line="1864"/>
                <scope line="1870"/>
                <declaration name="name" type="String" line="1873"/>
                <scope line="1874"/>
                <scope line="1876"/>
                <declaration name="loader" type="ClassLoader" line="1879"/>
                <declaration name="libs" type="Vector&lt;NativeLibrary&gt;" line="1881"/>
                <scope line="1883">
                    <declaration name="size" type="int" line="1884"/>
                    <scope line="1885">
                        <declaration name="lib" type="NativeLibrary" line="1886"/>
                        <scope line="1887"/>
                    </scope>
                    <scope line="1892">
                        <scope line="1893"/>
                        <declaration name="n" type="int" line="1911"/>
                        <scope line="1912">
                            <declaration name="lib" type="NativeLibrary" line="1913"/>
                            <scope line="1914">
                                <scope line="1915"/>
                                <scope line="1917"/>
                            </scope>
                        </scope>
                        <declaration name="lib" type="NativeLibrary" line="1925"/>
                        <scope line="1927"/>
                        <scope line="1929"/>
                        <scope line="1932"/>
                    </scope>
                </scope>
            </method>
            <method name="findNative" type="long" line="1943">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="libs" type="Vector&lt;NativeLibrary&gt;" line="1944"/>
                <scope line="1946">
                    <declaration name="size" type="int" line="1947"/>
                    <scope line="1948">
                        <declaration name="lib" type="NativeLibrary" line="1949"/>
                        <declaration name="entry" type="long" line="1950"/>
                    </scope>
                </scope>
            </method>
            <declaration name="assertionLock" type="Object" line="1961"/>
            <declaration name="defaultAssertionStatus" type="boolean" line="1965"/>
            <declaration name="packageAssertionStatus" type="Map&lt;String,Boolean&gt;" line="1973"/>
            <declaration name="classAssertionStatus" type="Map&lt;String,Boolean&gt;" line="1980"/>
            <javadoc line="1982">
                Sets the default assertion status for this class loader.  This setting
                  determines whether classes loaded by this class loader and initialized
                  in the future will have assertions enabled or disabled by default.
                  This setting may be overridden on a per-package or per-class basis by
                  invoking {@link #setPackageAssertionStatus(String,boolean)} or {@link #setClassAssertionStatus(String,boolean)}.  &lt;/p&gt;                
                <param>
                    enabled<tt>true</tt> if classes loaded by this class loader will
                      henceforth have assertions enabled by default, <tt>false</tt>
                      if they will have assertions disabled by default.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDefaultAssertionStatus" type="void" line="1997">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="1998"/>
            </method>
            <javadoc line="2006">
                Sets the package default assertion status for the named package.  The
                  package default assertion status determines the assertion status for
                  classes initialized in the future that belong to the named package or
                  any of its &quot;subpackages&quot;.
                  &lt;p&gt; A subpackage of a package named p is any package whose name begins
                  with &quot;&lt;tt&gt;p.&lt;/tt&gt;&quot;.  For example, &lt;tt&gt;javax.swing.text&lt;/tt&gt; is a
                  subpackage of &lt;tt&gt;javax.swing&lt;/tt&gt;, and both &lt;tt&gt;java.util&lt;/tt&gt; and
                  &lt;tt&gt;java.lang.reflect&lt;/tt&gt; are subpackages of &lt;tt&gt;java&lt;/tt&gt;.
                  &lt;p&gt; In the event that multiple package defaults apply to a given class,
                  the package default pertaining to the most specific package takes
                  precedence over the others.  For example, if &lt;tt&gt;javax.lang&lt;/tt&gt; and
                  &lt;tt&gt;javax.lang.reflect&lt;/tt&gt; both have package defaults associated with
                  them, the latter package default applies to classes in
                  &lt;tt&gt;javax.lang.reflect&lt;/tt&gt;.
                  &lt;p&gt; Package defaults take precedence over the class loader&apos;s default
                  assertion status, and may be overridden on a per-class basis by invoking{@link #setClassAssertionStatus(String,boolean)}.  &lt;/p&gt;                
                <param>
                    packageNameThe name of the package whose package default assertion status
                      is to be set. A <tt>null</tt> value indicates the unnamed
                      package that is "current"
                      (see section 7.4.2 of
                      <cite>The Java&trade; Language Specification</cite>.)                    
                </param>
                <param>
                    enabled<tt>true</tt> if classes loaded by this classloader and
                      belonging to the named package or any of its subpackages will
                      have assertions enabled by default, <tt>false</tt> if they will
                      have assertions disabled by default.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setPackageAssertionStatus" type="void" line="2044">
                <params>
                    <param name="packageName" type="String"/>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="2045"/>
            </method>
            <javadoc line="2053">
                Sets the desired assertion status for the named top-level class in this
                  class loader and any nested classes contained therein.  This setting
                  takes precedence over the class loader&apos;s default assertion status, and
                  over any applicable per-package default.  This method has no effect if
                  the named class has already been initialized.  (Once a class is
                  initialized, its assertion status cannot change.)
                  &lt;p&gt; If the named class is not a top-level class, this invocation will
                  have no effect on the actual assertion status of any class. &lt;/p&gt;                
                <param>
                    classNameThe fully qualified class name of the top-level class whose
                      assertion status is to be set.                    
                </param>
                <param>
                    enabled<tt>true</tt> if the named class is to have assertions
                      enabled when (and if) it is initialized, <tt>false</tt> if the
                      class is to have assertions disabled.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setClassAssertionStatus" type="void" line="2075">
                <params>
                    <param name="className" type="String"/>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="2076"/>
            </method>
            <javadoc line="2084">
                Sets the default assertion status for this class loader to
                  &lt;tt&gt;false&lt;/tt&gt; and discards any package defaults or class assertion
                  status settings associated with the class loader.  This method is
                  provided so that class loaders can be made to ignore any command line or
                  persistent assertion status settings and &quot;start with a clean slate.&quot;
                  &lt;/p&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="clearAssertionStatus" type="void" line="2094">
                <comment line="2095">
                    Whether or not &quot;Java assertion maps&quot; are initialized, set
                     them to empty maps, effectively ignoring any present settings.                    
                </comment>
                <scope line="2099"/>
            </method>
            <javadoc line="2106">
                Returns the assertion status that would be assigned to the specified
                  class if it were to be initialized at the time this method is invoked.
                  If the named class has had its assertion status set, the most recent
                  setting will be returned; otherwise, if any package default assertion
                  status pertains to this class, the most recent setting for the most
                  specific pertinent package default assertion status is returned;
                  otherwise, this class loader&apos;s default assertion status is returned.
                  &lt;/p&gt;                
                <param>
                    classNameThe fully qualified class name of the class whose desired
                      assertion status is being queried.                    
                </param>
                <return>
                    The desired assertion status of the specified class.                    
                </return>
                <see>
                    #setClassAssertionStatus(String,boolean)                    
                </see>
                <see>
                    #setPackageAssertionStatus(String,boolean)                    
                </see>
                <see>
                    #setDefaultAssertionStatus(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="desiredAssertionStatus" type="boolean" line="2128">
                <params>
                    <param name="className" type="String"/>
                </params>
                <comment line="2130">
                    assert classAssertionStatus   != null;                    
                </comment>
                <comment line="2131">
                    assert packageAssertionStatus != null;                    
                </comment>
                <comment line="2133">
                    Check for a class entry                    
                </comment>
                <comment line="2138">
                    Check for most specific package entry                    
                </comment>
                <comment line="2140">
                    default package                    
                </comment>
                <comment line="2153">
                    Return the classloader default                    
                </comment>
                <scope line="2129">
                    <declaration name="result" type="Boolean" line="2134"/>
                    <declaration name="dotIndex" type="int" line="2139"/>
                    <scope line="2140"/>
                    <scope line="2145"/>
                </scope>
            </method>
            <method name="initializeJavaAssertionMaps" type="void" line="2160">
                <comment line="2161">
                    assert Thread.holdsLock(assertionLock);                    
                </comment>
                <declaration name="directives" type="AssertionStatusDirectives" line="2165"/>
            </method>
            <method name="retrieveDirectives" type="AssertionStatusDirectives" line="2179"/>
        </class>
        <class name="SystemClassLoaderAction" line="2183">
            <comment line="185">
                The parent class loader for delegation                
            </comment>
            <comment line="186">
                Note: VM hardcoded the offset of this field, thus all new fields                
            </comment>
            <comment line="187">
                must be added *after* it.                
            </comment>
            <comment line="236">
                Maps class name to the corresponding lock object when the current                
            </comment>
            <comment line="237">
                class loader is parallel capable.                
            </comment>
            <comment line="238">
                Note: VM also uses this field to decide if the current class loader                
            </comment>
            <comment line="239">
                is parallel capable and the appropriate lock object for class loading.                
            </comment>
            <comment line="242">
                Hashtable that maps packages to certs                
            </comment>
            <comment line="245">
                Shared among all packages with unsigned classes                
            </comment>
            <comment line="248">
                The classes loaded by this class loader. The only purpose of this table                
            </comment>
            <comment line="249">
                is to keep the classes from being GC&apos;ed until the loader is GC&apos;ed.                
            </comment>
            <comment line="252">
                The &quot;default&quot; domain. Set as the default ProtectionDomain on newly                
            </comment>
            <comment line="253">
                created classes.                
            </comment>
            <comment line="258">
                The initiating protection domains for all classes loaded by this loader                
            </comment>
            <comment line="261">
                Invoked by the VM to record every loaded class with this loader.                
            </comment>
            <comment line="266">
                The packages defined in this class loader.  Each package name is mapped                
            </comment>
            <comment line="267">
                to its corresponding Package object.                
            </comment>
            <comment line="268">
                @GuardedBy(&quot;itself&quot;)                
            </comment>
            <comment line="338">
                -- Class --                
            </comment>
            <comment line="471">
                This method is invoked by the virtual machine to load a class.                
            </comment>
            <comment line="486">
                Invoked by the VM after loading class with this loader.                
            </comment>
            <comment line="638">
                Determine protection domain, and check that:
                - not define java. class,
                - signer of this class matches signers for the rest of the classes in
                package.                
            </comment>
            <comment line="913">
                true if the name is null or has the potential to be a valid binary name                
            </comment>
            <comment line="1065">
                return null if not found                
            </comment>
            <comment line="1107">
                -- Resource --                
            </comment>
            <comment line="1219">
                index 0: java.lang.ClassLoader.class                
            </comment>
            <comment line="1220">
                index 1: the immediate caller of index 0.                
            </comment>
            <comment line="1221">
                index 2: the immediate caller of index 1.                
            </comment>
            <comment line="1321">
                Returns the URLClassPath that is used for finding system resources.                
            </comment>
            <comment line="1373">
                -- Hierarchy --                
            </comment>
            <comment line="1513">
                Returns true if the specified class loader can be found in this class                
            </comment>
            <comment line="1514">
                loader&apos;s delegation chain.                
            </comment>
            <comment line="1526">
                Returns the invoker&apos;s class loader, or null if none.                
            </comment>
            <comment line="1527">
                NOTE: This must always be invoked when there is exactly one intervening                
            </comment>
            <comment line="1528">
                frame from the core libraries on the stack between this method&apos;s                
            </comment>
            <comment line="1529">
                invocation and the desired invoker.                
            </comment>
            <comment line="1541">
                The class loader for the system                
            </comment>
            <comment line="1542">
                @GuardedBy(&quot;ClassLoader.class&quot;)                
            </comment>
            <comment line="1545">
                Set to true once the system class loader has been set                
            </comment>
            <comment line="1546">
                @GuardedBy(&quot;ClassLoader.class&quot;)                
            </comment>
            <comment line="1550">
                -- Package --                
            </comment>
            <comment line="1681">
                -- Native library access --                
            </comment>
            <comment line="1767">
                All native library names we&apos;ve loaded.                
            </comment>
            <comment line="1770">
                Native libraries belonging to system classes.                
            </comment>
            <comment line="1774">
                Native libraries associated with the class loader.                
            </comment>
            <comment line="1777">
                native libraries being loaded/unloaded.                
            </comment>
            <comment line="1780">
                The paths searched for libraries                
            </comment>
            <comment line="1816">
                Invoked in the java.lang.Runtime class to implement load and loadLibrary.                
            </comment>
            <comment line="1943">
                Invoked in the VM class linking code.                
            </comment>
            <comment line="1960">
                -- Assertion management --                
            </comment>
            <comment line="1964">
                The default toggle for assertion checking.                
            </comment>
            <comment line="1965">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="1968">
                Maps String packageName to Boolean package default assertion status Note                
            </comment>
            <comment line="1969">
                that the default package is placed under a null map key.  If this field                
            </comment>
            <comment line="1970">
                is null then we are delegating assertion status queries to the VM, i.e.,                
            </comment>
            <comment line="1971">
                none of this ClassLoader&apos;s assertion status modification methods have                
            </comment>
            <comment line="1972">
                been invoked.                
            </comment>
            <comment line="1973">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="1976">
                Maps String fullyQualifiedClassName to Boolean assertionStatus If this                
            </comment>
            <comment line="1977">
                field is null then we are delegating assertion status queries to the VM,                
            </comment>
            <comment line="1978">
                i.e., none of this ClassLoader&apos;s assertion status modification methods                
            </comment>
            <comment line="1979">
                have been invoked.                
            </comment>
            <comment line="1980">
                @GuardedBy(&quot;assertionLock&quot;)                
            </comment>
            <comment line="2159">
                Set up the assertions with information provided by the VM.                
            </comment>
            <comment line="2160">
                Note: Should only be called inside a synchronized block                
            </comment>
            <comment line="2179">
                Retrieves the assertion directives from the VM.                
            </comment>
            <implements interface="PrivilegedExceptionAction">
                <type_params>
                    <type_param name="ClassLoader"/>
                </type_params>
            </implements>
            <declaration name="parent" type="ClassLoader" line="2185"/>
            <method name="SystemClassLoaderAction" type="constructor" line="2187">
                <params>
                    <param name="parent" type="ClassLoader"/>
                </params>
            </method>
            <method name="run" type="ClassLoader" line="2191">
                <declaration name="cls" type="String" line="2192"/>
                <scope line="2193"/>
                <declaration name="ctor" type="Constructor" line="2197"/>
                <declaration name="sys" type="ClassLoader" line="2199"/>
            </method>
        </class>
    </source>