<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <class name="ProcessBuilder" line="38">
            <comment line="354">
                Only for use by Runtime.exec(...envp...)                
            </comment>
            <comment line="416">
                ---------------- I/O Redirection ----------------                
            </comment>
            <javadoc line="38">
                This class is used to create operating system processes.
                  &lt;p&gt;Each {@code ProcessBuilder} instance manages a collection
                  of process attributes.  The {@link #start()} method creates a new{@link Process} instance with those attributes.  The {@link #start()} method can be invoked repeatedly from the same instance
                  to create new subprocesses with identical or related attributes.
                  &lt;p&gt;Each process builder manages these process attributes:
                  &lt;ul&gt;
                  &lt;li&gt;a &lt;i&gt;command&lt;/i&gt;, a list of strings which signifies the
                  external program file to be invoked and its arguments, if any.
                  Which string lists represent a valid operating system command is
                  system-dependent.  For example, it is common for each conceptual
                  argument to be an element in this list, but there are operating
                  systems where programs are expected to tokenize command line
                  strings themselves - on such a system a Java implementation might
                  require commands to contain exactly two elements.
                  &lt;li&gt;an &lt;i&gt;environment&lt;/i&gt;, which is a system-dependent mapping from
                  &lt;i&gt;variables&lt;/i&gt; to &lt;i&gt;values&lt;/i&gt;.  The initial value is a copy of
                  the environment of the current process (see {@link System#getenv()}).
                  &lt;li&gt;a &lt;i&gt;working directory&lt;/i&gt;.  The default value is the current
                  working directory of the current process, usually the directory
                  named by the system property {@code user.dir}.
                  &lt;li&gt;&lt;a name=&quot;redirect-input&quot;&gt;a source of &lt;i&gt;standard input&lt;/i&gt;.
                  By default, the subprocess reads input from a pipe.  Java code
                  can access this pipe via the output stream returned by{@link Process#getOutputStream()}.  However, standard input may
                  be redirected to another source using{@link #redirectInput(Redirect) redirectInput}.
                  In this case, {@link Process#getOutputStream()} will return a
                  &lt;i&gt;null output stream&lt;/i&gt;, for which:
                  &lt;ul&gt;
                  &lt;li&gt;the {@link OutputStream#write(int) write} methods always
                  throw {@code IOException}&lt;li&gt;the {@link OutputStream#close() close} method does nothing
                  &lt;/ul&gt;
                  &lt;li&gt;&lt;a name=&quot;redirect-output&quot;&gt;a destination for &lt;i&gt;standard output&lt;/i&gt;
                  and &lt;i&gt;standard error&lt;/i&gt;.  By default, the subprocess writes standard
                  output and standard error to pipes.  Java code can access these pipes
                  via the input streams returned by {@link Process#getInputStream()} and{@link Process#getErrorStream()}.  However, standard output and
                  standard error may be redirected to other destinations using{@link #redirectOutput(Redirect) redirectOutput} and{@link #redirectError(Redirect) redirectError}.
                  In this case, {@link Process#getInputStream()} and/or{@link Process#getErrorStream()} will return a &lt;i&gt;null input
                  stream&lt;/i&gt;, for which:
                  &lt;ul&gt;
                  &lt;li&gt;the {@link InputStream#read() read} methods always return{@code -1}&lt;li&gt;the {@link InputStream#available() available} method always returns{@code 0}&lt;li&gt;the {@link InputStream#close() close} method does nothing
                  &lt;/ul&gt;
                  &lt;li&gt;a &lt;i&gt;redirectErrorStream&lt;/i&gt; property.  Initially, this property
                  is {@code false}, meaning that the standard output and error
                  output of a subprocess are sent to two separate streams, which can
                  be accessed using the {@link Process#getInputStream()} and {@link Process#getErrorStream()} methods.
                  &lt;p&gt;If the value is set to {@code true}, then:
                  &lt;ul&gt;
                  &lt;li&gt;standard error is merged with the standard output and always sent
                  to the same destination (this makes it easier to correlate error
                  messages with the corresponding output)
                  &lt;li&gt;the common destination of standard error and standard output can be
                  redirected using{@link #redirectOutput(Redirect) redirectOutput}&lt;li&gt;any redirection set by the{@link #redirectError(Redirect) redirectError}method is ignored when creating a subprocess
                  &lt;li&gt;the stream returned from {@link Process#getErrorStream()} will
                  always be a &lt;a href=&quot;#redirect-output&quot;&gt;null input stream&lt;/a&gt;
                  &lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Modifying a process builder&apos;s attributes will affect processes
                  subsequently started by that object&apos;s {@link #start()} method, but
                  will never affect previously started processes or the Java process
                  itself.
                  &lt;p&gt;Most error checking is performed by the {@link #start()} method.
                  It is possible to modify the state of an object so that {@link #start()} will fail.  For example, setting the command attribute to
                  an empty list will not throw an exception unless {@link #start()}is invoked.
                  &lt;p&gt;&lt;strong&gt;Note that this class is not synchronized.&lt;/strong&gt;
                  If multiple threads access a {@code ProcessBuilder} instance
                  concurrently, and at least one of the threads modifies one of the
                  attributes structurally, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.
                  &lt;p&gt;Starting a new process which uses the default working directory
                  and environment is easy:
                  &lt;pre&gt; {@codeProcess p = new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg&quot;).start();}&lt;/pre&gt;
                  &lt;p&gt;Here is an example that starts a process with a modified working
                  directory and environment, and redirects standard output and error
                  to be appended to a log file:
                  &lt;pre&gt; {@codeProcessBuilder pb =
                  new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg1&quot;, &quot;myArg2&quot;);
                  Map&lt;String, String&gt; env = pb.environment();
                  env.put(&quot;VAR1&quot;, &quot;myValue&quot;);
                  env.remove(&quot;OTHERVAR&quot;);
                  env.put(&quot;VAR2&quot;, env.get(&quot;VAR1&quot;) + &quot;suffix&quot;);
                  pb.directory(new File(&quot;myDir&quot;));
                  File log = new File(&quot;log&quot;);
                  pb.redirectErrorStream(true);
                  pb.redirectOutput(Redirect.appendTo(log));
                  Process p = pb.start();
                  assert pb.redirectInput() == Redirect.PIPE;
                  assert pb.redirectOutput().file() == log;
                  assert p.getInputStream().read() == -1;}&lt;/pre&gt;
                  &lt;p&gt;To start a process with an explicit set of environment
                  variables, first call {@link java.util.Map#clear() Map.clear()}before adding environment variables.                
                <author>
                    Martin Buchholz                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="command" type="List&lt;String&gt;" line="181"/>
            <declaration name="directory" type="File" line="182"/>
            <declaration name="environment" type="Map&lt;String,String&gt;" line="183"/>
            <declaration name="redirectErrorStream" type="boolean" line="184"/>
            <declaration name="redirects" type="Redirect[]" line="185"/>
            <javadoc line="187">
                Constructs a process builder with the specified operating
                  system program and arguments.  This constructor does &lt;i&gt;not&lt;/i&gt;
                  make a copy of the {@code command} list.  Subsequent
                  updates to the list will be reflected in the state of the
                  process builder.  It is not checked whether{@code command} corresponds to a valid operating system
                  command.                
                <param>
                    command the list containing the program and its arguments                    
                </param>
                <throws>
                    NullPointerException if the argument is null                    
                </throws>
            </javadoc>
            <method name="ProcessBuilder" type="constructor" line="199">
                <params>
                    <param name="command" type="List<String>"/>
                </params>
            </method>
            <javadoc line="205">
                Constructs a process builder with the specified operating
                  system program and arguments.  This is a convenience
                  constructor that sets the process builder&apos;s command to a string
                  list containing the same strings as the {@code command}array, in the same order.  It is not checked whether{@code command} corresponds to a valid operating system
                  command.                
                <param>
                    command a string array containing the program and its arguments                    
                </param>
            </javadoc>
            <method name="ProcessBuilder" type="constructor" line="216">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="222">
                Sets this process builder&apos;s operating system program and
                  arguments.  This method does &lt;i&gt;not&lt;/i&gt; make a copy of the{@code command} list.  Subsequent updates to the list will
                  be reflected in the state of the process builder.  It is not
                  checked whether {@code command} corresponds to a valid
                  operating system command.                
                <param>
                    command the list containing the program and its arguments                    
                </param>
                <return>
                    this process builder                    
                </return>
                <throws>
                    NullPointerException if the argument is null                    
                </throws>
            </javadoc>
            <method name="command" type="ProcessBuilder" line="235">
                <params>
                    <param name="command" type="List<String>"/>
                </params>
            </method>
            <javadoc line="242">
                Sets this process builder&apos;s operating system program and
                  arguments.  This is a convenience method that sets the command
                  to a string list containing the same strings as the{@code command} array, in the same order.  It is not
                  checked whether {@code command} corresponds to a valid
                  operating system command.                
                <param>
                    command a string array containing the program and its arguments                    
                </param>
                <return>
                    this process builder                    
                </return>
            </javadoc>
            <method name="command" type="ProcessBuilder" line="253">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="260">
                Returns this process builder&apos;s operating system program and
                  arguments.  The returned list is &lt;i&gt;not&lt;/i&gt; a copy.  Subsequent
                  updates to the list will be reflected in the state of this
                  process builder.                
                <return>
                    this process builder's program and its arguments                    
                </return>
            </javadoc>
            <method name="command" type="List<String>" line="268"/>
            <javadoc line="272">
                Returns a string map view of this process builder&apos;s environment.
                  Whenever a process builder is created, the environment is
                  initialized to a copy of the current process environment (see{@link System#getenv()}).  Subprocesses subsequently started by
                  this object&apos;s {@link #start()} method will use this map as
                  their environment.
                  &lt;p&gt;The returned object may be modified using ordinary {@link java.util.Map Map} operations.  These modifications will be
                  visible to subprocesses started via the {@link #start()}method.  Two {@code ProcessBuilder} instances always
                  contain independent process environments, so changes to the
                  returned map will never be reflected in any other{@code ProcessBuilder} instance or the values returned by{@link System#getenv System.getenv}.
                  &lt;p&gt;If the system does not support environment variables, an
                  empty map is returned.
                  &lt;p&gt;The returned map does not permit null keys or values.
                  Attempting to insert or query the presence of a null key or
                  value will throw a {@link NullPointerException}.
                  Attempting to query the presence of a key or value which is not
                  of type {@link String} will throw a {@link ClassCastException}.
                  &lt;p&gt;The behavior of the returned map is system-dependent.  A
                  system may not allow modifications to environment variables or
                  may forbid certain variable names or values.  For this reason,
                  attempts to modify the map may fail with{@link UnsupportedOperationException} or{@link IllegalArgumentException}if the modification is not permitted by the operating system.
                  &lt;p&gt;Since the external format of environment variable names and
                  values is system-dependent, there may not be a one-to-one
                  mapping between them and Java&apos;s Unicode strings.  Nevertheless,
                  the map is implemented in such a way that environment variables
                  which are not modified by Java code will have an unmodified
                  native representation in the subprocess.
                  &lt;p&gt;The returned map and its collection views may not obey the
                  general contract of the {@link Object#equals} and{@link Object#hashCode} methods.
                  &lt;p&gt;The returned map is typically case-sensitive on all platforms.
                  &lt;p&gt;If a security manager exists, its{@link SecurityManager#checkPermission checkPermission} method
                  is called with a{@link RuntimePermission}{@code (&quot;getenv.&quot;)} permission.
                  This may result in a {@link SecurityException} being thrown.
                  &lt;p&gt;When passing information to a Java subprocess,
                  &lt;a href=System.html#EnvironmentVSSystemProperties&gt;system properties&lt;/a&gt;
                  are generally preferred over environment variables.                
                <return>
                    this process builder's environment                    
                </return>
                <throws>
                    SecurityExceptionif a security manager exists and its{@link SecurityManager#checkPermission checkPermission}method doesn't allow access to the process environment                    
                </throws>
                <see>
                    Runtime#exec(String[],String[],java.io.File)                    
                </see>
                <see>
                    System#getenv()                    
                </see>
            </javadoc>
            <method name="environment" type="Map<String,String>" line="340">
                <declaration name="security" type="SecurityManager" line="341"/>
            </method>
            <method name="environment" type="ProcessBuilder" line="354">
                <params>
                    <param name="envp" type="String[]"/>
                </params>
                <comment line="362">
                    Before 1.5, we blindly passed invalid envstrings
                     to the child process.
                     We would like to throw an exception, but do not,
                     for compatibility with old broken code.                    
                </comment>
                <comment line="367">
                    Silently discard any trailing junk.                    
                </comment>
                <comment line="373">
                    Silently ignore envstrings lacking the required `=&apos;.                    
                </comment>
                <scope line="356">
                    <scope line="360">
                        <declaration name="eqlsign" type="int" line="370"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="381">
                Returns this process builder&apos;s working directory.
                  Subprocesses subsequently started by this object&apos;s {@link #start()} method will use this as their working directory.
                  The returned value may be {@code null} -- this means to use
                  the working directory of the current Java process, usually the
                  directory named by the system property {@code user.dir},
                  as the working directory of the child process.                
                <return>
                    this process builder's working directory                    
                </return>
            </javadoc>
            <method name="directory" type="File" line="393"/>
            <javadoc line="397">
                Sets this process builder&apos;s working directory.
                  Subprocesses subsequently started by this object&apos;s {@link #start()} method will use this as their working directory.
                  The argument may be {@code null} -- this means to use the
                  working directory of the current Java process, usually the
                  directory named by the system property {@code user.dir},
                  as the working directory of the child process.                
                <param>
                    directory the new working directory                    
                </param>
                <return>
                    this process builder                    
                </return>
            </javadoc>
            <method name="directory" type="ProcessBuilder" line="410">
                <params>
                    <param name="directory" type="File"/>
                </params>
            </method>
            <class name="NullInputStream" line="417">
                <extends class="InputStream"/>
                <javadoc line="417">
                    Implements a &lt;a href=&quot;#redirect-output&quot;&gt;null input stream&lt;/a&gt;.                    
                </javadoc>
                <declaration name="INSTANCE" type="NullInputStream" line="421"/>
                <method name="NullInputStream" type="constructor" line="422"/>
                <method name="read" type="int" line="423"/>
                <method name="available" type="int" line="424"/>
            </class>
            <class name="NullOutputStream" line="427">
                <extends class="OutputStream"/>
                <javadoc line="427">
                    Implements a &lt;a href=&quot;#redirect-input&quot;&gt;null output stream&lt;/a&gt;.                    
                </javadoc>
                <declaration name="INSTANCE" type="NullOutputStream" line="431"/>
                <method name="NullOutputStream" type="constructor" line="432"/>
                <method name="write" type="void" line="433">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </class>
            <class name="Redirect" line="438">
                <javadoc line="438">
                    Represents a source of subprocess input or a destination of
                      subprocess output.
                      Each {@code Redirect} instance is one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;the special value {@link #PIPE Redirect.PIPE}&lt;li&gt;the special value {@link #INHERIT Redirect.INHERIT}&lt;li&gt;a redirection to read from a file, created by an invocation of{@link Redirect#from Redirect.from(File)}&lt;li&gt;a redirection to write to a file,  created by an invocation of{@link Redirect#to Redirect.to(File)}&lt;li&gt;a redirection to append to a file, created by an invocation of{@link Redirect#appendTo Redirect.appendTo(File)}&lt;/ul&gt;
                      &lt;p&gt;Each of the above categories has an associated unique{@link Type Type}.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <javadoc line="461">
                    The type of a {@link Redirect}.                    
                </javadoc>
                <javadoc line="465">
                    The type of {@link Redirect#PIPE Redirect.PIPE}.                    
                </javadoc>
                <javadoc line="470">
                    The type of {@link Redirect#INHERIT Redirect.INHERIT}.                    
                </javadoc>
                <javadoc line="475">
                    The type of redirects returned from{@link Redirect#from Redirect.from(File)}.                    
                </javadoc>
                <javadoc line="481">
                    The type of redirects returned from{@link Redirect#to Redirect.to(File)}.                    
                </javadoc>
                <javadoc line="487">
                    The type of redirects returned from{@link Redirect#appendTo Redirect.appendTo(File)}.                    
                </javadoc>
                <method name="type" type="Type" line="494"/>
                <javadoc line="494">
                    Returns the type of this {@code Redirect}.                    
                    <return>
                        the type of this {@code Redirect}                        
                    </return>
                </javadoc>
                <declaration name="PIPE" type="Redirect" line="500"/>
                <javadoc line="500">
                    Indicates that subprocess I/O will be connected to the
                      current Java process over a pipe.
                      This is the default handling of subprocess standard I/O.
                      &lt;p&gt;It will always be true that
                      &lt;pre&gt; {@codeRedirect.PIPE.file() == null &amp;&amp;
                      Redirect.PIPE.type() == Redirect.Type.PIPE}&lt;/pre&gt;                    
                </javadoc>
                <anonymous_class line="512">
                    <method name="type" type="Type" line="513"/>
                    <method name="toString" type="String" line="514"/>
                </anonymous_class>
                <declaration name="INHERIT" type="Redirect" line="516"/>
                <javadoc line="516">
                    Indicates that subprocess I/O source or destination will be the
                      same as those of the current process.  This is the normal
                      behavior of most operating system command interpreters (shells).
                      &lt;p&gt;It will always be true that
                      &lt;pre&gt; {@codeRedirect.INHERIT.file() == null &amp;&amp;
                      Redirect.INHERIT.type() == Redirect.Type.INHERIT}&lt;/pre&gt;                    
                </javadoc>
                <anonymous_class line="527">
                    <method name="type" type="Type" line="528"/>
                    <method name="toString" type="String" line="529"/>
                </anonymous_class>
                <javadoc line="531">
                    Returns the {@link File} source or destination associated
                      with this redirect, or {@code null} if there is no such file.                    
                    <return>
                        the file associated with this redirect,
                          or {@code null} if there is no such file                        
                    </return>
                </javadoc>
                <method name="file" type="File" line="538"/>
                <javadoc line="540">
                    When redirected to a destination file, indicates if the output
                      is to be written to the end of the file.                    
                </javadoc>
                <method name="append" type="boolean" line="544"/>
                <javadoc line="548">
                    Returns a redirect to read from the specified file.
                      &lt;p&gt;It will always be true that
                      &lt;pre&gt; {@codeRedirect.from(file).file() == file &amp;&amp;
                      Redirect.from(file).type() == Redirect.Type.READ}&lt;/pre&gt;                    
                    <throws>
                        NullPointerException if the specified file is null                        
                    </throws>
                    <return>
                        a redirect to read from the specified file                        
                    </return>
                </javadoc>
                <method name="from" type="Redirect" line="560">
                    <params>
                        <param name="file" type="File"/>
                    </params>
                    <anonymous_class line="563">
                        <method name="type" type="Type" line="564"/>
                        <method name="file" type="File" line="565"/>
                        <method name="toString" type="String" line="566"/>
                    </anonymous_class>
                </method>
                <javadoc line="572">
                    Returns a redirect to write to the specified file.
                      If the specified file exists when the subprocess is started,
                      its previous contents will be discarded.
                      &lt;p&gt;It will always be true that
                      &lt;pre&gt; {@codeRedirect.to(file).file() == file &amp;&amp;
                      Redirect.to(file).type() == Redirect.Type.WRITE}&lt;/pre&gt;                    
                    <throws>
                        NullPointerException if the specified file is null                        
                    </throws>
                    <return>
                        a redirect to write to the specified file                        
                    </return>
                </javadoc>
                <method name="to" type="Redirect" line="586">
                    <params>
                        <param name="file" type="File"/>
                    </params>
                    <anonymous_class line="589">
                        <method name="type" type="Type" line="590"/>
                        <method name="file" type="File" line="591"/>
                        <method name="toString" type="String" line="592"/>
                        <method name="append" type="boolean" line="595"/>
                    </anonymous_class>
                </method>
                <javadoc line="599">
                    Returns a redirect to append to the specified file.
                      Each write operation first advances the position to the
                      end of the file and then writes the requested data.
                      Whether the advancement of the position and the writing
                      of the data are done in a single atomic operation is
                      system-dependent and therefore unspecified.
                      &lt;p&gt;It will always be true that
                      &lt;pre&gt; {@codeRedirect.appendTo(file).file() == file &amp;&amp;
                      Redirect.appendTo(file).type() == Redirect.Type.APPEND}&lt;/pre&gt;                    
                    <throws>
                        NullPointerException if the specified file is null                        
                    </throws>
                    <return>
                        a redirect to append to the specified file                        
                    </return>
                </javadoc>
                <method name="appendTo" type="Redirect" line="616">
                    <params>
                        <param name="file" type="File"/>
                    </params>
                    <anonymous_class line="619">
                        <method name="type" type="Type" line="620"/>
                        <method name="file" type="File" line="621"/>
                        <method name="toString" type="String" line="622"/>
                        <method name="append" type="boolean" line="625"/>
                    </anonymous_class>
                </method>
                <javadoc line="629">
                    Compares the specified object with this {@code Redirect} for
                      equality.  Returns {@code true} if and only if the two
                      objects are identical or both objects are {@code Redirect}instances of the same type associated with non-null equal{@code File} instances.                    
                </javadoc>
                <method name="equals" type="boolean" line="636">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="r" type="Redirect" line="641"/>
                </method>
                <javadoc line="648">
                    Returns a hash code value for this {@code Redirect}.                    
                    <return>
                        a hash code value for this {@code Redirect}                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="652">
                    <declaration name="file" type="File" line="653"/>
                </method>
                <javadoc line="660">
                    No public constructors.  Clients must use predefined
                      static {@code Redirect} instances or factory methods.                    
                </javadoc>
                <method name="Redirect" type="constructor" line="664"/>
            </class>
            <method name="redirects" type="Redirect[]" line="667"/>
            <javadoc line="675">
                Sets this process builder&apos;s standard input source.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method obtain their standard input from this source.
                  &lt;p&gt;If the source is {@link Redirect#PIPE Redirect.PIPE}(the initial value), then the standard input of a
                  subprocess can be written to using the output stream
                  returned by {@link Process#getOutputStream()}.
                  If the source is set to any other value, then{@link Process#getOutputStream()} will return a
                  &lt;a href=&quot;#redirect-input&quot;&gt;null output stream&lt;/a&gt;.                
                <param>
                    source the new standard input source                    
                </param>
                <return>
                    this process builder                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the redirect does not correspond to a valid source
                      of data, that is, has type{@link Redirect.Type#WRITE WRITE} or{@link Redirect.Type#APPEND APPEND}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectInput" type="ProcessBuilder" line="698">
                <params>
                    <param name="source" type="Redirect"/>
                </params>
            </method>
            <javadoc line="707">
                Sets this process builder&apos;s standard output destination.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method send their standard output to this destination.
                  &lt;p&gt;If the destination is {@link Redirect#PIPE Redirect.PIPE}(the initial value), then the standard output of a subprocess
                  can be read using the input stream returned by {@link Process#getInputStream()}.
                  If the destination is set to any other value, then{@link Process#getInputStream()} will return a
                  &lt;a href=&quot;#redirect-output&quot;&gt;null input stream&lt;/a&gt;.                
                <param>
                    destination the new standard output destination                    
                </param>
                <return>
                    this process builder                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the redirect does not correspond to a valid
                      destination of data, that is, has type{@link Redirect.Type#READ READ}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectOutput" type="ProcessBuilder" line="729">
                <params>
                    <param name="destination" type="Redirect"/>
                </params>
            </method>
            <javadoc line="737">
                Sets this process builder&apos;s standard error destination.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method send their standard error to this destination.
                  &lt;p&gt;If the destination is {@link Redirect#PIPE Redirect.PIPE}(the initial value), then the error output of a subprocess
                  can be read using the input stream returned by {@link Process#getErrorStream()}.
                  If the destination is set to any other value, then{@link Process#getErrorStream()} will return a
                  &lt;a href=&quot;#redirect-output&quot;&gt;null input stream&lt;/a&gt;.
                  &lt;p&gt;If the {@link #redirectErrorStream redirectErrorStream}attribute has been set {@code true}, then the redirection set
                  by this method has no effect.                
                <param>
                    destination the new standard error destination                    
                </param>
                <return>
                    this process builder                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the redirect does not correspond to a valid
                      destination of data, that is, has type{@link Redirect.Type#READ READ}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectError" type="ProcessBuilder" line="763">
                <params>
                    <param name="destination" type="Redirect"/>
                </params>
            </method>
            <javadoc line="771">
                Sets this process builder&apos;s standard input source to a file.
                  &lt;p&gt;This is a convenience method.  An invocation of the form{@code redirectInput(file)}behaves in exactly the same way as the invocation{@link #redirectInput(Redirect) redirectInput}{@code (Redirect.from(file))}.                
                <param>
                    file the new standard input source                    
                </param>
                <return>
                    this process builder                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectInput" type="ProcessBuilder" line="784">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="788">
                Sets this process builder&apos;s standard output destination to a file.
                  &lt;p&gt;This is a convenience method.  An invocation of the form{@code redirectOutput(file)}behaves in exactly the same way as the invocation{@link #redirectOutput(Redirect) redirectOutput}{@code (Redirect.to(file))}.                
                <param>
                    file the new standard output destination                    
                </param>
                <return>
                    this process builder                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectOutput" type="ProcessBuilder" line="801">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="805">
                Sets this process builder&apos;s standard error destination to a file.
                  &lt;p&gt;This is a convenience method.  An invocation of the form{@code redirectError(file)}behaves in exactly the same way as the invocation{@link #redirectError(Redirect) redirectError}{@code (Redirect.to(file))}.                
                <param>
                    file the new standard error destination                    
                </param>
                <return>
                    this process builder                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectError" type="ProcessBuilder" line="818">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="822">
                Returns this process builder&apos;s standard input source.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method obtain their standard input from this source.
                  The initial value is {@link Redirect#PIPE Redirect.PIPE}.                
                <return>
                    this process builder's standard input source                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectInput" type="Redirect" line="832"/>
            <javadoc line="836">
                Returns this process builder&apos;s standard output destination.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method redirect their standard output to this destination.
                  The initial value is {@link Redirect#PIPE Redirect.PIPE}.                
                <return>
                    this process builder's standard output destination                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectOutput" type="Redirect" line="846"/>
            <javadoc line="850">
                Returns this process builder&apos;s standard error destination.
                  Subprocesses subsequently started by this object&apos;s {@link #start()}method redirect their standard error to this destination.
                  The initial value is {@link Redirect#PIPE Redirect.PIPE}.                
                <return>
                    this process builder's standard error destination                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="redirectError" type="Redirect" line="860"/>
            <javadoc line="864">
                Sets the source and destination for subprocess standard I/O
                  to be the same as those of the current Java process.
                  &lt;p&gt;This is a convenience method.  An invocation of the form
                  &lt;pre&gt; {@codepb.inheritIO()}&lt;/pre&gt;
                  behaves in exactly the same way as the invocation
                  &lt;pre&gt; {@codepb.redirectInput(Redirect.INHERIT)
                  .redirectOutput(Redirect.INHERIT)
                  .redirectError(Redirect.INHERIT)}&lt;/pre&gt;
                  This gives behavior equivalent to most operating system
                  command interpreters, or the standard C library function{@code system()}.                
                <return>
                    this process builder                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="inheritIO" type="ProcessBuilder" line="886"/>
            <javadoc line="891">
                Tells whether this process builder merges standard error and
                  standard output.
                  &lt;p&gt;If this property is {@code true}, then any error output
                  generated by subprocesses subsequently started by this object&apos;s{@link #start()} method will be merged with the standard
                  output, so that both can be read using the{@link Process#getInputStream()} method.  This makes it easier
                  to correlate error messages with the corresponding output.
                  The initial value is {@code false}.                
                <return>
                    this process builder's {@code redirectErrorStream} property                    
                </return>
            </javadoc>
            <method name="redirectErrorStream" type="boolean" line="905"/>
            <javadoc line="909">
                Sets this process builder&apos;s {@code redirectErrorStream} property.
                  &lt;p&gt;If this property is {@code true}, then any error output
                  generated by subprocesses subsequently started by this object&apos;s{@link #start()} method will be merged with the standard
                  output, so that both can be read using the{@link Process#getInputStream()} method.  This makes it easier
                  to correlate error messages with the corresponding output.
                  The initial value is {@code false}.                
                <param>
                    redirectErrorStream the new property value                    
                </param>
                <return>
                    this process builder                    
                </return>
            </javadoc>
            <method name="redirectErrorStream" type="ProcessBuilder" line="923">
                <params>
                    <param name="redirectErrorStream" type="boolean"/>
                </params>
            </method>
            <javadoc line="928">
                Starts a new process using the attributes of this process builder.
                  &lt;p&gt;The new process will
                  invoke the command and arguments given by {@link #command()},
                  in a working directory as given by {@link #directory()},
                  with a process environment as given by {@link #environment()}.
                  &lt;p&gt;This method checks that the command is a valid operating
                  system command.  Which commands are valid is system-dependent,
                  but at the very least the command must be a non-empty list of
                  non-null strings.
                  &lt;p&gt;A minimal set of system dependent environment variables may
                  be required to start a process on some operating systems.
                  As a result, the subprocess may inherit additional environment variable
                  settings beyond those in the process builder&apos;s {@link #environment()}.
                  &lt;p&gt;If there is a security manager, its{@link SecurityManager#checkExec checkExec}method is called with the first component of this object&apos;s{@code command} array as its argument. This may result in
                  a {@link SecurityException} being thrown.
                  &lt;p&gt;Starting an operating system process is highly system-dependent.
                  Among the many things that can go wrong are:
                  &lt;ul&gt;
                  &lt;li&gt;The operating system program file was not found.
                  &lt;li&gt;Access to the program file was denied.
                  &lt;li&gt;The working directory does not exist.
                  &lt;/ul&gt;
                  &lt;p&gt;In such cases an exception will be thrown.  The exact nature
                  of the exception is system-dependent, but it will always be a
                  subclass of {@link IOException}.
                  &lt;p&gt;Subsequent modifications to this process builder will not
                  affect the returned {@link Process}.                
                <return>
                    a new {@link Process} object for managing the subprocess                    
                </return>
                <throws>
                    NullPointerExceptionif an element of the command list is null                    
                </throws>
                <throws>
                    IndexOutOfBoundsExceptionif the command is an empty list (has size {@code 0})                    
                </throws>
                <throws>
                    SecurityExceptionif a security manager exists and
                      <ul>
                      <li>its{@link SecurityManager#checkExec checkExec}method doesn't allow creation of the subprocess, or
                      <li>the standard input to the subprocess was{@linkplain #redirectInput redirected from a file}and the security manager's{@link SecurityManager#checkRead checkRead} method
                      denies read access to the file, or
                      <li>the standard output or standard error of the
                      subprocess was{@linkplain #redirectOutput redirected to a file}and the security manager's{@link SecurityManager#checkWrite checkWrite} method
                      denies write access to the file
                      </ul>                    
                </throws>
                <throws>
                    IOException if an I/O error occurs                    
                </throws>
                <see>
                    Runtime#exec(String[],String[],java.io.File)                    
                </see>
            </javadoc>
            <method name="start" type="Process" line="1002">
                <comment line="1004">
                    Must convert to array first -- a malicious user-supplied
                     list might try to circumvent the security check.                    
                </comment>
                <comment line="1012">
                    Throws IndexOutOfBoundsException if command is empty                    
                </comment>
                <comment line="1028">
                    It&apos;s much easier for us to create a high-quality error
                     message than the low-level C code which found the problem.                    
                </comment>
                <declaration name="cmdarray" type="String[]" line="1005"/>
                <declaration name="prog" type="String" line="1012"/>
                <declaration name="security" type="SecurityManager" line="1014"/>
                <declaration name="dir" type="String" line="1018"/>
                <scope line="1020"/>
                <scope line="1026"/>
            </method>
        </class>
    </source>