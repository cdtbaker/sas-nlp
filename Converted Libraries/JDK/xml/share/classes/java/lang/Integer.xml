<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.util.Properties"/>
        <class name="Integer" line="3">
            <extends class="Number"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Integer"/>
                </type_params>
            </implements>
            <javadoc line="3">
                The {@code Integer} class wraps a value of the primitive type{@code int} in an object. An object of type {@code Integer}contains a single field whose type is {@code int}.
                  &lt;p&gt;In addition, this class provides several methods for converting
                  an {@code int} to a {@code String} and a {@code String} to an{@code int}, as well as other constants and methods useful when
                  dealing with an {@code int}.
                  &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;
                  methods (such as {@link #highestOneBit(int) highestOneBit} and{@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are
                  based on material from Henry S. Warren, Jr.&apos;s &lt;i&gt;Hacker&apos;s
                  Delight&lt;/i&gt;, (Addison Wesley, 2002).                
                <author>
                    Lee Boynton                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Josh Bloch                    
                </author>
                <author>
                    Joseph D. Darcy                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="MIN_VALUE" type="int" line="19"/>
            <javadoc line="19">
                A constant holding the minimum value an {@code int} can
                  have, -2&lt;sup&gt;31&lt;/sup&gt;.                
            </javadoc>
            <declaration name="MAX_VALUE" type="int" line="24"/>
            <javadoc line="24">
                A constant holding the maximum value an {@code int} can
                  have, 2&lt;sup&gt;31&lt;/sup&gt;-1.                
            </javadoc>
            <declaration name="TYPE" type="Class&amp;lt;Integer&amp;gt;" line="29"/>
            <javadoc line="29">
                The {@code Class} instance representing the primitive type{@code int}.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="digits" type="char[]" line="34"/>
            <javadoc line="34">
                All possible chars for representing a number as a String                
            </javadoc>
            <javadoc line="38">
                Returns a string representation of the first argument in the
                  radix specified by the second argument.
                  &lt;p&gt;If the radix is smaller than {@code Character.MIN_RADIX}or larger than {@code Character.MAX_RADIX}, then the radix{@code 10} is used instead.
                  &lt;p&gt;If the first argument is negative, the first element of the
                  result is the ASCII minus character {@code &apos;-&apos;}(&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;). If the first argument is not
                  negative, no sign character appears in the result.
                  &lt;p&gt;The remaining characters of the result represent the magnitude
                  of the first argument. If the magnitude is zero, it is
                  represented by a single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the magnitude will not be the zero
                  character.  The following ASCII characters are used as digits:
                  &lt;blockquote&gt;{@code 0123456789abcdefghijklmnopqrstuvwxyz}&lt;/blockquote&gt;
                  These are &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u007A&apos;&lt;/code&gt;. If {@code radix} is
                  &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters
                  are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,
                  the digits for hexadecimal (radix 16) are{@code 0123456789abcdef}. If uppercase letters are
                  desired, the {@link java.lang.String#toUpperCase()} method may
                  be called on the result:
                  &lt;blockquote&gt;{@code Integer.toString(n, 16).toUpperCase()}&lt;/blockquote&gt;                
                <param>
                    i       an integer to be converted to a string.                    
                </param>
                <param>
                    radix   the radix to use in the string representation.                    
                </param>
                <return>
                    a string representation of the argument in the specified radix.                    
                </return>
                <see>
                    java.lang.Character#MAX_RADIX                    
                </see>
                <see>
                    java.lang.Character#MIN_RADIX                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="66">
                <params>
                    <param name="i" type="int"/>
                    <param name="radix" type="int"/>
                </params>
                <scope line="68"/>
                <declaration name="buf" type="char" line="71"/>
                <declaration name="negative" type="boolean" line="72"/>
                <declaration name="charPos" type="int" line="73"/>
                <scope line="74"/>
                <scope line="77"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Returns a string representation of the integer argument as an
                  unsigned integer in base&amp;nbsp;16.
                  &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
                  if the argument is negative; otherwise, it is equal to the
                  argument.  This value is converted to a string of ASCII digits
                  in hexadecimal (base&amp;nbsp;16) with no extra leading{@code 0}s. If the unsigned magnitude is zero, it is
                  represented by a single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The following characters are used as
                  hexadecimal digits:
                  &lt;blockquote&gt;{@code 0123456789abcdef}&lt;/blockquote&gt;
                  These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0066&apos;&lt;/code&gt;. If uppercase letters are
                  desired, the {@link java.lang.String#toUpperCase()} method may
                  be called on the result:
                  &lt;blockquote&gt;{@code Integer.toHexString(n).toUpperCase()}&lt;/blockquote&gt;                
                <param>
                    i   an integer to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned integer value
                      represented by the argument in hexadecimal (base&amp;nbsp;16).                    
                </return>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="toHexString" type="String" line="110">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="113">
                Returns a string representation of the integer argument as an
                  unsigned integer in base&amp;nbsp;8.
                  &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
                  if the argument is negative; otherwise, it is equal to the
                  argument.  This value is converted to a string of ASCII digits
                  in octal (base&amp;nbsp;8) with no extra leading {@code 0}s.
                  &lt;p&gt;If the unsigned magnitude is zero, it is represented by a
                  single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The following characters are used as octal
                  digits:
                  &lt;blockquote&gt;{@code 01234567}&lt;/blockquote&gt;
                  These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
                  &lt;code&gt;&apos;&amp;#92;u0037&apos;&lt;/code&gt;.                
                <param>
                    i   an integer to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned integer value
                      represented by the argument in octal (base&amp;nbsp;8).                    
                </return>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="toOctalString" type="String" line="133">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="136">
                Returns a string representation of the integer argument as an
                  unsigned integer in base&amp;nbsp;2.
                  &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
                  if the argument is negative; otherwise it is equal to the
                  argument.  This value is converted to a string of ASCII digits
                  in binary (base&amp;nbsp;2) with no extra leading {@code 0}s.
                  If the unsigned magnitude is zero, it is represented by a
                  single zero character {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
                  the representation of the unsigned magnitude will not be the
                  zero character. The characters {@code &apos;0&apos;}(&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;) and {@code &apos;1&apos;}(&lt;code&gt;&apos;&amp;#92;u0031&apos;&lt;/code&gt;) are used as binary digits.                
                <param>
                    i   an integer to be converted to a string.                    
                </param>
                <return>
                    the string representation of the unsigned integer value
                      represented by the argument in binary (base&amp;nbsp;2).                    
                </return>
                <since>
                    JDK1.0.2                    
                </since>
            </javadoc>
            <method name="toBinaryString" type="String" line="152">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Convert the integer to an unsigned number.                
            </javadoc>
            <method name="toUnsignedString" type="String" line="158">
                <params>
                    <param name="i" type="int"/>
                    <param name="shift" type="int"/>
                </params>
                <declaration name="buf" type="char[]" line="159"/>
                <declaration name="charPos" type="int" line="160"/>
                <declaration name="radix" type="int" line="161"/>
                <declaration name="mask" type="int" line="162"/>
                <scope line="163"/>
            </method>
            <declaration name="DigitTens" type="char[]" line="170"/>
            <declaration name="DigitOnes" type="char[]" line="171"/>
            <javadoc line="172">
                Returns a {@code String} object representing the
                  specified integer. The argument is converted to signed decimal
                  representation and returned as a string, exactly as if the
                  argument and radix 10 were given as arguments to the {@link #toString(int,int)} method.                
                <param>
                    i   an integer to be converted.                    
                </param>
                <return>
                    a string representation of the argument in base&amp;nbsp;10.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="180">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="size" type="int" line="182"/>
                <declaration name="buf" type="char[]" line="183"/>
            </method>
            <javadoc line="187">
                Places characters representing the integer i into the
                  character array buf. The characters are placed into
                  the buffer backwards starting with the least significant
                  digit at the specified index (exclusive), and working
                  backwards from there.
                  Will fail if i == Integer.MIN_VALUE                
            </javadoc>
            <method name="getChars" type="void" line="195">
                <params>
                    <param name="i" type="int"/>
                    <param name="index" type="int"/>
                    <param name="buf" type="char[]"/>
                </params>
                <declaration name="q" type="int" line="196"/>
                <declaration name="charPos" type="int" line="197"/>
                <declaration name="sign" type="char" line="198"/>
                <scope line="199"/>
                <scope line="203"/>
                <scope line="210"/>
                <scope line="217"/>
            </method>
            <declaration name="sizeTable" type="int[]" line="221"/>
            <method name="stringSize" type="int" line="222">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="225">
                Parses the string argument as a signed integer in the radix
                  specified by the second argument. The characters in the string
                  must all be digits of the specified radix (as determined by
                  whether {@link java.lang.Character#digit(char,int)} returns a
                  nonnegative value), except that the first character may be an
                  ASCII minus sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to
                  indicate a negative value or an ASCII plus sign {@code &apos;+&apos;}(&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to indicate a positive value. The
                  resulting integer value is returned.
                  &lt;p&gt;An exception of type {@code NumberFormatException} is
                  thrown if any of the following situations occurs:
                  &lt;ul&gt;
                  &lt;li&gt;The first argument is {@code null} or is a string of
                  length zero.
                  &lt;li&gt;The radix is either smaller than{@link java.lang.Character#MIN_RADIX} or
                  larger than {@link java.lang.Character#MAX_RADIX}.
                  &lt;li&gt;Any character of the string is not a digit of the specified
                  radix, except that the first character may be a minus sign{@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) or plus sign{@code &apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) provided that the
                  string is longer than length 1.
                  &lt;li&gt;The value represented by the string is not a value of type{@code int}.
                  &lt;/ul&gt;
                  &lt;p&gt;Examples:
                  &lt;blockquote&gt;&lt;pre&gt;
                  parseInt(&quot;0&quot;, 10) returns 0
                  parseInt(&quot;473&quot;, 10) returns 473
                  parseInt(&quot;+42&quot;, 10) returns 42
                  parseInt(&quot;-0&quot;, 10) returns 0
                  parseInt(&quot;-FF&quot;, 16) returns -255
                  parseInt(&quot;1100110&quot;, 2) returns 102
                  parseInt(&quot;2147483647&quot;, 10) returns 2147483647
                  parseInt(&quot;-2147483648&quot;, 10) returns -2147483648
                  parseInt(&quot;2147483648&quot;, 10) throws a NumberFormatException
                  parseInt(&quot;99&quot;, 8) throws a NumberFormatException
                  parseInt(&quot;Kona&quot;, 10) throws a NumberFormatException
                  parseInt(&quot;Kona&quot;, 27) returns 411787
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    s   the {@code String} containing the integer
                      representation to be parsed                    
                </param>
                <param>
                    radix   the radix to be used while parsing {@code s}.                    
                </param>
                <return>
                    the integer represented by the string argument in the
                      specified radix.                    
                </return>
                <exception>
                    NumberFormatException if the {@code String}does not contain a parsable {@code int}.                    
                </exception>
            </javadoc>
            <method name="parseInt" type="int" line="268">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
                <declaration name="result" type="int" line="278"/>
                <declaration name="negative" type="boolean" line="279"/>
                <declaration name="i" type="int" line="280"/>
                <declaration name="limit" type="int" line="281"/>
                <declaration name="multmin" type="int" line="282"/>
                <declaration name="digit" type="int" line="283"/>
                <scope line="284">
                    <declaration name="firstChar" type="char" line="285"/>
                    <scope line="286">
                        <scope line="287"/>
                    </scope>
                    <scope line="296">
                        <scope line="298"/>
                        <scope line="301"/>
                        <scope line="305"/>
                    </scope>
                </scope>
                <scope line="311"/>
            </method>
            <javadoc line="316">
                Parses the string argument as a signed decimal integer. The
                  characters in the string must all be decimal digits, except
                  that the first character may be an ASCII minus sign {@code &apos;-&apos;}(&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value or an
                  ASCII plus sign {@code &apos;+&apos;} (&lt;code&gt;&apos;&amp;#92;u002B&apos;&lt;/code&gt;) to
                  indicate a positive value. The resulting integer value is
                  returned, exactly as if the argument and the radix 10 were
                  given as arguments to the {@link #parseInt(java.lang.String,int)} method.                
                <param>
                    s    a {@code String} containing the {@code int}representation to be parsed                    
                </param>
                <return>
                    the integer value represented by the argument in decimal.                    
                </return>
                <exception>
                    NumberFormatException  if the string does not contain a
                      parsable integer.                    
                </exception>
            </javadoc>
            <method name="parseInt" type="int" line="329">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="332">
                Returns an {@code Integer} object holding the value
                  extracted from the specified {@code String} when parsed
                  with the radix given by the second argument. The first argument
                  is interpreted as representing a signed integer in the radix
                  specified by the second argument, exactly as if the arguments
                  were given to the {@link #parseInt(java.lang.String,int)}method. The result is an {@code Integer} object that
                  represents the integer value specified by the string.
                  &lt;p&gt;In other words, this method returns an {@code Integer}object equal to the value of:
                  &lt;blockquote&gt;{@code new Integer(Integer.parseInt(s, radix))}&lt;/blockquote&gt;                
                <param>
                    s   the string to be parsed.                    
                </param>
                <param>
                    radix the radix to be used in interpreting {@code s}                    
                </param>
                <return>
                    an {@code Integer} object holding the value
                      represented by the string argument in the specified
                      radix.                    
                </return>
                <exception>
                    NumberFormatException if the {@code String}does not contain a parsable {@code int}.                    
                </exception>
            </javadoc>
            <method name="valueOf" type="Integer" line="349">
                <params>
                    <param name="s" type="String"/>
                    <param name="radix" type="int"/>
                </params>
            </method>
            <javadoc line="352">
                Returns an {@code Integer} object holding the
                  value of the specified {@code String}. The argument is
                  interpreted as representing a signed decimal integer, exactly
                  as if the argument were given to the {@link #parseInt(java.lang.String)} method. The result is an{@code Integer} object that represents the integer value
                  specified by the string.
                  &lt;p&gt;In other words, this method returns an {@code Integer}object equal to the value of:
                  &lt;blockquote&gt;{@code new Integer(Integer.parseInt(s))}&lt;/blockquote&gt;                
                <param>
                    s   the string to be parsed.                    
                </param>
                <return>
                    an {@code Integer} object holding the value
                      represented by the string argument.                    
                </return>
                <exception>
                    NumberFormatException  if the string cannot be parsed
                      as an integer.                    
                </exception>
            </javadoc>
            <method name="valueOf" type="Integer" line="366">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <class name="IntegerCache" line="369">
                <javadoc line="369">
                    Cache to support the object identity semantics of autoboxing for values between
                      -128 and 127 (inclusive) as required by JLS.
                      The cache is initialized on first usage.  The size of the cache
                      may be controlled by the -XX:AutoBoxCacheMax=&lt;size&gt; option.
                      During VM initialization, java.lang.Integer.IntegerCache.high property
                      may be set and saved in the private system properties in the
                      sun.misc.VM class.                    
                </javadoc>
                <declaration name="low" type="int" line="379"/>
                <declaration name="high" type="int" line="380"/>
                <declaration name="cache" type="Integer" line="381"/>
                <scope line="382">
                    <declaration name="h" type="int" line="383"/>
                    <declaration name="integerCacheHighPropValue" type="String" line="384"/>
                    <scope line="385">
                        <declaration name="i" type="int" line="386"/>
                    </scope>
                    <declaration name="j" type="int" line="392"/>
                </scope>
                <method name="IntegerCache" type="constructor" line="395"/>
            </class>
            <javadoc line="398">
                Returns an {@code Integer} instance representing the specified{@code int} value.  If a new {@code Integer} instance is not
                  required, this method should generally be used in preference to
                  the constructor {@link #Integer(int)}, as this method is likely
                  to yield significantly better space and time performance by
                  caching frequently requested values.
                  This method will always cache values in the range -128 to 127,
                  inclusive, and may cache other values outside of this range.                
                <param>
                    i an {@code int} value.                    
                </param>
                <return>
                    an {@code Integer} instance representing {@code i}.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="valueOf" type="Integer" line="410">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <declaration name="value" type="int" line="415"/>
            <javadoc line="415">
                The value of the {@code Integer}.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="420">
                Constructs a newly allocated {@code Integer} object that
                  represents the specified {@code int} value.                
                <param>
                    value   the value to be represented by the{@code Integer} object.                    
                </param>
            </javadoc>
            <method name="Integer" type="constructor" line="425">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="428">
                Constructs a newly allocated {@code Integer} object that
                  represents the {@code int} value indicated by the{@code String} parameter. The string is converted to an{@code int} value in exactly the manner used by the{@code parseInt} method for radix 10.                
                <param>
                    s   the {@code String} to be converted to an{@code Integer}.                    
                </param>
                <exception>
                    NumberFormatException  if the {@code String} does not
                      contain a parsable integer.                    
                </exception>
                <see>
                    java.lang.Integer#parseInt(java.lang.String,int)                    
                </see>
            </javadoc>
            <method name="Integer" type="constructor" line="436">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="439">
                Returns the value of this {@code Integer} as a{@code byte}.                
            </javadoc>
            <method name="byteValue" type="byte" line="442"/>
            <javadoc line="445">
                Returns the value of this {@code Integer} as a{@code short}.                
            </javadoc>
            <method name="shortValue" type="short" line="448"/>
            <javadoc line="451">
                Returns the value of this {@code Integer} as an{@code int}.                
            </javadoc>
            <method name="intValue" type="int" line="454"/>
            <javadoc line="457">
                Returns the value of this {@code Integer} as a{@code long}.                
            </javadoc>
            <method name="longValue" type="long" line="460"/>
            <javadoc line="463">
                Returns the value of this {@code Integer} as a{@code float}.                
            </javadoc>
            <method name="floatValue" type="float" line="466"/>
            <javadoc line="469">
                Returns the value of this {@code Integer} as a{@code double}.                
            </javadoc>
            <method name="doubleValue" type="double" line="472"/>
            <javadoc line="475">
                Returns a {@code String} object representing this{@code Integer}&apos;s value. The value is converted to signed
                  decimal representation and returned as a string, exactly as if
                  the integer value were given as an argument to the {@link java.lang.Integer#toString(int)} method.                
                <return>
                    a string representation of the value of this object in
                      base&amp;nbsp;10.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="482"/>
            <javadoc line="485">
                Returns a hash code for this {@code Integer}.                
                <return>
                    a hash code value for this object, equal to the
                      primitive {@code int} value represented by this{@code Integer} object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="490"/>
            <javadoc line="493">
                Compares this object to the specified object.  The result is{@code true} if and only if the argument is not{@code null} and is an {@code Integer} object that
                  contains the same {@code int} value as this object.                
                <param>
                    obj   the object to compare with.                    
                </param>
                <return>
                    {@code true} if the objects are the same;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="499">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="500"/>
            </method>
            <javadoc line="505">
                Determines the integer value of the system property with the
                  specified name.
                  &lt;p&gt;The first argument is treated as the name of a system property.
                  System properties are accessible through the{@link java.lang.System#getProperty(java.lang.String)} method. The
                  string value of this property is then interpreted as an integer
                  value and an {@code Integer} object representing this value is
                  returned. Details of possible numeric formats can be found with
                  the definition of {@code getProperty}.
                  &lt;p&gt;If there is no property with the specified name, if the specified name
                  is empty or {@code null}, or if the property does not have
                  the correct numeric format, then {@code null} is returned.
                  &lt;p&gt;In other words, this method returns an {@code Integer}object equal to the value of:
                  &lt;blockquote&gt;{@code getInteger(nm, null)}&lt;/blockquote&gt;                
                <param>
                    nm   property name.                    
                </param>
                <return>
                    the {@code Integer} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getInteger" type="Integer" line="524">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="527">
                Determines the integer value of the system property with the
                  specified name.
                  &lt;p&gt;The first argument is treated as the name of a system property.
                  System properties are accessible through the {@link java.lang.System#getProperty(java.lang.String)} method. The
                  string value of this property is then interpreted as an integer
                  value and an {@code Integer} object representing this value is
                  returned. Details of possible numeric formats can be found with
                  the definition of {@code getProperty}.
                  &lt;p&gt;The second argument is the default value. An {@code Integer} object
                  that represents the value of the second argument is returned if there
                  is no property of the specified name, if the property does not have
                  the correct numeric format, or if the specified name is empty or{@code null}.
                  &lt;p&gt;In other words, this method returns an {@code Integer} object
                  equal to the value of:
                  &lt;blockquote&gt;{@code getInteger(nm, new Integer(val))}&lt;/blockquote&gt;
                  but in practice it may be implemented in a manner such as:
                  &lt;blockquote&gt;&lt;pre&gt;
                  Integer result = getInteger(nm, null);
                  return (result == null) ? new Integer(val) : result;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  to avoid the unnecessary allocation of an {@code Integer}object when the default value is not needed.                
                <param>
                    nm   property name.                    
                </param>
                <param>
                    val   default value.                    
                </param>
                <return>
                    the {@code Integer} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
            </javadoc>
            <method name="getInteger" type="Integer" line="555">
                <params>
                    <param name="nm" type="String"/>
                    <param name="val" type="int"/>
                </params>
                <declaration name="result" type="Integer" line="556"/>
            </method>
            <javadoc line="559">
                Returns the integer value of the system property with the
                  specified name.  The first argument is treated as the name of a
                  system property.  System properties are accessible through the{@link java.lang.System#getProperty(java.lang.String)} method.
                  The string value of this property is then interpreted as an
                  integer value, as per the {@code Integer.decode} method,
                  and an {@code Integer} object representing this value is
                  returned.
                  &lt;ul&gt;&lt;li&gt;If the property value begins with the two ASCII characters{@code 0x} or the ASCII character {@code #}, not
                  followed by a minus sign, then the rest of it is parsed as a
                  hexadecimal integer exactly as by the method{@link #valueOf(java.lang.String,int)} with radix 16.
                  &lt;li&gt;If the property value begins with the ASCII character{@code 0} followed by another character, it is parsed as an
                  octal integer exactly as by the method{@link #valueOf(java.lang.String,int)} with radix 8.
                  &lt;li&gt;Otherwise, the property value is parsed as a decimal integer
                  exactly as by the method {@link #valueOf(java.lang.String,int)}with radix 10.
                  &lt;/ul&gt;
                  &lt;p&gt;The second argument is the default value. The default value is
                  returned if there is no property of the specified name, if the
                  property does not have the correct numeric format, or if the
                  specified name is empty or {@code null}.                
                <param>
                    nm   property name.                    
                </param>
                <param>
                    val   default value.                    
                </param>
                <return>
                    the {@code Integer} value of the property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.System#getProperty(java.lang.String,java.lang.String)                    
                </see>
                <see>
                    java.lang.Integer#decode                    
                </see>
            </javadoc>
            <method name="getInteger" type="Integer" line="586">
                <params>
                    <param name="nm" type="String"/>
                    <param name="val" type="Integer"/>
                </params>
                <declaration name="v" type="String" line="587"/>
                <scope line="588"/>
                <scope line="591"/>
                <scope line="593"/>
                <scope line="595">
                    <scope line="596"/>
                    <scope line="599"/>
                </scope>
            </method>
            <javadoc line="604">
                Decodes a {@code String} into an {@code Integer}.
                  Accepts decimal, hexadecimal, and octal numbers given
                  by the following grammar:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
                  &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
                  &lt;dd&gt;{@code -}&lt;dd&gt;{@code +}&lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
                  are as defined in section 3.10.1 of
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;,
                  except that underscores are not accepted between digits.
                  &lt;p&gt;The sequence of characters following an optional
                  sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
                  &quot;{@code #}&quot;, or leading zero) is parsed as by the {@codeInteger.parseInt} method with the indicated radix (10, 16, or
                  8).  This sequence of characters must represent a positive
                  value or a {@link NumberFormatException} will be thrown.  The
                  result is negated if first character of the specified {@codeString} is the minus sign.  No whitespace characters are
                  permitted in the {@code String}.                
                <param>
                    nm the {@code String} to decode.                    
                </param>
                <return>
                    an {@code Integer} object holding the {@code int}value represented by {@code nm}                    
                </return>
                <exception>
                    NumberFormatException  if the {@code String} does not
                      contain a parsable integer.                    
                </exception>
                <see>
                    java.lang.Integer#parseInt(java.lang.String,int)                    
                </see>
            </javadoc>
            <method name="decode" type="Integer" line="637">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="radix" type="int" line="638"/>
                <declaration name="index" type="int" line="639"/>
                <declaration name="negative" type="boolean" line="640"/>
                <declaration name="result" type="Integer" line="641"/>
                <declaration name="firstChar" type="char" line="643"/>
                <scope line="644"/>
                <scope line="649"/>
                <scope line="653"/>
                <scope line="657"/>
                <scope line="662"/>
                <scope line="666">
                    <declaration name="constant" type="String" line="667"/>
                </scope>
            </method>
            <javadoc line="672">
                Compares two {@code Integer} objects numerically.                
                <param>
                    anotherInteger   the {@code Integer} to be compared.                    
                </param>
                <return>
                    the value {@code 0} if this {@code Integer} is
                      equal to the argument {@code Integer}; a value less than{@code 0} if this {@code Integer} is numerically less
                      than the argument {@code Integer}; and a value greater
                      than {@code 0} if this {@code Integer} is numerically
                      greater than the argument {@code Integer} (signed
                      comparison).                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="683">
                <params>
                    <param name="anotherInteger" type="Integer"/>
                </params>
            </method>
            <javadoc line="686">
                Compares two {@code int} values numerically.
                  The value returned is identical to what would be returned by:
                  &lt;pre&gt;
                  Integer.valueOf(x).compareTo(Integer.valueOf(y))
                  &lt;/pre&gt;                
                <param>
                    x the first {@code int} to compare                    
                </param>
                <param>
                    y the second {@code int} to compare                    
                </param>
                <return>
                    the value {@code 0} if {@code x == y};
                      a value less than {@code 0} if {@code x &lt; y}; and
                      a value greater than {@code 0} if {@code x &gt; y}                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="compare" type="int" line="699">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <declaration name="SIZE" type="int" line="702"/>
            <javadoc line="702">
                The number of bits used to represent an {@code int} value in two&apos;s
                  complement binary form.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="708">
                Returns an {@code int} value with at most a single one-bit, in the
                  position of the highest-order (&quot;leftmost&quot;) one-bit in the specified{@code int} value.  Returns zero if the specified value has no
                  one-bits in its two&apos;s complement binary representation, that is, if it
                  is equal to zero.                
                <return>
                    an {@code int} value with a single one-bit, in the position
                      of the highest-order one-bit in the specified value, or zero if
                      the specified value is itself equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="highestOneBit" type="int" line="718">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="726">
                Returns an {@code int} value with at most a single one-bit, in the
                  position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified{@code int} value.  Returns zero if the specified value has no
                  one-bits in its two&apos;s complement binary representation, that is, if it
                  is equal to zero.                
                <return>
                    an {@code int} value with a single one-bit, in the position
                      of the lowest-order one-bit in the specified value, or zero if
                      the specified value is itself equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="lowestOneBit" type="int" line="736">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="739">
                Returns the number of zero bits preceding the highest-order
                  (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
                  of the specified {@code int} value.  Returns 32 if the
                  specified value has no one-bits in its two&apos;s complement representation,
                  in other words if it is equal to zero.
                  &lt;p&gt;Note that this method is closely related to the logarithm base 2.
                  For all positive {@code int} values x:
                  &lt;ul&gt;
                  &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 31 - numberOfLeadingZeros(x)}&lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 32 - numberOfLeadingZeros(x - 1)}&lt;/ul&gt;                
                <return>
                    the number of zero bits preceding the highest-order
                      (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
                      of the specified {@code int} value, or 32 if the value
                      is equal to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="numberOfLeadingZeros" type="int" line="755">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="n" type="int" line="757"/>
                <scope line="758"/>
                <scope line="762"/>
                <scope line="766"/>
                <scope line="770"/>
            </method>
            <javadoc line="777">
                Returns the number of zero bits following the lowest-order (&quot;rightmost&quot;)
                  one-bit in the two&apos;s complement binary representation of the specified{@code int} value.  Returns 32 if the specified value has no
                  one-bits in its two&apos;s complement representation, in other words if it is
                  equal to zero.                
                <return>
                    the number of zero bits following the lowest-order (&quot;rightmost&quot;)
                      one-bit in the two&apos;s complement binary representation of the
                      specified {@code int} value, or 32 if the value is equal
                      to zero.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="numberOfTrailingZeros" type="int" line="788">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="y" type="int" line="789"/>
                <declaration name="n" type="int" line="791"/>
                <scope line="793"/>
                <scope line="798"/>
                <scope line="803"/>
                <scope line="808"/>
            </method>
            <javadoc line="814">
                Returns the number of one-bits in the two&apos;s complement binary
                  representation of the specified {@code int} value.  This function is
                  sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.                
                <return>
                    the number of one-bits in the two&apos;s complement binary
                      representation of the specified {@code int} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="bitCount" type="int" line="822">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="830">
                Returns the value obtained by rotating the two&apos;s complement binary
                  representation of the specified {@code int} value left by the
                  specified number of bits.  (Bits shifted out of the left hand, or
                  high-order, side reenter on the right, or low-order.)
                  &lt;p&gt;Note that left rotation with a negative distance is equivalent to
                  right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,
                  distance)}.  Note also that rotation by any multiple of 32 is a
                  no-op, so all but the last five bits of the rotation distance can be
                  ignored, even if the distance is negative: {@code rotateLeft(val,
                  distance) == rotateLeft(val, distance &amp; 0x1F)}.                
                <return>
                    the value obtained by rotating the two&apos;s complement binary
                      representation of the specified {@code int} value left by the
                      specified number of bits.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="rotateLeft" type="int" line="846">
                <params>
                    <param name="i" type="int"/>
                    <param name="distance" type="int"/>
                </params>
            </method>
            <javadoc line="849">
                Returns the value obtained by rotating the two&apos;s complement binary
                  representation of the specified {@code int} value right by the
                  specified number of bits.  (Bits shifted out of the right hand, or
                  low-order, side reenter on the left, or high-order.)
                  &lt;p&gt;Note that right rotation with a negative distance is equivalent to
                  left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,
                  distance)}.  Note also that rotation by any multiple of 32 is a
                  no-op, so all but the last five bits of the rotation distance can be
                  ignored, even if the distance is negative: {@code rotateRight(val,
                  distance) == rotateRight(val, distance &amp; 0x1F)}.                
                <return>
                    the value obtained by rotating the two&apos;s complement binary
                      representation of the specified {@code int} value right by the
                      specified number of bits.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="rotateRight" type="int" line="865">
                <params>
                    <param name="i" type="int"/>
                    <param name="distance" type="int"/>
                </params>
            </method>
            <javadoc line="868">
                Returns the value obtained by reversing the order of the bits in the
                  two&apos;s complement binary representation of the specified {@code int}value.                
                <return>
                    the value obtained by reversing order of the bits in the
                      specified {@code int} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverse" type="int" line="875">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="882">
                Returns the signum function of the specified {@code int} value.  (The
                  return value is -1 if the specified value is negative; 0 if the
                  specified value is zero; and 1 if the specified value is positive.)                
                <return>
                    the signum function of the specified {@code int} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="signum" type="int" line="889">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="892">
                Returns the value obtained by reversing the order of the bytes in the
                  two&apos;s complement representation of the specified {@code int} value.                
                <return>
                    the value obtained by reversing the bytes in the specified{@code int} value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="reverseBytes" type="int" line="898">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="901"/>
            <javadoc line="901">
                use serialVersionUID from JDK 1.0.2 for interoperability                
            </javadoc>
        </class>
    </source>