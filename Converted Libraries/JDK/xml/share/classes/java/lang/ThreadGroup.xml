<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <import package="java.io.PrintStream"/>
        <import package="java.util.Arrays"/>
        <import package="sun.misc.VM"/>
        <class name="ThreadGroup" line="5">
            <implements interface="Thread.UncaughtExceptionHandler"/>
            <javadoc line="5">
                A thread group represents a set of threads. In addition, a thread
                  group can also include other thread groups. The thread groups form
                  a tree in which every thread group except the initial thread group
                  has a parent.
                  &lt;p&gt;
                  A thread is allowed to access information about its own thread
                  group, but not to access information about its thread group&apos;s
                  parent thread group or any other thread groups.                
                <author>
                    unascribed                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="parent" type="ThreadGroup" line="18"/>
            <declaration name="name" type="String" line="19"/>
            <declaration name="maxPriority" type="int" line="20"/>
            <declaration name="destroyed" type="boolean" line="21"/>
            <declaration name="daemon" type="boolean" line="22"/>
            <declaration name="vmAllowSuspension" type="boolean" line="23"/>
            <declaration name="nUnstartedThreads" type="int" line="24"/>
            <declaration name="nthreads" type="int" line="25"/>
            <declaration name="threads" type="Thread" line="26"/>
            <declaration name="ngroups" type="int" line="27"/>
            <declaration name="groups" type="ThreadGroup" line="28"/>
            <javadoc line="29">
                Creates an empty Thread group that is not in any Thread group.
                  This method is used to create the system Thread group.                
            </javadoc>
            <method name="ThreadGroup" type="constructor" line="33"/>
            <javadoc line="38">
                Constructs a new thread group. The parent of this new group is
                  the thread group of the currently running thread.
                  &lt;p&gt;
                  The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
                  called with no arguments; this may result in a security exception.                
                <param>
                    name   the name of the new thread group.                    
                </param>
                <exception>
                    SecurityException  if the current thread cannot create a
                      thread in the specified thread group.                    
                </exception>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="ThreadGroup" type="constructor" line="50">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="53">
                Creates a new thread group. The parent of this new group is the
                  specified thread group.
                  &lt;p&gt;
                  The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
                  called with no arguments; this may result in a security exception.                
                <param>
                    parent   the parent thread group.                    
                </param>
                <param>
                    name     the name of the new thread group.                    
                </param>
                <exception>
                    NullPointerException  if the thread group argument is
                      <code>null</code>.                    
                </exception>
                <exception>
                    SecurityException  if the current thread cannot create a
                      thread in the specified thread group.                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="ThreadGroup" type="constructor" line="69">
                <params>
                    <param name="parent" type="ThreadGroup"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="ThreadGroup" type="constructor" line="72">
                <params>
                    <param name="unused" type="Void"/>
                    <param name="parent" type="ThreadGroup"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="checkParentAccess" type="Void" line="80">
                <params>
                    <param name="parent" type="ThreadGroup"/>
                </params>
            </method>
            <javadoc line="84">
                Returns the name of this thread group.                
                <return>
                    the name of this thread group.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="89"/>
            <javadoc line="92">
                Returns the parent of this thread group.
                  &lt;p&gt;
                  First, if the parent is not &lt;code&gt;null&lt;/code&gt;, the
                  &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
                  called with no arguments; this may result in a security exception.                
                <return>
                    the parent of this thread group. The top-level thread group
                      is the only thread group whose parent is <code>null</code>.                    
                </return>
                <exception>
                    SecurityException  if the current thread cannot modify
                      this thread group.                    
                </exception>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.RuntimePermission                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getParent" type="ThreadGroup" line="107"/>
            <javadoc line="111">
                Returns the maximum priority of this thread group. Threads that are
                  part of this group cannot have a higher priority than the maximum
                  priority.                
                <return>
                    the maximum priority that a thread in this thread group
                      can have.                    
                </return>
                <see>
                    #setMaxPriority                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getMaxPriority" type="int" line="120"/>
            <javadoc line="123">
                Tests if this thread group is a daemon thread group. A
                  daemon thread group is automatically destroyed when its last
                  thread is stopped or its last thread group is destroyed.                
                <return>
                    <code>true</code> if this thread group is a daemon thread group;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isDaemon" type="boolean" line="131"/>
            <javadoc line="134">
                Tests if this thread group has been destroyed.                
                <return>
                    true if this object is destroyed                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isDestroyed" type="boolean" line="139"/>
            <javadoc line="142">
                Changes the daemon status of this thread group.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  A daemon thread group is automatically destroyed when its last
                  thread is stopped or its last thread group is destroyed.                
                <param>
                    daemon   if <code>true</code>, marks this thread group as
                      a daemon thread group; otherwise, marks this
                      thread group as normal.                    
                </param>
                <exception>
                    SecurityException  if the current thread cannot modify
                      this thread group.                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setDaemon" type="void" line="159">
                <params>
                    <param name="daemon" type="boolean"/>
                </params>
            </method>
            <javadoc line="163">
                Sets the maximum priority of the group. Threads in the thread
                  group that already have a higher priority are not affected.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  If the &lt;code&gt;pri&lt;/code&gt; argument is less than{@link Thread#MIN_PRIORITY} or greater than{@link Thread#MAX_PRIORITY}, the maximum priority of the group
                  remains unchanged.
                  &lt;p&gt;
                  Otherwise, the priority of this ThreadGroup object is set to the
                  smaller of the specified &lt;code&gt;pri&lt;/code&gt; and the maximum permitted
                  priority of the parent of this thread group. (If this thread group
                  is the system thread group, which has no parent, then its maximum
                  priority is simply set to &lt;code&gt;pri&lt;/code&gt;.) Then this method is
                  called recursively, with &lt;code&gt;pri&lt;/code&gt; as its argument, for
                  every thread group that belongs to this thread group.                
                <param>
                    pri   the new priority of the thread group.                    
                </param>
                <exception>
                    SecurityException  if the current thread cannot modify
                      this thread group.                    
                </exception>
                <see>
                    #getMaxPriority                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setMaxPriority" type="void" line="188">
                <params>
                    <param name="pri" type="int"/>
                </params>
                <declaration name="ngroupsSnapshot" type="int" line="189"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="190"/>
                <scope line="191">
                    <scope line="193"/>
                    <scope line="198"/>
                    <scope line="201"/>
                </scope>
                <scope line="205"/>
            </method>
            <javadoc line="209">
                Tests if this thread group is either the thread group
                  argument or one of its ancestor thread groups.                
                <param>
                    g   a thread group.                    
                </param>
                <return>
                    <code>true</code> if this thread group is the thread group
                      argument or one of its ancestor thread groups;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="parentOf" type="boolean" line="218">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
                <scope line="219">
                    <scope line="220"/>
                </scope>
            </method>
            <javadoc line="226">
                Determines if the currently running thread has permission to
                  modify this thread group.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt; method
                  is called with this thread group as its argument. This may result
                  in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.                
                <exception>
                    SecurityException  if the current thread is not allowed to
                      access this thread group.                    
                </exception>
                <see>
                    java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="checkAccess" type="void" line="238">
                <declaration name="security" type="SecurityManager" line="239"/>
                <scope line="240"/>
            </method>
            <javadoc line="244">
                Returns an estimate of the number of active threads in this thread
                  group and its subgroups. Recursively iterates over all subgroups in
                  this thread group.
                  &lt;p&gt; The value returned is only an estimate because the number of
                  threads may change dynamically while this method traverses internal
                  data structures, and might be affected by the presence of certain
                  system threads. This method is intended primarily for debugging
                  and monitoring purposes.                
                <return>
                    an estimate of the number of active threads in this thread
                      group and in any other thread group that has this thread
                      group as an ancestor                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="activeCount" type="int" line="258">
                <declaration name="result" type="int" line="259"/>
                <declaration name="ngroupsSnapshot" type="int" line="260"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="261"/>
                <scope line="262">
                    <scope line="263"/>
                    <scope line="268"/>
                    <scope line="271"/>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Copies into the specified array every active thread in this
                  thread group and its subgroups.
                  &lt;p&gt; An invocation of this method behaves in exactly the same
                  way as the invocation
                  &lt;blockquote&gt;{@linkplain #enumerate(Thread[],boolean) enumerate}{@code (list, true)}&lt;/blockquote&gt;                
                <param>
                    listan array into which to put the list of threads                    
                </param>
                <return>
                    the number of threads put into the array                    
                </return>
                <throws>
                    SecurityExceptionif {@linkplain #checkAccess checkAccess} determines that
                      the current thread cannot access this thread group                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="enumerate" type="int" line="292">
                <params>
                    <param name="list" type="Thread"/>
                </params>
            </method>
            <javadoc line="296">
                Copies into the specified array every active thread in this
                  thread group. If {@code recurse} is {@code true},
                  this method recursively enumerates all subgroups of this
                  thread group and references to every active thread in these
                  subgroups are also included. If the array is too short to
                  hold all the threads, the extra threads are silently ignored.
                  &lt;p&gt; An application might use the {@linkplain #activeCount activeCount}method to get an estimate of how big the array should be, however
                  &lt;i&gt;if the array is too short to hold all the threads, the extra threads
                  are silently ignored.&lt;/i&gt;  If it is critical to obtain every active
                  thread in this thread group, the caller should verify that the returned
                  int value is strictly less than the length of {@code list}.
                  &lt;p&gt; Due to the inherent race condition in this method, it is recommended
                  that the method only be used for debugging and monitoring purposes.                
                <param>
                    listan array into which to put the list of threads                    
                </param>
                <param>
                    recurseif {@code true}, recursively enumerate all subgroups of this
                      thread group                    
                </param>
                <return>
                    the number of threads put into the array                    
                </return>
                <throws>
                    SecurityExceptionif {@linkplain #checkAccess checkAccess} determines that
                      the current thread cannot access this thread group                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="enumerate" type="int" line="318">
                <params>
                    <param name="list" type="Thread"/>
                    <param name="recurse" type="boolean"/>
                </params>
            </method>
            <method name="enumerate" type="int" line="322">
                <params>
                    <param name="list" type="Thread"/>
                    <param name="n" type="int"/>
                    <param name="recurse" type="boolean"/>
                </params>
                <declaration name="ngroupsSnapshot" type="int" line="323"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="324"/>
                <scope line="325">
                    <scope line="326"/>
                    <declaration name="nt" type="int" line="329"/>
                    <scope line="330"/>
                    <scope line="333">
                        <scope line="334"/>
                    </scope>
                    <scope line="338">
                        <scope line="340"/>
                        <scope line="343"/>
                    </scope>
                </scope>
                <scope line="348">
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="355">
                Returns an estimate of the number of active groups in this
                  thread group and its subgroups. Recursively iterates over
                  all subgroups in this thread group.
                  &lt;p&gt; The value returned is only an estimate because the number of
                  thread groups may change dynamically while this method traverses
                  internal data structures. This method is intended primarily for
                  debugging and monitoring purposes.                
                <return>
                    the number of active thread groups with this thread group as
                      an ancestor                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="activeGroupCount" type="int" line="367">
                <declaration name="ngroupsSnapshot" type="int" line="368"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="369"/>
                <scope line="370">
                    <scope line="371"/>
                    <scope line="375"/>
                    <scope line="378"/>
                </scope>
                <declaration name="n" type="int" line="382"/>
                <scope line="383"/>
            </method>
            <javadoc line="388">
                Copies into the specified array references to every active
                  subgroup in this thread group and its subgroups.
                  &lt;p&gt; An invocation of this method behaves in exactly the same
                  way as the invocation
                  &lt;blockquote&gt;{@linkplain #enumerate(ThreadGroup[],boolean) enumerate}{@code (list, true)}&lt;/blockquote&gt;                
                <param>
                    listan array into which to put the list of thread groups                    
                </param>
                <return>
                    the number of thread groups put into the array                    
                </return>
                <throws>
                    SecurityExceptionif {@linkplain #checkAccess checkAccess} determines that
                      the current thread cannot access this thread group                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="enumerate" type="int" line="400">
                <params>
                    <param name="list" type="ThreadGroup"/>
                </params>
            </method>
            <javadoc line="404">
                Copies into the specified array references to every active
                  subgroup in this thread group. If {@code recurse} is{@code true}, this method recursively enumerates all subgroups of this
                  thread group and references to every active thread group in these
                  subgroups are also included.
                  &lt;p&gt; An application might use the{@linkplain #activeGroupCount activeGroupCount} method to
                  get an estimate of how big the array should be, however &lt;i&gt;if the
                  array is too short to hold all the thread groups, the extra thread
                  groups are silently ignored.&lt;/i&gt;  If it is critical to obtain every
                  active subgroup in this thread group, the caller should verify that
                  the returned int value is strictly less than the length of{@code list}.
                  &lt;p&gt; Due to the inherent race condition in this method, it is recommended
                  that the method only be used for debugging and monitoring purposes.                
                <param>
                    listan array into which to put the list of thread groups                    
                </param>
                <param>
                    recurseif {@code true}, recursively enumerate all subgroups                    
                </param>
                <return>
                    the number of thread groups put into the array                    
                </return>
                <throws>
                    SecurityExceptionif {@linkplain #checkAccess checkAccess} determines that
                      the current thread cannot access this thread group                    
                </throws>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="enumerate" type="int" line="424">
                <params>
                    <param name="list" type="ThreadGroup"/>
                    <param name="recurse" type="boolean"/>
                </params>
            </method>
            <method name="enumerate" type="int" line="428">
                <params>
                    <param name="list" type="ThreadGroup"/>
                    <param name="n" type="int"/>
                    <param name="recurse" type="boolean"/>
                </params>
                <declaration name="ngroupsSnapshot" type="int" line="429"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="430"/>
                <scope line="431">
                    <scope line="432"/>
                    <declaration name="ng" type="int" line="435"/>
                    <scope line="436"/>
                    <scope line="439"/>
                    <scope line="443">
                        <scope line="445"/>
                        <scope line="448"/>
                    </scope>
                </scope>
                <scope line="453">
                    <scope line="454"/>
                </scope>
            </method>
            <javadoc line="460">
                Stops all threads in this thread group.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  This method then calls the &lt;code&gt;stop&lt;/code&gt; method on all the
                  threads in this thread group and in all of its subgroups.                
                <exception>
                    SecurityException  if the current thread is not allowed
                      to access this thread group or any of the threads in
                      the thread group.                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.Thread#stop()                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <deprecated>
                    This method is inherently unsafe.  See{@link Thread#stop} for details.                    
                </deprecated>
            </javadoc>
            <method name="stop" type="void" line="477"/>
            <javadoc line="480">
                Interrupts all threads in this thread group.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  This method then calls the &lt;code&gt;interrupt&lt;/code&gt; method on all the
                  threads in this thread group and in all of its subgroups.                
                <exception>
                    SecurityException  if the current thread is not allowed
                      to access this thread group or any of the threads in
                      the thread group.                    
                </exception>
                <see>
                    java.lang.Thread#interrupt()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="interrupt" type="void" line="496">
                <declaration name="ngroupsSnapshot" type="int" line="497"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="498"/>
                <scope line="499">
                    <scope line="501"/>
                    <scope line="505"/>
                    <scope line="508"/>
                </scope>
                <scope line="512"/>
            </method>
            <javadoc line="516">
                Suspends all threads in this thread group.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  This method then calls the &lt;code&gt;suspend&lt;/code&gt; method on all the
                  threads in this thread group and in all of its subgroups.                
                <exception>
                    SecurityException  if the current thread is not allowed
                      to access this thread group or any of the threads in
                      the thread group.                    
                </exception>
                <see>
                    java.lang.Thread#suspend()                    
                </see>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <deprecated>
                    This method is inherently deadlock-prone.  See{@link Thread#suspend} for details.                    
                </deprecated>
            </javadoc>
            <method name="suspend" type="void" line="533"/>
            <javadoc line="536">
                Helper method: recursively stops or suspends (as directed by the
                  boolean argument) all of the threads in this thread group and its
                  subgroups, except the current thread.  This method returns true
                  if (and only if) the current thread is found to be in this thread
                  group or one of its subgroups.                
            </javadoc>
            <method name="stopOrSuspend" type="boolean" line="543">
                <params>
                    <param name="suspend" type="boolean"/>
                </params>
                <declaration name="suicide" type="boolean" line="544"/>
                <declaration name="us" type="Thread" line="545"/>
                <declaration name="ngroupsSnapshot" type="int" line="546"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="547"/>
                <scope line="548">
                    <scope line="550"/>
                    <scope line="556"/>
                </scope>
            </method>
            <javadoc line="563">
                Resumes all threads in this thread group.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.
                  &lt;p&gt;
                  This method then calls the &lt;code&gt;resume&lt;/code&gt; method on all the
                  threads in this thread group and in all of its sub groups.                
                <exception>
                    SecurityException  if the current thread is not allowed to
                      access this thread group or any of the threads in the
                      thread group.                    
                </exception>
                <see>
                    java.lang.SecurityException                    
                </see>
                <see>
                    java.lang.Thread#resume()                    
                </see>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
                <deprecated>
                    This method is used solely in conjunction with
                      <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,
                      both of which have been deprecated, as they are inherently
                      deadlock-prone.  See {@link Thread#suspend} for details.                    
                </deprecated>
            </javadoc>
            <method name="resume" type="void" line="583">
                <declaration name="ngroupsSnapshot" type="int" line="584"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="585"/>
                <scope line="586">
                    <scope line="588"/>
                    <scope line="592"/>
                    <scope line="595"/>
                </scope>
                <scope line="599"/>
            </method>
            <javadoc line="603">
                Destroys this thread group and all of its subgroups. This thread
                  group must be empty, indicating that all threads that had been in
                  this thread group have since stopped.
                  &lt;p&gt;
                  First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
                  called with no arguments; this may result in a security exception.                
                <exception>
                    IllegalThreadStateException  if the thread group is not
                      empty or if the thread group has already been destroyed.                    
                </exception>
                <exception>
                    SecurityException  if the current thread cannot modify this
                      thread group.                    
                </exception>
                <see>
                    java.lang.ThreadGroup#checkAccess()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="destroy" type="void" line="617">
                <declaration name="ngroupsSnapshot" type="int" line="618"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="619"/>
                <scope line="620">
                    <scope line="622"/>
                    <scope line="626"/>
                    <scope line="629"/>
                    <scope line="632"/>
                </scope>
                <scope line="640"/>
                <scope line="643"/>
            </method>
            <javadoc line="647">
                Adds the specified Thread group to this group.                
                <param>
                    g the specified Thread group to be added                    
                </param>
                <exception>
                    IllegalThreadStateException If the Thread group has been destroyed.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="652">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
                <scope line="653">
                    <scope line="654"/>
                    <scope line="657"/>
                    <scope line="660"/>
                </scope>
            </method>
            <javadoc line="667">
                Removes the specified Thread group from this group.                
                <param>
                    g the Thread group to be removed                    
                </param>
                <return>
                    if this Thread has already been destroyed.                    
                </return>
            </javadoc>
            <method name="remove" type="void" line="672">
                <params>
                    <param name="g" type="ThreadGroup"/>
                </params>
                <scope line="673">
                    <scope line="674"/>
                    <scope line="677">
                        <scope line="678"/>
                    </scope>
                    <scope line="685"/>
                    <scope line="688"/>
                </scope>
            </method>
            <javadoc line="693">
                Increments the count of unstarted threads in the thread group.
                  Unstarted threads are not added to the thread group so that they
                  can be collected if they are never started, but they must be
                  counted so that daemon thread groups with unstarted threads in
                  them are not destroyed.                
            </javadoc>
            <method name="addUnstarted" type="void" line="700">
                <scope line="701">
                    <scope line="702"/>
                </scope>
            </method>
            <javadoc line="708">
                Adds the specified thread to this thread group.
                  &lt;p&gt; Note: This method is called from both library code
                  and the Virtual Machine. It is called from VM to add
                  certain system threads to the system thread group.                
                <param>
                    tthe Thread to be added                    
                </param>
                <throws>
                    IllegalThreadStateExceptionif the Thread group has been destroyed                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="716">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <scope line="717">
                    <scope line="718"/>
                    <scope line="721"/>
                    <scope line="724"/>
                </scope>
            </method>
            <javadoc line="732">
                Notifies the group that the thread {@code t} has failed
                  an attempt to start.
                  &lt;p&gt; The state of this thread group is rolled back as if the
                  attempt to start the thread has never occurred. The thread is again
                  considered an unstarted member of the thread group, and a subsequent
                  attempt to start the thread is permitted.                
                <param>
                    tthe Thread whose start method was invoked                    
                </param>
                <param>
                    failedtrue if the thread could not be started successfully                    
                </param>
            </javadoc>
            <method name="threadStartFailed" type="void" line="742">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <scope line="743"/>
            </method>
            <javadoc line="748">
                Notifies the group that the thread {@code t} has terminated.
                  &lt;p&gt; Destroy the group if all of the following conditions are
                  true: this is a daemon thread group; there are no more alive
                  or unstarted threads in the group; there are no subgroups in
                  this thread group.                
                <param>
                    tthe Thread that has terminated                    
                </param>
            </javadoc>
            <method name="threadTerminated" type="void" line="756">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <scope line="757">
                    <scope line="759"/>
                    <scope line="762"/>
                </scope>
            </method>
            <javadoc line="767">
                Removes the specified Thread from this group. Invoking this method
                  on a thread group that has been destroyed has no effect.                
                <param>
                    tthe Thread to be removed                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="772">
                <params>
                    <param name="t" type="Thread"/>
                </params>
                <scope line="773">
                    <scope line="774"/>
                    <scope line="777">
                        <scope line="778"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="786">
                Prints information about this thread group to the standard
                  output. This method is useful only for debugging.                
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="list" type="void" line="791"/>
            <method name="list" type="void" line="794">
                <params>
                    <param name="out" type="PrintStream"/>
                    <param name="indent" type="int"/>
                </params>
                <declaration name="ngroupsSnapshot" type="int" line="795"/>
                <declaration name="groupsSnapshot" type="ThreadGroup[]" line="796"/>
                <scope line="797">
                    <scope line="798"/>
                    <scope line="803">
                        <scope line="804"/>
                    </scope>
                    <scope line="810"/>
                    <scope line="813"/>
                </scope>
                <scope line="817"/>
            </method>
            <javadoc line="821">
                Called by the Java Virtual Machine when a thread in this
                  thread group stops because of an uncaught exception, and the thread
                  does not have a specific {@link Thread.UncaughtExceptionHandler}installed.
                  &lt;p&gt;
                  The &lt;code&gt;uncaughtException&lt;/code&gt; method of
                  &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:
                  &lt;ul&gt;
                  &lt;li&gt;If this thread group has a parent thread group, the
                  &lt;code&gt;uncaughtException&lt;/code&gt; method of that parent is called
                  with the same two arguments.
                  &lt;li&gt;Otherwise, this method checks to see if there is a{@linkplain Thread#getDefaultUncaughtExceptionHandler default
                  uncaught exception handler} installed, and if so, its
                  &lt;code&gt;uncaughtException&lt;/code&gt; method is called with the same
                  two arguments.
                  &lt;li&gt;Otherwise, this method determines if the &lt;code&gt;Throwable&lt;/code&gt;
                  argument is an instance of {@link ThreadDeath}. If so, nothing
                  special is done. Otherwise, a message containing the
                  thread&apos;s name, as returned from the thread&apos;s {@link Thread#getName getName} method, and a stack backtrace,
                  using the &lt;code&gt;Throwable&lt;/code&gt;&apos;s {@link Throwable#printStackTrace printStackTrace} method, is
                  printed to the {@linkplain System#err standard error stream}.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Applications can override this method in subclasses of
                  &lt;code&gt;ThreadGroup&lt;/code&gt; to provide alternative handling of
                  uncaught exceptions.                
                <param>
                    t   the thread that is about to exit.                    
                </param>
                <param>
                    e   the uncaught exception.                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="uncaughtException" type="void" line="851">
                <params>
                    <param name="t" type="Thread"/>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="852"/>
                <scope line="855">
                    <declaration name="ueh" type="Thread.UncaughtExceptionHandler" line="856"/>
                    <scope line="857"/>
                    <scope line="860"/>
                </scope>
            </method>
            <javadoc line="866">
                Used by VM to control lowmem implicit suspension.                
                <param>
                    b boolean to allow or disallow suspension                    
                </param>
                <return>
                    true on success                    
                </return>
                <since>
                    JDK1.1                    
                </since>
                <deprecated>
                    The definition of this call depends on {@link #suspend},
                      which is deprecated.  Further, the behavior of this call
                      was never specified.                    
                </deprecated>
            </javadoc>
            <method name="allowThreadSuspension" type="boolean" line="875">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="877"/>
            </method>
            <javadoc line="882">
                Returns a string representation of this Thread group.                
                <return>
                    a string representation of this thread group.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="887"/>
        </class>
    </source>