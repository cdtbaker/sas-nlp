<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.lang">
        <class name="RuntimeException" line="28">
            <extends class="Exception"/>
            <javadoc line="28">
                {@code RuntimeException} is the superclass of those
                  exceptions that can be thrown during the normal operation of the
                  Java Virtual Machine.
                  &lt;p&gt;{@code RuntimeException} and its subclasses are &lt;em&gt;unchecked
                  exceptions&lt;/em&gt;.  Unchecked exceptions do &lt;em&gt;not&lt;/em&gt; need to be
                  declared in a method or constructor&apos;s {@code throws} clause if they
                  can be thrown by the execution of the method or constructor and
                  propagate outside the method or constructor boundary.                
                <author>
                    Frank Yellin                    
                </author>
                <jls>
                    11.2 Compile-Time Checking of Exceptions                    
                </jls>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <javadoc line="46">
                Constructs a new runtime exception with {@code null} as its
                  detail message.  The cause is not initialized, and may subsequently be
                  initialized by a call to {@link #initCause}.                
            </javadoc>
            <method name="RuntimeException" type="constructor" line="50"/>
            <javadoc line="54">
                Constructs a new runtime exception with the specified detail message.
                  The cause is not initialized, and may subsequently be initialized by a
                  call to {@link #initCause}.                
                <param>
                    message   the detail message. The detail message is saved for
                      later retrieval by the {@link #getMessage()} method.                    
                </param>
            </javadoc>
            <method name="RuntimeException" type="constructor" line="61">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="65">
                Constructs a new runtime exception with the specified detail message and
                  cause.  &lt;p&gt;Note that the detail message associated with{@code cause} is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
                  this runtime exception&apos;s detail message.                
                <param>
                    message the detail message (which is saved for later retrieval
                      by the {@link #getMessage()} method).                    
                </param>
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A <tt>null</tt> value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="RuntimeException" type="constructor" line="79">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="83">
                Constructs a new runtime exception with the specified cause and a
                  detail message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt;
                  (which typically contains the class and detail message of
                  &lt;tt&gt;cause&lt;/tt&gt;).  This constructor is useful for runtime exceptions
                  that are little more than wrappers for other throwables.                
                <param>
                    cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A <tt>null</tt> value is
                      permitted, and indicates that the cause is nonexistent or
                      unknown.)                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="RuntimeException" type="constructor" line="95">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="99">
                Constructs a new runtime exception with the specified detail
                  message, cause, suppression enabled or disabled, and writable
                  stack trace enabled or disabled.                
                <param>
                    message the detail message.                    
                </param>
                <param>
                    cause the cause.  (A {@code null} value is permitted,
                      and indicates that the cause is nonexistent or unknown.)                    
                </param>
                <param>
                    enableSuppression whether or not suppression is enabled
                      or disabled                    
                </param>
                <param>
                    writableStackTrace whether or not the stack trace should
                      be writable                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="RuntimeException" type="constructor" line="116">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                    <param name="enableSuppression" type="boolean"/>
                    <param name="writableStackTrace" type="boolean"/>
                </params>
            </method>
        </class>
    </source>