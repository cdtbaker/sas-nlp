<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.ScrollbarPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="Scrollbar" line="9">
            <extends class="Component"/>
            <implements interface="Adjustable"/>
            <implements interface="Accessible"/>
            <javadoc line="9">
                The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a
                  familiar user-interface object. A scroll bar provides a
                  convenient means for allowing a user to select from a
                  range of values. The following three vertical
                  scroll bars could be used as slider controls to pick
                  the red, green, and blue components of a color:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Scrollbar-1.gif&quot; alt=&quot;Image shows 3 vertical sliders, side-by-side.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  Each scroll bar in this example could be created with
                  code similar to the following:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  redSlider=new Scrollbar(Scrollbar.VERTICAL, 0, 1, 0, 255);
                  add(redSlider);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  Alternatively, a scroll bar can represent a range of values. For
                  example, if a scroll bar is used for scrolling through text, the
                  width of the &quot;bubble&quot; (also called the &quot;thumb&quot; or &quot;scroll box&quot;)
                  can be used to represent the amount of text that is visible.
                  Here is an example of a scroll bar that represents a range:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Scrollbar-2.gif&quot;
                  alt=&quot;Image shows horizontal slider with starting range of 0 and ending range of 300. The slider thumb is labeled 60.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  The value range represented by the bubble in this example
                  is the &lt;em&gt;visible amount&lt;/em&gt;. The horizontal scroll bar
                  in this example could be created with code like the following:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  ranger = new Scrollbar(Scrollbar.HORIZONTAL, 0, 60, 0, 300);
                  add(ranger);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  Note that the actual maximum value of the scroll bar is the
                  &lt;code&gt;maximum&lt;/code&gt; minus the &lt;code&gt;visible amount&lt;/code&gt;.
                  In the previous example, because the &lt;code&gt;maximum&lt;/code&gt; is
                  300 and the &lt;code&gt;visible amount&lt;/code&gt; is 60, the actual maximum
                  value is 240.  The range of the scrollbar track is 0 - 300.
                  The left side of the bubble indicates the value of the
                  scroll bar.
                  &lt;p&gt;
                  Normally, the user changes the value of the scroll bar by
                  making a gesture with the mouse. For example, the user can
                  drag the scroll bar&apos;s bubble up and down, or click in the
                  scroll bar&apos;s unit increment or block increment areas. Keyboard
                  gestures can also be mapped to the scroll bar. By convention,
                  the &lt;b&gt;Page&amp;nbsp;Up&lt;/b&gt; and &lt;b&gt;Page&amp;nbsp;Down&lt;/b&gt;
                  keys are equivalent to clicking in the scroll bar&apos;s block
                  increment and block decrement areas.
                  &lt;p&gt;
                  When the user changes the value of the scroll bar, the scroll bar
                  receives an instance of &lt;code&gt;AdjustmentEvent&lt;/code&gt;.
                  The scroll bar processes this event, passing it along to
                  any registered listeners.
                  &lt;p&gt;
                  Any object that wishes to be notified of changes to the
                  scroll bar&apos;s value should implement
                  &lt;code&gt;AdjustmentListener&lt;/code&gt;, an interface defined in
                  the package &lt;code&gt;java.awt.event&lt;/code&gt;.
                  Listeners can be added and removed dynamically by calling
                  the methods &lt;code&gt;addAdjustmentListener&lt;/code&gt; and
                  &lt;code&gt;removeAdjustmentListener&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;AdjustmentEvent&lt;/code&gt; class defines five types
                  of adjustment event, listed here:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.TRACK&lt;/code&gt; is sent out when the
                  user drags the scroll bar&apos;s bubble.
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.UNIT_INCREMENT&lt;/code&gt; is sent out
                  when the user clicks in the left arrow of a horizontal scroll
                  bar, or the top arrow of a vertical scroll bar, or makes the
                  equivalent gesture from the keyboard.
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.UNIT_DECREMENT&lt;/code&gt; is sent out
                  when the user clicks in the right arrow of a horizontal scroll
                  bar, or the bottom arrow of a vertical scroll bar, or makes the
                  equivalent gesture from the keyboard.
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.BLOCK_INCREMENT&lt;/code&gt; is sent out
                  when the user clicks in the track, to the left of the bubble
                  on a horizontal scroll bar, or above the bubble on a vertical
                  scroll bar. By convention, the &lt;b&gt;Page&amp;nbsp;Up&lt;/b&gt;
                  key is equivalent, if the user is using a keyboard that
                  defines a &lt;b&gt;Page&amp;nbsp;Up&lt;/b&gt; key.
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.BLOCK_DECREMENT&lt;/code&gt; is sent out
                  when the user clicks in the track, to the right of the bubble
                  on a horizontal scroll bar, or below the bubble on a vertical
                  scroll bar. By convention, the &lt;b&gt;Page&amp;nbsp;Down&lt;/b&gt;
                  key is equivalent, if the user is using a keyboard that
                  defines a &lt;b&gt;Page&amp;nbsp;Down&lt;/b&gt; key.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The JDK&amp;nbsp;1.0 event system is supported for backwards
                  compatibility, but its use with newer versions of the platform is
                  discouraged. The five types of adjustment events introduced
                  with JDK&amp;nbsp;1.1 correspond to the five event types
                  that are associated with scroll bars in previous platform versions.
                  The following list gives the adjustment event type,
                  and the corresponding JDK&amp;nbsp;1.0 event type it replaces.
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.TRACK&lt;/code&gt; replaces
                  &lt;code&gt;Event.SCROLL_ABSOLUTE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.UNIT_INCREMENT&lt;/code&gt; replaces
                  &lt;code&gt;Event.SCROLL_LINE_UP&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.UNIT_DECREMENT&lt;/code&gt; replaces
                  &lt;code&gt;Event.SCROLL_LINE_DOWN&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.BLOCK_INCREMENT&lt;/code&gt; replaces
                  &lt;code&gt;Event.SCROLL_PAGE_UP&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;AdjustmentEvent.BLOCK_DECREMENT&lt;/code&gt; replaces
                  &lt;code&gt;Event.SCROLL_PAGE_DOWN&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: We recommend using a &lt;code&gt;Scrollbar&lt;/code&gt;
                  for value selection only.  If you want to implement
                  a scrollable component inside a container, we recommend you use
                  a {@link ScrollPane ScrollPane}. If you use a
                  &lt;code&gt;Scrollbar&lt;/code&gt; for this purpose, you are likely to
                  encounter issues with painting, key handling, sizing and
                  positioning.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="HORIZONTAL" type="int" line="139"/>
            <javadoc line="139">
                A constant that indicates a horizontal scroll bar.                
            </javadoc>
            <declaration name="VERTICAL" type="int" line="143"/>
            <javadoc line="143">
                A constant that indicates a vertical scroll bar.                
            </javadoc>
            <declaration name="value" type="int" line="147"/>
            <javadoc line="147">
                The value of the &lt;code&gt;Scrollbar&lt;/code&gt;.
                  This property must be greater than or equal to &lt;code&gt;minimum&lt;/code&gt;
                  and less than or equal to
                  &lt;code&gt;maximum - visibleAmount&lt;/code&gt;                
                <serial>
                                        
                </serial>
                <see>
                    #getValue                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <declaration name="maximum" type="int" line="157"/>
            <javadoc line="157">
                The maximum value of the &lt;code&gt;Scrollbar&lt;/code&gt;.
                  This value must be greater than the &lt;code&gt;minimum&lt;/code&gt;
                  value.&lt;br&gt;                
                <serial>
                                        
                </serial>
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <declaration name="minimum" type="int" line="166"/>
            <javadoc line="166">
                The minimum value of the &lt;code&gt;Scrollbar&lt;/code&gt;.
                  This value must be less than the &lt;code&gt;maximum&lt;/code&gt;
                  value.&lt;br&gt;                
                <serial>
                                        
                </serial>
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #setMinimum                    
                </see>
            </javadoc>
            <declaration name="visibleAmount" type="int" line="175"/>
            <javadoc line="175">
                The size of the &lt;code&gt;Scrollbar&lt;/code&gt;&apos;s bubble.
                  When a scroll bar is used to select a range of values,
                  the visibleAmount represents the size of this range.
                  Depending on platform, this may be visually indicated
                  by the size of the bubble.                
                <serial>
                                        
                </serial>
                <see>
                    #getVisibleAmount                    
                </see>
                <see>
                    #setVisibleAmount                    
                </see>
            </javadoc>
            <declaration name="orientation" type="int" line="186"/>
            <javadoc line="186">
                The &lt;code&gt;Scrollbar&lt;/code&gt;&apos;s orientation--being either horizontal
                  or vertical.
                  This value should be specified when the scrollbar is created.&lt;BR&gt;
                  orientation can be either : &lt;code&gt;VERTICAL&lt;/code&gt; or
                  &lt;code&gt;HORIZONTAL&lt;/code&gt; only.                
                <serial>
                                        
                </serial>
                <see>
                    #getOrientation                    
                </see>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <declaration name="lineIncrement" type="int" line="197"/>
            <javadoc line="197">
                The amount by which the scrollbar value will change when going
                  up or down by a line.
                  This value must be greater than zero.                
                <serial>
                                        
                </serial>
                <see>
                    #getLineIncrement                    
                </see>
                <see>
                    #setLineIncrement                    
                </see>
            </javadoc>
            <declaration name="pageIncrement" type="int" line="206"/>
            <javadoc line="206">
                The amount by which the scrollbar value will change when going
                  up or down by a page.
                  This value must be greater than zero.                
                <serial>
                                        
                </serial>
                <see>
                    #getPageIncrement                    
                </see>
                <see>
                    #setPageIncrement                    
                </see>
            </javadoc>
            <declaration name="isAdjusting" type="boolean" line="215"/>
            <javadoc line="215">
                The adjusting status of the &lt;code&gt;Scrollbar&lt;/code&gt;.
                  True if the value is in the process of changing as a result of
                  actions being taken by the user.                
                <see>
                    #getValueIsAdjusting                    
                </see>
                <see>
                    #setValueIsAdjusting                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="adjustmentListener" type="AdjustmentListener" line="224"/>
            <declaration name="base" type="String" line="225"/>
            <declaration name="nameCounter" type="int" line="226"/>
            <declaration name="serialVersionUID" type="long" line="227"/>
            <method name="initIDs" type="void" line="228"/>
            <javadoc line="228">
                Initialize JNI field and method IDs.                
            </javadoc>
            <scope line="232">
                <scope line="234"/>
            </scope>
            <javadoc line="238">
                Constructs a new vertical scroll bar.
                  The default properties of the scroll bar are listed in
                  the following table:
                  &lt;p&gt; &lt;/p&gt;
                  &lt;table border=1 summary=&quot;Scrollbar default properties&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;th&gt;Default Value&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;orientation&lt;/td&gt;
                  &lt;td&gt;indicates whether the scroll bar is vertical
                  &lt;br&gt;or horizontal&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;value&lt;/td&gt;
                  &lt;td&gt;value which controls the location
                  &lt;br&gt;of the scroll bar&apos;s bubble&lt;/td&gt;
                  &lt;td&gt;0&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;visible amount&lt;/td&gt;
                  &lt;td&gt;visible amount of the scroll bar&apos;s range,
                  &lt;br&gt;typically represented by the size of the
                  &lt;br&gt;scroll bar&apos;s bubble&lt;/td&gt;
                  &lt;td&gt;10&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;minimum&lt;/td&gt;
                  &lt;td&gt;minimum value of the scroll bar&lt;/td&gt;
                  &lt;td&gt;0&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;maximum&lt;/td&gt;
                  &lt;td&gt;maximum value of the scroll bar&lt;/td&gt;
                  &lt;td&gt;100&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;unit increment&lt;/td&gt;
                  &lt;td&gt;amount the value changes when the
                  &lt;br&gt;Line Up or Line Down key is pressed,
                  &lt;br&gt;or when the end arrows of the scrollbar
                  &lt;br&gt;are clicked &lt;/td&gt;
                  &lt;td&gt;1&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;block increment&lt;/td&gt;
                  &lt;td&gt;amount the value changes when the
                  &lt;br&gt;Page Up or Page Down key is pressed,
                  &lt;br&gt;or when the scrollbar track is clicked
                  &lt;br&gt;on either side of the bubble &lt;/td&gt;
                  &lt;td&gt;10&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Scrollbar" type="constructor" line="299"/>
            <javadoc line="302">
                Constructs a new scroll bar with the specified orientation.
                  &lt;p&gt;
                  The &lt;code&gt;orientation&lt;/code&gt; argument must take one of the two
                  values &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt;,
                  or &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;,
                  indicating a horizontal or vertical scroll bar, respectively.                
                <param>
                    orientation   indicates the orientation of the scroll bar                    
                </param>
                <exception>
                    IllegalArgumentException    when an illegal value for
                      the &lt;code&gt;orientation&lt;/code&gt; argument is supplied                    
                </exception>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Scrollbar" type="constructor" line="316">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="319">
                Constructs a new scroll bar with the specified orientation,
                  initial value, visible amount, and minimum and maximum values.
                  &lt;p&gt;
                  The &lt;code&gt;orientation&lt;/code&gt; argument must take one of the two
                  values &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt;,
                  or &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;,
                  indicating a horizontal or vertical scroll bar, respectively.
                  &lt;p&gt;
                  The parameters supplied to this constructor are subject to the
                  constraints described in {@link #setValues(int,int,int,int)}.                
                <param>
                    orientation   indicates the orientation of the scroll bar.                    
                </param>
                <param>
                    value     the initial value of the scroll bar                    
                </param>
                <param>
                    visible   the visible amount of the scroll bar, typically
                      represented by the size of the bubble                    
                </param>
                <param>
                    minimum   the minimum value of the scroll bar                    
                </param>
                <param>
                    maximum   the maximum value of the scroll bar                    
                </param>
                <exception>
                    IllegalArgumentException    when an illegal value for
                      the &lt;code&gt;orientation&lt;/code&gt; argument is supplied                    
                </exception>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    #setValues                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Scrollbar" type="constructor" line="343">
                <params>
                    <param name="orientation" type="int"/>
                    <param name="value" type="int"/>
                    <param name="visible" type="int"/>
                    <param name="minimum" type="int"/>
                    <param name="maximum" type="int"/>
                </params>
            </method>
            <javadoc line="355">
                Constructs a name for this component.  Called by &lt;code&gt;getName&lt;/code&gt;
                  when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="359">
                <scope line="360"/>
            </method>
            <javadoc line="364">
                Creates the &lt;code&gt;Scrollbar&lt;/code&gt;&apos;s peer.  The peer allows you to modify
                  the appearance of the &lt;code&gt;Scrollbar&lt;/code&gt; without changing any of its
                  functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="369">
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Returns the orientation of this scroll bar.                
                <return>
                    the orientation of this scroll bar, either
                      &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt; or
                      &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.Scrollbar#setOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="382"/>
            <javadoc line="385">
                Sets the orientation for this scroll bar.                
                <param>
                    orientation  the orientation of this scroll bar, either
                      &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt; or
                      &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.Scrollbar#getOrientation                    
                </see>
                <exception>
                    IllegalArgumentException  if the value supplied
                      for &lt;code&gt;orientation&lt;/code&gt; is not a
                      legal value                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setOrientation" type="void" line="396">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <scope line="397">
                    <scope line="398"/>
                    <scope line="409"/>
                </scope>
                <scope line="415"/>
            </method>
            <javadoc line="419">
                Gets the current value of this scroll bar.                
                <return>
                    the current value of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#getMinimum                    
                </see>
                <see>
                    java.awt.Scrollbar#getMaximum                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="425"/>
            <javadoc line="428">
                Sets the value of this scroll bar to the specified value.
                  &lt;p&gt;
                  If the value supplied is less than the current &lt;code&gt;minimum&lt;/code&gt;
                  or greater than the current &lt;code&gt;maximum - visibleAmount&lt;/code&gt;,
                  then either &lt;code&gt;minimum&lt;/code&gt; or &lt;code&gt;maximum - visibleAmount&lt;/code&gt;
                  is substituted, as appropriate.
                  &lt;p&gt;
                  Normally, a program should change a scroll bar&apos;s
                  value only by calling &lt;code&gt;setValues&lt;/code&gt;.
                  The &lt;code&gt;setValues&lt;/code&gt; method simultaneously
                  and synchronously sets the minimum, maximum, visible amount,
                  and value properties of a scroll bar, so that they are
                  mutually consistent.
                  &lt;p&gt;
                  Calling this method does not fire an
                  &lt;code&gt;AdjustmentEvent&lt;/code&gt;.                
                <param>
                    newValue   the new value of the scroll bar                    
                </param>
                <see>
                    java.awt.Scrollbar#setValues                    
                </see>
                <see>
                    java.awt.Scrollbar#getValue                    
                </see>
                <see>
                    java.awt.Scrollbar#getMinimum                    
                </see>
                <see>
                    java.awt.Scrollbar#getMaximum                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="451">
                <params>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="454">
                Gets the minimum value of this scroll bar.                
                <return>
                    the minimum value of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#getValue                    
                </see>
                <see>
                    java.awt.Scrollbar#getMaximum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="460"/>
            <javadoc line="463">
                Sets the minimum value of this scroll bar.
                  &lt;p&gt;
                  When &lt;code&gt;setMinimum&lt;/code&gt; is called, the minimum value
                  is changed, and other values (including the maximum, the
                  visible amount, and the current scroll bar value)
                  are changed to be consistent with the new minimum.
                  &lt;p&gt;
                  Normally, a program should change a scroll bar&apos;s minimum
                  value only by calling &lt;code&gt;setValues&lt;/code&gt;.
                  The &lt;code&gt;setValues&lt;/code&gt; method simultaneously
                  and synchronously sets the minimum, maximum, visible amount,
                  and value properties of a scroll bar, so that they are
                  mutually consistent.
                  &lt;p&gt;
                  Note that setting the minimum value to &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                  will result in the new minimum value being set to
                  &lt;code&gt;Integer.MAX_VALUE - 1&lt;/code&gt;.                
                <param>
                    newMinimum   the new minimum value for this scroll bar                    
                </param>
                <see>
                    java.awt.Scrollbar#setValues                    
                </see>
                <see>
                    java.awt.Scrollbar#setMaximum                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setMinimum" type="void" line="486">
                <params>
                    <param name="newMinimum" type="int"/>
                </params>
            </method>
            <javadoc line="489">
                Gets the maximum value of this scroll bar.                
                <return>
                    the maximum value of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#getValue                    
                </see>
                <see>
                    java.awt.Scrollbar#getMinimum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="495"/>
            <javadoc line="498">
                Sets the maximum value of this scroll bar.
                  &lt;p&gt;
                  When &lt;code&gt;setMaximum&lt;/code&gt; is called, the maximum value
                  is changed, and other values (including the minimum, the
                  visible amount, and the current scroll bar value)
                  are changed to be consistent with the new maximum.
                  &lt;p&gt;
                  Normally, a program should change a scroll bar&apos;s maximum
                  value only by calling &lt;code&gt;setValues&lt;/code&gt;.
                  The &lt;code&gt;setValues&lt;/code&gt; method simultaneously
                  and synchronously sets the minimum, maximum, visible amount,
                  and value properties of a scroll bar, so that they are
                  mutually consistent.
                  &lt;p&gt;
                  Note that setting the maximum value to &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;
                  will result in the new maximum value being set to
                  &lt;code&gt;Integer.MIN_VALUE + 1&lt;/code&gt;.                
                <param>
                    newMaximum   the new maximum value
                      for this scroll bar                    
                </param>
                <see>
                    java.awt.Scrollbar#setValues                    
                </see>
                <see>
                    java.awt.Scrollbar#setMinimum                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setMaximum" type="void" line="522">
                <params>
                    <param name="newMaximum" type="int"/>
                </params>
                <scope line="523"/>
                <scope line="526"/>
            </method>
            <javadoc line="531">
                Gets the visible amount of this scroll bar.
                  &lt;p&gt;
                  When a scroll bar is used to select a range of values,
                  the visible amount is used to represent the range of values
                  that are currently visible.  The size of the scroll bar&apos;s
                  bubble (also called a thumb or scroll box), usually gives a
                  visual representation of the relationship of the visible
                  amount to the range of the scroll bar.
                  Note that depending on platform, the value of the visible amount property
                  may not be visually indicated by the size of the bubble.
                  &lt;p&gt;
                  The scroll bar&apos;s bubble may not be displayed when it is not
                  moveable (e.g. when it takes up the entire length of the
                  scroll bar&apos;s track, or when the scroll bar is disabled).
                  Whether the bubble is displayed or not will not affect
                  the value returned by &lt;code&gt;getVisibleAmount&lt;/code&gt;.                
                <return>
                    the visible amount of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#setVisibleAmount                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getVisibleAmount" type="int" line="552"/>
            <javadoc line="555">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getVisibleAmount()&lt;/code&gt;.                
            </javadoc>
            <method name="getVisible" type="int" line="559"/>
            <javadoc line="562">
                Sets the visible amount of this scroll bar.
                  &lt;p&gt;
                  When a scroll bar is used to select a range of values,
                  the visible amount is used to represent the range of values
                  that are currently visible.  The size of the scroll bar&apos;s
                  bubble (also called a thumb or scroll box), usually gives a
                  visual representation of the relationship of the visible
                  amount to the range of the scroll bar.
                  Note that depending on platform, the value of the visible amount property
                  may not be visually indicated by the size of the bubble.
                  &lt;p&gt;
                  The scroll bar&apos;s bubble may not be displayed when it is not
                  moveable (e.g. when it takes up the entire length of the
                  scroll bar&apos;s track, or when the scroll bar is disabled).
                  Whether the bubble is displayed or not will not affect
                  the value returned by &lt;code&gt;getVisibleAmount&lt;/code&gt;.
                  &lt;p&gt;
                  If the visible amount supplied is less than &lt;code&gt;one&lt;/code&gt;
                  or greater than the current &lt;code&gt;maximum - minimum&lt;/code&gt;,
                  then either &lt;code&gt;one&lt;/code&gt; or &lt;code&gt;maximum - minimum&lt;/code&gt;
                  is substituted, as appropriate.
                  &lt;p&gt;
                  Normally, a program should change a scroll bar&apos;s
                  value only by calling &lt;code&gt;setValues&lt;/code&gt;.
                  The &lt;code&gt;setValues&lt;/code&gt; method simultaneously
                  and synchronously sets the minimum, maximum, visible amount,
                  and value properties of a scroll bar, so that they are
                  mutually consistent.                
                <param>
                    newAmount the new visible amount                    
                </param>
                <see>
                    java.awt.Scrollbar#getVisibleAmount                    
                </see>
                <see>
                    java.awt.Scrollbar#setValues                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVisibleAmount" type="void" line="596">
                <params>
                    <param name="newAmount" type="int"/>
                </params>
            </method>
            <javadoc line="599">
                Sets the unit increment for this scroll bar.
                  &lt;p&gt;
                  The unit increment is the value that is added or subtracted
                  when the user activates the unit increment area of the
                  scroll bar, generally through a mouse or keyboard gesture
                  that the scroll bar receives as an adjustment event.
                  The unit increment must be greater than zero.
                  Attepts to set the unit increment to a value lower than 1
                  will result in a value of 1 being set.                
                <param>
                    v  the amount by which to increment or decrement
                      the scroll bar&apos;s value                    
                </param>
                <see>
                    java.awt.Scrollbar#getUnitIncrement                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setUnitIncrement" type="void" line="614">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="617">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setUnitIncrement(int)&lt;/code&gt;.                
            </javadoc>
            <method name="setLineIncrement" type="void" line="621">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="tmp" type="int" line="622"/>
                <scope line="623"/>
                <declaration name="peer" type="ScrollbarPeer" line="627"/>
                <scope line="628"/>
            </method>
            <javadoc line="632">
                Gets the unit increment for this scrollbar.
                  &lt;p&gt;
                  The unit increment is the value that is added or subtracted
                  when the user activates the unit increment area of the
                  scroll bar, generally through a mouse or keyboard gesture
                  that the scroll bar receives as an adjustment event.
                  The unit increment must be greater than zero.                
                <return>
                    the unit increment of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#setUnitIncrement                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getUnitIncrement" type="int" line="644"/>
            <javadoc line="647">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getUnitIncrement()&lt;/code&gt;.                
            </javadoc>
            <method name="getLineIncrement" type="int" line="651"/>
            <javadoc line="654">
                Sets the block increment for this scroll bar.
                  &lt;p&gt;
                  The block increment is the value that is added or subtracted
                  when the user activates the block increment area of the
                  scroll bar, generally through a mouse or keyboard gesture
                  that the scroll bar receives as an adjustment event.
                  The block increment must be greater than zero.
                  Attepts to set the block increment to a value lower than 1
                  will result in a value of 1 being set.                
                <param>
                    v  the amount by which to increment or decrement
                      the scroll bar&apos;s value                    
                </param>
                <see>
                    java.awt.Scrollbar#getBlockIncrement                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setBlockIncrement" type="void" line="669">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="672">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setBlockIncrement()&lt;/code&gt;.                
            </javadoc>
            <method name="setPageIncrement" type="void" line="676">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="tmp" type="int" line="677"/>
                <scope line="678"/>
                <declaration name="peer" type="ScrollbarPeer" line="682"/>
                <scope line="683"/>
            </method>
            <javadoc line="687">
                Gets the block increment of this scroll bar.
                  &lt;p&gt;
                  The block increment is the value that is added or subtracted
                  when the user activates the block increment area of the
                  scroll bar, generally through a mouse or keyboard gesture
                  that the scroll bar receives as an adjustment event.
                  The block increment must be greater than zero.                
                <return>
                    the block increment of this scroll bar                    
                </return>
                <see>
                    java.awt.Scrollbar#setBlockIncrement                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getBlockIncrement" type="int" line="699"/>
            <javadoc line="702">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getBlockIncrement()&lt;/code&gt;.                
            </javadoc>
            <method name="getPageIncrement" type="int" line="706"/>
            <javadoc line="709">
                Sets the values of four properties for this scroll bar:
                  &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;visibleAmount&lt;/code&gt;,
                  &lt;code&gt;minimum&lt;/code&gt;, and &lt;code&gt;maximum&lt;/code&gt;.
                  If the values supplied for these properties are inconsistent
                  or incorrect, they will be changed to ensure consistency.
                  &lt;p&gt;
                  This method simultaneously and synchronously sets the values
                  of four scroll bar properties, assuring that the values of
                  these properties are mutually consistent. It enforces the
                  following constraints:
                  &lt;code&gt;maximum&lt;/code&gt; must be greater than &lt;code&gt;minimum&lt;/code&gt;,
                  &lt;code&gt;maximum - minimum&lt;/code&gt; must not be greater
                  than &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;,
                  &lt;code&gt;visibleAmount&lt;/code&gt; must be greater than zero.
                  &lt;code&gt;visibleAmount&lt;/code&gt; must not be greater than
                  &lt;code&gt;maximum - minimum&lt;/code&gt;,
                  &lt;code&gt;value&lt;/code&gt; must not be less than &lt;code&gt;minimum&lt;/code&gt;,
                  and &lt;code&gt;value&lt;/code&gt; must not be greater than
                  &lt;code&gt;maximum - visibleAmount&lt;/code&gt;
                  &lt;p&gt;
                  Calling this method does not fire an
                  &lt;code&gt;AdjustmentEvent&lt;/code&gt;.                
                <param>
                    value is the position in the current window                    
                </param>
                <param>
                    visible is the visible amount of the scroll bar                    
                </param>
                <param>
                    minimum is the minimum value of the scroll bar                    
                </param>
                <param>
                    maximum is the maximum value of the scroll bar                    
                </param>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setVisibleAmount                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="setValues" type="void" line="741">
                <params>
                    <param name="value" type="int"/>
                    <param name="visible" type="int"/>
                    <param name="minimum" type="int"/>
                    <param name="maximum" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="742"/>
                <scope line="743">
                    <scope line="744"/>
                    <scope line="747"/>
                    <declaration name="maxMinusMin" type="long" line="750"/>
                    <scope line="751"/>
                    <scope line="755"/>
                    <scope line="758"/>
                    <scope line="761"/>
                    <scope line="764"/>
                    <declaration name="peer" type="ScrollbarPeer" line="772"/>
                    <scope line="773"/>
                </scope>
                <scope line="777"/>
            </method>
            <javadoc line="781">
                Returns true if the value is in the process of changing as a
                  result of actions being taken by the user.                
                <return>
                    the value of the &lt;code&gt;valueIsAdjusting&lt;/code&gt; property                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="788"/>
            <javadoc line="791">
                Sets the &lt;code&gt;valueIsAdjusting&lt;/code&gt; property.                
                <param>
                    b new adjustment-in-progress status                    
                </param>
                <see>
                    #getValueIsAdjusting                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="797">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="798"/>
                <scope line="799"/>
                <scope line="803"/>
            </method>
            <javadoc line="807">
                Adds the specified adjustment listener to receive instances of
                  &lt;code&gt;AdjustmentEvent&lt;/code&gt; from this scroll bar.
                  If l is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and no
                  action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the adjustment listener                    
                </param>
                <see>
                    #removeAdjustmentListener                    
                </see>
                <see>
                    #getAdjustmentListeners                    
                </see>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addAdjustmentListener" type="void" line="821">
                <params>
                    <param name="l" type="AdjustmentListener"/>
                </params>
                <scope line="822"/>
            </method>
            <javadoc line="828">
                Removes the specified adjustment listener so that it no longer
                  receives instances of &lt;code&gt;AdjustmentEvent&lt;/code&gt; from this scroll bar.
                  If l is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and no action
                  is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l    the adjustment listener                    
                </param>
                <see>
                    #addAdjustmentListener                    
                </see>
                <see>
                    #getAdjustmentListeners                    
                </see>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeAdjustmentListener" type="void" line="842">
                <params>
                    <param name="l" type="AdjustmentListener"/>
                </params>
                <scope line="843"/>
            </method>
            <javadoc line="848">
                Returns an array of all the adjustment listeners
                  registered on this scrollbar.                
                <return>
                    all of this scrollbar&apos;s &lt;code&gt;AdjustmentListener&lt;/code&gt;s
                      or an empty array if no adjustment
                      listeners are currently registered                    
                </return>
                <see>
                    #addAdjustmentListener                    
                </see>
                <see>
                    #removeAdjustmentListener                    
                </see>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAdjustmentListeners" type="AdjustmentListener[]" line="860"/>
            <javadoc line="863">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Scrollbar&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Scrollbar&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its mouse listeners with the following code:
                  &lt;pre&gt;MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this component,
                      or an empty array if no such listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="889">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
                <declaration name="l" type="EventListener" line="890"/>
                <scope line="891"/>
                <scope line="894"/>
            </method>
            <method name="eventEnabled" type="boolean" line="899">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="900">
                    <scope line="901"/>
                </scope>
            </method>
            <javadoc line="908">
                Processes events on this scroll bar. If the event is an
                  instance of &lt;code&gt;AdjustmentEvent&lt;/code&gt;, it invokes the
                  &lt;code&gt;processAdjustmentEvent&lt;/code&gt; method.
                  Otherwise, it invokes its superclass&apos;s
                  &lt;code&gt;processEvent&lt;/code&gt; method.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.Scrollbar#processAdjustmentEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="922">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="923"/>
            </method>
            <javadoc line="929">
                Processes adjustment events occurring on this
                  scrollbar by dispatching them to any registered
                  &lt;code&gt;AdjustmentListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless adjustment events are
                  enabled for this component. Adjustment events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;AdjustmentListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addAdjustmentListener&lt;/code&gt;.
                  &lt;li&gt;Adjustment events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;&lt;p&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the adjustment event                    
                </param>
                <see>
                    java.awt.event.AdjustmentEvent                    
                </see>
                <see>
                    java.awt.event.AdjustmentListener                    
                </see>
                <see>
                    java.awt.Scrollbar#addAdjustmentListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processAdjustmentEvent" type="void" line="952">
                <params>
                    <param name="e" type="AdjustmentEvent"/>
                </params>
                <declaration name="listener" type="AdjustmentListener" line="953"/>
                <scope line="954"/>
            </method>
            <javadoc line="958">
                Returns a string representing the state of this &lt;code&gt;Scrollbar&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this scroll bar                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="966"/>
            <declaration name="scrollbarSerializedDataVersion" type="int" line="969"/>
            <javadoc line="969">
                The scroll bar&apos;s serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="974">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;AdjustmentListeners&lt;/code&gt;
                  as optional data. The non-serializable listeners are
                  detected and no attempt is made to serialize them.                
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <serialData>
                    &lt;code&gt;null&lt;/code&gt; terminated sequence of 0
                      or more pairs; the pair consists of a &lt;code&gt;String&lt;/code&gt;
                      and an &lt;code&gt;Object&lt;/code&gt;; the &lt;code&gt;String&lt;/code&gt; indicates
                      the type of object and is one of the following:
                      &lt;code&gt;adjustmentListenerK&lt;/code&gt; indicating an
                      &lt;code&gt;AdjustmentListener&lt;/code&gt; object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#adjustmentListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="990">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="995">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if
                  it isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to
                  receive adjustment events fired by the
                  &lt;code&gt;Scrollbar&lt;/code&gt;.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1008">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="keyOrNull" type="Object" line="1011"/>
                <scope line="1012">
                    <declaration name="key" type="String" line="1013"/>
                </scope>
            </method>
            <javadoc line="1018">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;Scrollbar&lt;/code&gt;. For scrollbars, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleAWTScrollBar&lt;/code&gt;. A new
                  &lt;code&gt;AccessibleAWTScrollBar&lt;/code&gt; instance is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleAWTScrollBar&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;ScrollBar&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1028">
                <scope line="1029"/>
            </method>
            <class name="AccessibleAWTScrollBar" line="1034">
                <extends class="AccessibleAWTComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="1034">
                    This class implements accessibility support for the
                      &lt;code&gt;Scrollbar&lt;/code&gt; class.  It provides an implementation of
                      the Java Accessibility API appropriate to scrollbar
                      user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1042"/>
                <javadoc line="1043">
                    Get the state set of this object.                    
                    <return>
                        an instance of &lt;code&gt;AccessibleState&lt;/code&gt;
                          containing the current state of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1049">
                    <declaration name="states" type="AccessibleStateSet" line="1050"/>
                    <scope line="1051"/>
                    <scope line="1054"/>
                    <scope line="1057"/>
                </method>
                <javadoc line="1062">
                    Get the role of this object.                    
                    <return>
                        an instance of &lt;code&gt;AccessibleRole&lt;/code&gt;
                          describing the role of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1067"/>
                <javadoc line="1070">
                    Get the &lt;code&gt;AccessibleValue&lt;/code&gt; associated with this
                      object.  In the implementation of the Java Accessibility
                      API for this class, return this object, which is
                      responsible for implementing the
                      &lt;code&gt;AccessibleValue&lt;/code&gt; interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="1078"/>
                <javadoc line="1081">
                    Get the accessible value of this object.                    
                    <return>
                        The current value of this object.                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="1085"/>
                <javadoc line="1088">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="1092">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <scope line="1093"/>
                    <scope line="1097"/>
                </method>
                <javadoc line="1101">
                    Get the minimum accessible value of this object.                    
                    <return>
                        The minimum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="1105"/>
                <javadoc line="1108">
                    Get the maximum accessible value of this object.                    
                    <return>
                        The maximum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="1112"/>
            </class>
        </class>
    </source>