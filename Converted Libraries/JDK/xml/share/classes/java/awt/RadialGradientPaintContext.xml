<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="RadialGradientPaintContext" line="7">
            <extends class="MultipleGradientPaintContext"/>
            <javadoc line="7">
                Provides the actual implementation for the RadialGradientPaint.
                  This is where the pixel processing is done.  A RadialGradienPaint
                  only supports circular gradients, but it should be possible to scale
                  the circle to look approximately elliptical, by means of a
                  gradient transform passed into the RadialGradientPaint constructor.                
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
            </javadoc>
            <declaration name="isSimpleFocus" type="boolean" line="16"/>
            <javadoc line="16">
                True when (focus == center).                
            </javadoc>
            <declaration name="isNonCyclic" type="boolean" line="20"/>
            <javadoc line="20">
                True when (cycleMethod == NO_CYCLE).                
            </javadoc>
            <declaration name="radius" type="float" line="24"/>
            <javadoc line="24">
                Radius of the outermost circle defining the 100% gradient stop.                
            </javadoc>
            <declaration name="centerX" type="float" line="28"/>
            <javadoc line="28">
                Variables representing center and focus points.                
            </javadoc>
            <declaration name="radiusSq" type="float" line="32"/>
            <javadoc line="32">
                Radius of the gradient circle squared.                
            </javadoc>
            <declaration name="constA" type="float" line="36"/>
            <javadoc line="36">
                Constant part of X, Y user space coordinates.                
            </javadoc>
            <declaration name="gDeltaDelta" type="float" line="40"/>
            <javadoc line="40">
                Constant second order delta for simple loop.                
            </javadoc>
            <declaration name="trivial" type="float" line="44"/>
            <javadoc line="44">
                This value represents the solution when focusX == X.  It is called
                  trivial because it is easier to calculate than the general case.                
            </javadoc>
            <declaration name="SCALEBACK" type="float" line="49"/>
            <javadoc line="49">
                Amount for offset when clamping focus.                
            </javadoc>
            <javadoc line="53">
                Constructor for RadialGradientPaintContext.                
                <param>
                    paint the {@code RadialGradientPaint} from which this context
                      is created                    
                </param>
                <param>
                    cm the {@code ColorModel} that receives
                      the {@code Paint} data (this is used only as a hint)                    
                </param>
                <param>
                    deviceBounds the device space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    userBounds the user space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    t the {@code AffineTransform} from user
                      space into device space (gradientTransform should be
                      concatenated with this)                    
                </param>
                <param>
                    hints the hints that the context object uses to choose
                      between rendering alternatives                    
                </param>
                <param>
                    cx the center X coordinate in user space of the circle defining
                      the gradient.  The last color of the gradient is mapped to
                      the perimeter of this circle.                    
                </param>
                <param>
                    cy the center Y coordinate in user space of the circle defining
                      the gradient.  The last color of the gradient is mapped to
                      the perimeter of this circle.                    
                </param>
                <param>
                    r the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fx the X coordinate in user space to which the first color
                      is mapped                    
                </param>
                <param>
                    fy the Y coordinate in user space to which the first color
                      is mapped                    
                </param>
                <param>
                    fractions the fractions specifying the gradient distribution                    
                </param>
                <param>
                    colors the gradient colors                    
                </param>
                <param>
                    cycleMethod either NO_CYCLE, REFLECT, or REPEAT                    
                </param>
                <param>
                    colorSpace which colorspace to use for interpolation,
                      either SRGB or LINEAR_RGB                    
                </param>
            </javadoc>
            <method name="RadialGradientPaintContext" type="constructor" line="86">
                <params>
                    <param name="paint" type="RadialGradientPaint"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="t" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="r" type="float"/>
                    <param name="fx" type="float"/>
                    <param name="fy" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                </params>
                <declaration name="dX" type="float" line="96"/>
                <declaration name="dY" type="float" line="97"/>
                <declaration name="distSq" type="double" line="98"/>
                <scope line="99">
                    <declaration name="scalefactor" type="float" line="100"/>
                </scope>
            </method>
            <javadoc line="111">
                Return a Raster containing the colors generated for the graphics
                  operation.                
                <param>
                    x,y,w,h the area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="fillRaster" type="void" line="117">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                This code works in the simplest of cases, where the focus == center
                  point, the gradient is noncyclic, and the gradient lookup method is
                  fast (single array index, no conversion necessary).                
            </javadoc>
            <method name="simpleNonCyclicFillRaster" type="void" line="130">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="rowX" type="float" line="131"/>
                <declaration name="rowY" type="float" line="132"/>
                <declaration name="gDeltaDelta" type="float" line="133"/>
                <declaration name="rgbclip" type="int" line="135"/>
                <scope line="136">
                    <declaration name="gRel" type="float" line="137"/>
                    <declaration name="gDelta" type="float" line="138"/>
                    <declaration name="i" type="int" line="139"/>
                    <scope line="140"/>
                    <scope line="146">
                        <declaration name="gIndex" type="int" line="147"/>
                        <scope line="148"/>
                        <scope line="151">
                            <declaration name="fIndex" type="float" line="152"/>
                            <declaration name="iIndex" type="int" line="153"/>
                            <declaration name="s0" type="float" line="154"/>
                            <declaration name="s1" type="float" line="155"/>
                        </scope>
                    </scope>
                    <scope line="164"/>
                </scope>
            </method>
            <declaration name="SQRT_LUT_SIZE" type="int" line="173"/>
            <declaration name="sqrtLut" type="float" line="174"/>
            <scope line="175">
                <scope line="176"/>
            </scope>
            <javadoc line="180">
                Fill the raster, cycling the gradient colors when a point falls outside
                  of the perimeter of the 100% stop circle.
                  This calculation first computes the intersection point of the line
                  from the focus through the current point in the raster, and the
                  perimeter of the gradient circle.
                  Then it determines the percentage distance of the current point along
                  that line (focus is 0%, perimeter is 100%).
                  Equation of a circle centered at (a,b) with radius r:
                  (x-a)^2 + (y-b)^2 = r^2
                  Equation of a line with slope m and y-intercept b:
                  y = mx + b
                  Replacing y in the circle equation and solving using the quadratic
                  formula produces the following set of equations.  Constant factors have
                  been extracted out of the inner loop.                
            </javadoc>
            <method name="cyclicCircularGradientFillRaster" type="void" line="196">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="constC" type="double" line="197"/>
                <declaration name="A" type="double" line="198"/>
                <declaration name="slope" type="double" line="199"/>
                <declaration name="solutionX" type="double" line="200"/>
                <declaration name="constX" type="float" line="201"/>
                <declaration name="constY" type="float" line="202"/>
                <declaration name="precalc2" type="float" line="203"/>
                <declaration name="precalc3" type="float" line="204"/>
                <declaration name="g" type="float" line="205"/>
                <declaration name="det" type="float" line="206"/>
                <declaration name="currentToFocusSq" type="float" line="207"/>
                <declaration name="intersectToFocusSq" type="float" line="208"/>
                <declaration name="deltaXSq" type="float" line="209"/>
                <declaration name="indexer" type="int" line="210"/>
                <declaration name="pixInc" type="int" line="211"/>
                <scope line="212">
                    <declaration name="X" type="float" line="213"/>
                    <declaration name="Y" type="float" line="214"/>
                    <scope line="215">
                        <scope line="216"/>
                        <scope line="221"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>