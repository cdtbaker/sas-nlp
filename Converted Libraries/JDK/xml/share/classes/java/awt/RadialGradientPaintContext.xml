<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="RadialGradientPaintContext" line="34">
            <extends class="MultipleGradientPaintContext"/>
            <comment line="303">
                SQRT_LUT_SIZE must be a power of 2 for the test above to work.                
            </comment>
            <javadoc line="34">
                Provides the actual implementation for the RadialGradientPaint.
                  This is where the pixel processing is done.  A RadialGradienPaint
                  only supports circular gradients, but it should be possible to scale
                  the circle to look approximately elliptical, by means of a
                  gradient transform passed into the RadialGradientPaint constructor.                
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
            </javadoc>
            <declaration name="isSimpleFocus" type="boolean" line="45"/>
            <javadoc line="45">
                True when (focus == center).                
            </javadoc>
            <declaration name="isNonCyclic" type="boolean" line="48"/>
            <javadoc line="48">
                True when (cycleMethod == NO_CYCLE).                
            </javadoc>
            <declaration name="radius" type="float" line="51"/>
            <javadoc line="51">
                Radius of the outermost circle defining the 100% gradient stop.                
            </javadoc>
            <declaration name="centerX" type="float" line="54"/>
            <javadoc line="54">
                Variables representing center and focus points.                
            </javadoc>
            <declaration name="radiusSq" type="float" line="57"/>
            <javadoc line="57">
                Radius of the gradient circle squared.                
            </javadoc>
            <declaration name="constA" type="float" line="60"/>
            <javadoc line="60">
                Constant part of X, Y user space coordinates.                
            </javadoc>
            <declaration name="gDeltaDelta" type="float" line="63"/>
            <javadoc line="63">
                Constant second order delta for simple loop.                
            </javadoc>
            <declaration name="trivial" type="float" line="66"/>
            <javadoc line="66">
                This value represents the solution when focusX == X.  It is called
                  trivial because it is easier to calculate than the general case.                
            </javadoc>
            <declaration name="SCALEBACK" type="float" line="72"/>
            <javadoc line="72">
                Amount for offset when clamping focus.                
            </javadoc>
            <javadoc line="75">
                Constructor for RadialGradientPaintContext.                
                <param>
                    paint the {@code RadialGradientPaint} from which this context
                      is created                    
                </param>
                <param>
                    cm the {@code ColorModel} that receives
                      the {@code Paint} data (this is used only as a hint)                    
                </param>
                <param>
                    deviceBounds the device space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    userBounds the user space bounding box of the
                      graphics primitive being rendered                    
                </param>
                <param>
                    t the {@code AffineTransform} from user
                      space into device space (gradientTransform should be
                      concatenated with this)                    
                </param>
                <param>
                    hints the hints that the context object uses to choose
                      between rendering alternatives                    
                </param>
                <param>
                    cx the center X coordinate in user space of the circle defining
                      the gradient.  The last color of the gradient is mapped to
                      the perimeter of this circle.                    
                </param>
                <param>
                    cy the center Y coordinate in user space of the circle defining
                      the gradient.  The last color of the gradient is mapped to
                      the perimeter of this circle.                    
                </param>
                <param>
                    r the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fx the X coordinate in user space to which the first color
                      is mapped                    
                </param>
                <param>
                    fy the Y coordinate in user space to which the first color
                      is mapped                    
                </param>
                <param>
                    fractions the fractions specifying the gradient distribution                    
                </param>
                <param>
                    colors the gradient colors                    
                </param>
                <param>
                    cycleMethod either NO_CYCLE, REFLECT, or REPEAT                    
                </param>
                <param>
                    colorSpace which colorspace to use for interpolation,
                      either SRGB or LINEAR_RGB                    
                </param>
            </javadoc>
            <method name="RadialGradientPaintContext" type="constructor" line="122">
                <params>
                    <param name="paint" type="RadialGradientPaint"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="t" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="r" type="float"/>
                    <param name="fx" type="float"/>
                    <param name="fy" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                </params>
                <comment line="127">
                    copy some parameters                    
                </comment>
                <comment line="137">
                    for use in the quadractic equation                    
                </comment>
                <comment line="145">
                    test if distance from focus to center is greater than the radius                    
                </comment>
                <comment line="147">
                    clamp focus to radius                    
                </comment>
                <comment line="155">
                    calculate the solution to be used in the case where X == focusX
                     in cyclicCircularGradientFillRaster()                    
                </comment>
                <comment line="159">
                    constant parts of X, Y user space coordinates                    
                </comment>
                <comment line="163">
                    constant second order delta for simple loop                    
                </comment>
                <declaration name="dX" type="float" line="139"/>
                <declaration name="dY" type="float" line="140"/>
                <declaration name="distSq" type="double" line="142"/>
                <scope line="145">
                    <declaration name="scalefactor" type="float" line="147"/>
                </scope>
            </method>
            <javadoc line="166">
                Return a Raster containing the colors generated for the graphics
                  operation.                
                <param>
                    x,y,w,h the area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="fillRaster" type="void" line="175">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="176"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                This code works in the simplest of cases, where the focus == center
                  point, the gradient is noncyclic, and the gradient lookup method is
                  fast (single array index, no conversion necessary).                
            </javadoc>
            <method name="simpleNonCyclicFillRaster" type="void" line="190">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="192">
                    We calculate sqrt(X^2 + Y^2) relative to the radius
                     size to get the fraction for the color to use.
                    
                     Each step along the scanline adds (a00, a10) to (X, Y).
                     If we precalculate:
                       gRel = X^2+Y^2
                     for the start of the row, then for each step we need to
                     calculate:
                       gRel&apos; = (X+a00)^2 + (Y+a10)^2
                             = X^2 + 2Xa00 + a00^2 + Y^2 + 2Ya10 + a10^2
                             = (X^2+Y^2) + 2(Xa00+Ya10) + (a00^2+a10^2)
                             = gRel + 2(Xa00+Ya10) + (a00^2+a10^2)
                             = gRel + 2DP + SD
                     (where DP = dot product between X,Y and a00,a10
                      and   SD = dot product square of the delta vector)
                     For the step after that we get:
                       gRel&apos;&apos; = (X+2a00)^2 + (Y+2a10)^2
                              = X^2 + 4Xa00 + 4a00^2 + Y^2 + 4Ya10 + 4a10^2
                              = (X^2+Y^2) + 4(Xa00+Ya10) + 4(a00^2+a10^2)
                              = gRel  + 4DP + 4SD
                              = gRel&apos; + 2DP + 3SD
                     The increment changed by:
                         (gRel&apos;&apos; - gRel&apos;) - (gRel&apos; - gRel)
                       = (2DP + 3SD) - (2DP + SD)
                       = 2SD
                     Note that this value depends only on the (inverse of the)
                     transformation matrix and so is a constant for the loop.
                     To make this all relative to the unit circle, we need to
                     divide all values as follows:
                       [XY] = radius
                       gRel = radiusSq
                       DP   = radiusSq
                       SD   = radiusSq                    
                </comment>
                <comment line="226">
                    coordinates of UL corner in &quot;user space&quot; relative to center                    
                </comment>
                <comment line="230">
                    second order delta calculated in constructor                    
                </comment>
                <comment line="233">
                    adjust is (scan-w) of pixels array, we need (scan)                    
                </comment>
                <comment line="236">
                    rgb of the 1.0 color used when the distance exceeds gradient radius                    
                </comment>
                <comment line="240">
                    these values depend on the coordinates of the start of the row                    
                </comment>
                <comment line="245">
                    Use optimized loops for any cases where gRel &gt;= 1.
                     We do not need to calculate sqrt(gRel) for these
                     values since sqrt(N&gt;=1) == (M&gt;=1).
                     Note that gRel follows a parabola which can only be &lt; 1
                     for a small region around the center on each scanline. In
                     particular:
                       gDeltaDelta is always positive
                       gDelta is &lt;0 until it crosses the midpoint, then &gt;0
                     To the left and right of that region, it will always be
                     &gt;=1 out to infinity, so we can process the line in 3
                     regions:
                       out to the left  - quick fill until gRel &lt; 1, updating gRel
                       in the heart     - slow fraction=sqrt fill while gRel &lt; 1
                       out to the right - quick fill rest of scanline, ignore gRel                    
                </comment>
                <comment line="261">
                    Quick fill for &quot;out to the left&quot;                    
                </comment>
                <comment line="268">
                    Slow fill for &quot;in the heart&quot;                    
                </comment>
                <comment line="283">
                    store the color at this point                    
                </comment>
                <comment line="286">
                    incremental calculation                    
                </comment>
                <comment line="291">
                    Quick fill to end of line for &quot;out to the right&quot;                    
                </comment>
                <declaration name="rowX" type="float" line="226"/>
                <declaration name="rowY" type="float" line="227"/>
                <declaration name="gDeltaDelta" type="float" line="230"/>
                <declaration name="rgbclip" type="int" line="236"/>
                <scope line="238">
                    <declaration name="gRel" type="float" line="240"/>
                    <declaration name="gDelta" type="float" line="241"/>
                    <declaration name="i" type="int" line="259"/>
                    <scope line="261"/>
                    <scope line="268">
                        <declaration name="gIndex" type="int" line="269"/>
                        <scope line="271"/>
                        <scope line="273">
                            <declaration name="fIndex" type="float" line="274"/>
                            <declaration name="iIndex" type="int" line="275"/>
                            <declaration name="s0" type="float" line="276"/>
                            <declaration name="s1" type="float" line="277"/>
                        </scope>
                    </scope>
                    <scope line="291"/>
                </scope>
            </method>
            <declaration name="SQRT_LUT_SIZE" type="int" line="303"/>
            <declaration name="sqrtLut" type="float" line="304"/>
            <scope line="305">
                <scope line="306"/>
            </scope>
            <javadoc line="311">
                Fill the raster, cycling the gradient colors when a point falls outside
                  of the perimeter of the 100% stop circle.
                  This calculation first computes the intersection point of the line
                  from the focus through the current point in the raster, and the
                  perimeter of the gradient circle.
                  Then it determines the percentage distance of the current point along
                  that line (focus is 0%, perimeter is 100%).
                  Equation of a circle centered at (a,b) with radius r:
                  (x-a)^2 + (y-b)^2 = r^2
                  Equation of a line with slope m and y-intercept b:
                  y = mx + b
                  Replacing y in the circle equation and solving using the quadratic
                  formula produces the following set of equations.  Constant factors have
                  been extracted out of the inner loop.                
            </javadoc>
            <method name="cyclicCircularGradientFillRaster" type="void" line="334">
                <params>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="adjust" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="336">
                    constant part of the C factor of the quadratic equation                    
                </comment>
                <comment line="340">
                    coefficients of the quadratic equation (Ax^2 + Bx + C = 0)                    
                </comment>
                <comment line="343">
                    slope and y-intercept of the focus-perimeter line                    
                </comment>
                <comment line="346">
                    intersection with circle X,Y coordinate                    
                </comment>
                <comment line="349">
                    constant parts of X, Y coordinates                    
                </comment>
                <comment line="353">
                    constants in inner loop quadratic formula                    
                </comment>
                <comment line="357">
                    value between 0 and 1 specifying position in the gradient                    
                </comment>
                <comment line="360">
                    determinant of quadratic formula (should always be &gt; 0)                    
                </comment>
                <comment line="363">
                    sq distance from the current point to focus                    
                </comment>
                <comment line="366">
                    sq distance from the intersect point to focus                    
                </comment>
                <comment line="369">
                    temp variables for change in X,Y squared                    
                </comment>
                <comment line="372">
                    used to index pixels array                    
                </comment>
                <comment line="375">
                    incremental index change for pixels array                    
                </comment>
                <comment line="378">
                    for every row                    
                </comment>
                <comment line="381">
                    user space point; these are constant from column to column                    
                </comment>
                <comment line="385">
                    for every column (inner loop begins here)                    
                </comment>
                <comment line="389">
                    special case to avoid divide by zero                    
                </comment>
                <comment line="394">
                    slope and y-intercept of the focus-perimeter line                    
                </comment>
                <comment line="398">
                    use the quadratic formula to calculate the
                     intersection point                    
                </comment>
                <comment line="407">
                    choose the positive or negative root depending
                     on where the X coord lies with respect to the focus                    
                </comment>
                <comment line="410">
                    divisor                    
                </comment>
                <comment line="414">
                    Calculate the square of the distance from the current point
                     to the focus and the square of the distance from the
                     intersection point to the focus. Want the squares so we can
                     do 1 square root after division instead of 2 before.                    
                </comment>
                <comment line="435">
                    get the percentage (0-1) of the current point along the
                     focus-circumference line                    
                </comment>
                <comment line="439">
                    store the color at this point                    
                </comment>
                <comment line="442">
                    incremental change in X, Y                    
                </comment>
                <comment line="445">
                    end inner loop                    
                </comment>
                <comment line="448">
                    end outer loop                    
                </comment>
                <declaration name="constC" type="double" line="336"/>
                <declaration name="A" type="double" line="340"/>
                <declaration name="slope" type="double" line="343"/>
                <declaration name="solutionX" type="double" line="346"/>
                <declaration name="constX" type="float" line="349"/>
                <declaration name="constY" type="float" line="350"/>
                <declaration name="precalc2" type="float" line="353"/>
                <declaration name="precalc3" type="float" line="354"/>
                <declaration name="g" type="float" line="357"/>
                <declaration name="det" type="float" line="360"/>
                <declaration name="currentToFocusSq" type="float" line="363"/>
                <declaration name="intersectToFocusSq" type="float" line="366"/>
                <declaration name="deltaXSq" type="float" line="369"/>
                <declaration name="indexer" type="int" line="372"/>
                <declaration name="pixInc" type="int" line="375"/>
                <scope line="378">
                    <declaration name="X" type="float" line="381"/>
                    <declaration name="Y" type="float" line="382"/>
                    <scope line="385">
                        <scope line="387"/>
                        <scope line="392"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>