<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.FramePeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="javax.accessibility"/>
        <class name="Frame" line="43">
            <extends class="Window"/>
            <comment line="138">
                Note: These are being obsoleted;  programs should use the Cursor class
                 variables going forward. See Cursor and Component.setCursor.                
            </comment>
            <comment line="344">
                                
            </comment>
            <comment line="346">
                XXX: uwe: abuse old field for now
                 will need to take care of serialization                
            </comment>
            <comment line="350">
                The Windows owned by the Frame.
                 Note: in 1.2 this has been superceded by Window.ownedWindowList
                
                 @serial
                 @see java.awt.Window#ownedWindowList                
            </comment>
            <comment line="362">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="1154">
                Serialization support.  If there&apos;s a MenuBar we restore
                 its (transient) parent field here.  Likewise for top level
                 windows that are &quot;owned&quot; by this frame.                
            </comment>
            <comment line="1257">
                --- Accessibility Support ---                
            </comment>
            <comment line="1322">
                inner class AccessibleAWTFrame                
            </comment>
            <implements interface="MenuContainer"/>
            <javadoc line="43">
                A &lt;code&gt;Frame&lt;/code&gt; is a top-level window with a title and a border.
                  &lt;p&gt;
                  The size of the frame includes any area designated for the
                  border.  The dimensions of the border area may be obtained
                  using the &lt;code&gt;getInsets&lt;/code&gt; method, however, since
                  these dimensions are platform-dependent, a valid insets
                  value cannot be obtained until the frame is made displayable
                  by either calling &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;.
                  Since the border area is included in the overall size of the
                  frame, the border effectively obscures a portion of the frame,
                  constraining the area available for rendering and/or displaying
                  subcomponents to the rectangle which has an upper-left corner
                  location of &lt;code&gt;(insets.left, insets.top)&lt;/code&gt;, and has a size of
                  &lt;code&gt;width - (insets.left + insets.right)&lt;/code&gt; by
                  &lt;code&gt;height - (insets.top + insets.bottom)&lt;/code&gt;.
                  &lt;p&gt;
                  The default layout for a frame is &lt;code&gt;BorderLayout&lt;/code&gt;.
                  &lt;p&gt;
                  A frame may have its native decorations (i.e. &lt;code&gt;Frame&lt;/code&gt;
                  and &lt;code&gt;Titlebar&lt;/code&gt;) turned off
                  with &lt;code&gt;setUndecorated&lt;/code&gt;. This can only be done while the frame
                  is not {@link Component#isDisplayable() displayable}.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a &lt;code&gt;Frame&lt;/code&gt;
                  on a different screen device by constructing the &lt;code&gt;Frame&lt;/code&gt;
                  with {@link #Frame(GraphicsConfiguration)} or{@link #Frame(String title, GraphicsConfiguration)}.  The
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; object is one of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects of the target screen
                  device.
                  &lt;p&gt;
                  In a virtual device multi-screen environment in which the desktop
                  area could span multiple physical screen devices, the bounds of all
                  configurations are relative to the virtual-coordinate system.  The
                  origin of the virtual-coordinate system is at the upper left-hand
                  corner of the primary physical screen.  Depending on the location
                  of the primary screen in the virtual device, negative coordinates
                  are possible, as shown in the following figure.
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/MultiScreen.gif&quot;
                  alt=&quot;Diagram of virtual device encompassing three physical screens and one primary physical screen. The primary physical screen
                  shows (0,0) coords while a different physical screen shows (-80,-100) coords.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  In such an environment, when calling &lt;code&gt;setLocation&lt;/code&gt;,
                  you must pass a virtual coordinate to this method.  Similarly,
                  calling &lt;code&gt;getLocationOnScreen&lt;/code&gt; on a &lt;code&gt;Frame&lt;/code&gt;
                  returns virtual device coordinates.  Call the &lt;code&gt;getBounds&lt;/code&gt;
                  method of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; to find its origin in
                  the virtual coordinate system.
                  &lt;p&gt;
                  The following code sets the
                  location of the &lt;code&gt;Frame&lt;/code&gt; at (10, 10) relative
                  to the origin of the physical screen of the corresponding
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.  If the bounds of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not taken into account, the
                  &lt;code&gt;Frame&lt;/code&gt; location would be set at (10, 10) relative to the
                  virtual-coordinate system and would appear on the primary physical
                  screen, which might be different from the physical screen of the
                  specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  &lt;pre&gt;
                  Frame f = new Frame(GraphicsConfiguration gc);
                  Rectangle bounds = gc.getBounds();
                  f.setLocation(10 + bounds.x, 10 + bounds.y);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Frames are capable of generating the following types of
                  &lt;code&gt;WindowEvent&lt;/code&gt;s:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_OPENED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_CLOSING&lt;/code&gt;:
                  &lt;br&gt;If the program doesn&apos;t
                  explicitly hide or dispose the window while processing
                  this event, the window close operation is canceled.
                  &lt;li&gt;&lt;code&gt;WINDOW_CLOSED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_ICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_DEICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_ACTIVATED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_DEACTIVATED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_GAINED_FOCUS&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_LOST_FOCUS&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WINDOW_STATE_CHANGED&lt;/code&gt;
                  &lt;/ul&gt;                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    WindowEvent                    
                </see>
                <see>
                    Window#addWindowListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_CURSOR" type="int" line="141"/>
            <javadoc line="141">
                @deprecated   replaced by &lt;code&gt;Cursor.DEFAULT_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="CROSSHAIR_CURSOR" type="int" line="148"/>
            <javadoc line="148">
                @deprecated   replaced by &lt;code&gt;Cursor.CROSSHAIR_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="TEXT_CURSOR" type="int" line="154"/>
            <javadoc line="154">
                @deprecated   replaced by &lt;code&gt;Cursor.TEXT_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="WAIT_CURSOR" type="int" line="160"/>
            <javadoc line="160">
                @deprecated   replaced by &lt;code&gt;Cursor.WAIT_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="SW_RESIZE_CURSOR" type="int" line="166"/>
            <javadoc line="166">
                @deprecated   replaced by &lt;code&gt;Cursor.SW_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="SE_RESIZE_CURSOR" type="int" line="172"/>
            <javadoc line="172">
                @deprecated   replaced by &lt;code&gt;Cursor.SE_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="NW_RESIZE_CURSOR" type="int" line="178"/>
            <javadoc line="178">
                @deprecated   replaced by &lt;code&gt;Cursor.NW_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="NE_RESIZE_CURSOR" type="int" line="184"/>
            <javadoc line="184">
                @deprecated   replaced by &lt;code&gt;Cursor.NE_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="N_RESIZE_CURSOR" type="int" line="190"/>
            <javadoc line="190">
                @deprecated   replaced by &lt;code&gt;Cursor.N_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="S_RESIZE_CURSOR" type="int" line="196"/>
            <javadoc line="196">
                @deprecated   replaced by &lt;code&gt;Cursor.S_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="W_RESIZE_CURSOR" type="int" line="202"/>
            <javadoc line="202">
                @deprecated   replaced by &lt;code&gt;Cursor.W_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="E_RESIZE_CURSOR" type="int" line="208"/>
            <javadoc line="208">
                @deprecated   replaced by &lt;code&gt;Cursor.E_RESIZE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="HAND_CURSOR" type="int" line="214"/>
            <javadoc line="214">
                @deprecated   replaced by &lt;code&gt;Cursor.HAND_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="MOVE_CURSOR" type="int" line="220"/>
            <javadoc line="220">
                @deprecated   replaced by &lt;code&gt;Cursor.MOVE_CURSOR&lt;/code&gt;.                
            </javadoc>
            <declaration name="NORMAL" type="int" line="227"/>
            <javadoc line="227">
                Frame is in the &quot;normal&quot; state.  This symbolic constant names a
                  frame state with all state bits cleared.                
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
            </javadoc>
            <declaration name="ICONIFIED" type="int" line="235"/>
            <javadoc line="235">
                This state bit indicates that frame is iconified.                
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
            </javadoc>
            <declaration name="MAXIMIZED_HORIZ" type="int" line="242"/>
            <javadoc line="242">
                This state bit indicates that frame is maximized in the
                  horizontal direction.                
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="MAXIMIZED_VERT" type="int" line="251"/>
            <javadoc line="251">
                This state bit indicates that frame is maximized in the
                  vertical direction.                
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="MAXIMIZED_BOTH" type="int" line="260"/>
            <javadoc line="260">
                This state bit mask indicates that frame is fully maximized
                  (that is both horizontally and vertically).  It is just a
                  convenience alias for
                  &lt;code&gt;MAXIMIZED_VERT&amp;nbsp;|&amp;nbsp;MAXIMIZED_HORIZ&lt;/code&gt;.
                  &lt;p&gt;Note that the correct test for frame being fully maximized is
                  &lt;pre&gt;
                  (state &amp; Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH
                  &lt;/pre&gt;
                  &lt;p&gt;To test is frame is maximized in &lt;em&gt;some&lt;/em&gt; direction use
                  &lt;pre&gt;
                  (state &amp; Frame.MAXIMIZED_BOTH) != 0
                  &lt;/pre&gt;                
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="maximizedBounds" type="Rectangle" line="282"/>
            <javadoc line="282">
                Maximized bounds for this frame.                
                <see>
                    #setMaximizedBounds(Rectangle)                    
                </see>
                <see>
                    #getMaximizedBounds                    
                </see>
                <serial>
                                        
                </serial>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="title" type="String" line="292"/>
            <javadoc line="292">
                This is the title of the frame.  It can be changed
                  at any time.  &lt;code&gt;title&lt;/code&gt; can be null and if
                  this is the case the &lt;code&gt;title&lt;/code&gt; = &quot;&quot;.                
                <serial>
                                        
                </serial>
                <see>
                    #getTitle                    
                </see>
                <see>
                    #setTitle(String)                    
                </see>
            </javadoc>
            <declaration name="menuBar" type="MenuBar" line="303"/>
            <javadoc line="303">
                The frames menubar.  If &lt;code&gt;menuBar&lt;/code&gt; = null
                  the frame will not have a menubar.                
                <serial>
                                        
                </serial>
                <see>
                    #getMenuBar                    
                </see>
                <see>
                    #setMenuBar(MenuBar)                    
                </see>
            </javadoc>
            <declaration name="resizable" type="boolean" line="313"/>
            <javadoc line="313">
                This field indicates whether the frame is resizable.
                  This property can be changed at any time.
                  &lt;code&gt;resizable&lt;/code&gt; will be true if the frame is
                  resizable, otherwise it will be false.                
                <serial>
                                        
                </serial>
                <see>
                    #isResizable()                    
                </see>
            </javadoc>
            <declaration name="undecorated" type="boolean" line="324"/>
            <javadoc line="324">
                This field indicates whether the frame is undecorated.
                  This property can only be changed while the frame is not displayable.
                  &lt;code&gt;undecorated&lt;/code&gt; will be true if the frame is
                  undecorated, otherwise it will be false.                
                <serial>
                                        
                </serial>
                <see>
                    #setUndecorated(boolean)                    
                </see>
                <see>
                    #isUndecorated()                    
                </see>
                <see>
                    Component#isDisplayable()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="mbManagement" type="boolean" line="338"/>
            <javadoc line="338">
                &lt;code&gt;mbManagement&lt;/code&gt; is only used by the Motif implementation.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="state" type="int" line="347"/>
            <declaration name="ownedWindows" type="Vector" line="356"/>
            <declaration name="base" type="String" line="358"/>
            <declaration name="nameCounter" type="int" line="359"/>
            <declaration name="serialVersionUID" type="long" line="364"/>
            <scope line="366">
                <scope line="369"/>
            </scope>
            <javadoc line="374">
                Constructs a new instance of &lt;code&gt;Frame&lt;/code&gt; that is
                  initially invisible.  The title of the &lt;code&gt;Frame&lt;/code&gt;
                  is empty.                
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible(boolean)                    
                </see>
            </javadoc>
            <method name="Frame" type="constructor" line="384"/>
            <javadoc line="388">
                Constructs a new, initially invisible {@code Frame} with the
                  specified {@code GraphicsConfiguration}.                
                <param>
                    gc the <code>GraphicsConfiguration</code>
                      of the target screen device. If <code>gc</code>
                      is <code>null</code>, the system default
                      <code>GraphicsConfiguration</code> is assumed.                    
                </param>
                <exception>
                    IllegalArgumentException if
                      <code>gc</code> is not from a screen device.                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="Frame" type="constructor" line="403">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="407">
                Constructs a new, initially invisible &lt;code&gt;Frame&lt;/code&gt; object
                  with the specified title.                
                <param>
                    title the title to be displayed in the frame's border.
                      A <code>null</code> value
                      is treated as an empty string, "".                    
                </param>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
                <see>
                    java.awt.Component#setSize                    
                </see>
                <see>
                    java.awt.Component#setVisible(boolean)                    
                </see>
                <see>
                    java.awt.GraphicsConfiguration#getBounds                    
                </see>
            </javadoc>
            <method name="Frame" type="constructor" line="420">
                <params>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="424">
                Constructs a new, initially invisible &lt;code&gt;Frame&lt;/code&gt; object
                  with the specified title and a
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <param>
                    title the title to be displayed in the frame's border.
                      A <code>null</code> value
                      is treated as an empty string, "".                    
                </param>
                <param>
                    gc the <code>GraphicsConfiguration</code>
                      of the target screen device.  If <code>gc</code> is
                      <code>null</code>, the system default
                      <code>GraphicsConfiguration</code> is assumed.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>gc</code>
                      is not from a screen device.                    
                </exception>
                <exception>
                    HeadlessException when
                      <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
                <see>
                    java.awt.Component#setSize                    
                </see>
                <see>
                    java.awt.Component#setVisible(boolean)                    
                </see>
                <see>
                    java.awt.GraphicsConfiguration#getBounds                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="Frame" type="constructor" line="445">
                <params>
                    <param name="title" type="String"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <method name="init" type="void" line="450">
                <params>
                    <param name="title" type="String"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="455">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="459">
                <scope line="460"/>
            </method>
            <javadoc line="465">
                Makes this Frame displayable by connecting it to
                  a native screen resource.  Making a frame displayable will
                  cause any of its children to be made displayable.
                  This method is called internally by the toolkit and should
                  not be called directly by programs.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #removeNotify                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="474">
                <scope line="475">
                    <scope line="476"/>
                    <declaration name="p" type="FramePeer" line="479"/>
                    <declaration name="menuBar" type="MenuBar" line="480"/>
                    <scope line="481"/>
                </scope>
            </method>
            <javadoc line="491">
                Gets the title of the frame.  The title is displayed in the
                  frame&apos;s border.                
                <return>
                    the title of this frame, or an empty string ("")
                      if this frame doesn't have a title.                    
                </return>
                <see>
                    #setTitle(String)                    
                </see>
            </javadoc>
            <method name="getTitle" type="String" line="498"/>
            <javadoc line="502">
                Sets the title for this frame to the specified string.                
                <param>
                    title the title to be displayed in the frame's border.
                      A <code>null</code> value
                      is treated as an empty string, "".                    
                </param>
                <see>
                    #getTitle                    
                </see>
            </javadoc>
            <method name="setTitle" type="void" line="509">
                <params>
                    <param name="title" type="String"/>
                </params>
                <declaration name="oldTitle" type="String" line="510"/>
                <scope line="511"/>
                <scope line="516">
                    <declaration name="peer" type="FramePeer" line="518"/>
                    <scope line="519"/>
                </scope>
            </method>
            <javadoc line="526">
                Returns the image to be displayed as the icon for this frame.
                  &lt;p&gt;
                  This method is obsolete and kept for backward compatibility
                  only. Use {@link Window#getIconImages Window.getIconImages()} instead.
                  &lt;p&gt;
                  If a list of several images was specified as a Window&apos;s icon,
                  this method will return the first item of the list.                
                <return>
                    the icon image for this frame, or <code>null</code>
                      if this frame doesn't have an icon image.                    
                </return>
                <see>
                    #setIconImage(Image)                    
                </see>
                <see>
                    Window#getIconImages()                    
                </see>
                <see>
                    Window#setIconImages                    
                </see>
            </javadoc>
            <method name="getIconImage" type="Image" line="541">
                <declaration name="icons" type="java.util.List&lt;Image&gt;" line="542"/>
                <scope line="543">
                    <scope line="544"/>
                </scope>
            </method>
            <javadoc line="551">
                {@inheritDoc}                
            </javadoc>
            <method name="setIconImage" type="void" line="554">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="558">
                Gets the menu bar for this frame.                
                <return>
                    the menu bar for this frame, or <code>null</code>
                      if this frame doesn't have a menu bar.                    
                </return>
                <see>
                    #setMenuBar(MenuBar)                    
                </see>
            </javadoc>
            <method name="getMenuBar" type="MenuBar" line="564"/>
            <javadoc line="568">
                Sets the menu bar for this frame to the specified menu bar.                
                <param>
                    mb the menu bar being set.
                      If this parameter is <code>null</code> then any
                      existing menu bar on this frame is removed.                    
                </param>
                <see>
                    #getMenuBar                    
                </see>
            </javadoc>
            <method name="setMenuBar" type="void" line="575">
                <params>
                    <param name="mb" type="MenuBar"/>
                </params>
                <scope line="576">
                    <scope line="577"/>
                    <scope line="580"/>
                    <scope line="583"/>
                    <scope line="587">
                        <declaration name="peer" type="FramePeer" line="590"/>
                        <scope line="591"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="601">
                Indicates whether this frame is resizable by the user.
                  By default, all frames are initially resizable.                
                <return>
                    <code>true</code> if the user can resize this frame;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.Frame#setResizable(boolean)                    
                </see>
            </javadoc>
            <method name="isResizable" type="boolean" line="608"/>
            <javadoc line="612">
                Sets whether this frame is resizable by the user.                
                <param>
                    resizable   <code>true</code> if this frame is resizable;
                      <code>false</code> otherwise.                    
                </param>
                <see>
                    java.awt.Frame#isResizable                    
                </see>
            </javadoc>
            <method name="setResizable" type="void" line="618">
                <params>
                    <param name="resizable" type="boolean"/>
                </params>
                <comment line="632">
                    On some platforms, changing the resizable state affects
                     the insets of the Frame. If we could, we&apos;d call invalidate()
                     from the peer, but we need to guarantee that we&apos;re not holding
                     the Frame lock when we call invalidate().                    
                </comment>
                <declaration name="oldResizable" type="boolean" line="619"/>
                <declaration name="testvalid" type="boolean" line="620"/>
                <scope line="622">
                    <declaration name="peer" type="FramePeer" line="624"/>
                    <scope line="625"/>
                </scope>
                <scope line="635"/>
            </method>
            <javadoc line="642">
                Sets the state of this frame (obsolete).
                  &lt;p&gt;
                  In older versions of JDK a frame state could only be NORMAL or
                  ICONIFIED.  Since JDK 1.4 set of supported frame states is
                  expanded and frame state is represented as a bitwise mask.
                  &lt;p&gt;
                  For compatibility with applications developed
                  earlier this method still accepts{@code Frame.NORMAL} and{@code Frame.ICONIFIED} only.  The iconic
                  state of the frame is only changed, other aspects
                  of frame state are not affected by this method. If
                  the state passed to this method is neither {@codeFrame.NORMAL} nor {@code Frame.ICONIFIED} the
                  method performs no actions at all.
                  &lt;p&gt;Note that if the state is not supported on a
                  given platform, neither the state nor the return
                  value of the {@link #getState} method will be
                  changed. The application may determine whether a
                  specific state is supported via the {@link java.awt.Toolkit#isFrameStateSupported} method.
                  &lt;p&gt;&lt;b&gt;If the frame is currently visible on the
                  screen&lt;/b&gt; (the {@link #isShowing} method returns{@code true}), the developer should examine the
                  return value of the  {@link java.awt.event.WindowEvent#getNewState} method of
                  the {@code WindowEvent} received through the{@link java.awt.event.WindowStateListener} to
                  determine that the state has actually been
                  changed.
                  &lt;p&gt;&lt;b&gt;If the frame is not visible on the
                  screen&lt;/b&gt;, the events may or may not be
                  generated.  In this case the developer may assume
                  that the state changes immediately after this
                  method returns.  Later, when the {@codesetVisible(true)} method is invoked, the frame
                  will attempt to apply this state. Receiving any{@link java.awt.event.WindowEvent#WINDOW_STATE_CHANGED}events is not guaranteed in this case also.                
                <param>
                    state either <code>Frame.NORMAL</code> or
                      <code>Frame.ICONIFIED</code>.                    
                </param>
                <see>
                    #setExtendedState(int)                    
                </see>
                <see>
                    java.awt.Window#addWindowStateListener                    
                </see>
            </javadoc>
            <method name="setState" type="void" line="689">
                <params>
                    <param name="state" type="int"/>
                </params>
                <declaration name="current" type="int" line="690"/>
                <scope line="691"/>
                <scope line="694"/>
            </method>
            <javadoc line="699">
                Sets the state of this frame. The state is
                  represented as a bitwise mask.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;NORMAL&lt;/code&gt;
                  &lt;br&gt;Indicates that no state bits are set.
                  &lt;li&gt;&lt;code&gt;ICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_BOTH&lt;/code&gt;
                  &lt;br&gt;Concatenates &lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  and &lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the state is not supported on a
                  given platform, neither the state nor the return
                  value of the {@link #getExtendedState} method will
                  be changed. The application may determine whether
                  a specific state is supported via the {@link java.awt.Toolkit#isFrameStateSupported} method.
                  &lt;p&gt;&lt;b&gt;If the frame is currently visible on the
                  screen&lt;/b&gt; (the {@link #isShowing} method returns{@code true}), the developer should examine the
                  return value of the {@link java.awt.event.WindowEvent#getNewState} method of
                  the {@code WindowEvent} received through the{@link java.awt.event.WindowStateListener} to
                  determine that the state has actually been
                  changed.
                  &lt;p&gt;&lt;b&gt;If the frame is not visible on the
                  screen&lt;/b&gt;, the events may or may not be
                  generated.  In this case the developer may assume
                  that the state changes immediately after this
                  method returns.  Later, when the {@codesetVisible(true)} method is invoked, the frame
                  will attempt to apply this state. Receiving any{@link java.awt.event.WindowEvent#WINDOW_STATE_CHANGED}events is not guaranteed in this case also.                
                <param>
                    state a bitwise mask of frame state constants                    
                </param>
                <since>
                    1.4                    
                </since>
                <see>
                    java.awt.Window#addWindowStateListener                    
                </see>
            </javadoc>
            <method name="setExtendedState" type="void" line="742">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="750">
                    peer.setState must be called outside of object lock
                     synchronization block to avoid possible deadlock                    
                </comment>
                <scope line="743"/>
                <scope line="746"/>
                <declaration name="peer" type="FramePeer" line="751"/>
                <scope line="752"/>
            </method>
            <method name="isFrameStateSupported" type="boolean" line="756">
                <params>
                    <param name="state" type="int"/>
                </params>
                <comment line="759">
                    * Toolkit.isFrameStateSupported returns always false
                     on compound state even if all parts are supported;
                     * if part of state is not supported, state is not supported;
                     * MAXIMIZED_BOTH is not a compound state.                    
                </comment>
                <scope line="757">
                    <scope line="763"/>
                    <scope line="765"/>
                </scope>
            </method>
            <javadoc line="773">
                Gets the state of this frame (obsolete).
                  &lt;p&gt;
                  In older versions of JDK a frame state could only be NORMAL or
                  ICONIFIED.  Since JDK 1.4 set of supported frame states is
                  expanded and frame state is represented as a bitwise mask.
                  &lt;p&gt;
                  For compatibility with old programs this method still returns
                  &lt;code&gt;Frame.NORMAL&lt;/code&gt; and &lt;code&gt;Frame.ICONIFIED&lt;/code&gt; but
                  it only reports the iconic state of the frame, other aspects of
                  frame state are not reported by this method.                
                <return>
                    <code>Frame.NORMAL</code> or <code>Frame.ICONIFIED</code>.                    
                </return>
                <see>
                    #setState(int)                    
                </see>
                <see>
                    #getExtendedState                    
                </see>
            </javadoc>
            <method name="getState" type="int" line="789"/>
            <javadoc line="794">
                Gets the state of this frame. The state is
                  represented as a bitwise mask.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;NORMAL&lt;/code&gt;
                  &lt;br&gt;Indicates that no state bits are set.
                  &lt;li&gt;&lt;code&gt;ICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_BOTH&lt;/code&gt;
                  &lt;br&gt;Concatenates &lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  and &lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;.
                  &lt;/ul&gt;                
                <return>
                    a bitwise mask of frame state constants                    
                </return>
                <see>
                    #setExtendedState(int)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getExtendedState" type="int" line="812">
                <scope line="813"/>
            </method>
            <scope line="818">
                <anonymous_class line="820">
                    <method name="setExtendedState" type="void" line="821">
                        <params>
                            <param name="frame" type="Frame"/>
                            <param name="state" type="int"/>
                        </params>
                        <scope line="822"/>
                    </method>
                    <method name="getExtendedState" type="int" line="826">
                        <params>
                            <param name="frame" type="Frame"/>
                        </params>
                        <scope line="827"/>
                    </method>
                    <method name="getMaximizedBounds" type="Rectangle" line="831">
                        <params>
                            <param name="frame" type="Frame"/>
                        </params>
                        <scope line="832"/>
                    </method>
                </anonymous_class>
            </scope>
            <javadoc line="840">
                Sets the maximized bounds for this frame.
                  &lt;p&gt;
                  When a frame is in maximized state the system supplies some
                  defaults bounds.  This method allows some or all of those
                  system supplied values to be overridden.
                  &lt;p&gt;
                  If &lt;code&gt;bounds&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, accept bounds
                  supplied by the system.  If non-&lt;code&gt;null&lt;/code&gt; you can
                  override some of the system supplied values while accepting
                  others by setting those fields you want to accept from system
                  to &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
                  &lt;p&gt;
                  Note, the given maximized bounds are used as a hint for the native
                  system, because the underlying platform may not support setting the
                  location and/or size of the maximized windows.  If that is the case, the
                  provided values do not affect the appearance of the frame in the
                  maximized state.                
                <param>
                    bounds  bounds for the maximized state                    
                </param>
                <see>
                    #getMaximizedBounds()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setMaximizedBounds" type="void" line="863">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
                <scope line="864"/>
                <declaration name="peer" type="FramePeer" line="867"/>
                <scope line="868"/>
            </method>
            <javadoc line="873">
                Gets maximized bounds for this frame.
                  Some fields may contain &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; to indicate
                  that system supplied values for this field must be used.                
                <return>
                    maximized bounds for this frame;  may be <code>null</code>                    
                </return>
                <see>
                    #setMaximizedBounds(Rectangle)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMaximizedBounds" type="Rectangle" line="882">
                <scope line="883"/>
            </method>
            <javadoc line="889">
                Disables or enables decorations for this frame.
                  &lt;p&gt;
                  This method can only be called while the frame is not displayable. To
                  make this frame decorated, it must be opaque and have the default shape,
                  otherwise the {@code IllegalComponentStateException} will be thrown.
                  Refer to {@link Window#setShape}, {@link Window#setOpacity} and {@link Window#setBackground} for details                
                <param>
                    undecorated {@code true} if no frame decorations are to be
                      enabled; {@code false} if frame decorations are to be enabled                    
                </param>
                <throws>
                    IllegalComponentStateException if the frame is displayable                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and this frame does not have the default shape                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and this frame opacity is less than {@code 1.0f}                    
                </throws>
                <throws>
                    IllegalComponentStateException if {@code undecorated} is{@code false}, and the alpha value of this frame background
                      color is less than {@code 1.0f}                    
                </throws>
                <see>
                    #isUndecorated                    
                </see>
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    Window#getShape                    
                </see>
                <see>
                    Window#getOpacity                    
                </see>
                <see>
                    Window#getBackground                    
                </see>
                <see>
                    javax.swing.JFrame#setDefaultLookAndFeelDecorated(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setUndecorated" type="void" line="919">
                <params>
                    <param name="undecorated" type="boolean"/>
                </params>
                <comment line="921">
                                        
                </comment>
                <scope line="921">
                    <scope line="922"/>
                    <scope line="925">
                        <scope line="926"/>
                        <scope line="929"/>
                        <declaration name="bg" type="Color" line="932"/>
                        <scope line="933"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="941">
                Indicates whether this frame is undecorated.
                  By default, all frames are initially decorated.                
                <return>
                    <code>true</code> if frame is undecorated;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.Frame#setUndecorated(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isUndecorated" type="boolean" line="949"/>
            <javadoc line="953">
                {@inheritDoc}                
            </javadoc>
            <method name="setOpacity" type="void" line="957">
                <params>
                    <param name="opacity" type="float"/>
                </params>
                <scope line="958">
                    <scope line="959"/>
                </scope>
            </method>
            <javadoc line="966">
                {@inheritDoc}                
            </javadoc>
            <method name="setShape" type="void" line="970">
                <params>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="971">
                    <scope line="972"/>
                </scope>
            </method>
            <javadoc line="979">
                {@inheritDoc}                
            </javadoc>
            <method name="setBackground" type="void" line="983">
                <params>
                    <param name="bgColor" type="Color"/>
                </params>
                <scope line="984">
                    <scope line="985"/>
                </scope>
            </method>
            <javadoc line="992">
                Removes the specified menu bar from this frame.                
                <param>
                    m   the menu component to remove.
                      If <code>m</code> is <code>null</code>, then
                      no action is taken                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="998">
                <params>
                    <param name="m" type="MenuComponent"/>
                </params>
                <scope line="999"/>
                <scope line="1002">
                    <scope line="1003">
                        <declaration name="peer" type="FramePeer" line="1005"/>
                        <scope line="1006"/>
                    </scope>
                    <scope line="1013"/>
                </scope>
            </method>
            <javadoc line="1019">
                Makes this Frame undisplayable by removing its connection
                  to its native screen resource. Making a Frame undisplayable
                  will cause any of its children to be made undisplayable.
                  This method is called by the toolkit internally and should
                  not be called directly by programs.                
                <see>
                    Component#isDisplayable                    
                </see>
                <see>
                    #addNotify                    
                </see>
            </javadoc>
            <method name="removeNotify" type="void" line="1028">
                <comment line="1033">
                    get the latest Frame state before disposing                    
                </comment>
                <scope line="1029">
                    <declaration name="peer" type="FramePeer" line="1030"/>
                    <scope line="1031">
                        <scope line="1035"/>
                    </scope>
                </scope>
            </method>
            <method name="postProcessKeyEvent" type="void" line="1045">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="1046"/>
            </method>
            <javadoc line="1053">
                Returns a string representing the state of this &lt;code&gt;Frame&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this frame                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1062">
                <declaration name="str" type="String" line="1063"/>
                <scope line="1064"/>
                <scope line="1067"/>
                <declaration name="state" type="int" line="1070"/>
                <scope line="1071"/>
                <scope line="1074">
                    <scope line="1075"/>
                    <scope line="1078"/>
                    <scope line="1081"/>
                    <scope line="1084"/>
                </scope>
            </method>
            <javadoc line="1091">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;Component.setCursor(Cursor)&lt;/code&gt;.                
            </javadoc>
            <method name="setCursor" type="void" line="1096">
                <params>
                    <param name="cursorType" type="int"/>
                </params>
                <scope line="1097"/>
            </method>
            <javadoc line="1103">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;Component.getCursor()&lt;/code&gt;.                
            </javadoc>
            <method name="getCursorType" type="int" line="1108"/>
            <javadoc line="1112">
                Returns an array of all {@code Frame}s created by this application.
                  If called from an applet, the array includes only the {@code Frame}s
                  accessible by that applet.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; this method may return system created frames, such
                  as a shared, hidden frame which is used by Swing. Applications
                  should not assume the existence of these frames, nor should an
                  application assume anything about these frames such as component
                  positions, &lt;code&gt;LayoutManager&lt;/code&gt;s or serialization.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: To obtain a list of all ownerless windows, including
                  ownerless {@code Dialog}s (introduced in release 1.6), use {@link Window#getOwnerlessWindows Window.getOwnerlessWindows}.                
                <see>
                    Window#getWindows()                    
                </see>
                <see>
                    Window#getOwnerlessWindows                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFrames" type="Frame[]" line="1132">
                <declaration name="allWindows" type="Window[]" line="1133"/>
                <declaration name="frameCount" type="int" line="1135"/>
                <scope line="1136">
                    <scope line="1137"/>
                </scope>
                <declaration name="frames" type="Frame[]" line="1142"/>
                <declaration name="c" type="int" line="1143"/>
                <scope line="1144">
                    <scope line="1145"/>
                </scope>
            </method>
            <declaration name="frameSerializedDataVersion" type="int" line="1158"/>
            <javadoc line="1158">
                &lt;code&gt;Frame&lt;/code&gt;&apos;s Serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="1165">
                Writes default serializable fields to stream.  Writes
                  an optional serializable icon &lt;code&gt;Image&lt;/code&gt;, which is
                  available as of 1.4.                
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <serialData>
                    an optional icon <code>Image</code>                    
                </serialData>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    #getIconImage                    
                </see>
                <see>
                    #setIconImage(Image)                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="1179">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1181">
                    <declaration name="icon1" type="Image" line="1182"/>
                    <scope line="1183"/>
                </scope>
            </method>
            <javadoc line="1191">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt;.  Tries
                  to read an icon &lt;code&gt;Image&lt;/code&gt;, which is optional
                  data available as of 1.4.  If an icon &lt;code&gt;Image&lt;/code&gt;
                  is not available, but anything other than an EOF
                  is detected, an &lt;code&gt;OptionalDataException&lt;/code&gt;
                  will be thrown.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the <code>ObjectInputStream</code> to read                    
                </param>
                <exception>
                    java.io.OptionalDataException if an icon <code>Image</code>
                      is not available, but anything other than an EOF
                      is detected                    
                </exception>
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    #getIconImage                    
                </see>
                <see>
                    #setIconImage(Image)                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1215">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="1217">
                    HeadlessException is thrown by Window&apos;s readObject                    
                </comment>
                <comment line="1226">
                    pre-1.4 instances will not have this optional data.
                     1.6 and later instances serialize icons in the Window class
                     e.eof will be true to indicate that there is no more
                     data available for this object.                    
                </comment>
                <comment line="1231">
                    If e.eof is not true, throw the exception as it
                     might have been caused by unrelated reasons.                    
                </comment>
                <comment line="1241">
                    Ensure 1.1 serialized Frames can read &amp; hook-up
                     owned windows properly                    
                </comment>
                <scope line="1218">
                    <declaration name="icon" type="Image" line="1219"/>
                    <scope line="1220"/>
                </scope>
                <scope line="1224">
                    <scope line="1232"/>
                </scope>
                <scope line="1243">
                    <scope line="1244"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="1251"/>
            <javadoc line="1251">
                Initialize JNI field and method IDs                
            </javadoc>
            <javadoc line="1261">
                Gets the AccessibleContext associated with this Frame.
                  For frames, the AccessibleContext takes the form of an
                  AccessibleAWTFrame.
                  A new AccessibleAWTFrame instance is created if necessary.                
                <return>
                    an AccessibleAWTFrame that serves as the
                      AccessibleContext of this Frame                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1271">
                <scope line="1272"/>
            </method>
            <class name="AccessibleAWTFrame" line="1278">
                <extends class="AccessibleAWTWindow"/>
                <comment line="1287">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <javadoc line="1278">
                    This class implements accessibility support for the
                      &lt;code&gt;Frame&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to frame user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1289"/>
                <javadoc line="1291">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1298"/>
                <javadoc line="1302">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1309">
                    <declaration name="states" type="AccessibleStateSet" line="1310"/>
                    <scope line="1311"/>
                    <scope line="1314"/>
                </method>
            </class>
        </class>
    </source>