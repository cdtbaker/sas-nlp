<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.security.BasicPermission"/>
        <class name="AWTPermission" line="3">
            <extends class="BasicPermission"/>
            <javadoc line="3">
                This class is for AWT permissions.
                  An &lt;code&gt;AWTPermission&lt;/code&gt; contains a target name but
                  no actions list; you either have the named permission
                  or you don&apos;t.
                  &lt;P&gt;
                  The target name is the name of the AWT permission (see below). The naming
                  convention follows the hierarchical property naming convention.
                  Also, an asterisk could be used to represent all AWT permissions.
                  &lt;P&gt;
                  The following table lists all the possible &lt;code&gt;AWTPermission&lt;/code&gt;
                  target names, and for each provides a description of what the
                  permission allows and a discussion of the risks of granting code
                  the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5 summary=&quot;AWTPermission target names, descriptions, and associated risks.&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;accessClipboard&lt;/td&gt;
                  &lt;td&gt;Posting and retrieval of information to and from the AWT clipboard&lt;/td&gt;
                  &lt;td&gt;This would allow malfeasant code to share
                  potentially sensitive or confidential information.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;accessEventQueue&lt;/td&gt;
                  &lt;td&gt;Access to the AWT event queue&lt;/td&gt;
                  &lt;td&gt;After retrieving the AWT event queue,
                  malicious code may peek at and even remove existing events
                  from its event queue, as well as post bogus events which may purposefully
                  cause the application or applet to misbehave in an insecure manner.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;accessSystemTray&lt;/td&gt;
                  &lt;td&gt;Access to the AWT SystemTray instance&lt;/td&gt;
                  &lt;td&gt;This would allow malicious code to add tray icons to the system tray.
                  First, such an icon may look like the icon of some known application
                  (such as a firewall or anti-virus) and order a user to do something unsafe
                  (with help of balloon messages). Second, the system tray may be glutted with
                  tray icons so that no one could add a tray icon anymore.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;createRobot&lt;/td&gt;
                  &lt;td&gt;Create java.awt.Robot objects&lt;/td&gt;
                  &lt;td&gt;The java.awt.Robot object allows code to generate native-level
                  mouse and keyboard events as well as read the screen. It could allow
                  malicious code to control the system, run other programs, read the
                  display, and deny mouse and keyboard access to the user.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;fullScreenExclusive&lt;/td&gt;
                  &lt;td&gt;Enter full-screen exclusive mode&lt;/td&gt;
                  &lt;td&gt;Entering full-screen exclusive mode allows direct access to
                  low-level graphics card memory.  This could be used to spoof the
                  system, since the program is in direct control of rendering. Depending on
                  the implementation, the security warning may not be shown for the windows
                  used to enter the full-screen exclusive mode (assuming that the {@codefullScreenExclusive} permission has been granted to this application). Note
                  that this behavior does not mean that the {@codeshowWindowWithoutWarningBanner} permission will be automatically granted to
                  the application which has the {@code fullScreenExclusive} permission:
                  non-full-screen windows will continue to be shown with the security
                  warning.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;listenToAllAWTEvents&lt;/td&gt;
                  &lt;td&gt;Listen to all AWT events, system-wide&lt;/td&gt;
                  &lt;td&gt;After adding an AWT event listener,
                  malicious code may scan all AWT events dispatched in the system,
                  allowing it to read all user input (such as passwords).  Each
                  AWT event listener is called from within the context of that
                  event queue&apos;s EventDispatchThread, so if the accessEventQueue
                  permission is also enabled, malicious code could modify the
                  contents of AWT event queues system-wide, causing the application
                  or applet to misbehave in an insecure manner.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;readDisplayPixels&lt;/td&gt;
                  &lt;td&gt;Readback of pixels from the display screen&lt;/td&gt;
                  &lt;td&gt;Interfaces such as the java.awt.Composite interface or the
                  java.awt.Robot class allow arbitrary code to examine pixels on the
                  display enable malicious code to snoop on the activities of the user.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;replaceKeyboardFocusManager&lt;/td&gt;
                  &lt;td&gt;Sets the &lt;code&gt;KeyboardFocusManager&lt;/code&gt; for
                  a particular thread.
                  &lt;td&gt;When &lt;code&gt;SecurityManager&lt;/code&gt; is installed, the invoking
                  thread must be granted this permission in order to replace
                  the current &lt;code&gt;KeyboardFocusManager&lt;/code&gt;.  If permission
                  is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown.
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setAppletStub&lt;/td&gt;
                  &lt;td&gt;Setting the stub which implements Applet container services&lt;/td&gt;
                  &lt;td&gt;Malicious code could set an applet&apos;s stub and result in unexpected
                  behavior or denial of service to an applet.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setWindowAlwaysOnTop&lt;/td&gt;
                  &lt;td&gt;Setting always-on-top property of the window: {@link Window#setAlwaysOnTop}&lt;/td&gt;
                  &lt;td&gt;The malicious window might make itself look and behave like a real full desktop, so that
                  information entered by the unsuspecting user is captured and subsequently misused &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;showWindowWithoutWarningBanner&lt;/td&gt;
                  &lt;td&gt;Display of a window without also displaying a banner warning
                  that the window was created by an applet&lt;/td&gt;
                  &lt;td&gt;Without this warning,
                  an applet may pop up windows without the user knowing that they
                  belong to an applet.  Since users may make security-sensitive
                  decisions based on whether or not the window belongs to an applet
                  (entering a username and password into a dialog box, for example),
                  disabling this warning banner may allow applets to trick the user
                  into entering such information.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;toolkitModality&lt;/td&gt;
                  &lt;td&gt;Creating {@link Dialog.ModalityType#TOOLKIT_MODAL TOOLKIT_MODAL} dialogs
                  and setting the {@link Dialog.ModalExclusionType#TOOLKIT_EXCLUDETOOLKIT_EXCLUDE} window property.&lt;/td&gt;
                  &lt;td&gt;When a toolkit-modal dialog is shown from an applet, it blocks all other
                  applets in the browser. When launching applications from Java Web Start,
                  its windows (such as the security dialog) may also be blocked by toolkit-modal
                  dialogs, shown from these applications.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;watchMousePointer&lt;/td&gt;
                  &lt;td&gt;Getting the information about the mouse pointer position at any
                  time&lt;/td&gt;
                  &lt;td&gt;Constantly watching the mouse pointer,
                  an applet can make guesses about what the user is doing, i.e. moving
                  the mouse to the lower left corner of the screen most likely means that
                  the user is about to launch an application. If a virtual keypad is used
                  so that keyboard is emulated using the mouse, an applet may guess what
                  is being typed.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="150"/>
            <javadoc line="150">
                use serialVersionUID from the Java 2 platform for interoperability                
            </javadoc>
            <javadoc line="154">
                Creates a new &lt;code&gt;AWTPermission&lt;/code&gt; with the specified name.
                  The name is the symbolic name of the &lt;code&gt;AWTPermission&lt;/code&gt;,
                  such as &quot;topLevelWindow&quot;, &quot;systemClipboard&quot;, etc. An asterisk
                  may be used to indicate all AWT permissions.                
                <param>
                    name the name of the AWTPermission                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="AWTPermission" type="constructor" line="163">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="166">
                Creates a new &lt;code&gt;AWTPermission&lt;/code&gt; object with the specified name.
                  The name is the symbolic name of the &lt;code&gt;AWTPermission&lt;/code&gt;, and the
                  actions string is currently unused and should be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    name the name of the <code>AWTPermission</code>                    
                </param>
                <param>
                    actions should be <code>null</code>                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="AWTPermission" type="constructor" line="175">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
        </class>
    </source>