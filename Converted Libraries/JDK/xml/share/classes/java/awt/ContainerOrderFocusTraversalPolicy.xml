<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="ContainerOrderFocusTraversalPolicy" line="5">
            <extends class="FocusTraversalPolicy"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="5">
                A FocusTraversalPolicy that determines traversal order based on the order
                  of child Components in a Container. From a particular focus cycle root, the
                  policy makes a pre-order traversal of the Component hierarchy, and traverses
                  a Container&apos;s children according to the ordering of the array returned by
                  &lt;code&gt;Container.getComponents()&lt;/code&gt;. Portions of the hierarchy that are
                  not visible and displayable will not be searched.
                  &lt;p&gt;
                  By default, ContainerOrderFocusTraversalPolicy implicitly transfers focus
                  down-cycle. That is, during normal forward focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s default
                  Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  By default, methods of this class with return a Component only if it is
                  visible, displayable, enabled, and focusable. Subclasses can modify this
                  behavior by overriding the &lt;code&gt;accept&lt;/code&gt; method.
                  &lt;p&gt;
                  This policy takes into account &lt;a
                  href=&quot;doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus traversal
                  policy providers&lt;/a&gt;.  When searching for first/last/next/previous Component,
                  if a focus traversal policy provider is encountered, its focus traversal
                  policy is used to perform the search operation.                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    Container#getComponents                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="33"/>
            <declaration name="FORWARD_TRAVERSAL" type="int" line="34"/>
            <declaration name="BACKWARD_TRAVERSAL" type="int" line="35"/>
            <declaration name="serialVersionUID" type="long" line="36"/>
            <declaration name="implicitDownCycleTraversal" type="boolean" line="37"/>
            <declaration name="cachedRoot" type="Container" line="38"/>
            <javadoc line="38">
                Used by getComponentAfter and getComponentBefore for efficiency. In
                  order to maintain compliance with the specification of
                  FocusTraversalPolicy, if traversal wraps, we should invoke
                  getFirstComponent or getLastComponent. These methods may be overriden in
                  subclasses to behave in a non-generic way. However, in the generic case,
                  these methods will simply return the first or last Components of the
                  sorted list, respectively. Since getComponentAfter and
                  getComponentBefore have already built the list before determining
                  that they need to invoke getFirstComponent or getLastComponent, the
                  list should be reused if possible.                
            </javadoc>
            <declaration name="cachedCycle" type="List" line="51"/>
            <method name="getFocusTraversalCycle" type="List<Component>" line="52">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="53"/>
            </method>
            <method name="getComponentIndex" type="int" line="57">
                <params>
                    <param name="cycle" type="List<Component>"/>
                    <param name="aComponent" type="Component"/>
                </params>
            </method>
            <method name="enumerateCycle" type="void" line="60">
                <params>
                    <param name="container" type="Container"/>
                    <param name="cycle" type="List"/>
                </params>
                <scope line="61"/>
                <declaration name="components" type="Component[]" line="65"/>
                <scope line="66">
                    <declaration name="comp" type="Component" line="67"/>
                    <scope line="68">
                        <declaration name="cont" type="Container" line="69"/>
                        <scope line="70"/>
                    </scope>
                </scope>
            </method>
            <method name="getTopmostProvider" type="Container" line="78">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <declaration name="aCont" type="Container" line="79"/>
                <declaration name="ftp" type="Container" line="80"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
                <scope line="87"/>
            </method>
            <method name="getComponentDownCycle" type="Component" line="92">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="traversalDirection" type="int"/>
                </params>
                <declaration name="retComp" type="Component" line="93"/>
                <scope line="94">
                    <declaration name="cont" type="Container" line="95"/>
                    <scope line="96">
                        <scope line="97">
                            <scope line="99"/>
                        </scope>
                        <scope line="103"/>
                    </scope>
                    <scope line="107">
                        <scope line="109"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="116">
                Returns the Component that should receive the focus after aComponent.
                  aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
                  &lt;p&gt;
                  By default, ContainerOrderFocusTraversalPolicy implicitly transfers
                  focus down-cycle. That is, during normal forward focus traversal, the
                  Component traversed after a focus cycle root will be the focus-cycle-
                  root&apos;s default Component to focus. This behavior can be disabled using
                  the &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  If aContainer is &lt;a href=&quot;doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus
                  traversal policy provider&lt;/a&gt;, the focus is always transferred down-cycle.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus after aComponent, or
                      null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentAfter" type="Component" line="137">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148">
                    <scope line="149"/>
                    <declaration name="comp" type="Component" line="152"/>
                    <scope line="153"/>
                    <declaration name="provider" type="Container" line="156"/>
                    <scope line="157">
                        <scope line="158"/>
                        <declaration name="policy" type="FocusTraversalPolicy" line="161"/>
                        <declaration name="afterComp" type="Component" line="162"/>
                        <scope line="163"/>
                    </scope>
                    <declaration name="cycle" type="List&lt;Component&gt;" line="169"/>
                    <declaration name="index" type="int" line="171"/>
                    <scope line="172">
                        <scope line="173"/>
                    </scope>
                    <scope line="178">
                        <scope line="180"/>
                        <scope line="183"/>
                    </scope>
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="198">
                Returns the Component that should receive the focus before aComponent.
                  aContainer must be a focus cycle root of aComponent or a &lt;a
                  href=&quot;doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus traversal policy
                  provider&lt;/a&gt;.                
                <param>
                    aContainer a focus cycle root of aComponent or focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus before aComponent,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentBefore" type="Component" line="212">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="213"/>
                <scope line="216"/>
                <scope line="219"/>
                <scope line="222">
                    <scope line="223"/>
                    <declaration name="provider" type="Container" line="226"/>
                    <scope line="227">
                        <scope line="228"/>
                        <declaration name="policy" type="FocusTraversalPolicy" line="231"/>
                        <declaration name="beforeComp" type="Component" line="232"/>
                        <scope line="233"/>
                        <scope line="238"/>
                    </scope>
                    <declaration name="cycle" type="List&lt;Component&gt;" line="242"/>
                    <declaration name="index" type="int" line="244"/>
                    <scope line="245">
                        <scope line="246"/>
                    </scope>
                    <declaration name="comp" type="Component" line="251"/>
                    <declaration name="tryComp" type="Component" line="252"/>
                    <scope line="253">
                        <scope line="255"/>
                        <scope line="258"/>
                    </scope>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="273">
                Returns the first Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  forward direction.                
                <param>
                    aContainer the focus cycle root or focus traversal policy provider whose first
                      Component is to be returned                    
                </param>
                <return>
                    the first Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getFirstComponent" type="Component" line="283">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="284"/>
                <scope line="286"/>
                <scope line="289">
                    <scope line="290"/>
                    <scope line="293"/>
                    <scope line="296"/>
                    <scope line="299"/>
                    <scope line="304">
                        <scope line="305"/>
                        <scope line="308"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Returns the last Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  reverse direction.                
                <param>
                    aContainer the focus cycle root or focus traversal policy provider whose last
                      Component is to be returned                    
                </param>
                <return>
                    the last Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getLastComponent" type="Component" line="325">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="326"/>
                <scope line="328"/>
                <scope line="331">
                    <scope line="332"/>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="346">
                        <declaration name="comp" type="Component" line="347"/>
                        <scope line="348"/>
                        <scope line="351">
                            <declaration name="cont" type="Container" line="352"/>
                            <scope line="353"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="361">
                Returns the default Component to focus. This Component will be the first
                  to receive focus when traversing down into a new focus traversal cycle
                  rooted at aContainer. The default implementation of this method
                  returns the same Component as &lt;code&gt;getFirstComponent&lt;/code&gt;.                
                <param>
                    aContainer the focus cycle root or focus traversal policy provider whose default
                      Component is to be returned                    
                </param>
                <return>
                    the default Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <see>
                    #getFirstComponent                    
                </see>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getDefaultComponent" type="Component" line="373">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
            </method>
            <javadoc line="376">
                Sets whether this ContainerOrderFocusTraversalPolicy transfers focus
                  down-cycle implicitly. If &lt;code&gt;true&lt;/code&gt;, during normal forward focus
                  traversal, the Component traversed after a focus cycle root will be the
                  focus-cycle-root&apos;s default Component to focus. If &lt;code&gt;false&lt;/code&gt;,
                  the next Component in the focus traversal cycle rooted at the specified
                  focus cycle root will be traversed instead. The default value for this
                  property is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    implicitDownCycleTraversal whether this
                      ContainerOrderFocusTraversalPolicy transfers focus down-cycle
                      implicitly                    
                </param>
                <see>
                    #getImplicitDownCycleTraversal                    
                </see>
                <see>
                    #getFirstComponent                    
                </see>
            </javadoc>
            <method name="setImplicitDownCycleTraversal" type="void" line="390">
                <params>
                    <param name="implicitDownCycleTraversal" type="boolean"/>
                </params>
            </method>
            <javadoc line="393">
                Returns whether this ContainerOrderFocusTraversalPolicy transfers focus
                  down-cycle implicitly. If &lt;code&gt;true&lt;/code&gt;, during normal forward focus
                  traversal, the Component traversed after a focus cycle root will be the
                  focus-cycle-root&apos;s default Component to focus. If &lt;code&gt;false&lt;/code&gt;,
                  the next Component in the focus traversal cycle rooted at the specified
                  focus cycle root will be traversed instead.                
                <return>
                    whether this ContainerOrderFocusTraversalPolicy transfers focus
                      down-cycle implicitly                    
                </return>
                <see>
                    #setImplicitDownCycleTraversal                    
                </see>
                <see>
                    #getFirstComponent                    
                </see>
            </javadoc>
            <method name="getImplicitDownCycleTraversal" type="boolean" line="405"/>
            <javadoc line="408">
                Determines whether a Component is an acceptable choice as the new
                  focus owner. By default, this method will accept a Component if and
                  only if it is visible, displayable, enabled, and focusable.                
                <param>
                    aComponent the Component whose fitness as a focus owner is to
                      be tested                    
                </param>
                <return>
                    <code>true</code> if aComponent is visible, displayable,
                      enabled, and focusable; <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="417">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="418"/>
                <scope line="421">
                    <scope line="422">
                        <scope line="423"/>
                        <scope line="426"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>