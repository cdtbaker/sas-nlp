<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.datatransfer">
        <import package="java.awt.EventQueue"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.IOException"/>
        <import package="sun.awt.EventListenerAggregate"/>
        <class name="Clipboard" line="39">
            <javadoc line="39">
                A class that implements a mechanism to transfer data using
                  cut/copy/paste operations.
                  &lt;p&gt;{@link FlavorListener}s may be registered on an instance of the
                  Clipboard class to be notified about changes to the set of{@link DataFlavor}s available on this clipboard (see{@link #addFlavorListener}).                
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
                <see>
                    java.awt.Toolkit#getSystemSelection                    
                </see>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Alexander Gerasimov                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="56"/>
            <declaration name="owner" type="ClipboardOwner" line="58"/>
            <declaration name="contents" type="Transferable" line="59"/>
            <declaration name="flavorListeners" type="EventListenerAggregate" line="61"/>
            <javadoc line="61">
                An aggregate of flavor listeners registered on this local clipboard.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="currentDataFlavors" type="Set" line="68"/>
            <javadoc line="68">
                A set of &lt;code&gt;DataFlavor&lt;/code&gt;s that is available on
                  this local clipboard. It is used for tracking changes
                  of &lt;code&gt;DataFlavor&lt;/code&gt;s available on this clipboard.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="77">
                Creates a clipboard object.                
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
            </javadoc>
            <method name="Clipboard" type="constructor" line="82">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the name of this clipboard object.                
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
            </javadoc>
            <method name="getName" type="String" line="91"/>
            <javadoc line="95">
                Sets the current contents of the clipboard to the specified
                  transferable object and registers the specified clipboard owner
                  as the owner of the new contents.
                  &lt;p&gt;
                  If there is an existing owner different from the argument
                  &lt;code&gt;owner&lt;/code&gt;, that owner is notified that it no longer
                  holds ownership of the clipboard contents via an invocation
                  of &lt;code&gt;ClipboardOwner.lostOwnership()&lt;/code&gt; on that owner.
                  An implementation of &lt;code&gt;setContents()&lt;/code&gt; is free not
                  to invoke &lt;code&gt;lostOwnership()&lt;/code&gt; directly from this method.
                  For example, &lt;code&gt;lostOwnership()&lt;/code&gt; may be invoked later on
                  a different thread. The same applies to &lt;code&gt;FlavorListener&lt;/code&gt;s
                  registered on this clipboard.
                  &lt;p&gt;
                  The method throws &lt;code&gt;IllegalStateException&lt;/code&gt; if the clipboard
                  is currently unavailable. For example, on some platforms, the system
                  clipboard is unavailable while it is accessed by another application.                
                <param>
                    contents the transferable object representing the
                      clipboard content                    
                </param>
                <param>
                    owner the object which owns the clipboard content                    
                </param>
                <throws>
                    IllegalStateException if the clipboard is currently unavailable                    
                </throws>
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
            </javadoc>
            <method name="setContents" type="void" line="120">
                <params>
                    <param name="contents" type="Transferable"/>
                    <param name="owner" type="ClipboardOwner"/>
                </params>
                <declaration name="oldOwner" type="ClipboardOwner" line="121"/>
                <declaration name="oldContents" type="Transferable" line="122"/>
                <scope line="127">
                    <anonymous_class line="128">
                        <method name="run" type="void" line="129"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="137">
                Returns a transferable object representing the current contents
                  of the clipboard.  If the clipboard currently has no contents,
                  it returns &lt;code&gt;null&lt;/code&gt;. The parameter Object requestor is
                  not currently used.  The method throws
                  &lt;code&gt;IllegalStateException&lt;/code&gt; if the clipboard is currently
                  unavailable.  For example, on some platforms, the system clipboard is
                  unavailable while it is accessed by another application.                
                <param>
                    requestor the object requesting the clip data  (not used)                    
                </param>
                <return>
                    the current transferable object on the clipboard                    
                </return>
                <throws>
                    IllegalStateException if the clipboard is currently unavailable                    
                </throws>
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
            </javadoc>
            <method name="getContents" type="Transferable" line="151">
                <params>
                    <param name="requestor" type="Object"/>
                </params>
            </method>
            <javadoc line="156">
                Returns an array of &lt;code&gt;DataFlavor&lt;/code&gt;s in which the current
                  contents of this clipboard can be provided. If there are no
                  &lt;code&gt;DataFlavor&lt;/code&gt;s available, this method returns a zero-length
                  array.                
                <return>
                    an array of <code>DataFlavor</code>s in which the current
                      contents of this clipboard can be provided                    
                </return>
                <throws>
                    IllegalStateException if this clipboard is currently unavailable                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAvailableDataFlavors" type="DataFlavor[]" line="169">
                <declaration name="cntnts" type="Transferable" line="170"/>
                <scope line="171"/>
            </method>
            <javadoc line="177">
                Returns whether or not the current contents of this clipboard can be
                  provided in the specified &lt;code&gt;DataFlavor&lt;/code&gt;.                
                <param>
                    flavor the requested <code>DataFlavor</code> for the contents                    
                </param>
                <return>
                    <code>true</code> if the current contents of this clipboard
                      can be provided in the specified <code>DataFlavor</code>;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    NullPointerException if <code>flavor</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalStateException if this clipboard is currently unavailable                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isDataFlavorAvailable" type="boolean" line="192">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="193"/>
                <declaration name="cntnts" type="Transferable" line="197"/>
                <scope line="198"/>
            </method>
            <javadoc line="204">
                Returns an object representing the current contents of this clipboard
                  in the specified &lt;code&gt;DataFlavor&lt;/code&gt;.
                  The class of the object returned is defined by the representation
                  class of &lt;code&gt;flavor&lt;/code&gt;.                
                <param>
                    flavor the requested <code>DataFlavor</code> for the contents                    
                </param>
                <return>
                    an object representing the current contents of this clipboard
                      in the specified <code>DataFlavor</code>                    
                </return>
                <throws>
                    NullPointerException if <code>flavor</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalStateException if this clipboard is currently unavailable                    
                </throws>
                <throws>
                    UnsupportedFlavorException if the requested <code>DataFlavor</code>
                      is not available                    
                </throws>
                <throws>
                    IOException if the data in the requested <code>DataFlavor</code>
                      can not be retrieved                    
                </throws>
                <see>
                    DataFlavor#getRepresentationClass                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getData" type="Object" line="227">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <scope line="228"/>
                <declaration name="cntnts" type="Transferable" line="232"/>
                <scope line="233"/>
            </method>
            <javadoc line="240">
                Registers the specified &lt;code&gt;FlavorListener&lt;/code&gt; to receive
                  &lt;code&gt;FlavorEvent&lt;/code&gt;s from this clipboard.
                  If &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no exception
                  is thrown and no action is performed.                
                <param>
                    listener the listener to be added                    
                </param>
                <see>
                    #removeFlavorListener                    
                </see>
                <see>
                    #getFlavorListeners                    
                </see>
                <see>
                    FlavorListener                    
                </see>
                <see>
                    FlavorEvent                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addFlavorListener" type="void" line="254">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <scope line="255"/>
                <scope line="258"/>
            </method>
            <javadoc line="265">
                Removes the specified &lt;code&gt;FlavorListener&lt;/code&gt; so that it no longer
                  receives &lt;code&gt;FlavorEvent&lt;/code&gt;s from this &lt;code&gt;Clipboard&lt;/code&gt;.
                  This method performs no function, nor does it throw an exception, if
                  the listener specified by the argument was not previously added to this
                  &lt;code&gt;Clipboard&lt;/code&gt;.
                  If &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no exception
                  is thrown and no action is performed.                
                <param>
                    listener the listener to be removed                    
                </param>
                <see>
                    #addFlavorListener                    
                </see>
                <see>
                    #getFlavorListeners                    
                </see>
                <see>
                    FlavorListener                    
                </see>
                <see>
                    FlavorEvent                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeFlavorListener" type="void" line="282">
                <params>
                    <param name="listener" type="FlavorListener"/>
                </params>
                <scope line="283"/>
            </method>
            <javadoc line="289">
                Returns an array of all the &lt;code&gt;FlavorListener&lt;/code&gt;s currently
                  registered on this &lt;code&gt;Clipboard&lt;/code&gt;.                
                <return>
                    all of this clipboard's <code>FlavorListener</code>s or an empty
                      array if no listeners are currently registered                    
                </return>
                <see>
                    #addFlavorListener                    
                </see>
                <see>
                    #removeFlavorListener                    
                </see>
                <see>
                    FlavorListener                    
                </see>
                <see>
                    FlavorEvent                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getFlavorListeners" type="FlavorListener[]" line="301"/>
            <javadoc line="306">
                Checks change of the &lt;code&gt;DataFlavor&lt;/code&gt;s and, if necessary,
                  notifies all listeners that have registered interest for notification
                  on &lt;code&gt;FlavorEvent&lt;/code&gt;s.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="fireFlavorsChanged" type="void" line="313">
                <scope line="314"/>
                <declaration name="prevDataFlavors" type="Set" line="317"/>
                <scope line="319"/>
                <declaration name="flavorListenerArray" type="FlavorListener[]" line="322"/>
                <scope line="324">
                    <declaration name="listener" type="FlavorListener" line="325"/>
                    <anonymous_class line="326">
                        <method name="run" type="void" line="327"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="334">
                Returns a set of &lt;code&gt;DataFlavor&lt;/code&gt;s currently available
                  on this clipboard.                
                <return>
                    a set of <code>DataFlavor</code>s currently available
                      on this clipboard                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAvailableDataFlavorSet" type="Set" line="343">
                <declaration name="set" type="Set" line="344"/>
                <declaration name="contents" type="Transferable" line="345"/>
                <scope line="346">
                    <declaration name="flavors" type="DataFlavor[]" line="347"/>
                    <scope line="348"/>
                </scope>
            </method>
        </class>
    </source>