<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.datatransfer">
        <import package="java.awt.Toolkit"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.awt.datatransfer.DataTransferer"/>
        <class name="SystemFlavorMap" line="52">
            <implements interface="FlavorMap"/>
            <implements interface="FlavorTable"/>
            <javadoc line="52">
                The SystemFlavorMap is a configurable map between &quot;natives&quot; (Strings), which
                  correspond to platform-specific data formats, and &quot;flavors&quot; (DataFlavors),
                  which correspond to platform-independent MIME types. This mapping is used
                  by the data transfer subsystem to transfer data between Java and native
                  applications, and between Java applications in separate VMs.
                  &lt;p&gt;
                  In the Sun reference implementation, the default SystemFlavorMap is
                  initialized by the file &lt;code&gt;jre/lib/flavormap.properties&lt;/code&gt; and the
                  contents of the URL referenced by the AWT property
                  &lt;code&gt;AWT.DnD.flavorMapFileURL&lt;/code&gt;. See &lt;code&gt;flavormap.properties&lt;/code&gt;
                  for details.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="JavaMIME" type="String" line="69"/>
            <javadoc line="69">
                Constant prefix used to tag Java types converted to native platform
                  type.                
            </javadoc>
            <declaration name="flavorMaps" type="WeakHashMap" line="75"/>
            <javadoc line="75">
                System singleton which maps a thread&apos;s ClassLoader to a SystemFlavorMap.                
            </javadoc>
            <declaration name="keyValueSeparators" type="String" line="80"/>
            <javadoc line="80">
                Copied from java.util.Properties.                
            </javadoc>
            <declaration name="strictKeyValueSeparators" type="String" line="84"/>
            <declaration name="whiteSpaceChars" type="String" line="85"/>
            <declaration name="UNICODE_TEXT_CLASSES" type="String[]" line="87"/>
            <javadoc line="87">
                The list of valid, decoded text flavor representation classes, in order
                  from best to worst.                
            </javadoc>
            <declaration name="ENCODED_TEXT_CLASSES" type="String[]" line="95"/>
            <javadoc line="95">
                The list of valid, encoded text flavor representation classes, in order
                  from best to worst.                
            </javadoc>
            <declaration name="TEXT_PLAIN_BASE_TYPE" type="String" line="103"/>
            <javadoc line="103">
                A String representing text/plain MIME type.                
            </javadoc>
            <declaration name="SYNTHESIZE_IF_NOT_FOUND" type="boolean" line="108"/>
            <javadoc line="108">
                This constant is passed to flavorToNativeLookup() to indicate that a
                  a native should be synthesized, stored, and returned by encoding the
                  DataFlavor&apos;s MIME type in case if the DataFlavor is not found in
                  &apos;flavorToNative&apos; map.                
            </javadoc>
            <declaration name="nativeToFlavor" type="Map" line="116"/>
            <javadoc line="116">
                Maps native Strings to Lists of DataFlavors (or base type Strings for
                  text DataFlavors).
                  Do not use the field directly, use getNativeToFlavor() instead.                
            </javadoc>
            <javadoc line="123">
                Accessor to nativeToFlavor map.  Since we use lazy initialization we must
                  use this accessor instead of direct access to the field which may not be
                  initialized yet.  This method will initialize the field if needed.                
                <return>
                    nativeToFlavor                    
                </return>
            </javadoc>
            <method name="getNativeToFlavor" type="Map" line="130">
                <scope line="131"/>
            </method>
            <declaration name="flavorToNative" type="Map" line="137"/>
            <javadoc line="137">
                Maps DataFlavors (or base type Strings for text DataFlavors) to Lists of
                  native Strings.
                  Do not use the field directly, use getFlavorToNative() instead.                
            </javadoc>
            <javadoc line="144">
                Accessor to flavorToNative map.  Since we use lazy initialization we must
                  use this accessor instead of direct access to the field which may not be
                  initialized yet.  This method will initialize the field if needed.                
                <return>
                    flavorToNative                    
                </return>
            </javadoc>
            <method name="getFlavorToNative" type="Map" line="151">
                <scope line="152"/>
            </method>
            <declaration name="isMapInitialized" type="boolean" line="158"/>
            <javadoc line="158">
                Shows if the object has been initialized.                
            </javadoc>
            <declaration name="getNativesForFlavorCache" type="Map" line="163"/>
            <javadoc line="163">
                Caches the result of getNativesForFlavor(). Maps DataFlavors to
                  SoftReferences which reference Lists of String natives.                
            </javadoc>
            <declaration name="getFlavorsForNativeCache" type="Map" line="169"/>
            <javadoc line="169">
                Caches the result getFlavorsForNative(). Maps String natives to
                  SoftReferences which reference Lists of DataFlavors.                
            </javadoc>
            <declaration name="disabledMappingGenerationKeys" type="Set" line="175"/>
            <javadoc line="175">
                Dynamic mapping generation used for text mappings should not be applied
                  to the DataFlavors and String natives for which the mappings have been
                  explicitly specified with setFlavorsForNative() or
                  setNativesForFlavor(). This keeps all such keys.                
            </javadoc>
            <javadoc line="183">
                Returns the default FlavorMap for this thread&apos;s ClassLoader.                
            </javadoc>
            <method name="getDefaultFlavorMap" type="FlavorMap" line="186">
                <declaration name="contextClassLoader" type="ClassLoader" line="187"/>
                <scope line="189"/>
                <declaration name="fm" type="FlavorMap" line="193"/>
                <scope line="195">
                    <scope line="197"/>
                </scope>
            </method>
            <method name="SystemFlavorMap" type="constructor" line="206"/>
            <javadoc line="209">
                Initializes a SystemFlavorMap by reading flavormap.properties and
                  AWT.DnD.flavorMapFileURL.
                  For thread-safety must be called under lock on this.                
            </javadoc>
            <method name="initSystemFlavorMap" type="void" line="214">
                <scope line="215"/>
                <anonymous_class line="222">
                    <method name="run" type="BufferedReader" line="223">
                        <declaration name="fileName" type="String" line="224"/>
                        <scope line="230"/>
                        <scope line="234"/>
                        <scope line="236"/>
                    </method>
                </anonymous_class>
                <declaration name="flavormapDotProperties" type="BufferedReader" line="220"/>
                <anonymous_class line="245">
                    <method name="run" type="BufferedReader" line="246">
                        <declaration name="url" type="String" line="247"/>
                        <scope line="249"/>
                        <scope line="253"/>
                        <scope line="257"/>
                        <scope line="259"/>
                    </method>
                </anonymous_class>
                <declaration name="flavormapURL" type="BufferedReader" line="243"/>
                <scope line="266">
                    <scope line="267"/>
                    <scope line="269"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="282">
                Copied code from java.util.Properties. Parsing the data ourselves is the
                  only way to handle duplicate keys and values.                
            </javadoc>
            <method name="parseAndStoreReader" type="void" line="286">
                <params>
                    <param name="in" type="BufferedReader"/>
                </params>
                <comment line="289">
                    Get next line                    
                </comment>
                <comment line="296">
                    Continue lines that end in slashes if they are not comments                    
                </comment>
                <comment line="306">
                    Advance beyond whitespace on new line                    
                </comment>
                <comment line="320">
                    Find start of key                    
                </comment>
                <comment line="330">
                    Blank lines are ignored                    
                </comment>
                <comment line="335">
                    Find separation between key and value                    
                </comment>
                <comment line="347">
                    Skip over whitespace after key if any                    
                </comment>
                <comment line="356">
                    Skip over one non whitespace key value separators if any                    
                </comment>
                <comment line="364">
                    Skip over white space after other separators if any                    
                </comment>
                <comment line="378">
                    Convert then store key and value                    
                </comment>
                <comment line="389">
                    We need to store the charset and eoln
                     parameters, if any, so that the
                     DataTransferer will have this information
                     for conversion into the native format.                    
                </comment>
                <comment line="403">
                    But don&apos;t store any of these parameters in the
                     DataFlavor itself for any text natives (even
                     non-charset ones). The SystemFlavorMap will
                     synthesize the appropriate mappings later.                    
                </comment>
                <comment line="430">
                    For text/* flavors, store mappings in separate maps to
                     enable dynamic mapping generation at a run-time.                    
                </comment>
                <scope line="287">
                    <declaration name="line" type="String" line="289"/>
                    <scope line="290"/>
                    <scope line="294">
                        <declaration name="firstChar" type="char" line="296"/>
                        <scope line="297">
                            <scope line="298">
                                <declaration name="nextLine" type="String" line="299"/>
                                <scope line="300"/>
                                <declaration name="loppedLine" type="String" line="303"/>
                                <declaration name="startIndex" type="int" line="306"/>
                                <scope line="307">
                                    <scope line="310"/>
                                </scope>
                            </scope>
                            <declaration name="len" type="int" line="320"/>
                            <declaration name="keyStart" type="int" line="321"/>
                            <scope line="322">
                                <scope line="324"/>
                            </scope>
                            <scope line="330"/>
                            <declaration name="separatorIndex" type="int" line="335"/>
                            <scope line="336">
                                <declaration name="currentChar" type="char" line="337"/>
                                <scope line="338"/>
                                <scope line="341"/>
                            </scope>
                            <declaration name="valueIndex" type="int" line="347"/>
                            <scope line="348">
                                <scope line="350"/>
                            </scope>
                            <scope line="356">
                                <scope line="358"/>
                            </scope>
                            <scope line="364">
                                <scope line="366"/>
                            </scope>
                            <declaration name="key" type="String" line="372"/>
                            <declaration name="value" type="String" line="373"/>
                            <scope line="381">
                                <declaration name="mime" type="MimeType" line="382"/>
                                <scope line="383">
                                    <declaration name="charset" type="String" line="384"/>
                                    <scope line="387">
                                        <declaration name="transferer" type="DataTransferer" line="392"/>
                                        <scope line="394"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="412"/>
                            <declaration name="flavor" type="DataFlavor" line="417"/>
                            <scope line="418"/>
                            <scope line="420">
                                <scope line="421"/>
                                <scope line="423"/>
                            </scope>
                            <scope line="431"/>
                            <scope line="434"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="443">
                Copied from java.util.Properties.                
            </javadoc>
            <method name="continueLine" type="boolean" line="446">
                <params>
                    <param name="line" type="String"/>
                </params>
                <declaration name="slashCount" type="int" line="447"/>
                <declaration name="index" type="int" line="448"/>
                <scope line="449"/>
            </method>
            <javadoc line="455">
                Copied from java.util.Properties.                
            </javadoc>
            <method name="loadConvert" type="String" line="458">
                <params>
                    <param name="theString" type="String"/>
                </params>
                <comment line="469">
                    Read the xxxx                    
                </comment>
                <declaration name="aChar" type="char" line="459"/>
                <declaration name="len" type="int" line="460"/>
                <declaration name="outBuffer" type="StringBuilder" line="461"/>
                <scope line="463">
                    <scope line="465">
                        <scope line="467">
                            <declaration name="value" type="int" line="469"/>
                            <scope line="470">
                                <scope line="474"/>
                                <scope line="479"/>
                                <scope line="484"/>
                                <scope line="488"/>
                            </scope>
                        </scope>
                        <scope line="495">
                            <scope line="496"/>
                            <scope line="498"/>
                            <scope line="500"/>
                            <scope line="502"/>
                        </scope>
                    </scope>
                    <scope line="507"/>
                </scope>
            </method>
            <javadoc line="514">
                Stores the listed object under the specified hash key in map. Unlike a
                  standard map, the listed object will not replace any object already at
                  the appropriate Map location, but rather will be appended to a List
                  stored in that location.                
            </javadoc>
            <method name="store" type="void" line="520">
                <params>
                    <param name="hashed" type="Object"/>
                    <param name="listed" type="Object"/>
                    <param name="map" type="Map"/>
                </params>
                <declaration name="list" type="List" line="521"/>
                <scope line="522"/>
                <scope line="526"/>
            </method>
            <javadoc line="531">
                Semantically equivalent to &apos;nativeToFlavor.get(nat)&apos;. This method
                  handles the case where &apos;nat&apos; is not found in &apos;nativeToFlavor&apos;. In that
                  case, a new DataFlavor is synthesized, stored, and returned, if and
                  only if the specified native is encoded as a Java MIME type.                
            </javadoc>
            <method name="nativeToFlavorLookup" type="List" line="537">
                <params>
                    <param name="nat" type="String"/>
                </params>
                <comment line="549">
                    Prepending the platform-specific mappings ensures
                     that the flavors added with
                     addFlavorForUnencodedNative() are at the end of
                     list.                    
                </comment>
                <declaration name="flavors" type="List" line="538"/>
                <scope line="540">
                    <declaration name="transferer" type="DataTransferer" line="541"/>
                    <scope line="542">
                        <declaration name="platformFlavors" type="List" line="543"/>
                        <scope line="545">
                            <scope line="546"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="559">
                    <declaration name="decoded" type="String" line="560"/>
                    <declaration name="flavor" type="DataFlavor" line="561"/>
                    <scope line="563"/>
                    <scope line="565"/>
                    <scope line="572">
                        <declaration name="natives" type="List" line="579"/>
                        <scope line="580"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="593">
                Semantically equivalent to &apos;flavorToNative.get(flav)&apos;. This method
                  handles the case where &apos;flav&apos; is not found in &apos;flavorToNative&apos; depending
                  on the value of passes &apos;synthesize&apos; parameter. If &apos;synthesize&apos; is
                  SYNTHESIZE_IF_NOT_FOUND a native is synthesized, stored, and returned by
                  encoding the DataFlavor&apos;s MIME type. Otherwise an empty List is returned
                  and &apos;flavorToNative&apos; remains unaffected.                
            </javadoc>
            <method name="flavorToNativeLookup" type="List" line="602">
                <params>
                    <param name="flav" type="DataFlavor"/>
                    <param name="synthesize" type="boolean"/>
                </params>
                <comment line="614">
                    Prepend the platform-specific mappings to ensure
                     that the natives added with
                     addUnencodedNativeForFlavor() are at the end of
                     list.                    
                </comment>
                <declaration name="natives" type="List" line="603"/>
                <scope line="605">
                    <declaration name="transferer" type="DataTransferer" line="606"/>
                    <scope line="607">
                        <declaration name="platformNatives" type="List" line="608"/>
                        <scope line="610">
                            <scope line="611"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="624">
                    <scope line="625">
                        <declaration name="encoded" type="String" line="626"/>
                        <declaration name="flavors" type="List" line="633"/>
                        <scope line="634"/>
                    </scope>
                    <scope line="641"/>
                </scope>
            </method>
            <javadoc line="649">
                Returns a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; natives to which the
                  specified &lt;code&gt;DataFlavor&lt;/code&gt; can be translated by the data transfer
                  subsystem. The &lt;code&gt;List&lt;/code&gt; will be sorted from best native to
                  worst. That is, the first native will best reflect data in the specified
                  flavor to the underlying native platform.
                  &lt;p&gt;
                  If the specified &lt;code&gt;DataFlavor&lt;/code&gt; is previously unknown to the
                  data transfer subsystem and the data transfer subsystem is unable to
                  translate this &lt;code&gt;DataFlavor&lt;/code&gt; to any existing native, then
                  invoking this method will establish a
                  mapping in both directions between the specified &lt;code&gt;DataFlavor&lt;/code&gt;
                  and an encoded version of its MIME type as its native.                
                <param>
                    flav the <code>DataFlavor</code> whose corresponding natives
                      should be returned. If <code>null</code> is specified, all
                      natives currently known to the data transfer subsystem are
                      returned in a non-deterministic order.                    
                </param>
                <return>
                    a <code>java.util.List</code> of <code>java.lang.String</code>
                      objects which are platform-specific representations of platform-
                      specific data formats                    
                </return>
                <see>
                    #encodeDataFlavor                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNativesForFlavor" type="List<String>" line="674">
                <params>
                    <param name="flav" type="DataFlavor"/>
                </params>
                <comment line="678">
                    Check cache, even for null flav                    
                </comment>
                <comment line="683">
                    Create a copy, because client code can modify the returned
                     list.                    
                </comment>
                <comment line="692">
                    In this case we shouldn&apos;t synthesize a native for this flavor,
                     since its mappings were explicitly specified.                    
                </comment>
                <comment line="697">
                    For text/* flavors, flavor-to-native mappings specified in
                     flavormap.properties are stored per flavor&apos;s base type.                    
                </comment>
                <comment line="702">
                    To prevent the List stored in the map from modification.                    
                </comment>
                <comment line="707">
                    Also include text/plain natives, but don&apos;t duplicate Strings                    
                </comment>
                <comment line="711">
                    To prevent the List stored in the map from modification.
                     This also guarantees that removeAll() is supported.                    
                </comment>
                <comment line="715">
                    Use HashSet to get constant-time performance for search.                    
                </comment>
                <comment line="726">
                    In this branch it is guaranteed that natives explicitly
                     listed for flav&apos;s MIME type were added with
                     addUnencodedNativeForFlavor(), so they have lower priority.                    
                </comment>
                <comment line="732">
                    flavorToNativeLookup() never returns null.
                     It can return an empty List, however.                    
                </comment>
                <comment line="735">
                    To prevent the List stored in the map from modification.
                     This also guarantees that removeAll() is supported.                    
                </comment>
                <comment line="738">
                    Use HashSet to get constant-time performance for search.                    
                </comment>
                <comment line="749">
                    In this branch it is guaranteed that natives explicitly
                     listed for flav&apos;s MIME type were added with
                     addUnencodedNativeForFlavor(), so they have lower priority.                    
                </comment>
                <comment line="755">
                    flavorToNativeLookup() never returns null.
                     It can return an empty List, however.                    
                </comment>
                <comment line="758">
                    To prevent the List stored in the map from modification.
                     This also guarantees that add/removeAll() are supported.                    
                </comment>
                <comment line="762">
                    Use HashSet to get constant-time performance for search.                    
                </comment>
                <comment line="772">
                    Create a copy, because client code can modify the returned list.                    
                </comment>
                <declaration name="retval" type="List" line="675"/>
                <declaration name="ref" type="SoftReference" line="678"/>
                <scope line="679">
                    <scope line="681"/>
                </scope>
                <scope line="688"/>
                <scope line="690"/>
                <scope line="694">
                    <scope line="698">
                        <scope line="700"/>
                    </scope>
                    <declaration name="textPlainList" type="List" line="707"/>
                    <scope line="709">
                        <scope line="713"/>
                        <scope line="717"/>
                    </scope>
                    <scope line="722"/>
                    <scope line="724">
                        <declaration name="explicitList" type="List" line="728"/>
                        <scope line="733"/>
                    </scope>
                </scope>
                <scope line="742">
                    <scope line="745"/>
                    <scope line="747">
                        <declaration name="explicitList" type="List" line="751"/>
                        <scope line="756"/>
                    </scope>
                </scope>
                <scope line="766"/>
            </method>
            <javadoc line="775">
                Returns a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;DataFlavor&lt;/code&gt;s to which the
                  specified &lt;code&gt;String&lt;/code&gt; native can be translated by the data
                  transfer subsystem. The &lt;code&gt;List&lt;/code&gt; will be sorted from best
                  &lt;code&gt;DataFlavor&lt;/code&gt; to worst. That is, the first
                  &lt;code&gt;DataFlavor&lt;/code&gt; will best reflect data in the specified
                  native to a Java application.
                  &lt;p&gt;
                  If the specified native is previously unknown to the data transfer
                  subsystem, and that native has been properly encoded, then invoking this
                  method will establish a mapping in both directions between the specified
                  native and a &lt;code&gt;DataFlavor&lt;/code&gt; whose MIME type is a decoded
                  version of the native.
                  &lt;p&gt;
                  If the specified native is not a properly encoded native and the
                  mappings for this native have not been altered with
                  &lt;code&gt;setFlavorsForNative&lt;/code&gt;, then the contents of the
                  &lt;code&gt;List&lt;/code&gt; is platform dependent, but &lt;code&gt;null&lt;/code&gt;
                  cannot be returned.                
                <param>
                    nat the native whose corresponding <code>DataFlavor</code>s
                      should be returned. If <code>null</code> is specified, all
                      <code>DataFlavor</code>s currently known to the data transfer
                      subsystem are returned in a non-deterministic order.                    
                </param>
                <return>
                    a <code>java.util.List</code> of <code>DataFlavor</code>
                      objects into which platform-specific data in the specified,
                      platform-specific native can be translated                    
                </return>
                <see>
                    #encodeJavaMIMEType                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFlavorsForNative" type="List<DataFlavor>" line="806">
                <params>
                    <param name="nat" type="String"/>
                </params>
                <comment line="809">
                    Check cache, even for null nat                    
                </comment>
                <comment line="861">
                    Cannot happen, since we checked all mappings
                     on load from flavormap.properties.                    
                </comment>
                <comment line="903">
                    Check for equality to plainTextFlavor so
                     that we can ensure that the exact charset of
                     plainTextFlavor, not the canonical charset
                     or another equivalent charset with a
                     different name, is used.                    
                </comment>
                <comment line="924">
                    Non-charset text natives should be treated as
                     opaque, 8-bit data in any of its various
                     representations.                    
                </comment>
                <declaration name="ref" type="SoftReference" line="809"/>
                <scope line="810">
                    <declaration name="retval" type="ArrayList" line="811"/>
                    <scope line="812"/>
                </scope>
                <declaration name="retval" type="LinkedList" line="817"/>
                <scope line="819">
                    <declaration name="natives" type="List" line="820"/>
                    <declaration name="dups" type="HashSet" line="821"/>
                    <scope line="825">
                        <declaration name="flavors" type="List" line="826"/>
                        <scope line="830">
                            <declaration name="flavor" type="Object" line="831"/>
                            <scope line="832"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="837">
                    <declaration name="flavors" type="List" line="838"/>
                    <scope line="840"/>
                    <declaration name="dups" type="HashSet" line="844"/>
                    <declaration name="flavorsAndbaseTypes" type="List" line="846"/>
                    <scope line="851">
                        <declaration name="value" type="Object" line="852"/>
                        <scope line="853">
                            <declaration name="baseType" type="String" line="854"/>
                            <declaration name="subType" type="String" line="855"/>
                            <scope line="856">
                                <declaration name="mimeType" type="MimeType" line="857"/>
                            </scope>
                            <scope line="859"/>
                            <scope line="865">
                                <scope line="868"/>
                                <scope line="872">
                                    <declaration name="toAdd" type="DataFlavor" line="873"/>
                                    <scope line="874"/>
                                    <scope line="878"/>
                                    <scope line="880"/>
                                </scope>
                                <scope line="888">
                                    <declaration name="charset" type="String" line="889"/>
                                    <scope line="893">
                                        <declaration name="toAdd" type="DataFlavor" line="894"/>
                                        <scope line="895"/>
                                        <scope line="899"/>
                                        <scope line="907"/>
                                        <scope line="911"/>
                                    </scope>
                                </scope>
                                <scope line="919"/>
                            </scope>
                            <scope line="922">
                                <scope line="926">
                                    <declaration name="toAdd" type="DataFlavor" line="927"/>
                                    <scope line="928"/>
                                    <scope line="931"/>
                                    <scope line="934"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="939">
                            <declaration name="flavor" type="DataFlavor" line="940"/>
                            <scope line="941"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="arrayList" type="ArrayList" line="948"/>
            </method>
            <javadoc line="953">
                Returns a &lt;code&gt;Map&lt;/code&gt; of the specified &lt;code&gt;DataFlavor&lt;/code&gt;s to
                  their most preferred &lt;code&gt;String&lt;/code&gt; native. Each native value will
                  be the same as the first native in the List returned by
                  &lt;code&gt;getNativesForFlavor&lt;/code&gt; for the specified flavor.
                  &lt;p&gt;
                  If a specified &lt;code&gt;DataFlavor&lt;/code&gt; is previously unknown to the
                  data transfer subsystem, then invoking this method will establish a
                  mapping in both directions between the specified &lt;code&gt;DataFlavor&lt;/code&gt;
                  and an encoded version of its MIME type as its native.                
                <param>
                    flavors an array of <code>DataFlavor</code>s which will be the
                      key set of the returned <code>Map</code>. If <code>null</code> is
                      specified, a mapping of all <code>DataFlavor</code>s known to the
                      data transfer subsystem to their most preferred
                      <code>String</code> natives will be returned.                    
                </param>
                <return>
                    a <code>java.util.Map</code> of <code>DataFlavor</code>s to
                      <code>String</code> natives                    
                </return>
                <see>
                    #getNativesForFlavor                    
                </see>
                <see>
                    #encodeDataFlavor                    
                </see>
            </javadoc>
            <method name="getNativesForFlavors" type="Map<DataFlavor,String>" line="977">
                <params>
                    <param name="flavors" type="DataFlavor[]"/>
                </params>
                <comment line="979">
                    Use getNativesForFlavor to generate extra natives for text flavors
                     and stringFlavor                    
                </comment>
                <scope line="981">
                    <declaration name="flavor_list" type="List" line="982"/>
                </scope>
                <declaration name="retval" type="HashMap" line="987"/>
                <scope line="988">
                    <declaration name="natives" type="List" line="989"/>
                    <declaration name="nat" type="String" line="990"/>
                </scope>
            </method>
            <javadoc line="997">
                Returns a &lt;code&gt;Map&lt;/code&gt; of the specified &lt;code&gt;String&lt;/code&gt; natives
                  to their most preferred &lt;code&gt;DataFlavor&lt;/code&gt;. Each
                  &lt;code&gt;DataFlavor&lt;/code&gt; value will be the same as the first
                  &lt;code&gt;DataFlavor&lt;/code&gt; in the List returned by
                  &lt;code&gt;getFlavorsForNative&lt;/code&gt; for the specified native.
                  &lt;p&gt;
                  If a specified native is previously unknown to the data transfer
                  subsystem, and that native has been properly encoded, then invoking this
                  method will establish a mapping in both directions between the specified
                  native and a &lt;code&gt;DataFlavor&lt;/code&gt; whose MIME type is a decoded
                  version of the native.                
                <param>
                    natives an array of <code>String</code>s which will be the
                      key set of the returned <code>Map</code>. If <code>null</code> is
                      specified, a mapping of all supported <code>String</code> natives
                      to their most preferred <code>DataFlavor</code>s will be
                      returned.                    
                </param>
                <return>
                    a <code>java.util.Map</code> of <code>String</code> natives to
                      <code>DataFlavor</code>s                    
                </return>
                <see>
                    #getFlavorsForNative                    
                </see>
                <see>
                    #encodeJavaMIMEType                    
                </see>
            </javadoc>
            <method name="getFlavorsForNatives" type="Map<String,DataFlavor>" line="1023">
                <params>
                    <param name="natives" type="String[]"/>
                </params>
                <comment line="1025">
                    Use getFlavorsForNative to generate extra flavors for text natives                    
                </comment>
                <scope line="1026">
                    <declaration name="native_list" type="List" line="1027"/>
                </scope>
                <declaration name="retval" type="HashMap" line="1032"/>
                <scope line="1033">
                    <declaration name="flavors" type="List" line="1034"/>
                    <declaration name="flav" type="DataFlavor" line="1035"/>
                </scope>
            </method>
            <javadoc line="1043">
                Adds a mapping from the specified &lt;code&gt;DataFlavor&lt;/code&gt; (and all
                  &lt;code&gt;DataFlavor&lt;/code&gt;s equal to the specified &lt;code&gt;DataFlavor&lt;/code&gt;)
                  to the specified &lt;code&gt;String&lt;/code&gt; native.
                  Unlike &lt;code&gt;getNativesForFlavor&lt;/code&gt;, the mapping will only be
                  established in one direction, and the native will not be encoded. To
                  establish a two-way mapping, call
                  &lt;code&gt;addFlavorForUnencodedNative&lt;/code&gt; as well. The new mapping will
                  be of lower priority than any existing mapping.
                  This method has no effect if a mapping from the specified or equal
                  &lt;code&gt;DataFlavor&lt;/code&gt; to the specified &lt;code&gt;String&lt;/code&gt; native
                  already exists.                
                <param>
                    flav the <code>DataFlavor</code> key for the mapping                    
                </param>
                <param>
                    nat the <code>String</code> native value for the mapping                    
                </param>
                <throws>
                    NullPointerException if flav or nat is <code>null</code>                    
                </throws>
                <see>
                    #addFlavorForUnencodedNative                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addUnencodedNativeForFlavor" type="void" line="1064">
                <params>
                    <param name="flav" type="DataFlavor"/>
                    <param name="nat" type="String"/>
                </params>
                <scope line="1065"/>
                <declaration name="natives" type="List" line="1069"/>
                <scope line="1070"/>
                <scope line="1073"/>
            </method>
            <javadoc line="1081">
                Discards the current mappings for the specified &lt;code&gt;DataFlavor&lt;/code&gt;
                  and all &lt;code&gt;DataFlavor&lt;/code&gt;s equal to the specified
                  &lt;code&gt;DataFlavor&lt;/code&gt;, and creates new mappings to the
                  specified &lt;code&gt;String&lt;/code&gt; natives.
                  Unlike &lt;code&gt;getNativesForFlavor&lt;/code&gt;, the mappings will only be
                  established in one direction, and the natives will not be encoded. To
                  establish two-way mappings, call &lt;code&gt;setFlavorsForNative&lt;/code&gt;
                  as well. The first native in the array will represent the highest
                  priority mapping. Subsequent natives will represent mappings of
                  decreasing priority.
                  &lt;p&gt;
                  If the array contains several elements that reference equal
                  &lt;code&gt;String&lt;/code&gt; natives, this method will establish new mappings
                  for the first of those elements and ignore the rest of them.
                  &lt;p&gt;
                  It is recommended that client code not reset mappings established by the
                  data transfer subsystem. This method should only be used for
                  application-level mappings.                
                <param>
                    flav the <code>DataFlavor</code> key for the mappings                    
                </param>
                <param>
                    natives the <code>String</code> native values for the mappings                    
                </param>
                <throws>
                    NullPointerException if flav or natives is <code>null</code>
                      or if natives contains <code>null</code> elements                    
                </throws>
                <see>
                    #setFlavorsForNative                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNativesForFlavor" type="void" line="1110">
                <params>
                    <param name="flav" type="DataFlavor"/>
                    <param name="natives" type="String[]"/>
                </params>
                <comment line="1121">
                    Clear the cache to handle the case of empty natives.                    
                </comment>
                <scope line="1111"/>
                <scope line="1116"/>
            </method>
            <javadoc line="1125">
                Adds a mapping from a single &lt;code&gt;String&lt;/code&gt; native to a single
                  &lt;code&gt;DataFlavor&lt;/code&gt;. Unlike &lt;code&gt;getFlavorsForNative&lt;/code&gt;, the
                  mapping will only be established in one direction, and the native will
                  not be encoded. To establish a two-way mapping, call
                  &lt;code&gt;addUnencodedNativeForFlavor&lt;/code&gt; as well. The new mapping will
                  be of lower priority than any existing mapping.
                  This method has no effect if a mapping from the specified
                  &lt;code&gt;String&lt;/code&gt; native to the specified or equal
                  &lt;code&gt;DataFlavor&lt;/code&gt; already exists.                
                <param>
                    nat the <code>String</code> native key for the mapping                    
                </param>
                <param>
                    flav the <code>DataFlavor</code> value for the mapping                    
                </param>
                <throws>
                    NullPointerException if nat or flav is <code>null</code>                    
                </throws>
                <see>
                    #addUnencodedNativeForFlavor                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addFlavorForUnencodedNative" type="void" line="1144">
                <params>
                    <param name="nat" type="String"/>
                    <param name="flav" type="DataFlavor"/>
                </params>
                <scope line="1145"/>
                <declaration name="flavors" type="List" line="1149"/>
                <scope line="1150"/>
                <scope line="1153"/>
            </method>
            <javadoc line="1161">
                Discards the current mappings for the specified &lt;code&gt;String&lt;/code&gt;
                  native, and creates new mappings to the specified
                  &lt;code&gt;DataFlavor&lt;/code&gt;s. Unlike &lt;code&gt;getFlavorsForNative&lt;/code&gt;, the
                  mappings will only be established in one direction, and the natives need
                  not be encoded. To establish two-way mappings, call
                  &lt;code&gt;setNativesForFlavor&lt;/code&gt; as well. The first
                  &lt;code&gt;DataFlavor&lt;/code&gt; in the array will represent the highest priority
                  mapping. Subsequent &lt;code&gt;DataFlavor&lt;/code&gt;s will represent mappings of
                  decreasing priority.
                  &lt;p&gt;
                  If the array contains several elements that reference equal
                  &lt;code&gt;DataFlavor&lt;/code&gt;s, this method will establish new mappings
                  for the first of those elements and ignore the rest of them.
                  &lt;p&gt;
                  It is recommended that client code not reset mappings established by the
                  data transfer subsystem. This method should only be used for
                  application-level mappings.                
                <param>
                    nat the <code>String</code> native key for the mappings                    
                </param>
                <param>
                    flavors the <code>DataFlavor</code> values for the mappings                    
                </param>
                <throws>
                    NullPointerException if nat or flavors is <code>null</code>
                      or if flavors contains <code>null</code> elements                    
                </throws>
                <see>
                    #setNativesForFlavor                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFlavorsForNative" type="void" line="1189">
                <params>
                    <param name="nat" type="String"/>
                    <param name="flavors" type="DataFlavor[]"/>
                </params>
                <comment line="1200">
                    Clear the cache to handle the case of empty flavors.                    
                </comment>
                <scope line="1190"/>
                <scope line="1195"/>
            </method>
            <javadoc line="1204">
                Encodes a MIME type for use as a &lt;code&gt;String&lt;/code&gt; native. The format
                  of an encoded representation of a MIME type is implementation-dependent.
                  The only restrictions are:
                  &lt;ul&gt;
                  &lt;li&gt;The encoded representation is &lt;code&gt;null&lt;/code&gt; if and only if the
                  MIME type &lt;code&gt;String&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
                  &lt;li&gt;The encoded representations for two non-&lt;code&gt;null&lt;/code&gt; MIME type
                  &lt;code&gt;String&lt;/code&gt;s are equal if and only if these &lt;code&gt;String&lt;/code&gt;s
                  are equal according to &lt;code&gt;String.equals(Object)&lt;/code&gt;.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Sun&apos;s reference implementation of this method returns the specified MIME
                  type &lt;code&gt;String&lt;/code&gt; prefixed with &lt;code&gt;JAVA_DATAFLAVOR:&lt;/code&gt;.                
                <param>
                    mimeType the MIME type to encode                    
                </param>
                <return>
                    the encoded <code>String</code>, or <code>null</code> if
                      mimeType is <code>null</code>                    
                </return>
            </javadoc>
            <method name="encodeJavaMIMEType" type="String" line="1223">
                <params>
                    <param name="mimeType" type="String"/>
                </params>
            </method>
            <javadoc line="1229">
                Encodes a &lt;code&gt;DataFlavor&lt;/code&gt; for use as a &lt;code&gt;String&lt;/code&gt;
                  native. The format of an encoded &lt;code&gt;DataFlavor&lt;/code&gt; is
                  implementation-dependent. The only restrictions are:
                  &lt;ul&gt;
                  &lt;li&gt;The encoded representation is &lt;code&gt;null&lt;/code&gt; if and only if the
                  specified &lt;code&gt;DataFlavor&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or its MIME type
                  &lt;code&gt;String&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
                  &lt;li&gt;The encoded representations for two non-&lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;DataFlavor&lt;/code&gt;s with non-&lt;code&gt;null&lt;/code&gt; MIME type
                  &lt;code&gt;String&lt;/code&gt;s are equal if and only if the MIME type
                  &lt;code&gt;String&lt;/code&gt;s of these &lt;code&gt;DataFlavor&lt;/code&gt;s are equal
                  according to &lt;code&gt;String.equals(Object)&lt;/code&gt;.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Sun&apos;s reference implementation of this method returns the MIME type
                  &lt;code&gt;String&lt;/code&gt; of the specified &lt;code&gt;DataFlavor&lt;/code&gt; prefixed
                  with &lt;code&gt;JAVA_DATAFLAVOR:&lt;/code&gt;.                
                <param>
                    flav the <code>DataFlavor</code> to encode                    
                </param>
                <return>
                    the encoded <code>String</code>, or <code>null</code> if
                      flav is <code>null</code> or has a <code>null</code> MIME type                    
                </return>
            </javadoc>
            <method name="encodeDataFlavor" type="String" line="1252">
                <params>
                    <param name="flav" type="DataFlavor"/>
                </params>
            </method>
            <javadoc line="1258">
                Returns whether the specified &lt;code&gt;String&lt;/code&gt; is an encoded Java
                  MIME type.                
                <param>
                    str the <code>String</code> to test                    
                </param>
                <return>
                    <code>true</code> if the <code>String</code> is encoded;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isJavaMIMEType" type="boolean" line="1266">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="1270">
                Decodes a &lt;code&gt;String&lt;/code&gt; native for use as a Java MIME type.                
                <param>
                    nat the <code>String</code> to decode                    
                </param>
                <return>
                    the decoded Java MIME type, or <code>null</code> if nat is not
                      an encoded <code>String</code> native                    
                </return>
            </javadoc>
            <method name="decodeJavaMIMEType" type="String" line="1277">
                <params>
                    <param name="nat" type="String"/>
                </params>
            </method>
            <javadoc line="1283">
                Decodes a &lt;code&gt;String&lt;/code&gt; native for use as a
                  &lt;code&gt;DataFlavor&lt;/code&gt;.                
                <param>
                    nat the <code>String</code> to decode                    
                </param>
                <return>
                    the decoded <code>DataFlavor</code>, or <code>null</code> if
                      nat is not an encoded <code>String</code> native                    
                </return>
            </javadoc>
            <method name="decodeDataFlavor" type="DataFlavor" line="1293">
                <params>
                    <param name="nat" type="String"/>
                </params>
                <declaration name="retval_str" type="String" line="1294"/>
            </method>
        </class>
    </source>