<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.datatransfer">
        <import package="java.io.Externalizable"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Enumeration"/>
        <class name="MimeType" line="7">
            <implements interface="Externalizable"/>
            <implements interface="Cloneable"/>
            <javadoc line="7">
                A Multipurpose Internet Mail Extension (MIME) type, as defined
                  in RFC 2045 and 2046.
                  THIS IS NOT - REPEAT NOT - A PUBLIC CLASS! DataFlavor IS
                  THE PUBLIC INTERFACE, AND THIS IS PROVIDED AS A PRIVATE
                  (THAT IS AS IN NOT PUBLIC) HELPER CLASS!                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="15"/>
            <javadoc line="16">
                Constructor for externalization; this constructor should not be
                  called directly by an application, since the result will be an
                  uninitialized, immutable &lt;code&gt;MimeType&lt;/code&gt; object.                
            </javadoc>
            <method name="MimeType" type="constructor" line="21"/>
            <javadoc line="23">
                Builds a &lt;code&gt;MimeType&lt;/code&gt; from a &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    rawdata text used to initialize the <code>MimeType</code>                    
                </param>
                <throws>
                    NullPointerException if <code>rawdata</code> is null                    
                </throws>
            </javadoc>
            <method name="MimeType" type="constructor" line="28">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
            </method>
            <javadoc line="31">
                Builds a &lt;code&gt;MimeType&lt;/code&gt; with the given primary and sub
                  type but has an empty parameter list.                
                <param>
                    primary the primary type of this <code>MimeType</code>                    
                </param>
                <param>
                    sub the subtype of this <code>MimeType</code>                    
                </param>
                <throws>
                    NullPointerException if either <code>primary</code> or
                      <code>sub</code> is null                    
                </throws>
            </javadoc>
            <method name="MimeType" type="constructor" line="39">
                <params>
                    <param name="primary" type="String"/>
                    <param name="sub" type="String"/>
                </params>
            </method>
            <javadoc line="42">
                Builds a &lt;code&gt;MimeType&lt;/code&gt; with a pre-defined
                  and valid (or empty) parameter list.                
                <param>
                    primary the primary type of this <code>MimeType</code>                    
                </param>
                <param>
                    sub the subtype of this <code>MimeType</code>                    
                </param>
                <param>
                    mtpl the requested parameter list                    
                </param>
                <throws>
                    NullPointerException if either <code>primary</code>,
                      <code>sub</code> or <code>mtpl</code> is null                    
                </throws>
            </javadoc>
            <method name="MimeType" type="constructor" line="51">
                <params>
                    <param name="primary" type="String"/>
                    <param name="sub" type="String"/>
                    <param name="mtpl" type="MimeTypeParameterList"/>
                </params>
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58"/>
                <scope line="61"/>
            </method>
            <method name="hashCode" type="int" line="66">
                <declaration name="code" type="int" line="67"/>
            </method>
            <javadoc line="73">
                &lt;code&gt;MimeType&lt;/code&gt;s are equal if their primary types,
                  subtypes, and  parameters are all equal. No default values
                  are taken into account.                
                <param>
                    thatObject the object to be evaluated as a
                      <code>MimeType</code>                    
                </param>
                <return>
                    <code>true</code> if <code>thatObject</code> is
                      a <code>MimeType</code>; otherwise returns <code>false</code>                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="82">
                <params>
                    <param name="thatObject" type="Object"/>
                </params>
                <scope line="83"/>
                <declaration name="that" type="MimeType" line="86"/>
                <declaration name="isIt" type="boolean" line="87"/>
            </method>
            <javadoc line="90">
                A routine for parsing the MIME type out of a String.                
                <throws>
                    NullPointerException if <code>rawdata</code> is null                    
                </throws>
            </javadoc>
            <method name="parse" type="void" line="94">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
                <declaration name="slashIndex" type="int" line="95"/>
                <declaration name="semIndex" type="int" line="96"/>
                <scope line="97"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="108"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="123">
                Retrieve the primary type of this object.                
            </javadoc>
            <method name="getPrimaryType" type="String" line="126"/>
            <javadoc line="129">
                Retrieve the sub type of this object.                
            </javadoc>
            <method name="getSubType" type="String" line="132"/>
            <javadoc line="135">
                Retrieve a copy of this object&apos;s parameter list.                
            </javadoc>
            <method name="getParameters" type="MimeTypeParameterList" line="138"/>
            <javadoc line="141">
                Retrieve the value associated with the given name, or null if there
                  is no current association.                
            </javadoc>
            <method name="getParameter" type="String" line="145">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="148">
                Set the value to be associated with the given name, replacing
                  any previous association.                
                <throw>
                    IllegalArgumentException if parameter or value is illegal                    
                </throw>
            </javadoc>
            <method name="setParameter" type="void" line="153">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="156">
                Remove any value associated with the given name.                
                <throw>
                    IllegalArgumentExcpetion if parameter may not be deleted                    
                </throw>
            </javadoc>
            <method name="removeParameter" type="void" line="160">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="163">
                Return the String representation of this object.                
            </javadoc>
            <method name="toString" type="String" line="166"/>
            <javadoc line="169">
                Return a String representation of this object
                  without the parameter list.                
            </javadoc>
            <method name="getBaseType" type="String" line="173"/>
            <javadoc line="176">
                Returns &lt;code&gt;true&lt;/code&gt; if the primary type and the
                  subtype of this object are the same as the specified
                  &lt;code&gt;type&lt;/code&gt;; otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    type the type to compare to <code>this</code>'s type                    
                </param>
                <return>
                    <code>true</code> if the primary type and the
                      subtype of this object are the same as the
                      specified <code>type</code>; otherwise returns
                      <code>false</code>                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="186">
                <params>
                    <param name="type" type="MimeType"/>
                </params>
            </method>
            <javadoc line="190">
                Returns &lt;code&gt;true&lt;/code&gt; if the primary type and the
                  subtype of this object are the same as the content type
                  described in &lt;code&gt;rawdata&lt;/code&gt;; otherwise returns
                  &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    rawdata the raw data to be examined                    
                </param>
                <return>
                    <code>true</code> if the primary type and the
                      subtype of this object are the same as the content type
                      described in <code>rawdata</code>; otherwise returns
                      <code>false</code>; if <code>rawdata</code> is
                      <code>null</code>, returns <code>false</code>                    
                </return>
            </javadoc>
            <method name="match" type="boolean" line="202">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
            </method>
            <javadoc line="206">
                The object implements the writeExternal method to save its contents
                  by calling the methods of DataOutput for its primitive values or
                  calling the writeObject method of ObjectOutput for objects, strings
                  and arrays.                
                <exception>
                    IOException Includes any I/O exceptions that may occur                    
                </exception>
            </javadoc>
            <method name="writeExternal" type="void" line="213">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
                <declaration name="s" type="String" line="214"/>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="225">
                The object implements the readExternal method to restore its
                  contents by calling the methods of DataInput for primitive
                  types and readObject for objects, strings and arrays.  The
                  readExternal method must read the values in the same sequence
                  and with the same types as were written by writeExternal.                
                <exception>
                    ClassNotFoundException If the class for an object being
                      restored cannot be found.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="234">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
                <declaration name="s" type="String" line="235"/>
                <scope line="236">
                    <declaration name="ba" type="byte[]" line="237"/>
                </scope>
                <scope line="241"/>
                <scope line="244"/>
            </method>
            <javadoc line="248">
                Returns a clone of this object.                
                <return>
                    a clone of this object                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="252">
                <declaration name="newObj" type="MimeType" line="253"/>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <declaration name="primaryType" type="String" line="262"/>
            <declaration name="subType" type="String" line="263"/>
            <declaration name="parameters" type="MimeTypeParameterList" line="264"/>
            <javadoc line="265">
                Determines whether or not a given character belongs to a legal token.                
            </javadoc>
            <method name="isTokenChar" type="boolean" line="268">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="271">
                Determines whether or not a given string is a legal token.                
                <throws>
                    NullPointerException if <code>s</code> is null                    
                </throws>
            </javadoc>
            <method name="isValidToken" type="boolean" line="275">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="276"/>
                <scope line="277">
                    <scope line="278">
                        <declaration name="c" type="char" line="279"/>
                        <scope line="280"/>
                    </scope>
                </scope>
                <scope line="286"/>
            </method>
            <declaration name="TSPECIALS" type="String" line="290"/>
            <javadoc line="290">
                A string that holds all the special chars.                
            </javadoc>
        </class>
    </source>