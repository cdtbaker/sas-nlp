<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.datatransfer">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <class name="MimeTypeParameterList" line="35">
            <comment line="72">
                hashCode()                
            </comment>
            <comment line="110">
                equals()                
            </comment>
            <comment line="313">
                below here be scary parsing related things                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="35">
                An object that encapsualtes the parameter list of a MimeType
                  as defined in RFC 2045 and 2046.                
                <author>
                    jeff.dunn@eng.sun.com                    
                </author>
            </javadoc>
            <javadoc line="43">
                Default constructor.                
            </javadoc>
            <method name="MimeTypeParameterList" type="constructor" line="46"/>
            <method name="MimeTypeParameterList" type="constructor" line="52">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
                <comment line="55">
                    now parse rawdata                    
                </comment>
            </method>
            <method name="hashCode" type="int" line="59">
                <comment line="60">
                    &quot;random&quot; value for empty lists                    
                </comment>
                <declaration name="code" type="int" line="60"/>
                <declaration name="paramName" type="String" line="61"/>
                <declaration name="enum_" type="Enumeration" line="62"/>
                <scope line="64"/>
            </method>
            <javadoc line="73">
                Two parameter lists are considered equal if they have exactly
                  the same set of parameter names and associated values. The
                  order of the parameters is not considered.                
            </javadoc>
            <method name="equals" type="boolean" line="78">
                <params>
                    <param name="thatObject" type="Object"/>
                </params>
                <comment line="79">
                    System.out.println(&quot;MimeTypeParameterList.equals(&quot;+this+&quot;,&quot;+thatObject+&quot;)&quot;);                    
                </comment>
                <comment line="99">
                    both null -&gt; equal, only one null -&gt; not equal                    
                </comment>
                <comment line="106">
                    while iterator                    
                </comment>
                <scope line="80"/>
                <declaration name="that" type="MimeTypeParameterList" line="83"/>
                <scope line="84"/>
                <declaration name="name" type="String" line="87"/>
                <declaration name="thisValue" type="String" line="88"/>
                <declaration name="thatValue" type="String" line="89"/>
                <declaration name="entries" type="Set" line="90"/>
                <declaration name="iterator" type="Iterator" line="91"/>
                <declaration name="entry" type="Map.Entry" line="92"/>
                <scope line="93">
                    <scope line="98">
                        <scope line="100"/>
                    </scope>
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="111">
                A routine for parsing the parameter list out of a String.                
            </javadoc>
            <method name="parse" type="void" line="114">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
                <comment line="127">
                    eat the &apos;;&apos;                    
                </comment>
                <comment line="130">
                    now parse the parameter name                    
                </comment>
                <comment line="132">
                    skip whitespace                    
                </comment>
                <comment line="136">
                    find the end of the token char run                    
                </comment>
                <comment line="145">
                    now parse the &apos;=&apos; that separates the name from the value                    
                </comment>
                <comment line="147">
                    skip whitespace                    
                </comment>
                <comment line="151">
                    eat it and parse the parameter value                    
                </comment>
                <comment line="154">
                    skip whitespace                    
                </comment>
                <comment line="158">
                    now find out whether or not we have a quoted value                    
                </comment>
                <comment line="161">
                    yup it&apos;s quoted so eat it and capture the quoted string                    
                </comment>
                <comment line="166">
                    find the next unescqped quote                    
                </comment>
                <comment line="171">
                    found an escape sequence so pass this and the next character                    
                </comment>
                <comment line="174">
                    foundit!                    
                </comment>
                <comment line="182">
                    eat the quote                    
                </comment>
                <comment line="191">
                    nope it&apos;s an ordinary token so it ends with a non-token char                    
                </comment>
                <comment line="205">
                    it ain&apos;t a value                    
                </comment>
                <comment line="209">
                    now put the data into the hashtable                    
                </comment>
                <comment line="221">
                    setup the next iteration                    
                </comment>
                <declaration name="length" type="int" line="115"/>
                <scope line="116">
                    <declaration name="currentIndex" type="int" line="117"/>
                    <declaration name="lastIndex" type="int" line="118"/>
                    <scope line="120">
                        <declaration name="currentChar" type="char" line="121"/>
                        <scope line="122">
                            <declaration name="name" type="String" line="123"/>
                            <declaration name="value" type="String" line="124"/>
                            <declaration name="foundit" type="boolean" line="125"/>
                            <scope line="135">
                                <scope line="139"/>
                                <scope line="150">
                                    <scope line="157">
                                        <scope line="160">
                                            <scope line="165">
                                                <scope line="168">
                                                    <scope line="170"/>
                                                    <scope line="173"/>
                                                    <scope line="176"/>
                                                </scope>
                                                <scope line="180"/>
                                                <scope line="184"/>
                                            </scope>
                                            <scope line="187"/>
                                        </scope>
                                        <scope line="190">
                                            <scope line="194">
                                                <scope line="197"/>
                                                <scope line="199"/>
                                            </scope>
                                        </scope>
                                        <scope line="204"/>
                                    </scope>
                                    <scope line="211"/>
                                </scope>
                                <scope line="214"/>
                            </scope>
                            <scope line="217"/>
                            <scope line="223"/>
                        </scope>
                        <scope line="227"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="234">
                return the number of name-value pairs in this list.                
            </javadoc>
            <method name="size" type="int" line="237"/>
            <javadoc line="241">
                Determine whether or not this list is empty.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="244"/>
            <javadoc line="248">
                Retrieve the value associated with the given name, or null if there
                  is no current association.                
            </javadoc>
            <method name="get" type="String" line="252">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="256">
                Set the value to be associated with the given name, replacing
                  any previous association.                
            </javadoc>
            <method name="set" type="void" line="260">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="264">
                Remove any value associated with the given name.                
            </javadoc>
            <method name="remove" type="void" line="267">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="271">
                Retrieve an enumeration of all the names in this list.                
            </javadoc>
            <method name="getNames" type="Enumeration" line="274"/>
            <method name="toString" type="String" line="278">
                <comment line="279">
                    Heuristic: 8 characters per field                    
                </comment>
                <declaration name="buffer" type="StringBuilder" line="280"/>
                <declaration name="keys" type="Enumeration" line="282"/>
                <scope line="284">
                    <declaration name="key" type="String" line="287"/>
                </scope>
            </method>
            <javadoc line="296">
                @return a clone of this object                
            </javadoc>
            <method name="clone" type="Object" line="300">
                <declaration name="newObj" type="MimeTypeParameterList" line="301"/>
                <scope line="302"/>
                <scope line="304"/>
            </method>
            <declaration name="parameters" type="Hashtable" line="310"/>
            <javadoc line="314">
                Determine whether or not a given character belongs to a legal token.                
            </javadoc>
            <method name="isTokenChar" type="boolean" line="317">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="321">
                return the index of the first non white space character in
                  rawdata at or after index i.                
            </javadoc>
            <method name="skipWhiteSpace" type="int" line="325">
                <params>
                    <param name="rawdata" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="length" type="int" line="326"/>
                <scope line="327">
                    <declaration name="c" type="char" line="328"/>
                    <scope line="329"/>
                </scope>
            </method>
            <javadoc line="338">
                A routine that knows how and when to quote and escape the given value.                
            </javadoc>
            <method name="quote" type="String" line="341">
                <params>
                    <param name="value" type="String"/>
                </params>
                <comment line="344">
                    check to see if we actually have to quote this thing                    
                </comment>
                <comment line="353">
                    add the initial quote                    
                </comment>
                <comment line="356">
                    add the properly escaped text                    
                </comment>
                <comment line="365">
                    add the closing quote                    
                </comment>
                <declaration name="needsQuotes" type="boolean" line="342"/>
                <declaration name="length" type="int" line="345"/>
                <scope line="346"/>
                <scope line="350">
                    <declaration name="buffer" type="StringBuilder" line="351"/>
                    <scope line="357">
                        <declaration name="c" type="char" line="358"/>
                        <scope line="359"/>
                    </scope>
                </scope>
                <scope line="371"/>
            </method>
            <javadoc line="376">
                A routine that knows how to strip the quotes and escape sequences from the given value.                
            </javadoc>
            <method name="unquote" type="String" line="379">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="valueLength" type="int" line="380"/>
                <declaration name="buffer" type="StringBuilder" line="381"/>
                <declaration name="escaped" type="boolean" line="383"/>
                <scope line="384">
                    <declaration name="currentChar" type="char" line="385"/>
                    <scope line="386"/>
                    <scope line="388"/>
                    <scope line="391"/>
                </scope>
            </method>
            <declaration name="TSPECIALS" type="String" line="399"/>
            <javadoc line="399">
                A string that holds all the special chars.                
            </javadoc>
        </class>
    </source>