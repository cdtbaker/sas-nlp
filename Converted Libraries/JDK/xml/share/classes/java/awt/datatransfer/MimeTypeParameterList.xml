<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.datatransfer">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <class name="MimeTypeParameterList" line="7">
            <implements interface="Cloneable"/>
            <javadoc line="7">
                An object that encapsualtes the parameter list of a MimeType
                  as defined in RFC 2045 and 2046.                
                <author>
                    jeff.dunn@eng.sun.com                    
                </author>
            </javadoc>
            <javadoc line="13">
                Default constructor.                
            </javadoc>
            <method name="MimeTypeParameterList" type="constructor" line="16"/>
            <method name="MimeTypeParameterList" type="constructor" line="19">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="23">
                <declaration name="code" type="int" line="24"/>
                <declaration name="paramName" type="String" line="25"/>
                <declaration name="enum_" type="Enumeration" line="26"/>
                <scope line="27"/>
            </method>
            <javadoc line="34">
                Two parameter lists are considered equal if they have exactly
                  the same set of parameter names and associated values. The
                  order of the parameters is not considered.                
            </javadoc>
            <method name="equals" type="boolean" line="39">
                <params>
                    <param name="thatObject" type="Object"/>
                </params>
                <scope line="40"/>
                <declaration name="that" type="MimeTypeParameterList" line="43"/>
                <scope line="44"/>
                <declaration name="name" type="String" line="47"/>
                <declaration name="thisValue" type="String" line="48"/>
                <declaration name="thatValue" type="String" line="49"/>
                <declaration name="entries" type="Set" line="50"/>
                <declaration name="iterator" type="Iterator" line="51"/>
                <declaration name="entry" type="Map.Entry" line="52"/>
                <scope line="53">
                    <scope line="58">
                        <scope line="59"/>
                    </scope>
                    <scope line="63"/>
                </scope>
            </method>
            <javadoc line="69">
                A routine for parsing the parameter list out of a String.                
            </javadoc>
            <method name="parse" type="void" line="72">
                <params>
                    <param name="rawdata" type="String"/>
                </params>
                <declaration name="length" type="int" line="73"/>
                <scope line="74">
                    <declaration name="currentIndex" type="int" line="75"/>
                    <declaration name="lastIndex" type="int" line="76"/>
                    <scope line="77">
                        <declaration name="currentChar" type="char" line="78"/>
                        <scope line="79">
                            <declaration name="name" type="String" line="80"/>
                            <declaration name="value" type="String" line="81"/>
                            <declaration name="foundit" type="boolean" line="82"/>
                            <scope line="85">
                                <scope line="88"/>
                                <scope line="94">
                                    <scope line="97">
                                        <scope line="99">
                                            <scope line="102">
                                                <scope line="104">
                                                    <scope line="106"/>
                                                    <scope line="109"/>
                                                    <scope line="112"/>
                                                </scope>
                                                <scope line="116"/>
                                                <scope line="120"/>
                                            </scope>
                                            <scope line="124"/>
                                        </scope>
                                        <scope line="128">
                                            <scope line="131">
                                                <scope line="133"/>
                                                <scope line="136"/>
                                            </scope>
                                        </scope>
                                        <scope line="142"/>
                                    </scope>
                                    <scope line="147"/>
                                </scope>
                                <scope line="151"/>
                            </scope>
                            <scope line="155"/>
                            <scope line="159"/>
                        </scope>
                        <scope line="163"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                return the number of name-value pairs in this list.                
            </javadoc>
            <method name="size" type="int" line="172"/>
            <javadoc line="175">
                Determine whether or not this list is empty.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="178"/>
            <javadoc line="181">
                Retrieve the value associated with the given name, or null if there
                  is no current association.                
            </javadoc>
            <method name="get" type="String" line="185">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="188">
                Set the value to be associated with the given name, replacing
                  any previous association.                
            </javadoc>
            <method name="set" type="void" line="192">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="195">
                Remove any value associated with the given name.                
            </javadoc>
            <method name="remove" type="void" line="198">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="201">
                Retrieve an enumeration of all the names in this list.                
            </javadoc>
            <method name="getNames" type="Enumeration" line="204"/>
            <method name="toString" type="String" line="207">
                <declaration name="buffer" type="StringBuilder" line="208"/>
                <declaration name="keys" type="Enumeration" line="209"/>
                <scope line="210">
                    <declaration name="key" type="String" line="212"/>
                </scope>
            </method>
            <javadoc line="219">
                @return a clone of this object                
            </javadoc>
            <method name="clone" type="Object" line="222">
                <declaration name="newObj" type="MimeTypeParameterList" line="223"/>
                <scope line="224"/>
                <scope line="227"/>
            </method>
            <declaration name="parameters" type="Hashtable" line="232"/>
            <javadoc line="233">
                Determine whether or not a given character belongs to a legal token.                
            </javadoc>
            <method name="isTokenChar" type="boolean" line="236">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="239">
                return the index of the first non white space character in
                  rawdata at or after index i.                
            </javadoc>
            <method name="skipWhiteSpace" type="int" line="243">
                <params>
                    <param name="rawdata" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="length" type="int" line="244"/>
                <scope line="245">
                    <declaration name="c" type="char" line="246"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="254">
                A routine that knows how and when to quote and escape the given value.                
            </javadoc>
            <method name="quote" type="String" line="257">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="needsQuotes" type="boolean" line="258"/>
                <declaration name="length" type="int" line="259"/>
                <scope line="260"/>
                <scope line="263">
                    <declaration name="buffer" type="StringBuilder" line="264"/>
                    <scope line="266">
                        <declaration name="c" type="char" line="267"/>
                        <scope line="268"/>
                    </scope>
                </scope>
                <scope line="276"/>
            </method>
            <javadoc line="280">
                A routine that knows how to strip the quotes and escape sequences from the given value.                
            </javadoc>
            <method name="unquote" type="String" line="283">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="valueLength" type="int" line="284"/>
                <declaration name="buffer" type="StringBuilder" line="285"/>
                <declaration name="escaped" type="boolean" line="286"/>
                <scope line="287">
                    <declaration name="currentChar" type="char" line="288"/>
                    <scope line="289"/>
                    <scope line="292"/>
                    <scope line="296"/>
                </scope>
            </method>
            <declaration name="TSPECIALS" type="String" line="302"/>
            <javadoc line="302">
                A string that holds all the special chars.                
            </javadoc>
        </class>
    </source>