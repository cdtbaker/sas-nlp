<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <class name="FocusTraversalPolicy" line="2">
            <javadoc line="2">
                A FocusTraversalPolicy defines the order in which Components with a
                  particular focus cycle root are traversed. Instances can apply the policy to
                  arbitrary focus cycle roots, allowing themselves to be shared across
                  Containers. They do not need to be reinitialized when the focus cycle roots
                  of a Component hierarchy change.
                  &lt;p&gt;
                  The core responsibility of a FocusTraversalPolicy is to provide algorithms
                  determining the next and previous Components to focus when traversing
                  forward or backward in a UI. Each FocusTraversalPolicy must also provide
                  algorithms for determining the first, last, and default Components in a
                  traversal cycle. First and last Components are used when normal forward and
                  backward traversal, respectively, wraps. The default Component is the first
                  to receive focus when traversing down into a new focus traversal cycle.
                  A FocusTraversalPolicy can optionally provide an algorithm for determining
                  a Window&apos;s initial Component. The initial Component is the first to receive
                  focus when a Window is first made visible.
                  &lt;p&gt;
                  FocusTraversalPolicy takes into account &lt;a
                  href=&quot;doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus traversal
                  policy providers&lt;/a&gt;.  When searching for first/last/next/previous Component,
                  if a focus traversal policy provider is encountered, its focus traversal
                  policy is used to perform the search operation.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html&quot;&gt;
                  How to Use the Focus Subsystem&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;, and the
                  &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt;
                  for more information.                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    Container#setFocusTraversalPolicy                    
                </see>
                <see>
                    Container#getFocusTraversalPolicy                    
                </see>
                <see>
                    Container#setFocusCycleRoot                    
                </see>
                <see>
                    Container#isFocusCycleRoot                    
                </see>
                <see>
                    Container#setFocusTraversalPolicyProvider                    
                </see>
                <see>
                    Container#isFocusTraversalPolicyProvider                    
                </see>
                <see>
                    KeyboardFocusManager#setDefaultFocusTraversalPolicy                    
                </see>
                <see>
                    KeyboardFocusManager#getDefaultFocusTraversalPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getComponentAfter" type="Component" line="44"/>
            <javadoc line="44">
                Returns the Component that should receive the focus after aComponent.
                  aContainer must be a focus cycle root of aComponent or a focus traversal
                  policy provider.                
                <param>
                    aContainer a focus cycle root of aComponent or focus traversal
                      policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus after aComponent, or
                      null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if
                      either aContainer or aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentBefore" type="Component" line="59"/>
            <javadoc line="59">
                Returns the Component that should receive the focus before aComponent.
                  aContainer must be a focus cycle root of aComponent or a focus traversal
                  policy provider.                
                <param>
                    aContainer a focus cycle root of aComponent or focus traversal
                      policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus before aComponent,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if
                      either aContainer or aComponent is null                    
                </throws>
            </javadoc>
            <method name="getFirstComponent" type="Component" line="74"/>
            <javadoc line="74">
                Returns the first Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  forward direction.                
                <param>
                    aContainer the focus cycle root or focus traversal policy provider
                      whose first Component is to be returned                    
                </param>
                <return>
                    the first Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getLastComponent" type="Component" line="85"/>
            <javadoc line="85">
                Returns the last Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  reverse direction.                
                <param>
                    aContainer the focus cycle root or focus traversal policy
                      provider whose last Component is to be returned                    
                </param>
                <return>
                    the last Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getDefaultComponent" type="Component" line="96"/>
            <javadoc line="96">
                Returns the default Component to focus. This Component will be the first
                  to receive focus when traversing down into a new focus traversal cycle
                  rooted at aContainer.                
                <param>
                    aContainer the focus cycle root or focus traversal policy
                      provider whose default Component is to be returned                    
                </param>
                <return>
                    the default Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <javadoc line="107">
                Returns the Component that should receive the focus when a Window is
                  made visible for the first time. Once the Window has been made visible
                  by a call to &lt;code&gt;show()&lt;/code&gt; or &lt;code&gt;setVisible(true)&lt;/code&gt;, the
                  initial Component will not be used again. Instead, if the Window loses
                  and subsequently regains focus, or is made invisible or undisplayable
                  and subsequently made visible and displayable, the Window&apos;s most
                  recently focused Component will become the focus owner. The default
                  implementation of this method returns the default Component.                
                <param>
                    window the Window whose initial Component is to be returned                    
                </param>
                <return>
                    the Component that should receive the focus when window is made
                      visible for the first time, or null if no suitable Component can
                      be found                    
                </return>
                <see>
                    #getDefaultComponent                    
                </see>
                <see>
                    Window#getMostRecentFocusOwner                    
                </see>
                <throws>
                    IllegalArgumentException if window is null                    
                </throws>
            </javadoc>
            <method name="getInitialComponent" type="Component" line="124">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="125"/>
                <declaration name="def" type="Component" line="128"/>
                <scope line="129"/>
            </method>
        </class>
    </source>