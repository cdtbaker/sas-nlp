<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.MenuComponentPeer"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="javax.accessibility"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <class name="MenuComponent" line="39">
            <comment line="106">
                The menu&apos;s AccessControlContext.                
            </comment>
            <comment line="112">
                Returns the acc this menu component was constructed with.                
            </comment>
            <comment line="123">
                Internal constants for serialization.                
            </comment>
            <comment line="129">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="211">
                NOTE: This method may be called by privileged threads.
                       This functionality is implemented in a package-private method
                       to insure that it cannot be overridden by client subclasses.
                       DO NOT INVOKE CLIENT CODE ON THIS THREAD!                
            </comment>
            <comment line="246">
                NOTE: This method may be called by privileged threads.
                       This functionality is implemented in a package-private method
                       to insure that it cannot be overridden by client subclasses.
                       DO NOT INVOKE CLIENT CODE ON THIS THREAD!                
            </comment>
            <comment line="269">
                getFont_NoClientCode()                
            </comment>
            <comment line="364">
                REMIND: remove when filtering is done at lower level                
            </comment>
            <comment line="440">
                --- Accessibility Support ---
                
                  MenuComponent will contain all of the methods in interface Accessible,
                  though it won&apos;t actually implement the interface - that will be up
                  to the individual objects which extend MenuComponent.                
            </comment>
            <comment line="1021">
                inner class AccessibleAWTComponent                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="39">
                The abstract class &lt;code&gt;MenuComponent&lt;/code&gt; is the superclass
                  of all menu-related components. In this respect, the class
                  &lt;code&gt;MenuComponent&lt;/code&gt; is analogous to the abstract superclass
                  &lt;code&gt;Component&lt;/code&gt; for AWT components.
                  &lt;p&gt;
                  Menu components receive and process AWT events, just as components do,
                  through the method &lt;code&gt;processEvent&lt;/code&gt;.                
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="53">
                <scope line="56"/>
            </scope>
            <declaration name="peer" type="MenuComponentPeer" line="61"/>
            <declaration name="parent" type="MenuContainer" line="62"/>
            <declaration name="appContext" type="AppContext" line="64"/>
            <javadoc line="64">
                The &lt;code&gt;AppContext&lt;/code&gt; of the &lt;code&gt;MenuComponent&lt;/code&gt;.
                  This is set in the constructor and never changes.                
            </javadoc>
            <declaration name="font" type="Font" line="70"/>
            <javadoc line="70">
                The menu component&apos;s font. This value can be
                  &lt;code&gt;null&lt;/code&gt; at which point a default will be used.
                  This defaults to &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setFont(Font)                    
                </see>
                <see>
                    #getFont()                    
                </see>
            </javadoc>
            <declaration name="name" type="String" line="81"/>
            <javadoc line="81">
                The menu component&apos;s name, which defaults to &lt;code&gt;null&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getName()                    
                </see>
                <see>
                    #setName(String)                    
                </see>
            </javadoc>
            <declaration name="nameExplicitlySet" type="boolean" line="89"/>
            <javadoc line="89">
                A variable to indicate whether a name is explicitly set.
                  If &lt;code&gt;true&lt;/code&gt; the name will be set explicitly.
                  This defaults to &lt;code&gt;false&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setName(String)                    
                </see>
            </javadoc>
            <declaration name="newEventsOnly" type="boolean" line="98"/>
            <javadoc line="98">
                Defaults to &lt;code&gt;false&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #dispatchEvent(AWTEvent)                    
                </see>
            </javadoc>
            <declaration name="acc" type="AccessControlContext" line="108"/>
            <method name="getAccessControlContext" type="AccessControlContext" line="114">
                <scope line="115"/>
            </method>
            <declaration name="actionListenerK" type="String" line="125"/>
            <declaration name="itemListenerK" type="String" line="126"/>
            <declaration name="serialVersionUID" type="long" line="131"/>
            <scope line="133">
                <anonymous_class line="135">
                    <method name="getAppContext" type="AppContext" line="136">
                        <params>
                            <param name="menuComp" type="MenuComponent"/>
                        </params>
                    </method>
                    <method name="setAppContext" type="void" line="140">
                        <params>
                            <param name="menuComp" type="MenuComponent"/>
                            <param name="appContext" type="AppContext"/>
                        </params>
                    </method>
                    <method name="getParent" type="MenuContainer" line="143">
                        <params>
                            <param name="menuComp" type="MenuComponent"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <javadoc line="149">
                Creates a &lt;code&gt;MenuComponent&lt;/code&gt;.                
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="MenuComponent" type="constructor" line="156"/>
            <javadoc line="161">
                Constructs a name for this &lt;code&gt;MenuComponent&lt;/code&gt;.
                  Called by &lt;code&gt;getName&lt;/code&gt; when the name is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a name for this &lt;code&gt;MenuComponent&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="constructComponentName" type="String" line="166">
                <comment line="168">
                    For strict compliance with prior platform versions, a MenuComponent
                     that doesn&apos;t set its name should return null from
                     getName()                    
                </comment>
            </method>
            <javadoc line="172">
                Gets the name of the menu component.                
                <return>
                    the name of the menu component                    
                </return>
                <see>
                    java.awt.MenuComponent#setName(java.lang.String)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="178">
                <scope line="179">
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="188">
                Sets the name of the component to the specified string.                
                <param>
                    name    the name of the menu component                    
                </param>
                <see>
                    java.awt.MenuComponent#getName                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setName" type="void" line="194">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="195"/>
            </method>
            <javadoc line="201">
                Returns the parent container for this menu component.                
                <return>
                    the menu component containing this menu component,
                      or &lt;code&gt;null&lt;/code&gt; if this menu component
                      is the outermost component, the menu bar itself                    
                </return>
            </javadoc>
            <method name="getParent" type="MenuContainer" line="207"/>
            <method name="getParent_NoClientCode" type="MenuContainer" line="214"/>
            <javadoc line="218">
                @deprecated As of JDK version 1.1,
                  programs should not directly manipulate peers.                
            </javadoc>
            <method name="getPeer" type="MenuComponentPeer" line="223"/>
            <javadoc line="227">
                Gets the font used for this menu component.                
                <return>
                    the font used in this menu component, if there is one;
                      &lt;code&gt;null&lt;/code&gt; otherwise                    
                </return>
                <see>
                    java.awt.MenuComponent#setFont                    
                </see>
            </javadoc>
            <method name="getFont" type="Font" line="233">
                <declaration name="font" type="Font" line="234"/>
                <scope line="235"/>
                <declaration name="parent" type="MenuContainer" line="238"/>
                <scope line="239"/>
            </method>
            <method name="getFont_NoClientCode" type="Font" line="249">
                <comment line="256">
                    The MenuContainer interface does not have getFont_NoClientCode()
                     and it cannot, because it must be package-private. Because of
                     this, we must manually cast classes that implement
                     MenuContainer.                    
                </comment>
                <declaration name="font" type="Font" line="250"/>
                <scope line="251"/>
                <declaration name="parent" type="Object" line="259"/>
                <scope line="260">
                    <scope line="261"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="271">
                Sets the font to be used for this menu component to the specified
                  font. This font is also used by all subcomponents of this menu
                  component, unless those subcomponents specify a different font.
                  &lt;p&gt;
                  Some platforms may not support setting of all font attributes
                  of a menu component; in such cases, calling &lt;code&gt;setFont&lt;/code&gt;
                  will have no effect on the unsupported font attributes of this
                  menu component.  Unless subcomponents of this menu component
                  specify a different font, this font will be used by those
                  subcomponents if supported by the underlying platform.                
                <param>
                    f   the font to be set                    
                </param>
                <see>
                    #getFont                    
                </see>
                <see>
                    Font#getAttributes                    
                </see>
                <see>
                    java.awt.font.TextAttribute                    
                </see>
            </javadoc>
            <method name="setFont" type="void" line="288">
                <params>
                    <param name="f" type="Font"/>
                </params>
                <comment line="291">
                    Fixed 6312943: NullPointerException in method MenuComponent.setFont(Font)                    
                </comment>
                <declaration name="peer" type="MenuComponentPeer" line="291"/>
                <scope line="292"/>
            </method>
            <javadoc line="297">
                Removes the menu component&apos;s peer.  The peer allows us to modify the
                  appearance of the menu component without changing the functionality of
                  the menu component.                
            </javadoc>
            <method name="removeNotify" type="void" line="302">
                <scope line="303">
                    <declaration name="p" type="MenuComponentPeer" line="304"/>
                    <scope line="305"/>
                </scope>
            </method>
            <javadoc line="313">
                Posts the specified event to the menu.
                  This method is part of the Java&amp;nbsp;1.0 event system
                  and it is maintained only for backwards compatibility.
                  Its use is discouraged, and it may not be supported
                  in the future.                
                <param>
                    evt the event which is to take place                    
                </param>
                <deprecated>
                    As of JDK version 1.1, replaced by {@link #dispatchEvent(AWTEvent) dispatchEvent}.                    
                </deprecated>
            </javadoc>
            <method name="postEvent" type="boolean" line="324">
                <params>
                    <param name="evt" type="Event"/>
                </params>
                <declaration name="parent" type="MenuContainer" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="332">
                Delivers an event to this component or one of its sub components.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="dispatchEvent" type="void" line="336">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="dispatchEventImpl" type="void" line="340">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <comment line="356">
                    backward compatibility                    
                </comment>
                <scope line="347">
                    <scope line="348"/>
                    <scope line="350"/>
                </scope>
                <scope line="355">
                    <declaration name="olde" type="Event" line="356"/>
                    <scope line="357"/>
                </scope>
            </method>
            <method name="eventEnabled" type="boolean" line="364">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <javadoc line="367">
                Processes events occurring on this menu component.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="376">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <javadoc line="379">
                Returns a string representing the state of this
                  &lt;code&gt;MenuComponent&lt;/code&gt;. This method is intended to be used
                  only for debugging purposes, and the content and format of the
                  returned string may vary between implementations. The returned
                  string may be empty but may not be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this menu component                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="388">
                <declaration name="thisName" type="String" line="389"/>
            </method>
            <javadoc line="393">
                Returns a representation of this menu component as a string.                
                <return>
                    a string representation of this menu component                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="397"/>
            <javadoc line="401">
                Gets this component&apos;s locking object (the object that owns the thread
                  sychronization monitor) for AWT component-tree and layout
                  operations.                
                <return>
                    this component&apos;s locking object                    
                </return>
            </javadoc>
            <method name="getTreeLock" type="Object" line="407"/>
            <javadoc line="411">
                Reads the menu component from an object input stream.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <serial>
                                        
                </serial>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="423">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <method name="initIDs" type="void" line="433"/>
            <javadoc line="433">
                Initialize JNI field and method IDs.                
            </javadoc>
            <declaration name="accessibleContext" type="AccessibleContext" line="447"/>
            <javadoc line="449">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with
                  this &lt;code&gt;MenuComponent&lt;/code&gt;.
                  The method implemented by this base class returns &lt;code&gt;null&lt;/code&gt;.
                  Classes that extend &lt;code&gt;MenuComponent&lt;/code&gt;
                  should implement this method to return the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; associated with the subclass.                
                <return>
                    the &lt;code&gt;AccessibleContext&lt;/code&gt; of this
                      &lt;code&gt;MenuComponent&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="462"/>
            <class name="AccessibleAWTMenuComponent" line="466">
                <extends class="AccessibleContext"/>
                <comment line="481">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <comment line="493">
                    AccessibleContext methods                    
                </comment>
                <comment line="643">
                    AccessibleComponent methods                    
                </comment>
                <comment line="937">
                    AccessibleSelection methods                    
                </comment>
                <implements interface="java.io.Serializable"/>
                <implements interface="AccessibleComponent"/>
                <implements interface="AccessibleSelection"/>
                <javadoc line="466">
                    Inner class of &lt;code&gt;MenuComponent&lt;/code&gt; used to provide
                      default support for accessibility.  This class is not meant
                      to be used directly by application developers, but is instead
                      meant only to be subclassed by menu component developers.
                      &lt;p&gt;
                      The class used to obtain the accessible role for this object.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="483"/>
                <javadoc line="485">
                    Although the class is abstract, this should be called by
                      all sub-classes.                    
                </javadoc>
                <method name="AccessibleAWTMenuComponent" type="constructor" line="489"/>
                <javadoc line="495">
                    Gets the &lt;code&gt;AccessibleSelection&lt;/code&gt; associated with this
                      object which allows its &lt;code&gt;Accessible&lt;/code&gt; children to be selected.                    
                    <return>
                        &lt;code&gt;AccessibleSelection&lt;/code&gt; if supported by object;
                          else return &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                    <see>
                        AccessibleSelection                        
                    </see>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="503"/>
                <javadoc line="507">
                    Gets the accessible name of this object.  This should almost never
                      return &lt;code&gt;java.awt.MenuComponent.getName&lt;/code&gt;, as that
                      generally isn&apos;t a localized name, and doesn&apos;t have meaning for the
                      user.  If the object is fundamentally a text object (e.g. a menu item), the
                      accessible name should be the text of the object (e.g. &quot;save&quot;).
                      If the object has a tooltip, the tooltip text may also be an
                      appropriate String to return.                    
                    <return>
                        the localized name of the object -- can be &lt;code&gt;null&lt;/code&gt;
                          if this object does not have a name                        
                    </return>
                    <see>
                        AccessibleContext#setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="520"/>
                <javadoc line="524">
                    Gets the accessible description of this object.  This should be
                      a concise, localized description of what this object is - what
                      is its meaning to the user.  If the object has a tooltip, the
                      tooltip text may be an appropriate string to return, assuming
                      it contains a concise description of the object (instead of just
                      the name of the object - e.g. a &quot;Save&quot; icon on a toolbar that
                      had &quot;save&quot; as the tooltip text shouldn&apos;t return the tooltip
                      text as the description, but something like &quot;Saves the current
                      text document&quot; instead).                    
                    <return>
                        the localized description of the object -- can be
                          &lt;code&gt;null&lt;/code&gt; if this object does not have a description                        
                    </return>
                    <see>
                        AccessibleContext#setAccessibleDescription                        
                    </see>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="539"/>
                <javadoc line="543">
                    Gets the role of this object.                    
                    <return>
                        an instance of &lt;code&gt;AccessibleRole&lt;/code&gt;
                          describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="550">
                    <comment line="552">
                        Non-specific -- overridden in subclasses                        
                    </comment>
                </method>
                <javadoc line="554">
                    Gets the state of this object.                    
                    <return>
                        an instance of &lt;code&gt;AccessibleStateSet&lt;/code&gt;
                          containing the current state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="561"/>
                <javadoc line="565">
                    Gets the &lt;code&gt;Accessible&lt;/code&gt; parent of this object.
                      If the parent of this object implements &lt;code&gt;Accessible&lt;/code&gt;,
                      this method should simply return &lt;code&gt;getParent&lt;/code&gt;.                    
                    <return>
                        the &lt;code&gt;Accessible&lt;/code&gt; parent of this object -- can
                          be &lt;code&gt;null&lt;/code&gt; if this object does not have an
                          &lt;code&gt;Accessible&lt;/code&gt; parent                        
                    </return>
                </javadoc>
                <method name="getAccessibleParent" type="Accessible" line="574">
                    <scope line="575"/>
                    <scope line="577">
                        <declaration name="parent" type="MenuContainer" line="578"/>
                        <scope line="579"/>
                    </scope>
                </method>
                <javadoc line="586">
                    Gets the index of this object in its accessible parent.                    
                    <return>
                        the index of this object in its parent; -1 if this
                          object does not have an accessible parent                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="593"/>
                <javadoc line="597">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement &lt;code&gt;Accessible&lt;/code&gt;,
                      then this method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="604">
                    <comment line="606">
                        MenuComponents don&apos;t have children                        
                    </comment>
                </method>
                <javadoc line="608">
                    Returns the nth &lt;code&gt;Accessible&lt;/code&gt; child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="614">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="616">
                        MenuComponents don&apos;t have children                        
                    </comment>
                </method>
                <javadoc line="618">
                    Returns the locale of this object.                    
                    <return>
                        the locale of this object                        
                    </return>
                </javadoc>
                <method name="getLocale" type="java.util.Locale" line="623">
                    <declaration name="parent" type="MenuContainer" line="624"/>
                </method>
                <javadoc line="631">
                    Gets the &lt;code&gt;AccessibleComponent&lt;/code&gt; associated with
                      this object if one exists.  Otherwise return &lt;code&gt;null&lt;/code&gt;.                    
                    <return>
                        the component                        
                    </return>
                </javadoc>
                <method name="getAccessibleComponent" type="AccessibleComponent" line="637"/>
                <javadoc line="644">
                    Gets the background color of this object.                    
                    <return>
                        the background color, if supported, of the object;
                          otherwise, &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getBackground" type="Color" line="650">
                    <comment line="652">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="654">
                    Sets the background color of this object.
                      (For transparency, see &lt;code&gt;isOpaque&lt;/code&gt;.)                    
                    <param>
                        c the new &lt;code&gt;Color&lt;/code&gt; for the background                        
                    </param>
                    <see>
                        Component#isOpaque                        
                    </see>
                </javadoc>
                <method name="setBackground" type="void" line="661">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                    <comment line="663">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="665">
                    Gets the foreground color of this object.                    
                    <return>
                        the foreground color, if supported, of the object;
                          otherwise, &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getForeground" type="Color" line="671">
                    <comment line="673">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="675">
                    Sets the foreground color of this object.                    
                    <param>
                        c the new &lt;code&gt;Color&lt;/code&gt; for the foreground                        
                    </param>
                </javadoc>
                <method name="setForeground" type="void" line="680">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                    <comment line="682">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="684">
                    Gets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                    
                    <return>
                        the &lt;code&gt;Curso&lt;/code&gt;, if supported, of the object;
                          otherwise, &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getCursor" type="Cursor" line="690">
                    <comment line="692">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="694">
                    Sets the &lt;code&gt;Cursor&lt;/code&gt; of this object.
                      &lt;p&gt;
                      The method may have no visual effect if the Java platform
                      implementation and/or the native system do not support
                      changing the mouse cursor shape.                    
                    <param>
                        cursor the new &lt;code&gt;Cursor&lt;/code&gt; for the object                        
                    </param>
                </javadoc>
                <method name="setCursor" type="void" line="702">
                    <params>
                        <param name="cursor" type="Cursor"/>
                    </params>
                    <comment line="704">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="706">
                    Gets the &lt;code&gt;Font&lt;/code&gt; of this object.                    
                    <return>
                        the &lt;code&gt;Font&lt;/code&gt;,if supported, for the object;
                          otherwise, &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getFont" type="Font" line="712"/>
                <javadoc line="716">
                    Sets the &lt;code&gt;Font&lt;/code&gt; of this object.                    
                    <param>
                        f the new &lt;code&gt;Font&lt;/code&gt; for the object                        
                    </param>
                </javadoc>
                <method name="setFont" type="void" line="721">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <javadoc line="725">
                    Gets the &lt;code&gt;FontMetrics&lt;/code&gt; of this object.                    
                    <param>
                        f the &lt;code&gt;Font&lt;/code&gt;                        
                    </param>
                    <return>
                        the FontMetrics, if supported, the object;
                          otherwise, &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                    <see>
                        #getFont                        
                    </see>
                </javadoc>
                <method name="getFontMetrics" type="FontMetrics" line="733">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                    <comment line="735">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="737">
                    Determines if the object is enabled.                    
                    <return>
                        true if object is enabled; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isEnabled" type="boolean" line="742">
                    <comment line="744">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="746">
                    Sets the enabled state of the object.                    
                    <param>
                        b if true, enables this object; otherwise, disables it                        
                    </param>
                </javadoc>
                <method name="setEnabled" type="void" line="751">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <comment line="753">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="755">
                    Determines if the object is visible.  Note: this means that the
                      object intends to be visible; however, it may not in fact be
                      showing on the screen because one of the objects that this object
                      is contained by is not visible.  To determine if an object is
                      showing on the screen, use &lt;code&gt;isShowing&lt;/code&gt;.                    
                    <return>
                        true if object is visible; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isVisible" type="boolean" line="764">
                    <comment line="766">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="768">
                    Sets the visible state of the object.                    
                    <param>
                        b if true, shows this object; otherwise, hides it                        
                    </param>
                </javadoc>
                <method name="setVisible" type="void" line="773">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <comment line="775">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="777">
                    Determines if the object is showing.  This is determined by checking
                      the visibility of the object and ancestors of the object.  Note:
                      this will return true even if the object is obscured by another
                      (for example, it happens to be underneath a menu that was pulled
                      down).                    
                    <return>
                        true if object is showing; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isShowing" type="boolean" line="786">
                    <comment line="788">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="790">
                    Checks whether the specified point is within this object&apos;s bounds,
                      where the point&apos;s x and y coordinates are defined to be relative to
                      the coordinate system of the object.                    
                    <param>
                        p the &lt;code&gt;Point&lt;/code&gt; relative to the coordinate
                          system of the object                        
                    </param>
                    <return>
                        true if object contains &lt;code&gt;Point&lt;/code&gt;; otherwise false                        
                    </return>
                </javadoc>
                <method name="contains" type="boolean" line="799">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="801">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="803">
                    Returns the location of the object on the screen.                    
                    <return>
                        location of object on screen -- can be &lt;code&gt;null&lt;/code&gt;
                          if this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getLocationOnScreen" type="Point" line="809">
                    <comment line="811">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="813">
                    Gets the location of the object relative to the parent in the form
                      of a point specifying the object&apos;s top-left corner in the screen&apos;s
                      coordinate space.                    
                    <return>
                        an instance of &lt;code&gt;Point&lt;/code&gt; representing the
                          top-left corner of the object&apos;s bounds in the coordinate
                          space of the screen; &lt;code&gt;null&lt;/code&gt; if
                          this object or its parent are not on the screen                        
                    </return>
                </javadoc>
                <method name="getLocation" type="Point" line="823">
                    <comment line="825">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="827">
                    Sets the location of the object relative to the parent.                    
                </javadoc>
                <method name="setLocation" type="void" line="830">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="832">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="834">
                    Gets the bounds of this object in the form of a
                      &lt;code&gt;Rectangle&lt;/code&gt; object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <return>
                        a rectangle indicating this component&apos;s bounds;
                          &lt;code&gt;null&lt;/code&gt; if this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getBounds" type="Rectangle" line="843">
                    <comment line="845">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="847">
                    Sets the bounds of this object in the form of a
                      &lt;code&gt;Rectangle&lt;/code&gt; object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <param>
                        r a rectangle indicating this component&apos;s bounds                        
                    </param>
                </javadoc>
                <method name="setBounds" type="void" line="855">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                    <comment line="857">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="859">
                    Returns the size of this object in the form of a
                      &lt;code&gt;Dimension&lt;/code&gt; object. The height field of
                      the &lt;code&gt;Dimension&lt;/code&gt; object contains this object&apos;s
                      height, and the width field of the &lt;code&gt;Dimension&lt;/code&gt;
                      object contains this object&apos;s width.                    
                    <return>
                        a &lt;code&gt;Dimension&lt;/code&gt; object that indicates the
                          size of this component; &lt;code&gt;null&lt;/code&gt;
                          if this object is not on the screen                        
                    </return>
                </javadoc>
                <method name="getSize" type="Dimension" line="870">
                    <comment line="872">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="874">
                    Resizes this object.                    
                    <param>
                        d - the &lt;code&gt;Dimension&lt;/code&gt; specifying the
                          new size of the object                        
                    </param>
                </javadoc>
                <method name="setSize" type="void" line="880">
                    <params>
                        <param name="d" type="Dimension"/>
                    </params>
                    <comment line="882">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="884">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child, if one exists,
                      contained at the local coordinate &lt;code&gt;Point&lt;/code&gt;.
                      If there is no &lt;code&gt;Accessible&lt;/code&gt; child, &lt;code&gt;null&lt;/code&gt;
                      is returned.                    
                    <param>
                        p the point defining the top-left corner of the
                          &lt;code&gt;Accessible&lt;/code&gt;, given in the coordinate space
                          of the object&apos;s parent                        
                    </param>
                    <return>
                        the &lt;code&gt;Accessible&lt;/code&gt;, if it exists,
                          at the specified location; else &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="896">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="898">
                        MenuComponents don&apos;t have children                        
                    </comment>
                </method>
                <javadoc line="900">
                    Returns whether this object can accept focus or not.                    
                    <return>
                        true if object can accept focus; otherwise false                        
                    </return>
                </javadoc>
                <method name="isFocusTraversable" type="boolean" line="905">
                    <comment line="907">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="909">
                    Requests focus for this object.                    
                </javadoc>
                <method name="requestFocus" type="void" line="912">
                    <comment line="914">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="916">
                    Adds the specified focus listener to receive focus events from this
                      component.                    
                    <param>
                        l the focus listener                        
                    </param>
                </javadoc>
                <method name="addFocusListener" type="void" line="922">
                    <params>
                        <param name="l" type="java.awt.event.FocusListener"/>
                    </params>
                    <comment line="924">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="926">
                    Removes the specified focus listener so it no longer receives focus
                      events from this component.                    
                    <param>
                        l the focus listener                        
                    </param>
                </javadoc>
                <method name="removeFocusListener" type="void" line="932">
                    <params>
                        <param name="l" type="java.awt.event.FocusListener"/>
                    </params>
                    <comment line="934">
                        Not supported for MenuComponents                        
                    </comment>
                </method>
                <javadoc line="939">
                    Returns the number of &lt;code&gt;Accessible&lt;/code&gt; children currently selected.
                      If no children are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="945">
                    <comment line="947">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="949">
                    Returns an &lt;code&gt;Accessible&lt;/code&gt; representing the specified
                      selected child in the object.  If there isn&apos;t a selection, or there are
                      fewer children selected than the integer passed in, the return
                      value will be &lt;code&gt;null&lt;/code&gt;.
                      &lt;p&gt;Note that the index represents the i-th selected child, which
                      is different from the i-th child.                    
                    <param>
                        i the zero-based index of selected children                        
                    </param>
                    <return>
                        the i-th selected child                        
                    </return>
                    <see>
                        #getAccessibleSelectionCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="961">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="963">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="965">
                    Determines if the current child of this object is selected.                    
                    <return>
                        true if the current child of this object is selected;
                          else false                        
                    </return>
                    <param>
                        i the zero-based index of the child in this
                          &lt;code&gt;Accessible&lt;/code&gt; object                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="974">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="976">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="978">
                    Adds the specified &lt;code&gt;Accessible&lt;/code&gt; child of the object
                      to the object&apos;s selection.  If the object supports multiple selections,
                      the specified child is added to any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified child is already selected, this method has no effect.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="988">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="990">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="992">
                    Removes the specified child of the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="1000">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1002">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="1004">
                    Clears the selection in the object, so that no children in the
                      object are selected.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="1008">
                    <comment line="1010">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="1012">
                    Causes every child of the object to be selected
                      if the object supports multiple selections.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="1016">
                    <comment line="1018">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
            </class>
            <javadoc line="1022">
                Gets the index of this object in its accessible parent.                
                <return>
                    -1 if this object does not have an accessible parent;
                      otherwise, the index of the child in its accessible parent.                    
                </return>
            </javadoc>
            <method name="getAccessibleIndexInParent" type="int" line="1028">
                <comment line="1032">
                    MenuComponents only have accessible index when inside MenuComponents                    
                </comment>
                <declaration name="localParent" type="MenuContainer" line="1029"/>
                <scope line="1030"/>
                <declaration name="localParentMenu" type="MenuComponent" line="1034"/>
            </method>
            <javadoc line="1038">
                Gets the index of the child within this MenuComponent.                
                <param>
                    child MenuComponent whose index we are interested in.                    
                </param>
                <return>
                    -1 if this object doesn&apos;t contain the child,
                      otherwise, index of the child.                    
                </return>
            </javadoc>
            <method name="getAccessibleChildIndex" type="int" line="1045">
                <params>
                    <param name="child" type="MenuComponent"/>
                </params>
                <comment line="1047">
                    Overridden in subclasses.                    
                </comment>
            </method>
            <javadoc line="1049">
                Gets the state of this object.                
                <return>
                    an instance of &lt;code&gt;AccessibleStateSet&lt;/code&gt;
                      containing the current state set of the object                    
                </return>
                <see>
                    AccessibleState                    
                </see>
            </javadoc>
            <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1056">
                <declaration name="states" type="AccessibleStateSet" line="1057"/>
            </method>
        </class>
    </source>