<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="RadialGradientPaint" line="34">
            <extends class="MultipleGradientPaint"/>
            <javadoc line="34">
                The {@code RadialGradientPaint} class provides a way to fill a shape with
                  a circular radial color gradient pattern. The user may specify 2 or more
                  gradient colors, and this paint will provide an interpolation between
                  each color.
                  &lt;p&gt;
                  The user must specify the circle controlling the gradient pattern,
                  which is described by a center point and a radius.  The user can also
                  specify a separate focus point within that circle, which controls the
                  location of the first color of the gradient.  By default the focus is
                  set to be the center of the circle.
                  &lt;p&gt;
                  This paint will map the first color of the gradient to the focus point,
                  and the last color to the perimeter of the circle, interpolating
                  smoothly for any in-between colors specified by the user.  Any line drawn
                  from the focus point to the circumference will thus span all the gradient
                  colors.
                  &lt;p&gt;
                  Specifying a focus point outside of the radius of the circle will cause
                  the rings of the gradient pattern to be centered on the point just inside
                  the edge of the circle in the direction of the focus point.
                  The rendering will internally use this modified location as if it were
                  the specified focus point.
                  &lt;p&gt;
                  The user must provide an array of floats specifying how to distribute the
                  colors along the gradient.  These values should range from 0.0 to 1.0 and
                  act like keyframes along the gradient (they mark where the gradient should
                  be exactly a particular color).
                  &lt;p&gt;
                  In the event that the user does not set the first keyframe value equal
                  to 0 and/or the last keyframe value equal to 1, keyframes will be created
                  at these positions and the first and last colors will be replicated there.
                  So, if a user specifies the following arrays to construct a gradient:&lt;br&gt;
                  &lt;pre&gt;
                  {Color.BLUE, Color.RED}, {.3f, .7f}
                  &lt;/pre&gt;
                  this will be converted to a gradient with the following keyframes:&lt;br&gt;
                  &lt;pre&gt;
                  {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The user may also select what action the {@code RadialGradientPaint} object
                  takes when it is filling the space outside the circle&apos;s radius by
                  setting {@code CycleMethod} to either {@code REFLECTION} or {@code REPEAT}.
                  The gradient color proportions are equal for any particular line drawn
                  from the focus point. The following figure shows that the distance AB
                  is equal to the distance BC, and the distance AD is equal to the distance DE.
                  &lt;center&gt;
                  &lt;img src = &quot;doc-files/RadialGradientPaint-3.png&quot;&gt;
                  &lt;/center&gt;
                  If the gradient and graphics rendering transforms are uniformly scaled and
                  the user sets the focus so that it coincides with the center of the circle,
                  the gradient color proportions are equal for any line drawn from the center.
                  The following figure shows the distances AB, BC, AD, and DE. They are all equal.
                  &lt;center&gt;
                  &lt;img src = &quot;doc-files/RadialGradientPaint-4.png&quot;&gt;
                  &lt;/center&gt;
                  Note that some minor variations in distances may occur due to sampling at
                  the granularity of a pixel.
                  If no cycle method is specified, {@code NO_CYCLE} will be chosen by
                  default, which means the the last keyframe color will be used to fill the
                  remaining area.
                  &lt;p&gt;
                  The colorSpace parameter allows the user to specify in which colorspace
                  the interpolation should be performed, default sRGB or linearized RGB.
                  &lt;p&gt;
                  The following code demonstrates typical usage of{@code RadialGradientPaint}, where the center and focus points are
                  the same:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Point2D center = new Point2D.Float(50, 50);
                  float radius = 25;
                  float[] dist = {0.0f, 0.2f, 1.0f};
                  Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
                  RadialGradientPaint p =
                  new RadialGradientPaint(center, radius, dist, colors);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This image demonstrates the example code above, with default
                  (centered) focus for each of the three cycle methods:
                  &lt;p&gt;
                  &lt;center&gt;
                  &lt;img src = &quot;doc-files/RadialGradientPaint-1.png&quot;&gt;
                  &lt;/center&gt;
                  &lt;p&gt;
                  It is also possible to specify a non-centered focus point, as
                  in the following code:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Point2D center = new Point2D.Float(50, 50);
                  float radius = 25;
                  Point2D focus = new Point2D.Float(40, 40);
                  float[] dist = {0.0f, 0.2f, 1.0f};
                  Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
                  RadialGradientPaint p =
                  new RadialGradientPaint(center, radius, focus,
                  dist, colors,
                  CycleMethod.NO_CYCLE);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This image demonstrates the previous example code, with non-centered
                  focus for each of the three cycle methods:
                  &lt;p&gt;
                  &lt;center&gt;
                  &lt;img src = &quot;doc-files/RadialGradientPaint-2.png&quot;&gt;
                  &lt;/center&gt;                
                <see>
                    java.awt.Paint                    
                </see>
                <see>
                    java.awt.Graphics2D#setPaint                    
                </see>
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="focus" type="Point2D" line="154"/>
            <javadoc line="154">
                Focus point which defines the 0% gradient stop X coordinate.                
            </javadoc>
            <declaration name="center" type="Point2D" line="157"/>
            <javadoc line="157">
                Center of the circle defining the 100% gradient stop X coordinate.                
            </javadoc>
            <declaration name="radius" type="float" line="160"/>
            <javadoc line="160">
                Radius of the outermost circle defining the 100% gradient stop.                
            </javadoc>
            <javadoc line="163">
                Constructs a {@code RadialGradientPaint} with a default{@code NO_CYCLE} repeating method and {@code SRGB} color space,
                  using the center as the focus point.                
                <param>
                    cx the X coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    cy the Y coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="194">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="radius" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                </params>
            </method>
            <javadoc line="203">
                Constructs a {@code RadialGradientPaint} with a default{@code NO_CYCLE} repeating method and {@code SRGB} color space,
                  using the center as the focus point.                
                <param>
                    center the center point, in user space, of the circle defining
                      the gradient                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <throws>
                    NullPointerExceptionif {@code center} point is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="231">
                <params>
                    <param name="center" type="Point2D"/>
                    <param name="radius" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                </params>
            </method>
            <javadoc line="240">
                Constructs a {@code RadialGradientPaint} with a default{@code SRGB} color space, using the center as the focus point.                
                <param>
                    cx the X coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    cy the Y coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="274">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="radius" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="283">
                Constructs a {@code RadialGradientPaint} with a default{@code SRGB} color space, using the center as the focus point.                
                <param>
                    center the center point, in user space, of the circle defining
                      the gradient                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif {@code center} point is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="314">
                <params>
                    <param name="center" type="Point2D"/>
                    <param name="radius" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="323">
                Constructs a {@code RadialGradientPaint} with a default{@code SRGB} color space.                
                <param>
                    cx the X coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    cy the Y coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    fx the X coordinate of the point in user space to which the
                      first color is mapped                    
                </param>
                <param>
                    fy the Y coordinate of the point in user space to which the
                      first color is mapped                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="362">
                <params>
                    <param name="cx" type="float"/>
                    <param name="cy" type="float"/>
                    <param name="radius" type="float"/>
                    <param name="fx" type="float"/>
                    <param name="fy" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="371">
                Constructs a {@code RadialGradientPaint} with a default{@code SRGB} color space.                
                <param>
                    center the center point, in user space, of the circle defining
                      the gradient.  The last color of the gradient is mapped
                      to the perimeter of this circle.                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the color
                      gradient                    
                </param>
                <param>
                    focus the point in user space to which the first color is mapped                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient. The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif one of the points is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="405">
                <params>
                    <param name="center" type="Point2D"/>
                    <param name="radius" type="float"/>
                    <param name="focus" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="416">
                Constructs a {@code RadialGradientPaint}.                
                <param>
                    center the center point in user space of the circle defining the
                      gradient.  The last color of the gradient is mapped to
                      the perimeter of this circle.                    
                </param>
                <param>
                    radius the radius of the circle defining the extents of the
                      color gradient                    
                </param>
                <param>
                    focus the point in user space to which the first color is mapped                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <param>
                    colorSpace which color space to use for interpolation,
                      either {@code SRGB} or {@code LINEAR_RGB}                    
                </param>
                <param>
                    gradientTransform transform to apply to the gradient                    
                </param>
                <throws>
                    NullPointerExceptionif one of the points is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null,
                      or {@code colorSpace} is null,
                      or {@code gradientTransform} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code radius} is non-positive,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="458">
                <params>
                    <param name="center" type="Point2D"/>
                    <param name="radius" type="float"/>
                    <param name="focus" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                    <param name="gradientTransform" type="AffineTransform"/>
                </params>
                <comment line="461">
                    check input arguments                    
                </comment>
                <comment line="475">
                    copy parameters                    
                </comment>
                <scope line="462"/>
                <scope line="466"/>
                <scope line="470"/>
            </method>
            <javadoc line="481">
                Constructs a {@code RadialGradientPaint} with a default{@code SRGB} color space.
                  The gradient circle of the {@code RadialGradientPaint} is defined
                  by the given bounding box.
                  &lt;p&gt;
                  This constructor is a more convenient way to express the
                  following (equivalent) code:&lt;br&gt;
                  &lt;pre&gt;
                  double gw = gradientBounds.getWidth();
                  double gh = gradientBounds.getHeight();
                  double cx = gradientBounds.getCenterX();
                  double cy = gradientBounds.getCenterY();
                  Point2D center = new Point2D.Double(cx, cy);
                  AffineTransform gradientTransform = new AffineTransform();
                  gradientTransform.translate(cx, cy);
                  gradientTransform.scale(gw / 2, gh / 2);
                  gradientTransform.translate(-cx, -cy);
                  RadialGradientPaint gp =
                  new RadialGradientPaint(center, 1.0f, center,
                  fractions, colors,
                  cycleMethod,
                  ColorSpaceType.SRGB,
                  gradientTransform);
                  &lt;/pre&gt;                
                <param>
                    gradientBounds the bounding box, in user space, of the circle
                      defining the outermost extent of the gradient                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors to use in the gradient.  The first color
                      is used at the focus point, the last color around the
                      perimeter of the circle.                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif {@code gradientBounds} is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code gradientBounds} is empty,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="RadialGradientPaint" type="constructor" line="535">
                <params>
                    <param name="gradientBounds" type="Rectangle2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
                <comment line="536">
                    gradient center/focal point is the center of the bounding box,                    
                </comment>
                <comment line="537">
                    radius is set to 1.0, and then we set a scale transform                    
                </comment>
                <comment line="538">
                    to achieve an elliptical gradient defined by the bounding box                    
                </comment>
                <scope line="550"/>
            </method>
            <method name="createGradientTransform" type="AffineTransform" line="556">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <declaration name="cx" type="double" line="557"/>
                <declaration name="cy" type="double" line="558"/>
                <declaration name="xform" type="AffineTransform" line="559"/>
            </method>
            <javadoc line="565">
                Creates and returns a {@link PaintContext} used to
                  generate a circular radial color gradient pattern.
                  See the description of the {@link Paint#createContext createContext} method
                  for information on null parameter handling.                
                <param>
                    cm the preferred {@link ColorModel} which represents the most convenient
                      format for the caller to receive the pixel data, or {@code null}if there is no preference.                    
                </param>
                <param>
                    deviceBounds the device space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    userBounds the user space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    transform the {@link AffineTransform} from user
                      space into device space.                    
                </param>
                <param>
                    hints the set of hints that the context object can use to
                      choose between rendering alternatives.                    
                </param>
                <return>
                    the {@code PaintContext} for
                      generating color patterns.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    PaintContext                    
                </see>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Rectangle                    
                </see>
                <see>
                    Rectangle2D                    
                </see>
                <see>
                    AffineTransform                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="createContext" type="PaintContext" line="597">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="transform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <comment line="598">
                    avoid modifying the user&apos;s transform...                    
                </comment>
                <comment line="600">
                    incorporate the gradient transform                    
                </comment>
            </method>
            <javadoc line="615">
                Returns a copy of the center point of the radial gradient.                
                <return>
                    a {@code Point2D} object that is a copy of the center point                    
                </return>
            </javadoc>
            <method name="getCenterPoint" type="Point2D" line="620"/>
            <javadoc line="624">
                Returns a copy of the focus point of the radial gradient.
                  Note that if the focus point specified when the radial gradient
                  was constructed lies outside of the radius of the circle, this
                  method will still return the original focus point even though
                  the rendering may center the rings of color on a different
                  point that lies inside the radius.                
                <return>
                    a {@code Point2D} object that is a copy of the focus point                    
                </return>
            </javadoc>
            <method name="getFocusPoint" type="Point2D" line="634"/>
            <javadoc line="638">
                Returns the radius of the circle defining the radial gradient.                
                <return>
                    the radius of the circle defining the radial gradient                    
                </return>
            </javadoc>
            <method name="getRadius" type="float" line="643"/>
        </class>
    </source>