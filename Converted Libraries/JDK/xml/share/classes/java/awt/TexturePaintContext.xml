<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <import package="sun.awt.image.IntegerInterleavedRaster"/>
        <import package="sun.awt.image.ByteInterleavedRaster"/>
        <class name="TexturePaintContext" line="41">
            <comment line="322">
                Blends the four ARGB values in the rgbs array using the factors
                 described by xmul and ymul in the following ratio:
                
                     rgbs[0]  (1-xmul)  (1-ymul) +
                     rgbs[1]  (  xmul)  (1-ymul) +
                     rgbs[2]  (1-xmul)  (  ymul) +
                     rgbs[3]  (  xmul)  (  ymul)
                
                 xmul and ymul are integer values in the half-open range [0, 2^31)
                 where 0 == 0.0 and 2^31 == 1.0.
                
                 Note that since the range is half-open, the values are always
                 logically less than 1.0.  This makes sense because while choosing
                 pixels to blend, when the error values reach 1.0 we move to the
                 next pixel and reset them to 0.0.                
            </comment>
            <implements interface="PaintContext"/>
            <declaration name="xrgbmodel" type="ColorModel" line="42"/>
            <declaration name="argbmodel" type="ColorModel" line="44"/>
            <declaration name="colorModel" type="ColorModel" line="46"/>
            <declaration name="bWidth" type="int" line="47"/>
            <declaration name="bHeight" type="int" line="48"/>
            <declaration name="maxWidth" type="int" line="49"/>
            <declaration name="outRas" type="WritableRaster" line="51"/>
            <declaration name="xOrg" type="double" line="53"/>
            <declaration name="yOrg" type="double" line="54"/>
            <declaration name="incXAcross" type="double" line="55"/>
            <declaration name="incYAcross" type="double" line="56"/>
            <declaration name="incXDown" type="double" line="57"/>
            <declaration name="incYDown" type="double" line="58"/>
            <declaration name="colincx" type="int" line="60"/>
            <declaration name="colincy" type="int" line="61"/>
            <declaration name="colincxerr" type="int" line="62"/>
            <declaration name="colincyerr" type="int" line="63"/>
            <declaration name="rowincx" type="int" line="64"/>
            <declaration name="rowincy" type="int" line="65"/>
            <declaration name="rowincxerr" type="int" line="66"/>
            <declaration name="rowincyerr" type="int" line="67"/>
            <method name="getContext" type="PaintContext" line="72">
                <params>
                    <param name="bufImg" type="BufferedImage"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                    <param name="devBounds" type="Rectangle"/>
                </params>
                <declaration name="raster" type="WritableRaster" line="73"/>
                <declaration name="cm" type="ColorModel" line="74"/>
                <declaration name="maxw" type="int" line="75"/>
                <declaration name="val" type="Object" line="76"/>
                <declaration name="filter" type="boolean" line="77"/>
                <scope line="83">
                    <declaration name="iir" type="IntegerInterleavedRaster" line="84"/>
                    <scope line="85"/>
                </scope>
                <scope line="88">
                    <declaration name="bir" type="ByteInterleavedRaster" line="89"/>
                    <scope line="90">
                        <scope line="91">
                            <scope line="92"/>
                        </scope>
                        <scope line="95"/>
                    </scope>
                </scope>
            </method>
            <method name="isFilterableICM" type="boolean" line="103">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="104">
                    <declaration name="icm" type="IndexColorModel" line="105"/>
                    <scope line="106"/>
                </scope>
            </method>
            <method name="isFilterableDCM" type="boolean" line="113">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="114">
                    <declaration name="dcm" type="DirectColorModel" line="115"/>
                </scope>
            </method>
            <method name="isMaskOK" type="boolean" line="124">
                <params>
                    <param name="mask" type="int"/>
                    <param name="canbezero" type="boolean"/>
                </params>
                <scope line="125"/>
            </method>
            <method name="getInternedColorModel" type="ColorModel" line="134">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <scope line="135"/>
                <scope line="138"/>
            </method>
            <method name="TexturePaintContext" type="constructor" line="145">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="bWidth" type="int"/>
                    <param name="bHeight" type="int"/>
                    <param name="maxw" type="int"/>
                </params>
                <scope line="151"/>
                <scope line="153"/>
            </method>
            <method name="fractAsInt" type="int" line="173">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <method name="mod" type="double" line="177">
                <params>
                    <param name="num" type="double"/>
                    <param name="den" type="double"/>
                </params>
                <comment line="182">
                    For very small negative numerators, the answer might                    
                </comment>
                <comment line="183">
                    be such a tiny bit less than den that the difference                    
                </comment>
                <comment line="184">
                    is smaller than the mantissa of a double allows and                    
                </comment>
                <comment line="185">
                    the result would then be rounded to den.  If that is                    
                </comment>
                <comment line="186">
                    the case then we map that number to 0 as the nearest                    
                </comment>
                <comment line="187">
                    modulus representation.                    
                </comment>
                <scope line="179">
                    <scope line="181"/>
                </scope>
            </method>
            <javadoc line="194">
                Release the resources allocated for the operation.                
            </javadoc>
            <method name="dispose" type="void" line="197"/>
            <javadoc line="201">
                Return the ColorModel of the output.                
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="204"/>
            <javadoc line="208">
                Return a Raster containing the colors generated for the graphics
                  operation.                
                <param>
                    x,y,w,h The area in device space for which colors are
                      generated.                    
                </param>
            </javadoc>
            <method name="getRaster" type="Raster" line="214">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="219">
                    If h==1, we will probably get lots of &quot;scanline&quot; rects                    
                </comment>
                <scope line="218"/>
                <declaration name="X" type="double" line="222"/>
                <declaration name="Y" type="double" line="223"/>
            </method>
            <declaration name="xrgbRasRef" type="WeakReference" line="237"/>
            <declaration name="argbRasRef" type="WeakReference" line="238"/>
            <method name="makeRaster" type="WritableRaster" line="243">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="srcRas" type="Raster"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="252">
                    If we are going to cache this Raster, make it non-tiny                    
                </comment>
                <comment line="264">
                    If we are going to cache this Raster, make it non-tiny                    
                </comment>
                <scope line="244">
                    <scope line="245">
                        <declaration name="wr" type="WritableRaster" line="246"/>
                        <scope line="247"/>
                    </scope>
                    <scope line="253"/>
                </scope>
                <scope line="256">
                    <scope line="257">
                        <declaration name="wr" type="WritableRaster" line="258"/>
                        <scope line="259"/>
                    </scope>
                    <scope line="265"/>
                </scope>
                <scope line="269"/>
                <scope line="271"/>
            </method>
            <method name="dropRaster" type="void" line="276">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="outRas" type="Raster"/>
                </params>
                <scope line="277"/>
                <scope line="280"/>
                <scope line="282"/>
            </method>
            <declaration name="byteRasRef" type="WeakReference" line="287"/>
            <method name="makeByteRaster" type="WritableRaster" line="291">
                <params>
                    <param name="srcRas" type="Raster"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="299">
                    If we are going to cache this Raster, make it non-tiny                    
                </comment>
                <scope line="292">
                    <declaration name="wr" type="WritableRaster" line="293"/>
                    <scope line="294"/>
                </scope>
                <scope line="300"/>
            </method>
            <method name="dropByteRaster" type="void" line="306">
                <params>
                    <param name="outRas" type="Raster"/>
                </params>
                <scope line="307"/>
            </method>
            <method name="makeRaster" type="WritableRaster" line="313"/>
            <method name="setRaster" type="void" line="314"/>
            <method name="blend" type="int" line="338">
                <params>
                    <param name="rgbs" type="int"/>
                    <param name="xmul" type="int"/>
                    <param name="ymul" type="int"/>
                </params>
                <comment line="339">
                    xmul/ymul are 31 bits wide, (0 =&gt; 2^31-1)                    
                </comment>
                <comment line="340">
                    shift them to 12 bits wide, (0 =&gt; 2^12-1)                    
                </comment>
                <comment line="347">
                    The complement of the [xy]mul values (1-[xy]mul) can result                    
                </comment>
                <comment line="348">
                    in new values in the range (1 =&gt; 2^12).  Thus for any given                    
                </comment>
                <comment line="349">
                    loop iteration, the values could be anywhere in (0 =&gt; 2^12).                    
                </comment>
                <comment line="354">
                    xmul and ymul are each 12 bits (0 =&gt; 2^12)                    
                </comment>
                <comment line="355">
                    factor is thus 24 bits (0 =&gt; 2^24)                    
                </comment>
                <comment line="358">
                    accum variables will accumulate 32 bits                    
                </comment>
                <comment line="359">
                    bytes extracted from rgb fit in 8 bits (0 =&gt; 255)                    
                </comment>
                <comment line="360">
                    byte * factor thus fits in 32 bits (0 =&gt; 255 * 2^24)                    
                </comment>
                <declaration name="accumA" type="int" line="343"/>
                <scope line="345">
                    <declaration name="rgb" type="int" line="346"/>
                    <scope line="351"/>
                    <declaration name="factor" type="int" line="356"/>
                    <scope line="357"/>
                </scope>
            </method>
            <class name="Int" line="373">
                <extends class="TexturePaintContext"/>
                <declaration name="srcRas" type="IntegerInterleavedRaster" line="374"/>
                <declaration name="inData" type="int" line="375"/>
                <declaration name="inOff" type="int" line="376"/>
                <declaration name="inSpan" type="int" line="377"/>
                <declaration name="outData" type="int" line="378"/>
                <declaration name="outOff" type="int" line="379"/>
                <declaration name="outSpan" type="int" line="380"/>
                <declaration name="filter" type="boolean" line="381"/>
                <method name="Int" type="constructor" line="385">
                    <params>
                        <param name="srcRas" type="IntegerInterleavedRaster"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="xform" type="AffineTransform"/>
                        <param name="maxw" type="int"/>
                        <param name="filter" type="boolean"/>
                    </params>
                </method>
                <method name="makeRaster" type="WritableRaster" line="394">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="ras" type="WritableRaster" line="395"/>
                    <declaration name="iiRas" type="IntegerInterleavedRaster" line="396"/>
                </method>
                <method name="setRaster" type="void" line="408">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="xerr" type="int"/>
                        <param name="yerr" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="bWidth" type="int"/>
                        <param name="bHeight" type="int"/>
                        <param name="colincx" type="int"/>
                        <param name="colincxerr" type="int"/>
                        <param name="colincy" type="int"/>
                        <param name="colincyerr" type="int"/>
                        <param name="rowincx" type="int"/>
                        <param name="rowincxerr" type="int"/>
                        <param name="rowincy" type="int"/>
                        <param name="rowincyerr" type="int"/>
                    </params>
                    <declaration name="inData" type="int[]" line="409"/>
                    <declaration name="outData" type="int[]" line="410"/>
                    <declaration name="out" type="int" line="411"/>
                    <declaration name="inSpan" type="int" line="412"/>
                    <declaration name="inOff" type="int" line="413"/>
                    <declaration name="outSpan" type="int" line="414"/>
                    <declaration name="filter" type="boolean" line="415"/>
                    <declaration name="normalx" type="boolean" line="416"/>
                    <declaration name="rowx" type="int" line="418"/>
                    <declaration name="rowy" type="int" line="419"/>
                    <declaration name="rowxerr" type="int" line="420"/>
                    <declaration name="rowyerr" type="int" line="421"/>
                    <scope line="422"/>
                    <declaration name="rgbs" type="int" line="425"/>
                    <scope line="426">
                        <scope line="427">
                            <declaration name="in" type="int" line="428"/>
                            <scope line="431">
                                <declaration name="i" type="int" line="432"/>
                                <scope line="433">
                                    <declaration name="copyw" type="int" line="434"/>
                                    <scope line="439"/>
                                </scope>
                            </scope>
                            <scope line="443">
                                <scope line="444">
                                    <scope line="446"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="451">
                            <scope line="456">
                                <scope line="457">
                                    <declaration name="nextx" type="int" line="458"/>
                                    <scope line="459"/>
                                    <scope line="462"/>
                                </scope>
                                <scope line="471"/>
                                <scope line="474"/>
                                <scope line="478"/>
                                <scope line="481"/>
                                <scope line="485"/>
                            </scope>
                        </scope>
                        <scope line="490"/>
                        <scope line="494"/>
                        <scope line="497"/>
                        <scope line="501"/>
                    </scope>
                </method>
            </class>
            <class name="Byte" line="509">
                <extends class="TexturePaintContext"/>
                <declaration name="srcRas" type="ByteInterleavedRaster" line="510"/>
                <declaration name="inData" type="byte" line="511"/>
                <declaration name="inOff" type="int" line="512"/>
                <declaration name="inSpan" type="int" line="513"/>
                <declaration name="outData" type="byte" line="514"/>
                <declaration name="outOff" type="int" line="515"/>
                <declaration name="outSpan" type="int" line="516"/>
                <method name="Byte" type="constructor" line="520">
                    <params>
                        <param name="srcRas" type="ByteInterleavedRaster"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="xform" type="AffineTransform"/>
                        <param name="maxw" type="int"/>
                    </params>
                </method>
                <method name="makeRaster" type="WritableRaster" line="528">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="ras" type="WritableRaster" line="529"/>
                    <declaration name="biRas" type="ByteInterleavedRaster" line="530"/>
                </method>
                <method name="dispose" type="void" line="537"/>
                <method name="setRaster" type="void" line="546">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="xerr" type="int"/>
                        <param name="yerr" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="bWidth" type="int"/>
                        <param name="bHeight" type="int"/>
                        <param name="colincx" type="int"/>
                        <param name="colincxerr" type="int"/>
                        <param name="colincy" type="int"/>
                        <param name="colincyerr" type="int"/>
                        <param name="rowincx" type="int"/>
                        <param name="rowincxerr" type="int"/>
                        <param name="rowincy" type="int"/>
                        <param name="rowincyerr" type="int"/>
                    </params>
                    <declaration name="inData" type="byte[]" line="547"/>
                    <declaration name="outData" type="byte[]" line="548"/>
                    <declaration name="out" type="int" line="549"/>
                    <declaration name="inSpan" type="int" line="550"/>
                    <declaration name="inOff" type="int" line="551"/>
                    <declaration name="outSpan" type="int" line="552"/>
                    <declaration name="normalx" type="boolean" line="553"/>
                    <declaration name="rowx" type="int" line="555"/>
                    <declaration name="rowy" type="int" line="556"/>
                    <declaration name="rowxerr" type="int" line="557"/>
                    <declaration name="rowyerr" type="int" line="558"/>
                    <scope line="559"/>
                    <scope line="562">
                        <scope line="563">
                            <declaration name="in" type="int" line="564"/>
                            <scope line="567">
                                <declaration name="i" type="int" line="568"/>
                                <scope line="569">
                                    <declaration name="copyw" type="int" line="570"/>
                                    <scope line="575"/>
                                </scope>
                            </scope>
                            <scope line="579">
                                <scope line="580">
                                    <scope line="582"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="587">
                            <scope line="592">
                                <scope line="594"/>
                                <scope line="598"/>
                                <scope line="601"/>
                                <scope line="605"/>
                            </scope>
                        </scope>
                        <scope line="610"/>
                        <scope line="614"/>
                        <scope line="617"/>
                        <scope line="621"/>
                    </scope>
                </method>
            </class>
            <class name="ByteFilter" line="629">
                <extends class="TexturePaintContext"/>
                <declaration name="srcRas" type="ByteInterleavedRaster" line="630"/>
                <declaration name="inPalette" type="int" line="631"/>
                <declaration name="inData" type="byte" line="632"/>
                <declaration name="inOff" type="int" line="633"/>
                <declaration name="inSpan" type="int" line="634"/>
                <declaration name="outData" type="int" line="635"/>
                <declaration name="outOff" type="int" line="636"/>
                <declaration name="outSpan" type="int" line="637"/>
                <method name="ByteFilter" type="constructor" line="641">
                    <params>
                        <param name="srcRas" type="ByteInterleavedRaster"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="xform" type="AffineTransform"/>
                        <param name="maxw" type="int"/>
                    </params>
                </method>
                <method name="makeRaster" type="WritableRaster" line="653">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="654">
                        Note that we do not pass srcRas to makeRaster since it                        
                    </comment>
                    <comment line="655">
                        is a Byte Raster and this colorModel needs an Int Raster                        
                    </comment>
                    <declaration name="ras" type="WritableRaster" line="656"/>
                    <declaration name="iiRas" type="IntegerInterleavedRaster" line="657"/>
                </method>
                <method name="setRaster" type="void" line="669">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="xerr" type="int"/>
                        <param name="yerr" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="bWidth" type="int"/>
                        <param name="bHeight" type="int"/>
                        <param name="colincx" type="int"/>
                        <param name="colincxerr" type="int"/>
                        <param name="colincy" type="int"/>
                        <param name="colincyerr" type="int"/>
                        <param name="rowincx" type="int"/>
                        <param name="rowincxerr" type="int"/>
                        <param name="rowincy" type="int"/>
                        <param name="rowincyerr" type="int"/>
                    </params>
                    <declaration name="inData" type="byte[]" line="670"/>
                    <declaration name="outData" type="int[]" line="671"/>
                    <declaration name="out" type="int" line="672"/>
                    <declaration name="inSpan" type="int" line="673"/>
                    <declaration name="inOff" type="int" line="674"/>
                    <declaration name="outSpan" type="int" line="675"/>
                    <declaration name="rowx" type="int" line="676"/>
                    <declaration name="rowy" type="int" line="677"/>
                    <declaration name="rowxerr" type="int" line="678"/>
                    <declaration name="rowyerr" type="int" line="679"/>
                    <declaration name="rgbs" type="int" line="680"/>
                    <scope line="681">
                        <scope line="686">
                            <declaration name="nextx" type="int" line="687"/>
                            <scope line="688"/>
                            <scope line="691"/>
                            <scope line="704"/>
                            <scope line="708"/>
                            <scope line="711"/>
                            <scope line="715"/>
                        </scope>
                        <scope line="719"/>
                        <scope line="723"/>
                        <scope line="726"/>
                        <scope line="730"/>
                    </scope>
                </method>
            </class>
            <class name="Any" line="738">
                <extends class="TexturePaintContext"/>
                <declaration name="srcRas" type="WritableRaster" line="739"/>
                <declaration name="filter" type="boolean" line="740"/>
                <method name="Any" type="constructor" line="744">
                    <params>
                        <param name="srcRas" type="WritableRaster"/>
                        <param name="cm" type="ColorModel"/>
                        <param name="xform" type="AffineTransform"/>
                        <param name="maxw" type="int"/>
                        <param name="filter" type="boolean"/>
                    </params>
                </method>
                <method name="makeRaster" type="WritableRaster" line="750">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="setRaster" type="void" line="759">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="xerr" type="int"/>
                        <param name="yerr" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="bWidth" type="int"/>
                        <param name="bHeight" type="int"/>
                        <param name="colincx" type="int"/>
                        <param name="colincxerr" type="int"/>
                        <param name="colincy" type="int"/>
                        <param name="colincyerr" type="int"/>
                        <param name="rowincx" type="int"/>
                        <param name="rowincxerr" type="int"/>
                        <param name="rowincy" type="int"/>
                        <param name="rowincyerr" type="int"/>
                    </params>
                    <declaration name="data" type="Object" line="760"/>
                    <declaration name="rowx" type="int" line="761"/>
                    <declaration name="rowy" type="int" line="762"/>
                    <declaration name="rowxerr" type="int" line="763"/>
                    <declaration name="rowyerr" type="int" line="764"/>
                    <declaration name="srcRas" type="WritableRaster" line="765"/>
                    <declaration name="outRas" type="WritableRaster" line="766"/>
                    <declaration name="rgbs" type="int" line="767"/>
                    <scope line="768">
                        <scope line="773">
                            <scope line="775">
                                <declaration name="nextx" type="int" line="776"/>
                                <scope line="777"/>
                                <scope line="780"/>
                                <declaration name="rgb" type="int" line="790"/>
                            </scope>
                            <scope line="795"/>
                            <scope line="799"/>
                            <scope line="802"/>
                            <scope line="806"/>
                        </scope>
                        <scope line="810"/>
                        <scope line="814"/>
                        <scope line="817"/>
                        <scope line="821"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>