<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="sun.awt.image.SunVolatileImage"/>
        <class name="GraphicsConfiguration" line="36">
            <comment line="100">
                REMIND:  What to do about capabilities?
                 The
                 capabilities of the device can be determined by enumerating the possible
                 capabilities and checking if the GraphicsConfiguration
                 implements the interface for that capability.                
            </comment>
            <javadoc line="36">
                The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; class describes the
                  characteristics of a graphics destination such as a printer or monitor.
                  There can be many &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects associated
                  with a single graphics device, representing different drawing modes or
                  capabilities.  The corresponding native structure will vary from platform
                  to platform.  For example, on X11 windowing systems,
                  each visual is a different &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  On Microsoft Windows, &lt;code&gt;GraphicsConfiguration&lt;/code&gt;s represent
                  PixelFormats available in the current resolution and color depth.
                  &lt;p&gt;
                  In a virtual device multi-screen environment in which the desktop
                  area could span multiple physical screen devices, the bounds of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects are relative to the
                  virtual coordinate system.  When setting the location of a
                  component, use {@link #getBounds() getBounds} to get the bounds of
                  the desired &lt;code&gt;GraphicsConfiguration&lt;/code&gt; and offset the location
                  with the coordinates of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt;,
                  as the following code sample illustrates:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  Frame f = new Frame(gc);  // where gc is a GraphicsConfiguration
                  Rectangle bounds = gc.getBounds();
                  f.setLocation(10 + bounds.x, 10 + bounds.y); &lt;/pre&gt;
                  &lt;p&gt;
                  To determine if your environment is a virtual device
                  environment, call &lt;code&gt;getBounds&lt;/code&gt; on all of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects in your system.  If
                  any of the origins of the returned bounds is not (0,&amp;nbsp;0),
                  your environment is a virtual device environment.
                  &lt;p&gt;
                  You can also use &lt;code&gt;getBounds&lt;/code&gt; to determine the bounds
                  of the virtual device.  To do this, first call &lt;code&gt;getBounds&lt;/code&gt; on all
                  of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects in your
                  system.  Then calculate the union of all of the bounds returned
                  from the calls to &lt;code&gt;getBounds&lt;/code&gt;.  The union is the
                  bounds of the virtual device.  The following code sample
                  calculates the bounds of the virtual device.
                  &lt;pre&gt;
                  Rectangle virtualBounds = new Rectangle();
                  GraphicsEnvironment ge = GraphicsEnvironment.
                  getLocalGraphicsEnvironment();
                  GraphicsDevice[] gs =
                  ge.getScreenDevices();
                  for (int j = 0; j &lt; gs.length; j++) {
                  GraphicsDevice gd = gs[j];
                  GraphicsConfiguration[] gc =
                  gd.getConfigurations();
                  for (int i=0; i &lt; gc.length; i++) {
                  virtualBounds =
                  virtualBounds.union(gc[i].getBounds());
                  }
                  } &lt;/pre&gt;                
                <see>
                    Window                    
                </see>
                <see>
                    Frame                    
                </see>
                <see>
                    GraphicsEnvironment                    
                </see>
                <see>
                    GraphicsDevice                    
                </see>
            </javadoc>
            <declaration name="defaultBufferCaps" type="BufferCapabilities" line="111"/>
            <declaration name="defaultImageCaps" type="ImageCapabilities" line="112"/>
            <javadoc line="114">
                This is an abstract class that cannot be instantiated directly.
                  Instances must be obtained from a suitable factory or query method.                
                <see>
                    GraphicsDevice#getConfigurations                    
                </see>
                <see>
                    GraphicsDevice#getDefaultConfiguration                    
                </see>
                <see>
                    GraphicsDevice#getBestConfiguration                    
                </see>
                <see>
                    Graphics2D#getDeviceConfiguration                    
                </see>
            </javadoc>
            <method name="GraphicsConfiguration" type="constructor" line="123"/>
            <method name="getDevice" type="GraphicsDevice" line="126"/>
            <javadoc line="126">
                Returns the {@link GraphicsDevice} associated with this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <return>
                    a <code>GraphicsDevice</code> object that is
                      associated with this <code>GraphicsConfiguration</code>.                    
                </return>
            </javadoc>
            <javadoc line="134">
                Returns a {@link BufferedImage} with a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.  This
                  method has nothing to do with memory-mapping
                  a device.  The returned &lt;code&gt;BufferedImage&lt;/code&gt; has
                  a layout and color model that is closest to this native device
                  configuration and can therefore be optimally blitted to this
                  device.                
                <param>
                    width the width of the returned <code>BufferedImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>BufferedImage</code>                    
                </param>
                <return>
                    a <code>BufferedImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>.                    
                </return>
            </javadoc>
            <method name="createCompatibleImage" type="BufferedImage" line="147">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="model" type="ColorModel" line="148"/>
                <declaration name="raster" type="WritableRaster" line="149"/>
            </method>
            <javadoc line="155">
                Returns a &lt;code&gt;BufferedImage&lt;/code&gt; that supports the specified
                  transparency and has a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.  This
                  method has nothing to do with memory-mapping
                  a device. The returned &lt;code&gt;BufferedImage&lt;/code&gt; has a layout and
                  color model that can be optimally blitted to a device
                  with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <param>
                    width the width of the returned <code>BufferedImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>BufferedImage</code>                    
                </param>
                <param>
                    transparency the specified transparency mode                    
                </param>
                <return>
                    a <code>BufferedImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>
                      and also supports the specified transparency.                    
                </return>
                <throws>
                    IllegalArgumentException if the transparency is not a valid value                    
                </throws>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
            </javadoc>
            <method name="createCompatibleImage" type="BufferedImage" line="176">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
                <scope line="177"/>
                <declaration name="cm" type="ColorModel" line="181"/>
                <scope line="182"/>
                <declaration name="wr" type="WritableRaster" line="186"/>
            </method>
            <javadoc line="191">
                Returns a {@link VolatileImage} with a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  The returned &lt;code&gt;VolatileImage&lt;/code&gt;
                  may have data that is stored optimally for the underlying graphics
                  device and may therefore benefit from platform-specific rendering
                  acceleration.                
                <param>
                    width the width of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>VolatileImage</code>                    
                </param>
                <return>
                    a <code>VolatileImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>.                    
                </return>
                <see>
                    Component#createVolatileImage(int,int)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="205">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="212">
                    shouldn&apos;t happen: we&apos;re passing in null caps                    
                </comment>
                <declaration name="vi" type="VolatileImage" line="206"/>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <javadoc line="217">
                Returns a {@link VolatileImage} with a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.
                  The returned &lt;code&gt;VolatileImage&lt;/code&gt;
                  may have data that is stored optimally for the underlying graphics
                  device and may therefore benefit from platform-specific rendering
                  acceleration.                
                <param>
                    width the width of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    transparency the specified transparency mode                    
                </param>
                <return>
                    a <code>VolatileImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>.                    
                </return>
                <throws>
                    IllegalArgumentException if the transparency is not a valid value                    
                </throws>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
                <see>
                    Component#createVolatileImage(int,int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="238">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="transparency" type="int"/>
                </params>
                <comment line="244">
                    shouldn&apos;t happen: we&apos;re passing in null caps                    
                </comment>
                <declaration name="vi" type="VolatileImage" line="239"/>
                <scope line="240"/>
                <scope line="242"/>
            </method>
            <javadoc line="249">
                Returns a {@link VolatileImage} with a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;, using
                  the specified image capabilities.
                  If the &lt;code&gt;caps&lt;/code&gt; parameter is null, it is effectively ignored
                  and this method will create a VolatileImage without regard to
                  &lt;code&gt;ImageCapabilities&lt;/code&gt; constraints.
                  The returned &lt;code&gt;VolatileImage&lt;/code&gt; has
                  a layout and color model that is closest to this native device
                  configuration and can therefore be optimally blitted to this
                  device.                
                <return>
                    a <code>VolatileImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>.                    
                </return>
                <param>
                    width the width of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    caps the image capabilities                    
                </param>
                <exception>
                    AWTException if the supplied image capabilities could not
                      be met by this graphics configuration                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="272">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="caps" type="ImageCapabilities"/>
                </params>
            </method>
            <javadoc line="277">
                Returns a {@link VolatileImage} with a data layout and color model
                  compatible with this &lt;code&gt;GraphicsConfiguration&lt;/code&gt;, using
                  the specified image capabilities and transparency value.
                  If the &lt;code&gt;caps&lt;/code&gt; parameter is null, it is effectively ignored
                  and this method will create a VolatileImage without regard to
                  &lt;code&gt;ImageCapabilities&lt;/code&gt; constraints.
                  The returned &lt;code&gt;VolatileImage&lt;/code&gt; has
                  a layout and color model that is closest to this native device
                  configuration and can therefore be optimally blitted to this
                  device.                
                <param>
                    width the width of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    height the height of the returned <code>VolatileImage</code>                    
                </param>
                <param>
                    caps the image capabilities                    
                </param>
                <param>
                    transparency the specified transparency mode                    
                </param>
                <return>
                    a <code>VolatileImage</code> whose data layout and color
                      model is compatible with this <code>GraphicsConfiguration</code>.                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
                <throws>
                    IllegalArgumentException if the transparency is not a valid value                    
                </throws>
                <exception>
                    AWTException if the supplied image capabilities could not
                      be met by this graphics configuration                    
                </exception>
                <see>
                    Component#createVolatileImage(int,int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createCompatibleVolatileImage" type="VolatileImage" line="306">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="caps" type="ImageCapabilities"/>
                    <param name="transparency" type="int"/>
                </params>
                <declaration name="vi" type="VolatileImage" line="307"/>
                <scope line="311"/>
            </method>
            <method name="getColorModel" type="ColorModel" line="318"/>
            <javadoc line="318">
                Returns the {@link ColorModel} associated with this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <return>
                    a <code>ColorModel</code> object that is associated with
                      this <code>GraphicsConfiguration</code>.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="326"/>
            <javadoc line="326">
                Returns the &lt;code&gt;ColorModel&lt;/code&gt; associated with this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; that supports the specified
                  transparency.                
                <param>
                    transparency the specified transparency mode                    
                </param>
                <return>
                    a <code>ColorModel</code> object that is associated with
                      this <code>GraphicsConfiguration</code> and supports the
                      specified transparency or null if the transparency is not a valid
                      value.                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
            </javadoc>
            <method name="getDefaultTransform" type="AffineTransform" line="341"/>
            <javadoc line="341">
                Returns the default {@link AffineTransform} for this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;. This
                  &lt;code&gt;AffineTransform&lt;/code&gt; is typically the Identity transform
                  for most normal screens.  The default &lt;code&gt;AffineTransform&lt;/code&gt;
                  maps coordinates onto the device such that 72 user space
                  coordinate units measure approximately 1 inch in device
                  space.  The normalizing transform can be used to make
                  this mapping more exact.  Coordinates in the coordinate space
                  defined by the default &lt;code&gt;AffineTransform&lt;/code&gt; for screen and
                  printer devices have the origin in the upper left-hand corner of
                  the target region of the device, with X coordinates
                  increasing to the right and Y coordinates increasing downwards.
                  For image buffers not associated with a device, such as those not
                  created by &lt;code&gt;createCompatibleImage&lt;/code&gt;,
                  this &lt;code&gt;AffineTransform&lt;/code&gt; is the Identity transform.                
                <return>
                    the default <code>AffineTransform</code> for this
                      <code>GraphicsConfiguration</code>.                    
                </return>
            </javadoc>
            <method name="getNormalizingTransform" type="AffineTransform" line="362"/>
            <javadoc line="362">
                Returns a &lt;code&gt;AffineTransform&lt;/code&gt; that can be concatenated
                  with the default &lt;code&gt;AffineTransform&lt;/code&gt;
                  of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; so that 72 units in user
                  space equals 1 inch in device space.
                  &lt;p&gt;
                  For a particular {@link Graphics2D}, g, one
                  can reset the transformation to create
                  such a mapping by using the following pseudocode:
                  &lt;pre&gt;
                  GraphicsConfiguration gc = g.getDeviceConfiguration();
                  g.setTransform(gc.getDefaultTransform());
                  g.transform(gc.getNormalizingTransform());
                  &lt;/pre&gt;
                  Note that sometimes this &lt;code&gt;AffineTransform&lt;/code&gt; is identity,
                  such as for printers or metafile output, and that this
                  &lt;code&gt;AffineTransform&lt;/code&gt; is only as accurate as the information
                  supplied by the underlying system.  For image buffers not
                  associated with a device, such as those not created by
                  &lt;code&gt;createCompatibleImage&lt;/code&gt;, this
                  &lt;code&gt;AffineTransform&lt;/code&gt; is the Identity transform
                  since there is no valid distance measurement.                
                <return>
                    an <code>AffineTransform</code> to concatenate to the
                      default <code>AffineTransform</code> so that 72 units in user
                      space is mapped to 1 inch in device space.                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="392"/>
            <javadoc line="392">
                Returns the bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                  in the device coordinates. In a multi-screen environment
                  with a virtual device, the bounds can have negative X
                  or Y origins.                
                <return>
                    the bounds of the area covered by this
                      <code>GraphicsConfiguration</code>.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <class name="DefaultBufferCapabilities" line="403">
                <extends class="BufferCapabilities"/>
                <method name="DefaultBufferCapabilities" type="constructor" line="404">
                    <params>
                        <param name="imageCaps" type="ImageCapabilities"/>
                    </params>
                </method>
            </class>
            <javadoc line="409">
                Returns the buffering capabilities of this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <return>
                    the buffering capabilities of this graphics
                      configuration object                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBufferCapabilities" type="BufferCapabilities" line="416">
                <scope line="417"/>
            </method>
            <javadoc line="424">
                Returns the image capabilities of this
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.                
                <return>
                    the image capabilities of this graphics
                      configuration object                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getImageCapabilities" type="ImageCapabilities" line="431">
                <scope line="432"/>
            </method>
            <javadoc line="438">
                Returns whether this {@code GraphicsConfiguration} supports
                  the {@link GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENTPERPIXEL_TRANSLUCENT} kind of translucency.                
                <return>
                    whether the given GraphicsConfiguration supports
                      the translucency effects.                    
                </return>
                <see>
                    Window#setBackground(Color)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isTranslucencyCapable" type="boolean" line="450">
                <comment line="452">
                    Overridden in subclasses                    
                </comment>
            </method>
        </class>
    </source>