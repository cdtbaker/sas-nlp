<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.Component"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.image.ImageObserver"/>
        <class name="MediaTracker" line="5">
            <implements interface="java.io.Serializable"/>
            <javadoc line="5">
                The &lt;code&gt;MediaTracker&lt;/code&gt; class is a utility class to track
                  the status of a number of media objects. Media objects could
                  include audio clips as well as images, though currently only
                  images are supported.
                  &lt;p&gt;
                  To use a media tracker, create an instance of
                  &lt;code&gt;MediaTracker&lt;/code&gt; and call its &lt;code&gt;addImage&lt;/code&gt;
                  method for each image to be tracked. In addition, each image can
                  be assigned a unique identifier. This identifier controls the
                  priority order in which the images are fetched. It can also be used
                  to identify unique subsets of the images that can be waited on
                  independently. Images with a lower ID are loaded in preference to
                  those with a higher ID number.
                  &lt;p&gt;
                  Tracking an animated image
                  might not always be useful
                  due to the multi-part nature of animated image
                  loading and painting,
                  but it is supported.
                  &lt;code&gt;MediaTracker&lt;/code&gt; treats an animated image
                  as completely loaded
                  when the first frame is completely loaded.
                  At that point, the &lt;code&gt;MediaTracker&lt;/code&gt;
                  signals any waiters
                  that the image is completely loaded.
                  If no &lt;code&gt;ImageObserver&lt;/code&gt;s are observing the image
                  when the first frame has finished loading,
                  the image might flush itself
                  to conserve resources
                  (see {@link Image#flush()}).
                  &lt;p&gt;
                  Here is an example of using &lt;code&gt;MediaTracker&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  import java.applet.Applet;
                  import java.awt.Color;
                  import java.awt.Image;
                  import java.awt.Graphics;
                  import java.awt.MediaTracker;
                  public class ImageBlaster extends Applet implements Runnable {
                  MediaTracker tracker;
                  Image bg;
                  Image anim[] = new Image[5];
                  int index;
                  Thread animator;
                  // Get the images for the background (id == 0)
                  // and the animation frames (id == 1)
                  // and add them to the MediaTracker
                  public void init() {
                  tracker = new MediaTracker(this);
                  bg = getImage(getDocumentBase(),
                  &quot;images/background.gif&quot;);
                  tracker.addImage(bg, 0);
                  for (int i = 0; i &lt; 5; i++) {
                  anim[i] = getImage(getDocumentBase(),
                  &quot;images/anim&quot;+i+&quot;.gif&quot;);
                  tracker.addImage(anim[i], 1);
                  }
                  }
                  // Start the animation thread.
                  public void start() {
                  animator = new Thread(this);
                  animator.start();
                  }
                  // Stop the animation thread.
                  public void stop() {
                  animator = null;
                  }
                  // Run the animation thread.
                  // First wait for the background image to fully load
                  // and paint.  Then wait for all of the animation
                  // frames to finish loading. Finally, loop and
                  // increment the animation frame index.
                  public void run() {
                  try {
                  tracker.waitForID(0);
                  tracker.waitForID(1);
                  } catch (InterruptedException e) {
                  return;
                  }
                  Thread me = Thread.currentThread();
                  while (animator == me) {
                  try {
                  Thread.sleep(100);
                  } catch (InterruptedException e) {
                  break;
                  }
                  synchronized (this) {
                  index++;
                  if (index &gt;= anim.length) {
                  index = 0;
                  }
                  }
                  repaint();
                  }
                  }
                  // The background image fills the frame so we
                  // don&apos;t need to clear the applet on repaints.
                  // Just call the paint method.
                  public void update(Graphics g) {
                  paint(g);
                  }
                  // Paint a large red rectangle if there are any errors
                  // loading the images.  Otherwise always paint the
                  // background so that it appears incrementally as it
                  // is loading.  Finally, only paint the current animation
                  // frame if all of the frames (id == 1) are done loading,
                  // so that we don&apos;t get partial animations.
                  public void paint(Graphics g) {
                  if ((tracker.statusAll(false) &amp; MediaTracker.ERRORED) != 0) {
                  g.setColor(Color.red);
                  g.fillRect(0, 0, size().width, size().height);
                  return;
                  }
                  g.drawImage(bg, 0, 0, this);
                  if (tracker.statusID(1, false) == MediaTracker.COMPLETE) {
                  g.drawImage(anim[index], 10, 10, this);
                  }
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;                
                <author>
                    Jim Graham                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="target" type="Component" line="131"/>
            <javadoc line="131">
                A given &lt;code&gt;Component&lt;/code&gt; that will be
                  tracked by a media tracker where the image will
                  eventually be drawn.                
                <serial>
                                        
                </serial>
                <see>
                    #MediaTracker(Component)                    
                </see>
            </javadoc>
            <declaration name="head" type="MediaEntry" line="139"/>
            <javadoc line="139">
                The head of the list of &lt;code&gt;Images&lt;/code&gt; that is being
                  tracked by the &lt;code&gt;MediaTracker&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #addImage(Image,int)                    
                </see>
                <see>
                    #removeImage(Image)                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="147"/>
            <javadoc line="148">
                Creates a media tracker to track images for a given component.                
                <param>
                    comp the component on which the images
                      will eventually be drawn                    
                </param>
            </javadoc>
            <method name="MediaTracker" type="constructor" line="153">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="156">
                Adds an image to the list of images being tracked by this media
                  tracker. The image will eventually be rendered at its default
                  (unscaled) size.                
                <param>
                    image   the image to be tracked                    
                </param>
                <param>
                    id      an identifier used to track this image                    
                </param>
            </javadoc>
            <method name="addImage" type="void" line="163">
                <params>
                    <param name="image" type="Image"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Adds a scaled image to the list of images being tracked
                  by this media tracker. The image will eventually be
                  rendered at the indicated width and height.                
                <param>
                    image   the image to be tracked                    
                </param>
                <param>
                    id   an identifier that can be used to track this image                    
                </param>
                <param>
                    w    the width at which the image is rendered                    
                </param>
                <param>
                    h    the height at which the image is rendered                    
                </param>
            </javadoc>
            <method name="addImage" type="void" line="175">
                <params>
                    <param name="image" type="Image"/>
                    <param name="id" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <declaration name="LOADING" type="int" line="178"/>
            <javadoc line="178">
                Flag indicating that media is currently being loaded.                
                <see>
                    java.awt.MediaTracker#statusAll                    
                </see>
                <see>
                    java.awt.MediaTracker#statusID                    
                </see>
            </javadoc>
            <declaration name="ABORTED" type="int" line="184"/>
            <javadoc line="184">
                Flag indicating that the downloading of media was aborted.                
                <see>
                    java.awt.MediaTracker#statusAll                    
                </see>
                <see>
                    java.awt.MediaTracker#statusID                    
                </see>
            </javadoc>
            <declaration name="ERRORED" type="int" line="190"/>
            <javadoc line="190">
                Flag indicating that the downloading of media encountered
                  an error.                
                <see>
                    java.awt.MediaTracker#statusAll                    
                </see>
                <see>
                    java.awt.MediaTracker#statusID                    
                </see>
            </javadoc>
            <declaration name="COMPLETE" type="int" line="197"/>
            <javadoc line="197">
                Flag indicating that the downloading of media was completed
                  successfully.                
                <see>
                    java.awt.MediaTracker#statusAll                    
                </see>
                <see>
                    java.awt.MediaTracker#statusID                    
                </see>
            </javadoc>
            <declaration name="DONE" type="int" line="204"/>
            <javadoc line="205">
                Checks to see if all images being tracked by this media tracker
                  have finished loading.
                  &lt;p&gt;
                  This method does not start loading the images if they are not
                  already loading.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; or &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <return>
                    <code>true</code> if all images have finished loading,
                      have been aborted, or have encountered
                      an error; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#checkAll(boolean)                    
                </see>
                <see>
                    java.awt.MediaTracker#checkID                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID                    
                </see>
            </javadoc>
            <method name="checkAll" type="boolean" line="224"/>
            <javadoc line="227">
                Checks to see if all images being tracked by this media tracker
                  have finished loading.
                  &lt;p&gt;
                  If the value of the &lt;code&gt;load&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;,
                  then this method starts loading any images that are not yet
                  being loaded.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; and &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <param>
                    load   if <code>true</code>, start loading any
                      images that are not yet being loaded                    
                </param>
                <return>
                    <code>true</code> if all images have finished loading,
                      have been aborted, or have encountered
                      an error; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#checkID                    
                </see>
                <see>
                    java.awt.MediaTracker#checkAll()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID(int)                    
                </see>
            </javadoc>
            <method name="checkAll" type="boolean" line="249">
                <params>
                    <param name="load" type="boolean"/>
                </params>
            </method>
            <method name="checkAll" type="boolean" line="252">
                <params>
                    <param name="load" type="boolean"/>
                    <param name="verify" type="boolean"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="253"/>
                <declaration name="done" type="boolean" line="254"/>
                <scope line="255">
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="263">
                Checks the error status of all of the images.                
                <return>
                    <code>true</code> if any of the images tracked
                      by this media tracker had an error during
                      loading; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#isErrorID                    
                </see>
                <see>
                    java.awt.MediaTracker#getErrorsAny                    
                </see>
            </javadoc>
            <method name="isErrorAny" type="boolean" line="271">
                <declaration name="cur" type="MediaEntry" line="272"/>
                <scope line="273">
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="281">
                Returns a list of all media that have encountered an error.                
                <return>
                    an array of media objects tracked by this
                      media tracker that have encountered
                      an error, or <code>null</code> if
                      there are none with errors                    
                </return>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#getErrorsID                    
                </see>
            </javadoc>
            <method name="getErrorsAny" type="Object[]" line="290">
                <declaration name="cur" type="MediaEntry" line="291"/>
                <declaration name="numerrors" type="int" line="292"/>
                <scope line="293">
                    <scope line="294"/>
                </scope>
                <scope line="299"/>
                <declaration name="errors" type="Object" line="302"/>
                <scope line="305">
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="313">
                Starts loading all images tracked by this media tracker. This
                  method waits until all the images being tracked have finished
                  loading.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; or &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <see>
                    java.awt.MediaTracker#waitForID(int)                    
                </see>
                <see>
                    java.awt.MediaTracker#waitForAll(long)                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID                    
                </see>
                <exception>
                    InterruptedException  if any thread has
                      interrupted this thread                    
                </exception>
            </javadoc>
            <method name="waitForAll" type="void" line="329"/>
            <javadoc line="332">
                Starts loading all images tracked by this media tracker. This
                  method waits until all the images being tracked have finished
                  loading, or until the length of time specified in milliseconds
                  by the &lt;code&gt;ms&lt;/code&gt; argument has passed.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then
                  that image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; or &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <param>
                    ms       the number of milliseconds to wait
                      for the loading to complete                    
                </param>
                <return>
                    <code>true</code> if all images were successfully
                      loaded; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#waitForID(int)                    
                </see>
                <see>
                    java.awt.MediaTracker#waitForAll(long)                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID                    
                </see>
                <exception>
                    InterruptedException  if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="waitForAll" type="boolean" line="353">
                <params>
                    <param name="ms" type="long"/>
                </params>
                <declaration name="end" type="long" line="354"/>
                <declaration name="first" type="boolean" line="355"/>
                <scope line="356">
                    <declaration name="status" type="int" line="357"/>
                    <scope line="358"/>
                    <declaration name="timeout" type="long" line="362"/>
                    <scope line="363"/>
                    <scope line="366">
                        <scope line="368"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="375">
                Calculates and returns the bitwise inclusive &lt;b&gt;OR&lt;/b&gt; of the
                  status of all media that are tracked by this media tracker.
                  &lt;p&gt;
                  Possible flags defined by the
                  &lt;code&gt;MediaTracker&lt;/code&gt; class are &lt;code&gt;LOADING&lt;/code&gt;,
                  &lt;code&gt;ABORTED&lt;/code&gt;, &lt;code&gt;ERRORED&lt;/code&gt;, and
                  &lt;code&gt;COMPLETE&lt;/code&gt;. An image that hasn&apos;t started
                  loading has zero as its status.
                  &lt;p&gt;
                  If the value of &lt;code&gt;load&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then
                  this method starts loading any images that are not yet being loaded.                
                <param>
                    load   if <code>true</code>, start loading
                      any images that are not yet being loaded                    
                </param>
                <return>
                    the bitwise inclusive <b>OR</b> of the status of
                      all of the media being tracked                    
                </return>
                <see>
                    java.awt.MediaTracker#statusID(int,boolean)                    
                </see>
                <see>
                    java.awt.MediaTracker#LOADING                    
                </see>
                <see>
                    java.awt.MediaTracker#ABORTED                    
                </see>
                <see>
                    java.awt.MediaTracker#ERRORED                    
                </see>
                <see>
                    java.awt.MediaTracker#COMPLETE                    
                </see>
            </javadoc>
            <method name="statusAll" type="int" line="397">
                <params>
                    <param name="load" type="boolean"/>
                </params>
            </method>
            <method name="statusAll" type="int" line="400">
                <params>
                    <param name="load" type="boolean"/>
                    <param name="verify" type="boolean"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="401"/>
                <declaration name="status" type="int" line="402"/>
                <scope line="403"/>
            </method>
            <javadoc line="409">
                Checks to see if all images tracked by this media tracker that
                  are tagged with the specified identifier have finished loading.
                  &lt;p&gt;
                  This method does not start loading the images if they are not
                  already loading.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; or &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <return>
                    <code>true</code> if all images have finished loading,
                      have been aborted, or have encountered
                      an error; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#checkID(int,boolean)                    
                </see>
                <see>
                    java.awt.MediaTracker#checkAll()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID(int)                    
                </see>
            </javadoc>
            <method name="checkID" type="boolean" line="429">
                <params>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="432">
                Checks to see if all images tracked by this media tracker that
                  are tagged with the specified identifier have finished loading.
                  &lt;p&gt;
                  If the value of the &lt;code&gt;load&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;,
                  then this method starts loading any images that are not yet
                  being loaded.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; or &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <param>
                    id       the identifier of the images to check                    
                </param>
                <param>
                    load     if <code>true</code>, start loading any
                      images that are not yet being loaded                    
                </param>
                <return>
                    <code>true</code> if all images have finished loading,
                      have been aborted, or have encountered
                      an error; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#checkID(int,boolean)                    
                </see>
                <see>
                    java.awt.MediaTracker#checkAll()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID(int)                    
                </see>
            </javadoc>
            <method name="checkID" type="boolean" line="455">
                <params>
                    <param name="id" type="int"/>
                    <param name="load" type="boolean"/>
                </params>
            </method>
            <method name="checkID" type="boolean" line="458">
                <params>
                    <param name="id" type="int"/>
                    <param name="load" type="boolean"/>
                    <param name="verify" type="boolean"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="459"/>
                <declaration name="done" type="boolean" line="460"/>
                <scope line="461">
                    <scope line="462"/>
                </scope>
            </method>
            <javadoc line="469">
                Checks the error status of all of the images tracked by this
                  media tracker with the specified identifier.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <return>
                    <code>true</code> if any of the images with the
                      specified identifier had an error during
                      loading; <code>false</code> otherwise                    
                </return>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#getErrorsID                    
                </see>
            </javadoc>
            <method name="isErrorID" type="boolean" line="479">
                <params>
                    <param name="id" type="int"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="480"/>
                <scope line="481">
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="489">
                Returns a list of media with the specified ID that
                  have encountered an error.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <return>
                    an array of media objects tracked by this media
                      tracker with the specified identifier
                      that have encountered an error, or
                      <code>null</code> if there are none with errors                    
                </return>
                <see>
                    java.awt.MediaTracker#isErrorID                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny                    
                </see>
                <see>
                    java.awt.MediaTracker#getErrorsAny                    
                </see>
            </javadoc>
            <method name="getErrorsID" type="Object[]" line="501">
                <params>
                    <param name="id" type="int"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="502"/>
                <declaration name="numerrors" type="int" line="503"/>
                <scope line="504">
                    <scope line="505"/>
                </scope>
                <scope line="510"/>
                <declaration name="errors" type="Object" line="513"/>
                <scope line="516">
                    <scope line="517"/>
                </scope>
            </method>
            <javadoc line="524">
                Starts loading all images tracked by this media tracker with the
                  specified identifier. This method waits until all the images with
                  the specified identifier have finished loading.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;isErrorAny&lt;/code&gt; and &lt;code&gt;isErrorID&lt;/code&gt; methods to
                  check for errors.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <see>
                    java.awt.MediaTracker#waitForAll                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID(int)                    
                </see>
                <exception>
                    InterruptedException  if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="waitForID" type="void" line="540">
                <params>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="543">
                Starts loading all images tracked by this media tracker with the
                  specified identifier. This method waits until all the images with
                  the specified identifier have finished loading, or until the
                  length of time specified in milliseconds by the &lt;code&gt;ms&lt;/code&gt;
                  argument has passed.
                  &lt;p&gt;
                  If there is an error while loading or scaling an image, then that
                  image is considered to have finished loading. Use the
                  &lt;code&gt;statusID&lt;/code&gt;, &lt;code&gt;isErrorID&lt;/code&gt;, and
                  &lt;code&gt;isErrorAny&lt;/code&gt; methods to check for errors.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <param>
                    ms   the length of time, in milliseconds, to wait
                      for the loading to complete                    
                </param>
                <see>
                    java.awt.MediaTracker#waitForAll                    
                </see>
                <see>
                    java.awt.MediaTracker#waitForID(int)                    
                </see>
                <see>
                    java.awt.MediaTracker#statusID                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorAny()                    
                </see>
                <see>
                    java.awt.MediaTracker#isErrorID(int)                    
                </see>
                <exception>
                    InterruptedException  if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="waitForID" type="boolean" line="565">
                <params>
                    <param name="id" type="int"/>
                    <param name="ms" type="long"/>
                </params>
                <declaration name="end" type="long" line="566"/>
                <declaration name="first" type="boolean" line="567"/>
                <scope line="568">
                    <declaration name="status" type="int" line="569"/>
                    <scope line="570"/>
                    <declaration name="timeout" type="long" line="574"/>
                    <scope line="575"/>
                    <scope line="578">
                        <scope line="580"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="587">
                Calculates and returns the bitwise inclusive &lt;b&gt;OR&lt;/b&gt; of the
                  status of all media with the specified identifier that are
                  tracked by this media tracker.
                  &lt;p&gt;
                  Possible flags defined by the
                  &lt;code&gt;MediaTracker&lt;/code&gt; class are &lt;code&gt;LOADING&lt;/code&gt;,
                  &lt;code&gt;ABORTED&lt;/code&gt;, &lt;code&gt;ERRORED&lt;/code&gt;, and
                  &lt;code&gt;COMPLETE&lt;/code&gt;. An image that hasn&apos;t started
                  loading has zero as its status.
                  &lt;p&gt;
                  If the value of &lt;code&gt;load&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then
                  this method starts loading any images that are not yet being loaded.                
                <param>
                    id   the identifier of the images to check                    
                </param>
                <param>
                    load   if <code>true</code>, start loading
                      any images that are not yet being loaded                    
                </param>
                <return>
                    the bitwise inclusive <b>OR</b> of the status of
                      all of the media with the specified
                      identifier that are being tracked                    
                </return>
                <see>
                    java.awt.MediaTracker#statusAll(boolean)                    
                </see>
                <see>
                    java.awt.MediaTracker#LOADING                    
                </see>
                <see>
                    java.awt.MediaTracker#ABORTED                    
                </see>
                <see>
                    java.awt.MediaTracker#ERRORED                    
                </see>
                <see>
                    java.awt.MediaTracker#COMPLETE                    
                </see>
            </javadoc>
            <method name="statusID" type="int" line="612">
                <params>
                    <param name="id" type="int"/>
                    <param name="load" type="boolean"/>
                </params>
            </method>
            <method name="statusID" type="int" line="615">
                <params>
                    <param name="id" type="int"/>
                    <param name="load" type="boolean"/>
                    <param name="verify" type="boolean"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="616"/>
                <declaration name="status" type="int" line="617"/>
                <scope line="618">
                    <scope line="619"/>
                </scope>
            </method>
            <javadoc line="626">
                Removes the specified image from this media tracker.
                  All instances of the specified image are removed,
                  regardless of scale or ID.                
                <param>
                    image     the image to be removed                    
                </param>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image,int)                    
                </see>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeImage" type="void" line="635">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="636"/>
                <declaration name="prev" type="MediaEntry" line="637"/>
                <scope line="638">
                    <declaration name="next" type="MediaEntry" line="639"/>
                    <scope line="640">
                        <scope line="641"/>
                        <scope line="644"/>
                    </scope>
                    <scope line="649"/>
                </scope>
            </method>
            <javadoc line="656">
                Removes the specified image from the specified tracking
                  ID of this media tracker.
                  All instances of &lt;code&gt;Image&lt;/code&gt; being tracked
                  under the specified ID are removed regardless of scale.                
                <param>
                    image the image to be removed                    
                </param>
                <param>
                    id the tracking ID frrom which to remove the image                    
                </param>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image)                    
                </see>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeImage" type="void" line="667">
                <params>
                    <param name="image" type="Image"/>
                    <param name="id" type="int"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="668"/>
                <declaration name="prev" type="MediaEntry" line="669"/>
                <scope line="670">
                    <declaration name="next" type="MediaEntry" line="671"/>
                    <scope line="672">
                        <scope line="673"/>
                        <scope line="676"/>
                    </scope>
                    <scope line="681"/>
                </scope>
            </method>
            <javadoc line="688">
                Removes the specified image with the specified
                  width, height, and ID from this media tracker.
                  Only the specified instance (with any duplicates) is removed.                
                <param>
                    image the image to be removed                    
                </param>
                <param>
                    id the tracking ID from which to remove the image                    
                </param>
                <param>
                    width the width to remove (-1 for unscaled)                    
                </param>
                <param>
                    height the height to remove (-1 for unscaled)                    
                </param>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image)                    
                </see>
                <see>
                    java.awt.MediaTracker#removeImage(java.awt.Image,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeImage" type="void" line="700">
                <params>
                    <param name="image" type="Image"/>
                    <param name="id" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="701"/>
                <declaration name="prev" type="MediaEntry" line="702"/>
                <scope line="703">
                    <declaration name="next" type="MediaEntry" line="704"/>
                    <scope line="705">
                        <scope line="706"/>
                        <scope line="709"/>
                    </scope>
                    <scope line="714"/>
                </scope>
            </method>
            <method name="setDone" type="void" line="721"/>
        </class>
        <class name="MediaEntry" line="725">
            <declaration name="tracker" type="MediaTracker" line="726"/>
            <declaration name="ID" type="int" line="727"/>
            <declaration name="next" type="MediaEntry" line="728"/>
            <declaration name="status" type="int" line="729"/>
            <declaration name="cancelled" type="boolean" line="730"/>
            <method name="MediaEntry" type="constructor" line="731">
                <params>
                    <param name="mt" type="MediaTracker"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <method name="getMedia" type="Object" line="735"/>
            <method name="insert" type="MediaEntry" line="736">
                <params>
                    <param name="head" type="MediaEntry"/>
                    <param name="me" type="MediaEntry"/>
                </params>
                <declaration name="cur" type="MediaEntry" line="737"/>
                <declaration name="prev" type="MediaEntry" line="738"/>
                <scope line="739">
                    <scope line="740"/>
                </scope>
                <scope line="747"/>
                <scope line="750"/>
            </method>
            <method name="getID" type="int" line="755"/>
            <method name="startLoad" type="void" line="758"/>
            <method name="cancel" type="void" line="759"/>
            <declaration name="LOADING" type="int" line="762"/>
            <declaration name="ABORTED" type="int" line="763"/>
            <declaration name="ERRORED" type="int" line="764"/>
            <declaration name="COMPLETE" type="int" line="765"/>
            <declaration name="LOADSTARTED" type="int" line="766"/>
            <declaration name="DONE" type="int" line="767"/>
            <method name="getStatus" type="int" line="768">
                <params>
                    <param name="doLoad" type="boolean"/>
                    <param name="doVerify" type="boolean"/>
                </params>
                <scope line="769"/>
            </method>
            <method name="setStatus" type="void" line="775">
                <params>
                    <param name="flag" type="int"/>
                </params>
                <scope line="776"/>
            </method>
        </class>
        <class name="ImageMediaEntry" line="782">
            <extends class="MediaEntry"/>
            <implements interface="ImageObserver"/>
            <implements interface="java.io.Serializable"/>
            <declaration name="image" type="Image" line="783"/>
            <declaration name="width" type="int" line="784"/>
            <declaration name="height" type="int" line="785"/>
            <declaration name="serialVersionUID" type="long" line="786"/>
            <method name="ImageMediaEntry" type="constructor" line="787">
                <params>
                    <param name="mt" type="MediaTracker"/>
                    <param name="img" type="Image"/>
                    <param name="c" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="matches" type="boolean" line="793">
                <params>
                    <param name="img" type="Image"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="getMedia" type="Object" line="796"/>
            <method name="getStatus" type="int" line="799">
                <params>
                    <param name="doLoad" type="boolean"/>
                    <param name="doVerify" type="boolean"/>
                </params>
                <scope line="800">
                    <declaration name="flags" type="int" line="801"/>
                    <declaration name="s" type="int" line="802"/>
                    <scope line="803">
                        <scope line="804"/>
                    </scope>
                    <scope line="808"/>
                </scope>
            </method>
            <method name="startLoad" type="void" line="814">
                <scope line="815"/>
            </method>
            <method name="parseflags" type="int" line="819">
                <params>
                    <param name="infoflags" type="int"/>
                </params>
                <scope line="820"/>
                <scope line="823"/>
                <scope line="826"/>
            </method>
            <method name="imageUpdate" type="boolean" line="831">
                <params>
                    <param name="img" type="Image"/>
                    <param name="infoflags" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="832"/>
                <declaration name="s" type="int" line="835"/>
                <scope line="836"/>
            </method>
        </class>
    </source>