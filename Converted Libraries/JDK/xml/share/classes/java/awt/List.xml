<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="java.util.EventListener"/>
        <import package="java.awt.peer.ListPeer"/>
        <import package="java.awt.event"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="List" line="11">
            <extends class="Component"/>
            <implements interface="ItemSelectable"/>
            <implements interface="Accessible"/>
            <javadoc line="11">
                The &lt;code&gt;List&lt;/code&gt; component presents the user with a
                  scrolling list of text items. The list can be set up so that
                  the user can choose either one item or multiple items.
                  &lt;p&gt;
                  For example, the code&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  List lst = new List(4, false);
                  lst.add(&quot;Mercury&quot;);
                  lst.add(&quot;Venus&quot;);
                  lst.add(&quot;Earth&quot;);
                  lst.add(&quot;JavaSoft&quot;);
                  lst.add(&quot;Mars&quot;);
                  lst.add(&quot;Jupiter&quot;);
                  lst.add(&quot;Saturn&quot;);
                  lst.add(&quot;Uranus&quot;);
                  lst.add(&quot;Neptune&quot;);
                  lst.add(&quot;Pluto&quot;);
                  cnt.add(lst);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  where &lt;code&gt;cnt&lt;/code&gt; is a container, produces the following
                  scrolling list:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/List-1.gif&quot;
                  alt=&quot;Shows a list containing: Venus, Earth, JavaSoft, and Mars. Javasoft is selected.&quot; ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  If the List allows multiple selections, then clicking on
                  an item that is already selected deselects it. In the preceding
                  example, only one item from the scrolling list can be selected
                  at a time, since the second argument when creating the new scrolling
                  list is &lt;code&gt;false&lt;/code&gt;. If the List does not allow multiple
                  selections, selecting an item causes any other selected item
                  to be deselected.
                  &lt;p&gt;
                  Note that the list in the example shown was created with four visible
                  rows.  Once the list has been created, the number of visible rows
                  cannot be changed.  A default &lt;code&gt;List&lt;/code&gt; is created with
                  four rows, so that &lt;code&gt;lst = new List()&lt;/code&gt; is equivalent to
                  &lt;code&gt;list = new List(4, false)&lt;/code&gt;.
                  &lt;p&gt;
                  Beginning with Java&amp;nbsp;1.1, the Abstract Window Toolkit
                  sends the &lt;code&gt;List&lt;/code&gt; object all mouse, keyboard, and focus events
                  that occur over it. (The old AWT event model is being maintained
                  only for backwards compatibility, and its use is discouraged.)
                  &lt;p&gt;
                  When an item is selected or deselected by the user, AWT sends an instance
                  of &lt;code&gt;ItemEvent&lt;/code&gt; to the list.
                  When the user double-clicks on an item in a scrolling list,
                  AWT sends an instance of &lt;code&gt;ActionEvent&lt;/code&gt; to the
                  list following the item event. AWT also generates an action event
                  when the user presses the return key while an item in the
                  list is selected.
                  &lt;p&gt;
                  If an application wants to perform some action based on an item
                  in this list being selected or activated by the user, it should implement
                  &lt;code&gt;ItemListener&lt;/code&gt; or &lt;code&gt;ActionListener&lt;/code&gt;
                  as appropriate and register the new listener to receive
                  events from this list.
                  &lt;p&gt;
                  For multiple-selection scrolling lists, it is considered a better
                  user interface to use an external gesture (such as clicking on a
                  button) to trigger the action.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="items" type="Vector" line="83"/>
            <javadoc line="83">
                A vector created to contain items which will become
                  part of the List Component.                
                <serial>
                                        
                </serial>
                <see>
                    #addItem(String)                    
                </see>
                <see>
                    #getItem(int)                    
                </see>
            </javadoc>
            <declaration name="rows" type="int" line="91"/>
            <javadoc line="91">
                This field will represent the number of visible rows in the
                  &lt;code&gt;List&lt;/code&gt; Component.  It is specified only once, and
                  that is when the list component is actually
                  created.  It will never change.                
                <serial>
                                        
                </serial>
                <see>
                    #getRows()                    
                </see>
            </javadoc>
            <declaration name="multipleMode" type="boolean" line="100"/>
            <javadoc line="100">
                &lt;code&gt;multipleMode&lt;/code&gt; is a variable that will
                  be set to &lt;code&gt;true&lt;/code&gt; if a list component is to be set to
                  multiple selection mode, that is where the user can
                  select more than one item in a list at one time.
                  &lt;code&gt;multipleMode&lt;/code&gt; will be set to false if the
                  list component is set to single selection, that is where
                  the user can only select one item on the list at any
                  one time.                
                <serial>
                                        
                </serial>
                <see>
                    #isMultipleMode()                    
                </see>
                <see>
                    #setMultipleMode(boolean)                    
                </see>
            </javadoc>
            <declaration name="selected" type="int" line="114"/>
            <javadoc line="114">
                &lt;code&gt;selected&lt;/code&gt; is an array that will contain
                  the indices of items that have been selected.                
                <serial>
                                        
                </serial>
                <see>
                    #getSelectedIndexes()                    
                </see>
                <see>
                    #getSelectedIndex()                    
                </see>
            </javadoc>
            <declaration name="visibleIndex" type="int" line="122"/>
            <javadoc line="122">
                This variable contains the value that will be used
                  when trying to make a particular list item visible.                
                <serial>
                                        
                </serial>
                <see>
                    #makeVisible(int)                    
                </see>
            </javadoc>
            <declaration name="actionListener" type="ActionListener" line="129"/>
            <declaration name="itemListener" type="ItemListener" line="130"/>
            <declaration name="base" type="String" line="131"/>
            <declaration name="nameCounter" type="int" line="132"/>
            <declaration name="serialVersionUID" type="long" line="133"/>
            <javadoc line="134">
                Creates a new scrolling list.
                  By default, there are four visible lines and multiple selections are
                  not allowed.  Note that this is a convenience method for
                  &lt;code&gt;List(0, false)&lt;/code&gt;.  Also note that the number of visible
                  lines in the list cannot be changed after it has been created.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="List" type="constructor" line="144"/>
            <javadoc line="147">
                Creates a new scrolling list initialized with the specified
                  number of visible lines. By default, multiple selections are
                  not allowed.  Note that this is a convenience method for
                  &lt;code&gt;List(rows, false)&lt;/code&gt;.  Also note that the number
                  of visible rows in the list cannot be changed after it has
                  been created.                
                <param>
                    rows the number of items to show.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="List" type="constructor" line="160">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <declaration name="DEFAULT_VISIBLE_ROWS" type="int" line="163"/>
            <javadoc line="163">
                The default number of visible rows is 4.  A list with
                  zero rows is unusable and unsightly.                
            </javadoc>
            <javadoc line="168">
                Creates a new scrolling list initialized to display the specified
                  number of rows. Note that if zero rows are specified, then
                  the list will be created with a default of four rows.
                  Also note that the number of visible rows in the list cannot
                  be changed after it has been created.
                  If the value of &lt;code&gt;multipleMode&lt;/code&gt; is
                  &lt;code&gt;true&lt;/code&gt;, then the user can select multiple items from
                  the list. If it is &lt;code&gt;false&lt;/code&gt;, only one item at a time
                  can be selected.                
                <param>
                    rows   the number of items to show.                    
                </param>
                <param>
                    multipleMode   if <code>true</code>,
                      then multiple selections are allowed;
                      otherwise, only one item can be selected at a time.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="List" type="constructor" line="186">
                <params>
                    <param name="rows" type="int"/>
                    <param name="multipleMode" type="boolean"/>
                </params>
            </method>
            <javadoc line="191">
                Construct a name for this component.  Called by
                  &lt;code&gt;getName&lt;/code&gt; when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="195">
                <scope line="196"/>
            </method>
            <javadoc line="200">
                Creates the peer for the list.  The peer allows us to modify the
                  list&apos;s appearance without changing its functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="204">
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Removes the peer for this list.  The peer allows us to modify the
                  list&apos;s appearance without changing its functionality.                
            </javadoc>
            <method name="removeNotify" type="void" line="214">
                <scope line="215">
                    <declaration name="peer" type="ListPeer" line="216"/>
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="223">
                Gets the number of items in the list.                
                <return>
                    the number of items in the list                    
                </return>
                <see>
                    #getItem                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getItemCount" type="int" line="229"/>
            <javadoc line="232">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getItemCount()&lt;/code&gt;.                
            </javadoc>
            <method name="countItems" type="int" line="236"/>
            <javadoc line="239">
                Gets the item associated with the specified index.                
                <return>
                    an item that is associated with
                      the specified index                    
                </return>
                <param>
                    index the position of the item                    
                </param>
                <see>
                    #getItemCount                    
                </see>
            </javadoc>
            <method name="getItem" type="String" line="246">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getItemImpl" type="String" line="249">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Gets the items in the list.                
                <return>
                    a string array containing items of the list                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getItems" type="String[]" line="260">
                <declaration name="itemCopies" type="String" line="261"/>
            </method>
            <javadoc line="265">
                Adds the specified item to the end of scrolling list.                
                <param>
                    item the item to be added                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="add" type="void" line="270">
                <params>
                    <param name="item" type="String"/>
                </params>
            </method>
            <javadoc line="273">
                @deprecated      replaced by &lt;code&gt;add(String)&lt;/code&gt;.                
            </javadoc>
            <method name="addItem" type="void" line="276">
                <params>
                    <param name="item" type="String"/>
                </params>
            </method>
            <javadoc line="279">
                Adds the specified item to the the scrolling list
                  at the position indicated by the index.  The index is
                  zero-based.  If the value of the index is less than zero,
                  or if the value of the index is greater than or equal to
                  the number of items in the list, then the item is added
                  to the end of the list.                
                <param>
                    item   the item to be added;
                      if this parameter is <code>null</code> then the item is
                      treated as an empty string, <code>""</code>                    
                </param>
                <param>
                    index  the position at which to add the item                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="add" type="void" line="292">
                <params>
                    <param name="item" type="String"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="295">
                @deprecated      replaced by &lt;code&gt;add(String, int)&lt;/code&gt;.                
            </javadoc>
            <method name="addItem" type="void" line="298">
                <params>
                    <param name="item" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="299"/>
                <scope line="302"/>
                <scope line="305"/>
                <scope line="308"/>
                <declaration name="peer" type="ListPeer" line="311"/>
                <scope line="312"/>
            </method>
            <javadoc line="316">
                Replaces the item at the specified index in the scrolling list
                  with the new string.                
                <param>
                    newValue   a new string to replace an existing item                    
                </param>
                <param>
                    index      the position of the item to replace                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is out of range                    
                </exception>
            </javadoc>
            <method name="replaceItem" type="void" line="324">
                <params>
                    <param name="newValue" type="String"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="328">
                Removes all items from this list.                
                <see>
                    #remove                    
                </see>
                <see>
                    #delItems                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="334"/>
            <javadoc line="337">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;removeAll()&lt;/code&gt;.                
            </javadoc>
            <method name="clear" type="void" line="341">
                <declaration name="peer" type="ListPeer" line="342"/>
                <scope line="343"/>
            </method>
            <javadoc line="349">
                Removes the first occurrence of an item from the list.
                  If the specified item is selected, and is the only selected
                  item in the list, the list is set to have no selection.                
                <param>
                    item  the item to remove from the list                    
                </param>
                <exception>
                    IllegalArgumentExceptionif the item doesn't exist in the list                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="357">
                <params>
                    <param name="item" type="String"/>
                </params>
                <declaration name="index" type="int" line="358"/>
                <scope line="359"/>
                <scope line="362"/>
            </method>
            <javadoc line="366">
                Removes the item at the specified position
                  from this scrolling list.
                  If the item with the specified position is selected, and is the
                  only selected item in the list, the list is set to have no selection.                
                <param>
                    position   the index of the item to delete                    
                </param>
                <see>
                    #add(String,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
                <exception>
                    ArrayIndexOutOfBoundsExceptionif the <code>position</code> is less than 0 or
                      greater than <code>getItemCount()-1</code>                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="377">
                <params>
                    <param name="position" type="int"/>
                </params>
            </method>
            <javadoc line="380">
                @deprecated     replaced by &lt;code&gt;remove(String)&lt;/code&gt;
                  and &lt;code&gt;remove(int)&lt;/code&gt;.                
            </javadoc>
            <method name="delItem" type="void" line="384">
                <params>
                    <param name="position" type="int"/>
                </params>
            </method>
            <javadoc line="387">
                Gets the index of the selected item on the list,                
                <return>
                    the index of the selected item;
                      if no item is selected, or if multiple items are
                      selected, <code>-1</code> is returned.                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="getSelectedIndex" type="int" line="396">
                <declaration name="sel" type="int" line="397"/>
            </method>
            <javadoc line="400">
                Gets the selected indexes on the list.                
                <return>
                    an array of the selected indexes on this scrolling list;
                      if no item is selected, a zero-length array is returned.                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="getSelectedIndexes" type="int[]" line="408">
                <declaration name="peer" type="ListPeer" line="409"/>
                <scope line="410"/>
            </method>
            <javadoc line="415">
                Gets the selected item on this scrolling list.                
                <return>
                    the selected item on the list;
                      if no item is selected, or if multiple items are
                      selected, <code>null</code> is returned.                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="getSelectedItem" type="String" line="424">
                <declaration name="index" type="int" line="425"/>
            </method>
            <javadoc line="428">
                Gets the selected items on this scrolling list.                
                <return>
                    an array of the selected items on this scrolling list;
                      if no item is selected, a zero-length array is returned.                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="getSelectedItems" type="String[]" line="436">
                <declaration name="sel" type="int" line="437"/>
                <declaration name="str" type="String" line="438"/>
                <scope line="439"/>
            </method>
            <javadoc line="444">
                Gets the selected items on this scrolling list in an array of Objects.                
                <return>
                    an array of <code>Object</code>s representing the
                      selected items on this scrolling list;
                      if no item is selected, a zero-length array is returned.                    
                </return>
                <see>
                    #getSelectedItems                    
                </see>
                <see>
                    ItemSelectable                    
                </see>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="452"/>
            <javadoc line="455">
                Selects the item at the specified index in the scrolling list.
                  &lt;p&gt;
                  Note that passing out of range parameters is invalid,
                  and will result in unspecified behavior.
                  &lt;p&gt;Note that this method should be primarily used to
                  initially select an item in this component.
                  Programmatically calling this method will &lt;i&gt;not&lt;/i&gt; trigger
                  an &lt;code&gt;ItemEvent&lt;/code&gt;.  The only way to trigger an
                  &lt;code&gt;ItemEvent&lt;/code&gt; is by user interaction.                
                <param>
                    index the position of the item to select                    
                </param>
                <see>
                    #getSelectedItem                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="select" type="void" line="470">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="peer" type="ListPeer" line="471"/>
                <scope line="472">
                    <scope line="474"/>
                    <scope line="478">
                        <declaration name="alreadySelected" type="boolean" line="479"/>
                        <scope line="480">
                            <scope line="481"/>
                        </scope>
                        <scope line="486">
                            <scope line="487"/>
                            <scope line="491">
                                <declaration name="newsel" type="int" line="492"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="502">
                Deselects the item at the specified index.
                  &lt;p&gt;
                  Note that passing out of range parameters is invalid,
                  and will result in unspecified behavior.
                  &lt;p&gt;
                  If the item at the specified index is not selected,
                  then the operation is ignored.                
                <param>
                    index the position of the item to deselect                    
                </param>
                <see>
                    #select                    
                </see>
                <see>
                    #getSelectedItem                    
                </see>
                <see>
                    #isIndexSelected                    
                </see>
            </javadoc>
            <method name="deselect" type="void" line="515">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="peer" type="ListPeer" line="516"/>
                <scope line="517">
                    <scope line="518"/>
                </scope>
                <scope line="522">
                    <scope line="523">
                        <declaration name="newsel" type="int" line="524"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="532">
                Determines if the specified item in this scrolling list is
                  selected.                
                <param>
                    index   the item to be checked                    
                </param>
                <return>
                    <code>true</code> if the specified item has been
                      selected; <code>false</code> otherwise                    
                </return>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isIndexSelected" type="boolean" line="542">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="545">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;isIndexSelected(int)&lt;/code&gt;.                
            </javadoc>
            <method name="isSelected" type="boolean" line="549">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="sel" type="int" line="550"/>
                <scope line="551">
                    <scope line="552"/>
                </scope>
            </method>
            <javadoc line="558">
                Gets the number of visible lines in this list.  Note that
                  once the &lt;code&gt;List&lt;/code&gt; has been created, this number
                  will never change.                
                <return>
                    the number of visible lines in this scrolling list                    
                </return>
            </javadoc>
            <method name="getRows" type="int" line="564"/>
            <javadoc line="567">
                Determines whether this list allows multiple selections.                
                <return>
                    <code>true</code> if this list allows multiple
                      selections; otherwise, <code>false</code>                    
                </return>
                <see>
                    #setMultipleMode                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="isMultipleMode" type="boolean" line="574"/>
            <javadoc line="577">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;isMultipleMode()&lt;/code&gt;.                
            </javadoc>
            <method name="allowsMultipleSelections" type="boolean" line="581"/>
            <javadoc line="584">
                Sets the flag that determines whether this list
                  allows multiple selections.
                  When the selection mode is changed from multiple-selection to
                  single-selection, the selected items change as follows:
                  If a selected item has the location cursor, only that
                  item will remain selected.  If no selected item has the
                  location cursor, all items will be deselected.                
                <param>
                    b   if <code>true</code> then multiple selections
                      are allowed; otherwise, only one item from
                      the list can be selected at once                    
                </param>
                <see>
                    #isMultipleMode                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setMultipleMode" type="void" line="598">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="601">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setMultipleMode(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="setMultipleSelections" type="void" line="605">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="606">
                    <declaration name="peer" type="ListPeer" line="608"/>
                    <scope line="609"/>
                </scope>
            </method>
            <javadoc line="614">
                Gets the index of the item that was last made visible by
                  the method &lt;code&gt;makeVisible&lt;/code&gt;.                
                <return>
                    the index of the item that was last made visible                    
                </return>
                <see>
                    #makeVisible                    
                </see>
            </javadoc>
            <method name="getVisibleIndex" type="int" line="620"/>
            <javadoc line="623">
                Makes the item at the specified index visible.                
                <param>
                    index    the position of the item                    
                </param>
                <see>
                    #getVisibleIndex                    
                </see>
            </javadoc>
            <method name="makeVisible" type="void" line="628">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="peer" type="ListPeer" line="630"/>
                <scope line="631"/>
            </method>
            <javadoc line="635">
                Gets the preferred dimensions for a list with the specified
                  number of rows.                
                <param>
                    rows    number of rows in the list                    
                </param>
                <return>
                    the preferred dimensions for displaying this scrolling list
                      given that the specified number of rows must be visible                    
                </return>
                <see>
                    java.awt.Component#getPreferredSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="644">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="647">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize(int)&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="651">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <scope line="652">
                    <declaration name="peer" type="ListPeer" line="653"/>
                </scope>
            </method>
            <javadoc line="657">
                Gets the preferred size of this scrolling list.                
                <return>
                    the preferred dimensions for displaying this scrolling list                    
                </return>
                <see>
                    java.awt.Component#getPreferredSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="663"/>
            <javadoc line="666">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize()&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="670">
                <scope line="671"/>
            </method>
            <javadoc line="675">
                Gets the minumum dimensions for a list with the specified
                  number of rows.                
                <param>
                    rows    number of rows in the list                    
                </param>
                <return>
                    the minimum dimensions for displaying this scrolling list
                      given that the specified number of rows must be visible                    
                </return>
                <see>
                    java.awt.Component#getMinimumSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="684">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="687">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize(int)&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="691">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <scope line="692">
                    <declaration name="peer" type="ListPeer" line="693"/>
                </scope>
            </method>
            <javadoc line="697">
                Determines the minimum size of this scrolling list.                
                <return>
                    the minimum dimensions needed
                      to display this scrolling list                    
                </return>
                <see>
                    java.awt.Component#getMinimumSize()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="704"/>
            <javadoc line="707">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize()&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="711">
                <scope line="712"/>
            </method>
            <javadoc line="716">
                Adds the specified item listener to receive item events from
                  this list.  Item events are sent in response to user input, but not
                  in response to calls to &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;deselect&lt;/code&gt;.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the item listener                    
                </param>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    #select                    
                </see>
                <see>
                    #deselect                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addItemListener" type="void" line="733">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="734"/>
            </method>
            <javadoc line="740">
                Removes the specified item listener so that it no longer
                  receives item events from this list.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the item listener                    
                </param>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeItemListener" type="void" line="754">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="755"/>
            </method>
            <javadoc line="760">
                Returns an array of all the item listeners
                  registered on this list.                
                <return>
                    all of this list's <code>ItemListener</code>s
                      or an empty array if no item
                      listeners are currently registered                    
                </return>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="772"/>
            <javadoc line="775">
                Adds the specified action listener to receive action events from
                  this list. Action events occur when a user double-clicks
                  on a list item or types Enter when the list has the keyboard
                  focus.
                  &lt;p&gt;
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener                    
                </param>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addActionListener" type="void" line="792">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="793"/>
            </method>
            <javadoc line="799">
                Removes the specified action listener so that it no longer
                  receives action events from this list. Action events
                  occur when a user double-clicks on a list item.
                  If listener &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l     the action listener                    
                </param>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeActionListener" type="void" line="814">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="815"/>
            </method>
            <javadoc line="820">
                Returns an array of all the action listeners
                  registered on this list.                
                <return>
                    all of this list's <code>ActionListener</code>s
                      or an empty array if no action
                      listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="832"/>
            <javadoc line="835">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;List&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;List&lt;/code&gt; &lt;code&gt;l&lt;/code&gt;
                  for its item listeners with the following code:
                  &lt;pre&gt;ItemListener[] ils = (ItemListener[])(l.getListeners(ItemListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this list,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getItemListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="863">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="864"/>
                <scope line="865"/>
                <scope line="868"/>
                <scope line="871"/>
            </method>
            <method name="eventEnabled" type="boolean" line="876">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="879"/>
                <scope line="884"/>
            </method>
            <javadoc line="893">
                Processes events on this scrolling list. If an event is
                  an instance of &lt;code&gt;ItemEvent&lt;/code&gt;, it invokes the
                  &lt;code&gt;processItemEvent&lt;/code&gt; method. Else, if the
                  event is an instance of &lt;code&gt;ActionEvent&lt;/code&gt;,
                  it invokes &lt;code&gt;processActionEvent&lt;/code&gt;.
                  If the event is not an item event or an action event,
                  it invokes &lt;code&gt;processEvent&lt;/code&gt; on the superclass.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    #processActionEvent                    
                </see>
                <see>
                    #processItemEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="911">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="912"/>
                <scope line="916"/>
            </method>
            <javadoc line="922">
                Processes item events occurring on this list by
                  dispatching them to any registered
                  &lt;code&gt;ItemListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless item events are
                  enabled for this component. Item events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ItemListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addItemListener&lt;/code&gt;.
                  &lt;li&gt;Item events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the item event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processItemEvent" type="void" line="945">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <declaration name="listener" type="ItemListener" line="946"/>
                <scope line="947"/>
            </method>
            <javadoc line="951">
                Processes action events occurring on this component
                  by dispatching them to any registered
                  &lt;code&gt;ActionListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless action events are
                  enabled for this component. Action events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ActionListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addActionListener&lt;/code&gt;.
                  &lt;li&gt;Action events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the action event                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processActionEvent" type="void" line="974">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listener" type="ActionListener" line="975"/>
                <scope line="976"/>
            </method>
            <javadoc line="980">
                Returns the parameter string representing the state of this
                  scrolling list. This string is useful for debugging.                
                <return>
                    the parameter string of this scrolling list                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="985"/>
            <javadoc line="988">
                @deprecated As of JDK version 1.1,
                  Not for public use in the future.
                  This method is expected to be retained only as a package
                  private method.                
            </javadoc>
            <method name="delItems" type="void" line="994">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="995"/>
                <declaration name="peer" type="ListPeer" line="998"/>
                <scope line="999"/>
            </method>
            <declaration name="listSerializedDataVersion" type="int" line="1003"/>
            <javadoc line="1003">
                The &lt;code&gt;List&lt;/code&gt; component&apos;s
                  Serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="1009">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ItemListeners&lt;/code&gt;
                  and &lt;code&gt;ActionListeners&lt;/code&gt; as optional data.
                  The non-serializable listeners are detected and
                  no attempt is made to serialize them.                
                <serialData>
                    <code>null</code> terminated sequence of 0
                      or more pairs; the pair consists of a <code>String</code>
                      and an <code>Object</code>; the <code>String</code>
                      indicates the type of object and is one of the
                      following:
                      <code>itemListenerK</code> indicating an
                      <code>ItemListener</code> object;
                      <code>actionListenerK</code> indicating an
                      <code>ActionListener</code> object                    
                </serialData>
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#itemListenerK                    
                </see>
                <see>
                    java.awt.Component#actionListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="1030">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1031">
                    <declaration name="peer" type="ListPeer" line="1032"/>
                    <scope line="1033"/>
                </scope>
            </method>
            <javadoc line="1042">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if it
                  isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to receive
                  both item events and action events (as specified
                  by the key stored in the stream) fired by the
                  &lt;code&gt;List&lt;/code&gt;.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the <code>ObjectInputStream</code> to write                    
                </param>
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    #removeItemListener(ItemListener)                    
                </see>
                <see>
                    #addItemListener(ItemListener)                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1058">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="keyOrNull" type="Object" line="1061"/>
                <scope line="1062">
                    <declaration name="key" type="String" line="1063"/>
                </scope>
            </method>
            <javadoc line="1069">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;List&lt;/code&gt;. For lists, the &lt;code&gt;AccessibleContext&lt;/code&gt;
                  takes the form of an &lt;code&gt;AccessibleAWTList&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleAWTList&lt;/code&gt; instance is created, if necessary.                
                <return>
                    an <code>AccessibleAWTList</code> that serves as the
                      <code>AccessibleContext</code> of this <code>List</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1078">
                <scope line="1079"/>
            </method>
            <class name="AccessibleAWTList" line="1084">
                <extends class="AccessibleAWTComponent"/>
                <implements interface="AccessibleSelection"/>
                <implements interface="ItemListener"/>
                <implements interface="ActionListener"/>
                <javadoc line="1084">
                    This class implements accessibility support for the
                      &lt;code&gt;List&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to list user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1091"/>
                <method name="AccessibleAWTList" type="constructor" line="1092"/>
                <method name="actionPerformed" type="void" line="1097">
                    <params>
                        <param name="event" type="ActionEvent"/>
                    </params>
                </method>
                <method name="itemStateChanged" type="void" line="1099">
                    <params>
                        <param name="event" type="ItemEvent"/>
                    </params>
                </method>
                <javadoc line="1101">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1107">
                    <declaration name="states" type="AccessibleStateSet" line="1108"/>
                    <scope line="1109"/>
                </method>
                <javadoc line="1114">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1120"/>
                <javadoc line="1123">
                    Returns the Accessible child contained at the local coordinate
                      Point, if one exists.                    
                    <return>
                        the Accessible at the specified location, if it exists                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="1128">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="1131">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1137"/>
                <javadoc line="1140">
                    Return the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1145">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1146">
                        <scope line="1147"/>
                        <scope line="1150"/>
                    </scope>
                </method>
                <javadoc line="1155">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="1162"/>
                <javadoc line="1165">
                    Returns the number of items currently selected.
                      If no items are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected.                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="1170"/>
                <javadoc line="1173">
                    Returns an Accessible representing the specified selected item
                      in the object.  If there isn&apos;t a selection, or there are
                      fewer items selected than the integer passed in, the return
                      value will be null.                    
                    <param>
                        i the zero-based index of selected items                        
                    </param>
                    <return>
                        an Accessible containing the selected item                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="1181">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1182">
                        <declaration name="len" type="int" line="1183"/>
                        <scope line="1184"/>
                        <scope line="1187"/>
                    </scope>
                </method>
                <javadoc line="1192">
                    Returns true if the current child of this object is selected.                    
                    <param>
                        i the zero-based index of the child in this Accessible
                          object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="1198">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1201">
                    Adds the specified selected item in the object to the object&apos;s
                      selection.  If the object supports multiple selections,
                      the specified item is added to any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified item is already selected, this method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="1209">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1212">
                    Removes the specified selected item in the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="1218">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1221">
                    Clears the selection in the object, so that nothing in the
                      object is selected.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="1225">
                    <scope line="1226">
                        <declaration name="selectedIndexes" type="int" line="1227"/>
                        <scope line="1229"/>
                    </scope>
                </method>
                <javadoc line="1234">
                    Causes every selected item in the object to be selected
                      if the object supports multiple selections.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="1238">
                    <scope line="1239">
                        <scope line="1240"/>
                    </scope>
                </method>
                <class name="AccessibleAWTListChild" line="1245">
                    <extends class="AccessibleAWTComponent"/>
                    <implements interface="Accessible"/>
                    <javadoc line="1245">
                        This class implements accessibility support for
                          List children.  It provides an implementation of the
                          Java Accessibility API appropriate to list children
                          user-interface elements.                        
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <declaration name="serialVersionUID" type="long" line="1253"/>
                    <declaration name="parent" type="List" line="1254"/>
                    <declaration name="indexInParent" type="int" line="1255"/>
                    <method name="AccessibleAWTListChild" type="constructor" line="1256">
                        <params>
                            <param name="parent" type="List"/>
                            <param name="indexInParent" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1261">
                        Gets the AccessibleContext for this object.  In the
                          implementation of the Java Accessibility API for this class,
                          return this object, which acts as its own AccessibleContext.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="1267"/>
                    <javadoc line="1270">
                        Get the role of this object.                        
                        <return>
                            an instance of AccessibleRole describing the role of
                              the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="1276"/>
                    <javadoc line="1279">
                        Get the state set of this object.  The AccessibleStateSet of an
                          object is composed of a set of unique AccessibleState&apos;s.  A
                          change in the AccessibleStateSet of an object will cause a
                          PropertyChangeEvent to be fired for the
                          ACCESSIBLE_STATE_PROPERTY property.                        
                        <return>
                            an instance of AccessibleStateSet containing the
                              current state set of the object                            
                        </return>
                        <see>
                            AccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState                            
                        </see>
                        <see>
                            #addPropertyChangeListener                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1291">
                        <declaration name="states" type="AccessibleStateSet" line="1292"/>
                        <scope line="1293"/>
                    </method>
                    <javadoc line="1298">
                        Gets the locale of the component. If the component does not
                          have a locale, then the locale of its parent is returned.                        
                        <return>
                            This component's locale.  If this component does not have
                              a locale, the locale of its parent is returned.                            
                        </return>
                        <exception>
                            IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet
                              been added to a containment hierarchy such that the locale can
                              be determined from the containing parent.                            
                        </exception>
                    </javadoc>
                    <method name="getLocale" type="Locale" line="1307"/>
                    <javadoc line="1310">
                        Get the 0-based index of this object in its accessible parent.                        
                        <return>
                            the 0-based index of this object in its parent; -1 if
                              this object does not have an accessible parent.                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                        <see>
                            #getAccessibleChild                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="1318"/>
                    <javadoc line="1321">
                        Returns the number of accessible children of the object.                        
                        <return>
                            the number of accessible children of the object.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="1325"/>
                    <javadoc line="1328">
                        Return the specified Accessible child of the object.  The
                          Accessible children of an Accessible object are zero-based,
                          so the first child of an Accessible child is at index 0, the
                          second child is at index 1, and so on.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the Accessible child of the object                            
                        </return>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="1337">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1340">
                        Get the background color of this object.                        
                        <return>
                            the background color, if supported, of the object;
                              otherwise, null                            
                        </return>
                        <see>
                            #setBackground                            
                        </see>
                    </javadoc>
                    <method name="getBackground" type="Color" line="1346"/>
                    <javadoc line="1349">
                        Set the background color of this object.                        
                        <param>
                            c the new Color for the background                            
                        </param>
                        <see>
                            #setBackground                            
                        </see>
                    </javadoc>
                    <method name="setBackground" type="void" line="1354">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                    </method>
                    <javadoc line="1357">
                        Get the foreground color of this object.                        
                        <return>
                            the foreground color, if supported, of the object;
                              otherwise, null                            
                        </return>
                        <see>
                            #setForeground                            
                        </see>
                    </javadoc>
                    <method name="getForeground" type="Color" line="1363"/>
                    <javadoc line="1366">
                        Set the foreground color of this object.                        
                        <param>
                            c the new Color for the foreground                            
                        </param>
                        <see>
                            #getForeground                            
                        </see>
                    </javadoc>
                    <method name="setForeground" type="void" line="1371">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                    </method>
                    <javadoc line="1374">
                        Get the Cursor of this object.                        
                        <return>
                            the Cursor, if supported, of the object; otherwise, null                            
                        </return>
                        <see>
                            #setCursor                            
                        </see>
                    </javadoc>
                    <method name="getCursor" type="Cursor" line="1379"/>
                    <javadoc line="1382">
                        Set the Cursor of this object.
                          &lt;p&gt;
                          The method may have no visual effect if the Java platform
                          implementation and/or the native system do not support
                          changing the mouse cursor shape.                        
                        <param>
                            cursor the new Cursor for the object                            
                        </param>
                        <see>
                            #getCursor                            
                        </see>
                    </javadoc>
                    <method name="setCursor" type="void" line="1391">
                        <params>
                            <param name="cursor" type="Cursor"/>
                        </params>
                    </method>
                    <javadoc line="1394">
                        Get the Font of this object.                        
                        <return>
                            the Font,if supported, for the object; otherwise, null                            
                        </return>
                        <see>
                            #setFont                            
                        </see>
                    </javadoc>
                    <method name="getFont" type="Font" line="1399"/>
                    <javadoc line="1402">
                        Set the Font of this object.                        
                        <param>
                            f the new Font for the object                            
                        </param>
                        <see>
                            #getFont                            
                        </see>
                    </javadoc>
                    <method name="setFont" type="void" line="1407">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                    </method>
                    <javadoc line="1410">
                        Get the FontMetrics of this object.                        
                        <param>
                            f the Font                            
                        </param>
                        <return>
                            the FontMetrics, if supported, the object; otherwise, null                            
                        </return>
                        <see>
                            #getFont                            
                        </see>
                    </javadoc>
                    <method name="getFontMetrics" type="FontMetrics" line="1416">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                    </method>
                    <javadoc line="1419">
                        Determine if the object is enabled.  Objects that are enabled
                          will also have the AccessibleState.ENABLED state set in their
                          AccessibleStateSet.                        
                        <return>
                            true if object is enabled; otherwise, false                            
                        </return>
                        <see>
                            #setEnabled                            
                        </see>
                        <see>
                            AccessibleContext#getAccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState#ENABLED                            
                        </see>
                        <see>
                            AccessibleStateSet                            
                        </see>
                    </javadoc>
                    <method name="isEnabled" type="boolean" line="1429"/>
                    <javadoc line="1432">
                        Set the enabled state of the object.                        
                        <param>
                            b if true, enables this object; otherwise, disables it                            
                        </param>
                        <see>
                            #isEnabled                            
                        </see>
                    </javadoc>
                    <method name="setEnabled" type="void" line="1437">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                    </method>
                    <javadoc line="1440">
                        Determine if the object is visible.  Note: this means that the
                          object intends to be visible; however, it may not be
                          showing on the screen because one of the objects that this object
                          is contained by is currently not visible.  To determine if an
                          object is showing on the screen, use isShowing().
                          &lt;p&gt;Objects that are visible will also have the
                          AccessibleState.VISIBLE state set in their AccessibleStateSet.                        
                        <return>
                            true if object is visible; otherwise, false                            
                        </return>
                        <see>
                            #setVisible                            
                        </see>
                        <see>
                            AccessibleContext#getAccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState#VISIBLE                            
                        </see>
                        <see>
                            AccessibleStateSet                            
                        </see>
                    </javadoc>
                    <method name="isVisible" type="boolean" line="1454"/>
                    <javadoc line="1457">
                        Set the visible state of the object.                        
                        <param>
                            b if true, shows this object; otherwise, hides it                            
                        </param>
                        <see>
                            #isVisible                            
                        </see>
                    </javadoc>
                    <method name="setVisible" type="void" line="1462">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                    </method>
                    <javadoc line="1465">
                        Determine if the object is showing.  This is determined by
                          checking the visibility of the object and visibility of the
                          object ancestors.
                          Note: this will return true even if the object is obscured
                          by another (for example, it to object is underneath a menu
                          that was pulled down).                        
                        <return>
                            true if object is showing; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isShowing" type="boolean" line="1474"/>
                    <javadoc line="1477">
                        Checks whether the specified point is within this object&apos;s
                          bounds, where the point&apos;s x and y coordinates are defined to
                          be relative to the coordinate system of the object.                        
                        <param>
                            p the Point relative to the coordinate system of the
                              object                            
                        </param>
                        <return>
                            true if object contains Point; otherwise false                            
                        </return>
                        <see>
                            #getBounds                            
                        </see>
                    </javadoc>
                    <method name="contains" type="boolean" line="1486">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <javadoc line="1489">
                        Returns the location of the object on the screen.                        
                        <return>
                            location of object on screen; null if this object
                              is not on the screen                            
                        </return>
                        <see>
                            #getBounds                            
                        </see>
                        <see>
                            #getLocation                            
                        </see>
                    </javadoc>
                    <method name="getLocationOnScreen" type="Point" line="1496"/>
                    <javadoc line="1499">
                        Gets the location of the object relative to the parent in the
                          form of a point specifying the object&apos;s top-left corner in the
                          screen&apos;s coordinate space.                        
                        <return>
                            An instance of Point representing the top-left corner of
                              the objects's bounds in the coordinate space of the screen; null
                              if this object or its parent are not on the screen                            
                        </return>
                        <see>
                            #getBounds                            
                        </see>
                        <see>
                            #getLocationOnScreen                            
                        </see>
                    </javadoc>
                    <method name="getLocation" type="Point" line="1509"/>
                    <javadoc line="1512">
                        Sets the location of the object relative to the parent.                        
                        <param>
                            p the new position for the top-left corner                            
                        </param>
                        <see>
                            #getLocation                            
                        </see>
                    </javadoc>
                    <method name="setLocation" type="void" line="1517">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <javadoc line="1519">
                        Gets the bounds of this object in the form of a Rectangle object.
                          The bounds specify this object&apos;s width, height, and location
                          relative to its parent.                        
                        <return>
                            A rectangle indicating this component's bounds; null if
                              this object is not on the screen.                            
                        </return>
                        <see>
                            #contains                            
                        </see>
                    </javadoc>
                    <method name="getBounds" type="Rectangle" line="1527"/>
                    <javadoc line="1530">
                        Sets the bounds of this object in the form of a Rectangle
                          object.  The bounds specify this object&apos;s width, height, and
                          location relative to its parent.                        
                        <param>
                            r rectangle indicating this component's bounds                            
                        </param>
                        <see>
                            #getBounds                            
                        </see>
                    </javadoc>
                    <method name="setBounds" type="void" line="1537">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                    </method>
                    <javadoc line="1539">
                        Returns the size of this object in the form of a Dimension
                          object.  The height field of the Dimension object contains this
                          objects&apos;s height, and the width field of the Dimension object
                          contains this object&apos;s width.                        
                        <return>
                            A Dimension object that indicates the size of this
                              component; null if this object is not on the screen                            
                        </return>
                        <see>
                            #setSize                            
                        </see>
                    </javadoc>
                    <method name="getSize" type="Dimension" line="1548"/>
                    <javadoc line="1551">
                        Resizes this object so that it has width and height.                        
                        <param>
                            d - The dimension specifying the new size of the object.                            
                        </param>
                        <see>
                            #getSize                            
                        </see>
                    </javadoc>
                    <method name="setSize" type="void" line="1556">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                    </method>
                    <javadoc line="1558">
                        Returns the &lt;code&gt;Accessible&lt;/code&gt; child, if one exists,
                          contained at the local coordinate &lt;code&gt;Point&lt;/code&gt;.                        
                        <param>
                            p the point relative to the coordinate system of this
                              object                            
                        </param>
                        <return>
                            the <code>Accessible</code>, if it exists,
                              at the specified location; otherwise <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAt" type="Accessible" line="1566">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <javadoc line="1569">
                        Returns whether this object can accept focus or not.   Objects
                          that can accept focus will also have the
                          &lt;code&gt;AccessibleState.FOCUSABLE&lt;/code&gt; state set in their
                          &lt;code&gt;AccessibleStateSet&lt;/code&gt;.                        
                        <return>
                            true if object can accept focus; otherwise false                            
                        </return>
                        <see>
                            AccessibleContext#getAccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState#FOCUSABLE                            
                        </see>
                        <see>
                            AccessibleState#FOCUSED                            
                        </see>
                        <see>
                            AccessibleStateSet                            
                        </see>
                    </javadoc>
                    <method name="isFocusTraversable" type="boolean" line="1580"/>
                    <javadoc line="1583">
                        Requests focus for this object.  If this object cannot accept
                          focus, nothing will happen.  Otherwise, the object will attempt
                          to take focus.                        
                        <see>
                            #isFocusTraversable                            
                        </see>
                    </javadoc>
                    <method name="requestFocus" type="void" line="1589"/>
                    <javadoc line="1591">
                        Adds the specified focus listener to receive focus events from
                          this component.                        
                        <param>
                            l the focus listener                            
                        </param>
                        <see>
                            #removeFocusListener                            
                        </see>
                    </javadoc>
                    <method name="addFocusListener" type="void" line="1597">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                    </method>
                    <javadoc line="1599">
                        Removes the specified focus listener so it no longer receives
                          focus events from this component.                        
                        <param>
                            l the focus listener                            
                        </param>
                        <see>
                            #addFocusListener                            
                        </see>
                    </javadoc>
                    <method name="removeFocusListener" type="void" line="1605">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                    </method>
                </class>
            </class>
        </class>
    </source>