<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.TextComponentPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="sun.awt.InputMethodSupport"/>
        <import package="java.text.BreakIterator"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.accessibility"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <class name="TextComponent" line="13">
            <extends class="Component"/>
            <implements interface="Accessible"/>
            <javadoc line="13">
                The &lt;code&gt;TextComponent&lt;/code&gt; class is the superclass of
                  any component that allows the editing of some text.
                  &lt;p&gt;
                  A text component embodies a string of text.  The
                  &lt;code&gt;TextComponent&lt;/code&gt; class defines a set of methods
                  that determine whether or not this text is editable. If the
                  component is editable, it defines another set of methods
                  that supports a text insertion caret.
                  &lt;p&gt;
                  In addition, the class defines methods that are used
                  to maintain a current &lt;em&gt;selection&lt;/em&gt; from the text.
                  The text selection, a substring of the component&apos;s text,
                  is the target of editing operations. It is also referred
                  to as the &lt;em&gt;selected text&lt;/em&gt;.                
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="text" type="String" line="33"/>
            <javadoc line="33">
                The value of the text.
                  A &lt;code&gt;null&lt;/code&gt; value is the same as &quot;&quot;.                
                <serial>
                                        
                </serial>
                <see>
                    #setText(String)                    
                </see>
                <see>
                    #getText()                    
                </see>
            </javadoc>
            <declaration name="editable" type="boolean" line="41"/>
            <javadoc line="41">
                A boolean indicating whether or not this
                  &lt;code&gt;TextComponent&lt;/code&gt; is editable.
                  It will be &lt;code&gt;true&lt;/code&gt; if the text component
                  is editable and &lt;code&gt;false&lt;/code&gt; if not.                
                <serial>
                                        
                </serial>
                <see>
                    #isEditable()                    
                </see>
            </javadoc>
            <declaration name="selectionStart" type="int" line="50"/>
            <javadoc line="50">
                The selection refers to the selected text, and the
                  &lt;code&gt;selectionStart&lt;/code&gt; is the start position
                  of the selected text.                
                <serial>
                                        
                </serial>
                <see>
                    #getSelectionStart()                    
                </see>
                <see>
                    #setSelectionStart(int)                    
                </see>
            </javadoc>
            <declaration name="selectionEnd" type="int" line="59"/>
            <javadoc line="59">
                The selection refers to the selected text, and the
                  &lt;code&gt;selectionEnd&lt;/code&gt;
                  is the end position of the selected text.                
                <serial>
                                        
                </serial>
                <see>
                    #getSelectionEnd()                    
                </see>
                <see>
                    #setSelectionEnd(int)                    
                </see>
            </javadoc>
            <declaration name="backgroundSetByClientCode" type="boolean" line="68"/>
            <declaration name="canAccessClipboard" type="boolean" line="69"/>
            <javadoc line="69">
                True if this &lt;code&gt;TextComponent&lt;/code&gt; has access
                  to the System clipboard.                
            </javadoc>
            <declaration name="textListener" type="TextListener" line="74"/>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="76">
                Constructs a new text component initialized with the
                  specified text. Sets the value of the cursor to
                  &lt;code&gt;Cursor.TEXT_CURSOR&lt;/code&gt;.                
                <param>
                    text       the text to be displayed; if
                      <code>text</code> is <code>null</code>, the empty
                      string <code>""</code> will be displayed                    
                </param>
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.awt.Cursor                    
                </see>
            </javadoc>
            <method name="TextComponent" type="constructor" line="89">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <method name="enableInputMethodsIfNecessary" type="void" line="95">
                <scope line="96">
                    <scope line="98">
                        <declaration name="toolkit" type="Toolkit" line="99"/>
                        <declaration name="shouldEnable" type="boolean" line="100"/>
                        <scope line="101"/>
                    </scope>
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="110">
                Enables or disables input method support for this text component. If input
                  method support is enabled and the text component also processes key events,
                  incoming events are offered to the current input method and will only be
                  processed by the component or dispatched to its listeners if the input method
                  does not consume them. Whether and how input method support for this text
                  component is enabled or disabled by default is implementation dependent.                
                <param>
                    enable true to enable, false to disable                    
                </param>
                <see>
                    #processKeyEvent                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="enableInputMethods" type="void" line="121">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <method name="areInputMethodsEnabled" type="boolean" line="125">
                <scope line="126"/>
            </method>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="131">
                <declaration name="peer" type="TextComponentPeer" line="132"/>
            </method>
            <javadoc line="136">
                Makes this Component displayable by connecting it to a
                  native screen resource.
                  This method is called internally by the toolkit and should
                  not be called directly by programs.                
                <see>
                    java.awt.TextComponent#removeNotify                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="143"/>
            <javadoc line="147">
                Removes the &lt;code&gt;TextComponent&lt;/code&gt;&apos;s peer.
                  The peer allows us to modify the appearance of the
                  &lt;code&gt;TextComponent&lt;/code&gt; without changing its
                  functionality.                
            </javadoc>
            <method name="removeNotify" type="void" line="153">
                <scope line="154">
                    <declaration name="peer" type="TextComponentPeer" line="155"/>
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="164">
                Sets the text that is presented by this
                  text component to be the specified text.                
                <param>
                    t   the new text;
                      if this parameter is <code>null</code> then
                      the text is set to the empty string ""                    
                </param>
                <see>
                    java.awt.TextComponent#getText                    
                </see>
            </javadoc>
            <method name="setText" type="void" line="172">
                <params>
                    <param name="t" type="String"/>
                </params>
                <declaration name="peer" type="TextComponentPeer" line="174"/>
                <scope line="175"/>
            </method>
            <javadoc line="179">
                Returns the text that is presented by this text component.
                  By default, this is an empty string.                
                <return>
                    the value of this <code>TextComponent</code>                    
                </return>
                <see>
                    java.awt.TextComponent#setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="185">
                <declaration name="peer" type="TextComponentPeer" line="186"/>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Returns the selected text from the text that is
                  presented by this text component.                
                <return>
                    the selected text of this text component                    
                </return>
                <see>
                    java.awt.TextComponent#select                    
                </see>
            </javadoc>
            <method name="getSelectedText" type="String" line="198"/>
            <javadoc line="201">
                Indicates whether or not this text component is editable.                
                <return>
                    <code>true</code> if this text component is
                      editable; <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.TextComponent#setEditable                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isEditable" type="boolean" line="208"/>
            <javadoc line="211">
                Sets the flag that determines whether or not this
                  text component is editable.
                  &lt;p&gt;
                  If the flag is set to &lt;code&gt;true&lt;/code&gt;, this text component
                  becomes user editable. If the flag is set to &lt;code&gt;false&lt;/code&gt;,
                  the user cannot change the text of this text component.
                  By default, non-editable text components have a background color
                  of SystemColor.control.  This default can be overridden by
                  calling setBackground.                
                <param>
                    b   a flag indicating whether this text component
                      is user editable.                    
                </param>
                <see>
                    java.awt.TextComponent#isEditable                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setEditable" type="void" line="226">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="227"/>
                <declaration name="peer" type="TextComponentPeer" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="236">
                Gets the background color of this text component.
                  By default, non-editable text components have a background color
                  of SystemColor.control.  This default can be overridden by
                  calling setBackground.                
                <return>
                    This text component's background color.
                      If this text component does not have a background color,
                      the background color of its parent is returned.                    
                </return>
                <see>
                    #setBackground(Color)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getBackground" type="Color" line="247">
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Sets the background color of this text component.                
                <param>
                    c The color to become this text component's color.
                      If this parameter is null then this text component
                      will inherit the background color of its parent.                    
                </param>
                <see>
                    #getBackground()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setBackground" type="void" line="261">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="265">
                Gets the start position of the selected text in
                  this text component.                
                <return>
                    the start position of the selected text                    
                </return>
                <see>
                    java.awt.TextComponent#setSelectionStart                    
                </see>
                <see>
                    java.awt.TextComponent#getSelectionEnd                    
                </see>
            </javadoc>
            <method name="getSelectionStart" type="int" line="272">
                <declaration name="peer" type="TextComponentPeer" line="273"/>
                <scope line="274"/>
            </method>
            <javadoc line="279">
                Sets the selection start for this text component to
                  the specified position. The new start point is constrained
                  to be at or before the current selection end. It also
                  cannot be set to less than zero, the beginning of the
                  component&apos;s text.
                  If the caller supplies a value for &lt;code&gt;selectionStart&lt;/code&gt;
                  that is out of bounds, the method enforces these constraints
                  silently, and without failure.                
                <param>
                    selectionStart   the start position of the
                      selected text                    
                </param>
                <see>
                    java.awt.TextComponent#getSelectionStart                    
                </see>
                <see>
                    java.awt.TextComponent#setSelectionEnd                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSelectionStart" type="void" line="294">
                <params>
                    <param name="selectionStart" type="int"/>
                </params>
            </method>
            <javadoc line="297">
                Gets the end position of the selected text in
                  this text component.                
                <return>
                    the end position of the selected text                    
                </return>
                <see>
                    java.awt.TextComponent#setSelectionEnd                    
                </see>
                <see>
                    java.awt.TextComponent#getSelectionStart                    
                </see>
            </javadoc>
            <method name="getSelectionEnd" type="int" line="304">
                <declaration name="peer" type="TextComponentPeer" line="305"/>
                <scope line="306"/>
            </method>
            <javadoc line="311">
                Sets the selection end for this text component to
                  the specified position. The new end point is constrained
                  to be at or after the current selection start. It also
                  cannot be set beyond the end of the component&apos;s text.
                  If the caller supplies a value for &lt;code&gt;selectionEnd&lt;/code&gt;
                  that is out of bounds, the method enforces these constraints
                  silently, and without failure.                
                <param>
                    selectionEnd   the end position of the
                      selected text                    
                </param>
                <see>
                    java.awt.TextComponent#getSelectionEnd                    
                </see>
                <see>
                    java.awt.TextComponent#setSelectionStart                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setSelectionEnd" type="void" line="325">
                <params>
                    <param name="selectionEnd" type="int"/>
                </params>
            </method>
            <javadoc line="328">
                Selects the text between the specified start and end positions.
                  &lt;p&gt;
                  This method sets the start and end positions of the
                  selected text, enforcing the restriction that the start position
                  must be greater than or equal to zero.  The end position must be
                  greater than or equal to the start position, and less than or
                  equal to the length of the text component&apos;s text.  The
                  character positions are indexed starting with zero.
                  The length of the selection is
                  &lt;code&gt;endPosition&lt;/code&gt; - &lt;code&gt;startPosition&lt;/code&gt;, so the
                  character at &lt;code&gt;endPosition&lt;/code&gt; is not selected.
                  If the start and end positions of the selected text are equal,
                  all text is deselected.
                  &lt;p&gt;
                  If the caller supplies values that are inconsistent or out of
                  bounds, the method enforces these constraints silently, and
                  without failure. Specifically, if the start position or end
                  position is greater than the length of the text, it is reset to
                  equal the text length. If the start position is less than zero,
                  it is reset to zero, and if the end position is less than the
                  start position, it is reset to the start position.                
                <param>
                    selectionStart the zero-based index of the first
                      character (<code>char</code> value) to be selected                    
                </param>
                <param>
                    selectionEnd the zero-based end position of the
                      text to be selected; the character (<code>char</code> value) at
                      <code>selectionEnd</code> is not selected                    
                </param>
                <see>
                    java.awt.TextComponent#setSelectionStart                    
                </see>
                <see>
                    java.awt.TextComponent#setSelectionEnd                    
                </see>
                <see>
                    java.awt.TextComponent#selectAll                    
                </see>
            </javadoc>
            <method name="select" type="void" line="359">
                <params>
                    <param name="selectionStart" type="int"/>
                    <param name="selectionEnd" type="int"/>
                </params>
                <declaration name="text" type="String" line="360"/>
                <scope line="361"/>
                <scope line="364"/>
                <scope line="367"/>
                <scope line="370"/>
                <declaration name="peer" type="TextComponentPeer" line="375"/>
                <scope line="376"/>
            </method>
            <javadoc line="380">
                Selects all the text in this text component.                
                <see>
                    java.awt.TextComponent#select                    
                </see>
            </javadoc>
            <method name="selectAll" type="void" line="384">
                <declaration name="peer" type="TextComponentPeer" line="387"/>
                <scope line="388"/>
            </method>
            <javadoc line="392">
                Sets the position of the text insertion caret.
                  The caret position is constrained to be between 0
                  and the last character of the text, inclusive.
                  If the passed-in value is greater than this range,
                  the value is set to the last character (or 0 if
                  the &lt;code&gt;TextComponent&lt;/code&gt; contains no text)
                  and no error is returned.  If the passed-in value is
                  less than 0, an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  is thrown.                
                <param>
                    position the position of the text insertion caret                    
                </param>
                <exception>
                    IllegalArgumentException if <code>position</code>
                      is less than zero                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setCaretPosition" type="void" line="407">
                <params>
                    <param name="position" type="int"/>
                </params>
                <scope line="408"/>
                <declaration name="maxposition" type="int" line="411"/>
                <scope line="412"/>
                <declaration name="peer" type="TextComponentPeer" line="415"/>
                <scope line="416"/>
                <scope line="419"/>
            </method>
            <javadoc line="423">
                Returns the position of the text insertion caret.
                  The caret position is constrained to be between 0
                  and the last character of the text, inclusive.
                  If the text or caret have not been set, the default
                  caret position is 0.                
                <return>
                    the position of the text insertion caret                    
                </return>
                <see>
                    #setCaretPosition(int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getCaretPosition" type="int" line="433">
                <declaration name="peer" type="TextComponentPeer" line="434"/>
                <declaration name="position" type="int" line="435"/>
                <scope line="436"/>
                <scope line="439"/>
                <declaration name="maxposition" type="int" line="442"/>
                <scope line="443"/>
            </method>
            <javadoc line="448">
                Adds the specified text event listener to receive text events
                  from this text component.
                  If &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no exception is
                  thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the text event listener                    
                </param>
                <see>
                    #removeTextListener                    
                </see>
                <see>
                    #getTextListeners                    
                </see>
                <see>
                    java.awt.event.TextListener                    
                </see>
            </javadoc>
            <method name="addTextListener" type="void" line="460">
                <params>
                    <param name="l" type="TextListener"/>
                </params>
                <scope line="461"/>
            </method>
            <javadoc line="467">
                Removes the specified text event listener so that it no longer
                  receives text events from this text component
                  If &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no exception is
                  thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l     the text listener                    
                </param>
                <see>
                    #addTextListener                    
                </see>
                <see>
                    #getTextListeners                    
                </see>
                <see>
                    java.awt.event.TextListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeTextListener" type="void" line="480">
                <params>
                    <param name="l" type="TextListener"/>
                </params>
                <scope line="481"/>
            </method>
            <javadoc line="486">
                Returns an array of all the text listeners
                  registered on this text component.                
                <return>
                    all of this text component's <code>TextListener</code>s
                      or an empty array if no text
                      listeners are currently registered                    
                </return>
                <see>
                    #addTextListener                    
                </see>
                <see>
                    #removeTextListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTextListeners" type="TextListener[]" line="496"/>
            <javadoc line="499">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;TextComponent&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;TextComponent&lt;/code&gt; &lt;code&gt;t&lt;/code&gt;
                  for its text listeners with the following code:
                  &lt;pre&gt;TextListener[] tls = (TextListener[])(t.getListeners(TextListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this text component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getTextListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="527">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="528"/>
                <scope line="529"/>
                <scope line="532"/>
            </method>
            <method name="eventEnabled" type="boolean" line="537">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="538">
                    <scope line="539"/>
                </scope>
            </method>
            <javadoc line="546">
                Processes events on this text component. If the event is a
                  &lt;code&gt;TextEvent&lt;/code&gt;, it invokes the &lt;code&gt;processTextEvent&lt;/code&gt;
                  method else it invokes its superclass&apos;s &lt;code&gt;processEvent&lt;/code&gt;.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="processEvent" type="void" line="555">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="556"/>
            </method>
            <javadoc line="562">
                Processes text events occurring on this text component by
                  dispatching them to any registered &lt;code&gt;TextListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  NOTE: This method will not be called unless text events
                  are enabled for this component. This happens when one of the
                  following occurs:
                  &lt;ul&gt;
                  &lt;li&gt;A &lt;code&gt;TextListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addTextListener&lt;/code&gt;
                  &lt;li&gt;Text events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the text event                    
                </param>
                <see>
                    Component#enableEvents                    
                </see>
            </javadoc>
            <method name="processTextEvent" type="void" line="580">
                <params>
                    <param name="e" type="TextEvent"/>
                </params>
                <declaration name="listener" type="TextListener" line="581"/>
                <scope line="582">
                    <declaration name="id" type="int" line="583"/>
                </scope>
            </method>
            <javadoc line="591">
                Returns a string representing the state of this
                  &lt;code&gt;TextComponent&lt;/code&gt;. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this text component                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="600">
                <declaration name="str" type="String" line="601"/>
                <scope line="602"/>
            </method>
            <javadoc line="607">
                Assigns a valid value to the canAccessClipboard instance variable.                
            </javadoc>
            <method name="checkSystemClipboardAccess" type="void" line="610">
                <declaration name="sm" type="SecurityManager" line="612"/>
                <scope line="613">
                    <scope line="614"/>
                    <scope line="617"/>
                </scope>
            </method>
            <declaration name="textComponentSerializedDataVersion" type="int" line="622"/>
            <javadoc line="622">
                The textComponent SerializedDataVersion.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="627">
                Writes default serializable fields to stream.  Writes
                  a list of serializable TextListener(s) as optional data.
                  The non-serializable TextListener(s) are detected and
                  no attempt is made to serialize them.                
                <serialData>
                    Null terminated sequence of zero or more pairs.
                      A pair consists of a String and Object.
                      The String indicates the type of object and
                      is one of the following :
                      textListenerK indicating and TextListener object.                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#textListenerK                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="640">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="peer" type="TextComponentPeer" line="641"/>
                <scope line="642"/>
            </method>
            <javadoc line="651">
                Read the ObjectInputStream, and if it isn&apos;t null,
                  add a listener to receive text events fired by the
                  TextComponent.  Unrecognized keys or values will be
                  ignored.                
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless()</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    #removeTextListener                    
                </see>
                <see>
                    #addTextListener                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="663">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="keyOrNull" type="Object" line="668"/>
                <scope line="669">
                    <declaration name="key" type="String" line="670"/>
                    <scope line="671"/>
                    <scope line="674"/>
                </scope>
            </method>
            <javadoc line="681">
                                
            </javadoc>
            <method name="getIndexAtPoint" type="int" line="683">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="686">
                                
            </javadoc>
            <method name="getCharacterBounds" type="Rectangle" line="688">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="691">
                Gets the AccessibleContext associated with this TextComponent.
                  For text components, the AccessibleContext takes the form of an
                  AccessibleAWTTextComponent.
                  A new AccessibleAWTTextComponent instance is created if necessary.                
                <return>
                    an AccessibleAWTTextComponent that serves as the
                      AccessibleContext of this TextComponent                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="700">
                <scope line="701"/>
            </method>
            <class name="AccessibleAWTTextComponent" line="706">
                <extends class="AccessibleAWTComponent"/>
                <implements interface="AccessibleText"/>
                <implements interface="TextListener"/>
                <javadoc line="706">
                    This class implements accessibility support for the
                      &lt;code&gt;TextComponent&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to text component user-interface
                      elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="714"/>
                <javadoc line="715">
                    Constructs an AccessibleAWTTextComponent.  Adds a listener to track
                      caret change.                    
                </javadoc>
                <method name="AccessibleAWTTextComponent" type="constructor" line="719"/>
                <javadoc line="722">
                    TextListener notification of a text value change.                    
                </javadoc>
                <method name="textValueChanged" type="void" line="725">
                    <params>
                        <param name="textEvent" type="TextEvent"/>
                    </params>
                    <declaration name="cpos" type="Integer" line="726"/>
                </method>
                <javadoc line="729">
                    Gets the state set of the TextComponent.
                      The AccessibleStateSet of an object is composed of a set of
                      unique AccessibleStates.  A change in the AccessibleStateSet
                      of an object will cause a PropertyChangeEvent to be fired
                      for the AccessibleContext.ACCESSIBLE_STATE_PROPERTY property.                    
                    <return>
                        an instance of AccessibleStateSet containing the
                          current state set of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState                        
                    </see>
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="741">
                    <declaration name="states" type="AccessibleStateSet" line="742"/>
                    <scope line="743"/>
                </method>
                <javadoc line="748">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object (AccessibleRole.TEXT)                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="754"/>
                <javadoc line="757">
                    Get the AccessibleText associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleText interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleText" type="AccessibleText" line="764"/>
                <javadoc line="767">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p.                        
                    </return>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="774">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="777">
                    Determines the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid a null rectangle
                      is returned.                    
                    <param>
                        i the index into the String >= 0                        
                    </param>
                    <return>
                        the screen coordinates of the character's bounding box                        
                    </return>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="785">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="788">
                    Returns the number of characters (valid indicies)                    
                    <return>
                        the number of characters >= 0                        
                    </return>
                </javadoc>
                <method name="getCharCount" type="int" line="792"/>
                <javadoc line="795">
                    Returns the zero-based offset of the caret.
                      Note: The character to the right of the caret will have the
                      same index value as the offset (the caret is between
                      two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                </javadoc>
                <method name="getCaretPosition" type="int" line="802"/>
                <javadoc line="805">
                    Returns the AttributeSet for a given character (at a given index).                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="810">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="813">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.
                      Return 0 if the text is empty, or the caret position
                      if no selection.                    
                    <return>
                        the index into the text of the start of the selection >= 0                        
                    </return>
                </javadoc>
                <method name="getSelectionStart" type="int" line="821"/>
                <javadoc line="824">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.
                      Return 0 if the text is empty, or the caret position
                      if no selection.                    
                    <return>
                        the index into teh text of the end of the selection >= 0                        
                    </return>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="832"/>
                <javadoc line="835">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the text, null if no selection                        
                    </return>
                </javadoc>
                <method name="getSelectedText" type="String" line="839">
                    <declaration name="selText" type="String" line="840"/>
                    <scope line="841"/>
                </method>
                <javadoc line="846">
                    Returns the String at a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence,
                          null for an invalid index or part                        
                    </return>
                </javadoc>
                <method name="getAtIndex" type="String" line="854">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="855"/>
                    <scope line="862">
                        <declaration name="s" type="String" line="863"/>
                        <declaration name="words" type="BreakIterator" line="864"/>
                        <declaration name="end" type="int" line="866"/>
                    </scope>
                    <scope line="870">
                        <declaration name="s" type="String" line="871"/>
                        <declaration name="sentence" type="BreakIterator" line="872"/>
                        <declaration name="end" type="int" line="874"/>
                    </scope>
                </method>
                <declaration name="NEXT" type="boolean" line="881"/>
                <declaration name="PREVIOUS" type="boolean" line="882"/>
                <javadoc line="883">
                    Needed to unify forward and backward searching.
                      The method assumes that s is the text assigned to words.                    
                </javadoc>
                <method name="findWordLimit" type="int" line="887">
                    <params>
                        <param name="index" type="int"/>
                        <param name="words" type="BreakIterator"/>
                        <param name="direction" type="boolean"/>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="last" type="int" line="888"/>
                    <declaration name="current" type="int" line="889"/>
                    <scope line="890">
                        <scope line="891">
                            <scope line="892"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="901">
                    Returns the String after a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid
                          index or part                        
                    </return>
                </javadoc>
                <method name="getAfterIndex" type="String" line="909">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="910"/>
                    <scope line="915"/>
                    <scope line="920">
                        <declaration name="s" type="String" line="921"/>
                        <declaration name="words" type="BreakIterator" line="922"/>
                        <declaration name="start" type="int" line="924"/>
                        <scope line="925"/>
                        <declaration name="end" type="int" line="928"/>
                        <scope line="929"/>
                    </scope>
                    <scope line="935">
                        <declaration name="s" type="String" line="936"/>
                        <declaration name="sentence" type="BreakIterator" line="937"/>
                        <declaration name="start" type="int" line="939"/>
                        <scope line="940"/>
                        <declaration name="end" type="int" line="943"/>
                        <scope line="944"/>
                    </scope>
                </method>
                <javadoc line="953">
                    Returns the String before a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid index
                          or part                        
                    </return>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="961">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="962"/>
                    <scope line="967"/>
                    <scope line="972">
                        <declaration name="s" type="String" line="973"/>
                        <declaration name="words" type="BreakIterator" line="974"/>
                        <declaration name="end" type="int" line="976"/>
                        <scope line="977"/>
                        <declaration name="start" type="int" line="980"/>
                        <scope line="981"/>
                    </scope>
                    <scope line="987">
                        <declaration name="s" type="String" line="988"/>
                        <declaration name="sentence" type="BreakIterator" line="989"/>
                        <declaration name="end" type="int" line="991"/>
                        <declaration name="start" type="int" line="993"/>
                        <scope line="994"/>
                    </scope>
                </method>
            </class>
            <declaration name="checkForEnableIM" type="boolean" line="1004"/>
        </class>
    </source>