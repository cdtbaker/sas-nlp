<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <class name="JobAttributes" line="2">
            <implements interface="Cloneable"/>
            <javadoc line="2">
                A set of attributes which control a print job.
                  &lt;p&gt;
                  Instances of this class control the number of copies, default selection,
                  destination, print dialog, file and printer names, page ranges, multiple
                  document handling (including collation), and multi-page imposition (such
                  as duplex) of every print job which uses the instance. Attribute names are
                  compliant with the Internet Printing Protocol (IPP) 1.1 where possible.
                  Attribute values are partially compliant where possible.
                  &lt;p&gt;
                  To use a method which takes an inner class type, pass a reference to
                  one of the constant fields of the inner class. Client code cannot create
                  new instances of the inner class types because none of those classes
                  has a public constructor. For example, to set the print dialog type to
                  the cross-platform, pure Java print dialog, use the following code:
                  &lt;pre&gt;
                  import java.awt.JobAttributes;
                  public class PureJavaPrintDialogExample {
                  public void setPureJavaPrintDialog(JobAttributes jobAttributes) {
                  jobAttributes.setDialog(JobAttributes.DialogType.COMMON);
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Every IPP attribute which supports an &lt;i&gt;attributeName&lt;/i&gt;-default value
                  has a corresponding &lt;code&gt;set&lt;i&gt;attributeName&lt;/i&gt;ToDefault&lt;/code&gt; method.
                  Default value fields are not provided.                
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <class name="DefaultSelectionType" line="33">
                <extends class="AttributeValue"/>
                <javadoc line="33">
                    A type-safe enumeration of possible default selection states.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="I_ALL" type="int" line="38"/>
                <declaration name="I_RANGE" type="int" line="39"/>
                <declaration name="I_SELECTION" type="int" line="40"/>
                <declaration name="NAMES" type="String" line="41"/>
                <declaration name="ALL" type="DefaultSelectionType" line="42"/>
                <javadoc line="42">
                    The &lt;code&gt;DefaultSelectionType&lt;/code&gt; instance to use for
                      specifying that all pages of the job should be printed.                    
                </javadoc>
                <declaration name="RANGE" type="DefaultSelectionType" line="47"/>
                <javadoc line="47">
                    The &lt;code&gt;DefaultSelectionType&lt;/code&gt; instance to use for
                      specifying that a range of pages of the job should be printed.                    
                </javadoc>
                <declaration name="SELECTION" type="DefaultSelectionType" line="52"/>
                <javadoc line="52">
                    The &lt;code&gt;DefaultSelectionType&lt;/code&gt; instance to use for
                      specifying that the current selection should be printed.                    
                </javadoc>
                <method name="DefaultSelectionType" type="constructor" line="57">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DestinationType" line="61">
                <extends class="AttributeValue"/>
                <javadoc line="61">
                    A type-safe enumeration of possible job destinations.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="I_FILE" type="int" line="66"/>
                <declaration name="I_PRINTER" type="int" line="67"/>
                <declaration name="NAMES" type="String" line="68"/>
                <declaration name="FILE" type="DestinationType" line="69"/>
                <javadoc line="69">
                    The &lt;code&gt;DestinationType&lt;/code&gt; instance to use for
                      specifying print to file.                    
                </javadoc>
                <declaration name="PRINTER" type="DestinationType" line="74"/>
                <javadoc line="74">
                    The &lt;code&gt;DestinationType&lt;/code&gt; instance to use for
                      specifying print to printer.                    
                </javadoc>
                <method name="DestinationType" type="constructor" line="79">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DialogType" line="83">
                <extends class="AttributeValue"/>
                <javadoc line="83">
                    A type-safe enumeration of possible dialogs to display to the user.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="I_COMMON" type="int" line="88"/>
                <declaration name="I_NATIVE" type="int" line="89"/>
                <declaration name="I_NONE" type="int" line="90"/>
                <declaration name="NAMES" type="String" line="91"/>
                <declaration name="COMMON" type="DialogType" line="92"/>
                <javadoc line="92">
                    The &lt;code&gt;DialogType&lt;/code&gt; instance to use for
                      specifying the cross-platform, pure Java print dialog.                    
                </javadoc>
                <declaration name="NATIVE" type="DialogType" line="97"/>
                <javadoc line="97">
                    The &lt;code&gt;DialogType&lt;/code&gt; instance to use for
                      specifying the platform&apos;s native print dialog.                    
                </javadoc>
                <declaration name="NONE" type="DialogType" line="102"/>
                <javadoc line="102">
                    The &lt;code&gt;DialogType&lt;/code&gt; instance to use for
                      specifying no print dialog.                    
                </javadoc>
                <method name="DialogType" type="constructor" line="107">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
            </class>
            <class name="MultipleDocumentHandlingType" line="111">
                <extends class="AttributeValue"/>
                <javadoc line="111">
                    A type-safe enumeration of possible multiple copy handling states.
                      It is used to control how the sheets of multiple copies of a single
                      document are collated.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="I_SEPARATE_DOCUMENTS_COLLATED_COPIES" type="int" line="118"/>
                <declaration name="I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES" type="int" line="119"/>
                <declaration name="NAMES" type="String" line="120"/>
                <declaration name="SEPARATE_DOCUMENTS_COLLATED_COPIES" type="MultipleDocumentHandlingType" line="121"/>
                <javadoc line="121">
                    The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying
                      that the job should be divided into separate, collated copies.                    
                </javadoc>
                <declaration name="SEPARATE_DOCUMENTS_UNCOLLATED_COPIES" type="MultipleDocumentHandlingType" line="126"/>
                <javadoc line="126">
                    The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying
                      that the job should be divided into separate, uncollated copies.                    
                </javadoc>
                <method name="MultipleDocumentHandlingType" type="constructor" line="131">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
            </class>
            <class name="SidesType" line="135">
                <extends class="AttributeValue"/>
                <javadoc line="135">
                    A type-safe enumeration of possible multi-page impositions. These
                      impositions are in compliance with IPP 1.1.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="I_ONE_SIDED" type="int" line="141"/>
                <declaration name="I_TWO_SIDED_LONG_EDGE" type="int" line="142"/>
                <declaration name="I_TWO_SIDED_SHORT_EDGE" type="int" line="143"/>
                <declaration name="NAMES" type="String" line="144"/>
                <declaration name="ONE_SIDED" type="SidesType" line="145"/>
                <javadoc line="145">
                    The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that
                      consecutive job pages should be printed upon the same side of
                      consecutive media sheets.                    
                </javadoc>
                <declaration name="TWO_SIDED_LONG_EDGE" type="SidesType" line="151"/>
                <javadoc line="151">
                    The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that
                      consecutive job pages should be printed upon front and back sides
                      of consecutive media sheets, such that the orientation of each pair
                      of pages on the medium would be correct for the reader as if for
                      binding on the long edge.                    
                </javadoc>
                <declaration name="TWO_SIDED_SHORT_EDGE" type="SidesType" line="159"/>
                <javadoc line="159">
                    The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that
                      consecutive job pages should be printed upon front and back sides
                      of consecutive media sheets, such that the orientation of each pair
                      of pages on the medium would be correct for the reader as if for
                      binding on the short edge.                    
                </javadoc>
                <method name="SidesType" type="constructor" line="167">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="copies" type="int" line="171"/>
            <declaration name="defaultSelection" type="DefaultSelectionType" line="172"/>
            <declaration name="destination" type="DestinationType" line="173"/>
            <declaration name="dialog" type="DialogType" line="174"/>
            <declaration name="fileName" type="String" line="175"/>
            <declaration name="fromPage" type="int" line="176"/>
            <declaration name="maxPage" type="int" line="177"/>
            <declaration name="minPage" type="int" line="178"/>
            <declaration name="multipleDocumentHandling" type="MultipleDocumentHandlingType" line="179"/>
            <declaration name="pageRanges" type="int[][]" line="180"/>
            <declaration name="prFirst" type="int" line="181"/>
            <declaration name="prLast" type="int" line="182"/>
            <declaration name="printer" type="String" line="183"/>
            <declaration name="sides" type="SidesType" line="184"/>
            <declaration name="toPage" type="int" line="185"/>
            <javadoc line="186">
                Constructs a &lt;code&gt;JobAttributes&lt;/code&gt; instance with default
                  values for every attribute.  The dialog defaults to
                  &lt;code&gt;DialogType.NATIVE&lt;/code&gt;.  Min page defaults to
                  &lt;code&gt;1&lt;/code&gt;.  Max page defaults to &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
                  Destination defaults to &lt;code&gt;DestinationType.PRINTER&lt;/code&gt;.
                  Selection defaults to &lt;code&gt;DefaultSelectionType.ALL&lt;/code&gt;.
                  Number of copies defaults to &lt;code&gt;1&lt;/code&gt;. Multiple document handling defaults
                  to &lt;code&gt;MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES&lt;/code&gt;.
                  Sides defaults to &lt;code&gt;SidesType.ONE_SIDED&lt;/code&gt;. File name defaults
                  to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="JobAttributes" type="constructor" line="198"/>
            <javadoc line="208">
                Constructs a &lt;code&gt;JobAttributes&lt;/code&gt; instance which is a copy
                  of the supplied &lt;code&gt;JobAttributes&lt;/code&gt;.                
                <param>
                    obj the <code>JobAttributes</code> to copy                    
                </param>
            </javadoc>
            <method name="JobAttributes" type="constructor" line="213">
                <params>
                    <param name="obj" type="JobAttributes"/>
                </params>
            </method>
            <javadoc line="216">
                Constructs a &lt;code&gt;JobAttributes&lt;/code&gt; instance with the
                  specified values for every attribute.                
                <param>
                    copies an integer greater than 0                    
                </param>
                <param>
                    defaultSelection <code>DefaultSelectionType.ALL</code>,
                      <code>DefaultSelectionType.RANGE</code>, or
                      <code>DefaultSelectionType.SELECTION</code>                    
                </param>
                <param>
                    destination <code>DesintationType.FILE</code> or
                      <code>DesintationType.PRINTER</code>                    
                </param>
                <param>
                    dialog <code>DialogType.COMMON</code>,
                      <code>DialogType.NATIVE</code>, or
                      <code>DialogType.NONE</code>                    
                </param>
                <param>
                    fileName the possibly <code>null</code> file name                    
                </param>
                <param>
                    maxPage an integer greater than zero and greater than or equal
                      to <i>minPage</i>                    
                </param>
                <param>
                    minPage an integer greater than zero and less than or equal
                      to <i>maxPage</i>                    
                </param>
                <param>
                    multipleDocumentHandling<code>MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES</code> or
                      <code>MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES</code>                    
                </param>
                <param>
                    pageRanges an array of integer arrays of two elements; an array
                      is interpreted as a range spanning all pages including and
                      between the specified pages; ranges must be in ascending
                      order and must not overlap; specified page numbers cannot be
                      less than <i>minPage</i> nor greater than <i>maxPage</i>;
                      for example:
                      <pre>
                      (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 },
                      new int[] { 15, 19 } }),
                      </pre>
                      specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that
                      (<code>new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }</code>),
                      is an invalid set of page ranges because the two ranges
                      overlap                    
                </param>
                <param>
                    printer the possibly <code>null</code> printer name                    
                </param>
                <param>
                    sides <code>SidesType.ONE_SIDED</code>,
                      <code>SidesType.TWO_SIDED_LONG_EDGE</code>, or
                      <code>SidesType.TWO_SIDED_SHORT_EDGE</code>                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated                    
                </throws>
            </javadoc>
            <method name="JobAttributes" type="constructor" line="256">
                <params>
                    <param name="copies" type="int"/>
                    <param name="defaultSelection" type="DefaultSelectionType"/>
                    <param name="destination" type="DestinationType"/>
                    <param name="dialog" type="DialogType"/>
                    <param name="fileName" type="String"/>
                    <param name="maxPage" type="int"/>
                    <param name="minPage" type="int"/>
                    <param name="multipleDocumentHandling" type="MultipleDocumentHandlingType"/>
                    <param name="pageRanges" type="int[][]"/>
                    <param name="printer" type="String"/>
                    <param name="sides" type="SidesType"/>
                </params>
            </method>
            <javadoc line="269">
                Creates and returns a copy of this &lt;code&gt;JobAttributes&lt;/code&gt;.                
                <return>
                    the newly created copy; it is safe to cast this Object into
                      a <code>JobAttributes</code>                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="274">
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="282">
                Sets all of the attributes of this &lt;code&gt;JobAttributes&lt;/code&gt; to
                  the same values as the attributes of obj.                
                <param>
                    obj the <code>JobAttributes</code> to copy                    
                </param>
            </javadoc>
            <method name="set" type="void" line="287">
                <params>
                    <param name="obj" type="JobAttributes"/>
                </params>
            </method>
            <javadoc line="304">
                Returns the number of copies the application should render for jobs
                  using these attributes. This attribute is updated to the value chosen
                  by the user.                
                <return>
                    an integer greater than 0.                    
                </return>
            </javadoc>
            <method name="getCopies" type="int" line="310"/>
            <javadoc line="313">
                Specifies the number of copies the application should render for jobs
                  using these attributes. Not specifying this attribute is equivalent to
                  specifying &lt;code&gt;1&lt;/code&gt;.                
                <param>
                    copies an integer greater than 0                    
                </param>
                <throws>
                    IllegalArgumentException if <code>copies</code> is less than
                      or equal to 0                    
                </throws>
            </javadoc>
            <method name="setCopies" type="void" line="321">
                <params>
                    <param name="copies" type="int"/>
                </params>
                <scope line="322"/>
            </method>
            <javadoc line="327">
                Sets the number of copies the application should render for jobs using
                  these attributes to the default. The default number of copies is 1.                
            </javadoc>
            <method name="setCopiesToDefault" type="void" line="331"/>
            <javadoc line="334">
                Specifies whether, for jobs using these attributes, the application
                  should print all pages, the range specified by the return value of
                  &lt;code&gt;getPageRanges&lt;/code&gt;, or the current selection. This attribute
                  is updated to the value chosen by the user.                
                <return>
                    DefaultSelectionType.ALL, DefaultSelectionType.RANGE, or
                      DefaultSelectionType.SELECTION                    
                </return>
            </javadoc>
            <method name="getDefaultSelection" type="DefaultSelectionType" line="342"/>
            <javadoc line="345">
                Specifies whether, for jobs using these attributes, the application
                  should print all pages, the range specified by the return value of
                  &lt;code&gt;getPageRanges&lt;/code&gt;, or the current selection. Not specifying
                  this attribute is equivalent to specifying DefaultSelectionType.ALL.                
                <param>
                    defaultSelection DefaultSelectionType.ALL,
                      DefaultSelectionType.RANGE, or DefaultSelectionType.SELECTION.                    
                </param>
                <throws>
                    IllegalArgumentException if defaultSelection is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="setDefaultSelection" type="void" line="354">
                <params>
                    <param name="defaultSelection" type="DefaultSelectionType"/>
                </params>
                <scope line="355"/>
            </method>
            <javadoc line="360">
                Specifies whether output will be to a printer or a file for jobs using
                  these attributes. This attribute is updated to the value chosen by the
                  user.                
                <return>
                    DesintationType.FILE or DesintationType.PRINTER                    
                </return>
            </javadoc>
            <method name="getDestination" type="DestinationType" line="366"/>
            <javadoc line="369">
                Specifies whether output will be to a printer or a file for jobs using
                  these attributes. Not specifying this attribute is equivalent to
                  specifying DesintationType.PRINTER.                
                <param>
                    destination DesintationType.FILE or DesintationType.PRINTER.                    
                </param>
                <throws>
                    IllegalArgumentException if destination is null.                    
                </throws>
            </javadoc>
            <method name="setDestination" type="void" line="376">
                <params>
                    <param name="destination" type="DestinationType"/>
                </params>
                <scope line="377"/>
            </method>
            <javadoc line="382">
                Returns whether, for jobs using these attributes, the user should see
                  a print dialog in which to modify the print settings, and which type of
                  print dialog should be displayed. DialogType.COMMON denotes a cross-
                  platform, pure Java print dialog. DialogType.NATIVE denotes the
                  platform&apos;s native print dialog. If a platform does not support a native
                  print dialog, the pure Java print dialog is displayed instead.
                  DialogType.NONE specifies no print dialog (i.e., background printing).
                  This attribute cannot be modified by, and is not subject to any
                  limitations of, the implementation or the target printer.                
                <return>
                    <code>DialogType.COMMON</code>, <code>DialogType.NATIVE</code>, or
                      <code>DialogType.NONE</code>                    
                </return>
            </javadoc>
            <method name="getDialog" type="DialogType" line="395"/>
            <javadoc line="398">
                Specifies whether, for jobs using these attributes, the user should see
                  a print dialog in which to modify the print settings, and which type of
                  print dialog should be displayed. DialogType.COMMON denotes a cross-
                  platform, pure Java print dialog. DialogType.NATIVE denotes the
                  platform&apos;s native print dialog. If a platform does not support a native
                  print dialog, the pure Java print dialog is displayed instead.
                  DialogType.NONE specifies no print dialog (i.e., background printing).
                  Not specifying this attribute is equivalent to specifying
                  DialogType.NATIVE.                
                <param>
                    dialog DialogType.COMMON, DialogType.NATIVE, or
                      DialogType.NONE.                    
                </param>
                <throws>
                    IllegalArgumentException if dialog is null.                    
                </throws>
            </javadoc>
            <method name="setDialog" type="void" line="412">
                <params>
                    <param name="dialog" type="DialogType"/>
                </params>
                <scope line="413"/>
            </method>
            <javadoc line="418">
                Specifies the file name for the output file for jobs using these
                  attributes. This attribute is updated to the value chosen by the user.                
                <return>
                    the possibly <code>null</code> file name                    
                </return>
            </javadoc>
            <method name="getFileName" type="String" line="423"/>
            <javadoc line="426">
                Specifies the file name for the output file for jobs using these
                  attributes. Default is platform-dependent and implementation-defined.                
                <param>
                    fileName the possibly null file name.                    
                </param>
            </javadoc>
            <method name="setFileName" type="void" line="431">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="434">
                Returns, for jobs using these attributes, the first page to be
                  printed, if a range of pages is to be printed. This attribute is
                  updated to the value chosen by the user. An application should ignore
                  this attribute on output, unless the return value of the &lt;code&gt;
                  getDefaultSelection&lt;/code&gt; method is DefaultSelectionType.RANGE. An
                  application should honor the return value of &lt;code&gt;getPageRanges&lt;/code&gt;
                  over the return value of this method, if possible.                
                <return>
                    an integer greater than zero and less than or equal to
                      <i>toPage</i> and greater than or equal to <i>minPage</i> and
                      less than or equal to <i>maxPage</i>.                    
                </return>
            </javadoc>
            <method name="getFromPage" type="int" line="446">
                <scope line="447"/>
                <scope line="450"/>
                <scope line="453"/>
                <scope line="456"/>
            </method>
            <javadoc line="460">
                Specifies, for jobs using these attributes, the first page to be
                  printed, if a range of pages is to be printed. If this attribute is not
                  specified, then the values from the pageRanges attribute are used. If
                  pageRanges and either or both of fromPage and toPage are specified,
                  pageRanges takes precedence. Specifying none of pageRanges, fromPage,
                  or toPage is equivalent to calling
                  setPageRanges(new int[][] { new int[] { &lt;i&gt;minPage&lt;/i&gt; } });                
                <param>
                    fromPage an integer greater than zero and less than or equal to
                      <i>toPage</i> and greater than or equal to <i>minPage</i> and
                      less than or equal to <i>maxPage</i>.                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated.                    
                </throws>
            </javadoc>
            <method name="setFromPage" type="void" line="474">
                <params>
                    <param name="fromPage" type="int"/>
                </params>
                <scope line="475"/>
            </method>
            <javadoc line="480">
                Specifies the maximum value the user can specify as the last page to
                  be printed for jobs using these attributes. This attribute cannot be
                  modified by, and is not subject to any limitations of, the
                  implementation or the target printer.                
                <return>
                    an integer greater than zero and greater than or equal
                      to <i>minPage</i>.                    
                </return>
            </javadoc>
            <method name="getMaxPage" type="int" line="488"/>
            <javadoc line="491">
                Specifies the maximum value the user can specify as the last page to
                  be printed for jobs using these attributes. Not specifying this
                  attribute is equivalent to specifying &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                
                <param>
                    maxPage an integer greater than zero and greater than or equal
                      to <i>minPage</i>                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated                    
                </throws>
            </javadoc>
            <method name="setMaxPage" type="void" line="500">
                <params>
                    <param name="maxPage" type="int"/>
                </params>
                <scope line="501"/>
            </method>
            <javadoc line="506">
                Specifies the minimum value the user can specify as the first page to
                  be printed for jobs using these attributes. This attribute cannot be
                  modified by, and is not subject to any limitations of, the
                  implementation or the target printer.                
                <return>
                    an integer greater than zero and less than or equal
                      to <i>maxPage</i>.                    
                </return>
            </javadoc>
            <method name="getMinPage" type="int" line="514"/>
            <javadoc line="517">
                Specifies the minimum value the user can specify as the first page to
                  be printed for jobs using these attributes. Not specifying this
                  attribute is equivalent to specifying &lt;code&gt;1&lt;/code&gt;.                
                <param>
                    minPage an integer greater than zero and less than or equal
                      to <i>maxPage</i>.                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated.                    
                </throws>
            </javadoc>
            <method name="setMinPage" type="void" line="526">
                <params>
                    <param name="minPage" type="int"/>
                </params>
                <scope line="527"/>
            </method>
            <javadoc line="532">
                Specifies the handling of multiple copies, including collation, for
                  jobs using these attributes. This attribute is updated to the value
                  chosen by the user.                
                <returnMultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES>
                    or
                      MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.                    
                </returnMultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES>
            </javadoc>
            <method name="getMultipleDocumentHandling" type="MultipleDocumentHandlingType" line="539"/>
            <javadoc line="542">
                Specifies the handling of multiple copies, including collation, for
                  jobs using these attributes. Not specifying this attribute is equivalent
                  to specifying
                  MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.                
                <param>
                    multipleDocumentHandlingMultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES or
                      MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.                    
                </param>
                <throws>
                    IllegalArgumentException if multipleDocumentHandling is null.                    
                </throws>
            </javadoc>
            <method name="setMultipleDocumentHandling" type="void" line="551">
                <params>
                    <param name="multipleDocumentHandling" type="MultipleDocumentHandlingType"/>
                </params>
                <scope line="552"/>
            </method>
            <javadoc line="557">
                Sets the handling of multiple copies, including collation, for jobs
                  using these attributes to the default. The default handling is
                  MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.                
            </javadoc>
            <method name="setMultipleDocumentHandlingToDefault" type="void" line="562"/>
            <javadoc line="565">
                Specifies, for jobs using these attributes, the ranges of pages to be
                  printed, if a range of pages is to be printed. All range numbers are
                  inclusive. This attribute is updated to the value chosen by the user.
                  An application should ignore this attribute on output, unless the
                  return value of the &lt;code&gt;getDefaultSelection&lt;/code&gt; method is
                  DefaultSelectionType.RANGE.                
                <return>
                    an array of integer arrays of 2 elements. An array
                      is interpreted as a range spanning all pages including and
                      between the specified pages. Ranges must be in ascending
                      order and must not overlap. Specified page numbers cannot be
                      less than <i>minPage</i> nor greater than <i>maxPage</i>.
                      For example:
                      (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 },
                      new int[] { 15, 19 } }),
                      specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19.                    
                </return>
            </javadoc>
            <method name="getPageRanges" type="int[][]" line="582">
                <scope line="583">
                    <declaration name="copy" type="int[][]" line="584"/>
                    <scope line="585"/>
                </scope>
                <scope line="591">
                    <declaration name="fromPage" type="int" line="592"/>
                    <declaration name="toPage" type="int" line="593"/>
                </scope>
                <scope line="596">
                    <declaration name="minPage" type="int" line="597"/>
                </scope>
            </method>
            <javadoc line="601">
                Specifies, for jobs using these attributes, the ranges of pages to be
                  printed, if a range of pages is to be printed. All range numbers are
                  inclusive. If this attribute is not specified, then the values from the
                  fromPage and toPages attributes are used. If pageRanges and either or
                  both of fromPage and toPage are specified, pageRanges takes precedence.
                  Specifying none of pageRanges, fromPage, or toPage is equivalent to
                  calling setPageRanges(new int[][] { new int[] { &lt;i&gt;minPage&lt;/i&gt;,
                  &lt;i&gt;minPage&lt;/i&gt; } });                
                <param>
                    pageRanges an array of integer arrays of 2 elements. An array
                      is interpreted as a range spanning all pages including and
                      between the specified pages. Ranges must be in ascending
                      order and must not overlap. Specified page numbers cannot be
                      less than <i>minPage</i> nor greater than <i>maxPage</i>.
                      For example:
                      (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 },
                      new int[] { 15, 19 } }),
                      specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that
                      (new int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }),
                      is an invalid set of page ranges because the two ranges
                      overlap.                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated.                    
                </throws>
            </javadoc>
            <method name="setPageRanges" type="void" line="625">
                <params>
                    <param name="pageRanges" type="int[][]"/>
                </params>
                <declaration name="xcp" type="String" line="626"/>
                <declaration name="first" type="int" line="627"/>
                <declaration name="last" type="int" line="628"/>
                <scope line="629"/>
                <scope line="632">
                    <scope line="633"/>
                    <scope line="637"/>
                </scope>
                <scope line="641"/>
                <declaration name="copy" type="int[][]" line="644"/>
                <scope line="645"/>
            </method>
            <javadoc line="653">
                Returns the destination printer for jobs using these attributes. This
                  attribute is updated to the value chosen by the user.                
                <return>
                    the possibly null printer name.                    
                </return>
            </javadoc>
            <method name="getPrinter" type="String" line="658"/>
            <javadoc line="661">
                Specifies the destination printer for jobs using these attributes.
                  Default is platform-dependent and implementation-defined.                
                <param>
                    printer the possibly null printer name.                    
                </param>
            </javadoc>
            <method name="setPrinter" type="void" line="666">
                <params>
                    <param name="printer" type="String"/>
                </params>
            </method>
            <javadoc line="669">
                Returns how consecutive pages should be imposed upon the sides of the
                  print medium for jobs using these attributes. SidesType.ONE_SIDED
                  imposes each consecutive page upon the same side of consecutive media
                  sheets. This imposition is sometimes called &lt;i&gt;simplex&lt;/i&gt;.
                  SidesType.TWO_SIDED_LONG_EDGE imposes each consecutive pair of pages
                  upon front and back sides of consecutive media sheets, such that the
                  orientation of each pair of pages on the medium would be correct for
                  the reader as if for binding on the long edge. This imposition is
                  sometimes called &lt;i&gt;duplex&lt;/i&gt;. SidesType.TWO_SIDED_SHORT_EDGE imposes
                  each consecutive pair of pages upon front and back sides of consecutive
                  media sheets, such that the orientation of each pair of pages on the
                  medium would be correct for the reader as if for binding on the short
                  edge. This imposition is sometimes called &lt;i&gt;tumble&lt;/i&gt;. This attribute
                  is updated to the value chosen by the user.                
                <return>
                    SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or
                      SidesType.TWO_SIDED_SHORT_EDGE.                    
                </return>
            </javadoc>
            <method name="getSides" type="SidesType" line="687"/>
            <javadoc line="690">
                Specifies how consecutive pages should be imposed upon the sides of the
                  print medium for jobs using these attributes. SidesType.ONE_SIDED
                  imposes each consecutive page upon the same side of consecutive media
                  sheets. This imposition is sometimes called &lt;i&gt;simplex&lt;/i&gt;.
                  SidesType.TWO_SIDED_LONG_EDGE imposes each consecutive pair of pages
                  upon front and back sides of consecutive media sheets, such that the
                  orientation of each pair of pages on the medium would be correct for
                  the reader as if for binding on the long edge. This imposition is
                  sometimes called &lt;i&gt;duplex&lt;/i&gt;. SidesType.TWO_SIDED_SHORT_EDGE imposes
                  each consecutive pair of pages upon front and back sides of consecutive
                  media sheets, such that the orientation of each pair of pages on the
                  medium would be correct for the reader as if for binding on the short
                  edge. This imposition is sometimes called &lt;i&gt;tumble&lt;/i&gt;. Not specifying
                  this attribute is equivalent to specifying SidesType.ONE_SIDED.                
                <param>
                    sides SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or
                      SidesType.TWO_SIDED_SHORT_EDGE.                    
                </param>
                <throws>
                    IllegalArgumentException if sides is null.                    
                </throws>
            </javadoc>
            <method name="setSides" type="void" line="709">
                <params>
                    <param name="sides" type="SidesType"/>
                </params>
                <scope line="710"/>
            </method>
            <javadoc line="715">
                Sets how consecutive pages should be imposed upon the sides of the
                  print medium for jobs using these attributes to the default. The
                  default imposition is SidesType.ONE_SIDED.                
            </javadoc>
            <method name="setSidesToDefault" type="void" line="720"/>
            <javadoc line="723">
                Returns, for jobs using these attributes, the last page (inclusive)
                  to be printed, if a range of pages is to be printed. This attribute is
                  updated to the value chosen by the user. An application should ignore
                  this attribute on output, unless the return value of the &lt;code&gt;
                  getDefaultSelection&lt;/code&gt; method is DefaultSelectionType.RANGE. An
                  application should honor the return value of &lt;code&gt;getPageRanges&lt;/code&gt;
                  over the return value of this method, if possible.                
                <return>
                    an integer greater than zero and greater than or equal
                      to <i>toPage</i> and greater than or equal to <i>minPage</i>
                      and less than or equal to <i>maxPage</i>.                    
                </return>
            </javadoc>
            <method name="getToPage" type="int" line="735">
                <scope line="736"/>
                <scope line="739"/>
                <scope line="742"/>
                <scope line="745"/>
            </method>
            <javadoc line="749">
                Specifies, for jobs using these attributes, the last page (inclusive)
                  to be printed, if a range of pages is to be printed.
                  If this attribute is not specified, then the values from the pageRanges
                  attribute are used. If pageRanges and either or both of fromPage and
                  toPage are specified, pageRanges takes precedence. Specifying none of
                  pageRanges, fromPage, or toPage is equivalent to calling
                  setPageRanges(new int[][] { new int[] { &lt;i&gt;minPage&lt;/i&gt; } });                
                <param>
                    toPage an integer greater than zero and greater than or equal
                      to <i>fromPage</i> and greater than or equal to <i>minPage</i>
                      and less than or equal to <i>maxPage</i>.                    
                </param>
                <throws>
                    IllegalArgumentException if one or more of the above
                      conditions is violated.                    
                </throws>
            </javadoc>
            <method name="setToPage" type="void" line="763">
                <params>
                    <param name="toPage" type="int"/>
                </params>
                <scope line="764"/>
            </method>
            <javadoc line="769">
                Determines whether two JobAttributes are equal to each other.
                  &lt;p&gt;
                  Two JobAttributes are equal if and only if each of their attributes are
                  equal. Attributes of enumeration type are equal if and only if the
                  fields refer to the same unique enumeration object. A set of page
                  ranges is equal if and only if the sets are of equal length, each range
                  enumerates the same pages, and the ranges are in the same order.                
                <param>
                    obj the object whose equality will be checked.                    
                </param>
                <return>
                    whether obj is equal to this JobAttribute according to the
                      above criteria.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="781">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="782"/>
                <declaration name="rhs" type="JobAttributes" line="785"/>
                <scope line="786">
                    <scope line="787"/>
                </scope>
                <scope line="791">
                    <scope line="792"/>
                </scope>
                <scope line="796">
                    <scope line="797"/>
                </scope>
                <scope line="801">
                    <scope line="802"/>
                    <scope line="805">
                        <scope line="806"/>
                    </scope>
                </scope>
                <scope line="811">
                    <scope line="812"/>
                </scope>
                <scope line="816">
                    <scope line="817"/>
                </scope>
            </method>
            <javadoc line="823">
                Returns a hash code value for this JobAttributes.                
                <return>
                    the hash code.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="827">
                <declaration name="rest" type="int" line="828"/>
                <scope line="829">
                    <declaration name="sum" type="int" line="830"/>
                    <scope line="831"/>
                </scope>
                <scope line="836"/>
                <scope line="839"/>
            </method>
            <javadoc line="844">
                Returns a string representation of this JobAttributes.                
                <return>
                    the string representation.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="848">
                <declaration name="pageRanges" type="int[][]" line="849"/>
                <declaration name="prStr" type="String" line="850"/>
                <declaration name="first" type="boolean" line="851"/>
                <scope line="852">
                    <scope line="853"/>
                    <scope line="856"/>
                </scope>
            </method>
        </class>
    </source>