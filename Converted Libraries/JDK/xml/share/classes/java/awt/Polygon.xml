<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="sun.awt.geom.Crossings"/>
        <import package="java.util.Arrays"/>
        <class name="Polygon" line="34">
            <comment line="113">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="118">
                Default length for xpoints and ypoints.                
            </comment>
            <comment line="223">
                Calculates the bounding box of the points passed to the constructor.
                 Sets &lt;code&gt;bounds&lt;code&gt; to the result.
                 @param xpoints[] array of &lt;i&gt;x&lt;i&gt; coordinates
                 @param ypoints[] array of &lt;i&gt;y&lt;i&gt; coordinates
                 @param npoints the total number of points                
            </comment>
            <comment line="249">
                Resizes the bounding box to accomodate the specified coordinates.
                 @param x,&amp;nbsp;y the specified coordinates                
            </comment>
            <implements interface="Shape"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="34">
                The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a
                  closed, two-dimensional region within a coordinate space. This
                  region is bounded by an arbitrary number of line segments, each of
                  which is one side of the polygon. Internally, a polygon
                  comprises of a list of {@code (x,y)}coordinate pairs, where each pair defines a &lt;i&gt;vertex&lt;/i&gt; of the
                  polygon, and two successive pairs are the endpoints of a
                  line that is a side of the polygon. The first and final
                  pairs of {@code (x,y)} points are joined by a line segment
                  that closes the polygon.  This &lt;code&gt;Polygon&lt;/code&gt; is defined with
                  an even-odd winding rule.  See{@link java.awt.geom.PathIterator#WIND_EVEN_ODD WIND_EVEN_ODD}for a definition of the even-odd winding rule.
                  This class&apos;s hit-testing methods, which include the
                  &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;intersects&lt;/code&gt; and &lt;code&gt;inside&lt;/code&gt;
                  methods, use the &lt;i&gt;insideness&lt;/i&gt; definition described in the{@link Shape} class comments.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    Shape                    
                </see>
                <author>
                    Herb Jellinek                    
                </author>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="npoints" type="int" line="60"/>
            <javadoc line="60">
                The total number of points.  The value of &lt;code&gt;npoints&lt;/code&gt;
                  represents the number of valid points in this &lt;code&gt;Polygon&lt;/code&gt;
                  and might be less than the number of elements in{@link #xpoints xpoints} or {@link #ypoints ypoints}.
                  This value can be NULL.                
                <serial>
                                        
                </serial>
                <see>
                    #addPoint(int,int)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="xpoints" type="int" line="73"/>
            <javadoc line="73">
                The array of X coordinates.  The number of elements in
                  this array might be more than the number of X coordinates
                  in this &lt;code&gt;Polygon&lt;/code&gt;.  The extra elements allow new points
                  to be added to this &lt;code&gt;Polygon&lt;/code&gt; without re-creating this
                  array.  The value of {@link #npoints npoints} is equal to the
                  number of valid points in this &lt;code&gt;Polygon&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #addPoint(int,int)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="ypoints" type="int" line="87"/>
            <javadoc line="87">
                The array of Y coordinates.  The number of elements in
                  this array might be more than the number of Y coordinates
                  in this &lt;code&gt;Polygon&lt;/code&gt;.  The extra elements allow new points
                  to be added to this &lt;code&gt;Polygon&lt;/code&gt; without re-creating this
                  array.  The value of &lt;code&gt;npoints&lt;/code&gt; is equal to the
                  number of valid points in this &lt;code&gt;Polygon&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #addPoint(int,int)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="bounds" type="Rectangle" line="101"/>
            <javadoc line="101">
                The bounds of this {@code Polygon}.
                  This value can be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getBoundingBox()                    
                </see>
                <see>
                    #getBounds()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="115"/>
            <declaration name="MIN_LENGTH" type="int" line="120"/>
            <javadoc line="122">
                Creates an empty polygon.                
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="Polygon" type="constructor" line="126"/>
            <javadoc line="131">
                Constructs and initializes a &lt;code&gt;Polygon&lt;/code&gt; from the specified
                  parameters.                
                <param>
                    xpoints an array of X coordinates                    
                </param>
                <param>
                    ypoints an array of Y coordinates                    
                </param>
                <param>
                    npoints the total number of points in the
                      <code>Polygon</code>                    
                </param>
                <exception>
                    NegativeArraySizeException if the value of
                      <code>npoints</code> is negative.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if <code>npoints</code> is
                      greater than the length of <code>xpoints</code>
                      or the length of <code>ypoints</code>.                    
                </exception>
                <exception>
                    NullPointerException if <code>xpoints</code> or
                      <code>ypoints</code> is <code>null</code>.                    
                </exception>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="Polygon" type="constructor" line="147">
                <params>
                    <param name="xpoints" type="int"/>
                    <param name="ypoints" type="int"/>
                    <param name="npoints" type="int"/>
                </params>
                <comment line="148">
                    Fix 4489009: should throw IndexOutofBoundsException instead                    
                </comment>
                <comment line="149">
                    of OutofMemoryException if npoints is huge and &gt; {x,y}points.length                    
                </comment>
                <comment line="154">
                    Fix 6191114: should throw NegativeArraySizeException with                    
                </comment>
                <comment line="155">
                    negative npoints                    
                </comment>
                <comment line="159">
                    Fix 6343431: Applet compatibility problems if arrays are not                    
                </comment>
                <comment line="160">
                    exactly npoints in length                    
                </comment>
                <scope line="150"/>
                <scope line="156"/>
            </method>
            <javadoc line="166">
                Resets this &lt;code&gt;Polygon&lt;/code&gt; object to an empty polygon.
                  The coordinate arrays and the data in them are left untouched
                  but the number of points is reset to zero to mark the old
                  vertex data as invalid and to start accumulating new vertex
                  data at the beginning.
                  All internally-cached data relating to the old vertices
                  are discarded.
                  Note that since the coordinate arrays from before the reset
                  are reused, creating a new empty &lt;code&gt;Polygon&lt;/code&gt; might
                  be more memory efficient than resetting the current one if
                  the number of vertices in the new polygon data is significantly
                  smaller than the number of vertices in the data from before the
                  reset.                
                <see>
                    java.awt.Polygon#invalidate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="reset" type="void" line="183"/>
            <javadoc line="188">
                Invalidates or flushes any internally-cached data that depends
                  on the vertex coordinates of this &lt;code&gt;Polygon&lt;/code&gt;.
                  This method should be called after any direct manipulation
                  of the coordinates in the &lt;code&gt;xpoints&lt;/code&gt; or
                  &lt;code&gt;ypoints&lt;/code&gt; arrays to avoid inconsistent results
                  from methods such as &lt;code&gt;getBounds&lt;/code&gt; or &lt;code&gt;contains&lt;/code&gt;
                  that might cache data from earlier computations relating to
                  the vertex coordinates.                
                <see>
                    java.awt.Polygon#getBounds                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="invalidate" type="void" line="200"/>
            <javadoc line="204">
                Translates the vertices of the &lt;code&gt;Polygon&lt;/code&gt; by
                  &lt;code&gt;deltaX&lt;/code&gt; along the x axis and by
                  &lt;code&gt;deltaY&lt;/code&gt; along the y axis.                
                <param>
                    deltaX the amount to translate along the X axis                    
                </param>
                <param>
                    deltaY the amount to translate along the Y axis                    
                </param>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="translate" type="void" line="212">
                <params>
                    <param name="deltaX" type="int"/>
                    <param name="deltaY" type="int"/>
                </params>
                <scope line="213"/>
                <scope line="217"/>
            </method>
            <method name="calculateBounds" type="void" line="229">
                <params>
                    <param name="xpoints" type="int"/>
                    <param name="ypoints" type="int"/>
                    <param name="npoints" type="int"/>
                </params>
                <declaration name="boundsMinX" type="int" line="230"/>
                <declaration name="boundsMinY" type="int" line="231"/>
                <declaration name="boundsMaxX" type="int" line="232"/>
                <declaration name="boundsMaxY" type="int" line="233"/>
                <scope line="235">
                    <declaration name="x" type="int" line="236"/>
                    <declaration name="y" type="int" line="239"/>
                </scope>
            </method>
            <method name="updateBounds" type="void" line="252">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="259">
                    bounds.x = bounds.x;                    
                </comment>
                <comment line="268">
                    bounds.y = bounds.y;                    
                </comment>
                <scope line="253"/>
                <scope line="257"/>
                <scope line="262"/>
                <scope line="266"/>
            </method>
            <javadoc line="272">
                Appends the specified coordinates to this &lt;code&gt;Polygon&lt;/code&gt;.
                  &lt;p&gt;
                  If an operation that calculates the bounding box of this
                  &lt;code&gt;Polygon&lt;/code&gt; has already been performed, such as
                  &lt;code&gt;getBounds&lt;/code&gt; or &lt;code&gt;contains&lt;/code&gt;, then this
                  method updates the bounding box.                
                <param>
                    x the specified X coordinate                    
                </param>
                <param>
                    y the specified Y coordinate                    
                </param>
                <see>
                    java.awt.Polygon#getBounds                    
                </see>
                <see>
                    java.awt.Polygon#contains                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="addPoint" type="void" line="285">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="288">
                    Make sure that newLength will be greater than MIN_LENGTH and                    
                </comment>
                <comment line="289">
                    aligned to the power of 2                    
                </comment>
                <scope line="286">
                    <declaration name="newLength" type="int" line="287"/>
                    <scope line="290"/>
                    <scope line="292"/>
                </scope>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Gets the bounding box of this &lt;code&gt;Polygon&lt;/code&gt;.
                  The bounding box is the smallest {@link Rectangle} whose
                  sides are parallel to the x and y axes of the
                  coordinate space, and can completely contain the &lt;code&gt;Polygon&lt;/code&gt;.                
                <return>
                    a <code>Rectangle</code> that defines the bounds of this
                      <code>Polygon</code>.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="316"/>
            <javadoc line="320">
                Returns the bounds of this &lt;code&gt;Polygon&lt;/code&gt;.                
                <return>
                    the bounds of this <code>Polygon</code>.                    
                </return>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>getBounds()</code>.                    
                </deprecated>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="getBoundingBox" type="Rectangle" line="328">
                <scope line="329"/>
                <scope line="332"/>
            </method>
            <javadoc line="338">
                Determines whether the specified {@link Point} is inside this
                  &lt;code&gt;Polygon&lt;/code&gt;.                
                <param>
                    p the specified <code>Point</code> to be tested                    
                </param>
                <return>
                    <code>true</code> if the <code>Polygon</code> contains the
                      <code>Point</code>; <code>false</code> otherwise.                    
                </return>
                <see>
                    #contains(double,double)                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="347">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="351">
                Determines whether the specified coordinates are inside this
                  &lt;code&gt;Polygon&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    x the specified X coordinate to be tested                    
                </param>
                <param>
                    y the specified Y coordinate to be tested                    
                </param>
                <return>
                    {@code true} if this {@code Polygon} contains
                      the specified coordinates {@code (x,y)};{@code false} otherwise.                    
                </return>
                <see>
                    #contains(double,double)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="363">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="367">
                Determines whether the specified coordinates are contained in this
                  &lt;code&gt;Polygon&lt;/code&gt;.                
                <param>
                    x the specified X coordinate to be tested                    
                </param>
                <param>
                    y the specified Y coordinate to be tested                    
                </param>
                <return>
                    {@code true} if this {@code Polygon} contains
                      the specified coordinates {@code (x,y)};{@code false} otherwise.                    
                </return>
                <see>
                    #contains(double,double)                    
                </see>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>contains(int, int)</code>.                    
                </deprecated>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="inside" type="boolean" line="381">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="385">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="389"/>
            <javadoc line="393">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="397">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="407">
                    Walk the edges of the polygon                    
                </comment>
                <scope line="398"/>
                <declaration name="hits" type="int" line="401"/>
                <declaration name="lastx" type="int" line="403"/>
                <declaration name="lasty" type="int" line="404"/>
                <declaration name="curx" type="int" line="405"/>
                <scope line="408">
                    <scope line="412"/>
                    <declaration name="leftx" type="int" line="416"/>
                    <scope line="417">
                        <scope line="418"/>
                    </scope>
                    <scope line="422">
                        <scope line="423"/>
                    </scope>
                    <declaration name="test1" type="double" line="429"/>
                    <scope line="430">
                        <scope line="431"/>
                        <scope line="434"/>
                    </scope>
                    <scope line="440">
                        <scope line="441"/>
                        <scope line="444"/>
                    </scope>
                    <scope line="452"/>
                </scope>
            </method>
            <method name="getCrossings" type="Crossings" line="462">
                <params>
                    <param name="xlo" type="double"/>
                    <param name="ylo" type="double"/>
                    <param name="xhi" type="double"/>
                    <param name="yhi" type="double"/>
                </params>
                <comment line="468">
                    Walk the edges of the polygon                    
                </comment>
                <declaration name="cross" type="Crossings" line="463"/>
                <declaration name="lastx" type="int" line="464"/>
                <declaration name="lasty" type="int" line="465"/>
                <declaration name="curx" type="int" line="466"/>
                <scope line="469">
                    <scope line="472"/>
                </scope>
            </method>
            <javadoc line="482">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="486">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="490">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="494">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="495"/>
                <declaration name="cross" type="Crossings" line="499"/>
            </method>
            <javadoc line="503">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="507">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="511">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="515">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="516"/>
                <declaration name="cross" type="Crossings" line="520"/>
            </method>
            <javadoc line="524">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="528">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="532">
                Returns an iterator object that iterates along the boundary of this
                  &lt;code&gt;Polygon&lt;/code&gt; and provides access to the geometry
                  of the outline of this &lt;code&gt;Polygon&lt;/code&gt;.  An optional{@link AffineTransform} can be specified so that the coordinates
                  returned in the iteration are transformed accordingly.                
                <param>
                    at an optional <code>AffineTransform</code> to be applied to the
                      coordinates as they are returned in the iteration, or
                      <code>null</code> if untransformed coordinates are desired                    
                </param>
                <return>
                    a {@link PathIterator} object that provides access to the
                      geometry of this <code>Polygon</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="545">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="549">
                Returns an iterator object that iterates along the boundary of
                  the &lt;code&gt;Shape&lt;/code&gt; and provides access to the geometry of the
                  outline of the &lt;code&gt;Shape&lt;/code&gt;.  Only SEG_MOVETO, SEG_LINETO, and
                  SEG_CLOSE point types are returned by the iterator.
                  Since polygons are already flat, the &lt;code&gt;flatness&lt;/code&gt; parameter
                  is ignored.  An optional &lt;code&gt;AffineTransform&lt;/code&gt; can be specified
                  in which case the coordinates returned in the iteration are transformed
                  accordingly.                
                <param>
                    at an optional <code>AffineTransform</code> to be applied to the
                      coordinates as they are returned in the iteration, or
                      <code>null</code> if untransformed coordinates are desired                    
                </param>
                <param>
                    flatness the maximum amount that the control points
                      for a given curve can vary from colinear before a subdivided
                      curve is replaced by a straight line connecting the
                      endpoints.  Since polygons are already flat the
                      <code>flatness</code> parameter is ignored.                    
                </param>
                <return>
                    a <code>PathIterator</code> object that provides access to the
                      <code>Shape</code> object's geometry.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="570">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <class name="PolygonPathIterator" line="574">
                <implements interface="PathIterator"/>
                <declaration name="poly" type="Polygon" line="575"/>
                <declaration name="transform" type="AffineTransform" line="576"/>
                <declaration name="index" type="int" line="577"/>
                <method name="PolygonPathIterator" type="constructor" line="579">
                    <params>
                        <param name="pg" type="Polygon"/>
                        <param name="at" type="AffineTransform"/>
                    </params>
                    <comment line="583">
                        Prevent a spurious SEG_CLOSE segment                        
                    </comment>
                    <scope line="582"/>
                </method>
                <javadoc line="588">
                    Returns the winding rule for determining the interior of the
                      path.                    
                    <return>
                        an integer representing the current winding rule.                        
                    </return>
                    <see>
                        PathIterator#WIND_NON_ZERO                        
                    </see>
                </javadoc>
                <method name="getWindingRule" type="int" line="594"/>
                <javadoc line="598">
                    Tests if there are more points to read.                    
                    <return>
                        <code>true</code> if there are more points to read;
                          <code>false</code> otherwise.                        
                    </return>
                </javadoc>
                <method name="isDone" type="boolean" line="603"/>
                <javadoc line="607">
                    Moves the iterator forwards, along the primary direction of
                      traversal, to the next segment of the path when there are
                      more points in that direction.                    
                </javadoc>
                <method name="next" type="void" line="612"/>
                <javadoc line="616">
                    Returns the coordinates and type of the current path segment in
                      the iteration.
                      The return value is the path segment type:
                      SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                      A &lt;code&gt;float&lt;/code&gt; array of length 2 must be passed in and
                      can be used to store the coordinates of the point(s).
                      Each point is stored as a pair of &lt;code&gt;float&lt;/code&gt; x,&amp;nbsp;y
                      coordinates.  SEG_MOVETO and SEG_LINETO types return one
                      point, and SEG_CLOSE does not return any points.                    
                    <param>
                        coords a <code>float</code> array that specifies the
                          coordinates of the point(s)                        
                    </param>
                    <return>
                        an integer representing the type and coordinates of the
                          current path segment.                        
                    </return>
                    <see>
                        PathIterator#SEG_MOVETO                        
                    </see>
                    <see>
                        PathIterator#SEG_LINETO                        
                    </see>
                    <see>
                        PathIterator#SEG_CLOSE                        
                    </see>
                </javadoc>
                <method name="currentSegment" type="int" line="634">
                    <params>
                        <param name="coords" type="float[]"/>
                    </params>
                    <scope line="635"/>
                    <scope line="640"/>
                </method>
                <javadoc line="646">
                    Returns the coordinates and type of the current path segment in
                      the iteration.
                      The return value is the path segment type:
                      SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                      A &lt;code&gt;double&lt;/code&gt; array of length 2 must be passed in and
                      can be used to store the coordinates of the point(s).
                      Each point is stored as a pair of &lt;code&gt;double&lt;/code&gt; x,&amp;nbsp;y
                      coordinates.
                      SEG_MOVETO and SEG_LINETO types return one point,
                      and SEG_CLOSE does not return any points.                    
                    <param>
                        coords a <code>double</code> array that specifies the
                          coordinates of the point(s)                        
                    </param>
                    <return>
                        an integer representing the type and coordinates of the
                          current path segment.                        
                    </return>
                    <see>
                        PathIterator#SEG_MOVETO                        
                    </see>
                    <see>
                        PathIterator#SEG_LINETO                        
                    </see>
                    <see>
                        PathIterator#SEG_CLOSE                        
                    </see>
                </javadoc>
                <method name="currentSegment" type="int" line="665">
                    <params>
                        <param name="coords" type="double[]"/>
                    </params>
                    <scope line="666"/>
                    <scope line="671"/>
                </method>
            </class>
        </class>
    </source>