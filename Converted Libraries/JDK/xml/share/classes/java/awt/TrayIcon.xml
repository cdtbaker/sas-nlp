<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.Point"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.event"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.AWTEventMulticaster"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.PopupMenu"/>
        <import package="java.awt.Image"/>
        <import package="java.util.EventListener"/>
        <import package="java.awt.peer.TrayIconPeer"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.HeadlessToolkit"/>
        <import package="java.util.EventObject"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <class name="TrayIcon" line="19">
            <javadoc line="19">
                A &lt;code&gt;TrayIcon&lt;/code&gt; object represents a tray icon that can be
                  added to the {@link SystemTray system tray}. A
                  &lt;code&gt;TrayIcon&lt;/code&gt; can have a tooltip (text), an image, a popup
                  menu, and a set of listeners associated with it.
                  &lt;p&gt;A &lt;code&gt;TrayIcon&lt;/code&gt; can generate various {@link MouseEventMouseEvents} and supports adding corresponding listeners to receive
                  notification of these events.  &lt;code&gt;TrayIcon&lt;/code&gt; processes some
                  of the events by itself.  For example, by default, when the
                  right-mouse click is performed on the &lt;code&gt;TrayIcon&lt;/code&gt; it
                  displays the specified popup menu.  When the mouse hovers
                  over the &lt;code&gt;TrayIcon&lt;/code&gt; the tooltip is displayed.
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When the &lt;code&gt;MouseEvent&lt;/code&gt; is
                  dispatched to its registered listeners its &lt;code&gt;component&lt;/code&gt;
                  property will be set to &lt;code&gt;null&lt;/code&gt;.  (See {@link java.awt.event.ComponentEvent#getComponent}) The
                  &lt;code&gt;source&lt;/code&gt; property will be set to this
                  &lt;code&gt;TrayIcon&lt;/code&gt;. (See {@link java.util.EventObject#getSource})
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; A well-behaved {@link TrayIcon} implementation
                  will assign different gestures to showing a popup menu and
                  selecting a tray icon.
                  &lt;p&gt;A &lt;code&gt;TrayIcon&lt;/code&gt; can generate an {@link ActionEventActionEvent}.  On some platforms, this occurs when the user selects
                  the tray icon using either the mouse or keyboard.
                  &lt;p&gt;If a SecurityManager is installed, the AWTPermission{@code accessSystemTray} must be granted in order to create
                  a {@code TrayIcon}. Otherwise the constructor will throw a
                  SecurityException.
                  &lt;p&gt; See the {@link SystemTray} class overview for an example on how
                  to use the &lt;code&gt;TrayIcon&lt;/code&gt; API.                
                <since>
                    1.6                    
                </since>
                <see>
                    SystemTray#add                    
                </see>
                <see>
                    java.awt.event.ComponentEvent#getComponent                    
                </see>
                <see>
                    java.util.EventObject#getSource                    
                </see>
                <author>
                    Bino George                    
                </author>
                <author>
                    Denis Mikhalkin                    
                </author>
                <author>
                    Sharon Zakhour                    
                </author>
                <author>
                    Anton Tarasov                    
                </author>
            </javadoc>
            <declaration name="image" type="Image" line="55"/>
            <declaration name="tooltip" type="String" line="56"/>
            <declaration name="popup" type="PopupMenu" line="57"/>
            <declaration name="autosize" type="boolean" line="58"/>
            <declaration name="id" type="int" line="59"/>
            <declaration name="actionCommand" type="String" line="60"/>
            <declaration name="peer" type="TrayIconPeer" line="61"/>
            <declaration name="mouseListener" type="MouseListener" line="62"/>
            <declaration name="mouseMotionListener" type="MouseMotionListener" line="63"/>
            <declaration name="actionListener" type="ActionListener" line="64"/>
            <declaration name="acc" type="AccessControlContext" line="65"/>
            <method name="getAccessControlContext" type="AccessControlContext" line="66">
                <scope line="67"/>
            </method>
            <scope line="72">
                <scope line="74"/>
            </scope>
            <method name="TrayIcon" type="constructor" line="78">
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="88">
                Creates a &lt;code&gt;TrayIcon&lt;/code&gt; with the specified image.                
                <param>
                    image the <code>Image</code> to be used                    
                </param>
                <throws>
                    IllegalArgumentException if <code>image</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    UnsupportedOperationException if the system tray isn't
                      supported by the current platform                    
                </throws>
                <throws>
                    HeadlessException if{@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityException if {@code accessSystemTray} permission
                      is not granted                    
                </throws>
                <see>
                    SystemTray#add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image,String,PopupMenu)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image,String)                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="TrayIcon" type="constructor" line="104">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Creates a &lt;code&gt;TrayIcon&lt;/code&gt; with the specified image and
                  tooltip text.                
                <param>
                    image the <code>Image</code> to be used                    
                </param>
                <param>
                    tooltip the string to be used as tooltip text; if the
                      value is <code>null</code> no tooltip is shown                    
                </param>
                <throws>
                    IllegalArgumentException if <code>image</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    UnsupportedOperationException if the system tray isn't
                      supported by the current platform                    
                </throws>
                <throws>
                    HeadlessException if{@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityException if {@code accessSystemTray} permission
                      is not granted                    
                </throws>
                <see>
                    SystemTray#add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image,String,PopupMenu)                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="TrayIcon" type="constructor" line="130">
                <params>
                    <param name="image" type="Image"/>
                    <param name="tooltip" type="String"/>
                </params>
            </method>
            <javadoc line="134">
                Creates a &lt;code&gt;TrayIcon&lt;/code&gt; with the specified image,
                  tooltip and popup menu.                
                <param>
                    image the <code>Image</code> to be used                    
                </param>
                <param>
                    tooltip the string to be used as tooltip text; if the
                      value is <code>null</code> no tooltip is shown                    
                </param>
                <param>
                    popup the menu to be used for the tray icon's popup
                      menu; if the value is <code>null</code> no popup menu is shown                    
                </param>
                <throws>
                    IllegalArgumentException if <code>image</code> is <code>null</code>                    
                </throws>
                <throws>
                    UnsupportedOperationException if the system tray isn't
                      supported by the current platform                    
                </throws>
                <throws>
                    HeadlessException if{@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityException if {@code accessSystemTray} permission
                      is not granted                    
                </throws>
                <see>
                    SystemTray#add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image,String)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image)                    
                </see>
                <see>
                    PopupMenu                    
                </see>
                <see>
                    MouseListener                    
                </see>
                <see>
                    #addMouseListener(MouseListener)                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="TrayIcon" type="constructor" line="157">
                <params>
                    <param name="image" type="Image"/>
                    <param name="tooltip" type="String"/>
                    <param name="popup" type="PopupMenu"/>
                </params>
            </method>
            <javadoc line="161">
                Sets the image for this &lt;code&gt;TrayIcon&lt;/code&gt;.  The previous
                  tray icon image is discarded without calling the {@link java.awt.Image#flush} method &amp;#151; you will need to call it
                  manually.
                  &lt;p&gt; If the image represents an animated image, it will be
                  animated automatically.
                  &lt;p&gt; See the {@link #setImageAutoSize(boolean)} property for
                  details on the size of the displayed image.
                  &lt;p&gt; Calling this method with the same image that is currently
                  being used has no effect.                
                <throws>
                    NullPointerException if <code>image</code> is <code>null</code>                    
                </throws>
                <param>
                    image the non-null <code>Image</code> to be used                    
                </param>
                <see>
                    #getImage                    
                </see>
                <see>
                    Image                    
                </see>
                <see>
                    SystemTray#add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon#TrayIcon(Image,String)                    
                </see>
            </javadoc>
            <method name="setImage" type="void" line="178">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <scope line="179"/>
                <declaration name="peer" type="TrayIconPeer" line="183"/>
                <scope line="184"/>
            </method>
            <javadoc line="188">
                Returns the current image used for this &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    the image                    
                </return>
                <see>
                    #setImage(Image)                    
                </see>
                <see>
                    Image                    
                </see>
            </javadoc>
            <method name="getImage" type="Image" line="194"/>
            <javadoc line="197">
                Sets the popup menu for this &lt;code&gt;TrayIcon&lt;/code&gt;.  If
                  &lt;code&gt;popup&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no popup menu will be
                  associated with this &lt;code&gt;TrayIcon&lt;/code&gt;.
                  &lt;p&gt;Note that this &lt;code&gt;popup&lt;/code&gt; must not be added to any
                  parent before or after it is set on the tray icon.  If you add
                  it to some parent, the &lt;code&gt;popup&lt;/code&gt; may be removed from
                  that parent.
                  &lt;p&gt;The {@code popup} can be set on one {@code TrayIcon} only.
                  Setting the same popup on multiple {@code TrayIcon}s will cause
                  an {@code IllegalArgumentException}.
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some platforms may not support
                  showing the user-specified popup menu component when the user
                  right-clicks the tray icon.  In this situation, either no menu
                  will be displayed or, on some systems, a native version of the
                  menu may be displayed.                
                <throws>
                    IllegalArgumentException if the {@code popup} is already
                      set for another {@code TrayIcon}                    
                </throws>
                <param>
                    popup a <code>PopupMenu</code> or <code>null</code> to
                      remove any popup menu                    
                </param>
                <see>
                    #getPopupMenu                    
                </see>
            </javadoc>
            <method name="setPopupMenu" type="void" line="219">
                <params>
                    <param name="popup" type="PopupMenu"/>
                </params>
                <scope line="220"/>
                <scope line="223">
                    <scope line="224">
                        <scope line="225"/>
                    </scope>
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Returns the popup menu associated with this &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    the popup menu or <code>null</code> if none exists                    
                </return>
                <see>
                    #setPopupMenu(PopupMenu)                    
                </see>
            </javadoc>
            <method name="getPopupMenu" type="PopupMenu" line="241"/>
            <javadoc line="244">
                Sets the tooltip string for this &lt;code&gt;TrayIcon&lt;/code&gt;. The
                  tooltip is displayed automatically when the mouse hovers over
                  the icon.  Setting the tooltip to &lt;code&gt;null&lt;/code&gt; removes any
                  tooltip text.
                  When displayed, the tooltip string may be truncated on some platforms;
                  the number of characters that may be displayed is platform-dependent.                
                <param>
                    tooltip the string for the tooltip; if the value is
                      <code>null</code> no tooltip is shown                    
                </param>
                <see>
                    #getToolTip                    
                </see>
            </javadoc>
            <method name="setToolTip" type="void" line="255">
                <params>
                    <param name="tooltip" type="String"/>
                </params>
                <declaration name="peer" type="TrayIconPeer" line="257"/>
                <scope line="258"/>
            </method>
            <javadoc line="262">
                Returns the tooltip string associated with this
                  &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    the tooltip string or <code>null</code> if none exists                    
                </return>
                <see>
                    #setToolTip(String)                    
                </see>
            </javadoc>
            <method name="getToolTip" type="String" line="268"/>
            <javadoc line="271">
                Sets the auto-size property.  Auto-size determines whether the
                  tray image is automatically sized to fit the space allocated
                  for the image on the tray.  By default, the auto-size property
                  is set to &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt; If auto-size is &lt;code&gt;false&lt;/code&gt;, and the image size
                  doesn&apos;t match the tray icon space, the image is painted as-is
                  inside that space &amp;#151; if larger than the allocated space, it will
                  be cropped.
                  &lt;p&gt; If auto-size is &lt;code&gt;true&lt;/code&gt;, the image is stretched or shrunk to
                  fit the tray icon space.                
                <param>
                    autosize <code>true</code> to auto-size the image,
                      <code>false</code> otherwise                    
                </param>
                <see>
                    #isImageAutoSize                    
                </see>
            </javadoc>
            <method name="setImageAutoSize" type="void" line="286">
                <params>
                    <param name="autosize" type="boolean"/>
                </params>
                <declaration name="peer" type="TrayIconPeer" line="288"/>
                <scope line="289"/>
            </method>
            <javadoc line="293">
                Returns the value of the auto-size property.                
                <return>
                    <code>true</code> if the image will be auto-sized,
                      <code>false</code> otherwise                    
                </return>
                <see>
                    #setImageAutoSize(boolean)                    
                </see>
            </javadoc>
            <method name="isImageAutoSize" type="boolean" line="299"/>
            <javadoc line="302">
                Adds the specified mouse listener to receive mouse events from
                  this &lt;code&gt;TrayIcon&lt;/code&gt;.  Calling this method with a
                  &lt;code&gt;null&lt;/code&gt; value has no effect.
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: The {@code MouseEvent}&apos;s coordinates (received
                  from the {@code TrayIcon}) are relative to the screen, not the{@code TrayIcon}.
                  &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;The &lt;code&gt;MOUSE_ENTERED&lt;/code&gt; and
                  &lt;code&gt;MOUSE_EXITED&lt;/code&gt; mouse events are not supported.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
                <see>
                    #removeMouseListener(MouseListener)                    
                </see>
                <see>
                    #getMouseListeners                    
                </see>
            </javadoc>
            <method name="addMouseListener" type="void" line="318">
                <params>
                    <param name="listener" type="MouseListener"/>
                </params>
                <scope line="319"/>
            </method>
            <javadoc line="324">
                Removes the specified mouse listener.  Calling this method with
                  &lt;code&gt;null&lt;/code&gt; or an invalid value has no effect.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener   the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
                <see>
                    #addMouseListener(MouseListener)                    
                </see>
                <see>
                    #getMouseListeners                    
                </see>
            </javadoc>
            <method name="removeMouseListener" type="void" line="335">
                <params>
                    <param name="listener" type="MouseListener"/>
                </params>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Returns an array of all the mouse listeners
                  registered on this &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    all of the <code>MouseListeners</code> registered on
                      this <code>TrayIcon</code> or an empty array if no mouse
                      listeners are currently registered                    
                </return>
                <see>
                    #addMouseListener(MouseListener)                    
                </see>
                <see>
                    #removeMouseListener(MouseListener)                    
                </see>
                <see>
                    java.awt.event.MouseListener                    
                </see>
            </javadoc>
            <method name="getMouseListeners" type="MouseListener[]" line="351"/>
            <javadoc line="354">
                Adds the specified mouse listener to receive mouse-motion
                  events from this &lt;code&gt;TrayIcon&lt;/code&gt;.  Calling this method
                  with a &lt;code&gt;null&lt;/code&gt; value has no effect.
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: The {@code MouseEvent}&apos;s coordinates (received
                  from the {@code TrayIcon}) are relative to the screen, not the{@code TrayIcon}.
                  &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;The &lt;code&gt;MOUSE_DRAGGED&lt;/code&gt; mouse event is not supported.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener   the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
                <see>
                    #removeMouseMotionListener(MouseMotionListener)                    
                </see>
                <see>
                    #getMouseMotionListeners                    
                </see>
            </javadoc>
            <method name="addMouseMotionListener" type="void" line="369">
                <params>
                    <param name="listener" type="MouseMotionListener"/>
                </params>
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Removes the specified mouse-motion listener.  Calling this method with
                  &lt;code&gt;null&lt;/code&gt; or an invalid value has no effect.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener   the mouse listener                    
                </param>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
                <see>
                    #addMouseMotionListener(MouseMotionListener)                    
                </see>
                <see>
                    #getMouseMotionListeners                    
                </see>
            </javadoc>
            <method name="removeMouseMotionListener" type="void" line="386">
                <params>
                    <param name="listener" type="MouseMotionListener"/>
                </params>
                <scope line="387"/>
            </method>
            <javadoc line="392">
                Returns an array of all the mouse-motion listeners
                  registered on this &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    all of the <code>MouseInputListeners</code> registered on
                      this <code>TrayIcon</code> or an empty array if no mouse
                      listeners are currently registered                    
                </return>
                <see>
                    #addMouseMotionListener(MouseMotionListener)                    
                </see>
                <see>
                    #removeMouseMotionListener(MouseMotionListener)                    
                </see>
                <see>
                    java.awt.event.MouseMotionListener                    
                </see>
            </javadoc>
            <method name="getMouseMotionListeners" type="MouseMotionListener[]" line="402"/>
            <javadoc line="405">
                Returns the command name of the action event fired by this tray icon.                
                <return>
                    the action command name, or <code>null</code> if none exists                    
                </return>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    #setActionCommand(String)                    
                </see>
            </javadoc>
            <method name="getActionCommand" type="String" line="411"/>
            <javadoc line="414">
                Sets the command name for the action event fired by this tray
                  icon.  By default, this action command is set to
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    command  a string used to set the tray icon's
                      action command.                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    #getActionCommand                    
                </see>
            </javadoc>
            <method name="setActionCommand" type="void" line="424">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="427">
                Adds the specified action listener to receive
                  &lt;code&gt;ActionEvent&lt;/code&gt;s from this &lt;code&gt;TrayIcon&lt;/code&gt;.
                  Action events usually occur when a user selects the tray icon,
                  using either the mouse or keyboard.  The conditions in which
                  action events are generated are platform-dependent.
                  &lt;p&gt;Calling this method with a &lt;code&gt;null&lt;/code&gt; value has no
                  effect.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener the action listener                    
                </param>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    #setActionCommand(String)                    
                </see>
            </javadoc>
            <method name="addActionListener" type="void" line="443">
                <params>
                    <param name="listener" type="ActionListener"/>
                </params>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                Removes the specified action listener.  Calling this method with
                  &lt;code&gt;null&lt;/code&gt; or an invalid value has no effect.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    listener   the action listener                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    #setActionCommand(String)                    
                </see>
            </javadoc>
            <method name="removeActionListener" type="void" line="461">
                <params>
                    <param name="listener" type="ActionListener"/>
                </params>
                <scope line="462"/>
            </method>
            <javadoc line="467">
                Returns an array of all the action listeners
                  registered on this &lt;code&gt;TrayIcon&lt;/code&gt;.                
                <return>
                    all of the <code>ActionListeners</code> registered on
                      this <code>TrayIcon</code> or an empty array if no action
                      listeners are currently registered                    
                </return>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    #removeActionListener(ActionListener)                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="477"/>
            <declaration name="MessageType" type="enum" line="480"/>
            <javadoc line="480">
                The message type determines which icon will be displayed in the
                  caption of the message, and a possible system sound a message
                  may generate upon showing.                
                <see>
                    TrayIcon                    
                </see>
                <see>
                    TrayIcon#displayMessage(String,String,MessageType)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="488"/>
            <javadoc line="501">
                Displays a popup message near the tray icon.  The message will
                  disappear after a time or if the user clicks on it.  Clicking
                  on the message may trigger an {@code ActionEvent}.
                  &lt;p&gt;Either the caption or the text may be &lt;code&gt;null&lt;/code&gt;, but an
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if both are
                  &lt;code&gt;null&lt;/code&gt;.
                  When displayed, the caption or text strings may be truncated on
                  some platforms; the number of characters that may be displayed is
                  platform-dependent.
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some platforms may not support
                  showing a message.                
                <param>
                    caption the caption displayed above the text, usually in
                      bold; may be <code>null</code>                    
                </param>
                <param>
                    text the text displayed for the particular message; may be
                      <code>null</code>                    
                </param>
                <param>
                    messageType an enum indicating the message type                    
                </param>
                <throws>
                    NullPointerException if both <code>caption</code>
                      and <code>text</code> are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="displayMessage" type="void" line="521">
                <params>
                    <param name="caption" type="String"/>
                    <param name="text" type="String"/>
                    <param name="messageType" type="MessageType"/>
                </params>
                <scope line="522"/>
                <declaration name="peer" type="TrayIconPeer" line="525"/>
                <scope line="526"/>
            </method>
            <javadoc line="530">
                Returns the size, in pixels, of the space that the tray icon
                  occupies in the system tray.  For the tray icon that is not yet
                  added to the system tray, the returned size is equal to the
                  result of the {@link SystemTray#getTrayIconSize}.                
                <return>
                    the size of the tray icon, in pixels                    
                </return>
                <see>
                    TrayIcon#setImageAutoSize(boolean)                    
                </see>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    TrayIcon#getSize()                    
                </see>
            </javadoc>
            <method name="getSize" type="Dimension" line="540"/>
            <method name="addNotify" type="void" line="543">
                <scope line="544">
                    <scope line="545">
                        <declaration name="toolkit" type="Toolkit" line="546"/>
                        <scope line="547"/>
                        <scope line="550"/>
                    </scope>
                </scope>
            </method>
            <method name="removeNotify" type="void" line="557">
                <declaration name="p" type="TrayIconPeer" line="558"/>
                <scope line="559"/>
                <scope line="563"/>
            </method>
            <method name="setID" type="void" line="567">
                <params>
                    <param name="id" type="int"/>
                </params>
            </method>
            <method name="getID" type="int" line="570"/>
            <method name="dispatchEvent" type="void" line="573">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
            </method>
            <method name="processEvent" type="void" line="578">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="579"/>
                <scope line="593"/>
            </method>
            <method name="processMouseEvent" type="void" line="597">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="listener" type="MouseListener" line="598"/>
                <scope line="599">
                    <declaration name="id" type="int" line="600"/>
                </scope>
            </method>
            <method name="processMouseMotionEvent" type="void" line="616">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="listener" type="MouseMotionListener" line="617"/>
                <scope line="618"/>
            </method>
            <method name="processActionEvent" type="void" line="622">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listener" type="ActionListener" line="623"/>
                <scope line="624"/>
            </method>
            <method name="initIDs" type="void" line="628"/>
        </class>
    </source>