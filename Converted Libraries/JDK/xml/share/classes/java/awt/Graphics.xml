<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.io"/>
        <import package="java.lang"/>
        <import package="java.util"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <class name="Graphics" line="7">
            <javadoc line="7">
                The &lt;code&gt;Graphics&lt;/code&gt; class is the abstract base class for
                  all graphics contexts that allow an application to draw onto
                  components that are realized on various devices, as well as
                  onto off-screen images.
                  &lt;p&gt;
                  A &lt;code&gt;Graphics&lt;/code&gt; object encapsulates state information needed
                  for the basic rendering operations that Java supports.  This
                  state information includes the following properties:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;Component&lt;/code&gt; object on which to draw.
                  &lt;li&gt;A translation origin for rendering and clipping coordinates.
                  &lt;li&gt;The current clip.
                  &lt;li&gt;The current color.
                  &lt;li&gt;The current font.
                  &lt;li&gt;The current logical pixel operation function (XOR or Paint).
                  &lt;li&gt;The current XOR alternation color
                  (see {@link Graphics#setXORMode}).
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Coordinates are infinitely thin and lie between the pixels of the
                  output device.
                  Operations that draw the outline of a figure operate by traversing
                  an infinitely thin path between pixels with a pixel-sized pen that hangs
                  down and to the right of the anchor point on the path.
                  Operations that fill a figure operate by filling the interior
                  of that infinitely thin path.
                  Operations that render horizontal text render the ascending
                  portion of character glyphs entirely above the baseline coordinate.
                  &lt;p&gt;
                  The graphics pen hangs down and to the right from the path it traverses.
                  This has the following implications:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;If you draw a figure that covers a given rectangle, that
                  figure occupies one extra row of pixels on the right and bottom edges
                  as compared to filling a figure that is bounded by that same rectangle.
                  &lt;li&gt;If you draw a horizontal line along the same &lt;i&gt;y&lt;/i&gt; coordinate as
                  the baseline of a line of text, that line is drawn entirely below
                  the text, except for any descenders.
                  &lt;/ul&gt;&lt;p&gt;
                  All coordinates that appear as arguments to the methods of this
                  &lt;code&gt;Graphics&lt;/code&gt; object are considered relative to the
                  translation origin of this &lt;code&gt;Graphics&lt;/code&gt; object prior to
                  the invocation of the method.
                  &lt;p&gt;
                  All rendering operations modify only pixels which lie within the
                  area bounded by the current clip, which is specified by a {@link Shape}in user space and is controlled by the program using the
                  &lt;code&gt;Graphics&lt;/code&gt; object.  This &lt;i&gt;user clip&lt;/i&gt;
                  is transformed into device space and combined with the
                  &lt;i&gt;device clip&lt;/i&gt;, which is defined by the visibility of windows and
                  device extents.  The combination of the user clip and device clip
                  defines the &lt;i&gt;composite clip&lt;/i&gt;, which determines the final clipping
                  region.  The user clip cannot be modified by the rendering
                  system to reflect the resulting composite clip. The user clip can only
                  be changed through the &lt;code&gt;setClip&lt;/code&gt; or &lt;code&gt;clipRect&lt;/code&gt;
                  methods.
                  All drawing or writing is done in the current color,
                  using the current paint mode, and in the current font.                
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.awt.Component                    
                </see>
                <see>
                    java.awt.Graphics#clipRect(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#setColor(java.awt.Color)                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode()                    
                </see>
                <see>
                    java.awt.Graphics#setXORMode(java.awt.Color)                    
                </see>
                <see>
                    java.awt.Graphics#setFont(java.awt.Font)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <javadoc line="77">
                Constructs a new &lt;code&gt;Graphics&lt;/code&gt; object.
                  This constructor is the default contructor for a graphics
                  context.
                  &lt;p&gt;
                  Since &lt;code&gt;Graphics&lt;/code&gt; is an abstract class, applications
                  cannot call this constructor directly. Graphics contexts are
                  obtained from other graphics contexts or are created by calling
                  &lt;code&gt;getGraphics&lt;/code&gt; on a component.                
                <see>
                    java.awt.Graphics#create()                    
                </see>
                <see>
                    java.awt.Component#getGraphics                    
                </see>
            </javadoc>
            <method name="Graphics" type="constructor" line="89"/>
            <method name="create" type="Graphics" line="91"/>
            <javadoc line="91">
                Creates a new &lt;code&gt;Graphics&lt;/code&gt; object that is
                  a copy of this &lt;code&gt;Graphics&lt;/code&gt; object.                
                <return>
                    a new graphics context that is a copy of
                      this graphics context.                    
                </return>
            </javadoc>
            <javadoc line="98">
                Creates a new &lt;code&gt;Graphics&lt;/code&gt; object based on this
                  &lt;code&gt;Graphics&lt;/code&gt; object, but with a new translation and clip area.
                  The new &lt;code&gt;Graphics&lt;/code&gt; object has its origin
                  translated to the specified point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;).
                  Its clip area is determined by the intersection of the original
                  clip area with the specified rectangle.  The arguments are all
                  interpreted in the coordinate system of the original
                  &lt;code&gt;Graphics&lt;/code&gt; object. The new graphics context is
                  identical to the original, except in two respects:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The new graphics context is translated by (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;).
                  That is to say, the point (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;) in the
                  new graphics context is the same as (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in
                  the original graphics context.
                  &lt;li&gt;
                  The new graphics context has an additional clipping rectangle, in
                  addition to whatever (translated) clipping rectangle it inherited
                  from the original graphics context. The origin of the new clipping
                  rectangle is at (&lt;code&gt;0&lt;/code&gt;,&amp;nbsp;&lt;code&gt;0&lt;/code&gt;), and its size
                  is specified by the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;
                  arguments.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
                <param>
                    width   the width of the clipping rectangle.                    
                </param>
                <param>
                    height   the height of the clipping rectangle.                    
                </param>
                <return>
                    a new graphics context.                    
                </return>
                <see>
                    java.awt.Graphics#translate                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
            </javadoc>
            <method name="create" type="Graphics" line="132">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="g" type="Graphics" line="133"/>
            </method>
            <method name="translate" type="void" line="139"/>
            <javadoc line="139">
                Translates the origin of the graphics context to the point
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the current coordinate system.
                  Modifies this graphics context so that its new origin corresponds
                  to the point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s
                  original coordinate system.  All coordinates used in subsequent
                  rendering operations on this graphics context will be relative
                  to this new origin.                
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
            </javadoc>
            <method name="getColor" type="Color" line="151"/>
            <javadoc line="151">
                Gets this graphics context&apos;s current color.                
                <return>
                    this graphics context's current color.                    
                </return>
                <see>
                    java.awt.Color                    
                </see>
                <see>
                    java.awt.Graphics#setColor(Color)                    
                </see>
            </javadoc>
            <method name="setColor" type="void" line="158"/>
            <javadoc line="158">
                Sets this graphics context&apos;s current color to the specified
                  color. All subsequent graphics operations using this graphics
                  context use this specified color.                
                <param>
                    c   the new rendering color.                    
                </param>
                <see>
                    java.awt.Color                    
                </see>
                <see>
                    java.awt.Graphics#getColor                    
                </see>
            </javadoc>
            <method name="setPaintMode" type="void" line="167"/>
            <javadoc line="167">
                Sets the paint mode of this graphics context to overwrite the
                  destination with this graphics context&apos;s current color.
                  This sets the logical pixel operation function to the paint or
                  overwrite mode.  All subsequent rendering operations will
                  overwrite the destination with the current color.                
            </javadoc>
            <method name="setXORMode" type="void" line="175"/>
            <javadoc line="175">
                Sets the paint mode of this graphics context to alternate between
                  this graphics context&apos;s current color and the new specified color.
                  This specifies that logical pixel operations are performed in the
                  XOR mode, which alternates pixels between the current color and
                  a specified XOR color.
                  &lt;p&gt;
                  When drawing operations are performed, pixels which are the
                  current color are changed to the specified color, and vice versa.
                  &lt;p&gt;
                  Pixels that are of colors other than those two colors are changed
                  in an unpredictable but reversible manner; if the same figure is
                  drawn twice, then all pixels are restored to their original values.                
                <param>
                    c1 the XOR alternation color                    
                </param>
            </javadoc>
            <method name="getFont" type="Font" line="191"/>
            <javadoc line="191">
                Gets the current font.                
                <return>
                    this graphics context's current font.                    
                </return>
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.Graphics#setFont(Font)                    
                </see>
            </javadoc>
            <method name="setFont" type="void" line="198"/>
            <javadoc line="198">
                Sets this graphics context&apos;s font to the specified font.
                  All subsequent text operations using this graphics context
                  use this font. A null argument is silently ignored.                
                <param>
                    font   the font.                    
                </param>
                <see>
                    java.awt.Graphics#getFont                    
                </see>
                <see>
                    java.awt.Graphics#drawString(java.lang.String,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawBytes(byte[],int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawChars(char[],int,int,int,int)                    
                </see>
            </javadoc>
            <javadoc line="209">
                Gets the font metrics of the current font.                
                <return>
                    the font metrics of this graphics
                      context's current font.                    
                </return>
                <see>
                    java.awt.Graphics#getFont                    
                </see>
                <see>
                    java.awt.FontMetrics                    
                </see>
                <see>
                    java.awt.Graphics#getFontMetrics(Font)                    
                </see>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="217"/>
            <method name="getFontMetrics" type="FontMetrics" line="220"/>
            <javadoc line="220">
                Gets the font metrics for the specified font.                
                <return>
                    the font metrics for the specified font.                    
                </return>
                <param>
                    f the specified font                    
                </param>
                <see>
                    java.awt.Graphics#getFont                    
                </see>
                <see>
                    java.awt.FontMetrics                    
                </see>
                <see>
                    java.awt.Graphics#getFontMetrics()                    
                </see>
            </javadoc>
            <method name="getClipBounds" type="Rectangle" line="229"/>
            <javadoc line="229">
                Returns the bounding rectangle of the current clipping area.
                  This method refers to the user clip, which is independent of the
                  clipping associated with device bounds and window visibility.
                  If no clip has previously been set, or if the clip has been
                  cleared using &lt;code&gt;setClip(null)&lt;/code&gt;, this method returns
                  &lt;code&gt;null&lt;/code&gt;.
                  The coordinates in the rectangle are relative to the coordinate
                  system origin of this graphics context.                
                <return>
                    the bounding rectangle of the current clipping area,
                      or <code>null</code> if no clip is set.                    
                </return>
                <see>
                    java.awt.Graphics#getClip                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="clipRect" type="void" line="247"/>
            <javadoc line="247">
                Intersects the current clip with the specified rectangle.
                  The resulting clipping area is the intersection of the current
                  clipping area and the specified rectangle.  If there is no
                  current clipping area, either because the clip has never been
                  set, or the clip has been cleared using &lt;code&gt;setClip(null)&lt;/code&gt;,
                  the specified rectangle becomes the new clip.
                  This method sets the user clip, which is independent of the
                  clipping associated with device bounds and window visibility.
                  This method can only be used to make the current clip smaller.
                  To set the current clip larger, use any of the setClip methods.
                  Rendering operations have no effect outside of the clipping area.                
                <param>
                    x the x coordinate of the rectangle to intersect the clip with                    
                </param>
                <param>
                    y the y coordinate of the rectangle to intersect the clip with                    
                </param>
                <param>
                    width the width of the rectangle to intersect the clip with                    
                </param>
                <param>
                    height the height of the rectangle to intersect the clip with                    
                </param>
                <see>
                    #setClip(int,int,int,int)                    
                </see>
                <see>
                    #setClip(Shape)                    
                </see>
            </javadoc>
            <method name="setClip" type="void" line="267"/>
            <javadoc line="267">
                Sets the current clip to the rectangle specified by the given
                  coordinates.  This method sets the user clip, which is
                  independent of the clipping associated with device bounds
                  and window visibility.
                  Rendering operations have no effect outside of the clipping area.                
                <param>
                    x the <i>x</i> coordinate of the new clip rectangle.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the new clip rectangle.                    
                </param>
                <param>
                    width the width of the new clip rectangle.                    
                </param>
                <param>
                    height the height of the new clip rectangle.                    
                </param>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <see>
                    java.awt.Graphics#getClip                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getClip" type="Shape" line="283"/>
            <javadoc line="283">
                Gets the current clipping area.
                  This method returns the user clip, which is independent of the
                  clipping associated with device bounds and window visibility.
                  If no clip has previously been set, or if the clip has been
                  cleared using &lt;code&gt;setClip(null)&lt;/code&gt;, this method returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a <code>Shape</code> object representing the
                      current clipping area, or <code>null</code> if
                      no clip is set.                    
                </return>
                <see>
                    java.awt.Graphics#getClipBounds                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#setClip(Shape)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setClip" type="void" line="300"/>
            <javadoc line="300">
                Sets the current clipping area to an arbitrary clip shape.
                  Not all objects that implement the &lt;code&gt;Shape&lt;/code&gt;
                  interface can be used to set the clip.  The only
                  &lt;code&gt;Shape&lt;/code&gt; objects that are guaranteed to be
                  supported are &lt;code&gt;Shape&lt;/code&gt; objects that are
                  obtained via the &lt;code&gt;getClip&lt;/code&gt; method and via
                  &lt;code&gt;Rectangle&lt;/code&gt; objects.  This method sets the
                  user clip, which is independent of the clipping associated
                  with device bounds and window visibility.                
                <param>
                    clip the <code>Shape</code> to use to set the clip                    
                </param>
                <see>
                    java.awt.Graphics#getClip()                    
                </see>
                <see>
                    java.awt.Graphics#clipRect                    
                </see>
                <see>
                    java.awt.Graphics#setClip(int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="copyArea" type="void" line="317"/>
            <javadoc line="317">
                Copies an area of the component by a distance specified by
                  &lt;code&gt;dx&lt;/code&gt; and &lt;code&gt;dy&lt;/code&gt;. From the point specified
                  by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method
                  copies downwards and to the right.  To copy an area of the
                  component to the left or upwards, specify a negative value for
                  &lt;code&gt;dx&lt;/code&gt; or &lt;code&gt;dy&lt;/code&gt;.
                  If a portion of the source rectangle lies outside the bounds
                  of the component, or is obscured by another window or component,
                  &lt;code&gt;copyArea&lt;/code&gt; will be unable to copy the associated
                  pixels. The area that is omitted can be refreshed by calling
                  the component&apos;s &lt;code&gt;paint&lt;/code&gt; method.                
                <param>
                    x the <i>x</i> coordinate of the source rectangle.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the source rectangle.                    
                </param>
                <param>
                    width the width of the source rectangle.                    
                </param>
                <param>
                    height the height of the source rectangle.                    
                </param>
                <param>
                    dx the horizontal distance to copy the pixels.                    
                </param>
                <param>
                    dy the vertical distance to copy the pixels.                    
                </param>
            </javadoc>
            <method name="drawLine" type="void" line="337"/>
            <javadoc line="337">
                Draws a line, using the current color, between the points
                  &lt;code&gt;(x1,&amp;nbsp;y1)&lt;/code&gt; and &lt;code&gt;(x2,&amp;nbsp;y2)&lt;/code&gt;
                  in this graphics context&apos;s coordinate system.                
                <param>
                    x1  the first point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y1  the first point's <i>y</i> coordinate.                    
                </param>
                <param>
                    x2  the second point's <i>x</i> coordinate.                    
                </param>
                <param>
                    y2  the second point's <i>y</i> coordinate.                    
                </param>
            </javadoc>
            <method name="fillRect" type="void" line="347"/>
            <javadoc line="347">
                Fills the specified rectangle.
                  The left and right edges of the rectangle are at
                  &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The top and bottom edges are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.
                  The resulting rectangle covers an area
                  &lt;code&gt;width&lt;/code&gt; pixels wide by
                  &lt;code&gt;height&lt;/code&gt; pixels tall.
                  The rectangle is filled using the graphics context&apos;s current color.                
                <param>
                    x   the <i>x</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate
                      of the rectangle to be filled.                    
                </param>
                <param>
                    width   the width of the rectangle to be filled.                    
                </param>
                <param>
                    height   the height of the rectangle to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
                <see>
                    java.awt.Graphics#drawRect                    
                </see>
            </javadoc>
            <javadoc line="367">
                Draws the outline of the specified rectangle.
                  The left and right edges of the rectangle are at
                  &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&lt;/code&gt;.
                  The top and bottom edges are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&lt;/code&gt;.
                  The rectangle is drawn using the graphics context&apos;s current color.                
                <param>
                    x   the <i>x</i> coordinate
                      of the rectangle to be drawn.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate
                      of the rectangle to be drawn.                    
                </param>
                <param>
                    width   the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height   the height of the rectangle to be drawn.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect                    
                </see>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
            </javadoc>
            <method name="drawRect" type="void" line="383">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="384"/>
                <scope line="387"/>
                <scope line="390"/>
            </method>
            <method name="clearRect" type="void" line="397"/>
            <javadoc line="397">
                Clears the specified rectangle by filling it with the background
                  color of the current drawing surface. This operation does not
                  use the current paint mode.
                  &lt;p&gt;
                  Beginning with Java&amp;nbsp;1.1, the background color
                  of offscreen images may be system dependent. Applications should
                  use &lt;code&gt;setColor&lt;/code&gt; followed by &lt;code&gt;fillRect&lt;/code&gt; to
                  ensure that an offscreen image is cleared to a specific color.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to clear.                    
                </param>
                <param>
                    width the width of the rectangle to clear.                    
                </param>
                <param>
                    height the height of the rectangle to clear.                    
                </param>
                <see>
                    java.awt.Graphics#fillRect(int,int,int,int)                    
                </see>
                <see>
                    java.awt.Graphics#drawRect                    
                </see>
                <see>
                    java.awt.Graphics#setColor(java.awt.Color)                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    java.awt.Graphics#setXORMode(java.awt.Color)                    
                </see>
            </javadoc>
            <method name="drawRoundRect" type="void" line="417"/>
            <javadoc line="417">
                Draws an outlined round-cornered rectangle using this graphics
                  context&apos;s current color. The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    arcWidth the horizontal diameter of the arc
                      at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter of the arc
                      at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#fillRoundRect                    
                </see>
            </javadoc>
            <method name="fillRoundRect" type="void" line="434"/>
            <javadoc line="434">
                Fills the specified rounded corner rectangle with the current color.
                  The left and right edges of the rectangle
                  are at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x&amp;nbsp;+&amp;nbsp;width&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;,
                  respectively. The top and bottom edges of the rectangle are at
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&amp;nbsp;+&amp;nbsp;height&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    arcWidth the horizontal diameter
                      of the arc at the four corners.                    
                </param>
                <param>
                    arcHeight the vertical diameter
                      of the arc at the four corners.                    
                </param>
                <see>
                    java.awt.Graphics#drawRoundRect                    
                </see>
            </javadoc>
            <javadoc line="451">
                Draws a 3-D highlighted outline of the specified rectangle.
                  The edges of the rectangle are highlighted so that they
                  appear to be beveled and lit from the upper left corner.
                  &lt;p&gt;
                  The colors used for the highlighting effect are determined
                  based on the current color.
                  The resulting rectangle covers an area that is
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    raised a boolean that determines whether the rectangle
                      appears to be raised above the surface
                      or sunk into the surface.                    
                </param>
                <see>
                    java.awt.Graphics#fill3DRect                    
                </see>
            </javadoc>
            <method name="draw3DRect" type="void" line="470">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="471"/>
                <declaration name="brighter" type="Color" line="472"/>
                <declaration name="darker" type="Color" line="473"/>
            </method>
            <javadoc line="482">
                Paints a 3-D highlighted rectangle filled with the current color.
                  The edges of the rectangle will be highlighted so that it appears
                  as if the edges were beveled and lit from the upper left corner.
                  The colors used for the highlighting effect will be determined from
                  the current color.                
                <param>
                    x the <i>x</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    raised a boolean value that determines whether the
                      rectangle appears to be raised above the surface
                      or etched into the surface.                    
                </param>
                <see>
                    java.awt.Graphics#draw3DRect                    
                </see>
            </javadoc>
            <method name="fill3DRect" type="void" line="497">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="c" type="Color" line="498"/>
                <declaration name="brighter" type="Color" line="499"/>
                <declaration name="darker" type="Color" line="500"/>
                <scope line="501"/>
            </method>
            <method name="drawOval" type="void" line="513"/>
            <javadoc line="513">
                Draws the outline of an oval.
                  The result is a circle or ellipse that fits within the
                  rectangle specified by the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;,
                  &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The oval covers an area that is
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  and &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.                
                <param>
                    x the <i>x</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left
                      corner of the oval to be drawn.                    
                </param>
                <param>
                    width the width of the oval to be drawn.                    
                </param>
                <param>
                    height the height of the oval to be drawn.                    
                </param>
                <see>
                    java.awt.Graphics#fillOval                    
                </see>
            </javadoc>
            <method name="fillOval" type="void" line="531"/>
            <javadoc line="531">
                Fills an oval bounded by the specified rectangle with the
                  current color.                
                <param>
                    x the <i>x</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the upper left corner
                      of the oval to be filled.                    
                </param>
                <param>
                    width the width of the oval to be filled.                    
                </param>
                <param>
                    height the height of the oval to be filled.                    
                </param>
                <see>
                    java.awt.Graphics#drawOval                    
                </see>
            </javadoc>
            <method name="drawArc" type="void" line="543"/>
            <javadoc line="543">
                Draws the outline of a circular or elliptical arc
                  covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees, using the current color.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.
                  &lt;p&gt;
                  The angles are specified relative to the non-square extents of
                  the bounding rectangle such that 45 degrees always falls on the
                  line from the center of the ellipse to the upper right corner of
                  the bounding rectangle. As a result, if the bounding rectangle is
                  noticeably longer in one axis than the other, the angles to the
                  start and end of the arc segment will be skewed farther along the
                  longer axis of the bounds.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be drawn.                    
                </param>
                <param>
                    width the width of the arc to be drawn.                    
                </param>
                <param>
                    height the height of the arc to be drawn.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#fillArc                    
                </see>
            </javadoc>
            <method name="fillArc" type="void" line="581"/>
            <javadoc line="581">
                Fills a circular or elliptical arc covering the specified rectangle.
                  &lt;p&gt;
                  The resulting arc begins at &lt;code&gt;startAngle&lt;/code&gt; and extends
                  for &lt;code&gt;arcAngle&lt;/code&gt; degrees.
                  Angles are interpreted such that 0&amp;nbsp;degrees
                  is at the 3&amp;nbsp;o&apos;clock position.
                  A positive value indicates a counter-clockwise rotation
                  while a negative value indicates a clockwise rotation.
                  &lt;p&gt;
                  The center of the arc is the center of the rectangle whose origin
                  is (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) and whose size is specified by the
                  &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; arguments.
                  &lt;p&gt;
                  The resulting arc covers an area
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.
                  &lt;p&gt;
                  The angles are specified relative to the non-square extents of
                  the bounding rectangle such that 45 degrees always falls on the
                  line from the center of the ellipse to the upper right corner of
                  the bounding rectangle. As a result, if the bounding rectangle is
                  noticeably longer in one axis than the other, the angles to the
                  start and end of the arc segment will be skewed farther along the
                  longer axis of the bounds.                
                <param>
                    x the <i>x</i> coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    y the <i>y</i>  coordinate of the
                      upper-left corner of the arc to be filled.                    
                </param>
                <param>
                    width the width of the arc to be filled.                    
                </param>
                <param>
                    height the height of the arc to be filled.                    
                </param>
                <param>
                    startAngle the beginning angle.                    
                </param>
                <param>
                    arcAngle the angular extent of the arc,
                      relative to the start angle.                    
                </param>
                <see>
                    java.awt.Graphics#drawArc                    
                </see>
            </javadoc>
            <method name="drawPolyline" type="void" line="618"/>
            <javadoc line="618">
                Draws a sequence of connected lines defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  The figure is not closed if the first point
                  differs from the last point.                
                <param>
                    xPoints an array of <i>x</i> points                    
                </param>
                <param>
                    yPoints an array of <i>y</i> points                    
                </param>
                <param>
                    nPoints the total number of points                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawPolygon" type="void" line="631"/>
            <javadoc line="631">
                Draws a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  Each pair of (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) coordinates defines a point.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#fillPolygon                    
                </see>
                <see>
                    java.awt.Graphics#drawPolyline                    
                </see>
            </javadoc>
            <javadoc line="651">
                Draws the outline of a polygon defined by the specified
                  &lt;code&gt;Polygon&lt;/code&gt; object.                
                <param>
                    p the polygon to draw.                    
                </param>
                <see>
                    java.awt.Graphics#fillPolygon                    
                </see>
                <see>
                    java.awt.Graphics#drawPolyline                    
                </see>
            </javadoc>
            <method name="drawPolygon" type="void" line="658">
                <params>
                    <param name="p" type="Polygon"/>
                </params>
            </method>
            <method name="fillPolygon" type="void" line="661"/>
            <javadoc line="661">
                Fills a closed polygon defined by
                  arrays of &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; coordinates.
                  &lt;p&gt;
                  This method draws the polygon defined by &lt;code&gt;nPoint&lt;/code&gt; line
                  segments, where the first &lt;code&gt;nPoint&amp;nbsp;-&amp;nbsp;1&lt;/code&gt;
                  line segments are line segments from
                  &lt;code&gt;(xPoints[i&amp;nbsp;-&amp;nbsp;1],&amp;nbsp;yPoints[i&amp;nbsp;-&amp;nbsp;1])&lt;/code&gt;
                  to &lt;code&gt;(xPoints[i],&amp;nbsp;yPoints[i])&lt;/code&gt;, for
                  1&amp;nbsp;&amp;le;&amp;nbsp;&lt;i&gt;i&lt;/i&gt;&amp;nbsp;&amp;le;&amp;nbsp;&lt;code&gt;nPoints&lt;/code&gt;.
                  The figure is automatically closed by drawing a line connecting
                  the final point to the first point, if those points are different.
                  &lt;p&gt;
                  The area inside the polygon is defined using an
                  even-odd fill rule, also known as the alternating rule.                
                <param>
                    xPoints   a an array of <code>x</code> coordinates.                    
                </param>
                <param>
                    yPoints   a an array of <code>y</code> coordinates.                    
                </param>
                <param>
                    nPoints   a the total number of points.                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
            </javadoc>
            <javadoc line="682">
                Fills the polygon defined by the specified Polygon object with
                  the graphics context&apos;s current color.
                  &lt;p&gt;
                  The area inside the polygon is defined using an
                  even-odd fill rule, also known as the alternating rule.                
                <param>
                    p the polygon to fill.                    
                </param>
                <see>
                    java.awt.Graphics#drawPolygon(int[],int[],int)                    
                </see>
            </javadoc>
            <method name="fillPolygon" type="void" line="691">
                <params>
                    <param name="p" type="Polygon"/>
                </params>
            </method>
            <method name="drawString" type="void" line="694"/>
            <javadoc line="694">
                Draws the text given by the specified string, using this
                  graphics context&apos;s current font and color. The baseline of the
                  leftmost character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    str      the string to be drawn.                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <throws>
                    NullPointerException if <code>str</code> is <code>null</code>.                    
                </throws>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="707"/>
            <javadoc line="707">
                Renders the text of the specified iterator applying its attributes
                  in accordance with the specification of the{@link java.awt.font.TextAttribute TextAttribute} class.
                  &lt;p&gt;
                  The baseline of the leftmost character is at position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate system.                
                <param>
                    iterator the iterator whose text is to be drawn                    
                </param>
                <param>
                    x        the <i>x</i> coordinate.                    
                </param>
                <param>
                    y        the <i>y</i> coordinate.                    
                </param>
                <throws>
                    NullPointerException if <code>iterator</code> is
                      <code>null</code>.                    
                </throws>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
            </javadoc>
            <javadoc line="722">
                Draws the text given by the specified character array, using this
                  graphics context&apos;s current font and color. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.                
                <param>
                    data the array of characters to be drawn                    
                </param>
                <param>
                    offset the start offset in the data                    
                </param>
                <param>
                    length the number of characters to be drawn                    
                </param>
                <param>
                    x the <i>x</i> coordinate of the baseline of the text                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the baseline of the text                    
                </param>
                <throws>
                    NullPointerException if <code>data</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <code>offset</code> or
                      <code>length</code>is less than zero, or
                      <code>offset+length</code> is greater than the length of the
                      <code>data</code> array.                    
                </throws>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawString                    
                </see>
            </javadoc>
            <method name="drawChars" type="void" line="740">
                <params>
                    <param name="data" type="char"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="743">
                Draws the text given by the specified byte array, using this
                  graphics context&apos;s current font and color. The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this
                  graphics context&apos;s coordinate system.
                  &lt;p&gt;
                  Use of this method is not recommended as each byte is interpreted
                  as a Unicode code point in the range 0 to 255, and so can only be
                  used to draw Latin characters in that range.                
                <param>
                    data the data to be drawn                    
                </param>
                <param>
                    offset the start offset in the data                    
                </param>
                <param>
                    length the number of bytes that are drawn                    
                </param>
                <param>
                    x the <i>x</i> coordinate of the baseline of the text                    
                </param>
                <param>
                    y the <i>y</i> coordinate of the baseline of the text                    
                </param>
                <throws>
                    NullPointerException if <code>data</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if <code>offset</code> or
                      <code>length</code>is less than zero, or <code>offset+length</code>
                      is greater than the length of the <code>data</code> array.                    
                </throws>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
                <see>
                    java.awt.Graphics#drawString                    
                </see>
            </javadoc>
            <method name="drawBytes" type="void" line="764">
                <params>
                    <param name="data" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="drawImage" type="boolean" line="767"/>
            <javadoc line="767">
                Draws as much of the specified image as is currently available.
                  The image is drawn with its top-left corner at
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate
                  space. Transparent pixels in the image do not affect whatever
                  pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  complete image has not yet been loaded, and it has not been dithered
                  and converted for the current output device.
                  &lt;p&gt;
                  If the image has completely loaded and its pixels are
                  no longer being changed, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.
                  Otherwise, &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;
                  and as more of
                  the image becomes available
                  or it is time to draw another frame of animation,
                  the process that loads the image notifies
                  the specified image observer.                
                <param>
                    img the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x   the <i>x</i> coordinate.                    
                </param>
                <param>
                    y   the <i>y</i> coordinate.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="800"/>
            <javadoc line="800">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels do not affect whatever pixels
                  are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that loads the image notifies
                  the image observer by calling its &lt;code&gt;imageUpdate&lt;/code&gt; method.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img    the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x      the <i>x</i> coordinate.                    
                </param>
                <param>
                    y      the <i>y</i> coordinate.                    
                </param>
                <param>
                    width  the width of the rectangle.                    
                </param>
                <param>
                    height the height of the rectangle.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="837"/>
            <javadoc line="837">
                Draws as much of the specified image as is currently available.
                  The image is drawn with its top-left corner at
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in this graphics context&apos;s coordinate
                  space.  Transparent pixels are drawn in the specified
                  background color.
                  &lt;p&gt;
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  complete image has not yet been loaded, and it has not been dithered
                  and converted for the current output device.
                  &lt;p&gt;
                  If the image has completely loaded and its pixels are
                  no longer being changed, then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.
                  Otherwise, &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;
                  and as more of
                  the image becomes available
                  or it is time to draw another frame of animation,
                  the process that loads the image notifies
                  the specified image observer.                
                <param>
                    img the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x      the <i>x</i> coordinate.                    
                </param>
                <param>
                    y      the <i>y</i> coordinate.                    
                </param>
                <param>
                    bgcolor the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="876"/>
            <javadoc line="876">
                Draws as much of the specified image as has already been scaled
                  to fit inside the specified rectangle.
                  &lt;p&gt;
                  The image is drawn inside the specified rectangle of this
                  graphics context&apos;s coordinate space, and is scaled if
                  necessary. Transparent pixels are drawn in the specified
                  background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  entire image has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that loads the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  A scaled version of an image will not necessarily be
                  available immediately just because an unscaled version of the
                  image has been constructed for this output device.  Each size of
                  the image may be cached separately and generated from the original
                  data in a separate image production sequence.                
                <param>
                    img       the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    x         the <i>x</i> coordinate.                    
                </param>
                <param>
                    y         the <i>y</i> coordinate.                    
                </param>
                <param>
                    width     the width of the rectangle.                    
                </param>
                <param>
                    height    the height of the rectangle.                    
                </param>
                <param>
                    bgcolor   the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer    object to be notified as more of
                      the image is converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="918"/>
            <javadoc line="918">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface. Transparent pixels
                  do not affect whatever pixels are already there.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that loads the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="drawImage" type="boolean" line="969"/>
            <javadoc line="969">
                Draws as much of the specified area of the specified image as is
                  currently available, scaling it on the fly to fit inside the
                  specified area of the destination drawable surface.
                  &lt;p&gt;
                  Transparent pixels are drawn in the specified background color.
                  This operation is equivalent to filling a rectangle of the
                  width and height of the specified image with the given color and then
                  drawing the image on top of it, but possibly more efficient.
                  &lt;p&gt;
                  This method returns immediately in all cases, even if the
                  image area to be drawn has not yet been scaled, dithered, and converted
                  for the current output device.
                  If the current output representation is not yet complete then
                  &lt;code&gt;drawImage&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. As more of
                  the image becomes available, the process that loads the image notifies
                  the specified image observer.
                  &lt;p&gt;
                  This method always uses the unscaled version of the image
                  to render the scaled rectangle and performs the required
                  scaling on the fly. It does not use a cached, scaled version
                  of the image for this operation. Scaling of the image from source
                  to destination is performed such that the first coordinate
                  of the source rectangle is mapped to the first coordinate of
                  the destination rectangle, and the second source coordinate is
                  mapped to the second destination coordinate. The subimage is
                  scaled and flipped as needed to preserve those mappings.                
                <param>
                    img the specified image to be drawn. This method does
                      nothing if <code>img</code> is null.                    
                </param>
                <param>
                    dx1 the <i>x</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy1 the <i>y</i> coordinate of the first corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dx2 the <i>x</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    dy2 the <i>y</i> coordinate of the second corner of the
                      destination rectangle.                    
                </param>
                <param>
                    sx1 the <i>x</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy1 the <i>y</i> coordinate of the first corner of the
                      source rectangle.                    
                </param>
                <param>
                    sx2 the <i>x</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    sy2 the <i>y</i> coordinate of the second corner of the
                      source rectangle.                    
                </param>
                <param>
                    bgcolor the background color to paint under the
                      non-opaque portions of the image.                    
                </param>
                <param>
                    observer object to be notified as more of the image is
                      scaled and converted.                    
                </param>
                <return>
                    <code>false</code> if the image pixels are still changing;
                      <code>true</code> otherwise.                    
                </return>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.image.ImageObserver#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="dispose" type="void" line="1026"/>
            <javadoc line="1026">
                Disposes of this graphics context and releases
                  any system resources that it is using.
                  A &lt;code&gt;Graphics&lt;/code&gt; object cannot be used after
                  &lt;code&gt;dispose&lt;/code&gt;has been called.
                  &lt;p&gt;
                  When a Java program runs, a large number of &lt;code&gt;Graphics&lt;/code&gt;
                  objects can be created within a short time frame.
                  Although the finalization process of the garbage collector
                  also disposes of the same system resources, it is preferable
                  to manually free the associated resources by calling this
                  method rather than to rely on a finalization process which
                  may not run to completion for a long period of time.
                  &lt;p&gt;
                  Graphics objects which are provided as arguments to the
                  &lt;code&gt;paint&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods
                  of components are automatically released by the system when
                  those methods return. For efficiency, programmers should
                  call &lt;code&gt;dispose&lt;/code&gt; when finished using
                  a &lt;code&gt;Graphics&lt;/code&gt; object only if it was created
                  directly from a component or another &lt;code&gt;Graphics&lt;/code&gt; object.                
                <see>
                    java.awt.Graphics#finalize                    
                </see>
                <see>
                    java.awt.Component#paint                    
                </see>
                <see>
                    java.awt.Component#update                    
                </see>
                <see>
                    java.awt.Component#getGraphics                    
                </see>
                <see>
                    java.awt.Graphics#create                    
                </see>
            </javadoc>
            <javadoc line="1054">
                Disposes of this graphics context once it is no longer referenced.                
                <see>
                    #dispose                    
                </see>
            </javadoc>
            <method name="finalize" type="void" line="1058"/>
            <javadoc line="1061">
                Returns a &lt;code&gt;String&lt;/code&gt; object representing this
                  &lt;code&gt;Graphics&lt;/code&gt; object&apos;s value.                
                <return>
                    a string representation of this graphics context.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1066"/>
            <javadoc line="1069">
                Returns the bounding rectangle of the current clipping area.                
                <return>
                    the bounding rectangle of the current clipping area
                      or <code>null</code> if no clip is set.                    
                </return>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>getClipBounds()</code>.                    
                </deprecated>
            </javadoc>
            <method name="getClipRect" type="Rectangle" line="1076"/>
            <javadoc line="1079">
                Returns true if the specified rectangular area might intersect
                  the current clipping area.
                  The coordinates of the specified rectangular area are in the
                  user coordinate space and are relative to the coordinate
                  system origin of this graphics context.
                  This method may use an algorithm that calculates a result quickly
                  but which sometimes might return true even if the specified
                  rectangular area does not intersect the clipping area.
                  The specific algorithm employed may thus trade off accuracy for
                  speed, but it will never return false unless it can guarantee
                  that the specified rectangular area does not intersect the
                  current clipping area.
                  The clipping area used by this method can represent the
                  intersection of the user clip as specified through the clip
                  methods of this graphics context as well as the clipping
                  associated with the device or image bounds and window visibility.                
                <param>
                    x the x coordinate of the rectangle to test against the clip                    
                </param>
                <param>
                    y the y coordinate of the rectangle to test against the clip                    
                </param>
                <param>
                    width the width of the rectangle to test against the clip                    
                </param>
                <param>
                    height the height of the rectangle to test against the clip                    
                </param>
                <return>
                    <code>true</code> if the specified rectangle intersects
                      the bounds of the current clip; <code>false</code>
                      otherwise.                    
                </return>
            </javadoc>
            <method name="hitClip" type="boolean" line="1104">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="clipRect" type="Rectangle" line="1105"/>
                <scope line="1106"/>
            </method>
            <javadoc line="1111">
                Returns the bounding rectangle of the current clipping area.
                  The coordinates in the rectangle are relative to the coordinate
                  system origin of this graphics context.  This method differs
                  from {@link #getClipBounds() getClipBounds} in that an existing
                  rectangle is used instead of allocating a new one.
                  This method refers to the user clip, which is independent of the
                  clipping associated with device bounds and window visibility.
                  If no clip has previously been set, or if the clip has been
                  cleared using &lt;code&gt;setClip(null)&lt;/code&gt;, this method returns the
                  specified &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    r    the rectangle where the current clipping area is
                      copied to.  Any current values in this rectangle are
                      overwritten.                    
                </param>
                <return>
                    the bounding rectangle of the current clipping area.                    
                </return>
            </javadoc>
            <method name="getClipBounds" type="Rectangle" line="1127">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="clipRect" type="Rectangle" line="1128"/>
                <scope line="1129"/>
                <scope line="1135"/>
            </method>
        </class>
    </source>