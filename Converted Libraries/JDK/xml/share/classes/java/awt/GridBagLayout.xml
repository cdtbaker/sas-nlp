<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Arrays"/>
        <class name="GridBagLayout" line="30">
            <comment line="818">
                Print the layout information.  Useful for debugging.                
            </comment>
            <comment line="822">
                DEBUG
                
                  protected void dumpLayoutInfo(GridBagLayoutInfo s) {
                    int x;
                
                    System.out.println(&quot;Col\tWidth\tWeight&quot;);
                    for (x=0; x&lt;s.width; x++) {
                      System.out.println(x + &quot;\t&quot; +
                                   s.minWidth[x] + &quot;\t&quot; +
                                   s.weightX[x]);
                    }
                    System.out.println(&quot;Row\tHeight\tWeight&quot;);
                    for (x=0; x&lt;s.height; x++) {
                      System.out.println(x + &quot;\t&quot; +
                                   s.minHeight[x] + &quot;\t&quot; +
                                   s.weightY[x]);
                    }
                  }                
            </comment>
            <comment line="842">
                Print the layout constraints.  Useful for debugging.                
            </comment>
            <comment line="846">
                DEBUG
                
                  protected void dumpConstraints(GridBagConstraints constraints) {
                    System.out.println(
                                 &quot;wt &quot; +
                                 constraints.weightx +
                                 &quot; &quot; +
                                 constraints.weighty +
                                 &quot;, &quot; +
                
                                 &quot;box &quot; +
                                 constraints.gridx +
                                 &quot; &quot; +
                                 constraints.gridy +
                                 &quot; &quot; +
                                 constraints.gridwidth +
                                 &quot; &quot; +
                                 constraints.gridheight +
                                 &quot;, &quot; +
                
                                 &quot;min &quot; +
                                 constraints.minWidth +
                                 &quot; &quot; +
                                 constraints.minHeight +
                                 &quot;, &quot; +
                
                                 &quot;pad &quot; +
                                 constraints.insets.bottom +
                                 &quot; &quot; +
                                 constraints.insets.left +
                                 &quot; &quot; +
                                 constraints.insets.right +
                                 &quot; &quot; +
                                 constraints.insets.top +
                                 &quot; &quot; +
                                 constraints.ipadx +
                                 &quot; &quot; +
                                 constraints.ipady);
                  }                
            </comment>
            <comment line="914">
                Calculate maximum array sizes to allocate arrays without ensureCapacity
                 we may use preCalculated sizes in whole class because of upper estimation of
                 maximumArrayXIndex and maximumArrayYIndex.                
            </comment>
            <comment line="973">
                PreInitMaximumSizes                
            </comment>
            <comment line="1535">
                getLayoutInfo()                
            </comment>
            <comment line="2227">
                Added for serial backwards compatability (4348425)                
            </comment>
            <implements interface="LayoutManager2"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="30">
                The &lt;code&gt;GridBagLayout&lt;/code&gt; class is a flexible layout
                  manager that aligns components vertically, horizontally or along their
                  baseline without requiring that the components be of the same size.
                  Each &lt;code&gt;GridBagLayout&lt;/code&gt; object maintains a dynamic,
                  rectangular grid of cells, with each component occupying
                  one or more cells, called its &lt;em&gt;display area&lt;/em&gt;.
                  &lt;p&gt;
                  Each component managed by a &lt;code&gt;GridBagLayout&lt;/code&gt; is associated with
                  an instance of {@link GridBagConstraints}.  The constraints object
                  specifies where a component&apos;s display area should be located on the grid
                  and how the component should be positioned within its display area.  In
                  addition to its constraints object, the &lt;code&gt;GridBagLayout&lt;/code&gt; also
                  considers each component&apos;s minimum and preferred sizes in order to
                  determine a component&apos;s size.
                  &lt;p&gt;
                  The overall orientation of the grid depends on the container&apos;s{@link ComponentOrientation} property.  For horizontal left-to-right
                  orientations, grid coordinate (0,0) is in the upper left corner of the
                  container with x increasing to the right and y increasing downward.  For
                  horizontal right-to-left orientations, grid coordinate (0,0) is in the upper
                  right corner of the container with x increasing to the left and y
                  increasing downward.
                  &lt;p&gt;
                  To use a grid bag layout effectively, you must customize one or more
                  of the &lt;code&gt;GridBagConstraints&lt;/code&gt; objects that are associated
                  with its components. You customize a &lt;code&gt;GridBagConstraints&lt;/code&gt;
                  object by setting one or more of its instance variables:
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;{@link GridBagConstraints#gridx},{@link GridBagConstraints#gridy}&lt;dd&gt;Specifies the cell containing the leading corner of the component&apos;s
                  display area, where the cell at the origin of the grid has address
                  &lt;code&gt;gridx&amp;nbsp;=&amp;nbsp;0&lt;/code&gt;,
                  &lt;code&gt;gridy&amp;nbsp;=&amp;nbsp;0&lt;/code&gt;.  For horizontal left-to-right layout,
                  a component&apos;s leading corner is its upper left.  For horizontal
                  right-to-left layout, a component&apos;s leading corner is its upper right.
                  Use &lt;code&gt;GridBagConstraints.RELATIVE&lt;/code&gt; (the default value)
                  to specify that the component be placed immediately following
                  (along the x axis for &lt;code&gt;gridx&lt;/code&gt; or the y axis for
                  &lt;code&gt;gridy&lt;/code&gt;) the component that was added to the container
                  just before this component was added.
                  &lt;dt&gt;{@link GridBagConstraints#gridwidth},{@link GridBagConstraints#gridheight}&lt;dd&gt;Specifies the number of cells in a row (for &lt;code&gt;gridwidth&lt;/code&gt;)
                  or column (for &lt;code&gt;gridheight&lt;/code&gt;)
                  in the component&apos;s display area.
                  The default value is 1.
                  Use &lt;code&gt;GridBagConstraints.REMAINDER&lt;/code&gt; to specify
                  that the component&apos;s display area will be from &lt;code&gt;gridx&lt;/code&gt;
                  to the last cell in the row (for &lt;code&gt;gridwidth&lt;/code&gt;)
                  or from &lt;code&gt;gridy&lt;/code&gt; to the last cell in the column
                  (for &lt;code&gt;gridheight&lt;/code&gt;).
                  Use &lt;code&gt;GridBagConstraints.RELATIVE&lt;/code&gt; to specify
                  that the component&apos;s display area will be from &lt;code&gt;gridx&lt;/code&gt;
                  to the next to the last cell in its row (for &lt;code&gt;gridwidth&lt;/code&gt;
                  or from &lt;code&gt;gridy&lt;/code&gt; to the next to the last cell in its
                  column (for &lt;code&gt;gridheight&lt;/code&gt;).
                  &lt;dt&gt;{@link GridBagConstraints#fill}&lt;dd&gt;Used when the component&apos;s display area
                  is larger than the component&apos;s requested size
                  to determine whether (and how) to resize the component.
                  Possible values are
                  &lt;code&gt;GridBagConstraints.NONE&lt;/code&gt; (the default),
                  &lt;code&gt;GridBagConstraints.HORIZONTAL&lt;/code&gt;
                  (make the component wide enough to fill its display area
                  horizontally, but don&apos;t change its height),
                  &lt;code&gt;GridBagConstraints.VERTICAL&lt;/code&gt;
                  (make the component tall enough to fill its display area
                  vertically, but don&apos;t change its width), and
                  &lt;code&gt;GridBagConstraints.BOTH&lt;/code&gt;
                  (make the component fill its display area entirely).
                  &lt;dt&gt;{@link GridBagConstraints#ipadx},{@link GridBagConstraints#ipady}&lt;dd&gt;Specifies the component&apos;s internal padding within the layout,
                  how much to add to the minimum size of the component.
                  The width of the component will be at least its minimum width
                  plus &lt;code&gt;ipadx&lt;/code&gt; pixels. Similarly, the height of
                  the component will be at least the minimum height plus
                  &lt;code&gt;ipady&lt;/code&gt; pixels.
                  &lt;dt&gt;{@link GridBagConstraints#insets}&lt;dd&gt;Specifies the component&apos;s external padding, the minimum
                  amount of space between the component and the edges of its display area.
                  &lt;dt&gt;{@link GridBagConstraints#anchor}&lt;dd&gt;Specifies where the component should be positioned in its display area.
                  There are three kinds of possible values: absolute, orientation-relative,
                  and baseline-relative
                  Orientation relative values are interpreted relative to the container&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property while absolute values
                  are not.  Baseline relative values are calculated relative to the
                  baseline.  Valid values are:&lt;/dd&gt;
                  &lt;p&gt;
                  &lt;center&gt;&lt;table BORDER=0 COLS=3 WIDTH=800
                  SUMMARY=&quot;absolute, relative and baseline values as described above&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;&lt;P ALIGN=&quot;LEFT&quot;&gt;Absolute Values&lt;/th&gt;
                  &lt;th&gt;&lt;P ALIGN=&quot;LEFT&quot;&gt;Orientation Relative Values&lt;/th&gt;
                  &lt;th&gt;&lt;P ALIGN=&quot;LEFT&quot;&gt;Baseline Relative Values&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.NORTH&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.SOUTH&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.WEST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.EAST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.NORTHWEST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.NORTHEAST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.SOUTHWEST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.SOUTHEAST&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.CENTER&lt;/code&gt; (the default)&lt;/li&gt;
                  &lt;/td&gt;
                  &lt;td&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.PAGE_START&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.PAGE_END&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.LINE_START&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.LINE_END&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.FIRST_LINE_START&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.FIRST_LINE_END&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.LAST_LINE_START&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.LAST_LINE_END&lt;/code&gt;&lt;/li&gt;
                  &lt;/td&gt;
                  &lt;td&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BASELINE&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BASELINE_LEADING&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BASELINE_TRAILING&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.ABOVE_BASELINE&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.ABOVE_BASELINE_LEADING&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.ABOVE_BASELINE_TRAILING&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BELOW_BASELINE&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BELOW_BASELINE_LEADING&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;GridBagConstraints.BELOW_BASELINE_TRAILING&lt;/code&gt;&lt;/li&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;&lt;/center&gt;&lt;p&gt;
                  &lt;dt&gt;{@link GridBagConstraints#weightx},{@link GridBagConstraints#weighty}&lt;dd&gt;Used to determine how to distribute space, which is
                  important for specifying resizing behavior.
                  Unless you specify a weight for at least one component
                  in a row (&lt;code&gt;weightx&lt;/code&gt;) and column (&lt;code&gt;weighty&lt;/code&gt;),
                  all the components clump together in the center of their container.
                  This is because when the weight is zero (the default),
                  the &lt;code&gt;GridBagLayout&lt;/code&gt; object puts any extra space
                  between its grid of cells and the edges of the container.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  Each row may have a baseline; the baseline is determined by the
                  components in that row that have a valid baseline and are aligned
                  along the baseline (the component&apos;s anchor value is one of {@codeBASELINE}, {@code BASELINE_LEADING} or {@code BASELINE_TRAILING}).
                  If none of the components in the row has a valid baseline, the row
                  does not have a baseline.
                  &lt;p&gt;
                  If a component spans rows it is aligned either to the baseline of
                  the start row (if the baseline-resize behavior is {@codeCONSTANT_ASCENT}) or the end row (if the baseline-resize behavior
                  is {@code CONSTANT_DESCENT}).  The row that the component is
                  aligned to is called the &lt;em&gt;prevailing row&lt;/em&gt;.
                  &lt;p&gt;
                  The following figure shows a baseline layout and includes a
                  component that spans rows:
                  &lt;center&gt;&lt;table summary=&quot;Baseline Layout&quot;&gt;
                  &lt;tr ALIGN=CENTER&gt;
                  &lt;td&gt;
                  &lt;img src=&quot;doc-files/GridBagLayout-baseline.png&quot;
                  alt=&quot;The following text describes this graphic (Figure 1).&quot; ALIGN=center&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;&lt;/center&gt;
                  This layout consists of three components:
                  &lt;ul&gt;&lt;li&gt;A panel that starts in row 0 and ends in row 1.  The panel
                  has a baseline-resize behavior of &lt;code&gt;CONSTANT_DESCENT&lt;/code&gt; and has
                  an anchor of &lt;code&gt;BASELINE&lt;/code&gt;.  As the baseline-resize behavior
                  is &lt;code&gt;CONSTANT_DESCENT&lt;/code&gt; the prevailing row for the panel is
                  row 1.
                  &lt;li&gt;Two buttons, each with a baseline-resize behavior of
                  &lt;code&gt;CENTER_OFFSET&lt;/code&gt; and an anchor of &lt;code&gt;BASELINE&lt;/code&gt;.
                  &lt;/ul&gt;
                  Because the second button and the panel share the same prevailing row,
                  they are both aligned along their baseline.
                  &lt;p&gt;
                  Components positioned using one of the baseline-relative values resize
                  differently than when positioned using an absolute or orientation-relative
                  value.  How components change is dictated by how the baseline of the
                  prevailing row changes.  The baseline is anchored to the
                  bottom of the display area if any components with the same prevailing row
                  have a baseline-resize behavior of &lt;code&gt;CONSTANT_DESCENT&lt;/code&gt;,
                  otherwise the baseline is anchored to the top of the display area.
                  The following rules dictate the resize behavior:
                  &lt;ul&gt;
                  &lt;li&gt;Resizable components positioned above the baseline can only
                  grow as tall as the baseline.  For example, if the baseline is at 100
                  and anchored at the top, a resizable component positioned above the
                  baseline can never grow more than 100 units.
                  &lt;li&gt;Similarly, resizable components positioned below the baseline can
                  only grow as high as the difference between the display height and the
                  baseline.
                  &lt;li&gt;Resizable components positioned on the baseline with a
                  baseline-resize behavior of &lt;code&gt;OTHER&lt;/code&gt; are only resized if
                  the baseline at the resized size fits within the display area.  If
                  the baseline is such that it does not fit within the display area
                  the component is not resized.
                  &lt;li&gt;Components positioned on the baseline that do not have a
                  baseline-resize behavior of &lt;code&gt;OTHER&lt;/code&gt;
                  can only grow as tall as {@code display height - baseline + baseline of component}.
                  &lt;/ul&gt;
                  If you position a component along the baseline, but the
                  component does not have a valid baseline, it will be vertically centered
                  in its space.  Similarly if you have positioned a component relative
                  to the baseline and none of the components in the row have a valid
                  baseline the component is vertically centered.
                  &lt;p&gt;
                  The following figures show ten components (all buttons)
                  managed by a grid bag layout.  Figure 2 shows the layout for a horizontal,
                  left-to-right container and Figure 3 shows the layout for a horizontal,
                  right-to-left container.
                  &lt;p&gt;
                  &lt;center&gt;&lt;table COLS=2 WIDTH=600 summary=&quot;layout&quot;&gt;
                  &lt;tr ALIGN=CENTER&gt;
                  &lt;td&gt;
                  &lt;img src=&quot;doc-files/GridBagLayout-1.gif&quot; alt=&quot;The preceeding text describes this graphic (Figure 1).&quot; ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;/td&gt;
                  &lt;td&gt;
                  &lt;img src=&quot;doc-files/GridBagLayout-2.gif&quot; alt=&quot;The preceeding text describes this graphic (Figure 2).&quot; ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;/td&gt;
                  &lt;tr ALIGN=CENTER&gt;
                  &lt;td&gt;Figure 2: Horizontal, Left-to-Right&lt;/td&gt;
                  &lt;td&gt;Figure 3: Horizontal, Right-to-Left&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;&lt;/center&gt;
                  &lt;p&gt;
                  Each of the ten components has the &lt;code&gt;fill&lt;/code&gt; field
                  of its associated &lt;code&gt;GridBagConstraints&lt;/code&gt; object
                  set to &lt;code&gt;GridBagConstraints.BOTH&lt;/code&gt;.
                  In addition, the components have the following non-default constraints:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Button1, Button2, Button3: &lt;code&gt;weightx&amp;nbsp;=&amp;nbsp;1.0&lt;/code&gt;
                  &lt;li&gt;Button4: &lt;code&gt;weightx&amp;nbsp;=&amp;nbsp;1.0&lt;/code&gt;,
                  &lt;code&gt;gridwidth&amp;nbsp;=&amp;nbsp;GridBagConstraints.REMAINDER&lt;/code&gt;
                  &lt;li&gt;Button5: &lt;code&gt;gridwidth&amp;nbsp;=&amp;nbsp;GridBagConstraints.REMAINDER&lt;/code&gt;
                  &lt;li&gt;Button6: &lt;code&gt;gridwidth&amp;nbsp;=&amp;nbsp;GridBagConstraints.RELATIVE&lt;/code&gt;
                  &lt;li&gt;Button7: &lt;code&gt;gridwidth&amp;nbsp;=&amp;nbsp;GridBagConstraints.REMAINDER&lt;/code&gt;
                  &lt;li&gt;Button8: &lt;code&gt;gridheight&amp;nbsp;=&amp;nbsp;2&lt;/code&gt;,
                  &lt;code&gt;weighty&amp;nbsp;=&amp;nbsp;1.0&lt;/code&gt;
                  &lt;li&gt;Button9, Button 10:
                  &lt;code&gt;gridwidth&amp;nbsp;=&amp;nbsp;GridBagConstraints.REMAINDER&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Here is the code that implements the example shown above:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  import java.awt.;
                  import java.util.;
                  import java.applet.Applet;
                  public class GridBagEx1 extends Applet {
                  protected void makebutton(String name,
                  GridBagLayout gridbag,
                  GridBagConstraints c) {
                  Button button = new Button(name);
                  gridbag.setConstraints(button, c);
                  add(button);
                  }
                  public void init() {
                  GridBagLayout gridbag = new GridBagLayout();
                  GridBagConstraints c = new GridBagConstraints();
                  setFont(new Font(&quot;SansSerif&quot;, Font.PLAIN, 14));
                  setLayout(gridbag);
                  c.fill = GridBagConstraints.BOTH;
                  c.weightx = 1.0;
                  makebutton(&quot;Button1&quot;, gridbag, c);
                  makebutton(&quot;Button2&quot;, gridbag, c);
                  makebutton(&quot;Button3&quot;, gridbag, c);
                  c.gridwidth = GridBagConstraints.REMAINDER; //end row
                  makebutton(&quot;Button4&quot;, gridbag, c);
                  c.weightx = 0.0;                //reset to the default
                  makebutton(&quot;Button5&quot;, gridbag, c); //another row
                  c.gridwidth = GridBagConstraints.RELATIVE; //next-to-last in row
                  makebutton(&quot;Button6&quot;, gridbag, c);
                  c.gridwidth = GridBagConstraints.REMAINDER; //end row
                  makebutton(&quot;Button7&quot;, gridbag, c);
                  c.gridwidth = 1;                //reset to the default
                  c.gridheight = 2;
                  c.weighty = 1.0;
                  makebutton(&quot;Button8&quot;, gridbag, c);
                  c.weighty = 0.0;                //reset to the default
                  c.gridwidth = GridBagConstraints.REMAINDER; //end row
                  c.gridheight = 1;               //reset to the default
                  makebutton(&quot;Button9&quot;, gridbag, c);
                  makebutton(&quot;Button10&quot;, gridbag, c);
                  setSize(300, 100);
                  }
                  public static void main(String args[]) {
                  Frame f = new Frame(&quot;GridBag Layout Example&quot;);
                  GridBagEx1 ex1 = new GridBagEx1();
                  ex1.init();
                  f.add(&quot;Center&quot;, ex1);
                  f.pack();
                  f.setSize(f.getPreferredSize());
                  f.show();
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;                
                <author>
                    Doug Stein                    
                </author>
                <author>
                    Bill Spitzak (orignial NeWS & OLIT implementation)                    
                </author>
                <see>
                    java.awt.GridBagConstraints                    
                </see>
                <see>
                    java.awt.GridBagLayoutInfo                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="EMPIRICMULTIPLIER" type="int" line="361"/>
            <declaration name="MAXGRIDSIZE" type="int" line="362"/>
            <javadoc line="362">
                This field is no longer used to reserve arrays and keeped for backward
                  compatibility. Previously, this was
                  the maximum number of grid positions (both horizontal and
                  vertical) that could be laid out by the grid bag layout.
                  Current implementation doesn&apos;t impose any limits
                  on the size of a grid.                
            </javadoc>
            <declaration name="MINSIZE" type="int" line="372"/>
            <javadoc line="372">
                The smallest grid that can be laid out by the grid bag layout.                
            </javadoc>
            <declaration name="PREFERREDSIZE" type="int" line="376"/>
            <javadoc line="376">
                The preferred grid size that can be laid out by the grid bag layout.                
            </javadoc>
            <declaration name="comptable" type="Hashtable&lt;Component,GridBagConstraints&gt;" line="381"/>
            <javadoc line="381">
                This hashtable maintains the association between
                  a component and its gridbag constraints.
                  The Keys in &lt;code&gt;comptable&lt;/code&gt; are the components and the
                  values are the instances of &lt;code&gt;GridBagConstraints&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    java.awt.GridBagConstraints                    
                </see>
            </javadoc>
            <declaration name="defaultConstraints" type="GridBagConstraints" line="392"/>
            <javadoc line="392">
                This field holds a gridbag constraints instance
                  containing the default values, so if a component
                  does not have gridbag constraints associated with
                  it, then the component will be assigned a
                  copy of the &lt;code&gt;defaultConstraints&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getConstraints(Component)                    
                </see>
                <see>
                    #setConstraints(Component,GridBagConstraints)                    
                </see>
                <see>
                    #lookupConstraints(Component)                    
                </see>
            </javadoc>
            <declaration name="layoutInfo" type="GridBagLayoutInfo" line="406"/>
            <javadoc line="406">
                This field holds the layout information
                  for the gridbag.  The information in this field
                  is based on the most recent validation of the
                  gridbag.
                  If &lt;code&gt;layoutInfo&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                  this indicates that there are no components in
                  the gridbag or if there are components, they have
                  not yet been validated.                
                <serial>
                                        
                </serial>
                <see>
                    #getLayoutInfo(Container,int)                    
                </see>
            </javadoc>
            <declaration name="columnWidths" type="int" line="421"/>
            <javadoc line="421">
                This field holds the overrides to the column minimum
                  width.  If this field is non-&lt;code&gt;null&lt;/code&gt; the values are
                  applied to the gridbag after all of the minimum columns
                  widths have been calculated.
                  If columnWidths has more elements than the number of
                  columns, columns are added to the gridbag to match
                  the number of elements in columnWidth.                
                <serial>
                                        
                </serial>
                <see>
                    #getLayoutDimensions()                    
                </see>
            </javadoc>
            <declaration name="rowHeights" type="int" line="435"/>
            <javadoc line="435">
                This field holds the overrides to the row minimum
                  heights.  If this field is non-&lt;code&gt;null&lt;/code&gt; the values are
                  applied to the gridbag after all of the minimum row
                  heights have been calculated.
                  If &lt;code&gt;rowHeights&lt;/code&gt; has more elements than the number of
                  rows, rowa are added to the gridbag to match
                  the number of elements in &lt;code&gt;rowHeights&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getLayoutDimensions()                    
                </see>
            </javadoc>
            <declaration name="columnWeights" type="double" line="449"/>
            <javadoc line="449">
                This field holds the overrides to the column weights.
                  If this field is non-&lt;code&gt;null&lt;/code&gt; the values are
                  applied to the gridbag after all of the columns
                  weights have been calculated.
                  If &lt;code&gt;columnWeights[i]&lt;/code&gt; &amp;gt; weight for column i, then
                  column i is assigned the weight in &lt;code&gt;columnWeights[i]&lt;/code&gt;.
                  If &lt;code&gt;columnWeights&lt;/code&gt; has more elements than the number
                  of columns, the excess elements are ignored - they do
                  not cause more columns to be created.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rowWeights" type="double" line="464"/>
            <javadoc line="464">
                This field holds the overrides to the row weights.
                  If this field is non-&lt;code&gt;null&lt;/code&gt; the values are
                  applied to the gridbag after all of the rows
                  weights have been calculated.
                  If &lt;code&gt;rowWeights[i]&lt;/code&gt; &amp;gt; weight for row i, then
                  row i is assigned the weight in &lt;code&gt;rowWeights[i]&lt;/code&gt;.
                  If &lt;code&gt;rowWeights&lt;/code&gt; has more elements than the number
                  of rows, the excess elements are ignored - they do
                  not cause more rows to be created.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="componentAdjusting" type="Component" line="479"/>
            <javadoc line="479">
                The component being positioned.  This is set before calling into
                  &lt;code&gt;adjustForGravity&lt;/code&gt;.                
            </javadoc>
            <javadoc line="485">
                Creates a grid bag layout manager.                
            </javadoc>
            <method name="GridBagLayout" type="constructor" line="488"/>
            <javadoc line="493">
                Sets the constraints for the specified component in this layout.                
                <param>
                    comp the component to be modified                    
                </param>
                <param>
                    constraints the constraints to be applied                    
                </param>
            </javadoc>
            <method name="setConstraints" type="void" line="498">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="GridBagConstraints"/>
                </params>
            </method>
            <javadoc line="502">
                Gets the constraints for the specified component.  A copy of
                  the actual &lt;code&gt;GridBagConstraints&lt;/code&gt; object is returned.                
                <param>
                    comp the component to be queried                    
                </param>
                <return>
                    the constraint for the specified component in this
                      grid bag layout; a copy of the actual constraint
                      object is returned                    
                </return>
            </javadoc>
            <method name="getConstraints" type="GridBagConstraints" line="510">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="constraints" type="GridBagConstraints" line="511"/>
                <scope line="512"/>
            </method>
            <javadoc line="519">
                Retrieves the constraints for the specified component.
                  The return value is not a copy, but is the actual
                  &lt;code&gt;GridBagConstraints&lt;/code&gt; object used by the layout mechanism.
                  &lt;p&gt;
                  If &lt;code&gt;comp&lt;/code&gt; is not in the &lt;code&gt;GridBagLayout&lt;/code&gt;,
                  a set of default &lt;code&gt;GridBagConstraints&lt;/code&gt; are returned.
                  A &lt;code&gt;comp&lt;/code&gt; value of &lt;code&gt;null&lt;/code&gt; is invalid
                  and returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    comp the component to be queried                    
                </param>
                <return>
                    the contraints for the specified component                    
                </return>
            </javadoc>
            <method name="lookupConstraints" type="GridBagConstraints" line="532">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="constraints" type="GridBagConstraints" line="533"/>
                <scope line="534"/>
            </method>
            <javadoc line="541">
                Removes the constraints for the specified component in this layout                
                <param>
                    comp the component to be modified                    
                </param>
            </javadoc>
            <method name="removeConstraints" type="void" line="545">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="549">
                Determines the origin of the layout area, in the graphics coordinate
                  space of the target container.  This value represents the pixel
                  coordinates of the top-left corner of the layout area regardless of
                  the &lt;code&gt;ComponentOrientation&lt;/code&gt; value of the container.  This
                  is distinct from the grid origin given by the cell coordinates (0,0).
                  Most applications do not call this method directly.                
                <return>
                    the graphics origin of the cell in the top-left
                      corner of the layout grid                    
                </return>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLayoutOrigin" type="Point" line="561">
                <declaration name="origin" type="Point" line="562"/>
                <scope line="563"/>
            </method>
            <javadoc line="570">
                Determines column widths and row heights for the layout grid.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <return>
                    an array of two arrays, containing the widths
                      of the layout columns and
                      the heights of the layout rows                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLayoutDimensions" type="int[][]" line="579">
                <declaration name="dim" type="int" line="583"/>
            </method>
            <javadoc line="593">
                Determines the weights of the layout grid&apos;s columns and rows.
                  Weights are used to calculate how much a given column or row
                  stretches beyond its preferred size, if the layout has extra
                  room to fill.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <return>
                    an array of two arrays, representing the
                      horizontal weights of the layout columns
                      and the vertical weights of the layout rows                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getLayoutWeights" type="double[][]" line="605">
                <declaration name="weights" type="double" line="609"/>
            </method>
            <javadoc line="619">
                Determines which cell in the layout grid contains the point
                  specified by &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt;. Each cell is identified
                  by its column index (ranging from 0 to the number of columns
                  minus 1) and its row index (ranging from 0 to the number of
                  rows minus 1).
                  &lt;p&gt;
                  If the &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; point lies
                  outside the grid, the following rules are used.
                  The column index is returned as zero if &lt;code&gt;x&lt;/code&gt; lies to the
                  left of the layout for a left-to-right container or to the right of
                  the layout for a right-to-left container.  The column index is returned
                  as the number of columns if &lt;code&gt;x&lt;/code&gt; lies
                  to the right of the layout in a left-to-right container or to the left
                  in a right-to-left container.
                  The row index is returned as zero if &lt;code&gt;y&lt;/code&gt; lies above the
                  layout, and as the number of rows if &lt;code&gt;y&lt;/code&gt; lies
                  below the layout.  The orientation of a container is determined by its
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property.                
                <param>
                    x    the <i>x</i> coordinate of a point                    
                </param>
                <param>
                    y    the <i>y</i> coordinate of a point                    
                </param>
                <return>
                    an ordered pair of indexes that indicate which cell
                      in the layout grid contains the point
                      (<i>x</i>,&nbsp;<i>y</i>).                    
                </return>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="location" type="Point" line="646">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="loc" type="Point" line="647"/>
                <declaration name="i" type="int" line="648"/>
                <scope line="654">
                    <scope line="655"/>
                </scope>
                <scope line="660">
                    <scope line="661"/>
                </scope>
                <scope line="671"/>
            </method>
            <javadoc line="681">
                Has no effect, since this layout manager does not use a per-component string.                
            </javadoc>
            <method name="addLayoutComponent" type="void" line="684">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="687">
                Adds the specified component to the layout, using the specified
                  &lt;code&gt;constraints&lt;/code&gt; object.  Note that constraints
                  are mutable and are, therefore, cloned when cached.                
                <param>
                    comp         the component to be added                    
                </param>
                <param>
                    constraints  an object that determines how
                      the component is added to the layout                    
                </param>
                <exception>
                    IllegalArgumentException if <code>constraints</code>
                      is not a <code>GridBagConstraint</code>                    
                </exception>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="698">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="699"/>
                <scope line="701"/>
            </method>
            <javadoc line="706">
                Removes the specified component from this layout.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <param>
                    comp   the component to be removed.                    
                </param>
                <see>
                    java.awt.Container#remove(java.awt.Component)                    
                </see>
                <see>
                    java.awt.Container#removeAll()                    
                </see>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="714">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="718">
                Determines the preferred size of the &lt;code&gt;parent&lt;/code&gt;
                  container using this grid bag layout.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <param>
                    parent   the container in which to do the layout                    
                </param>
                <see>
                    java.awt.Container#getPreferredSize                    
                </see>
                <return>
                    the preferred size of the <code>parent</code>
                      container                    
                </return>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="729">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="info" type="GridBagLayoutInfo" line="730"/>
            </method>
            <javadoc line="734">
                Determines the minimum size of the &lt;code&gt;parent&lt;/code&gt; container
                  using this grid bag layout.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <param>
                    parent   the container in which to do the layout                    
                </param>
                <see>
                    java.awt.Container#doLayout                    
                </see>
                <return>
                    the minimum size of the <code>parent</code> container                    
                </return>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="743">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="info" type="GridBagLayoutInfo" line="744"/>
            </method>
            <javadoc line="748">
                Returns the maximum dimensions for this layout given the components
                  in the specified target container.                
                <param>
                    target the container which needs to be laid out                    
                </param>
                <see>
                    Container                    
                </see>
                <see>
                    #minimumLayoutSize(Container)                    
                </see>
                <see>
                    #preferredLayoutSize(Container)                    
                </see>
                <return>
                    the maximum dimensions for this layout                    
                </return>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="757">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="761">
                Returns the alignment along the x axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.
                  &lt;p&gt;                
                <return>
                    the value <code>0.5f</code> to indicate centered                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="770">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="774">
                Returns the alignment along the y axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.
                  &lt;p&gt;                
                <return>
                    the value <code>0.5f</code> to indicate centered                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="783">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="787">
                Invalidates the layout, indicating that if the layout manager
                  has cached information it should be discarded.                
            </javadoc>
            <method name="invalidateLayout" type="void" line="791">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="794">
                Lays out the specified container using this grid bag layout.
                  This method reshapes components in the specified container in
                  order to satisfy the contraints of this &lt;code&gt;GridBagLayout&lt;/code&gt;
                  object.
                  &lt;p&gt;
                  Most applications do not call this method directly.                
                <param>
                    parent the container in which to do the layout                    
                </param>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="layoutContainer" type="void" line="805">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="809">
                Returns a string representation of this grid bag layout&apos;s values.                
                <return>
                    a string representation of this grid bag layout.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="813"/>
            <javadoc line="886">
                Fills in an instance of &lt;code&gt;GridBagLayoutInfo&lt;/code&gt; for the
                  current set of managed children. This requires three passes through the
                  set of children:
                  &lt;ol&gt;
                  &lt;li&gt;Figure out the dimensions of the layout grid.
                  &lt;li&gt;Determine which cells the components occupy.
                  &lt;li&gt;Distribute the weights and min sizes amoung the rows/columns.
                  &lt;/ol&gt;
                  This also caches the minsizes for all the children when they are
                  first encountered (so subsequent loops don&apos;t need to ask again).
                  &lt;p&gt;
                  This method should only be used internally by
                  &lt;code&gt;GridBagLayout&lt;/code&gt;.                
                <param>
                    parent  the layout container                    
                </param>
                <param>
                    sizeflag either <code>PREFERREDSIZE</code> or
                      <code>MINSIZE</code>                    
                </param>
                <return>
                    the <code>GridBagLayoutInfo</code> for the set of children                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLayoutInfo" type="GridBagLayoutInfo" line="909">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="sizeflag" type="int"/>
                </params>
            </method>
            <method name="preInitMaximumArraySizes" type="long[]" line="919">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="941">
                    -1==RELATIVE, means that column|row equals to previously added component,                    
                </comment>
                <comment line="942">
                    since each next Component with gridx|gridy == RELATIVE starts from                    
                </comment>
                <comment line="943">
                    previous position, so we should start from previous component which                    
                </comment>
                <comment line="944">
                    already used in maximumArray[X|Y]Index calculation. We could just increase                    
                </comment>
                <comment line="945">
                    maximum by 1 to handle situation when component with gridx=-1 was added.                    
                </comment>
                <comment line="952">
                    gridwidth|gridheight may be equal to RELATIVE (-1) or REMAINDER (0)                    
                </comment>
                <comment line="953">
                    in any case using 1 instead of 0 or -1 should be sufficient to for                    
                </comment>
                <comment line="954">
                    correct maximumArraySizes calculation                    
                </comment>
                <comment line="964">
                    for (components) loop                    
                </comment>
                <comment line="965">
                    Must specify index++ to allocate well-working arrays.                    
                </comment>
                <comment line="966">
                    fix for 4623196.
                     now return long array instead of Point                    
                </comment>
                <declaration name="components" type="Component" line="920"/>
                <declaration name="comp" type="Component" line="921"/>
                <declaration name="constraints" type="GridBagConstraints" line="922"/>
                <declaration name="curX" type="int" line="923"/>
                <declaration name="curWidth" type="int" line="924"/>
                <declaration name="preMaximumArrayXIndex" type="int" line="925"/>
                <declaration name="preMaximumArrayYIndex" type="int" line="926"/>
                <declaration name="returnArray" type="long[]" line="927"/>
                <scope line="929">
                    <scope line="931"/>
                    <scope line="946"/>
                    <scope line="949"/>
                    <scope line="955"/>
                    <scope line="958"/>
                </scope>
            </method>
            <javadoc line="974">
                This method is obsolete and supplied for backwards
                  compatability only; new code should call {@link #getLayoutInfo(java.awt.Container,int) getLayoutInfo} instead.
                  This method is the same as &lt;code&gt;getLayoutInfo&lt;/code&gt;;
                  refer to &lt;code&gt;getLayoutInfo&lt;/code&gt; for details on parameters
                  and return value.                
            </javadoc>
            <method name="GetLayoutInfo" type="GridBagLayoutInfo" line="982">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="sizeflag" type="int"/>
                </params>
                <comment line="989">
                    Code below will address index curX+curWidth in the case of yMaxArray, weightY                    
                </comment>
                <comment line="990">
                    ( respectively curY+curHeight for xMaxArray, weightX ) where                    
                </comment>
                <comment line="991">
                    curX in 0 to preInitMaximumArraySizes.y                    
                </comment>
                <comment line="992">
                    Thus, the maximum index that could                    
                </comment>
                <comment line="993">
                    be calculated in the following code is curX+curX.                    
                </comment>
                <comment line="994">
                    EmpericMultier equals 2 because of this.                    
                </comment>
                <comment line="1000">
                    constraints.gridx                    
                </comment>
                <comment line="1001">
                    constraints.gridy                    
                </comment>
                <comment line="1002">
                    constraints.gridwidth                    
                </comment>
                <comment line="1003">
                    constraints.gridheight                    
                </comment>
                <comment line="1010">
                    Pass #1
                    
                     Figure out the dimensions of the layout grid (use a value of 1 for
                     zero or negative widths and heights).                    
                </comment>
                <comment line="1021">
                    fix for 4623196.
                     If user try to create a very big grid we can
                     get NegativeArraySizeException because of integer value
                     overflow (EMPIRICMULTIPLIERgridSize might be more then Integer.MAX_VALUE).
                     We need to detect this situation and try to create a
                     grid with Integer.MAX_VALUE size instead.                    
                </comment>
                <comment line="1057">
                                        
                </comment>
                <comment line="1086">
                    Adjust the grid width and height
                      fix for 5005945: unneccessary loops removed                    
                </comment>
                <comment line="1098">
                                        
                </comment>
                <comment line="1107">
                                        
                </comment>
                <comment line="1118">
                    Zero width and height must mean that this is the last item (or                    
                </comment>
                <comment line="1123">
                                        
                </comment>
                <comment line="1127">
                                        
                </comment>
                <comment line="1130">
                    for (components) loop                    
                </comment>
                <comment line="1133">
                    Apply minimum rowcolumn dimensions                    
                </comment>
                <comment line="1143">
                    Pass #2
                    
                     Negative values for gridX are filled in with the current x value.
                     Negative values for gridY are filled in with the current y value.
                     Negative or zero values for gridWidth and gridHeight end the current
                      row or column, respectively.                    
                </comment>
                <comment line="1180">
                                        
                </comment>
                <comment line="1240">
                                        
                </comment>
                <comment line="1248">
                                        
                </comment>
                <comment line="1298">
                    Component positioned above the baseline.                    
                </comment>
                <comment line="1299">
                    To make the bottom edge of the component aligned                    
                </comment>
                <comment line="1300">
                    with the baseline the bottom inset is                    
                </comment>
                <comment line="1301">
                    added to the descent, the rest to the ascent.                    
                </comment>
                <comment line="1313">
                    Component positioned below the baseline.                    
                </comment>
                <comment line="1314">
                    To make the top edge of the component aligned                    
                </comment>
                <comment line="1315">
                    with the baseline the top inset is                    
                </comment>
                <comment line="1316">
                    added to the ascent, the rest to the descent.                    
                </comment>
                <comment line="1334">
                    Apply minimum rowcolumn dimensions and weights                    
                </comment>
                <comment line="1346">
                    Pass #3
                    
                     Distribute the minimun widths and weights:                    
                </comment>
                <comment line="1364">
                                        
                </comment>
                <comment line="1366">
                    Figure out if we should use this slave\&apos;s weight.  If the weight
                     is less than the total weight spanned by the width of the cell,
                     then discard the weight.  Otherwise split the difference
                     according to the existing weights.                    
                </comment>
                <comment line="1387">
                                        
                </comment>
                <comment line="1391">
                    Calculate the minWidth array values.
                     First, figure out how wide the current slave needs to be.
                     Then, see if it will fit within the current minWidth values.
                     If it will not fit, add the difference according to the
                     weightX array.                    
                </comment>
                <comment line="1416">
                                        
                </comment>
                <comment line="1425">
                                        
                </comment>
                <comment line="1427">
                    Figure out if we should use this slave&apos;s weight.  If the weight
                     is less than the total weight spanned by the height of the cell,
                     then discard the weight.  Otherwise split it the difference
                     according to the existing weights.                    
                </comment>
                <comment line="1448">
                                        
                </comment>
                <comment line="1452">
                    Calculate the minHeight array values.
                     First, figure out how tall the current slave needs to be.
                     Then, see if it will fit within the current minHeight values.
                     If it will not fit, add the difference according to the
                     weightY array.                    
                </comment>
                <comment line="1523">
                                        
                </comment>
                <scope line="983">
                    <declaration name="r" type="GridBagLayoutInfo" line="984"/>
                    <declaration name="comp" type="Component" line="985"/>
                    <declaration name="constraints" type="GridBagConstraints" line="986"/>
                    <declaration name="d" type="Dimension" line="987"/>
                    <declaration name="components" type="Component" line="988"/>
                    <declaration name="layoutWidth" type="int" line="996"/>
                    <declaration name="xMaxArray" type="int[]" line="997"/>
                    <declaration name="yMaxArray" type="int[]" line="998"/>
                    <declaration name="compindex" type="int" line="999"/>
                    <declaration name="curX" type="int" line="1000"/>
                    <declaration name="curY" type="int" line="1001"/>
                    <declaration name="curWidth" type="int" line="1002"/>
                    <declaration name="curHeight" type="int" line="1003"/>
                    <declaration name="curRow" type="int" line="1004"/>
                    <declaration name="weight_diff" type="double" line="1005"/>
                    <declaration name="maximumArrayXIndex" type="int" line="1006"/>
                    <declaration name="maximumArrayYIndex" type="int" line="1007"/>
                    <declaration name="anchor" type="int" line="1008"/>
                    <declaration name="arraySizes" type="long[]" line="1019"/>
                    <scope line="1031"/>
                    <scope line="1034"/>
                    <declaration name="hasBaseline" type="boolean" line="1041"/>
                    <scope line="1042">
                        <scope line="1058"/>
                        <scope line="1066">
                            <scope line="1068"/>
                        </scope>
                        <scope line="1076">
                            <scope line="1078"/>
                        </scope>
                        <scope line="1090"/>
                        <scope line="1094"/>
                        <scope line="1099"/>
                        <scope line="1102"/>
                        <scope line="1114"/>
                    </scope>
                    <declaration name="maxAscent" type="int[]" line="1157"/>
                    <declaration name="maxDescent" type="int[]" line="1158"/>
                    <declaration name="baselineType" type="short[]" line="1159"/>
                    <scope line="1161"/>
                    <scope line="1169">
                        <scope line="1181"/>
                        <scope line="1190">
                            <scope line="1191"/>
                        </scope>
                        <scope line="1205">
                            <scope line="1206"/>
                            <scope line="1213"/>
                        </scope>
                        <scope line="1222"/>
                        <scope line="1228"/>
                        <scope line="1237"/>
                        <scope line="1238"/>
                        <scope line="1255">
                            <scope line="1260">
                                <scope line="1261"/>
                                <scope line="1269">
                                    <scope line="1272"/>
                                    <scope line="1278"/>
                                </scope>
                                <scope line="1284"/>
                                <scope line="1289"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1356">
                        <scope line="1357">
                            <scope line="1363">
                                <scope line="1376">
                                    <scope line="1380">
                                        <declaration name="wt" type="double" line="1381"/>
                                        <declaration name="dx" type="double" line="1382"/>
                                    </scope>
                                </scope>
                                <scope line="1405">
                                    <scope line="1409">
                                        <declaration name="wt" type="double" line="1410"/>
                                        <declaration name="dx" type="int" line="1411"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="1424">
                                <scope line="1437">
                                    <scope line="1441">
                                        <declaration name="wt" type="double" line="1442"/>
                                        <declaration name="dy" type="double" line="1443"/>
                                    </scope>
                                </scope>
                                <scope line="1461">
                                    <scope line="1466">
                                        <scope line="1467"/>
                                        <scope line="1474"/>
                                        <scope line="1479"/>
                                    </scope>
                                </scope>
                                <scope line="1504"/>
                                <scope line="1512">
                                    <scope line="1516">
                                        <declaration name="wt" type="double" line="1517"/>
                                        <declaration name="dy" type="int" line="1518"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1536">
                Calculate the baseline for the specified component.
                  If {@code c} is positioned along it&apos;s baseline, the baseline is
                  obtained and the {@code constraints} ascent, descent and
                  baseline resize behavior are set from the component; and true is
                  returned. Otherwise false is returned.                
            </javadoc>
            <method name="calculateBaseline" type="boolean" line="1545">
                <params>
                    <param name="c" type="Component"/>
                    <param name="constraints" type="GridBagConstraints"/>
                    <param name="size" type="Dimension"/>
                </params>
                <comment line="1550">
                    Apply the padding to the component, then ask for the baseline.                    
                </comment>
                <comment line="1555">
                    Component has a baseline                    
                </comment>
                <comment line="1557">
                    Adjust the ascent and descent to include the insets.                    
                </comment>
                <comment line="1566">
                    Component has a baseline resize behavior of                    
                </comment>
                <comment line="1567">
                    CENTER_OFFSET, calculate centerPadding and                    
                </comment>
                <comment line="1568">
                    centerOffset (see the description of                    
                </comment>
                <comment line="1569">
                    CENTER_OFFSET in the enum for detais on this                    
                </comment>
                <comment line="1570">
                    algorithm).                    
                </comment>
                <declaration name="anchor" type="int" line="1546"/>
                <scope line="1549">
                    <declaration name="w" type="int" line="1551"/>
                    <declaration name="h" type="int" line="1552"/>
                    <scope line="1554">
                        <declaration name="baseline" type="int" line="1556"/>
                        <scope line="1565">
                            <declaration name="nextBaseline" type="int" line="1571"/>
                            <scope line="1573">
                                <scope line="1574"/>
                            </scope>
                            <scope line="1578"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1586"/>
            </method>
            <javadoc line="1592">
                Adjusts the x, y, width, and height fields to the correct
                  values depending on the constraint geometry and pads.
                  This method should only be used internally by
                  &lt;code&gt;GridBagLayout&lt;/code&gt;.                
                <param>
                    constraints the constraints to be applied                    
                </param>
                <param>
                    r the <code>Rectangle</code> to be adjusted                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="adjustForGravity" type="void" line="1603">
                <params>
                    <param name="constraints" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="1607">
                This method is obsolete and supplied for backwards
                  compatability only; new code should call {@link #adjustForGravity(java.awt.GridBagConstraints,java.awt.Rectangle)adjustForGravity} instead.
                  This method is the same as &lt;code&gt;adjustForGravity&lt;/code&gt;;
                  refer to &lt;code&gt;adjustForGravity&lt;/code&gt; for details
                  on parameters.                
            </javadoc>
            <method name="AdjustForGravity" type="void" line="1617">
                <params>
                    <param name="constraints" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="diffx" type="int" line="1618"/>
                <declaration name="cellY" type="int" line="1619"/>
                <declaration name="cellHeight" type="int" line="1620"/>
                <scope line="1622"/>
                <scope line="1624"/>
                <scope line="1634"/>
                <scope line="1642"/>
                <scope line="1653"/>
                <scope line="1659"/>
                <scope line="1669"/>
                <scope line="1675"/>
                <scope line="1685"/>
                <scope line="1691"/>
                <scope line="1729"/>
                <scope line="1735"/>
                <scope line="1741"/>
                <scope line="1746"/>
                <scope line="1751"/>
                <scope line="1757"/>
            </method>
            <javadoc line="1767">
                Positions on the baseline.                
                <param>
                    cellY the location of the row, does not include insets                    
                </param>
                <param>
                    cellHeight the height of the row, does not take into account
                      insets                    
                </param>
                <param>
                    r available bounds for the component, is padded by insets and
                      ipady                    
                </param>
            </javadoc>
            <method name="alignOnBaseline" type="void" line="1777">
                <params>
                    <param name="cons" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                    <param name="cellY" type="int"/>
                    <param name="cellHeight" type="int"/>
                </params>
                <comment line="1781">
                    Anchor to the bottom.                    
                </comment>
                <comment line="1782">
                    Baseline is at (cellY + cellHeight - maxDescent).                    
                </comment>
                <comment line="1783">
                    Bottom of component (maxY) is at baseline + descent                    
                </comment>
                <comment line="1784">
                    of component. We need to subtract the bottom inset here                    
                </comment>
                <comment line="1785">
                    as the descent in the constraints object includes the                    
                </comment>
                <comment line="1786">
                    bottom inset.                    
                </comment>
                <comment line="1791">
                    Component not resizable, calculate y location                    
                </comment>
                <comment line="1792">
                    from maxY - height.                    
                </comment>
                <comment line="1796">
                    Component is resizable. As brb is constant descent,                    
                </comment>
                <comment line="1797">
                    can expand component to fill region above baseline.                    
                </comment>
                <comment line="1798">
                    Subtract out the top inset so that components insets                    
                </comment>
                <comment line="1799">
                    are honored.                    
                </comment>
                <comment line="1804">
                    BRB is not constant_descent                    
                </comment>
                <comment line="1805">
                    baseline for the row, relative to cellY                    
                </comment>
                <comment line="1806">
                    Component baseline, includes insets.top                    
                </comment>
                <comment line="1809">
                    Mixed ascent/descent in same row, calculate position                    
                </comment>
                <comment line="1810">
                    off maxDescent                    
                </comment>
                <comment line="1814">
                    Only ascents/unknown in this row, anchor to top                    
                </comment>
                <comment line="1819">
                    BRB is other, which means we can only determine                    
                </comment>
                <comment line="1820">
                    the baseline by asking for it again giving the                    
                </comment>
                <comment line="1821">
                    size we plan on using for the component.                    
                </comment>
                <comment line="1825">
                    Component has a baseline, pad with top inset                    
                </comment>
                <comment line="1826">
                    (this follows from calculateBaseline which                    
                </comment>
                <comment line="1827">
                    does the same).                    
                </comment>
                <comment line="1831">
                    Components baseline fits within rows baseline.                    
                </comment>
                <comment line="1832">
                    Make sure the descent fits within the space as well.                    
                </comment>
                <comment line="1835">
                    It fits, we&apos;re good.                    
                </comment>
                <comment line="1839">
                    Doesn&apos;t fit, but it&apos;s resizable.  Try                    
                </comment>
                <comment line="1840">
                    again assuming we&apos;ll get ascent again.                    
                </comment>
                <comment line="1848">
                    It&apos;ll fit                    
                </comment>
                <comment line="1857">
                    Doesn&apos;t fit, use min size and original ascent                    
                </comment>
                <comment line="1863">
                    Reset the components y location based on                    
                </comment>
                <comment line="1864">
                    components ascent and baseline for row. Because ascent                    
                </comment>
                <comment line="1865">
                    includes the baseline                    
                </comment>
                <comment line="1883">
                    Off by 1                    
                </comment>
                <comment line="1893">
                    Handled above                    
                </comment>
                <scope line="1778">
                    <scope line="1780">
                        <declaration name="maxY" type="int" line="1787"/>
                        <scope line="1790"/>
                        <scope line="1795"/>
                    </scope>
                    <scope line="1803">
                        <declaration name="baseline" type="int" line="1805"/>
                        <declaration name="ascent" type="int" line="1807"/>
                        <scope line="1808"/>
                        <scope line="1813"/>
                        <scope line="1818">
                            <declaration name="fits" type="boolean" line="1822"/>
                            <scope line="1824"/>
                            <scope line="1830">
                                <scope line="1834"/>
                                <scope line="1838">
                                    <declaration name="ascent2" type="int" line="1841"/>
                                    <scope line="1844"/>
                                    <scope line="1847"/>
                                </scope>
                            </scope>
                            <scope line="1856"/>
                        </scope>
                        <scope line="1867">
                            <scope line="1874">
                                <declaration name="upper" type="int" line="1875"/>
                                <declaration name="lower" type="int" line="1876"/>
                                <declaration name="delta" type="int" line="1878"/>
                                <scope line="1882"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1901"/>
            </method>
            <javadoc line="1906">
                Positions the specified component above the baseline. That is
                  the bottom edge of the component will be aligned along the baseline.
                  If the row does not have a baseline, this centers the component.                
            </javadoc>
            <method name="alignAboveBaseline" type="void" line="1912">
                <params>
                    <param name="cons" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                    <param name="cellY" type="int"/>
                    <param name="cellHeight" type="int"/>
                </params>
                <comment line="1914">
                    Baseline for the row                    
                </comment>
                <comment line="1916">
                    Prefer descent                    
                </comment>
                <comment line="1920">
                    Prefer ascent                    
                </comment>
                <comment line="1924">
                    Component is resizable. Top edge is offset by top                    
                </comment>
                <comment line="1925">
                    inset, bottom edge on baseline.                    
                </comment>
                <comment line="1930">
                    Not resizable.                    
                </comment>
                <scope line="1913">
                    <declaration name="maxY" type="int" line="1914"/>
                    <scope line="1915"/>
                    <scope line="1919"/>
                    <scope line="1923"/>
                    <scope line="1929"/>
                </scope>
                <scope line="1935"/>
            </method>
            <javadoc line="1940">
                Positions below the baseline.                
            </javadoc>
            <method name="alignBelowBaseline" type="void" line="1944">
                <params>
                    <param name="cons" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                    <param name="cellY" type="int"/>
                    <param name="cellHeight" type="int"/>
                </params>
                <comment line="1947">
                    Prefer descent                    
                </comment>
                <comment line="1951">
                    Prefer ascent                    
                </comment>
                <scope line="1945">
                    <scope line="1946"/>
                    <scope line="1950"/>
                    <scope line="1954"/>
                </scope>
                <scope line="1958"/>
            </method>
            <method name="centerVertically" type="void" line="1964">
                <params>
                    <param name="cons" type="GridBagConstraints"/>
                    <param name="r" type="Rectangle"/>
                    <param name="cellHeight" type="int"/>
                </params>
                <scope line="1965"/>
            </method>
            <javadoc line="1972">
                Figures out the minimum size of the
                  master based on the information from &lt;code&gt;getLayoutInfo&lt;/code&gt;.
                  This method should only be used internally by
                  &lt;code&gt;GridBagLayout&lt;/code&gt;.                
                <param>
                    parent the layout container                    
                </param>
                <param>
                    info the layout info for this parent                    
                </param>
                <return>
                    a <code>Dimension</code> object containing the
                      minimum size                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMinSize" type="Dimension" line="1984">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="info" type="GridBagLayoutInfo"/>
                </params>
            </method>
            <javadoc line="1988">
                This method is obsolete and supplied for backwards
                  compatability only; new code should call {@link #getMinSize(java.awt.Container,GridBagLayoutInfo) getMinSize} instead.
                  This method is the same as &lt;code&gt;getMinSize&lt;/code&gt;;
                  refer to &lt;code&gt;getMinSize&lt;/code&gt; for details on parameters
                  and return value.                
            </javadoc>
            <method name="GetMinSize" type="Dimension" line="1996">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="info" type="GridBagLayoutInfo"/>
                </params>
                <declaration name="d" type="Dimension" line="1997"/>
                <declaration name="i" type="int" line="1998"/>
                <declaration name="insets" type="Insets" line="1999"/>
            </method>
            <declaration name="rightToLeft" type="boolean" line="2014"/>
            <javadoc line="2016">
                Lays out the grid.
                  This method should only be used internally by
                  &lt;code&gt;GridBagLayout&lt;/code&gt;.                
                <param>
                    parent the layout container                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="arrangeGrid" type="void" line="2024">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="2028">
                This method is obsolete and supplied for backwards
                  compatability only; new code should call {@link #arrangeGrid(Container) arrangeGrid} instead.
                  This method is the same as &lt;code&gt;arrangeGrid&lt;/code&gt;;
                  refer to &lt;code&gt;arrangeGrid&lt;/code&gt; for details on the
                  parameter.                
            </javadoc>
            <method name="ArrangeGrid" type="void" line="2036">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="2050">
                    If the parent has no slaves anymore, then don&apos;t do anything
                     at all:  just leave the parent&apos;s size as-is.                    
                </comment>
                <comment line="2060">
                    Pass #1: scan all the slaves to figure out the total amount
                     of space needed.                    
                </comment>
                <comment line="2077">
                    DEBUG
                    
                     DumpLayoutInfo(info);
                     for (compindex = 0 ; compindex &lt; components.length ; compindex++) {
                     comp = components[compindex];
                     if (!comp.isVisible())
                          continue;
                     constraints = lookupConstraints(comp);
                     DumpConstraints(constraints);
                     }
                     System.out.println(&quot;minSize &quot; + r.width + &quot; &quot; + r.height);                    
                </comment>
                <comment line="2091">
                    If the current dimensions of the window don&apos;t match the desired
                     dimensions, then adjust the minWidth and minHeight arrays
                     according to the weights.                    
                </comment>
                <comment line="2143">
                    DEBUG
                    
                     System.out.println(&quot;Re-adjusted:&quot;);
                     DumpLayoutInfo(info);                    
                </comment>
                <comment line="2150">
                    Now do the actual layout of the slaves using the layout information
                     that has been collected.                    
                </comment>
                <comment line="2196">
                                        
                </comment>
                <comment line="2197">
                                        
                </comment>
                <comment line="2208">
                    If the window is too small to be interesting then
                     unmap it.  Otherwise configure it and then make sure
                     it&apos;s mapped.                    
                </comment>
                <declaration name="comp" type="Component" line="2037"/>
                <declaration name="compindex" type="int" line="2038"/>
                <declaration name="constraints" type="GridBagConstraints" line="2039"/>
                <declaration name="insets" type="Insets" line="2040"/>
                <declaration name="components" type="Component" line="2041"/>
                <declaration name="d" type="Dimension" line="2042"/>
                <declaration name="r" type="Rectangle" line="2043"/>
                <declaration name="i" type="int" line="2044"/>
                <declaration name="weight" type="double" line="2045"/>
                <declaration name="info" type="GridBagLayoutInfo" line="2046"/>
                <scope line="2056"/>
                <scope line="2068"/>
                <scope line="2098">
                    <scope line="2102">
                        <scope line="2103">
                            <declaration name="dx" type="int" line="2104"/>
                            <scope line="2107"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="2116"/>
                <scope line="2121">
                    <scope line="2125">
                        <scope line="2126">
                            <declaration name="dy" type="int" line="2127"/>
                            <scope line="2130"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="2139"/>
                <scope line="2158">
                    <scope line="2160"/>
                    <scope line="2165"/>
                    <scope line="2169"/>
                    <scope line="2182"/>
                    <scope line="2189"/>
                    <scope line="2198"/>
                    <scope line="2203"/>
                    <scope line="2214"/>
                    <scope line="2217">
                        <scope line="2219"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="2227"/>
        </class>
    </source>