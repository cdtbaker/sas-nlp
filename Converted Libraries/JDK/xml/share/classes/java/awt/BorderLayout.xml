<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Hashtable"/>
        <class name="BorderLayout" line="30">
            <comment line="343">
                JDK 1.1 serialVersionUID                
            </comment>
            <implements interface="LayoutManager2"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="30">
                A border layout lays out a container, arranging and resizing
                  its components to fit in five regions:
                  north, south, east, west, and center.
                  Each region may contain no more than one component, and
                  is identified by a corresponding constant:
                  &lt;code&gt;NORTH&lt;/code&gt;, &lt;code&gt;SOUTH&lt;/code&gt;, &lt;code&gt;EAST&lt;/code&gt;,
                  &lt;code&gt;WEST&lt;/code&gt;, and &lt;code&gt;CENTER&lt;/code&gt;.  When adding a
                  component to a container with a border layout, use one of these
                  five constants, for example:
                  &lt;pre&gt;
                  Panel p = new Panel();
                  p.setLayout(new BorderLayout());
                  p.add(new Button(&quot;Okay&quot;), BorderLayout.SOUTH);
                  &lt;/pre&gt;
                  As a convenience, &lt;code&gt;BorderLayout&lt;/code&gt; interprets the
                  absence of a string specification the same as the constant
                  &lt;code&gt;CENTER&lt;/code&gt;:
                  &lt;pre&gt;
                  Panel p2 = new Panel();
                  p2.setLayout(new BorderLayout());
                  p2.add(new TextArea());  // Same as p.add(new TextArea(), BorderLayout.CENTER);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  In addition, &lt;code&gt;BorderLayout&lt;/code&gt; supports the relative
                  positioning constants, &lt;code&gt;PAGE_START&lt;/code&gt;, &lt;code&gt;PAGE_END&lt;/code&gt;,
                  &lt;code&gt;LINE_START&lt;/code&gt;, and &lt;code&gt;LINE_END&lt;/code&gt;.
                  In a container whose &lt;code&gt;ComponentOrientation&lt;/code&gt; is set to
                  &lt;code&gt;ComponentOrientation.LEFT_TO_RIGHT&lt;/code&gt;, these constants map to
                  &lt;code&gt;NORTH&lt;/code&gt;, &lt;code&gt;SOUTH&lt;/code&gt;, &lt;code&gt;WEST&lt;/code&gt;, and
                  &lt;code&gt;EAST&lt;/code&gt;, respectively.
                  &lt;p&gt;
                  For compatibility with previous releases, &lt;code&gt;BorderLayout&lt;/code&gt;
                  also includes the relative positioning constants &lt;code&gt;BEFORE_FIRST_LINE&lt;/code&gt;,
                  &lt;code&gt;AFTER_LAST_LINE&lt;/code&gt;, &lt;code&gt;BEFORE_LINE_BEGINS&lt;/code&gt; and
                  &lt;code&gt;AFTER_LINE_ENDS&lt;/code&gt;.  These are equivalent to
                  &lt;code&gt;PAGE_START&lt;/code&gt;, &lt;code&gt;PAGE_END&lt;/code&gt;, &lt;code&gt;LINE_START&lt;/code&gt;
                  and &lt;code&gt;LINE_END&lt;/code&gt; respectively.  For
                  consistency with the relative positioning constants used by other
                  components, the latter constants are preferred.
                  &lt;p&gt;
                  Mixing both absolute and relative positioning constants can lead to
                  unpredicable results.  If
                  you use both types, the relative constants will take precedence.
                  For example, if you add components using both the &lt;code&gt;NORTH&lt;/code&gt;
                  and &lt;code&gt;PAGE_START&lt;/code&gt; constants in a container whose
                  orientation is &lt;code&gt;LEFT_TO_RIGHT&lt;/code&gt;, only the
                  &lt;code&gt;PAGE_START&lt;/code&gt; will be layed out.
                  &lt;p&gt;
                  NOTE: Currently (in the Java 2 platform v1.2),
                  &lt;code&gt;BorderLayout&lt;/code&gt; does not support vertical
                  orientations.  The &lt;code&gt;isVertical&lt;/code&gt; setting on the container&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; is not respected.
                  &lt;p&gt;
                  The components are laid out according to their
                  preferred sizes and the constraints of the container&apos;s size.
                  The &lt;code&gt;NORTH&lt;/code&gt; and &lt;code&gt;SOUTH&lt;/code&gt; components may
                  be stretched horizontally; the &lt;code&gt;EAST&lt;/code&gt; and
                  &lt;code&gt;WEST&lt;/code&gt; components may be stretched vertically;
                  the &lt;code&gt;CENTER&lt;/code&gt; component may stretch both horizontally
                  and vertically to fill any space left over.
                  &lt;p&gt;
                  Here is an example of five buttons in an applet laid out using
                  the &lt;code&gt;BorderLayout&lt;/code&gt; layout manager:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/BorderLayout-1.gif&quot;
                  alt=&quot;Diagram of an applet demonstrating BorderLayout.
                  Each section of the BorderLayout contains a Button corresponding to its position in the layout, one of:
                  North, West, Center, East, or South.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  The code for this applet is as follows:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  import java.awt.;
                  import java.applet.Applet;
                  public class buttonDir extends Applet {
                  public void init() {
                  setLayout(new BorderLayout());
                  add(new Button(&quot;North&quot;), BorderLayout.NORTH);
                  add(new Button(&quot;South&quot;), BorderLayout.SOUTH);
                  add(new Button(&quot;East&quot;), BorderLayout.EAST);
                  add(new Button(&quot;West&quot;), BorderLayout.WEST);
                  add(new Button(&quot;Center&quot;), BorderLayout.CENTER);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.awt.Container#add(String,Component)                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="hgap" type="int" line="126"/>
            <javadoc line="126">
                Constructs a border layout with the horizontal gaps
                  between components.
                  The horizontal gap is specified by &lt;code&gt;hgap&lt;/code&gt;.                
                <see>
                    #getHgap()                    
                </see>
                <see>
                    #setHgap(int)                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="vgap" type="int" line="138"/>
            <javadoc line="138">
                Constructs a border layout with the vertical gaps
                  between components.
                  The vertical gap is specified by &lt;code&gt;vgap&lt;/code&gt;.                
                <see>
                    #getVgap()                    
                </see>
                <see>
                    #setVgap(int)                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="north" type="Component" line="149"/>
            <javadoc line="149">
                Constant to specify components location to be the
                  north portion of the border layout.                
                <serial>
                                        
                </serial>
                <see>
                    #getChild(String,boolean)                    
                </see>
                <see>
                    #addLayoutComponent                    
                </see>
                <see>
                    #getLayoutAlignmentX                    
                </see>
                <see>
                    #getLayoutAlignmentY                    
                </see>
                <see>
                    #removeLayoutComponent                    
                </see>
            </javadoc>
            <declaration name="west" type="Component" line="160"/>
            <javadoc line="160">
                Constant to specify components location to be the
                  west portion of the border layout.                
                <serial>
                                        
                </serial>
                <see>
                    #getChild(String,boolean)                    
                </see>
                <see>
                    #addLayoutComponent                    
                </see>
                <see>
                    #getLayoutAlignmentX                    
                </see>
                <see>
                    #getLayoutAlignmentY                    
                </see>
                <see>
                    #removeLayoutComponent                    
                </see>
            </javadoc>
            <declaration name="east" type="Component" line="171"/>
            <javadoc line="171">
                Constant to specify components location to be the
                  east portion of the border layout.                
                <serial>
                                        
                </serial>
                <see>
                    #getChild(String,boolean)                    
                </see>
                <see>
                    #addLayoutComponent                    
                </see>
                <see>
                    #getLayoutAlignmentX                    
                </see>
                <see>
                    #getLayoutAlignmentY                    
                </see>
                <see>
                    #removeLayoutComponent                    
                </see>
            </javadoc>
            <declaration name="south" type="Component" line="182"/>
            <javadoc line="182">
                Constant to specify components location to be the
                  south portion of the border layout.                
                <serial>
                                        
                </serial>
                <see>
                    #getChild(String,boolean)                    
                </see>
                <see>
                    #addLayoutComponent                    
                </see>
                <see>
                    #getLayoutAlignmentX                    
                </see>
                <see>
                    #getLayoutAlignmentY                    
                </see>
                <see>
                    #removeLayoutComponent                    
                </see>
            </javadoc>
            <declaration name="center" type="Component" line="193"/>
            <javadoc line="193">
                Constant to specify components location to be the
                  center portion of the border layout.                
                <serial>
                                        
                </serial>
                <see>
                    #getChild(String,boolean)                    
                </see>
                <see>
                    #addLayoutComponent                    
                </see>
                <see>
                    #getLayoutAlignmentX                    
                </see>
                <see>
                    #getLayoutAlignmentY                    
                </see>
                <see>
                    #removeLayoutComponent                    
                </see>
            </javadoc>
            <declaration name="firstLine" type="Component" line="205"/>
            <javadoc line="205">
                A relative positioning constant, that can be used instead of
                  north, south, east, west or center.
                  mixing the two types of constants can lead to unpredicable results.  If
                  you use both types, the relative constants will take precedence.
                  For example, if you add components using both the &lt;code&gt;NORTH&lt;/code&gt;
                  and &lt;code&gt;BEFORE_FIRST_LINE&lt;/code&gt; constants in a container whose
                  orientation is &lt;code&gt;LEFT_TO_RIGHT&lt;/code&gt;, only the
                  &lt;code&gt;BEFORE_FIRST_LINE&lt;/code&gt; will be layed out.
                  This will be the same for lastLine, firstItem, lastItem.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="lastLine" type="Component" line="219"/>
            <javadoc line="219">
                A relative positioning constant, that can be used instead of
                  north, south, east, west or center.
                  Please read Description for firstLine.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="firstItem" type="Component" line="226"/>
            <javadoc line="226">
                A relative positioning constant, that can be used instead of
                  north, south, east, west or center.
                  Please read Description for firstLine.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="lastItem" type="Component" line="233"/>
            <javadoc line="233">
                A relative positioning constant, that can be used instead of
                  north, south, east, west or center.
                  Please read Description for firstLine.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="NORTH" type="String" line="241"/>
            <javadoc line="241">
                The north layout constraint (top of container).                
            </javadoc>
            <declaration name="SOUTH" type="String" line="246"/>
            <javadoc line="246">
                The south layout constraint (bottom of container).                
            </javadoc>
            <declaration name="EAST" type="String" line="251"/>
            <javadoc line="251">
                The east layout constraint (right side of container).                
            </javadoc>
            <declaration name="WEST" type="String" line="256"/>
            <javadoc line="256">
                The west layout constraint (left side of container).                
            </javadoc>
            <declaration name="CENTER" type="String" line="261"/>
            <javadoc line="261">
                The center layout constraint (middle of container).                
            </javadoc>
            <declaration name="BEFORE_FIRST_LINE" type="String" line="266"/>
            <javadoc line="266">
                Synonym for PAGE_START.  Exists for compatibility with previous
                  versions.  PAGE_START is preferred.                
                <see>
                    #PAGE_START                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="AFTER_LAST_LINE" type="String" line="275"/>
            <javadoc line="275">
                Synonym for PAGE_END.  Exists for compatibility with previous
                  versions.  PAGE_END is preferred.                
                <see>
                    #PAGE_END                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="BEFORE_LINE_BEGINS" type="String" line="284"/>
            <javadoc line="284">
                Synonym for LINE_START.  Exists for compatibility with previous
                  versions.  LINE_START is preferred.                
                <see>
                    #LINE_START                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="AFTER_LINE_ENDS" type="String" line="293"/>
            <javadoc line="293">
                Synonym for LINE_END.  Exists for compatibility with previous
                  versions.  LINE_END is preferred.                
                <see>
                    #LINE_END                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="PAGE_START" type="String" line="302"/>
            <javadoc line="302">
                The component comes before the first line of the layout&apos;s content.
                  For Western, left-to-right and top-to-bottom orientations, this is
                  equivalent to NORTH.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="PAGE_END" type="String" line="312"/>
            <javadoc line="312">
                The component comes after the last line of the layout&apos;s content.
                  For Western, left-to-right and top-to-bottom orientations, this is
                  equivalent to SOUTH.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="LINE_START" type="String" line="322"/>
            <javadoc line="322">
                The component goes at the beginning of the line direction for the
                  layout. For Western, left-to-right and top-to-bottom orientations,
                  this is equivalent to WEST.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="LINE_END" type="String" line="332"/>
            <javadoc line="332">
                The component goes at the end of the line direction for the
                  layout. For Western, left-to-right and top-to-bottom orientations,
                  this is equivalent to EAST.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="345"/>
            <javadoc line="347">
                Constructs a new border layout with
                  no gaps between components.                
            </javadoc>
            <method name="BorderLayout" type="constructor" line="351"/>
            <javadoc line="355">
                Constructs a border layout with the specified gaps
                  between components.
                  The horizontal gap is specified by &lt;code&gt;hgap&lt;/code&gt;
                  and the vertical gap is specified by &lt;code&gt;vgap&lt;/code&gt;.                
                <param>
                    hgap   the horizontal gap.                    
                </param>
                <param>
                    vgap   the vertical gap.                    
                </param>
            </javadoc>
            <method name="BorderLayout" type="constructor" line="363">
                <params>
                    <param name="hgap" type="int"/>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="368">
                Returns the horizontal gap between components.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getHgap" type="int" line="372"/>
            <javadoc line="376">
                Sets the horizontal gap between components.                
                <param>
                    hgap the horizontal gap between components                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setHgap" type="void" line="381">
                <params>
                    <param name="hgap" type="int"/>
                </params>
            </method>
            <javadoc line="385">
                Returns the vertical gap between components.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getVgap" type="int" line="389"/>
            <javadoc line="393">
                Sets the vertical gap between components.                
                <param>
                    vgap the vertical gap between components                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVgap" type="void" line="398">
                <params>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="402">
                Adds the specified component to the layout, using the specified
                  constraint object.  For border layouts, the constraint must be
                  one of the following constants:  &lt;code&gt;NORTH&lt;/code&gt;,
                  &lt;code&gt;SOUTH&lt;/code&gt;, &lt;code&gt;EAST&lt;/code&gt;,
                  &lt;code&gt;WEST&lt;/code&gt;, or &lt;code&gt;CENTER&lt;/code&gt;.
                  &lt;p&gt;
                  Most applications do not call this method directly. This method
                  is called when a component is added to a container using the
                  &lt;code&gt;Container.add&lt;/code&gt; method with the same argument types.                
                <param>
                    comp         the component to be added.                    
                </param>
                <param>
                    constraints  an object that specifies how and where
                      the component is added to the layout.                    
                </param>
                <see>
                    java.awt.Container#add(java.awt.Component,java.lang.Object)                    
                </see>
                <exception>
                    IllegalArgumentException  if the constraint object is not
                      a string, or if it not one of the five specified
                      constants.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="421">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="422">
                    <scope line="423"/>
                    <scope line="425"/>
                </scope>
            </method>
            <javadoc line="431">
                @deprecated  replaced by &lt;code&gt;addLayoutComponent(Component, Object)&lt;/code&gt;.                
            </javadoc>
            <method name="addLayoutComponent" type="void" line="435">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
                <comment line="437">
                                        
                </comment>
                <comment line="442">
                    Assign the component to one of the known regions of the layout.                    
                </comment>
                <scope line="436">
                    <scope line="438"/>
                    <scope line="444"/>
                    <scope line="446"/>
                    <scope line="448"/>
                    <scope line="450"/>
                    <scope line="452"/>
                    <scope line="454"/>
                    <scope line="456"/>
                    <scope line="458"/>
                    <scope line="460"/>
                    <scope line="462"/>
                </scope>
            </method>
            <javadoc line="468">
                Removes the specified component from this border layout. This
                  method is called when a container calls its &lt;code&gt;remove&lt;/code&gt; or
                  &lt;code&gt;removeAll&lt;/code&gt; methods. Most applications do not call this
                  method directly.                
                <param>
                    comp   the component to be removed.                    
                </param>
                <see>
                    java.awt.Container#remove(java.awt.Component)                    
                </see>
                <see>
                    java.awt.Container#removeAll()                    
                </see>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="477">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="478">
                    <scope line="479"/>
                    <scope line="481"/>
                    <scope line="483"/>
                    <scope line="485"/>
                    <scope line="487"/>
                    <scope line="490"/>
                    <scope line="492"/>
                    <scope line="494"/>
                    <scope line="496"/>
                </scope>
            </method>
            <javadoc line="502">
                Gets the component that was added using the given constraint                
                <param>
                    constraints  the desired constraint, one of <code>CENTER</code>,
                      <code>NORTH</code>, <code>SOUTH</code>,
                      <code>WEST</code>, <code>EAST</code>,
                      <code>PAGE_START</code>, <code>PAGE_END</code>,
                      <code>LINE_START</code>, <code>LINE_END</code>                    
                </param>
                <return>
                    the component at the given location, or <code>null</code> if
                      the location is empty                    
                </return>
                <exception>
                    IllegalArgumentException  if the constraint object is
                      not one of the nine specified constants                    
                </exception>
                <see>
                    #addLayoutComponent(java.awt.Component,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLayoutComponent" type="Component" line="517">
                <params>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="518"/>
                <scope line="520"/>
                <scope line="522"/>
                <scope line="524"/>
                <scope line="526"/>
                <scope line="528"/>
                <scope line="530"/>
                <scope line="532"/>
                <scope line="534"/>
                <scope line="536"/>
            </method>
            <javadoc line="542">
                Returns the component that corresponds to the given constraint location
                  based on the target &lt;code&gt;Container&lt;/code&gt;&apos;s component orientation.
                  Components added with the relative constraints &lt;code&gt;PAGE_START&lt;/code&gt;,
                  &lt;code&gt;PAGE_END&lt;/code&gt;, &lt;code&gt;LINE_START&lt;/code&gt;, and &lt;code&gt;LINE_END&lt;/code&gt;
                  take precedence over components added with the explicit constraints
                  &lt;code&gt;NORTH&lt;/code&gt;, &lt;code&gt;SOUTH&lt;/code&gt;, &lt;code&gt;WEST&lt;/code&gt;, and &lt;code&gt;EAST&lt;/code&gt;.
                  The &lt;code&gt;Container&lt;/code&gt;&apos;s component orientation is used to determine the location of components
                  added with &lt;code&gt;LINE_START&lt;/code&gt; and &lt;code&gt;LINE_END&lt;/code&gt;.                
                <param>
                    constraints     the desired absolute position, one of <code>CENTER</code>,
                      <code>NORTH</code>, <code>SOUTH</code>,
                      <code>EAST</code>, <code>WEST</code>                    
                </param>
                <param>
                    target     the {@code Container} used to obtain
                      the constraint location based on the target{@code Container}'s component orientation.                    
                </param>
                <return>
                    the component at the given location, or <code>null</code> if
                      the location is empty                    
                </return>
                <exception>
                    IllegalArgumentException  if the constraint object is
                      not one of the five specified constants                    
                </exception>
                <exception>
                    NullPointerException  if the target parameter is null                    
                </exception>
                <see>
                    #addLayoutComponent(java.awt.Component,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLayoutComponent" type="Component" line="566">
                <params>
                    <param name="target" type="Container"/>
                    <param name="constraints" type="Object"/>
                </params>
                <declaration name="ltr" type="boolean" line="567"/>
                <declaration name="result" type="Component" line="568"/>
                <scope line="570"/>
                <scope line="572"/>
                <scope line="574">
                    <scope line="576"/>
                </scope>
                <scope line="579">
                    <scope line="581"/>
                </scope>
                <scope line="584"/>
                <scope line="586"/>
            </method>
            <javadoc line="594">
                Gets the constraints for the specified component                
                <param>
                    comp the component to be queried                    
                </param>
                <return>
                    the constraint for the specified component,
                      or null if component is null or is not present
                      in this layout                    
                </return>
                <see>
                    #addLayoutComponent(java.awt.Component,java.lang.Object)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getConstraints" type="Object" line="604">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <comment line="605">
                    fix for 6242148 : API method java.awt.BorderLayout.getConstraints(null) should return null                    
                </comment>
                <scope line="606"/>
                <scope line="609"/>
                <scope line="611"/>
                <scope line="613"/>
                <scope line="615"/>
                <scope line="617"/>
                <scope line="619"/>
                <scope line="621"/>
                <scope line="623"/>
                <scope line="625"/>
            </method>
            <javadoc line="631">
                Determines the minimum size of the &lt;code&gt;target&lt;/code&gt; container
                  using this layout manager.
                  &lt;p&gt;
                  This method is called when a container calls its
                  &lt;code&gt;getMinimumSize&lt;/code&gt; method. Most applications do not call
                  this method directly.                
                <param>
                    target   the container in which to do the layout.                    
                </param>
                <return>
                    the minimum dimensions needed to lay out the subcomponents
                      of the specified container.                    
                </return>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.BorderLayout#preferredLayoutSize                    
                </see>
                <see>
                    java.awt.Container#getMinimumSize()                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="645">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="646">
                    <declaration name="dim" type="Dimension" line="647"/>
                    <declaration name="ltr" type="boolean" line="649"/>
                    <declaration name="c" type="Component" line="650"/>
                    <scope line="652">
                        <declaration name="d" type="Dimension" line="653"/>
                    </scope>
                    <scope line="657">
                        <declaration name="d" type="Dimension" line="658"/>
                    </scope>
                    <scope line="662">
                        <declaration name="d" type="Dimension" line="663"/>
                    </scope>
                    <scope line="667">
                        <declaration name="d" type="Dimension" line="668"/>
                    </scope>
                    <scope line="672">
                        <declaration name="d" type="Dimension" line="673"/>
                    </scope>
                    <declaration name="insets" type="Insets" line="678"/>
                </scope>
            </method>
            <javadoc line="686">
                Determines the preferred size of the &lt;code&gt;target&lt;/code&gt;
                  container using this layout manager, based on the components
                  in the container.
                  &lt;p&gt;
                  Most applications do not call this method directly. This method
                  is called when a container calls its &lt;code&gt;getPreferredSize&lt;/code&gt;
                  method.                
                <param>
                    target   the container in which to do the layout.                    
                </param>
                <return>
                    the preferred dimensions to lay out the subcomponents
                      of the specified container.                    
                </return>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.BorderLayout#minimumLayoutSize                    
                </see>
                <see>
                    java.awt.Container#getPreferredSize()                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="701">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="702">
                    <declaration name="dim" type="Dimension" line="703"/>
                    <declaration name="ltr" type="boolean" line="705"/>
                    <declaration name="c" type="Component" line="706"/>
                    <scope line="708">
                        <declaration name="d" type="Dimension" line="709"/>
                    </scope>
                    <scope line="713">
                        <declaration name="d" type="Dimension" line="714"/>
                    </scope>
                    <scope line="718">
                        <declaration name="d" type="Dimension" line="719"/>
                    </scope>
                    <scope line="723">
                        <declaration name="d" type="Dimension" line="724"/>
                    </scope>
                    <scope line="728">
                        <declaration name="d" type="Dimension" line="729"/>
                    </scope>
                    <declaration name="insets" type="Insets" line="734"/>
                </scope>
            </method>
            <javadoc line="742">
                Returns the maximum dimensions for this layout given the components
                  in the specified target container.                
                <param>
                    target the component which needs to be laid out                    
                </param>
                <see>
                    Container                    
                </see>
                <see>
                    #minimumLayoutSize                    
                </see>
                <see>
                    #preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="750">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="754">
                Returns the alignment along the x axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="761">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="765">
                Returns the alignment along the y axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="772">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="776">
                Invalidates the layout, indicating that if the layout manager
                  has cached information it should be discarded.                
            </javadoc>
            <method name="invalidateLayout" type="void" line="780">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="783">
                Lays out the container argument using this border layout.
                  &lt;p&gt;
                  This method actually reshapes the components in the specified
                  container in order to satisfy the constraints of this
                  &lt;code&gt;BorderLayout&lt;/code&gt; object. The &lt;code&gt;NORTH&lt;/code&gt;
                  and &lt;code&gt;SOUTH&lt;/code&gt; components, if any, are placed at
                  the top and bottom of the container, respectively. The
                  &lt;code&gt;WEST&lt;/code&gt; and &lt;code&gt;EAST&lt;/code&gt; components are
                  then placed on the left and right, respectively. Finally,
                  the &lt;code&gt;CENTER&lt;/code&gt; object is placed in any remaining
                  space in the middle.
                  &lt;p&gt;
                  Most applications do not call this method directly. This method
                  is called when a container calls its &lt;code&gt;doLayout&lt;/code&gt; method.                
                <param>
                    target   the container in which to do the layout.                    
                </param>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.Container#doLayout()                    
                </see>
            </javadoc>
            <method name="layoutContainer" type="void" line="802">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="803">
                    <declaration name="insets" type="Insets" line="804"/>
                    <declaration name="top" type="int" line="805"/>
                    <declaration name="bottom" type="int" line="806"/>
                    <declaration name="left" type="int" line="807"/>
                    <declaration name="right" type="int" line="808"/>
                    <declaration name="ltr" type="boolean" line="810"/>
                    <declaration name="c" type="Component" line="811"/>
                    <scope line="813">
                        <declaration name="d" type="Dimension" line="815"/>
                    </scope>
                    <scope line="819">
                        <declaration name="d" type="Dimension" line="821"/>
                    </scope>
                    <scope line="825">
                        <declaration name="d" type="Dimension" line="827"/>
                    </scope>
                    <scope line="831">
                        <declaration name="d" type="Dimension" line="833"/>
                    </scope>
                    <scope line="837"/>
                </scope>
            </method>
            <javadoc line="843">
                Get the component that corresponds to the given constraint location                
                <param>
                    key     The desired absolute position,
                      either NORTH, SOUTH, EAST, or WEST.                    
                </param>
                <param>
                    ltr     Is the component line direction left-to-right?                    
                </param>
            </javadoc>
            <method name="getChild" type="Component" line="850">
                <params>
                    <param name="key" type="String"/>
                    <param name="ltr" type="boolean"/>
                </params>
                <declaration name="result" type="Component" line="851"/>
                <scope line="853"/>
                <scope line="856"/>
                <scope line="859">
                    <scope line="861"/>
                </scope>
                <scope line="865">
                    <scope line="867"/>
                </scope>
                <scope line="871"/>
                <scope line="874"/>
            </method>
            <javadoc line="880">
                Returns a string representation of the state of this border layout.                
                <return>
                    a string representation of this border layout.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="884"/>
        </class>
    </source>