<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.im">
        <import package="java.awt.Component"/>
        <import package="java.util.Locale"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.beans.Transient"/>
        <import package="java.lang.Character.Subset"/>
        <import package="sun.awt.im.InputMethodContext"/>
        <class name="InputContext" line="35">
            <javadoc line="35">
                Provides methods to control text input facilities such as input
                  methods and keyboard layouts.
                  Two methods handle both input methods and keyboard layouts: selectInputMethod
                  lets a client component select an input method or keyboard layout by locale,
                  getLocale lets a client component obtain the locale of the current input method
                  or keyboard layout.
                  The other methods more specifically support interaction with input methods:
                  They let client components control the behavior of input methods, and
                  dispatch events from the client component to the input method.
                  &lt;p&gt;
                  By default, one InputContext instance is created per Window instance,
                  and this input context is shared by all components within the window&apos;s
                  container hierarchy. However, this means that only one text input
                  operation is possible at any one time within a window, and that the
                  text needs to be committed when moving the focus from one text component
                  to another. If this is not desired, text components can create their
                  own input context instances.
                  &lt;p&gt;
                  The Java Platform supports input methods that have been developed in the Java
                  programming language, using the interfaces in the {@link java.awt.im.spi} package,
                  and installed into a Java SE Runtime Environment as extensions. Implementations
                  may also support using the native input methods of the platforms they run on;
                  however, not all platforms and locales provide input methods. Keyboard layouts
                  are provided by the host platform.
                  &lt;p&gt;
                  Input methods are &lt;em&gt;unavailable&lt;/em&gt; if (a) no input method written
                  in the Java programming language has been installed and (b) the Java Platform implementation
                  or the underlying platform does not support native input methods. In this case,
                  input contexts can still be created and used; their behavior is specified with
                  the individual methods below.                
                <see>
                    java.awt.Component#getInputContext                    
                </see>
                <see>
                    java.awt.Component#enableInputMethods                    
                </see>
                <author>
                    JavaSoft Asia/Pacific                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="78">
                Constructs an InputContext.
                  This method is protected so clients cannot instantiate
                  InputContext directly. Input contexts are obtained by
                  calling {@link #getInstance}.                
            </javadoc>
            <method name="InputContext" type="constructor" line="84">
                <comment line="86">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="88">
                Returns a new InputContext instance.                
            </javadoc>
            <method name="getInstance" type="InputContext" line="91"/>
            <javadoc line="95">
                Attempts to select an input method or keyboard layout that
                  supports the given locale, and returns a value indicating whether such
                  an input method or keyboard layout has been successfully selected. The
                  following steps are taken until an input method has been selected:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  If the currently selected input method or keyboard layout supports the
                  requested locale, it remains selected.&lt;/li&gt;
                  &lt;li&gt;
                  If there is no input method or keyboard layout available that supports
                  the requested locale, the current input method or keyboard layout remains
                  selected.&lt;/li&gt;
                  &lt;li&gt;
                  If the user has previously selected an input method or keyboard layout
                  for the requested locale from the user interface, then the most recently
                  selected such input method or keyboard layout is reselected.&lt;/li&gt;
                  &lt;li&gt;
                  Otherwise, an input method or keyboard layout that supports the requested
                  locale is selected in an implementation dependent way.&lt;/li&gt;
                  &lt;p&gt;
                  &lt;/ul&gt;
                  Before switching away from an input method, any currently uncommitted text
                  is committed. If no input method or keyboard layout supporting the requested
                  locale is available, then false is returned.
                  &lt;p&gt;
                  Not all host operating systems provide API to determine the locale of
                  the currently selected native input method or keyboard layout, and to
                  select a native input method or keyboard layout by locale.
                  For host operating systems that don&apos;t provide such API,
                  &lt;code&gt;selectInputMethod&lt;/code&gt; assumes that native input methods or
                  keyboard layouts provided by the host operating system support only the
                  system&apos;s default locale.
                  &lt;p&gt;
                  A text editing component may call this method, for example, when
                  the user changes the insertion point, so that the user can
                  immediately continue typing in the language of the surrounding text.                
                <param>
                    locale The desired new locale.                    
                </param>
                <return>
                    true if the input method or keyboard layout that&apos;s active after
                      this call supports the desired locale.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="selectInputMethod" type="boolean" line="146">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="148">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="151">
                Returns the current locale of the current input method or keyboard
                  layout.
                  Returns null if the input context does not have a current input method
                  or keyboard layout or if the current input method&apos;s{@link java.awt.im.spi.InputMethod#getLocale()} method returns null.
                  &lt;p&gt;
                  Not all host operating systems provide API to determine the locale of
                  the currently selected native input method or keyboard layout.
                  For host operating systems that don&apos;t provide such API,
                  &lt;code&gt;getLocale&lt;/code&gt; assumes that the current locale of all native
                  input methods or keyboard layouts provided by the host operating system
                  is the system&apos;s default locale.                
                <return>
                    the current locale of the current input method or keyboard layout                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getLocale" type="Locale" line="169">
                <comment line="171">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="174">
                Sets the subsets of the Unicode character set that input methods of this input
                  context should be allowed to input. Null may be passed in to
                  indicate that all characters are allowed. The initial value
                  is null. The setting applies to the current input method as well
                  as input methods selected after this call is made. However,
                  applications cannot rely on this call having the desired effect,
                  since this setting cannot be passed on to all host input methods -
                  applications still need to apply their own character validation.
                  If no input methods are available, then this method has no effect.                
                <param>
                    subsets The subsets of the Unicode character set from which characters may be input                    
                </param>
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="187">
                <params>
                    <param name="subsets" type="Subset[]"/>
                </params>
                <comment line="189">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="191">
                Enables or disables the current input method for composition,
                  depending on the value of the parameter &lt;code&gt;enable&lt;/code&gt;.
                  &lt;p&gt;
                  An input method that is enabled for composition interprets incoming
                  events for both composition and control purposes, while a
                  disabled input method does not interpret events for composition.
                  Note however that events are passed on to the input method regardless
                  whether it is enabled or not, and that an input method that is disabled
                  for composition may still interpret events for control purposes,
                  including to enable or disable itself for composition.
                  &lt;p&gt;
                  For input methods provided by host operating systems, it is not always possible to
                  determine whether this operation is supported. For example, an input method may enable
                  composition only for some locales, and do nothing for other locales. For such input
                  methods, it is possible that this method does not throw{@link java.lang.UnsupportedOperationException UnsupportedOperationException},
                  but also does not affect whether composition is enabled.                
                <param>
                    enable whether to enable the current input method for composition                    
                </param>
                <throws>
                    UnsupportedOperationException if there is no current input
                      method available or the current input method does not support
                      the enabling/disabling operation                    
                </throws>
                <see>
                    #isCompositionEnabled                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="217">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <comment line="219">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="221">
                Determines whether the current input method is enabled for composition.
                  An input method that is enabled for composition interprets incoming
                  events for both composition and control purposes, while a
                  disabled input method does not interpret events for composition.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the current input method is enabled for
                      composition; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    UnsupportedOperationException if there is no current input
                      method available or the current input method does not support
                      checking whether it is enabled for composition                    
                </throws>
                <see>
                    #setCompositionEnabled                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="236">
                <comment line="238">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="241">
                Asks the current input method to reconvert text from the
                  current client component. The input method obtains the text to
                  be reconverted from the client component using the{@link InputMethodRequests#getSelectedText InputMethodRequests.getSelectedText}method. The other &lt;code&gt;InputMethodRequests&lt;/code&gt; methods
                  must be prepared to deal with further information requests by
                  the input method. The composed and/or committed text will be
                  sent to the client component as a sequence of
                  &lt;code&gt;InputMethodEvent&lt;/code&gt;s. If the input method cannot
                  reconvert the given text, the text is returned as committed
                  text in an &lt;code&gt;InputMethodEvent&lt;/code&gt;.                
                <throws>
                    UnsupportedOperationException if there is no current input
                      method available or the current input method does not support
                      the reconversion operation.                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="reconvert" type="void" line="260">
                <comment line="262">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="264">
                Dispatches an event to the active input method. Called by AWT.
                  If no input method is available, then the event will never be consumed.                
                <param>
                    event The event                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;event&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="dispatchEvent" type="void" line="271">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <comment line="273">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="275">
                Notifies the input context that a client component has been
                  removed from its containment hierarchy, or that input method
                  support has been disabled for the component. This method is
                  usually called from the client component&apos;s{@link java.awt.Component#removeNotify() Component.removeNotify}method. Potentially pending input from input methods
                  for this component is discarded.
                  If no input methods are available, then this method has no effect.                
                <param>
                    client Client component                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;client&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="removeNotify" type="void" line="288">
                <params>
                    <param name="client" type="Component"/>
                </params>
                <comment line="290">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="292">
                Ends any input composition that may currently be going on in this
                  context. Depending on the platform and possibly user preferences,
                  this may commit or delete uncommitted text. Any changes to the text
                  are communicated to the active component using an input method event.
                  If no input methods are available, then this method has no effect.
                  &lt;p&gt;
                  A text editing component may call this in a variety of situations,
                  for example, when the user moves the insertion point within the text
                  (but outside the composed text), or when the component&apos;s text is
                  saved to a file or copied to the clipboard.                
            </javadoc>
            <method name="endComposition" type="void" line="306">
                <comment line="308">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="310">
                Releases the resources used by this input context.
                  Called by AWT for the default input context of each Window.
                  If no input methods are available, then this method
                  has no effect.                
            </javadoc>
            <method name="dispose" type="void" line="316">
                <comment line="318">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
            <javadoc line="320">
                Returns a control object from the current input method, or null. A
                  control object provides methods that control the behavior of the
                  input method or obtain information from the input method. The type
                  of the object is an input method specific class. Clients have to
                  compare the result against known input method control object
                  classes and cast to the appropriate class to invoke the methods
                  provided.
                  &lt;p&gt;
                  If no input methods are available or the current input method does
                  not provide an input method control object, then null is returned.                
                <return>
                    A control object from the current input method, or null.                    
                </return>
            </javadoc>
            <method name="getInputMethodControlObject" type="Object" line="334">
                <comment line="336">
                    real implementation is in sun.awt.im.InputContext                    
                </comment>
            </method>
        </class>
    </source>