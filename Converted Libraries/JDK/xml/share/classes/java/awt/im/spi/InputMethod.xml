<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.im.spi">
        <import package="java.util.Locale"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.lang.Character.Subset"/>
        <interface name="InputMethod">
            <javadoc line="34">
                Defines the interface for an input method that supports complex text input.
                  Input methods traditionally support text input for languages that have
                  more characters than can be represented on a standard-size keyboard,
                  such as Chinese, Japanese, and Korean. However, they may also be used to
                  support phonetic text input for English or character reordering for Thai.
                  &lt;p&gt;
                  Subclasses of InputMethod can be loaded by the input method framework; they
                  can then be selected either through the API
                  ({@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod})
                  or the user interface (the input method selection menu).                
                <since>
                    1.3                    
                </since>
                <author>
                    JavaSoft International                    
                </author>
            </javadoc>
            <method name="setInputMethodContext" type="void" line="53"/>
            <javadoc line="53">
                Sets the input method context, which is used to dispatch input method
                  events to the client component and to request information from
                  the client component.
                  &lt;p&gt;
                  This method is called once immediately after instantiating this input
                  method.                
                <param>
                    context the input method context for this input method                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;context&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="setLocale" type="boolean" line="66"/>
            <javadoc line="66">
                Attempts to set the input locale. If the input method supports the
                  desired locale, it changes its behavior to support input for the locale
                  and returns true.
                  Otherwise, it returns false and does not change its behavior.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
                  &lt;li&gt;when switching to this input method through the user interface if the user
                  specified a locale or if the previously selected input method&apos;s{@link java.awt.im.spi.InputMethod#getLocale getLocale} method
                  returns a non-null value.
                  &lt;/ul&gt;                
                <param>
                    locale locale to input                    
                </param>
                <return>
                    whether the specified locale is supported                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;locale&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="getLocale" type="Locale" line="87"/>
            <javadoc line="87">
                Returns the current input locale. Might return null in exceptional cases.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#getLocale InputContext.getLocale} and
                  &lt;li&gt;when switching from this input method to a different one through the
                  user interface.
                  &lt;/ul&gt;                
                <return>
                    the current input locale, or null                    
                </return>
            </javadoc>
            <method name="setCharacterSubsets" type="void" line="101"/>
            <javadoc line="101">
                Sets the subsets of the Unicode character set that this input method
                  is allowed to input. Null may be passed in to indicate that all
                  characters are allowed.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;immediately after instantiating this input method,
                  &lt;li&gt;when switching to this input method from a different one, and
                  &lt;li&gt;by {@link java.awt.im.InputContext#setCharacterSubsets InputContext.setCharacterSubsets}.
                  &lt;/ul&gt;                
                <param>
                    subsets the subsets of the Unicode character set from which
                      characters may be input                    
                </param>
            </javadoc>
            <method name="setCompositionEnabled" type="void" line="118"/>
            <javadoc line="118">
                Enables or disables this input method for composition,
                  depending on the value of the parameter &lt;code&gt;enable&lt;/code&gt;.
                  &lt;p&gt;
                  An input method that is enabled for composition interprets incoming
                  events for both composition and control purposes, while a
                  disabled input method does not interpret events for composition.
                  Note however that events are passed on to the input method regardless
                  whether it is enabled or not, and that an input method that is disabled
                  for composition may still interpret events for control purposes,
                  including to enable or disable itself for composition.
                  &lt;p&gt;
                  For input methods provided by host operating systems, it is not always possible to
                  determine whether this operation is supported. For example, an input method may enable
                  composition only for some locales, and do nothing for other locales. For such input
                  methods, it is possible that this method does not throw{@link java.lang.UnsupportedOperationException UnsupportedOperationException},
                  but also does not affect whether composition is enabled.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#setCompositionEnabled InputContext.setCompositionEnabled},
                  &lt;li&gt;when switching to this input method from a different one using the
                  user interface or{@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
                  if the previously selected input method&apos;s{@link java.awt.im.spi.InputMethod#isCompositionEnabled isCompositionEnabled}method returns without throwing an exception.
                  &lt;/ul&gt;                
                <param>
                    enable whether to enable the input method for composition                    
                </param>
                <throws>
                    UnsupportedOperationException if this input method does not
                      support the enabling/disabling operation                    
                </throws>
                <see>
                    #isCompositionEnabled                    
                </see>
            </javadoc>
            <method name="isCompositionEnabled" type="boolean" line="155"/>
            <javadoc line="155">
                Determines whether this input method is enabled.
                  An input method that is enabled for composition interprets incoming
                  events for both composition and control purposes, while a
                  disabled input method does not interpret events for composition.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#isCompositionEnabled InputContext.isCompositionEnabled} and
                  &lt;li&gt;when switching from this input method to a different one using the
                  user interface or{@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
                  &lt;/ul&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this input method is enabled for
                      composition; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <throws>
                    UnsupportedOperationException if this input method does not
                      support checking whether it is enabled for composition                    
                </throws>
                <see>
                    #setCompositionEnabled                    
                </see>
            </javadoc>
            <method name="reconvert" type="void" line="177"/>
            <javadoc line="177">
                Starts the reconversion operation. The input method obtains the
                  text to be reconverted from the current client component using the{@link java.awt.im.InputMethodRequests#getSelectedText InputMethodRequests.getSelectedText}method. It can use other &lt;code&gt;InputMethodRequests&lt;/code&gt;
                  methods to request additional information required for the
                  reconversion operation. The composed and committed text
                  produced by the operation is sent to the client component as a
                  sequence of &lt;code&gt;InputMethodEvent&lt;/code&gt;s. If the given text
                  cannot be reconverted, the same text should be sent to the
                  client component as committed text.
                  &lt;p&gt;
                  This method is called by{@link java.awt.im.InputContext#reconvert() InputContext.reconvert}.                
                <throws>
                    UnsupportedOperationException if the input method does not
                      support the reconversion operation.                    
                </throws>
            </javadoc>
            <method name="dispatchEvent" type="void" line="197"/>
            <javadoc line="197">
                Dispatches the event to the input method. If input method support is
                  enabled for the focussed component, incoming events of certain types
                  are dispatched to the current input method for this component before
                  they are dispatched to the component&apos;s methods or event listeners.
                  The input method decides whether it needs to handle the event. If it
                  does, it also calls the event&apos;s &lt;code&gt;consume&lt;/code&gt; method; this
                  causes the event to not get dispatched to the component&apos;s event
                  processing methods or event listeners.
                  &lt;p&gt;
                  Events are dispatched if they are instances of InputEvent or its
                  subclasses.
                  This includes instances of the AWT classes KeyEvent and MouseEvent.
                  &lt;p&gt;
                  This method is called by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}.                
                <param>
                    event the event being dispatched to the input method                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;event&lt;/code&gt; is null                    
                </exception>
            </javadoc>
            <method name="notifyClientWindowChange" type="void" line="218"/>
            <javadoc line="218">
                Notifies this input method of changes in the client window
                  location or state. This method is called while this input
                  method is the current input method of its input context and
                  notifications for it are enabled (see {@link InputMethodContext#enableClientWindowNotificationInputMethodContext.enableClientWindowNotification}). Calls
                  to this method are temporarily suspended if the input context&apos;s{@link java.awt.im.InputContext#removeNotify removeNotify}method is called, and resume when the input method is activated
                  for a new client component. It is called in the following
                  situations:
                  &lt;ul&gt;
                  &lt;li&gt;
                  when the window containing the current client component changes
                  in location, size, visibility, iconification state, or when the
                  window is closed.&lt;/li&gt;
                  &lt;li&gt;
                  from &lt;code&gt; enableClientWindowNotification(inputMethod,
                  true)&lt;/code&gt; if the current client component exists,&lt;/li&gt;
                  &lt;li&gt;
                  when activating the input method for the first time after it
                  called
                  &lt;code&gt;enableClientWindowNotification(inputMethod,
                  true)&lt;/code&gt; if during the call no current client component was
                  available,&lt;/li&gt;
                  &lt;li&gt;
                  when activating the input method for a new client component
                  after the input context&apos;s removeNotify method has been
                  called.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    bounds client window&apos;s {@link java.awt.Component#getBounds bounds} on the screen; or null if
                      the client window is iconified or invisible                    
                </param>
            </javadoc>
            <method name="activate" type="void" line="255"/>
            <javadoc line="255">
                Activates the input method for immediate input processing.
                  &lt;p&gt;
                  If an input method provides its own windows, it should make sure
                  at this point that all necessary windows are open and visible.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}when a client component receives a FOCUS_GAINED event,
                  &lt;li&gt;when switching to this input method from a different one using the
                  user interface or{@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
                  &lt;/ul&gt;
                  The method is only called when the input method is inactive.
                  A newly instantiated input method is assumed to be inactive.                
            </javadoc>
            <method name="deactivate" type="void" line="274"/>
            <javadoc line="274">
                Deactivates the input method.
                  The isTemporary argument has the same meaning as in{@link java.awt.event.FocusEvent#isTemporary FocusEvent.isTemporary}.
                  &lt;p&gt;
                  If an input method provides its own windows, only windows that relate
                  to the current composition (such as a lookup choice window) should be
                  closed at this point.
                  It is possible that the input method will be immediately activated again
                  for a different client component, and closing and reopening more
                  persistent windows (such as a control panel) would create unnecessary
                  screen flicker.
                  Before an instance of a different input method class is activated,{@link #hideWindows} is called on the current input method.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}when a client component receives a FOCUS_LOST event,
                  &lt;li&gt;when switching from this input method to a different one using the
                  user interface or{@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod},
                  &lt;li&gt;before {@link #removeNotify removeNotify} if the current client component is
                  removed.
                  &lt;/ul&gt;
                  The method is only called when the input method is active.                
                <param>
                    isTemporary whether the focus change is temporary                    
                </param>
            </javadoc>
            <method name="hideWindows" type="void" line="305"/>
            <javadoc line="305">
                Closes or hides all windows opened by this input method instance or
                  its class.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;before calling {@link #activate activate} on an instance of a different input
                  method class,
                  &lt;li&gt;before calling {@link #dispose dispose} on this input method.
                  &lt;/ul&gt;
                  The method is only called when the input method is inactive.                
            </javadoc>
            <method name="removeNotify" type="void" line="319"/>
            <javadoc line="319">
                Notifies the input method that a client component has been
                  removed from its containment hierarchy, or that input method
                  support has been disabled for the component.
                  &lt;p&gt;
                  This method is called by {@link java.awt.im.InputContext#removeNotify InputContext.removeNotify}.
                  &lt;p&gt;
                  The method is only called when the input method is inactive.                
            </javadoc>
            <method name="endComposition" type="void" line="330"/>
            <javadoc line="330">
                Ends any input composition that may currently be going on in this
                  context. Depending on the platform and possibly user preferences,
                  this may commit or delete uncommitted text. Any changes to the text
                  are communicated to the active component using an input method event.
                  &lt;p&gt;
                  A text editing component may call this in a variety of situations,
                  for example, when the user moves the insertion point within the text
                  (but outside the composed text), or when the component&apos;s text is
                  saved to a file or copied to the clipboard.
                  &lt;p&gt;
                  This method is called
                  &lt;ul&gt;
                  &lt;li&gt;by {@link java.awt.im.InputContext#endComposition InputContext.endComposition},
                  &lt;li&gt;by {@link java.awt.im.InputContext#dispatchEvent InputContext.dispatchEvent}when switching to a different client component
                  &lt;li&gt;when switching from this input method to a different one using the
                  user interface or{@link java.awt.im.InputContext#selectInputMethod InputContext.selectInputMethod}.
                  &lt;/ul&gt;                
            </javadoc>
            <method name="dispose" type="void" line="354"/>
            <javadoc line="354">
                Releases the resources used by this input method.
                  In particular, the input method should dispose windows and close files that are no
                  longer needed.
                  &lt;p&gt;
                  This method is called by {@link java.awt.im.InputContext#dispose InputContext.dispose}.
                  &lt;p&gt;
                  The method is only called when the input method is inactive.
                  No method of this interface is called on this instance after dispose.                
            </javadoc>
            <method name="getControlObject" type="Object" line="366"/>
            <javadoc line="366">
                Returns a control object from this input method, or null. A
                  control object provides methods that control the behavior of the
                  input method or obtain information from the input method. The type
                  of the object is an input method specific class. Clients have to
                  compare the result against known input method control object
                  classes and cast to the appropriate class to invoke the methods
                  provided.
                  &lt;p&gt;
                  This method is called by{@link java.awt.im.InputContext#getInputMethodControlObject InputContext.getInputMethodControlObject}.                
                <return>
                    a control object from this input method, or null                    
                </return>
            </javadoc>
        </interface>
    </source>