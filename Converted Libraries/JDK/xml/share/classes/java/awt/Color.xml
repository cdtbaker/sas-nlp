<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.color.ColorSpace"/>
        <class name="Color" line="7">
            <implements interface="Paint"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="7">
                The &lt;code&gt;Color&lt;/code&gt; class is used to encapsulate colors in the default
                  sRGB color space or colors in arbitrary color spaces identified by a{@link ColorSpace}.  Every color has an implicit alpha value of 1.0 or
                  an explicit one provided in the constructor.  The alpha value
                  defines the transparency of a color and can be represented by
                  a float value in the range 0.0&amp;nbsp;-&amp;nbsp;1.0 or 0&amp;nbsp;-&amp;nbsp;255.
                  An alpha value of 1.0 or 255 means that the color is completely
                  opaque and an alpha value of 0 or 0.0 means that the color is
                  completely transparent.
                  When constructing a &lt;code&gt;Color&lt;/code&gt; with an explicit alpha or
                  getting the color/alpha components of a &lt;code&gt;Color&lt;/code&gt;, the color
                  components are never premultiplied by the alpha component.
                  &lt;p&gt;
                  The default color space for the Java 2D(tm) API is sRGB, a proposed
                  standard RGB color space.  For further information on sRGB,
                  see &lt;A href=&quot;http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html&quot;&gt;
                  http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html
                  &lt;/A&gt;.
                  &lt;p&gt;                
                <version>
                    10 Feb 1997                    
                </version>
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    AlphaComposite                    
                </see>
            </javadoc>
            <declaration name="white" type="Color" line="33"/>
            <javadoc line="33">
                The color white.  In the default sRGB space.                
            </javadoc>
            <declaration name="WHITE" type="Color" line="37"/>
            <javadoc line="37">
                The color white.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="lightGray" type="Color" line="42"/>
            <javadoc line="42">
                The color light gray.  In the default sRGB space.                
            </javadoc>
            <declaration name="LIGHT_GRAY" type="Color" line="46"/>
            <javadoc line="46">
                The color light gray.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="gray" type="Color" line="51"/>
            <javadoc line="51">
                The color gray.  In the default sRGB space.                
            </javadoc>
            <declaration name="GRAY" type="Color" line="55"/>
            <javadoc line="55">
                The color gray.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="darkGray" type="Color" line="60"/>
            <javadoc line="60">
                The color dark gray.  In the default sRGB space.                
            </javadoc>
            <declaration name="DARK_GRAY" type="Color" line="64"/>
            <javadoc line="64">
                The color dark gray.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="black" type="Color" line="69"/>
            <javadoc line="69">
                The color black.  In the default sRGB space.                
            </javadoc>
            <declaration name="BLACK" type="Color" line="73"/>
            <javadoc line="73">
                The color black.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="red" type="Color" line="78"/>
            <javadoc line="78">
                The color red.  In the default sRGB space.                
            </javadoc>
            <declaration name="RED" type="Color" line="82"/>
            <javadoc line="82">
                The color red.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="pink" type="Color" line="87"/>
            <javadoc line="87">
                The color pink.  In the default sRGB space.                
            </javadoc>
            <declaration name="PINK" type="Color" line="91"/>
            <javadoc line="91">
                The color pink.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="orange" type="Color" line="96"/>
            <javadoc line="96">
                The color orange.  In the default sRGB space.                
            </javadoc>
            <declaration name="ORANGE" type="Color" line="100"/>
            <javadoc line="100">
                The color orange.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="yellow" type="Color" line="105"/>
            <javadoc line="105">
                The color yellow.  In the default sRGB space.                
            </javadoc>
            <declaration name="YELLOW" type="Color" line="109"/>
            <javadoc line="109">
                The color yellow.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="green" type="Color" line="114"/>
            <javadoc line="114">
                The color green.  In the default sRGB space.                
            </javadoc>
            <declaration name="GREEN" type="Color" line="118"/>
            <javadoc line="118">
                The color green.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="magenta" type="Color" line="123"/>
            <javadoc line="123">
                The color magenta.  In the default sRGB space.                
            </javadoc>
            <declaration name="MAGENTA" type="Color" line="127"/>
            <javadoc line="127">
                The color magenta.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="cyan" type="Color" line="132"/>
            <javadoc line="132">
                The color cyan.  In the default sRGB space.                
            </javadoc>
            <declaration name="CYAN" type="Color" line="136"/>
            <javadoc line="136">
                The color cyan.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="blue" type="Color" line="141"/>
            <javadoc line="141">
                The color blue.  In the default sRGB space.                
            </javadoc>
            <declaration name="BLUE" type="Color" line="145"/>
            <javadoc line="145">
                The color blue.  In the default sRGB space.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="value" type="int" line="150"/>
            <javadoc line="150">
                The color value.                
                <serial>
                                        
                </serial>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <declaration name="frgbvalue" type="float" line="156"/>
            <javadoc line="156">
                The color value in the default sRGB &lt;code&gt;ColorSpace&lt;/code&gt; as
                  &lt;code&gt;float&lt;/code&gt; components (no alpha).
                  If &lt;code&gt;null&lt;/code&gt; after object construction, this must be an
                  sRGB color constructed with 8-bit precision, so compute from the
                  &lt;code&gt;int&lt;/code&gt; color value.                
                <serial>
                                        
                </serial>
                <see>
                    #getRGBColorComponents                    
                </see>
                <see>
                    #getRGBComponents                    
                </see>
            </javadoc>
            <declaration name="fvalue" type="float" line="167"/>
            <javadoc line="167">
                The color value in the native &lt;code&gt;ColorSpace&lt;/code&gt; as
                  &lt;code&gt;float&lt;/code&gt; components (no alpha).
                  If &lt;code&gt;null&lt;/code&gt; after object construction, this must be an
                  sRGB color constructed with 8-bit precision, so compute from the
                  &lt;code&gt;int&lt;/code&gt; color value.                
                <serial>
                                        
                </serial>
                <see>
                    #getRGBColorComponents                    
                </see>
                <see>
                    #getRGBComponents                    
                </see>
            </javadoc>
            <declaration name="falpha" type="float" line="178"/>
            <javadoc line="178">
                The alpha value as a &lt;code&gt;float&lt;/code&gt; component.
                  If &lt;code&gt;frgbvalue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this is not valid
                  data, so compute from the &lt;code&gt;int&lt;/code&gt; color value.                
                <serial>
                                        
                </serial>
                <see>
                    #getRGBComponents                    
                </see>
                <see>
                    #getComponents                    
                </see>
            </javadoc>
            <declaration name="cs" type="ColorSpace" line="187"/>
            <javadoc line="187">
                The &lt;code&gt;ColorSpace&lt;/code&gt;.  If &lt;code&gt;null&lt;/code&gt;, then it&apos;s
                  default is sRGB.                
                <serial>
                                        
                </serial>
                <see>
                    #getColor                    
                </see>
                <see>
                    #getColorSpace                    
                </see>
                <see>
                    #getColorComponents                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="196"/>
            <method name="initIDs" type="void" line="197"/>
            <javadoc line="197">
                Initialize JNI field and method IDs                
            </javadoc>
            <scope line="201">
                <scope line="203"/>
            </scope>
            <javadoc line="207">
                Checks the color integer components supplied for validity.
                  Throws an {@link IllegalArgumentException} if the value is out of
                  range.                
                <param>
                    r the Red component                    
                </param>
                <param>
                    g the Green component                    
                </param>
                <param>
                    b the Blue component                    
                </param>
            </javadoc>
            <method name="testColorValueRange" type="void" line="215">
                <params>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                    <param name="a" type="int"/>
                </params>
                <declaration name="rangeError" type="boolean" line="216"/>
                <declaration name="badComponentString" type="String" line="217"/>
                <scope line="218"/>
                <scope line="222"/>
                <scope line="226"/>
                <scope line="230"/>
                <scope line="234"/>
            </method>
            <javadoc line="238">
                Checks the color &lt;code&gt;float&lt;/code&gt; components supplied for
                  validity.
                  Throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the value is out
                  of range.                
                <param>
                    r the Red component                    
                </param>
                <param>
                    g the Green component                    
                </param>
                <param>
                    b the Blue component                    
                </param>
            </javadoc>
            <method name="testColorValueRange" type="void" line="247">
                <params>
                    <param name="r" type="float"/>
                    <param name="g" type="float"/>
                    <param name="b" type="float"/>
                    <param name="a" type="float"/>
                </params>
                <declaration name="rangeError" type="boolean" line="248"/>
                <declaration name="badComponentString" type="String" line="249"/>
                <scope line="250"/>
                <scope line="254"/>
                <scope line="258"/>
                <scope line="262"/>
                <scope line="266"/>
            </method>
            <javadoc line="270">
                Creates an opaque sRGB color with the specified red, green,
                  and blue values in the range (0 - 255).
                  The actual color used in rendering depends
                  on finding the best match given the color space
                  available for a given output device.
                  Alpha is defaulted to 255.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;
                      or &lt;code&gt;b&lt;/code&gt; are outside of the range
                      0 to 255, inclusive                    
                </throws>
                <param>
                    r the red component                    
                </param>
                <param>
                    g the green component                    
                </param>
                <param>
                    b the blue component                    
                </param>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="288">
                <params>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="291">
                Creates an sRGB color with the specified red, green, blue, and alpha
                  values in the range (0 - 255).                
                <throws>
                    IllegalArgumentException if &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;,
                      &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; are outside of the range
                      0 to 255, inclusive                    
                </throws>
                <param>
                    r the red component                    
                </param>
                <param>
                    g the green component                    
                </param>
                <param>
                    b the blue component                    
                </param>
                <param>
                    a the alpha component                    
                </param>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getAlpha                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="307">
                <params>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                    <param name="a" type="int"/>
                </params>
            </method>
            <javadoc line="311">
                Creates an opaque sRGB color with the specified combined RGB value
                  consisting of the red component in bits 16-23, the green component
                  in bits 8-15, and the blue component in bits 0-7.  The actual color
                  used in rendering depends on finding the best match given the
                  color space available for a particular output device.  Alpha is
                  defaulted to 255.                
                <param>
                    rgb the combined RGB components                    
                </param>
                <see>
                    java.awt.image.ColorModel#getRGBdefault                    
                </see>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="325">
                <params>
                    <param name="rgb" type="int"/>
                </params>
            </method>
            <javadoc line="328">
                Creates an sRGB color with the specified combined RGBA value consisting
                  of the alpha component in bits 24-31, the red component in bits 16-23,
                  the green component in bits 8-15, and the blue component in bits 0-7.
                  If the &lt;code&gt;hasalpha&lt;/code&gt; argument is &lt;code&gt;false&lt;/code&gt;, alpha
                  is defaulted to 255.                
                <param>
                    rgba the combined RGBA components                    
                </param>
                <param>
                    hasalpha &lt;code&gt;true&lt;/code&gt; if the alpha bits are valid;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <see>
                    java.awt.image.ColorModel#getRGBdefault                    
                </see>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getAlpha                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="344">
                <params>
                    <param name="rgba" type="int"/>
                    <param name="hasalpha" type="boolean"/>
                </params>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <javadoc line="352">
                Creates an opaque sRGB color with the specified red, green, and blue
                  values in the range (0.0 - 1.0).  Alpha is defaulted to 1.0.  The
                  actual color used in rendering depends on finding the best
                  match given the color space available for a particular output
                  device.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;
                      or &lt;code&gt;b&lt;/code&gt; are outside of the range
                      0.0 to 1.0, inclusive                    
                </throws>
                <param>
                    r the red component                    
                </param>
                <param>
                    g the green component                    
                </param>
                <param>
                    b the blue component                    
                </param>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="369">
                <params>
                    <param name="r" type="float"/>
                    <param name="g" type="float"/>
                    <param name="b" type="float"/>
                </params>
            </method>
            <javadoc line="379">
                Creates an sRGB color with the specified red, green, blue, and
                  alpha values in the range (0.0 - 1.0).  The actual color
                  used in rendering depends on finding the best match given the
                  color space available for a particular output device.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;
                      &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; are outside of the range
                      0.0 to 1.0, inclusive                    
                </throws>
                <param>
                    r the red component                    
                </param>
                <param>
                    g the green component                    
                </param>
                <param>
                    b the blue component                    
                </param>
                <param>
                    a the alpha component                    
                </param>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <see>
                    #getAlpha                    
                </see>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="397">
                <params>
                    <param name="r" type="float"/>
                    <param name="g" type="float"/>
                    <param name="b" type="float"/>
                    <param name="a" type="float"/>
                </params>
            </method>
            <javadoc line="406">
                Creates a color in the specified &lt;code&gt;ColorSpace&lt;/code&gt;
                  with the color components specified in the &lt;code&gt;float&lt;/code&gt;
                  array and the specified alpha.  The number of components is
                  determined by the type of the &lt;code&gt;ColorSpace&lt;/code&gt;.  For
                  example, RGB requires 3 components, but CMYK requires 4
                  components.                
                <param>
                    cspace the &lt;code&gt;ColorSpace&lt;/code&gt; to be used to
                      interpret the components                    
                </param>
                <param>
                    components an arbitrary number of color components
                      that is compatible with the &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    alpha alpha value                    
                </param>
                <throws>
                    IllegalArgumentException if any of the values in the
                      &lt;code&gt;components&lt;/code&gt; array or &lt;code&gt;alpha&lt;/code&gt; is
                      outside of the range 0.0 to 1.0                    
                </throws>
                <see>
                    #getComponents                    
                </see>
                <see>
                    #getColorComponents                    
                </see>
            </javadoc>
            <method name="Color" type="constructor" line="424">
                <params>
                    <param name="cspace" type="ColorSpace"/>
                    <param name="components" type="float"/>
                    <param name="alpha" type="float"/>
                </params>
                <declaration name="rangeError" type="boolean" line="425"/>
                <declaration name="badComponentString" type="String" line="426"/>
                <declaration name="n" type="int" line="427"/>
                <scope line="429">
                    <scope line="430"/>
                    <scope line="434"/>
                </scope>
                <scope line="438"/>
                <scope line="442"/>
                <scope line="445"/>
            </method>
            <javadoc line="452">
                Returns the red component in the range 0-255 in the default sRGB
                  space.                
                <return>
                    the red component.                    
                </return>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="getRed" type="int" line="458"/>
            <javadoc line="461">
                Returns the green component in the range 0-255 in the default sRGB
                  space.                
                <return>
                    the green component.                    
                </return>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="getGreen" type="int" line="467"/>
            <javadoc line="470">
                Returns the blue component in the range 0-255 in the default sRGB
                  space.                
                <return>
                    the blue component.                    
                </return>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="getBlue" type="int" line="476"/>
            <javadoc line="479">
                Returns the alpha component in the range 0-255.                
                <return>
                    the alpha component.                    
                </return>
                <see>
                    #getRGB                    
                </see>
            </javadoc>
            <method name="getAlpha" type="int" line="484"/>
            <javadoc line="487">
                Returns the RGB value representing the color in the default sRGB{@link ColorModel}.
                  (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are
                  blue).                
                <return>
                    the RGB value of the color in the default sRGB
                      &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
                <see>
                    java.awt.image.ColorModel#getRGBdefault                    
                </see>
                <see>
                    #getRed                    
                </see>
                <see>
                    #getGreen                    
                </see>
                <see>
                    #getBlue                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getRGB" type="int" line="499"/>
            <declaration name="FACTOR" type="double" line="502"/>
            <javadoc line="503">
                Creates a new &lt;code&gt;Color&lt;/code&gt; that is a brighter version of this
                  &lt;code&gt;Color&lt;/code&gt;.
                  &lt;p&gt;
                  This method applies an arbitrary scale factor to each of the three RGB
                  components of this &lt;code&gt;Color&lt;/code&gt; to create a brighter version
                  of this &lt;code&gt;Color&lt;/code&gt;.
                  The {@code alpha} value is preserved.
                  Although &lt;code&gt;brighter&lt;/code&gt; and
                  &lt;code&gt;darker&lt;/code&gt; are inverse operations, the results of a
                  series of invocations of these two methods might be inconsistent
                  because of rounding errors.                
                <return>
                    a new &lt;code&gt;Color&lt;/code&gt; object that is
                      a brighter version of this &lt;code&gt;Color&lt;/code&gt;
                      with the same {@code alpha} value.                    
                </return>
                <see>
                    java.awt.Color#darker                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="brighter" type="Color" line="521">
                <declaration name="r" type="int" line="522"/>
                <declaration name="g" type="int" line="523"/>
                <declaration name="b" type="int" line="524"/>
                <declaration name="alpha" type="int" line="525"/>
                <declaration name="i" type="int" line="526"/>
                <scope line="527"/>
            </method>
            <javadoc line="535">
                Creates a new &lt;code&gt;Color&lt;/code&gt; that is a darker version of this
                  &lt;code&gt;Color&lt;/code&gt;.
                  &lt;p&gt;
                  This method applies an arbitrary scale factor to each of the three RGB
                  components of this &lt;code&gt;Color&lt;/code&gt; to create a darker version of
                  this &lt;code&gt;Color&lt;/code&gt;.
                  The {@code alpha} value is preserved.
                  Although &lt;code&gt;brighter&lt;/code&gt; and
                  &lt;code&gt;darker&lt;/code&gt; are inverse operations, the results of a series
                  of invocations of these two methods might be inconsistent because
                  of rounding errors.                
                <return>
                    a new &lt;code&gt;Color&lt;/code&gt; object that is
                      a darker version of this &lt;code&gt;Color&lt;/code&gt;
                      with the same {@code alpha} value.                    
                </return>
                <see>
                    java.awt.Color#brighter                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="darker" type="Color" line="553"/>
            <javadoc line="556">
                Computes the hash code for this &lt;code&gt;Color&lt;/code&gt;.                
                <return>
                    a hash code value for this object.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="561"/>
            <javadoc line="564">
                Determines whether another object is equal to this
                  &lt;code&gt;Color&lt;/code&gt;.
                  &lt;p&gt;
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                  &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Color&lt;/code&gt; object that has the same
                  red, green, blue, and alpha values as this object.                
                <param>
                    obj   the object to test for equality with this
                      &lt;code&gt;Color&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="577">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="580">
                Returns a string representation of this &lt;code&gt;Color&lt;/code&gt;. This
                  method is intended to be used only for debugging purposes.  The
                  content and format of the returned string might vary between
                  implementations. The returned string might be empty but cannot
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;Color&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="588"/>
            <javadoc line="591">
                Converts a &lt;code&gt;String&lt;/code&gt; to an integer and returns the
                  specified opaque &lt;code&gt;Color&lt;/code&gt;. This method handles string
                  formats that are used to represent octal and hexadecimal numbers.                
                <param>
                    nm a &lt;code&gt;String&lt;/code&gt; that represents
                      an opaque color as a 24-bit integer                    
                </param>
                <return>
                    the new &lt;code&gt;Color&lt;/code&gt; object.                    
                </return>
                <see>
                    java.lang.Integer#decode                    
                </see>
                <exception>
                    NumberFormatException  if the specified string cannot
                      be interpreted as a decimal,
                      octal, or hexadecimal integer.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="decode" type="Color" line="604">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="intval" type="Integer" line="605"/>
                <declaration name="i" type="int" line="606"/>
            </method>
            <javadoc line="609">
                Finds a color in the system properties.
                  &lt;p&gt;
                  The argument is treated as the name of a system property to
                  be obtained. The string value of this property is then interpreted
                  as an integer which is then converted to a &lt;code&gt;Color&lt;/code&gt;
                  object.
                  &lt;p&gt;
                  If the specified property is not found or could not be parsed as
                  an integer then &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    nm the name of the color property                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; converted from the system
                      property.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.Integer#getInteger(java.lang.String)                    
                </see>
                <see>
                    java.awt.Color#Color(int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="627">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="630">
                Finds a color in the system properties.
                  &lt;p&gt;
                  The first argument is treated as the name of a system property to
                  be obtained. The string value of this property is then interpreted
                  as an integer which is then converted to a &lt;code&gt;Color&lt;/code&gt;
                  object.
                  &lt;p&gt;
                  If the specified property is not found or cannot be parsed as
                  an integer then the &lt;code&gt;Color&lt;/code&gt; specified by the second
                  argument is returned instead.                
                <param>
                    nm the name of the color property                    
                </param>
                <param>
                    v    the default &lt;code&gt;Color&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; converted from the system
                      property, or the specified &lt;code&gt;Color&lt;/code&gt;.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.Integer#getInteger(java.lang.String)                    
                </see>
                <see>
                    java.awt.Color#Color(int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="650">
                <params>
                    <param name="nm" type="String"/>
                    <param name="v" type="Color"/>
                </params>
                <declaration name="intval" type="Integer" line="651"/>
                <scope line="652"/>
                <declaration name="i" type="int" line="655"/>
            </method>
            <javadoc line="658">
                Finds a color in the system properties.
                  &lt;p&gt;
                  The first argument is treated as the name of a system property to
                  be obtained. The string value of this property is then interpreted
                  as an integer which is then converted to a &lt;code&gt;Color&lt;/code&gt;
                  object.
                  &lt;p&gt;
                  If the specified property is not found or could not be parsed as
                  an integer then the integer value &lt;code&gt;v&lt;/code&gt; is used instead,
                  and is converted to a &lt;code&gt;Color&lt;/code&gt; object.                
                <param>
                    nm  the name of the color property                    
                </param>
                <param>
                    v   the default color value, as an integer                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; converted from the system
                      property or the &lt;code&gt;Color&lt;/code&gt; converted from
                      the specified integer.                    
                </return>
                <see>
                    java.lang.System#getProperty(java.lang.String)                    
                </see>
                <see>
                    java.lang.Integer#getInteger(java.lang.String)                    
                </see>
                <see>
                    java.awt.Color#Color(int)                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="679">
                <params>
                    <param name="nm" type="String"/>
                    <param name="v" type="int"/>
                </params>
                <declaration name="intval" type="Integer" line="680"/>
                <declaration name="i" type="int" line="681"/>
            </method>
            <javadoc line="684">
                Converts the components of a color, as specified by the HSB
                  model, to an equivalent set of values for the default RGB model.
                  &lt;p&gt;
                  The &lt;code&gt;saturation&lt;/code&gt; and &lt;code&gt;brightness&lt;/code&gt; components
                  should be floating-point values between zero and one
                  (numbers in the range 0.0-1.0).  The &lt;code&gt;hue&lt;/code&gt; component
                  can be any floating-point number.  The floor of this number is
                  subtracted from it to create a fraction between 0 and 1.  This
                  fractional number is then multiplied by 360 to produce the hue
                  angle in the HSB color model.
                  &lt;p&gt;
                  The integer that is returned by &lt;code&gt;HSBtoRGB&lt;/code&gt; encodes the
                  value of a color in bits 0-23 of an integer value that is the same
                  format used by the method {@link #getRGB() &lt;code&gt;getRGB&lt;/code&gt;}.
                  This integer can be supplied as an argument to the
                  &lt;code&gt;Color&lt;/code&gt; constructor that takes a single integer argument.                
                <param>
                    hue   the hue component of the color                    
                </param>
                <param>
                    saturation   the saturation of the color                    
                </param>
                <param>
                    brightness   the brightness of the color                    
                </param>
                <return>
                    the RGB value of the color with the indicated hue,
                      saturation, and brightness.                    
                </return>
                <see>
                    java.awt.Color#getRGB()                    
                </see>
                <see>
                    java.awt.Color#Color(int)                    
                </see>
                <see>
                    java.awt.image.ColorModel#getRGBdefault()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="HSBtoRGB" type="int" line="711">
                <params>
                    <param name="hue" type="float"/>
                    <param name="saturation" type="float"/>
                    <param name="brightness" type="float"/>
                </params>
                <declaration name="r" type="int" line="712"/>
                <scope line="713"/>
                <scope line="716">
                    <declaration name="h" type="float" line="717"/>
                    <declaration name="f" type="float" line="718"/>
                    <declaration name="p" type="float" line="719"/>
                    <declaration name="q" type="float" line="720"/>
                    <declaration name="t" type="float" line="721"/>
                </scope>
            </method>
            <javadoc line="757">
                Converts the components of a color, as specified by the default RGB
                  model, to an equivalent set of values for hue, saturation, and
                  brightness that are the three components of the HSB model.
                  &lt;p&gt;
                  If the &lt;code&gt;hsbvals&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt;, then a
                  new array is allocated to return the result. Otherwise, the method
                  returns the array &lt;code&gt;hsbvals&lt;/code&gt;, with the values put into
                  that array.                
                <param>
                    r   the red component of the color                    
                </param>
                <param>
                    g   the green component of the color                    
                </param>
                <param>
                    b   the blue component of the color                    
                </param>
                <param>
                    hsbvals  the array used to return the
                      three HSB values, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    an array of three elements containing the hue, saturation,
                      and brightness (in that order), of the color with
                      the indicated red, green, and blue components.                    
                </return>
                <see>
                    java.awt.Color#getRGB()                    
                </see>
                <see>
                    java.awt.Color#Color(int)                    
                </see>
                <see>
                    java.awt.image.ColorModel#getRGBdefault()                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="RGBtoHSB" type="float[]" line="779">
                <params>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                    <param name="hsbvals" type="float[]"/>
                </params>
                <declaration name="hue" type="float" line="780"/>
                <scope line="781"/>
                <declaration name="cmax" type="int" line="784"/>
                <declaration name="cmin" type="int" line="786"/>
                <scope line="792">
                    <declaration name="redc" type="float" line="793"/>
                    <declaration name="greenc" type="float" line="794"/>
                    <declaration name="bluec" type="float" line="795"/>
                </scope>
            </method>
            <javadoc line="807">
                Creates a &lt;code&gt;Color&lt;/code&gt; object based on the specified values
                  for the HSB color model.
                  &lt;p&gt;
                  The &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; components should be
                  floating-point values between zero and one
                  (numbers in the range 0.0-1.0).  The &lt;code&gt;h&lt;/code&gt; component
                  can be any floating-point number.  The floor of this number is
                  subtracted from it to create a fraction between 0 and 1.  This
                  fractional number is then multiplied by 360 to produce the hue
                  angle in the HSB color model.                
                <param>
                    h   the hue component                    
                </param>
                <param>
                    s   the saturation of the color                    
                </param>
                <param>
                    b   the brightness of the color                    
                </param>
                <return>
                    a &lt;code&gt;Color&lt;/code&gt; object with the specified hue,
                      saturation, and brightness.                    
                </return>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getHSBColor" type="Color" line="825">
                <params>
                    <param name="h" type="float"/>
                    <param name="s" type="float"/>
                    <param name="b" type="float"/>
                </params>
            </method>
            <javadoc line="828">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing the color and alpha
                  components of the &lt;code&gt;Color&lt;/code&gt;, as represented in the default
                  sRGB color space.
                  If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an array of length
                  4 is created for the return value.  Otherwise,
                  &lt;code&gt;compArray&lt;/code&gt; must have length 4 or greater,
                  and it is filled in with the components and returned.                
                <param>
                    compArray an array that this method fills with
                      color and alpha components and returns                    
                </param>
                <return>
                    the RGBA components in a &lt;code&gt;float&lt;/code&gt; array.                    
                </return>
            </javadoc>
            <method name="getRGBComponents" type="float[]" line="840">
                <params>
                    <param name="compArray" type="float[]"/>
                </params>
                <declaration name="f" type="float[]" line="841"/>
                <scope line="842"/>
                <scope line="845"/>
                <scope line="848"/>
                <scope line="854"/>
            </method>
            <javadoc line="862">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing only the color
                  components of the &lt;code&gt;Color&lt;/code&gt;, in the default sRGB color
                  space.  If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an array of
                  length 3 is created for the return value.  Otherwise,
                  &lt;code&gt;compArray&lt;/code&gt; must have length 3 or greater, and it is
                  filled in with the components and returned.                
                <param>
                    compArray an array that this method fills with color
                      components and returns                    
                </param>
                <return>
                    the RGB components in a &lt;code&gt;float&lt;/code&gt; array.                    
                </return>
            </javadoc>
            <method name="getRGBColorComponents" type="float[]" line="873">
                <params>
                    <param name="compArray" type="float[]"/>
                </params>
                <declaration name="f" type="float[]" line="874"/>
                <scope line="875"/>
                <scope line="878"/>
                <scope line="881"/>
                <scope line="886"/>
            </method>
            <javadoc line="893">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing the color and alpha
                  components of the &lt;code&gt;Color&lt;/code&gt;, in the
                  &lt;code&gt;ColorSpace&lt;/code&gt; of the &lt;code&gt;Color&lt;/code&gt;.
                  If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an array with
                  length equal to the number of components in the associated
                  &lt;code&gt;ColorSpace&lt;/code&gt; plus one is created for
                  the return value.  Otherwise, &lt;code&gt;compArray&lt;/code&gt; must have at
                  least this length and it is filled in with the components and
                  returned.                
                <param>
                    compArray an array that this method fills with the color and
                      alpha components of this &lt;code&gt;Color&lt;/code&gt; in its
                      &lt;code&gt;ColorSpace&lt;/code&gt; and returns                    
                </param>
                <return>
                    the color and alpha components in a &lt;code&gt;float&lt;/code&gt;
                      array.                    
                </return>
            </javadoc>
            <method name="getComponents" type="float[]" line="909">
                <params>
                    <param name="compArray" type="float[]"/>
                </params>
                <declaration name="f" type="float[]" line="911"/>
                <declaration name="n" type="int" line="912"/>
                <scope line="913"/>
                <scope line="916"/>
                <scope line="919"/>
            </method>
            <javadoc line="925">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing only the color
                  components of the &lt;code&gt;Color&lt;/code&gt;, in the
                  &lt;code&gt;ColorSpace&lt;/code&gt; of the &lt;code&gt;Color&lt;/code&gt;.
                  If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an array with
                  length equal to the number of components in the associated
                  &lt;code&gt;ColorSpace&lt;/code&gt; is created for
                  the return value.  Otherwise, &lt;code&gt;compArray&lt;/code&gt; must have at
                  least this length and it is filled in with the components and
                  returned.                
                <param>
                    compArray an array that this method fills with the color
                      components of this &lt;code&gt;Color&lt;/code&gt; in its
                      &lt;code&gt;ColorSpace&lt;/code&gt; and returns                    
                </param>
                <return>
                    the color components in a &lt;code&gt;float&lt;/code&gt; array.                    
                </return>
            </javadoc>
            <method name="getColorComponents" type="float[]" line="940">
                <params>
                    <param name="compArray" type="float[]"/>
                </params>
                <declaration name="f" type="float[]" line="942"/>
                <declaration name="n" type="int" line="943"/>
                <scope line="944"/>
                <scope line="947"/>
                <scope line="950"/>
            </method>
            <javadoc line="955">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing the color and alpha
                  components of the &lt;code&gt;Color&lt;/code&gt;, in the
                  &lt;code&gt;ColorSpace&lt;/code&gt; specified by the &lt;code&gt;cspace&lt;/code&gt;
                  parameter.  If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an
                  array with length equal to the number of components in
                  &lt;code&gt;cspace&lt;/code&gt; plus one is created for the return value.
                  Otherwise, &lt;code&gt;compArray&lt;/code&gt; must have at least this
                  length, and it is filled in with the components and returned.                
                <param>
                    cspace a specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    compArray an array that this method fills with the
                      color and alpha components of this &lt;code&gt;Color&lt;/code&gt; in
                      the specified &lt;code&gt;ColorSpace&lt;/code&gt; and returns                    
                </param>
                <return>
                    the color and alpha components in a &lt;code&gt;float&lt;/code&gt;
                      array.                    
                </return>
            </javadoc>
            <method name="getComponents" type="float[]" line="971">
                <params>
                    <param name="cspace" type="ColorSpace"/>
                    <param name="compArray" type="float[]"/>
                </params>
                <scope line="972"/>
                <declaration name="f" type="float" line="975"/>
                <scope line="976"/>
                <scope line="982"/>
                <declaration name="tmp" type="float" line="985"/>
                <declaration name="tmpout" type="float" line="986"/>
                <scope line="987"/>
                <scope line="990"/>
                <scope line="993"/>
                <scope line="996"/>
            </method>
            <javadoc line="1001">
                Returns a &lt;code&gt;float&lt;/code&gt; array containing only the color
                  components of the &lt;code&gt;Color&lt;/code&gt; in the
                  &lt;code&gt;ColorSpace&lt;/code&gt; specified by the &lt;code&gt;cspace&lt;/code&gt;
                  parameter. If &lt;code&gt;compArray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, an array
                  with length equal to the number of components in
                  &lt;code&gt;cspace&lt;/code&gt; is created for the return value.  Otherwise,
                  &lt;code&gt;compArray&lt;/code&gt; must have at least this length, and it is
                  filled in with the components and returned.                
                <param>
                    cspace a specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    compArray an array that this method fills with the color
                      components of this &lt;code&gt;Color&lt;/code&gt; in the specified
                      &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <return>
                    the color components in a &lt;code&gt;float&lt;/code&gt; array.                    
                </return>
            </javadoc>
            <method name="getColorComponents" type="float[]" line="1016">
                <params>
                    <param name="cspace" type="ColorSpace"/>
                    <param name="compArray" type="float[]"/>
                </params>
                <scope line="1017"/>
                <declaration name="f" type="float" line="1020"/>
                <scope line="1021"/>
                <scope line="1027"/>
                <declaration name="tmp" type="float" line="1030"/>
                <declaration name="tmpout" type="float" line="1031"/>
                <scope line="1032"/>
                <scope line="1035"/>
            </method>
            <javadoc line="1040">
                Returns the &lt;code&gt;ColorSpace&lt;/code&gt; of this &lt;code&gt;Color&lt;/code&gt;.                
                <return>
                    this &lt;code&gt;Color&lt;/code&gt; object&apos;s &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorSpace" type="ColorSpace" line="1044">
                <scope line="1045"/>
            </method>
            <javadoc line="1050">
                Creates and returns a {@link PaintContext} used to
                  generate a solid color field pattern.
                  See the {@link Paint#createContext specification} of the
                  method in the {@link Paint} interface for information
                  on null parameter handling.                
                <param>
                    cm the preferred {@link ColorModel} which represents the most convenient
                      format for the caller to receive the pixel data, or {@code null}if there is no preference.                    
                </param>
                <param>
                    r the device space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    r2d the user space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    xform the {@link AffineTransform} from user
                      space into device space.                    
                </param>
                <param>
                    hints the set of hints that the context object can use to
                      choose between rendering alternatives.                    
                </param>
                <return>
                    the {@code PaintContext} for
                      generating color patterns.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    PaintContext                    
                </see>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Rectangle                    
                </see>
                <see>
                    Rectangle2D                    
                </see>
                <see>
                    AffineTransform                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="createContext" type="PaintContext" line="1076">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="r" type="Rectangle"/>
                    <param name="r2d" type="Rectangle2D"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="1079">
                Returns the transparency mode for this &lt;code&gt;Color&lt;/code&gt;.  This is
                  required to implement the &lt;code&gt;Paint&lt;/code&gt; interface.                
                <return>
                    this &lt;code&gt;Color&lt;/code&gt; object&apos;s transparency mode.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    Transparency                    
                </see>
                <see>
                    #createContext                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="1087">
                <declaration name="alpha" type="int" line="1088"/>
                <scope line="1089"/>
                <scope line="1092"/>
                <scope line="1095"/>
            </method>
        </class>
    </source>