<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.beans.ConstructorProperties"/>
        <class name="BasicStroke" line="3">
            <implements interface="Stroke"/>
            <javadoc line="3">
                The &lt;code&gt;BasicStroke&lt;/code&gt; class defines a basic set of rendering
                  attributes for the outlines of graphics primitives, which are rendered
                  with a {@link Graphics2D} object that has its Stroke attribute set to
                  this &lt;code&gt;BasicStroke&lt;/code&gt;.
                  The rendering attributes defined by &lt;code&gt;BasicStroke&lt;/code&gt; describe
                  the shape of the mark made by a pen drawn along the outline of a{@link Shape} and the decorations applied at the ends and joins of
                  path segments of the &lt;code&gt;Shape&lt;/code&gt;.
                  These rendering attributes include:
                  &lt;dl compact&gt;
                  &lt;dt&gt;&lt;i&gt;width&lt;/i&gt;
                  &lt;dd&gt;The pen width, measured perpendicularly to the pen trajectory.
                  &lt;dt&gt;&lt;i&gt;end caps&lt;/i&gt;
                  &lt;dd&gt;The decoration applied to the ends of unclosed subpaths and
                  dash segments.  Subpaths that start and end on the same point are
                  still considered unclosed if they do not have a CLOSE segment.
                  See {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}for more information on the CLOSE segment.
                  The three different decorations are: {@link #CAP_BUTT},{@link #CAP_ROUND}, and {@link #CAP_SQUARE}.
                  &lt;dt&gt;&lt;i&gt;line joins&lt;/i&gt;
                  &lt;dd&gt;The decoration applied at the intersection of two path segments
                  and at the intersection of the endpoints of a subpath that is closed
                  using {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}.
                  The three different decorations are: {@link #JOIN_BEVEL},{@link #JOIN_MITER}, and {@link #JOIN_ROUND}.
                  &lt;dt&gt;&lt;i&gt;miter limit&lt;/i&gt;
                  &lt;dd&gt;The limit to trim a line join that has a JOIN_MITER decoration.
                  A line join is trimmed when the ratio of miter length to stroke
                  width is greater than the miterlimit value.  The miter length is
                  the diagonal length of the miter, which is the distance between
                  the inside corner and the outside corner of the intersection.
                  The smaller the angle formed by two line segments, the longer
                  the miter length and the sharper the angle of intersection.  The
                  default miterlimit value of 10.0f causes all angles less than
                  11 degrees to be trimmed.  Trimming miters converts
                  the decoration of the line join to bevel.
                  &lt;dt&gt;&lt;i&gt;dash attributes&lt;/i&gt;
                  &lt;dd&gt;The definition of how to make a dash pattern by alternating
                  between opaque and transparent sections.
                  &lt;/dl&gt;
                  All attributes that specify measurements and distances controlling
                  the shape of the returned outline are measured in the same
                  coordinate system as the original unstroked &lt;code&gt;Shape&lt;/code&gt;
                  argument.  When a &lt;code&gt;Graphics2D&lt;/code&gt; object uses a
                  &lt;code&gt;Stroke&lt;/code&gt; object to redefine a path during the execution
                  of one of its &lt;code&gt;draw&lt;/code&gt; methods, the geometry is supplied
                  in its original form before the &lt;code&gt;Graphics2D&lt;/code&gt; transform
                  attribute is applied.  Therefore, attributes such as the pen width
                  are interpreted in the user space coordinate system of the
                  &lt;code&gt;Graphics2D&lt;/code&gt; object and are subject to the scaling and
                  shearing effects of the user-space-to-device-space transform in that
                  particular &lt;code&gt;Graphics2D&lt;/code&gt;.
                  For example, the width of a rendered shape&apos;s outline is determined
                  not only by the width attribute of this &lt;code&gt;BasicStroke&lt;/code&gt;,
                  but also by the transform attribute of the
                  &lt;code&gt;Graphics2D&lt;/code&gt; object.  Consider this code:
                  &lt;blockquote&gt;&lt;tt&gt;
                  // sets the Graphics2D object&apos;s Tranform attribute
                  g2d.scale(10, 10);
                  // sets the Graphics2D object&apos;s Stroke attribute
                  g2d.setStroke(new BasicStroke(1.5f));
                  &lt;/tt&gt;&lt;/blockquote&gt;
                  Assuming there are no other scaling transforms added to the
                  &lt;code&gt;Graphics2D&lt;/code&gt; object, the resulting line
                  will be approximately 15 pixels wide.
                  As the example code demonstrates, a floating-point line
                  offers better precision, especially when large transforms are
                  used with a &lt;code&gt;Graphics2D&lt;/code&gt; object.
                  When a line is diagonal, the exact width depends on how the
                  rendering pipeline chooses which pixels to fill as it traces the
                  theoretical widened outline.  The choice of which pixels to turn
                  on is affected by the antialiasing attribute because the
                  antialiasing rendering pipeline can choose to color
                  partially-covered pixels.
                  &lt;p&gt;
                  For more information on the user space coordinate system and the
                  rendering process, see the &lt;code&gt;Graphics2D&lt;/code&gt; class comments.                
                <see>
                    Graphics2D                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="JOIN_MITER" type="int" line="82"/>
            <javadoc line="82">
                Joins path segments by extending their outside edges until
                  they meet.                
            </javadoc>
            <declaration name="JOIN_ROUND" type="int" line="87"/>
            <javadoc line="87">
                Joins path segments by rounding off the corner at a radius
                  of half the line width.                
            </javadoc>
            <declaration name="JOIN_BEVEL" type="int" line="92"/>
            <javadoc line="92">
                Joins path segments by connecting the outer corners of their
                  wide outlines with a straight segment.                
            </javadoc>
            <declaration name="CAP_BUTT" type="int" line="97"/>
            <javadoc line="97">
                Ends unclosed subpaths and dash segments with no added
                  decoration.                
            </javadoc>
            <declaration name="CAP_ROUND" type="int" line="102"/>
            <javadoc line="102">
                Ends unclosed subpaths and dash segments with a round
                  decoration that has a radius equal to half of the width
                  of the pen.                
            </javadoc>
            <declaration name="CAP_SQUARE" type="int" line="108"/>
            <javadoc line="108">
                Ends unclosed subpaths and dash segments with a square
                  projection that extends beyond the end of the segment
                  to a distance equal to half of the line width.                
            </javadoc>
            <declaration name="width" type="float" line="114"/>
            <declaration name="join" type="int" line="115"/>
            <declaration name="cap" type="int" line="116"/>
            <declaration name="miterlimit" type="float" line="117"/>
            <declaration name="dash" type="float" line="118"/>
            <declaration name="dash_phase" type="float" line="119"/>
            <javadoc line="120">
                Constructs a new &lt;code&gt;BasicStroke&lt;/code&gt; with the specified
                  attributes.                
                <param>
                    width the width of this <code>BasicStroke</code>.  The
                      width must be greater than or equal to 0.0f.  If width is
                      set to 0.0f, the stroke is rendered as the thinnest
                      possible line for the target device and the antialias
                      hint setting.                    
                </param>
                <param>
                    cap the decoration of the ends of a <code>BasicStroke</code>                    
                </param>
                <param>
                    join the decoration applied where path segments meet                    
                </param>
                <param>
                    miterlimit the limit to trim the miter join.  The miterlimit
                      must be greater than or equal to 1.0f.                    
                </param>
                <param>
                    dash the array representing the dashing pattern                    
                </param>
                <param>
                    dash_phase the offset to start the dashing pattern                    
                </param>
                <throws>
                    IllegalArgumentException if <code>width</code> is negative                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>cap</code> is not either
                      CAP_BUTT, CAP_ROUND or CAP_SQUARE                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>miterlimit</code> is less
                      than 1 and <code>join</code> is JOIN_MITER                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>join</code> is not
                      either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dash_phase</code>
                      is negative and <code>dash</code> is not <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if the length of
                      <code>dash</code> is zero                    
                </throws>
                <throws>
                    IllegalArgumentException if dash lengths are all zero.                    
                </throws>
            </javadoc>
            <method name="BasicStroke" type="constructor" line="147">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                    <param name="dash" type="float"/>
                    <param name="dash_phase" type="float"/>
                </params>
                <scope line="148"/>
                <scope line="151"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <scope line="159"/>
                <scope line="162">
                    <scope line="163"/>
                    <declaration name="allzero" type="boolean" line="166"/>
                    <scope line="167">
                        <declaration name="d" type="float" line="168"/>
                        <scope line="169"/>
                        <scope line="172"/>
                    </scope>
                    <scope line="176"/>
                </scope>
                <scope line="184"/>
            </method>
            <javadoc line="189">
                Constructs a solid &lt;code&gt;BasicStroke&lt;/code&gt; with the specified
                  attributes.                
                <param>
                    width the width of the <code>BasicStroke</code>                    
                </param>
                <param>
                    cap the decoration of the ends of a <code>BasicStroke</code>                    
                </param>
                <param>
                    join the decoration applied where path segments meet                    
                </param>
                <param>
                    miterlimit the limit to trim the miter join                    
                </param>
                <throws>
                    IllegalArgumentException if <code>width</code> is negative                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>cap</code> is not either
                      CAP_BUTT, CAP_ROUND or CAP_SQUARE                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>miterlimit</code> is less
                      than 1 and <code>join</code> is JOIN_MITER                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>join</code> is not
                      either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER                    
                </throws>
            </javadoc>
            <method name="BasicStroke" type="constructor" line="204">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                    <param name="miterlimit" type="float"/>
                </params>
            </method>
            <javadoc line="207">
                Constructs a solid &lt;code&gt;BasicStroke&lt;/code&gt; with the specified
                  attributes.  The &lt;code&gt;miterlimit&lt;/code&gt; parameter is
                  unnecessary in cases where the default is allowable or the
                  line joins are not specified as JOIN_MITER.                
                <param>
                    width the width of the <code>BasicStroke</code>                    
                </param>
                <param>
                    cap the decoration of the ends of a <code>BasicStroke</code>                    
                </param>
                <param>
                    join the decoration applied where path segments meet                    
                </param>
                <throws>
                    IllegalArgumentException if <code>width</code> is negative                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>cap</code> is not either
                      CAP_BUTT, CAP_ROUND or CAP_SQUARE                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>join</code> is not
                      either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER                    
                </throws>
            </javadoc>
            <method name="BasicStroke" type="constructor" line="221">
                <params>
                    <param name="width" type="float"/>
                    <param name="cap" type="int"/>
                    <param name="join" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Constructs a solid &lt;code&gt;BasicStroke&lt;/code&gt; with the specified
                  line width and with default values for the cap and join
                  styles.                
                <param>
                    width the width of the <code>BasicStroke</code>                    
                </param>
                <throws>
                    IllegalArgumentException if <code>width</code> is negative                    
                </throws>
            </javadoc>
            <method name="BasicStroke" type="constructor" line="231">
                <params>
                    <param name="width" type="float"/>
                </params>
            </method>
            <javadoc line="234">
                Constructs a new &lt;code&gt;BasicStroke&lt;/code&gt; with defaults for all
                  attributes.
                  The default attributes are a solid line of width 1.0, CAP_SQUARE,
                  JOIN_MITER, a miter limit of 10.0.                
            </javadoc>
            <method name="BasicStroke" type="constructor" line="240"/>
            <javadoc line="243">
                Returns a &lt;code&gt;Shape&lt;/code&gt; whose interior defines the
                  stroked outline of a specified &lt;code&gt;Shape&lt;/code&gt;.                
                <param>
                    s the <code>Shape</code> boundary be stroked                    
                </param>
                <return>
                    the <code>Shape</code> of the stroked outline.                    
                </return>
            </javadoc>
            <method name="createStrokedShape" type="Shape" line="249">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <declaration name="re" type="sun.java2d.pipe.RenderingEngine" line="250"/>
            </method>
            <javadoc line="253">
                Returns the line width.  Line width is represented in user space,
                  which is the default-coordinate space used by Java 2D.  See the
                  &lt;code&gt;Graphics2D&lt;/code&gt; class comments for more information on
                  the user space coordinate system.                
                <return>
                    the line width of this <code>BasicStroke</code>.                    
                </return>
                <see>
                    Graphics2D                    
                </see>
            </javadoc>
            <method name="getLineWidth" type="float" line="261"/>
            <javadoc line="264">
                Returns the end cap style.                
                <return>
                    the end cap style of this <code>BasicStroke</code> as one
                      of the static <code>int</code> values that define possible end cap
                      styles.                    
                </return>
            </javadoc>
            <method name="getEndCap" type="int" line="270"/>
            <javadoc line="273">
                Returns the line join style.                
                <return>
                    the line join style of the <code>BasicStroke</code> as one
                      of the static <code>int</code> values that define possible line
                      join styles.                    
                </return>
            </javadoc>
            <method name="getLineJoin" type="int" line="279"/>
            <javadoc line="282">
                Returns the limit of miter joins.                
                <return>
                    the limit of miter joins of the <code>BasicStroke</code>.                    
                </return>
            </javadoc>
            <method name="getMiterLimit" type="float" line="286"/>
            <javadoc line="289">
                Returns the array representing the lengths of the dash segments.
                  Alternate entries in the array represent the user space lengths
                  of the opaque and transparent segments of the dashes.
                  As the pen moves along the outline of the &lt;code&gt;Shape&lt;/code&gt;
                  to be stroked, the user space
                  distance that the pen travels is accumulated.  The distance
                  value is used to index into the dash array.
                  The pen is opaque when its current cumulative distance maps
                  to an even element of the dash array and transparent otherwise.                
                <return>
                    the dash array.                    
                </return>
            </javadoc>
            <method name="getDashArray" type="float[]" line="301">
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Returns the current dash phase.
                  The dash phase is a distance specified in user coordinates that
                  represents an offset into the dashing pattern. In other words, the dash
                  phase defines the point in the dashing pattern that will correspond to
                  the beginning of the stroke.                
                <return>
                    the dash phase as a <code>float</code> value.                    
                </return>
            </javadoc>
            <method name="getDashPhase" type="float" line="315"/>
            <javadoc line="318">
                Returns the hashcode for this stroke.                
                <return>
                    a hash code for this stroke.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="322">
                <declaration name="hash" type="int" line="323"/>
                <scope line="327">
                    <scope line="329"/>
                </scope>
            </method>
            <javadoc line="335">
                Tests if a specified object is equal to this &lt;code&gt;BasicStroke&lt;/code&gt;
                  by first testing if it is a &lt;code&gt;BasicStroke&lt;/code&gt; and then comparing
                  its width, join, cap, miter limit, dash, and dash phase attributes with
                  those of this &lt;code&gt;BasicStroke&lt;/code&gt;.                
                <param>
                    obj the specified object to compare to this
                      <code>BasicStroke</code>                    
                </param>
                <return>
                    <code>true</code> if the width, join, cap, miter limit, dash, and
                      dash phase are the same for both objects;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="346">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="347"/>
                <declaration name="bs" type="BasicStroke" line="350"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360"/>
                <scope line="363">
                    <scope line="364"/>
                    <scope line="367"/>
                </scope>
                <scope line="371"/>
            </method>
        </class>
    </source>