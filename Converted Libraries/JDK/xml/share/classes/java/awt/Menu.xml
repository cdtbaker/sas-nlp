<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.awt.peer.MenuPeer"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="javax.accessibility"/>
        <class name="Menu" line="35">
            <extends class="MenuItem"/>
            <comment line="103">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="226">
                This is called by the native code, so client code can&apos;t
                 be called on the toolkit thread.                
            </comment>
            <comment line="243">
                This is called by the native code, so client code can&apos;t
                 be called on the toolkit thread.                
            </comment>
            <comment line="443">
                Post an ActionEvent to the target of the MenuPeer
                 associated with the specified keyboard event (on
                 keydown).  Returns true if there is an associated
                 keyboard event.                
            </comment>
            <comment line="499">
                Serialization support.  A MenuContainer is responsible for
                 restoring the parent fields of its children.                
            </comment>
            <comment line="565">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="621">
                class AccessibleAWTMenu                
            </comment>
            <implements interface="MenuContainer"/>
            <implements interface="Accessible"/>
            <javadoc line="35">
                A &lt;code&gt;Menu&lt;/code&gt; object is a pull-down menu component
                  that is deployed from a menu bar.
                  &lt;p&gt;
                  A menu can optionally be a &lt;i&gt;tear-off&lt;/i&gt; menu. A tear-off menu
                  can be opened and dragged away from its parent menu bar or menu.
                  It remains on the screen after the mouse button has been released.
                  The mechanism for tearing off a menu is platform dependent, since
                  the look and feel of the tear-off menu is determined by its peer.
                  On platforms that do not support tear-off menus, the tear-off
                  property is ignored.
                  &lt;p&gt;
                  Each item in a menu must belong to the &lt;code&gt;MenuItem&lt;/code&gt;
                  class. It can be an instance of &lt;code&gt;MenuItem&lt;/code&gt;, a submenu
                  (an instance of &lt;code&gt;Menu&lt;/code&gt;), or a check box (an instance of
                  &lt;code&gt;CheckboxMenuItem&lt;/code&gt;).                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.MenuItem                    
                </see>
                <see>
                    java.awt.CheckboxMenuItem                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="59">
                <scope line="62"/>
            </scope>
            <declaration name="items" type="Vector" line="67"/>
            <javadoc line="67">
                A vector of the items that will be part of the Menu.                
                <serial>
                                        
                </serial>
                <see>
                    #countItems()                    
                </see>
            </javadoc>
            <declaration name="tearOff" type="boolean" line="75"/>
            <javadoc line="75">
                This field indicates whether the menu has the
                  tear of property or not.  It will be set to
                  &lt;code&gt;true&lt;/code&gt; if the menu has the tear off
                  property and it will be set to &lt;code&gt;false&lt;/code&gt;
                  if it does not.
                  A torn off menu can be deleted by a user when
                  it is no longer needed.                
                <serial>
                                        
                </serial>
                <see>
                    #isTearOff()                    
                </see>
            </javadoc>
            <declaration name="isHelpMenu" type="boolean" line="89"/>
            <javadoc line="89">
                This field will be set to &lt;code&gt;true&lt;/code&gt;
                  if the Menu in question is actually a help
                  menu.  Otherwise it will be set to &lt;code&gt;
                  false&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="base" type="String" line="99"/>
            <declaration name="nameCounter" type="int" line="100"/>
            <declaration name="serialVersionUID" type="long" line="105"/>
            <javadoc line="107">
                Constructs a new menu with an empty label. This menu is not
                  a tear-off menu.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="Menu" type="constructor" line="115"/>
            <javadoc line="119">
                Constructs a new menu with the specified label. This menu is not
                  a tear-off menu.                
                <param>
                    label the menu&apos;s label in the menu bar, or in
                      another menu of which this menu is a submenu.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Menu" type="constructor" line="128">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="132">
                Constructs a new menu with the specified label,
                  indicating whether the menu can be torn off.
                  &lt;p&gt;
                  Tear-off functionality may not be supported by all
                  implementations of AWT.  If a particular implementation doesn&apos;t
                  support tear-off menus, this value is silently ignored.                
                <param>
                    label the menu&apos;s label in the menu bar, or in
                      another menu of which this menu is a submenu.                    
                </param>
                <param>
                    tearOff   if &lt;code&gt;true&lt;/code&gt;, the menu
                      is a tear-off menu.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.0.                    
                </since>
            </javadoc>
            <method name="Menu" type="constructor" line="148">
                <params>
                    <param name="label" type="String"/>
                    <param name="tearOff" type="boolean"/>
                </params>
            </method>
            <javadoc line="153">
                Construct a name for this MenuComponent.  Called by getName() when
                  the name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="157">
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Creates the menu&apos;s peer.  The peer allows us to modify the
                  appearance of the menu without changing its functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="167">
                <scope line="168">
                    <declaration name="nitems" type="int" line="171"/>
                    <scope line="172">
                        <declaration name="mi" type="MenuItem" line="173"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="180">
                Removes the menu&apos;s peer.  The peer allows us to modify the appearance
                  of the menu without changing its functionality.                
            </javadoc>
            <method name="removeNotify" type="void" line="184">
                <scope line="185">
                    <declaration name="nitems" type="int" line="186"/>
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="194">
                Indicates whether this menu is a tear-off menu.
                  &lt;p&gt;
                  Tear-off functionality may not be supported by all
                  implementations of AWT.  If a particular implementation doesn&apos;t
                  support tear-off menus, this value is silently ignored.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this is a tear-off menu;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isTearOff" type="boolean" line="203"/>
            <javadoc line="207">
                Get the number of items in this menu.                
                <return>
                    the number of items in this menu.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getItemCount" type="int" line="212"/>
            <javadoc line="216">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getItemCount()&lt;/code&gt;.                
            </javadoc>
            <method name="countItems" type="int" line="221"/>
            <method name="countItemsImpl" type="int" line="229"/>
            <javadoc line="233">
                Gets the item located at the specified index of this menu.                
                <param>
                    index the position of the item to be returned.                    
                </param>
                <return>
                    the item located at the specified index.                    
                </return>
            </javadoc>
            <method name="getItem" type="MenuItem" line="238">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getItemImpl" type="MenuItem" line="246">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                Adds the specified menu item to this menu. If the
                  menu item has been part of another menu, removes it
                  from that menu.                
                <param>
                    mi   the menu item to be added                    
                </param>
                <return>
                    the menu item added                    
                </return>
                <see>
                    java.awt.Menu#insert(java.lang.String,int)                    
                </see>
                <see>
                    java.awt.Menu#insert(java.awt.MenuItem,int)                    
                </see>
            </javadoc>
            <method name="add" type="MenuItem" line="260">
                <params>
                    <param name="mi" type="MenuItem"/>
                </params>
                <scope line="261">
                    <scope line="262"/>
                    <declaration name="peer" type="MenuPeer" line="267"/>
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="276">
                Adds an item with the specified label to this menu.                
                <param>
                    label   the text on the item                    
                </param>
                <see>
                    java.awt.Menu#insert(java.lang.String,int)                    
                </see>
                <see>
                    java.awt.Menu#insert(java.awt.MenuItem,int)                    
                </see>
            </javadoc>
            <method name="add" type="void" line="283">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="287">
                Inserts a menu item into this menu
                  at the specified position.                
                <param>
                    menuitem  the menu item to be inserted.                    
                </param>
                <param>
                    index     the position at which the menu
                      item should be inserted.                    
                </param>
                <see>
                    java.awt.Menu#add(java.lang.String)                    
                </see>
                <see>
                    java.awt.Menu#add(java.awt.MenuItem)                    
                </see>
                <exception>
                    IllegalArgumentException if the value of
                      &lt;code&gt;index&lt;/code&gt; is less than zero                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="insert" type="void" line="301">
                <params>
                    <param name="menuitem" type="MenuItem"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="311">
                    Remove the item at index, nitems-index times
                    storing them in a temporary vector in the
                    order they appear on the menu.                    
                </comment>
                <comment line="322">
                    Add the removed items back to the menu, they are
                    already in the correct order in the temp vector.                    
                </comment>
                <scope line="302">
                    <scope line="303"/>
                    <declaration name="nitems" type="int" line="307"/>
                    <declaration name="tempItems" type="Vector" line="308"/>
                    <scope line="314"/>
                    <scope line="324"/>
                </scope>
            </method>
            <javadoc line="330">
                Inserts a menu item with the specified label into this menu
                  at the specified position.  This is a convenience method for
                  &lt;code&gt;insert(menuItem, index)&lt;/code&gt;.                
                <param>
                    label the text on the item                    
                </param>
                <param>
                    index the position at which the menu item
                      should be inserted                    
                </param>
                <see>
                    java.awt.Menu#add(java.lang.String)                    
                </see>
                <see>
                    java.awt.Menu#add(java.awt.MenuItem)                    
                </see>
                <exception>
                    IllegalArgumentException if the value of
                      &lt;code&gt;index&lt;/code&gt; is less than zero                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="insert" type="void" line="345">
                <params>
                    <param name="label" type="String"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="349">
                Adds a separator line, or a hypen, to the menu at the current position.                
                <see>
                    java.awt.Menu#insertSeparator(int)                    
                </see>
            </javadoc>
            <method name="addSeparator" type="void" line="353"/>
            <javadoc line="357">
                Inserts a separator at the specified position.                
                <param>
                    index the position at which the
                      menu separator should be inserted.                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      &lt;code&gt;index&lt;/code&gt; is less than 0.                    
                </exception>
                <see>
                    java.awt.Menu#addSeparator                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="insertSeparator" type="void" line="367">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="377">
                    Remove the item at index, nitems-index times
                    storing them in a temporary vector in the
                    order they appear on the menu.                    
                </comment>
                <comment line="388">
                    Add the removed items back to the menu, they are
                    already in the correct order in the temp vector.                    
                </comment>
                <scope line="368">
                    <scope line="369"/>
                    <declaration name="nitems" type="int" line="373"/>
                    <declaration name="tempItems" type="Vector" line="374"/>
                    <scope line="380"/>
                    <scope line="390"/>
                </scope>
            </method>
            <javadoc line="396">
                Removes the menu item at the specified index from this menu.                
                <param>
                    index the position of the item to be removed.                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="400">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="401">
                    <declaration name="mi" type="MenuItem" line="402"/>
                    <declaration name="peer" type="MenuPeer" line="404"/>
                    <scope line="405"/>
                </scope>
            </method>
            <javadoc line="413">
                Removes the specified menu item from this menu.                
                <param>
                    item the item to be removed from the menu.
                      If &lt;code&gt;item&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                      or is not in this menu, this method does
                      nothing.                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="420">
                <params>
                    <param name="item" type="MenuComponent"/>
                </params>
                <scope line="421">
                    <declaration name="index" type="int" line="422"/>
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="429">
                Removes all items from this menu.                
                <since>
                    JDK1.0.                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="433">
                <scope line="434">
                    <declaration name="nitems" type="int" line="435"/>
                    <scope line="436"/>
                </scope>
            </method>
            <method name="handleShortcut" type="boolean" line="448">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <declaration name="nitems" type="int" line="449"/>
                <scope line="450">
                    <declaration name="mi" type="MenuItem" line="451"/>
                    <scope line="452"/>
                </scope>
            </method>
            <method name="getShortcutMenuItem" type="MenuItem" line="459">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
                <declaration name="nitems" type="int" line="460"/>
                <scope line="461">
                    <declaration name="mi" type="MenuItem" line="462"/>
                    <scope line="463"/>
                </scope>
            </method>
            <method name="shortcuts" type="Enumeration" line="470">
                <declaration name="shortcuts" type="Vector" line="471"/>
                <declaration name="nitems" type="int" line="472"/>
                <scope line="473">
                    <declaration name="mi" type="MenuItem" line="474"/>
                    <scope line="475">
                        <declaration name="e" type="Enumeration" line="476"/>
                        <scope line="477"/>
                    </scope>
                    <scope line="480">
                        <declaration name="ms" type="MenuShortcut" line="481"/>
                        <scope line="482"/>
                    </scope>
                </scope>
            </method>
            <method name="deleteShortcut" type="void" line="490">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
                <declaration name="nitems" type="int" line="491"/>
                <scope line="492"/>
            </method>
            <declaration name="menuSerializedDataVersion" type="int" line="502"/>
            <javadoc line="502">
                The menu serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="509">
                Writes default serializable fields to stream.                
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="518">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="522">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt;.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="535">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="537">
                    HeadlessException will be thrown from MenuComponent&apos;s readObject                    
                </comment>
                <scope line="538">
                    <declaration name="item" type="MenuItem" line="539"/>
                </scope>
            </method>
            <javadoc line="544">
                Returns a string representing the state of this &lt;code&gt;Menu&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this menu                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="553">
                <declaration name="str" type="String" line="554"/>
            </method>
            <method name="initIDs" type="void" line="558"/>
            <javadoc line="558">
                Initialize JNI field and method IDs                
            </javadoc>
            <javadoc line="568">
                Gets the AccessibleContext associated with this Menu.
                  For menus, the AccessibleContext takes the form of an
                  AccessibleAWTMenu.
                  A new AccessibleAWTMenu instance is created if necessary.                
                <return>
                    an AccessibleAWTMenu that serves as the
                      AccessibleContext of this Menu                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="578">
                <scope line="579"/>
            </method>
            <javadoc line="585">
                Defined in MenuComponent. Overridden here.                
            </javadoc>
            <method name="getAccessibleChildIndex" type="int" line="588">
                <params>
                    <param name="child" type="MenuComponent"/>
                </params>
            </method>
            <class name="AccessibleAWTMenu" line="592">
                <extends class="AccessibleAWTMenuItem"/>
                <comment line="606">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <javadoc line="592">
                    Inner class of Menu used to provide default support for
                      accessibility.  This class is not meant to be used directly by
                      application developers, but is instead meant only to be
                      subclassed by menu component developers.
                      &lt;p&gt;
                      This class implements accessibility support for the
                      &lt;code&gt;Menu&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to menu user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="608"/>
                <javadoc line="610">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="616"/>
            </class>
        </class>
    </source>