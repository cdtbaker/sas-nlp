<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Locale"/>
        <import package="java.util.ResourceBundle"/>
        <class name="ComponentOrientation" line="42">
            <comment line="94">
                serialVersionUID                
            </comment>
            <comment line="99">
                Internal constants used in the implementation                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="42">
                The ComponentOrientation class encapsulates the language-sensitive
                  orientation that is to be used to order the elements of a component
                  or of text. It is used to reflect the differences in this ordering
                  between Western alphabets, Middle Eastern (such as Hebrew), and Far
                  Eastern (such as Japanese).
                  &lt;p&gt;
                  Fundamentally, this governs items (such as characters) which are laid out
                  in lines, with the lines then laid out in a block. This also applies
                  to items in a widget: for example, in a check box where the box is
                  positioned relative to the text.
                  &lt;p&gt;
                  There are four different orientations used in modern languages
                  as in the following table.&lt;br&gt;
                  &lt;pre&gt;
                  LT          RT          TL          TR
                  A B C       C B A       A D G       G D A
                  D E F       F E D       B E H       H E B
                  G H I       I H G       C F I       I F C
                  &lt;/pre&gt;&lt;br&gt;
                  (In the header, the two-letter abbreviation represents the item direction
                  in the first letter, and the line direction in the second. For example,
                  LT means &quot;items left-to-right, lines top-to-bottom&quot;,
                  TL means &quot;items top-to-bottom, lines left-to-right&quot;, and so on.)
                  &lt;p&gt;
                  The orientations are:
                  &lt;ul&gt;
                  &lt;li&gt;LT - Western Europe (optional for Japanese, Chinese, Korean)
                  &lt;li&gt;RT - Middle East (Arabic, Hebrew)
                  &lt;li&gt;TR - Japanese, Chinese, Korean
                  &lt;li&gt;TL - Mongolian
                  &lt;/ul&gt;
                  Components whose view and controller code depends on orientation
                  should use the &lt;code&gt;isLeftToRight()&lt;/code&gt; and
                  &lt;code&gt;isHorizontal()&lt;/code&gt; methods to
                  determine their behavior. They should not include switch-like
                  code that keys off of the constants, such as:
                  &lt;pre&gt;
                  if (orientation == LEFT_TO_RIGHT) {
                  ...
                  } else if (orientation == RIGHT_TO_LEFT) {
                  ...
                  } else {
                  // Oops
                  }
                  &lt;/pre&gt;
                  This is unsafe, since more constants may be added in the future and
                  since it is not guaranteed that orientation objects will be unique.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="96"/>
            <declaration name="UNK_BIT" type="int" line="99"/>
            <declaration name="HORIZ_BIT" type="int" line="100"/>
            <declaration name="LTR_BIT" type="int" line="101"/>
            <declaration name="LEFT_TO_RIGHT" type="ComponentOrientation" line="103"/>
            <javadoc line="103">
                Items run left to right and lines flow top to bottom
                  Examples: English, French.                
            </javadoc>
            <declaration name="RIGHT_TO_LEFT" type="ComponentOrientation" line="110"/>
            <javadoc line="110">
                Items run right to left and lines flow top to bottom
                  Examples: Arabic, Hebrew.                
            </javadoc>
            <declaration name="UNKNOWN" type="ComponentOrientation" line="117"/>
            <javadoc line="117">
                Indicates that a component&apos;s orientation has not been set.
                  To preserve the behavior of existing applications,
                  isLeftToRight will return true for this value.                
            </javadoc>
            <javadoc line="125">
                Are lines horizontal?
                  This will return true for horizontal, left-to-right writing
                  systems such as Roman.                
            </javadoc>
            <method name="isHorizontal" type="boolean" line="130"/>
            <javadoc line="134">
                HorizontalLines: Do items run left-to-right?&lt;br&gt;
                  Vertical Lines:  Do lines run left-to-right?&lt;br&gt;
                  This will return true for horizontal, left-to-right writing
                  systems such as Roman.                
            </javadoc>
            <method name="isLeftToRight" type="boolean" line="140"/>
            <javadoc line="144">
                Returns the orientation that is appropriate for the given locale.                
                <param>
                    locale the specified locale                    
                </param>
            </javadoc>
            <method name="getOrientation" type="ComponentOrientation" line="148">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="149">
                    A more flexible implementation would consult a ResourceBundle                    
                </comment>
                <comment line="150">
                    to find the appropriate orientation.  Until pluggable locales                    
                </comment>
                <comment line="151">
                    are introduced however, the flexiblity isn&apos;t really needed.                    
                </comment>
                <comment line="152">
                    So we choose efficiency instead.                    
                </comment>
                <declaration name="lang" type="String" line="153"/>
                <scope line="156"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Returns the orientation appropriate for the given ResourceBundle&apos;s
                  localization.  Three approaches are tried, in the following order:
                  &lt;ol&gt;
                  &lt;li&gt;Retrieve a ComponentOrientation object from the ResourceBundle
                  using the string &quot;Orientation&quot; as the key.
                  &lt;li&gt;Use the ResourceBundle.getLocale to determine the bundle&apos;s
                  locale, then return the orientation for that locale.
                  &lt;li&gt;Return the default locale&apos;s orientation.
                  &lt;/ol&gt;                
                <deprecated>
                    As of J2SE 1.4, use {@link #getOrientation(java.util.Locale)}.                    
                </deprecated>
            </javadoc>
            <method name="getOrientation" type="ComponentOrientation" line="178">
                <params>
                    <param name="bdl" type="ResourceBundle"/>
                </params>
                <declaration name="result" type="ComponentOrientation" line="179"/>
                <scope line="181"/>
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <declaration name="orientation" type="int" line="196"/>
            <method name="ComponentOrientation" type="constructor" line="199">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
        </class>
    </source>