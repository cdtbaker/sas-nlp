<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.color">
        <import package="java.awt.image.LookupTable"/>
        <import package="sun.java2d.cmm.ProfileDeferralInfo"/>
        <class name="ICC_ProfileRGB" line="9">
            <extends class="ICC_Profile"/>
            <javadoc line="9">
                The ICC_ProfileRGB class is a subclass of the ICC_Profile class
                  that represents profiles which meet the following criteria:
                  &lt;ul&gt;
                  &lt;li&gt;The profile&apos;s color space type is RGB.&lt;/li&gt;
                  &lt;li&gt;The profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;,
                  &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;,
                  &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;,
                  &lt;code&gt;blueTRCTag&lt;/code&gt;, and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags.&lt;/li&gt;
                  &lt;/ul&gt;
                  The &lt;code&gt;ICC_Profile&lt;/code&gt; &lt;code&gt;getInstance&lt;/code&gt; method will
                  return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when these conditions are met.
                  Three-component, matrix-based input profiles and RGB display profiles are
                  examples of this type of profile.
                  &lt;p&gt;
                  This profile class provides color transform matrices and lookup tables
                  that Java or native methods can use directly to
                  optimize color conversion in some cases.
                  &lt;p&gt;
                  To transform from a device profile color space to the CIEXYZ Profile
                  Connection Space, each device color component is first linearized by
                  a lookup through the corresponding tone reproduction curve (TRC).
                  The resulting linear RGB components are converted to the CIEXYZ PCS
                  using a a 3x3 matrix constructed from the RGB colorants.
                  &lt;pre&gt;
                  &amp;nbsp;               linearR = redTRC[deviceR]
                  &amp;nbsp;               linearG = greenTRC[deviceG]
                  &amp;nbsp;               linearB = blueTRC[deviceB]
                  &amp;nbsp; _      _       _                                             _   _         _
                  &amp;nbsp;[  PCSX  ]     [  redColorantX  greenColorantX  blueColorantX  ] [  linearR  ]
                  &amp;nbsp;[        ]     [                                               ] [           ]
                  &amp;nbsp;[  PCSY  ]  =  [  redColorantY  greenColorantY  blueColorantY  ] [  linearG  ]
                  &amp;nbsp;[        ]     [                                               ] [           ]
                  &amp;nbsp;[_ PCSZ _]     [_ redColorantZ  greenColorantZ  blueColorantZ _] [_ linearB _]
                  &lt;/pre&gt;
                  The inverse transform is performed by converting PCS XYZ components to linear
                  RGB components through the inverse of the above 3x3 matrix, and then converting
                  linear RGB to device RGB through inverses of the TRCs.
                  &lt;p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <declaration name="REDCOMPONENT" type="int" line="51"/>
            <javadoc line="51">
                Used to get a gamma value or TRC for the red component.                
            </javadoc>
            <declaration name="GREENCOMPONENT" type="int" line="55"/>
            <javadoc line="55">
                Used to get a gamma value or TRC for the green component.                
            </javadoc>
            <declaration name="BLUECOMPONENT" type="int" line="59"/>
            <javadoc line="59">
                Used to get a gamma value or TRC for the blue component.                
            </javadoc>
            <javadoc line="63">
                Constructs an new &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; from a CMM ID.                
                <param>
                    ID The CMM ID for the profile.                    
                </param>
            </javadoc>
            <method name="ICC_ProfileRGB" type="constructor" line="67">
                <params>
                    <param name="ID" type="long"/>
                </params>
            </method>
            <javadoc line="70">
                Constructs a new &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; from a
                  ProfileDeferralInfo object.                
                <param>
                    pdi                    
                </param>
            </javadoc>
            <method name="ICC_ProfileRGB" type="constructor" line="75">
                <params>
                    <param name="pdi" type="ProfileDeferralInfo"/>
                </params>
            </method>
            <javadoc line="78">
                Returns an array that contains the components of the profile&apos;s
                  &lt;CODE&gt;mediaWhitePointTag&lt;/CODE&gt;.                
                <return>
                    A 3-element &lt;CODE&gt;float&lt;/CODE&gt; array containing the x, y,
                      and z components of the profile&apos;s &lt;CODE&gt;mediaWhitePointTag&lt;/CODE&gt;.                    
                </return>
            </javadoc>
            <method name="getMediaWhitePoint" type="float[]" line="84"/>
            <javadoc line="87">
                Returns a 3x3 &lt;CODE&gt;float&lt;/CODE&gt; matrix constructed from the
                  X, Y, and Z components of the profile&apos;s &lt;CODE&gt;redColorantTag&lt;/CODE&gt;,
                  &lt;CODE&gt;greenColorantTag&lt;/CODE&gt;, and &lt;CODE&gt;blueColorantTag&lt;/CODE&gt;.
                  &lt;p&gt;
                  This matrix can be used for color transforms in the forward
                  direction of the profile--from the profile color space
                  to the CIEXYZ PCS.                
                <return>
                    A 3x3 &lt;CODE&gt;float&lt;/CODE&gt; array that contains the x, y, and z
                      components of the profile&apos;s &lt;CODE&gt;redColorantTag&lt;/CODE&gt;,
                      &lt;CODE&gt;greenColorantTag&lt;/CODE&gt;, and &lt;CODE&gt;blueColorantTag&lt;/CODE&gt;.                    
                </return>
            </javadoc>
            <method name="getMatrix" type="float[][]" line="99">
                <declaration name="theMatrix" type="float[][]" line="100"/>
                <declaration name="tmpMatrix" type="float[]" line="101"/>
            </method>
            <javadoc line="116">
                Returns a gamma value representing the tone reproduction curve
                  (TRC) for a particular component.  The component parameter
                  must be one of REDCOMPONENT, GREENCOMPONENT, or BLUECOMPONENT.
                  &lt;p&gt;
                  If the profile
                  represents the TRC for the corresponding component
                  as a table rather than a single gamma value, an
                  exception is thrown.  In this case the actual table
                  can be obtained through the {@link #getTRC(int)} method.
                  When using a gamma value,
                  the linear component (R, G, or B) is computed as follows:
                  &lt;pre&gt;
                  &amp;nbsp;                                         gamma
                  &amp;nbsp;        linearComponent = deviceComponent
                  &lt;/pre&gt;                
                <param>
                    component The &lt;CODE&gt;ICC_ProfileRGB&lt;/CODE&gt; constant that
                      represents the component whose TRC you want to retrieve                    
                </param>
                <return>
                    the gamma value as a float.                    
                </return>
                <exception>
                    ProfileDataException if the profile does not specify
                      the corresponding TRC as a single gamma value.                    
                </exception>
            </javadoc>
            <method name="getGamma" type="float" line="138">
                <params>
                    <param name="component" type="int"/>
                </params>
                <declaration name="theGamma" type="float" line="139"/>
                <declaration name="theSignature" type="int" line="140"/>
            </method>
            <javadoc line="157">
                Returns the TRC for a particular component as an array.
                  Component must be &lt;code&gt;REDCOMPONENT&lt;/code&gt;,
                  &lt;code&gt;GREENCOMPONENT&lt;/code&gt;, or &lt;code&gt;BLUECOMPONENT&lt;/code&gt;.
                  Otherwise the returned array
                  represents a lookup table where the input component value
                  is conceptually in the range [0.0, 1.0].  Value 0.0 maps
                  to array index 0 and value 1.0 maps to array index length-1.
                  Interpolation might be used to generate output values for
                  input values that do not map exactly to an index in the
                  array.  Output values also map linearly to the range [0.0, 1.0].
                  Value 0.0 is represented by an array value of 0x0000 and
                  value 1.0 by 0xFFFF.  In other words, the values are really unsigned
                  &lt;code&gt;short&lt;/code&gt; values even though they are returned in a
                  &lt;code&gt;short&lt;/code&gt; array.
                  If the profile has specified the corresponding TRC
                  as linear (gamma = 1.0) or as a simple gamma value, this method
                  throws an exception.  In this case, the {@link #getGamma(int)}method should be used to get the gamma value.                
                <param>
                    component The &lt;CODE&gt;ICC_ProfileRGB&lt;/CODE&gt; constant that
                      represents the component whose TRC you want to retrieve:
                      &lt;CODE&gt;REDCOMPONENT&lt;/CODE&gt;, &lt;CODE&gt;GREENCOMPONENT&lt;/CODE&gt;, or
                      &lt;CODE&gt;BLUECOMPONENT&lt;/CODE&gt;.                    
                </param>
                <return>
                    a short array representing the TRC.                    
                </return>
                <exception>
                    ProfileDataException if the profile does not specify
                      the corresponding TRC as a table.                    
                </exception>
            </javadoc>
            <method name="getTRC" type="short[]" line="183">
                <params>
                    <param name="component" type="int"/>
                </params>
                <declaration name="theTRC" type="short[]" line="184"/>
                <declaration name="theSignature" type="int" line="185"/>
            </method>
        </class>
    </source>