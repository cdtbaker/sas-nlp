<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.color">
        <import package="sun.java2d.cmm.PCMM"/>
        <import package="sun.java2d.cmm.CMSManager"/>
        <import package="sun.java2d.cmm.ProfileDeferralMgr"/>
        <import package="sun.java2d.cmm.ProfileDeferralInfo"/>
        <import package="sun.java2d.cmm.ProfileActivator"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="ICC_Profile" line="26">
            <implements interface="Serializable"/>
            <javadoc line="26">
                A representation of color profile data for device independent and
                  device dependent color spaces based on the International Color
                  Consortium Specification ICC.1:2001-12, File Format for Color Profiles,
                  (see &lt;A href=&quot;http://www.color.org&quot;&gt; http://www.color.org&lt;/A&gt;).
                  &lt;p&gt;
                  An ICC_ColorSpace object can be constructed from an appropriate
                  ICC_Profile.
                  Typically, an ICC_ColorSpace would be associated with an ICC
                  Profile which is either an input, display, or output profile (see
                  the ICC specification).  There are also device link, abstract,
                  color space conversion, and named color profiles.  These are less
                  useful for tagging a color or image, but are useful for other
                  purposes (in particular device link profiles can provide improved
                  performance for converting from one device&apos;s color space to
                  another&apos;s).
                  &lt;p&gt;
                  ICC Profiles represent transformations from the color space of
                  the profile (e.g. a monitor) to a Profile Connection Space (PCS).
                  Profiles of interest for tagging images or colors have a PCS
                  which is one of the two specific device independent
                  spaces (one CIEXYZ space and one CIELab space) defined in the
                  ICC Profile Format Specification.  Most profiles of interest
                  either have invertible transformations or explicitly specify
                  transformations going both directions.
                  &lt;p&gt;                
                <see>
                    ICC_ColorSpace                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="ID" type="long" line="56"/>
            <declaration name="deferralInfo" type="ProfileDeferralInfo" line="57"/>
            <declaration name="profileActivator" type="ProfileActivator" line="58"/>
            <declaration name="sRGBprofile" type="ICC_Profile" line="59"/>
            <declaration name="XYZprofile" type="ICC_Profile" line="60"/>
            <declaration name="PYCCprofile" type="ICC_Profile" line="61"/>
            <declaration name="GRAYprofile" type="ICC_Profile" line="62"/>
            <declaration name="LINEAR_RGBprofile" type="ICC_Profile" line="63"/>
            <declaration name="CLASS_INPUT" type="int" line="64"/>
            <javadoc line="64">
                Profile class is input.                
            </javadoc>
            <declaration name="CLASS_DISPLAY" type="int" line="68"/>
            <javadoc line="68">
                Profile class is display.                
            </javadoc>
            <declaration name="CLASS_OUTPUT" type="int" line="72"/>
            <javadoc line="72">
                Profile class is output.                
            </javadoc>
            <declaration name="CLASS_DEVICELINK" type="int" line="76"/>
            <javadoc line="76">
                Profile class is device link.                
            </javadoc>
            <declaration name="CLASS_COLORSPACECONVERSION" type="int" line="80"/>
            <javadoc line="80">
                Profile class is color space conversion.                
            </javadoc>
            <declaration name="CLASS_ABSTRACT" type="int" line="84"/>
            <javadoc line="84">
                Profile class is abstract.                
            </javadoc>
            <declaration name="CLASS_NAMEDCOLOR" type="int" line="88"/>
            <javadoc line="88">
                Profile class is named color.                
            </javadoc>
            <declaration name="icSigXYZData" type="int" line="92"/>
            <javadoc line="92">
                ICC Profile Color Space Type Signature: &apos;XYZ &apos;.                
            </javadoc>
            <declaration name="icSigLabData" type="int" line="96"/>
            <javadoc line="96">
                ICC Profile Color Space Type Signature: &apos;Lab &apos;.                
            </javadoc>
            <declaration name="icSigLuvData" type="int" line="100"/>
            <javadoc line="100">
                ICC Profile Color Space Type Signature: &apos;Luv &apos;.                
            </javadoc>
            <declaration name="icSigYCbCrData" type="int" line="104"/>
            <javadoc line="104">
                ICC Profile Color Space Type Signature: &apos;YCbr&apos;.                
            </javadoc>
            <declaration name="icSigYxyData" type="int" line="108"/>
            <javadoc line="108">
                ICC Profile Color Space Type Signature: &apos;Yxy &apos;.                
            </javadoc>
            <declaration name="icSigRgbData" type="int" line="112"/>
            <javadoc line="112">
                ICC Profile Color Space Type Signature: &apos;RGB &apos;.                
            </javadoc>
            <declaration name="icSigGrayData" type="int" line="116"/>
            <javadoc line="116">
                ICC Profile Color Space Type Signature: &apos;GRAY&apos;.                
            </javadoc>
            <declaration name="icSigHsvData" type="int" line="120"/>
            <javadoc line="120">
                ICC Profile Color Space Type Signature: &apos;HSV&apos;.                
            </javadoc>
            <declaration name="icSigHlsData" type="int" line="124"/>
            <javadoc line="124">
                ICC Profile Color Space Type Signature: &apos;HLS&apos;.                
            </javadoc>
            <declaration name="icSigCmykData" type="int" line="128"/>
            <javadoc line="128">
                ICC Profile Color Space Type Signature: &apos;CMYK&apos;.                
            </javadoc>
            <declaration name="icSigCmyData" type="int" line="132"/>
            <javadoc line="132">
                ICC Profile Color Space Type Signature: &apos;CMY &apos;.                
            </javadoc>
            <declaration name="icSigSpace2CLR" type="int" line="136"/>
            <javadoc line="136">
                ICC Profile Color Space Type Signature: &apos;2CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace3CLR" type="int" line="140"/>
            <javadoc line="140">
                ICC Profile Color Space Type Signature: &apos;3CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace4CLR" type="int" line="144"/>
            <javadoc line="144">
                ICC Profile Color Space Type Signature: &apos;4CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace5CLR" type="int" line="148"/>
            <javadoc line="148">
                ICC Profile Color Space Type Signature: &apos;5CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace6CLR" type="int" line="152"/>
            <javadoc line="152">
                ICC Profile Color Space Type Signature: &apos;6CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace7CLR" type="int" line="156"/>
            <javadoc line="156">
                ICC Profile Color Space Type Signature: &apos;7CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace8CLR" type="int" line="160"/>
            <javadoc line="160">
                ICC Profile Color Space Type Signature: &apos;8CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpace9CLR" type="int" line="164"/>
            <javadoc line="164">
                ICC Profile Color Space Type Signature: &apos;9CLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceACLR" type="int" line="168"/>
            <javadoc line="168">
                ICC Profile Color Space Type Signature: &apos;ACLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceBCLR" type="int" line="172"/>
            <javadoc line="172">
                ICC Profile Color Space Type Signature: &apos;BCLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceCCLR" type="int" line="176"/>
            <javadoc line="176">
                ICC Profile Color Space Type Signature: &apos;CCLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceDCLR" type="int" line="180"/>
            <javadoc line="180">
                ICC Profile Color Space Type Signature: &apos;DCLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceECLR" type="int" line="184"/>
            <javadoc line="184">
                ICC Profile Color Space Type Signature: &apos;ECLR&apos;.                
            </javadoc>
            <declaration name="icSigSpaceFCLR" type="int" line="188"/>
            <javadoc line="188">
                ICC Profile Color Space Type Signature: &apos;FCLR&apos;.                
            </javadoc>
            <declaration name="icSigInputClass" type="int" line="192"/>
            <javadoc line="192">
                ICC Profile Class Signature: &apos;scnr&apos;.                
            </javadoc>
            <declaration name="icSigDisplayClass" type="int" line="196"/>
            <javadoc line="196">
                ICC Profile Class Signature: &apos;mntr&apos;.                
            </javadoc>
            <declaration name="icSigOutputClass" type="int" line="200"/>
            <javadoc line="200">
                ICC Profile Class Signature: &apos;prtr&apos;.                
            </javadoc>
            <declaration name="icSigLinkClass" type="int" line="204"/>
            <javadoc line="204">
                ICC Profile Class Signature: &apos;link&apos;.                
            </javadoc>
            <declaration name="icSigAbstractClass" type="int" line="208"/>
            <javadoc line="208">
                ICC Profile Class Signature: &apos;abst&apos;.                
            </javadoc>
            <declaration name="icSigColorSpaceClass" type="int" line="212"/>
            <javadoc line="212">
                ICC Profile Class Signature: &apos;spac&apos;.                
            </javadoc>
            <declaration name="icSigNamedColorClass" type="int" line="216"/>
            <javadoc line="216">
                ICC Profile Class Signature: &apos;nmcl&apos;.                
            </javadoc>
            <declaration name="icPerceptual" type="int" line="220"/>
            <javadoc line="220">
                ICC Profile Rendering Intent: Perceptual.                
            </javadoc>
            <declaration name="icRelativeColorimetric" type="int" line="224"/>
            <javadoc line="224">
                ICC Profile Rendering Intent: RelativeColorimetric.                
            </javadoc>
            <declaration name="icMediaRelativeColorimetric" type="int" line="228"/>
            <javadoc line="228">
                ICC Profile Rendering Intent: Media-RelativeColorimetric.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSaturation" type="int" line="233"/>
            <javadoc line="233">
                ICC Profile Rendering Intent: Saturation.                
            </javadoc>
            <declaration name="icAbsoluteColorimetric" type="int" line="237"/>
            <javadoc line="237">
                ICC Profile Rendering Intent: AbsoluteColorimetric.                
            </javadoc>
            <declaration name="icICCAbsoluteColorimetric" type="int" line="241"/>
            <javadoc line="241">
                ICC Profile Rendering Intent: ICC-AbsoluteColorimetric.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigHead" type="int" line="246"/>
            <javadoc line="246">
                ICC Profile Tag Signature: &apos;head&apos; - special.                
            </javadoc>
            <declaration name="icSigAToB0Tag" type="int" line="250"/>
            <javadoc line="250">
                ICC Profile Tag Signature: &apos;A2B0&apos;.                
            </javadoc>
            <declaration name="icSigAToB1Tag" type="int" line="254"/>
            <javadoc line="254">
                ICC Profile Tag Signature: &apos;A2B1&apos;.                
            </javadoc>
            <declaration name="icSigAToB2Tag" type="int" line="258"/>
            <javadoc line="258">
                ICC Profile Tag Signature: &apos;A2B2&apos;.                
            </javadoc>
            <declaration name="icSigBlueColorantTag" type="int" line="262"/>
            <javadoc line="262">
                ICC Profile Tag Signature: &apos;bXYZ&apos;.                
            </javadoc>
            <declaration name="icSigBlueMatrixColumnTag" type="int" line="266"/>
            <javadoc line="266">
                ICC Profile Tag Signature: &apos;bXYZ&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigBlueTRCTag" type="int" line="271"/>
            <javadoc line="271">
                ICC Profile Tag Signature: &apos;bTRC&apos;.                
            </javadoc>
            <declaration name="icSigBToA0Tag" type="int" line="275"/>
            <javadoc line="275">
                ICC Profile Tag Signature: &apos;B2A0&apos;.                
            </javadoc>
            <declaration name="icSigBToA1Tag" type="int" line="279"/>
            <javadoc line="279">
                ICC Profile Tag Signature: &apos;B2A1&apos;.                
            </javadoc>
            <declaration name="icSigBToA2Tag" type="int" line="283"/>
            <javadoc line="283">
                ICC Profile Tag Signature: &apos;B2A2&apos;.                
            </javadoc>
            <declaration name="icSigCalibrationDateTimeTag" type="int" line="287"/>
            <javadoc line="287">
                ICC Profile Tag Signature: &apos;calt&apos;.                
            </javadoc>
            <declaration name="icSigCharTargetTag" type="int" line="291"/>
            <javadoc line="291">
                ICC Profile Tag Signature: &apos;targ&apos;.                
            </javadoc>
            <declaration name="icSigCopyrightTag" type="int" line="295"/>
            <javadoc line="295">
                ICC Profile Tag Signature: &apos;cprt&apos;.                
            </javadoc>
            <declaration name="icSigCrdInfoTag" type="int" line="299"/>
            <javadoc line="299">
                ICC Profile Tag Signature: &apos;crdi&apos;.                
            </javadoc>
            <declaration name="icSigDeviceMfgDescTag" type="int" line="303"/>
            <javadoc line="303">
                ICC Profile Tag Signature: &apos;dmnd&apos;.                
            </javadoc>
            <declaration name="icSigDeviceModelDescTag" type="int" line="307"/>
            <javadoc line="307">
                ICC Profile Tag Signature: &apos;dmdd&apos;.                
            </javadoc>
            <declaration name="icSigDeviceSettingsTag" type="int" line="311"/>
            <javadoc line="311">
                ICC Profile Tag Signature: &apos;devs&apos;.                
            </javadoc>
            <declaration name="icSigGamutTag" type="int" line="315"/>
            <javadoc line="315">
                ICC Profile Tag Signature: &apos;gamt&apos;.                
            </javadoc>
            <declaration name="icSigGrayTRCTag" type="int" line="319"/>
            <javadoc line="319">
                ICC Profile Tag Signature: &apos;kTRC&apos;.                
            </javadoc>
            <declaration name="icSigGreenColorantTag" type="int" line="323"/>
            <javadoc line="323">
                ICC Profile Tag Signature: &apos;gXYZ&apos;.                
            </javadoc>
            <declaration name="icSigGreenMatrixColumnTag" type="int" line="327"/>
            <javadoc line="327">
                ICC Profile Tag Signature: &apos;gXYZ&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigGreenTRCTag" type="int" line="332"/>
            <javadoc line="332">
                ICC Profile Tag Signature: &apos;gTRC&apos;.                
            </javadoc>
            <declaration name="icSigLuminanceTag" type="int" line="336"/>
            <javadoc line="336">
                ICC Profile Tag Signature: &apos;lumi&apos;.                
            </javadoc>
            <declaration name="icSigMeasurementTag" type="int" line="340"/>
            <javadoc line="340">
                ICC Profile Tag Signature: &apos;meas&apos;.                
            </javadoc>
            <declaration name="icSigMediaBlackPointTag" type="int" line="344"/>
            <javadoc line="344">
                ICC Profile Tag Signature: &apos;bkpt&apos;.                
            </javadoc>
            <declaration name="icSigMediaWhitePointTag" type="int" line="348"/>
            <javadoc line="348">
                ICC Profile Tag Signature: &apos;wtpt&apos;.                
            </javadoc>
            <declaration name="icSigNamedColor2Tag" type="int" line="352"/>
            <javadoc line="352">
                ICC Profile Tag Signature: &apos;ncl2&apos;.                
            </javadoc>
            <declaration name="icSigOutputResponseTag" type="int" line="356"/>
            <javadoc line="356">
                ICC Profile Tag Signature: &apos;resp&apos;.                
            </javadoc>
            <declaration name="icSigPreview0Tag" type="int" line="360"/>
            <javadoc line="360">
                ICC Profile Tag Signature: &apos;pre0&apos;.                
            </javadoc>
            <declaration name="icSigPreview1Tag" type="int" line="364"/>
            <javadoc line="364">
                ICC Profile Tag Signature: &apos;pre1&apos;.                
            </javadoc>
            <declaration name="icSigPreview2Tag" type="int" line="368"/>
            <javadoc line="368">
                ICC Profile Tag Signature: &apos;pre2&apos;.                
            </javadoc>
            <declaration name="icSigProfileDescriptionTag" type="int" line="372"/>
            <javadoc line="372">
                ICC Profile Tag Signature: &apos;desc&apos;.                
            </javadoc>
            <declaration name="icSigProfileSequenceDescTag" type="int" line="376"/>
            <javadoc line="376">
                ICC Profile Tag Signature: &apos;pseq&apos;.                
            </javadoc>
            <declaration name="icSigPs2CRD0Tag" type="int" line="380"/>
            <javadoc line="380">
                ICC Profile Tag Signature: &apos;psd0&apos;.                
            </javadoc>
            <declaration name="icSigPs2CRD1Tag" type="int" line="384"/>
            <javadoc line="384">
                ICC Profile Tag Signature: &apos;psd1&apos;.                
            </javadoc>
            <declaration name="icSigPs2CRD2Tag" type="int" line="388"/>
            <javadoc line="388">
                ICC Profile Tag Signature: &apos;psd2&apos;.                
            </javadoc>
            <declaration name="icSigPs2CRD3Tag" type="int" line="392"/>
            <javadoc line="392">
                ICC Profile Tag Signature: &apos;psd3&apos;.                
            </javadoc>
            <declaration name="icSigPs2CSATag" type="int" line="396"/>
            <javadoc line="396">
                ICC Profile Tag Signature: &apos;ps2s&apos;.                
            </javadoc>
            <declaration name="icSigPs2RenderingIntentTag" type="int" line="400"/>
            <javadoc line="400">
                ICC Profile Tag Signature: &apos;ps2i&apos;.                
            </javadoc>
            <declaration name="icSigRedColorantTag" type="int" line="404"/>
            <javadoc line="404">
                ICC Profile Tag Signature: &apos;rXYZ&apos;.                
            </javadoc>
            <declaration name="icSigRedMatrixColumnTag" type="int" line="408"/>
            <javadoc line="408">
                ICC Profile Tag Signature: &apos;rXYZ&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigRedTRCTag" type="int" line="413"/>
            <javadoc line="413">
                ICC Profile Tag Signature: &apos;rTRC&apos;.                
            </javadoc>
            <declaration name="icSigScreeningDescTag" type="int" line="417"/>
            <javadoc line="417">
                ICC Profile Tag Signature: &apos;scrd&apos;.                
            </javadoc>
            <declaration name="icSigScreeningTag" type="int" line="421"/>
            <javadoc line="421">
                ICC Profile Tag Signature: &apos;scrn&apos;.                
            </javadoc>
            <declaration name="icSigTechnologyTag" type="int" line="425"/>
            <javadoc line="425">
                ICC Profile Tag Signature: &apos;tech&apos;.                
            </javadoc>
            <declaration name="icSigUcrBgTag" type="int" line="429"/>
            <javadoc line="429">
                ICC Profile Tag Signature: &apos;bfd &apos;.                
            </javadoc>
            <declaration name="icSigViewingCondDescTag" type="int" line="433"/>
            <javadoc line="433">
                ICC Profile Tag Signature: &apos;vued&apos;.                
            </javadoc>
            <declaration name="icSigViewingConditionsTag" type="int" line="437"/>
            <javadoc line="437">
                ICC Profile Tag Signature: &apos;view&apos;.                
            </javadoc>
            <declaration name="icSigChromaticityTag" type="int" line="441"/>
            <javadoc line="441">
                ICC Profile Tag Signature: &apos;chrm&apos;.                
            </javadoc>
            <declaration name="icSigChromaticAdaptationTag" type="int" line="445"/>
            <javadoc line="445">
                ICC Profile Tag Signature: &apos;chad&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigColorantOrderTag" type="int" line="450"/>
            <javadoc line="450">
                ICC Profile Tag Signature: &apos;clro&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icSigColorantTableTag" type="int" line="455"/>
            <javadoc line="455">
                ICC Profile Tag Signature: &apos;clrt&apos;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icHdrSize" type="int" line="460"/>
            <javadoc line="460">
                ICC Profile Header Location: profile size in bytes.                
            </javadoc>
            <declaration name="icHdrCmmId" type="int" line="464"/>
            <javadoc line="464">
                ICC Profile Header Location: CMM for this profile.                
            </javadoc>
            <declaration name="icHdrVersion" type="int" line="468"/>
            <javadoc line="468">
                ICC Profile Header Location: format version number.                
            </javadoc>
            <declaration name="icHdrDeviceClass" type="int" line="472"/>
            <javadoc line="472">
                ICC Profile Header Location: type of profile.                
            </javadoc>
            <declaration name="icHdrColorSpace" type="int" line="476"/>
            <javadoc line="476">
                ICC Profile Header Location: color space of data.                
            </javadoc>
            <declaration name="icHdrPcs" type="int" line="480"/>
            <javadoc line="480">
                ICC Profile Header Location: PCS - XYZ or Lab only.                
            </javadoc>
            <declaration name="icHdrDate" type="int" line="484"/>
            <javadoc line="484">
                ICC Profile Header Location: date profile was created.                
            </javadoc>
            <declaration name="icHdrMagic" type="int" line="488"/>
            <javadoc line="488">
                ICC Profile Header Location: icMagicNumber.                
            </javadoc>
            <declaration name="icHdrPlatform" type="int" line="492"/>
            <javadoc line="492">
                ICC Profile Header Location: primary platform.                
            </javadoc>
            <declaration name="icHdrFlags" type="int" line="496"/>
            <javadoc line="496">
                ICC Profile Header Location: various bit settings.                
            </javadoc>
            <declaration name="icHdrManufacturer" type="int" line="500"/>
            <javadoc line="500">
                ICC Profile Header Location: device manufacturer.                
            </javadoc>
            <declaration name="icHdrModel" type="int" line="504"/>
            <javadoc line="504">
                ICC Profile Header Location: device model number.                
            </javadoc>
            <declaration name="icHdrAttributes" type="int" line="508"/>
            <javadoc line="508">
                ICC Profile Header Location: device attributes.                
            </javadoc>
            <declaration name="icHdrRenderingIntent" type="int" line="512"/>
            <javadoc line="512">
                ICC Profile Header Location: rendering intent.                
            </javadoc>
            <declaration name="icHdrIlluminant" type="int" line="516"/>
            <javadoc line="516">
                ICC Profile Header Location: profile illuminant.                
            </javadoc>
            <declaration name="icHdrCreator" type="int" line="520"/>
            <javadoc line="520">
                ICC Profile Header Location: profile creator.                
            </javadoc>
            <declaration name="icHdrProfileID" type="int" line="524"/>
            <javadoc line="524">
                ICC Profile Header Location: profile&apos;s ID.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="icTagType" type="int" line="529"/>
            <javadoc line="529">
                ICC Profile Constant: tag type signaturE.                
            </javadoc>
            <declaration name="icTagReserved" type="int" line="533"/>
            <javadoc line="533">
                ICC Profile Constant: reserved.                
            </javadoc>
            <declaration name="icCurveCount" type="int" line="537"/>
            <javadoc line="537">
                ICC Profile Constant: curveType count.                
            </javadoc>
            <declaration name="icCurveData" type="int" line="541"/>
            <javadoc line="541">
                ICC Profile Constant: curveType data.                
            </javadoc>
            <declaration name="icXYZNumberX" type="int" line="545"/>
            <javadoc line="545">
                ICC Profile Constant: XYZNumber X.                
            </javadoc>
            <javadoc line="549">
                Constructs an ICC_Profile object with a given ID.                
            </javadoc>
            <method name="ICC_Profile" type="constructor" line="552">
                <params>
                    <param name="ID" type="long"/>
                </params>
            </method>
            <javadoc line="555">
                Constructs an ICC_Profile object whose loading will be deferred.
                  The ID will be 0 until the profile is loaded.                
            </javadoc>
            <method name="ICC_Profile" type="constructor" line="559">
                <params>
                    <param name="pdi" type="ProfileDeferralInfo"/>
                </params>
                <anonymous_class line="561">
                    <method name="activate" type="void" line="562"/>
                </anonymous_class>
            </method>
            <javadoc line="569">
                Frees the resources associated with an ICC_Profile object.                
            </javadoc>
            <method name="finalize" type="void" line="572">
                <scope line="573"/>
                <scope line="576"/>
            </method>
            <javadoc line="580">
                Constructs an ICC_Profile object corresponding to the data in
                  a byte array.  Throws an IllegalArgumentException if the data
                  does not correspond to a valid ICC Profile.                
                <param>
                    data the specified ICC Profile data                    
                </param>
                <return>
                    an <code>ICC_Profile</code> object corresponding to
                      the data in the specified <code>data</code> array.                    
                </return>
            </javadoc>
            <method name="getInstance" type="ICC_Profile" line="588">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="thisProfile" type="ICC_Profile" line="589"/>
                <declaration name="theID" type="long" line="590"/>
                <scope line="591"/>
                <scope line="594"/>
                <scope line="597"/>
                <scope line="600">
                    <scope line="601"/>
                    <scope line="604"/>
                    <scope line="607"/>
                </scope>
                <scope line="611"/>
            </method>
            <javadoc line="616">
                Constructs an ICC_Profile corresponding to one of the specific color
                  spaces defined by the ColorSpace class (for example CS_sRGB).
                  Throws an IllegalArgumentException if cspace is not one of the
                  defined color spaces.                
                <param>
                    cspace the type of color space to create a profile for.
                      The specified type is one of the color
                      space constants defined in the  <CODE>ColorSpace</CODE> class.                    
                </param>
                <return>
                    an <code>ICC_Profile</code> object corresponding to
                      the specified <code>ColorSpace</code> type.                    
                </return>
                <exception>
                    IllegalArgumentException If <CODE>cspace</CODE> is not
                      one of the predefined color space types.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ICC_Profile" line="629">
                <params>
                    <param name="cspace" type="int"/>
                </params>
                <declaration name="thisProfile" type="ICC_Profile" line="630"/>
                <declaration name="fileName" type="String" line="631"/>
                <scope line="634">
                    <scope line="635">
                        <declaration name="pInfo" type="ProfileDeferralInfo" line="636"/>
                    </scope>
                </scope>
                <scope line="643">
                    <scope line="644">
                        <declaration name="pInfo" type="ProfileDeferralInfo" line="645"/>
                    </scope>
                </scope>
                <scope line="652">
                    <scope line="653">
                        <scope line="654">
                            <declaration name="pInfo" type="ProfileDeferralInfo" line="655"/>
                        </scope>
                        <scope line="658"/>
                    </scope>
                </scope>
                <scope line="666">
                    <scope line="667">
                        <declaration name="pInfo" type="ProfileDeferralInfo" line="668"/>
                    </scope>
                </scope>
                <scope line="675">
                    <scope line="676">
                        <declaration name="pInfo" type="ProfileDeferralInfo" line="677"/>
                    </scope>
                </scope>
            </method>
            <method name="getStandardProfile" type="ICC_Profile" line="688">
                <params>
                    <param name="name" type="String"/>
                </params>
                <anonymous_class line="689">
                    <method name="run" type="Object" line="690">
                        <declaration name="p" type="ICC_Profile" line="691"/>
                        <scope line="692"/>
                        <scope line="695"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="703">
                Constructs an ICC_Profile corresponding to the data in a file.
                  fileName may be an absolute or a relative file specification.
                  Relative file names are looked for in several places: first, relative
                  to any directories specified by the java.iccprofile.path property;
                  second, relative to any directories specified by the java.class.path
                  property; finally, in a directory used to store profiles always
                  available, such as the profile for sRGB.  Built-in profiles use .pf as
                  the file name extension for profiles, e.g. sRGB.pf.
                  This method throws an IOException if the specified file cannot be
                  opened or if an I/O error occurs while reading the file.  It throws
                  an IllegalArgumentException if the file does not contain valid ICC
                  Profile data.                
                <param>
                    fileName The file that contains the data for the profile.                    
                </param>
                <return>
                    an <code>ICC_Profile</code> object corresponding to
                      the data in the specified file.                    
                </return>
                <exception>
                    IOException If the specified file cannot be opened or
                      an I/O error occurs while reading the file.                    
                </exception>
                <exception>
                    IllegalArgumentException If the file does not
                      contain valid ICC Profile data.                    
                </exception>
                <exception>
                    SecurityException If a security manager is installed
                      and it does not permit read access to the given file.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ICC_Profile" line="726">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="thisProfile" type="ICC_Profile" line="727"/>
                <declaration name="fis" type="FileInputStream" line="728"/>
                <declaration name="f" type="File" line="729"/>
                <scope line="730"/>
                <scope line="733"/>
            </method>
            <javadoc line="740">
                Constructs an ICC_Profile corresponding to the data in an InputStream.
                  This method throws an IllegalArgumentException if the stream does not
                  contain valid ICC Profile data.  It throws an IOException if an I/O
                  error occurs while reading the stream.                
                <param>
                    s The input stream from which to read the profile data.                    
                </param>
                <return>
                    an <CODE>ICC_Profile</CODE> object corresponding to the
                      data in the specified <code>InputStream</code>.                    
                </return>
                <exception>
                    IOException If an I/O error occurs while reading the stream.                    
                </exception>
                <exception>
                    IllegalArgumentException If the stream does not
                      contain valid ICC Profile data.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ICC_Profile" line="752">
                <params>
                    <param name="s" type="InputStream"/>
                </params>
                <declaration name="profileData" type="byte" line="753"/>
                <scope line="754"/>
                <scope line="757"/>
            </method>
            <method name="getProfileDataFromStream" type="byte[]" line="762">
                <params>
                    <param name="s" type="InputStream"/>
                </params>
                <declaration name="profileData" type="byte" line="763"/>
                <declaration name="profileSize" type="int" line="764"/>
                <declaration name="header" type="byte" line="765"/>
                <declaration name="bytestoread" type="int" line="766"/>
                <declaration name="bytesread" type="int" line="767"/>
                <declaration name="n" type="int" line="768"/>
                <scope line="769">
                    <scope line="770"/>
                </scope>
                <scope line="776"/>
                <scope line="784">
                    <scope line="785"/>
                </scope>
            </method>
            <javadoc line="793">
                Constructs an ICC_Profile for which the actual loading of the
                  profile data from a file and the initialization of the CMM should
                  be deferred as long as possible.
                  Deferral is only used for standard profiles.
                  If deferring is disabled, then getStandardProfile() ensures
                  that all of the appropriate access privileges are granted
                  when loading this profile.
                  If deferring is enabled, then the deferred activation
                  code will take care of access privileges.                
                <see>
                    activateDeferredProfile()                    
                </see>
            </javadoc>
            <method name="getDeferredInstance" type="ICC_Profile" line="805">
                <params>
                    <param name="pdi" type="ProfileDeferralInfo"/>
                </params>
                <scope line="806"/>
                <scope line="809"/>
                <scope line="812"/>
                <scope line="815"/>
            </method>
            <method name="activateDeferredProfile" type="void" line="819">
                <declaration name="profileData" type="byte" line="820"/>
                <declaration name="fis" type="FileInputStream" line="821"/>
                <declaration name="fileName" type="String" line="822"/>
                <anonymous_class line="825">
                    <method name="run" type="FileInputStream" line="826">
                        <declaration name="f" type="File" line="827"/>
                        <scope line="828">
                            <scope line="829"/>
                            <scope line="832"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="pa" type="PrivilegedAction&lt;FileInputStream&gt;" line="825"/>
                <scope line="839"/>
                <scope line="842"/>
                <scope line="846">
                    <declaration name="pde" type="ProfileDataException" line="847"/>
                </scope>
                <scope line="851"/>
                <scope line="854"/>
                <scope line="857">
                    <declaration name="pde" type="ProfileDataException" line="858"/>
                </scope>
            </method>
            <javadoc line="863">
                Returns profile major version.                
                <return>
                    The major version of the profile.                    
                </return>
            </javadoc>
            <method name="getMajorVersion" type="int" line="867">
                <declaration name="theHeader" type="byte[]" line="868"/>
            </method>
            <javadoc line="872">
                Returns profile minor version.                
                <return>
                    The minor version of the profile.                    
                </return>
            </javadoc>
            <method name="getMinorVersion" type="int" line="876">
                <declaration name="theHeader" type="byte[]" line="877"/>
            </method>
            <javadoc line="881">
                Returns the profile class.                
                <return>
                    One of the predefined profile class constants.                    
                </return>
            </javadoc>
            <method name="getProfileClass" type="int" line="885">
                <declaration name="theHeader" type="byte[]" line="886"/>
                <declaration name="theClassSig" type="int" line="887"/>
                <scope line="888"/>
            </method>
            <javadoc line="920">
                Returns the color space type.  Returns one of the color space type
                  constants defined by the ColorSpace class.  This is the
                  &quot;input&quot; color space of the profile.  The type defines the
                  number of components of the color space and the interpretation,
                  e.g. TYPE_RGB identifies a color space with three components - red,
                  green, and blue.  It does not define the particular color
                  characteristics of the space, e.g. the chromaticities of the
                  primaries.                
                <return>
                    One of the color space type constants defined in the
                      <CODE>ColorSpace</CODE> class.                    
                </return>
            </javadoc>
            <method name="getColorSpaceType" type="int" line="932">
                <scope line="933"/>
            </method>
            <method name="getColorSpaceType" type="int" line="938">
                <params>
                    <param name="profileID" type="long"/>
                </params>
                <declaration name="theHeader" type="byte[]" line="939"/>
                <declaration name="theColorSpaceSig" type="int" line="940"/>
            </method>
            <javadoc line="946">
                Returns the color space type of the Profile Connection Space (PCS).
                  Returns one of the color space type constants defined by the
                  ColorSpace class.  This is the &quot;output&quot; color space of the
                  profile.  For an input, display, or output profile useful
                  for tagging colors or images, this will be either TYPE_XYZ or
                  TYPE_Lab and should be interpreted as the corresponding specific
                  color space defined in the ICC specification.  For a device
                  link profile, this could be any of the color space type constants.                
                <return>
                    One of the color space type constants defined in the
                      <CODE>ColorSpace</CODE> class.                    
                </return>
            </javadoc>
            <method name="getPCSType" type="int" line="958">
                <scope line="959"/>
            </method>
            <method name="getPCSType" type="int" line="964">
                <params>
                    <param name="profileID" type="long"/>
                </params>
                <declaration name="theHeader" type="byte[]" line="965"/>
                <declaration name="thePCSSig" type="int" line="966"/>
            </method>
            <javadoc line="972">
                Write this ICC_Profile to a file.                
                <param>
                    fileName The file to write the profile data to.                    
                </param>
                <exception>
                    IOException If the file cannot be opened for writing
                      or an I/O error occurs while writing to the file.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="978">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="outputFile" type="FileOutputStream" line="979"/>
                <declaration name="profileData" type="byte" line="980"/>
            </method>
            <javadoc line="986">
                Write this ICC_Profile to an OutputStream.                
                <param>
                    s The stream to write the profile data to.                    
                </param>
                <exception>
                    IOException If an I/O error occurs while writing to the
                      stream.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="992">
                <params>
                    <param name="s" type="OutputStream"/>
                </params>
                <declaration name="profileData" type="byte" line="993"/>
            </method>
            <javadoc line="997">
                Returns a byte array corresponding to the data of this ICC_Profile.                
                <return>
                    A byte array that contains the profile data.                    
                </return>
                <see>
                    #setData(int,byte[])                    
                </see>
            </javadoc>
            <method name="getData" type="byte[]" line="1002">
                <declaration name="profileSize" type="int" line="1003"/>
                <declaration name="profileData" type="byte[]" line="1004"/>
                <scope line="1005"/>
                <declaration name="mdl" type="PCMM" line="1008"/>
            </method>
            <javadoc line="1014">
                Returns a particular tagged data element from the profile as
                  a byte array.  Elements are identified by signatures
                  as defined in the ICC specification.  The signature
                  icSigHead can be used to get the header.  This method is useful
                  for advanced applets or applications which need to access
                  profile data directly.                
                <param>
                    tagSignature The ICC tag signature for the data element you
                      want to get.                    
                </param>
                <return>
                    A byte array that contains the tagged data element. Returns
                      <code>null</code> if the specified tag doesn't exist.                    
                </return>
                <see>
                    #setData(int,byte[])                    
                </see>
            </javadoc>
            <method name="getData" type="byte[]" line="1027">
                <params>
                    <param name="tagSignature" type="int"/>
                </params>
                <scope line="1028"/>
            </method>
            <method name="getData" type="byte[]" line="1033">
                <params>
                    <param name="profileID" type="long"/>
                    <param name="tagSignature" type="int"/>
                </params>
                <declaration name="tagSize" type="int" line="1034"/>
                <declaration name="tagData" type="byte[]" line="1035"/>
                <scope line="1036">
                    <declaration name="mdl" type="PCMM" line="1037"/>
                </scope>
                <scope line="1042"/>
            </method>
            <javadoc line="1047">
                Sets a particular tagged data element in the profile from
                  a byte array. The array should contain data in a format, corresponded
                  to the {@code tagSignature} as defined in the ICC specification, section 10.
                  This method is useful for advanced applets or applications which need to
                  access profile data directly.                
                <param>
                    tagSignature The ICC tag signature for the data element
                      you want to set.                    
                </param>
                <param>
                    tagData the data to set for the specified tag signature                    
                </param>
                <throws>
                    IllegalArgumentException if {@code tagSignature} is not a signature
                      as defined in the ICC specification.                    
                </throws>
                <throws>
                    IllegalArgumentException if a content of the {@code tagData}array can not be interpreted as valid tag data, corresponding
                      to the {@code tagSignature}.                    
                </throws>
                <see>
                    #getData                    
                </see>
            </javadoc>
            <method name="setData" type="void" line="1062">
                <params>
                    <param name="tagSignature" type="int"/>
                    <param name="tagData" type="byte[]"/>
                </params>
                <scope line="1063"/>
            </method>
            <javadoc line="1068">
                Sets the rendering intent of the profile.
                  This is used to select the proper transform from a profile that
                  has multiple transforms.                
            </javadoc>
            <method name="setRenderingIntent" type="void" line="1073">
                <params>
                    <param name="renderingIntent" type="int"/>
                </params>
                <declaration name="theHeader" type="byte[]" line="1074"/>
            </method>
            <javadoc line="1078">
                Returns the rendering intent of the profile.
                  This is used to select the proper transform from a profile that
                  has multiple transforms.  It is typically set in a source profile
                  to select a transform from an output profile.                
            </javadoc>
            <method name="getRenderingIntent" type="int" line="1084">
                <declaration name="theHeader" type="byte[]" line="1085"/>
                <declaration name="renderingIntent" type="int" line="1086"/>
            </method>
            <javadoc line="1089">
                Returns the number of color components in the &quot;input&quot; color
                  space of this profile.  For example if the color space type
                  of this profile is TYPE_RGB, then this method will return 3.                
                <return>
                    The number of color components in the profile's input
                      color space.                    
                </return>
                <throws>
                    ProfileDataException if color space is in the profile
                      is invalid                    
                </throws>
            </javadoc>
            <method name="getNumComponents" type="int" line="1098">
                <declaration name="theHeader" type="byte[]" line="1099"/>
                <declaration name="theColorSpaceSig" type="int" line="1100"/>
                <scope line="1101"/>
            </method>
            <javadoc line="1167">
                Returns a float array of length 3 containing the X, Y, and Z
                  components of the mediaWhitePointTag in the ICC profile.                
            </javadoc>
            <method name="getMediaWhitePoint" type="float[]" line="1171"/>
            <javadoc line="1174">
                Returns a float array of length 3 containing the X, Y, and Z
                  components encoded in an XYZType tag.                
            </javadoc>
            <method name="getXYZTag" type="float[]" line="1178">
                <params>
                    <param name="theTagSignature" type="int"/>
                </params>
                <declaration name="theData" type="byte[]" line="1179"/>
                <declaration name="theXYZNumber" type="float[]" line="1180"/>
                <declaration name="i1" type="int" line="1181"/>
                <scope line="1184"/>
            </method>
            <javadoc line="1190">
                Returns a gamma value representing a tone reproduction
                  curve (TRC).  If the profile represents the TRC as a table rather
                  than a single gamma value, then an exception is thrown.  In this
                  case the actual table can be obtained via getTRC().
                  theTagSignature should be one of icSigGrayTRCTag, icSigRedTRCTag,
                  icSigGreenTRCTag, or icSigBlueTRCTag.                
                <return>
                    the gamma value as a float.                    
                </return>
                <exception>
                    ProfileDataException if the profile does not specify
                      the TRC as a single gamma value.                    
                </exception>
            </javadoc>
            <method name="getGamma" type="float" line="1201">
                <params>
                    <param name="theTagSignature" type="int"/>
                </params>
                <declaration name="theTRCData" type="byte[]" line="1202"/>
                <declaration name="theGamma" type="float" line="1203"/>
                <declaration name="theU8Fixed8" type="int" line="1204"/>
                <scope line="1206"/>
            </method>
            <javadoc line="1213">
                Returns the TRC as an array of shorts.  If the profile has
                  specified the TRC as linear (gamma = 1.0) or as a simple gamma
                  value, this method throws an exception, and the getGamma() method
                  should be used to get the gamma value.  Otherwise the short array
                  returned here represents a lookup table where the input Gray value
                  is conceptually in the range [0.0, 1.0].  Value 0.0 maps
                  to array index 0 and value 1.0 maps to array index length-1.
                  Interpolation may be used to generate output values for
                  input values which do not map exactly to an index in the
                  array.  Output values also map linearly to the range [0.0, 1.0].
                  Value 0.0 is represented by an array value of 0x0000 and
                  value 1.0 by 0xFFFF, i.e. the values are really unsigned
                  short values, although they are returned in a short array.
                  theTagSignature should be one of icSigGrayTRCTag, icSigRedTRCTag,
                  icSigGreenTRCTag, or icSigBlueTRCTag.                
                <return>
                    a short array representing the TRC.                    
                </return>
                <exception>
                    ProfileDataException if the profile does not specify
                      the TRC as a table.                    
                </exception>
            </javadoc>
            <method name="getTRC" type="short[]" line="1233">
                <params>
                    <param name="theTagSignature" type="int"/>
                </params>
                <declaration name="theTRCData" type="byte[]" line="1234"/>
                <declaration name="theTRC" type="short[]" line="1235"/>
                <declaration name="i1" type="int" line="1236"/>
                <scope line="1239"/>
                <scope line="1243"/>
            </method>
            <method name="iccCStoJCS" type="int" line="1248">
                <params>
                    <param name="theColorSpaceSig" type="int"/>
                </params>
                <declaration name="theColorSpace" type="int" line="1249"/>
            </method>
            <method name="intFromBigEndian" type="int" line="1331">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="intToBigEndian" type="void" line="1334">
                <params>
                    <param name="value" type="int"/>
                    <param name="array" type="byte[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="shortFromBigEndian" type="short" line="1340">
                <params>
                    <param name="array" type="byte[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="shortToBigEndian" type="void" line="1343">
                <params>
                    <param name="value" type="short"/>
                    <param name="array" type="byte[]"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getProfileFile" type="File" line="1347">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="path" type="String" line="1348"/>
                <declaration name="f" type="File" line="1349"/>
                <scope line="1350"/>
                <scope line="1353">
                    <declaration name="st" type="StringTokenizer" line="1354"/>
                    <scope line="1355">
                        <scope line="1359"/>
                    </scope>
                </scope>
                <scope line="1364">
                    <declaration name="st" type="StringTokenizer" line="1365"/>
                    <scope line="1366"/>
                </scope>
                <scope line="1372"/>
                <scope line="1375"/>
            </method>
            <javadoc line="1380">
                Returns a file object corresponding to a built-in profile
                  specified by fileName.
                  If there is no built-in profile with such name, then the method
                  returns null.                
            </javadoc>
            <method name="getStandardProfileFile" type="File" line="1386">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <declaration name="dir" type="String" line="1387"/>
                <declaration name="fullPath" type="String" line="1388"/>
                <declaration name="f" type="File" line="1389"/>
            </method>
            <javadoc line="1392">
                Checks whether given file resides inside give directory.                
            </javadoc>
            <method name="isChildOf" type="boolean" line="1395">
                <params>
                    <param name="f" type="File"/>
                    <param name="dirName" type="String"/>
                </params>
                <scope line="1396">
                    <declaration name="dir" type="File" line="1397"/>
                    <declaration name="canonicalDirName" type="String" line="1398"/>
                    <scope line="1399"/>
                    <declaration name="canonicalFileName" type="String" line="1402"/>
                </scope>
                <scope line="1405"/>
            </method>
            <javadoc line="1409">
                Checks whether built-in profile specified by fileName exists.                
            </javadoc>
            <method name="standardProfileExists" type="boolean" line="1412">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <anonymous_class line="1413">
                    <method name="run" type="Boolean" line="1414"/>
                </anonymous_class>
            </method>
            <declaration name="iccProfileSerializedDataVersion" type="int" line="1420"/>
            <javadoc line="1420">
                Version of the format of additional serialized data in the
                  stream.  Version&amp;nbsp;&lt;code&gt;1&lt;/code&gt; corresponds to Java&amp;nbsp;2
                  Platform,&amp;nbsp;v1.3.                
                <since>
                    1.3                    
                </since>
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="1428">
                Writes default serializable fields to the stream.  Writes a
                  string and an array of bytes to the stream as additional data.                
                <param>
                    s stream used for serialization.                    
                </param>
                <throws>
                    IOExceptionthrown by <code>ObjectInputStream</code>.                    
                </throws>
                <serialDataThe>
                    <code>String</code> is the name of one of
                      <code>CS_<var></var></code> constants defined in the{@link ColorSpace} class if the profile object is a profile
                      for a predefined color space (for example
                      <code>"CS_sRGB"</code>).  The string is <code>null</code>
                      otherwise.
                      <p>
                      The <code>byte[]</code> array is the profile data for the
                      profile.  For predefined color spaces <code>null</code> is
                      written instead of the profile data.  If in the future
                      versions of Java API new predefined color spaces will be
                      added, future versions of this class may choose to write
                      for new predefined color spaces not only the color space
                      name, but the profile data as well so that older versions
                      could still deserialize the object.                    
                </serialDataThe>
            </javadoc>
            <method name="writeObject" type="void" line="1448">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="csName" type="String" line="1450"/>
                <scope line="1451"/>
                <scope line="1454"/>
                <scope line="1457"/>
                <scope line="1460"/>
                <scope line="1463"/>
                <declaration name="data" type="byte[]" line="1466"/>
                <scope line="1467"/>
            </method>
            <declaration name="resolvedDeserializedProfile" type="ICC_Profile" line="1473"/>
            <javadoc line="1474">
                Reads default serializable fields from the stream.  Reads from
                  the stream a string and an array of bytes as additional data.                
                <param>
                    s stream used for deserialization.                    
                </param>
                <throws>
                    IOExceptionthrown by <code>ObjectInputStream</code>.                    
                </throws>
                <throws>
                    ClassNotFoundExceptionthrown by <code>ObjectInputStream</code>.                    
                </throws>
                <serialDataThe>
                    <code>String</code> is the name of one of
                      <code>CS_<var></var></code> constants defined in the{@link ColorSpace} class if the profile object is a profile
                      for a predefined color space (for example
                      <code>"CS_sRGB"</code>).  The string is <code>null</code>
                      otherwise.
                      <p>
                      The <code>byte[]</code> array is the profile data for the
                      profile.  It will usually be <code>null</code> for the
                      predefined profiles.
                      <p>
                      If the string is recognized as a constant name for
                      predefined color space the object will be resolved into
                      profile obtained with
                      <code>getInstance(int&nbsp;cspace)</code> and the profile
                      data are ignored.  Otherwise the object will be resolved
                      into profile obtained with
                      <code>getInstance(byte[]&nbsp;data)</code>.                    
                </serialDataThe>
                <see>
                    #readResolve()                    
                </see>
                <see>
                    #getInstance(int)                    
                </see>
                <see>
                    #getInstance(byte[])                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1501">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="csName" type="String" line="1503"/>
                <declaration name="data" type="byte[]" line="1504"/>
                <declaration name="cspace" type="int" line="1505"/>
                <declaration name="isKnownPredefinedCS" type="boolean" line="1506"/>
                <scope line="1507">
                    <scope line="1509"/>
                    <scope line="1512"/>
                    <scope line="1515"/>
                    <scope line="1518"/>
                    <scope line="1521"/>
                    <scope line="1524"/>
                </scope>
                <scope line="1528"/>
                <scope line="1531"/>
            </method>
            <javadoc line="1535">
                Resolves instances being deserialized into instances registered
                  with CMM.                
                <return>
                    ICC_Profile object for profile registered with CMM.                    
                </return>
                <throws>
                    ObjectStreamExceptionnever thrown, but mandated by the serialization spec.                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="readResolve" type="Object" line="1542"/>
        </class>
    </source>