<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * COPYRIGHT (c) Eastman Kodak Company, 1997                      
 * As  an unpublished  work pursuant to Title 17 of the United    
 * States Code.  All rights reserved.                             
 */
package java.awt.color">
        <import package="sun.java2d.cmm.PCMM"/>
        <import package="sun.java2d.cmm.CMSManager"/>
        <javadoc line="26">
            COPYRIGHT (c) Eastman Kodak Company, 1997                      
              As  an unpublished  work pursuant to Title 17 of the United    
              States Code.  All rights reserved.            
        </javadoc>
        <class name="ColorSpace" line="42">
            <comment line="107">
                Cache of singletons for the predefined color spaces.                
            </comment>
            <comment line="607">
                Returns true if cspace is the XYZspace.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="42">
                This abstract class is used to serve as a color space tag to identify the
                  specific color space of a Color object or, via a ColorModel object,
                  of an Image, a BufferedImage, or a GraphicsDevice.  It contains
                  methods that transform colors in a specific color space to/from sRGB
                  and to/from a well-defined CIEXYZ color space.
                  &lt;p&gt;
                  For purposes of the methods in this class, colors are represented as
                  arrays of color components represented as floats in a normalized range
                  defined by each ColorSpace.  For many ColorSpaces (e.g. sRGB), this
                  range is 0.0 to 1.0.  However, some ColorSpaces have components whose
                  values have a different range.  Methods are provided to inquire per
                  component minimum and maximum normalized values.
                  &lt;p&gt;
                  Several variables are defined for purposes of referring to color
                  space types (e.g. TYPE_RGB, TYPE_XYZ, etc.) and to refer to specific
                  color spaces (e.g. CS_sRGB and CS_CIEXYZ).
                  sRGB is a proposed standard RGB color space.  For more information,
                  see &lt;A href=&quot;http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html&quot;&gt;
                  http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html
                  &lt;/A&gt;.
                  &lt;p&gt;
                  The purpose of the methods to transform to/from the well-defined
                  CIEXYZ color space is to support conversions between any two color
                  spaces at a reasonably high degree of accuracy.  It is expected that
                  particular implementations of subclasses of ColorSpace (e.g.
                  ICC_ColorSpace) will support high performance conversion based on
                  underlying platform color management systems.
                  &lt;p&gt;
                  The CS_CIEXYZ space used by the toCIEXYZ/fromCIEXYZ methods can be
                  described as follows:
                  &lt;pre&gt;
                  &amp;nbsp;     CIEXYZ
                  &amp;nbsp;     viewing illuminance: 200 lux
                  &amp;nbsp;     viewing white point: CIE D50
                  &amp;nbsp;     media white point: &quot;that of a perfectly reflecting diffuser&quot; -- D50
                  &amp;nbsp;     media black point: 0 lux or 0 Reflectance
                  &amp;nbsp;     flare: 1 percent
                  &amp;nbsp;     surround: 20percent of the media white point
                  &amp;nbsp;     media description: reflection print (i.e., RLAB, Hunt viewing media)
                  &amp;nbsp;     note: For developers creating an ICC profile for this conversion
                  &amp;nbsp;           space, the following is applicable.  Use a simple Von Kries
                  &amp;nbsp;           white point adaptation folded into the 3X3 matrix parameters
                  &amp;nbsp;           and fold the flare and surround effects into the three
                  &amp;nbsp;           one-dimensional lookup tables (assuming one uses the minimal
                  &amp;nbsp;           model for monitors).
                  &lt;/pre&gt;
                  &lt;p&gt;                
                <see>
                    ICC_ColorSpace                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="100"/>
            <declaration name="type" type="int" line="102"/>
            <declaration name="numComponents" type="int" line="103"/>
            <declaration name="compName" type="String[]" line="104"/>
            <declaration name="sRGBspace" type="ColorSpace" line="107"/>
            <declaration name="XYZspace" type="ColorSpace" line="108"/>
            <declaration name="PYCCspace" type="ColorSpace" line="109"/>
            <declaration name="GRAYspace" type="ColorSpace" line="110"/>
            <declaration name="LINEAR_RGBspace" type="ColorSpace" line="111"/>
            <declaration name="TYPE_XYZ" type="int" line="113"/>
            <javadoc line="113">
                Any of the family of XYZ color spaces.                
            </javadoc>
            <declaration name="TYPE_Lab" type="int" line="118"/>
            <javadoc line="118">
                Any of the family of Lab color spaces.                
            </javadoc>
            <declaration name="TYPE_Luv" type="int" line="123"/>
            <javadoc line="123">
                Any of the family of Luv color spaces.                
            </javadoc>
            <declaration name="TYPE_YCbCr" type="int" line="128"/>
            <javadoc line="128">
                Any of the family of YCbCr color spaces.                
            </javadoc>
            <declaration name="TYPE_Yxy" type="int" line="133"/>
            <javadoc line="133">
                Any of the family of Yxy color spaces.                
            </javadoc>
            <declaration name="TYPE_RGB" type="int" line="138"/>
            <javadoc line="138">
                Any of the family of RGB color spaces.                
            </javadoc>
            <declaration name="TYPE_GRAY" type="int" line="143"/>
            <javadoc line="143">
                Any of the family of GRAY color spaces.                
            </javadoc>
            <declaration name="TYPE_HSV" type="int" line="148"/>
            <javadoc line="148">
                Any of the family of HSV color spaces.                
            </javadoc>
            <declaration name="TYPE_HLS" type="int" line="153"/>
            <javadoc line="153">
                Any of the family of HLS color spaces.                
            </javadoc>
            <declaration name="TYPE_CMYK" type="int" line="158"/>
            <javadoc line="158">
                Any of the family of CMYK color spaces.                
            </javadoc>
            <declaration name="TYPE_CMY" type="int" line="163"/>
            <javadoc line="163">
                Any of the family of CMY color spaces.                
            </javadoc>
            <declaration name="TYPE_2CLR" type="int" line="168"/>
            <javadoc line="168">
                Generic 2 component color spaces.                
            </javadoc>
            <declaration name="TYPE_3CLR" type="int" line="173"/>
            <javadoc line="173">
                Generic 3 component color spaces.                
            </javadoc>
            <declaration name="TYPE_4CLR" type="int" line="178"/>
            <javadoc line="178">
                Generic 4 component color spaces.                
            </javadoc>
            <declaration name="TYPE_5CLR" type="int" line="183"/>
            <javadoc line="183">
                Generic 5 component color spaces.                
            </javadoc>
            <declaration name="TYPE_6CLR" type="int" line="188"/>
            <javadoc line="188">
                Generic 6 component color spaces.                
            </javadoc>
            <declaration name="TYPE_7CLR" type="int" line="193"/>
            <javadoc line="193">
                Generic 7 component color spaces.                
            </javadoc>
            <declaration name="TYPE_8CLR" type="int" line="198"/>
            <javadoc line="198">
                Generic 8 component color spaces.                
            </javadoc>
            <declaration name="TYPE_9CLR" type="int" line="203"/>
            <javadoc line="203">
                Generic 9 component color spaces.                
            </javadoc>
            <declaration name="TYPE_ACLR" type="int" line="208"/>
            <javadoc line="208">
                Generic 10 component color spaces.                
            </javadoc>
            <declaration name="TYPE_BCLR" type="int" line="213"/>
            <javadoc line="213">
                Generic 11 component color spaces.                
            </javadoc>
            <declaration name="TYPE_CCLR" type="int" line="218"/>
            <javadoc line="218">
                Generic 12 component color spaces.                
            </javadoc>
            <declaration name="TYPE_DCLR" type="int" line="223"/>
            <javadoc line="223">
                Generic 13 component color spaces.                
            </javadoc>
            <declaration name="TYPE_ECLR" type="int" line="228"/>
            <javadoc line="228">
                Generic 14 component color spaces.                
            </javadoc>
            <declaration name="TYPE_FCLR" type="int" line="233"/>
            <javadoc line="233">
                Generic 15 component color spaces.                
            </javadoc>
            <declaration name="CS_sRGB" type="int" line="238"/>
            <javadoc line="238">
                The sRGB color space defined at
                  &lt;A href=&quot;http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html&quot;&gt;
                  http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html
                  &lt;/A&gt;.                
            </javadoc>
            <declaration name="CS_LINEAR_RGB" type="int" line="246"/>
            <javadoc line="246">
                A built-in linear RGB color space.  This space is based on the
                  same RGB primaries as CS_sRGB, but has a linear tone reproduction curve.                
            </javadoc>
            <declaration name="CS_CIEXYZ" type="int" line="252"/>
            <javadoc line="252">
                The CIEXYZ conversion color space defined above.                
            </javadoc>
            <declaration name="CS_PYCC" type="int" line="257"/>
            <javadoc line="257">
                The Photo YCC conversion color space.                
            </javadoc>
            <declaration name="CS_GRAY" type="int" line="262"/>
            <javadoc line="262">
                The built-in linear gray scale color space.                
            </javadoc>
            <javadoc line="268">
                Constructs a ColorSpace object given a color space type
                  and the number of components.                
                <param>
                    type one of the &lt;CODE&gt;ColorSpace&lt;/CODE&gt; type constants                    
                </param>
                <param>
                    numcomponents the number of components in the color space                    
                </param>
            </javadoc>
            <method name="ColorSpace" type="constructor" line="274">
                <params>
                    <param name="type" type="int"/>
                    <param name="numcomponents" type="int"/>
                </params>
            </method>
            <javadoc line="280">
                Returns a ColorSpace representing one of the specific
                  predefined color spaces.                
                <param>
                    colorspace a specific color space identified by one of
                      the predefined class constants (e.g. CS_sRGB, CS_LINEAR_RGB,
                      CS_CIEXYZ, CS_GRAY, or CS_PYCC)                    
                </param>
                <return>
                    the requested &lt;CODE&gt;ColorSpace&lt;/CODE&gt; object                    
                </return>
            </javadoc>
            <method name="getInstance" type="ColorSpace" line="291">
                <params>
                    <param name="colorspace" type="int"/>
                </params>
                <comment line="289">
                    NOTE: This method may be called by privileged threads.
                           DO NOT INVOKE CLIENT CODE ON THIS THREAD!                    
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="351">
                                        
                </comment>
                <declaration name="theColorSpace" type="ColorSpace" line="292"/>
                <scope line="296">
                    <scope line="297">
                        <declaration name="theProfile" type="ICC_Profile" line="298"/>
                    </scope>
                </scope>
                <scope line="307">
                    <scope line="308">
                        <declaration name="theProfile" type="ICC_Profile" line="309"/>
                    </scope>
                </scope>
                <scope line="319">
                    <scope line="320">
                        <declaration name="theProfile" type="ICC_Profile" line="321"/>
                    </scope>
                </scope>
                <scope line="331">
                    <scope line="332">
                        <declaration name="theProfile" type="ICC_Profile" line="333"/>
                    </scope>
                </scope>
                <scope line="345">
                    <scope line="346">
                        <declaration name="theProfile" type="ICC_Profile" line="347"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="367">
                Returns true if the ColorSpace is CS_sRGB.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if this is a &lt;CODE&gt;CS_sRGB&lt;/CODE&gt; color
                      space, &lt;code&gt;false&lt;/code&gt; if it is not                    
                </return>
            </javadoc>
            <method name="isCS_sRGB" type="boolean" line="372">
                <comment line="374">
                                        
                </comment>
            </method>
            <method name="toRGB" type="float[]" line="377"/>
            <javadoc line="377">
                Transforms a color value assumed to be in this ColorSpace
                  into a value in the default CS_sRGB color space.
                  &lt;p&gt;
                  This method transforms color values using algorithms designed
                  to produce the best perceptual match between input and output
                  colors.  In order to do colorimetric conversion of color values,
                  you should use the &lt;code&gt;toCIEXYZ&lt;/code&gt;
                  method of this color space to first convert from the input
                  color space to the CS_CIEXYZ color space, and then use the
                  &lt;code&gt;fromCIEXYZ&lt;/code&gt; method of the CS_sRGB color space to
                  convert from CS_CIEXYZ to the output color space.
                  See {@link #toCIEXYZ(float[]) toCIEXYZ} and{@link #fromCIEXYZ(float[]) fromCIEXYZ} for further information.
                  &lt;p&gt;                
                <param>
                    colorvalue a float array with length of at least the number
                      of components in this ColorSpace                    
                </param>
                <return>
                    a float array of length 3                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if array length is not
                      at least the number of components in this ColorSpace                    
                </throws>
            </javadoc>
            <method name="fromRGB" type="float[]" line="401"/>
            <javadoc line="401">
                Transforms a color value assumed to be in the default CS_sRGB
                  color space into this ColorSpace.
                  &lt;p&gt;
                  This method transforms color values using algorithms designed
                  to produce the best perceptual match between input and output
                  colors.  In order to do colorimetric conversion of color values,
                  you should use the &lt;code&gt;toCIEXYZ&lt;/code&gt;
                  method of the CS_sRGB color space to first convert from the input
                  color space to the CS_CIEXYZ color space, and then use the
                  &lt;code&gt;fromCIEXYZ&lt;/code&gt; method of this color space to
                  convert from CS_CIEXYZ to the output color space.
                  See {@link #toCIEXYZ(float[]) toCIEXYZ} and{@link #fromCIEXYZ(float[]) fromCIEXYZ} for further information.
                  &lt;p&gt;                
                <param>
                    rgbvalue a float array with length of at least 3                    
                </param>
                <return>
                    a float array with length equal to the number of
                      components in this ColorSpace                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if array length is not
                      at least 3                    
                </throws>
            </javadoc>
            <method name="toCIEXYZ" type="float[]" line="425"/>
            <javadoc line="425">
                Transforms a color value assumed to be in this ColorSpace
                  into the CS_CIEXYZ conversion color space.
                  &lt;p&gt;
                  This method transforms color values using relative colorimetry,
                  as defined by the International Color Consortium standard.  This
                  means that the XYZ values returned by this method are represented
                  relative to the D50 white point of the CS_CIEXYZ color space.
                  This representation is useful in a two-step color conversion
                  process in which colors are transformed from an input color
                  space to CS_CIEXYZ and then to an output color space.  This
                  representation is not the same as the XYZ values that would
                  be measured from the given color value by a colorimeter.
                  A further transformation is necessary to compute the XYZ values
                  that would be measured using current CIE recommended practices.
                  See the {@link ICC_ColorSpace#toCIEXYZ(float[]) toCIEXYZ} method of
                  &lt;code&gt;ICC_ColorSpace&lt;/code&gt; for further information.
                  &lt;p&gt;                
                <param>
                    colorvalue a float array with length of at least the number
                      of components in this ColorSpace                    
                </param>
                <return>
                    a float array of length 3                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if array length is not
                      at least the number of components in this ColorSpace.                    
                </throws>
            </javadoc>
            <method name="fromCIEXYZ" type="float[]" line="452"/>
            <javadoc line="452">
                Transforms a color value assumed to be in the CS_CIEXYZ conversion
                  color space into this ColorSpace.
                  &lt;p&gt;
                  This method transforms color values using relative colorimetry,
                  as defined by the International Color Consortium standard.  This
                  means that the XYZ argument values taken by this method are represented
                  relative to the D50 white point of the CS_CIEXYZ color space.
                  This representation is useful in a two-step color conversion
                  process in which colors are transformed from an input color
                  space to CS_CIEXYZ and then to an output color space.  The color
                  values returned by this method are not those that would produce
                  the XYZ value passed to the method when measured by a colorimeter.
                  If you have XYZ values corresponding to measurements made using
                  current CIE recommended practices, they must be converted to D50
                  relative values before being passed to this method.
                  See the {@link ICC_ColorSpace#fromCIEXYZ(float[]) fromCIEXYZ} method of
                  &lt;code&gt;ICC_ColorSpace&lt;/code&gt; for further information.
                  &lt;p&gt;                
                <param>
                    colorvalue a float array with length of at least 3                    
                </param>
                <return>
                    a float array with length equal to the number of
                      components in this ColorSpace                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if array length is not
                      at least 3                    
                </throws>
            </javadoc>
            <javadoc line="479">
                Returns the color space type of this ColorSpace (for example
                  TYPE_RGB, TYPE_XYZ, ...).  The type defines the
                  number of components of the color space and the interpretation,
                  e.g. TYPE_RGB identifies a color space with three components - red,
                  green, and blue.  It does not define the particular color
                  characteristics of the space, e.g. the chromaticities of the
                  primaries.                
                <return>
                    the type constant that represents the type of this
                      &lt;CODE&gt;ColorSpace&lt;/CODE&gt;                    
                </return>
            </javadoc>
            <method name="getType" type="int" line="491"/>
            <javadoc line="495">
                Returns the number of components of this ColorSpace.                
                <return>
                    The number of components in this &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.                    
                </return>
            </javadoc>
            <method name="getNumComponents" type="int" line="499"/>
            <javadoc line="503">
                Returns the name of the component given the component index.                
                <param>
                    idx the component index                    
                </param>
                <return>
                    the name of the component at the specified index                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;idx&lt;/code&gt; is
                      less than 0 or greater than numComponents - 1                    
                </throws>
            </javadoc>
            <method name="getName" type="String" line="511">
                <params>
                    <param name="idx" type="int"/>
                </params>
                <comment line="513">
                                        
                </comment>
                <scope line="513"/>
                <scope line="518">
                    <declaration name="tmp" type="String[]" line="556"/>
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="566">
                Returns the minimum normalized color component value for the
                  specified component.  The default implementation in this abstract
                  class returns 0.0 for all components.  Subclasses should override
                  this method if necessary.                
                <param>
                    component the component index                    
                </param>
                <return>
                    the minimum normalized component value                    
                </return>
                <throws>
                    IllegalArgumentException if component is less than 0 or
                      greater than numComponents - 1                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMinValue" type="float" line="578">
                <params>
                    <param name="component" type="int"/>
                </params>
                <scope line="579"/>
            </method>
            <javadoc line="586">
                Returns the maximum normalized color component value for the
                  specified component.  The default implementation in this abstract
                  class returns 1.0 for all components.  Subclasses should override
                  this method if necessary.                
                <param>
                    component the component index                    
                </param>
                <return>
                    the maximum normalized component value                    
                </return>
                <throws>
                    IllegalArgumentException if component is less than 0 or
                      greater than numComponents - 1                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMaxValue" type="float" line="598">
                <params>
                    <param name="component" type="int"/>
                </params>
                <scope line="599"/>
            </method>
            <method name="isCS_CIEXYZ" type="boolean" line="608">
                <params>
                    <param name="cspace" type="ColorSpace"/>
                </params>
            </method>
        </class>
    </source>