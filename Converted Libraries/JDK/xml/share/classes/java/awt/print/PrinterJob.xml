<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.print">
        <import package="java.awt.AWTError"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.print.DocFlavor"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.PrintServiceLookup"/>
        <import package="javax.print.StreamPrintServiceFactory"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.standard.Media"/>
        <import package="javax.print.attribute.standard.MediaPrintableArea"/>
        <import package="javax.print.attribute.standard.MediaSize"/>
        <import package="javax.print.attribute.standard.MediaSizeName"/>
        <import package="javax.print.attribute.standard.OrientationRequested"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="PrinterJob" line="45">
            <comment line="54">
                                
            </comment>
            <comment line="155">
                                
            </comment>
            <javadoc line="45">
                The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls
                  printing. An application calls methods in this class to set up a job,
                  optionally to invoke a print dialog with the user, and then to print
                  the pages of the job.                
            </javadoc>
            <javadoc line="55">
                Creates and returns a &lt;code&gt;PrinterJob&lt;/code&gt; which is initially
                  associated with the default printer.
                  If no printers are available on the system, a PrinterJob will still
                  be returned from this method, but &lt;code&gt;getPrintService()&lt;/code&gt;
                  will return &lt;code&gt;null&lt;/code&gt;, and calling{@link #print() print} with this &lt;code&gt;PrinterJob&lt;/code&gt; might
                  generate an exception.  Applications that need to determine if
                  there are suitable printers before creating a &lt;code&gt;PrinterJob&lt;/code&gt;
                  should ensure that the array returned from{@link #lookupPrintServices() lookupPrintServices} is not empty.                
                <return>
                    a new <code>PrinterJob</code>.                    
                </return>
                <throws>
                    SecurityException if a security manager exists and its{@link java.lang.SecurityManager#checkPrintJobAccess}method disallows this thread from creating a print job request                    
                </throws>
            </javadoc>
            <method name="getPrinterJob" type="PrinterJob" line="72">
                <declaration name="security" type="SecurityManager" line="73"/>
                <scope line="74"/>
                <anonymous_class line="78">
                    <method name="run" type="Object" line="79">
                        <declaration name="nm" type="String" line="80"/>
                        <scope line="81"/>
                        <scope line="83"/>
                        <scope line="85"/>
                        <scope line="87"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="94">
                A convenience method which looks up 2D print services.
                  Services returned from this method may be installed on
                  &lt;code&gt;PrinterJob&lt;/code&gt;s which support print services.
                  Calling this method is equivalent to calling{@link javax.print.PrintServiceLookup#lookupPrintServices(DocFlavor,AttributeSet)&lt;code&gt;PrintServiceLookup.lookupPrintServices()&lt;/code&gt;}and specifying a Pageable DocFlavor.                
                <return>
                    a possibly empty array of 2D print services.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="lookupPrintServices" type="PrintService[]" line="106"/>
            <javadoc line="112">
                A convenience method which locates factories for stream print
                  services which can image 2D graphics.
                  Sample usage :
                  &lt;pre&gt;
                  FileOutputStream outstream;
                  StreamPrintService psPrinter;
                  String psMimeType = &quot;application/postscript&quot;;
                  PrinterJob pj = PrinterJob.getPrinterJob();
                  StreamPrintServiceFactory[] factories =
                  PrinterJob.lookupStreamPrintServices(psMimeType);
                  if (factories.length &gt; 0) {
                  try {
                  outstream = new File(&quot;out.ps&quot;);
                  psPrinter =  factories[0].getPrintService(outstream);
                  // psPrinter can now be set as the service on a PrinterJob
                  pj.setPrintService(psPrinter)
                  } catch (Exception e) {
                  e.printStackTrace();
                  }
                  }
                  &lt;/pre&gt;
                  Services returned from this method may be installed on
                  &lt;code&gt;PrinterJob&lt;/code&gt; instances which support print services.
                  Calling this method is equivalent to calling{@link javax.print.StreamPrintServiceFactory#lookupStreamPrintServiceFactories(DocFlavor,String)&lt;code&gt;StreamPrintServiceFactory.lookupStreamPrintServiceFactories()
                  &lt;/code&gt;} and specifying a Pageable DocFlavor.                
                <param>
                    mimeType the required output format, or null to mean any format.                    
                </param>
                <return>
                    a possibly empty array of 2D stream print service factories.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="lookupStreamPrintServices" type="StreamPrintServiceFactory[]" line="147">
                <params>
                    <param name="mimeType" type="String"/>
                </params>
            </method>
            <javadoc line="156">
                A &lt;code&gt;PrinterJob&lt;/code&gt; object should be created using the
                  static {@link #getPrinterJob() &lt;code&gt;getPrinterJob&lt;/code&gt;} method.                
            </javadoc>
            <method name="PrinterJob" type="constructor" line="160"/>
            <javadoc line="163">
                Returns the service (printer) for this printer job.
                  Implementations of this class which do not support print services
                  may return null.  null will also be returned if no printers are
                  available.                
                <return>
                    the service for this printer job.                    
                </return>
                <see>
                    #setPrintService(PrintService)                    
                </see>
                <see>
                    #getPrinterJob()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPrintService" type="PrintService" line="173"/>
            <javadoc line="177">
                Associate this PrinterJob with a new PrintService.
                  This method is overridden by subclasses which support
                  specifying a Print Service.
                  Throws &lt;code&gt;PrinterException&lt;/code&gt; if the specified service
                  cannot support the &lt;code&gt;Pageable&lt;/code&gt; and
                  &lt;code&gt;Printable&lt;/code&gt; interfaces necessary to support 2D printing.                
                <param>
                    service a print service that supports 2D printing                    
                </param>
                <exception>
                    PrinterException if the specified service does not support
                      2D printing, or this PrinterJob class does not support
                      setting a 2D print service, or the specified service is
                      otherwise not a valid print service.                    
                </exception>
                <see>
                    #getPrintService                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setPrintService" type="void" line="194">
                <params>
                    <param name="service" type="PrintService"/>
                </params>
            </method>
            <method name="setPrintable" type="void" line="199"/>
            <javadoc line="199">
                Calls &lt;code&gt;painter&lt;/code&gt; to render the pages.  The pages in the
                  document to be printed by this
                  &lt;code&gt;PrinterJob&lt;/code&gt; are rendered by the {@link Printable}object, &lt;code&gt;painter&lt;/code&gt;.  The {@link PageFormat} for each page
                  is the default page format.                
                <param>
                    painter the <code>Printable</code> that renders each page of
                      the document.                    
                </param>
            </javadoc>
            <method name="setPrintable" type="void" line="210"/>
            <javadoc line="210">
                Calls &lt;code&gt;painter&lt;/code&gt; to render the pages in the specified
                  &lt;code&gt;format&lt;/code&gt;.  The pages in the document to be printed by
                  this &lt;code&gt;PrinterJob&lt;/code&gt; are rendered by the
                  &lt;code&gt;Printable&lt;/code&gt; object, &lt;code&gt;painter&lt;/code&gt;. The
                  &lt;code&gt;PageFormat&lt;/code&gt; of each page is &lt;code&gt;format&lt;/code&gt;.                
                <param>
                    painter the <code>Printable</code> called to render
                      each page of the document                    
                </param>
                <param>
                    format the size and orientation of each page to
                      be printed                    
                </param>
            </javadoc>
            <method name="setPageable" type="void" line="223"/>
            <javadoc line="223">
                Queries &lt;code&gt;document&lt;/code&gt; for the number of pages and
                  the &lt;code&gt;PageFormat&lt;/code&gt; and &lt;code&gt;Printable&lt;/code&gt; for each
                  page held in the &lt;code&gt;Pageable&lt;/code&gt; instance,
                  &lt;code&gt;document&lt;/code&gt;.                
                <param>
                    document the pages to be printed. It can not be
                      <code>null</code>.                    
                </param>
                <exception>
                    NullPointerException the <code>Pageable</code> passed in
                      was <code>null</code>.                    
                </exception>
                <see>
                    PageFormat                    
                </see>
                <see>
                    Printable                    
                </see>
            </javadoc>
            <method name="printDialog" type="boolean" line="238"/>
            <javadoc line="238">
                Presents a dialog to the user for changing the properties of
                  the print job.
                  This method will display a native dialog if a native print
                  service is selected, and user choice of printers will be restricted
                  to these native print services.
                  To present the cross platform print dialog for all services,
                  including native ones instead use
                  &lt;code&gt;printDialog(PrintRequestAttributeSet)&lt;/code&gt;.
                  &lt;p&gt;
                  PrinterJob implementations which can use PrintService&apos;s will update
                  the PrintService for this PrinterJob to reflect the new service
                  selected by the user.                
                <return>
                    <code>true</code> if the user does not cancel the dialog;
                      <code>false</code> otherwise.                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <javadoc line="259">
                A convenience method which displays a cross-platform print dialog
                  for all services which are capable of printing 2D graphics using the
                  &lt;code&gt;Pageable&lt;/code&gt; interface. The selected printer when the
                  dialog is initially displayed will reflect the print service currently
                  attached to this print job.
                  If the user changes the print service, the PrinterJob will be
                  updated to reflect this, unless the user cancels the dialog.
                  As well as allowing the user to select the destination printer,
                  the user can also select values of various print request attributes.
                  &lt;p&gt;
                  The attributes parameter on input will reflect the applications
                  required initial selections in the user dialog. Attributes not
                  specified display using the default for the service. On return it
                  will reflect the user&apos;s choices. Selections may be updated by
                  the implementation to be consistent with the supported values
                  for the currently selected print service.
                  &lt;p&gt;
                  As the user scrolls to a new print service selection, the values
                  copied are based on the settings for the previous service, together
                  with any user changes. The values are not based on the original
                  settings supplied by the client.
                  &lt;p&gt;
                  With the exception of selected printer, the PrinterJob state is
                  not updated to reflect the user&apos;s changes.
                  For the selections to affect a printer job, the attributes must
                  be specified in the call to the
                  &lt;code&gt;print(PrintRequestAttributeSet)&lt;/code&gt; method. If using
                  the Pageable interface, clients which intend to use media selected
                  by the user must create a PageFormat derived from the user&apos;s
                  selections.
                  If the user cancels the dialog, the attributes will not reflect
                  any changes made by the user.                
                <param>
                    attributes on input is application supplied attributes,
                      on output the contents are updated to reflect user choices.
                      This parameter may not be null.                    
                </param>
                <return>
                    <code>true</code> if the user does not cancel the dialog;
                      <code>false</code> otherwise.                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <exception>
                    NullPointerException if <code>attributes</code> parameter
                      is null.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="printDialog" type="boolean" line="306">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="308"/>
            </method>
            <method name="pageDialog" type="PageFormat" line="314"/>
            <javadoc line="314">
                Displays a dialog that allows modification of a
                  &lt;code&gt;PageFormat&lt;/code&gt; instance.
                  The &lt;code&gt;page&lt;/code&gt; argument is used to initialize controls
                  in the page setup dialog.
                  If the user cancels the dialog then this method returns the
                  original &lt;code&gt;page&lt;/code&gt; object unmodified.
                  If the user okays the dialog then this method returns a new
                  &lt;code&gt;PageFormat&lt;/code&gt; object with the indicated changes.
                  In either case, the original &lt;code&gt;page&lt;/code&gt; object is
                  not modified.                
                <param>
                    page the default <code>PageFormat</code> presented to the
                      user for modification                    
                </param>
                <return>
                    the original <code>page</code> object if the dialog
                      is cancelled; a new <code>PageFormat</code> object
                      containing the format indicated by the user if the
                      dialog is acknowledged.                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="339">
                A convenience method which displays a cross-platform page setup dialog.
                  The choices available will reflect the print service currently
                  set on this PrinterJob.
                  &lt;p&gt;
                  The attributes parameter on input will reflect the client&apos;s
                  required initial selections in the user dialog. Attributes which are
                  not specified display using the default for the service. On return it
                  will reflect the user&apos;s choices. Selections may be updated by
                  the implementation to be consistent with the supported values
                  for the currently selected print service.
                  &lt;p&gt;
                  The return value will be a PageFormat equivalent to the
                  selections in the PrintRequestAttributeSet.
                  If the user cancels the dialog, the attributes will not reflect
                  any changes made by the user, and the return value will be null.                
                <param>
                    attributes on input is application supplied attributes,
                      on output the contents are updated to reflect user choices.
                      This parameter may not be null.                    
                </param>
                <return>
                    a page format if the user does not cancel the dialog;
                      <code>null</code> otherwise.                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <exception>
                    NullPointerException if <code>attributes</code> parameter
                      is null.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="pageDialog" type="PageFormat" line="369">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <scope line="371"/>
            </method>
            <method name="defaultPage" type="PageFormat" line="377"/>
            <javadoc line="377">
                Clones the &lt;code&gt;PageFormat&lt;/code&gt; argument and alters the
                  clone to describe a default page size and orientation.                
                <param>
                    page the <code>PageFormat</code> to be cloned and altered                    
                </param>
                <return>
                    clone of <code>page</code>, altered to describe a default
                      <code>PageFormat</code>.                    
                </return>
            </javadoc>
            <javadoc line="386">
                Creates a new &lt;code&gt;PageFormat&lt;/code&gt; instance and
                  sets it to a default size and orientation.                
                <return>
                    a <code>PageFormat</code> set to a default size and
                      orientation.                    
                </return>
            </javadoc>
            <method name="defaultPage" type="PageFormat" line="392"/>
            <javadoc line="396">
                Calculates a &lt;code&gt;PageFormat&lt;/code&gt; with values consistent with those
                  supported by the current &lt;code&gt;PrintService&lt;/code&gt; for this job
                  (ie the value returned by &lt;code&gt;getPrintService()&lt;/code&gt;) and media,
                  printable area and orientation contained in &lt;code&gt;attributes&lt;/code&gt;.
                  &lt;p&gt;
                  Calling this method does not update the job.
                  It is useful for clients that have a set of attributes obtained from
                  &lt;code&gt;printDialog(PrintRequestAttributeSet attributes)&lt;/code&gt;
                  and need a PageFormat to print a Pageable object.                
                <param>
                    attributes a set of printing attributes, for example obtained
                      from calling printDialog. If <code>attributes</code> is null a default
                      PageFormat is returned.                    
                </param>
                <return>
                    a <code>PageFormat</code> whose settings conform with
                      those of the current service and the specified attributes.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getPageFormat" type="PageFormat" line="413">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <comment line="433">
                    If there&apos;s a media but no media printable area, we can try
                     to retrieve the default value for mpa and use that.                    
                </comment>
                <declaration name="service" type="PrintService" line="415"/>
                <declaration name="pf" type="PageFormat" line="416"/>
                <scope line="418"/>
                <declaration name="media" type="Media" line="422"/>
                <declaration name="mpa" type="MediaPrintableArea" line="423"/>
                <declaration name="orientReq" type="OrientationRequested" line="425"/>
                <scope line="428"/>
                <declaration name="paper" type="Paper" line="431"/>
                <scope line="437">
                    <declaration name="mpaVals" type="Object" line="438"/>
                    <scope line="442"/>
                </scope>
                <scope line="448">
                    <scope line="449">
                        <declaration name="msn" type="MediaSizeName" line="450"/>
                        <declaration name="msz" type="MediaSize" line="451"/>
                        <scope line="452">
                            <declaration name="inch" type="double" line="453"/>
                            <declaration name="paperWid" type="double" line="454"/>
                            <declaration name="paperHgt" type="double" line="455"/>
                            <scope line="457"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="467">
                    <declaration name="printableArea" type="float[]" line="468"/>
                    <scope line="470"/>
                </scope>
                <scope line="478">
                    <declaration name="orient" type="int" line="479"/>
                    <scope line="480"/>
                    <scope line="482"/>
                    <scope line="484"/>
                </scope>
            </method>
            <method name="validatePage" type="PageFormat" line="495"/>
            <javadoc line="495">
                Returns the clone of &lt;code&gt;page&lt;/code&gt; with its settings
                  adjusted to be compatible with the current printer of this
                  &lt;code&gt;PrinterJob&lt;/code&gt;.  For example, the returned
                  &lt;code&gt;PageFormat&lt;/code&gt; could have its imageable area
                  adjusted to fit within the physical area of the paper that
                  is used by the current printer.                
                <param>
                    page the <code>PageFormat</code> that is cloned and
                      whose settings are changed to be compatible with
                      the current printer                    
                </param>
                <return>
                    a <code>PageFormat</code> that is cloned from
                      <code>page</code> and whose settings are changed
                      to conform with this <code>PrinterJob</code>.                    
                </return>
            </javadoc>
            <method name="print" type="void" line="511"/>
            <javadoc line="511">
                Prints a set of pages.                
                <exception>
                    PrinterException an error in the print system
                      caused the job to be aborted.                    
                </exception>
                <see>
                    Book                    
                </see>
                <see>
                    Pageable                    
                </see>
                <see>
                    Printable                    
                </see>
            </javadoc>
            <javadoc line="521">
                Prints a set of pages using the settings in the attribute
                  set. The default implementation ignores the attribute set.
                  &lt;p&gt;
                  Note that some attributes may be set directly on the PrinterJob
                  by equivalent method calls, (for example), copies:
                  &lt;code&gt;setcopies(int)&lt;/code&gt;, job name: &lt;code&gt;setJobName(String)&lt;/code&gt;
                  and specifying media size and orientation though the
                  &lt;code&gt;PageFormat&lt;/code&gt; object.
                  &lt;p&gt;
                  If a supported attribute-value is specified in this attribute set,
                  it will take precedence over the API settings for this print()
                  operation only.
                  The following behaviour is specified for PageFormat:
                  If a client uses the Printable interface, then the
                  &lt;code&gt;attributes&lt;/code&gt; parameter to this method is examined
                  for attributes which specify media (by size), orientation, and
                  imageable area, and those are used to construct a new PageFormat
                  which is passed to the Printable object&apos;s print() method.
                  See {@link Printable} for an explanation of the required
                  behaviour of a Printable to ensure optimal printing via PrinterJob.
                  For clients of the Pageable interface, the PageFormat will always
                  be as supplied by that interface, on a per page basis.
                  &lt;p&gt;
                  These behaviours allow an application to directly pass the
                  user settings returned from
                  &lt;code&gt;printDialog(PrintRequestAttributeSet attributes&lt;/code&gt; to
                  this print() method.
                  &lt;p&gt;                
                <param>
                    attributes a set of attributes for the job                    
                </param>
                <exception>
                    PrinterException an error in the print system
                      caused the job to be aborted.                    
                </exception>
                <see>
                    Book                    
                </see>
                <see>
                    Pageable                    
                </see>
                <see>
                    Printable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="print" type="void" line="560">
                <params>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
            </method>
            <method name="setCopies" type="void" line="564"/>
            <javadoc line="564">
                Sets the number of copies to be printed.                
                <param>
                    copies the number of copies to be printed                    
                </param>
                <see>
                    #getCopies                    
                </see>
            </javadoc>
            <method name="getCopies" type="int" line="571"/>
            <javadoc line="571">
                Gets the number of copies to be printed.                
                <return>
                    the number of copies to be printed.                    
                </return>
                <see>
                    #setCopies                    
                </see>
            </javadoc>
            <method name="getUserName" type="String" line="578"/>
            <javadoc line="578">
                Gets the name of the printing user.                
                <return>
                    the name of the printing user                    
                </return>
            </javadoc>
            <method name="setJobName" type="void" line="584"/>
            <javadoc line="584">
                Sets the name of the document to be printed.
                  The document name can not be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    jobName the name of the document to be printed                    
                </param>
                <see>
                    #getJobName                    
                </see>
            </javadoc>
            <method name="getJobName" type="String" line="592"/>
            <javadoc line="592">
                Gets the name of the document to be printed.                
                <return>
                    the name of the document to be printed.                    
                </return>
                <see>
                    #setJobName                    
                </see>
            </javadoc>
            <method name="cancel" type="void" line="599"/>
            <javadoc line="599">
                Cancels a print job that is in progress.  If{@link #print() print} has been called but has not
                  returned then this method signals
                  that the job should be cancelled at the next
                  chance. If there is no print job in progress then
                  this call does nothing.                
            </javadoc>
            <method name="isCancelled" type="boolean" line="609"/>
            <javadoc line="609">
                Returns &lt;code&gt;true&lt;/code&gt; if a print job is
                  in progress, but is going to be cancelled
                  at the next opportunity; otherwise returns
                  &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    <code>true</code> if the job in progress
                      is going to be cancelled; <code>false</code> otherwise.                    
                </return>
            </javadoc>
        </class>
    </source>