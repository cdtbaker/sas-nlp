<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.print">
        <import package="java.awt.Graphics"/>
        <interface name="Printable">
            <javadoc line="3">
                The &lt;code&gt;Printable&lt;/code&gt; interface is implemented
                  by the &lt;code&gt;print&lt;/code&gt; methods of the current
                  page painter, which is called by the printing
                  system to render a page.  When building a{@link Pageable}, pairs of {@link PageFormat}instances and instances that implement
                  this interface are used to describe each page. The
                  instance implementing &lt;code&gt;Printable&lt;/code&gt; is called to
                  print the page&apos;s graphics.
                  &lt;p&gt;
                  A &lt;code&gt;Printable(..)&lt;/code&gt; may be set on a &lt;code&gt;PrinterJob&lt;/code&gt;.
                  When the client subsequently initiates printing by calling
                  &lt;code&gt;PrinterJob.print(..)&lt;/code&gt; control
                  &lt;p&gt;
                  is handed to the printing system until all pages have been printed.
                  It does this by calling &lt;code&gt;Printable.print(..)&lt;/code&gt; until
                  all pages in the document have been printed.
                  In using the &lt;code&gt;Printable&lt;/code&gt; interface the printing
                  commits to image the contents of a page whenever
                  requested by the printing system.
                  &lt;p&gt;
                  The parameters to &lt;code&gt;Printable.print(..)&lt;/code&gt; include a
                  &lt;code&gt;PageFormat&lt;/code&gt; which describes the printable area of
                  the page, needed for calculating the contents that will fit the
                  page, and the page index, which specifies the zero-based print
                  stream index of the requested page.
                  &lt;p&gt;
                  For correct printing behaviour, the following points should be
                  observed:
                  &lt;ul&gt;
                  &lt;li&gt; The printing system may request a page index more than once.
                  On each occasion equal PageFormat parameters will be supplied.
                  &lt;li&gt;The printing system will call &lt;code&gt;Printable.print(..)&lt;/code&gt;
                  with page indexes which increase monotonically, although as noted above,
                  the &lt;code&gt;Printable&lt;/code&gt; should expect multiple calls for a page index
                  and that page indexes may be skipped, when page ranges are specified
                  by the client, or by a user through a print dialog.
                  &lt;li&gt;If multiple collated copies of a document are requested, and the
                  printer cannot natively support this, then the document may be imaged
                  multiple times. Printing will start each copy from the lowest print
                  stream page index page.
                  &lt;li&gt;With the exception of re-imaging an entire document for multiple
                  collated copies, the increasing page index order means that when
                  page N is requested if a client needs to calculate page break position,
                  it may safely discard any state related to pages &lt; N, and make current
                  that for page N. &quot;State&quot; usually is just the calculated position in the
                  document that corresponds to the start of the page.
                  &lt;li&gt;When called by the printing system the &lt;code&gt;Printable&lt;/code&gt; must
                  inspect and honour the supplied PageFormat parameter as well as the
                  page index.  The format of the page to be drawn is specified by the
                  supplied PageFormat. The size, orientation and imageable area of the page
                  is therefore already determined and rendering must be within this
                  imageable area.
                  This is key to correct printing behaviour, and it has the
                  implication that the client has the responsibility of tracking
                  what content belongs on the specified page.
                  &lt;li&gt;When the &lt;code&gt;Printable&lt;/code&gt; is obtained from a client-supplied
                  &lt;code&gt;Pageable&lt;/code&gt; then the client may provide different PageFormats
                  for each page index. Calculations of page breaks must account for this.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <see>
                    java.awt.print.Pageable                    
                </see>
                <see>
                    java.awt.print.PageFormat                    
                </see>
                <see>
                    java.awt.print.PrinterJob                    
                </see>
            </javadoc>
            <declaration name="PAGE_EXISTS" type="int" line="68"/>
            <javadoc line="68">
                Returned from {@link #print(Graphics,PageFormat,int)}to signify that the requested page was rendered.                
            </javadoc>
            <declaration name="NO_SUCH_PAGE" type="int" line="72"/>
            <javadoc line="72">
                Returned from &lt;code&gt;print&lt;/code&gt; to signify that the
                  &lt;code&gt;pageIndex&lt;/code&gt; is too large and that the requested page
                  does not exist.                
            </javadoc>
            <method name="print" type="int" line="78"/>
            <javadoc line="78">
                Prints the page at the specified index into the specified{@link Graphics} context in the specified
                  format.  A &lt;code&gt;PrinterJob&lt;/code&gt; calls the
                  &lt;code&gt;Printable&lt;/code&gt; interface to request that a page be
                  rendered into the context specified by
                  &lt;code&gt;graphics&lt;/code&gt;.  The format of the page to be drawn is
                  specified by &lt;code&gt;pageFormat&lt;/code&gt;.  The zero based index
                  of the requested page is specified by &lt;code&gt;pageIndex&lt;/code&gt;.
                  If the requested page does not exist then this method returns
                  NO_SUCH_PAGE; otherwise PAGE_EXISTS is returned.
                  The &lt;code&gt;Graphics&lt;/code&gt; class or subclass implements the{@link PrinterGraphics} interface to provide additional
                  information.  If the &lt;code&gt;Printable&lt;/code&gt; object
                  aborts the print job then it throws a {@link PrinterException}.                
                <param>
                    graphics the context into which the page is drawn                    
                </param>
                <param>
                    pageFormat the size and orientation of the page being drawn                    
                </param>
                <param>
                    pageIndex the zero based index of the page to be drawn                    
                </param>
                <return>
                    PAGE_EXISTS if the page is rendered successfully
                      or NO_SUCH_PAGE if &lt;code&gt;pageIndex&lt;/code&gt; specifies a
                      non-existent page.                    
                </return>
                <exception>
                    java.awt.print.PrinterExceptionthrown when the print job is terminated.                    
                </exception>
            </javadoc>
        </interface>
    </source>