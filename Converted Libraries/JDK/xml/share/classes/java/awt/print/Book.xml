<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.print">
        <import package="java.util.Vector"/>
        <class name="Book" line="3">
            <implements interface="Pageable"/>
            <javadoc line="3">
                The &lt;code&gt;Book&lt;/code&gt; class provides a representation of a document in
                  which pages may have different page formats and page painters. This
                  class uses the {@link Pageable} interface to interact with a{@link PrinterJob}.                
                <see>
                    Pageable                    
                </see>
                <see>
                    PrinterJob                    
                </see>
            </javadoc>
            <declaration name="mPages" type="Vector" line="11"/>
            <javadoc line="11">
                The set of pages that make up the Book.                
            </javadoc>
            <javadoc line="15">
                Creates a new, empty &lt;code&gt;Book&lt;/code&gt;.                
            </javadoc>
            <method name="Book" type="constructor" line="18"/>
            <javadoc line="21">
                Returns the number of pages in this &lt;code&gt;Book&lt;/code&gt;.                
                <return>
                    the number of pages this &lt;code&gt;Book&lt;/code&gt; contains.                    
                </return>
            </javadoc>
            <method name="getNumberOfPages" type="int" line="25"/>
            <javadoc line="28">
                Returns the {@link PageFormat} of the page specified by
                  &lt;code&gt;pageIndex&lt;/code&gt;.                
                <param>
                    pageIndex the zero based index of the page whose
                      &lt;code&gt;PageFormat&lt;/code&gt; is being requested                    
                </param>
                <return>
                    the &lt;code&gt;PageFormat&lt;/code&gt; describing the size and
                      orientation of the page.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the &lt;code&gt;Pageable&lt;/code&gt;
                      does not contain the requested page                    
                </throws>
            </javadoc>
            <method name="getPageFormat" type="PageFormat" line="38">
                <params>
                    <param name="pageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="41">
                Returns the {@link Printable} instance responsible for rendering
                  the page specified by &lt;code&gt;pageIndex&lt;/code&gt;.                
                <param>
                    pageIndex the zero based index of the page whose
                      &lt;code&gt;Printable&lt;/code&gt; is being requested                    
                </param>
                <return>
                    the &lt;code&gt;Printable&lt;/code&gt; that renders the page.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if the &lt;code&gt;Pageable&lt;/code&gt;
                      does not contain the requested page                    
                </throws>
            </javadoc>
            <method name="getPrintable" type="Printable" line="50">
                <params>
                    <param name="pageIndex" type="int"/>
                </params>
            </method>
            <javadoc line="53">
                Sets the &lt;code&gt;PageFormat&lt;/code&gt; and the &lt;code&gt;Painter&lt;/code&gt; for a
                  specified page number.                
                <param>
                    pageIndex the zero based index of the page whose
                      painter and format is altered                    
                </param>
                <param>
                    painter   the &lt;code&gt;Printable&lt;/code&gt; instance that
                      renders the page                    
                </param>
                <param>
                    page      the size and orientation of the page                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified
                      page is not already in this &lt;code&gt;Book&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if the &lt;code&gt;painter&lt;/code&gt; or
                      &lt;code&gt;page&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="setPage" type="void" line="66">
                <params>
                    <param name="pageIndex" type="int"/>
                    <param name="painter" type="Printable"/>
                    <param name="page" type="PageFormat"/>
                </params>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Appends a single page to the end of this &lt;code&gt;Book&lt;/code&gt;.                
                <param>
                    painter   the &lt;code&gt;Printable&lt;/code&gt; instance that
                      renders the page                    
                </param>
                <param>
                    page      the size and orientation of the page                    
                </param>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt;
                      If the &lt;code&gt;painter&lt;/code&gt; or &lt;code&gt;page&lt;/code&gt;
                      argument is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="append" type="void" line="84">
                <params>
                    <param name="painter" type="Printable"/>
                    <param name="page" type="PageFormat"/>
                </params>
            </method>
            <javadoc line="87">
                Appends &lt;code&gt;numPages&lt;/code&gt; pages to the end of this
                  &lt;code&gt;Book&lt;/code&gt;.  Each of the pages is associated with
                  &lt;code&gt;page&lt;/code&gt;.                
                <param>
                    painter   the &lt;code&gt;Printable&lt;/code&gt; instance that renders
                      the page                    
                </param>
                <param>
                    page      the size and orientation of the page                    
                </param>
                <param>
                    numPages  the number of pages to be added to the
                      this &lt;code&gt;Book&lt;/code&gt;.                    
                </param>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt;
                      If the &lt;code&gt;painter&lt;/code&gt; or &lt;code&gt;page&lt;/code&gt;
                      argument is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="append" type="void" line="100">
                <params>
                    <param name="painter" type="Printable"/>
                    <param name="page" type="PageFormat"/>
                    <param name="numPages" type="int"/>
                </params>
                <declaration name="bookPage" type="BookPage" line="101"/>
                <declaration name="pageIndex" type="int" line="102"/>
                <declaration name="newSize" type="int" line="103"/>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                Return the BookPage for the page specified by &apos;pageIndex&apos;.                
            </javadoc>
            <method name="getPage" type="BookPage" line="112">
                <params>
                    <param name="pageIndex" type="int"/>
                </params>
            </method>
            <class name="BookPage" line="115">
                <javadoc line="115">
                    The BookPage inner class describes an individual
                      page in a Book through a PageFormat-Printable pair.                    
                </javadoc>
                <declaration name="mFormat" type="PageFormat" line="120"/>
                <javadoc line="120">
                    The size and orientation of the page.                    
                </javadoc>
                <declaration name="mPainter" type="Printable" line="124"/>
                <javadoc line="124">
                    The instance that will draw the page.                    
                </javadoc>
                <javadoc line="128">
                    A new instance where &apos;format&apos; describes the page&apos;s
                      size and orientation and &apos;painter&apos; is the instance
                      that will draw the page&apos;s graphics.                    
                    <throws>
                        NullPointerExceptionIf the &lt;code&gt;painter&lt;/code&gt; or &lt;code&gt;format&lt;/code&gt;
                          argument is &lt;code&gt;null&lt;/code&gt;                        
                    </throws>
                </javadoc>
                <method name="BookPage" type="constructor" line="135">
                    <params>
                        <param name="painter" type="Printable"/>
                        <param name="format" type="PageFormat"/>
                    </params>
                    <scope line="136"/>
                </method>
                <javadoc line="142">
                    Return the instance that paints the
                      page.                    
                </javadoc>
                <method name="getPrintable" type="Printable" line="146"/>
                <javadoc line="149">
                    Return the format of the page.                    
                </javadoc>
                <method name="getPageFormat" type="PageFormat" line="152"/>
            </class>
        </class>
    </source>