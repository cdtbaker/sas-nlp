<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="FlowLayout" line="30">
            <comment line="142">
                This is for 1.1 serialization compatibility                
            </comment>
            <comment line="162">
                This is the one we actually use                
            </comment>
            <comment line="194">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="645">
                the internal serial version which says which version was written
                 - 0 (default) for versions before the Java 2 platform, v1.2
                 - 1 for version &gt;= Java 2 platform v1.2, which includes &quot;newAlign&quot; field                
            </comment>
            <implements interface="LayoutManager"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="30">
                A flow layout arranges components in a directional flow, much
                  like lines of text in a paragraph. The flow direction is
                  determined by the container&apos;s &lt;code&gt;componentOrientation&lt;/code&gt;
                  property and may be one of two values:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ComponentOrientation.LEFT_TO_RIGHT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ComponentOrientation.RIGHT_TO_LEFT&lt;/code&gt;
                  &lt;/ul&gt;
                  Flow layouts are typically used
                  to arrange buttons in a panel. It arranges buttons
                  horizontally until no more buttons fit on the same line.
                  The line alignment is determined by the &lt;code&gt;align&lt;/code&gt;
                  property. The possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #LEFT LEFT}&lt;li&gt;{@link #RIGHT RIGHT}&lt;li&gt;{@link #CENTER CENTER}&lt;li&gt;{@link #LEADING LEADING}&lt;li&gt;{@link #TRAILING TRAILING}&lt;/ul&gt;
                  &lt;p&gt;
                  For example, the following picture shows an applet using the flow
                  layout manager (its default layout manager) to position three buttons:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/FlowLayout-1.gif&quot;
                  ALT=&quot;Graphic of Layout for Three Buttons&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  Here is the code for this applet:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  import java.awt.;
                  import java.applet.Applet;
                  public class myButtons extends Applet {
                  Button button1, button2, button3;
                  public void init() {
                  button1 = new Button(&quot;Ok&quot;);
                  button2 = new Button(&quot;Open&quot;);
                  button3 = new Button(&quot;Close&quot;);
                  add(button1);
                  add(button2);
                  add(button3);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  A flow layout lets each component assume its natural (preferred) size.                
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    JDK1.0                    
                </since>
                <see>
                    ComponentOrientation                    
                </see>
            </javadoc>
            <declaration name="LEFT" type="int" line="87"/>
            <javadoc line="87">
                This value indicates that each row of components
                  should be left-justified.                
            </javadoc>
            <declaration name="CENTER" type="int" line="93"/>
            <javadoc line="93">
                This value indicates that each row of components
                  should be centered.                
            </javadoc>
            <declaration name="RIGHT" type="int" line="99"/>
            <javadoc line="99">
                This value indicates that each row of components
                  should be right-justified.                
            </javadoc>
            <declaration name="LEADING" type="int" line="105"/>
            <javadoc line="105">
                This value indicates that each row of components
                  should be justified to the leading edge of the container&apos;s
                  orientation, for example, to the left in left-to-right orientations.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TRAILING" type="int" line="116"/>
            <javadoc line="116">
                This value indicates that each row of components
                  should be justified to the trailing edge of the container&apos;s
                  orientation, for example, to the right in left-to-right orientations.                
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="align" type="int" line="127"/>
            <javadoc line="127">
                &lt;code&gt;align&lt;/code&gt; is the property that determines
                  how each row distributes empty space.
                  It can be one of the following values:
                  &lt;ul&gt;
                  &lt;code&gt;LEFT&lt;/code&gt;
                  &lt;code&gt;RIGHT&lt;/code&gt;
                  &lt;code&gt;CENTER&lt;/code&gt;
                  &lt;/ul&gt;                
                <serial>
                                        
                </serial>
                <see>
                    #getAlignment                    
                </see>
                <see>
                    #setAlignment                    
                </see>
            </javadoc>
            <declaration name="newAlign" type="int" line="143"/>
            <javadoc line="143">
                &lt;code&gt;newAlign&lt;/code&gt; is the property that determines
                  how each row distributes empty space for the Java 2 platform,
                  v1.2 and greater.
                  It can be one of the following three values:
                  &lt;ul&gt;
                  &lt;code&gt;LEFT&lt;/code&gt;
                  &lt;code&gt;RIGHT&lt;/code&gt;
                  &lt;code&gt;CENTER&lt;/code&gt;
                  &lt;code&gt;LEADING&lt;/code&gt;
                  &lt;code&gt;TRAILING&lt;/code&gt;
                  &lt;/ul&gt;                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
                <see>
                    #getAlignment                    
                </see>
                <see>
                    #setAlignment                    
                </see>
            </javadoc>
            <declaration name="hgap" type="int" line="163"/>
            <javadoc line="163">
                The flow layout manager allows a seperation of
                  components with gaps.  The horizontal gap will
                  specify the space between components and between
                  the components and the borders of the
                  &lt;code&gt;Container&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getHgap()                    
                </see>
                <see>
                    #setHgap(int)                    
                </see>
            </javadoc>
            <declaration name="vgap" type="int" line="176"/>
            <javadoc line="176">
                The flow layout manager allows a seperation of
                  components with gaps.  The vertical gap will
                  specify the space between rows and between the
                  the rows and the borders of the &lt;code&gt;Container&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getHgap()                    
                </see>
                <see>
                    #setHgap(int)                    
                </see>
            </javadoc>
            <declaration name="alignOnBaseline" type="boolean" line="188"/>
            <javadoc line="188">
                If true, components will be aligned on their baseline.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="196"/>
            <javadoc line="198">
                Constructs a new &lt;code&gt;FlowLayout&lt;/code&gt; with a centered alignment and a
                  default 5-unit horizontal and vertical gap.                
            </javadoc>
            <method name="FlowLayout" type="constructor" line="202"/>
            <javadoc line="206">
                Constructs a new &lt;code&gt;FlowLayout&lt;/code&gt; with the specified
                  alignment and a default 5-unit horizontal and vertical gap.
                  The value of the alignment argument must be one of
                  &lt;code&gt;FlowLayout.LEFT&lt;/code&gt;, &lt;code&gt;FlowLayout.RIGHT&lt;/code&gt;,
                  &lt;code&gt;FlowLayout.CENTER&lt;/code&gt;, &lt;code&gt;FlowLayout.LEADING&lt;/code&gt;,
                  or &lt;code&gt;FlowLayout.TRAILING&lt;/code&gt;.                
                <param>
                    align the alignment value                    
                </param>
            </javadoc>
            <method name="FlowLayout" type="constructor" line="215">
                <params>
                    <param name="align" type="int"/>
                </params>
            </method>
            <javadoc line="219">
                Creates a new flow layout manager with the indicated alignment
                  and the indicated horizontal and vertical gaps.
                  &lt;p&gt;
                  The value of the alignment argument must be one of
                  &lt;code&gt;FlowLayout.LEFT&lt;/code&gt;, &lt;code&gt;FlowLayout.RIGHT&lt;/code&gt;,
                  &lt;code&gt;FlowLayout.CENTER&lt;/code&gt;, &lt;code&gt;FlowLayout.LEADING&lt;/code&gt;,
                  or &lt;code&gt;FlowLayout.TRAILING&lt;/code&gt;.                
                <param>
                    align   the alignment value                    
                </param>
                <param>
                    hgap    the horizontal gap between components
                      and between the components and the
                      borders of the &lt;code&gt;Container&lt;/code&gt;                    
                </param>
                <param>
                    vgap    the vertical gap between components
                      and between the components and the
                      borders of the &lt;code&gt;Container&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="FlowLayout" type="constructor" line="235">
                <params>
                    <param name="align" type="int"/>
                    <param name="hgap" type="int"/>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="241">
                Gets the alignment for this layout.
                  Possible values are &lt;code&gt;FlowLayout.LEFT&lt;/code&gt;,
                  &lt;code&gt;FlowLayout.RIGHT&lt;/code&gt;, &lt;code&gt;FlowLayout.CENTER&lt;/code&gt;,
                  &lt;code&gt;FlowLayout.LEADING&lt;/code&gt;,
                  or &lt;code&gt;FlowLayout.TRAILING&lt;/code&gt;.                
                <return>
                    the alignment value for this layout                    
                </return>
                <see>
                    java.awt.FlowLayout#setAlignment                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getAlignment" type="int" line="251"/>
            <javadoc line="255">
                Sets the alignment for this layout.
                  Possible values are
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;FlowLayout.LEFT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;FlowLayout.RIGHT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;FlowLayout.CENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;FlowLayout.LEADING&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;FlowLayout.TRAILING&lt;/code&gt;
                  &lt;/ul&gt;                
                <param>
                    align one of the alignment values shown above                    
                </param>
                <see>
                    #getAlignment()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setAlignment" type="void" line="269">
                <params>
                    <param name="align" type="int"/>
                </params>
                <comment line="273">
                    this.align is used only for serialization compatibility,
                     so set it to a value compatible with the 1.1 version
                     of the class                    
                </comment>
            </method>
            <javadoc line="289">
                Gets the horizontal gap between components
                  and between the components and the borders
                  of the &lt;code&gt;Container&lt;/code&gt;                
                <return>
                    the horizontal gap between components
                      and between the components and the borders
                      of the &lt;code&gt;Container&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.FlowLayout#setHgap                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getHgap" type="int" line="300"/>
            <javadoc line="304">
                Sets the horizontal gap between components and
                  between the components and the borders of the
                  &lt;code&gt;Container&lt;/code&gt;.                
                <param>
                    hgap the horizontal gap between components
                      and between the components and the borders
                      of the &lt;code&gt;Container&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.FlowLayout#getHgap                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setHgap" type="void" line="315">
                <params>
                    <param name="hgap" type="int"/>
                </params>
            </method>
            <javadoc line="319">
                Gets the vertical gap between components and
                  between the components and the borders of the
                  &lt;code&gt;Container&lt;/code&gt;.                
                <return>
                    the vertical gap between components
                      and between the components and the borders
                      of the &lt;code&gt;Container&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.FlowLayout#setVgap                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getVgap" type="int" line="330"/>
            <javadoc line="334">
                Sets the vertical gap between components and between
                  the components and the borders of the &lt;code&gt;Container&lt;/code&gt;.                
                <param>
                    vgap the vertical gap between components
                      and between the components and the borders
                      of the &lt;code&gt;Container&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.FlowLayout#getVgap                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVgap" type="void" line="344">
                <params>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="348">
                Sets whether or not components should be vertically aligned along their
                  baseline.  Components that do not have a baseline will be centered.
                  The default is false.                
                <param>
                    alignOnBaseline whether or not components should be
                      vertically aligned on their baseline                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAlignOnBaseline" type="void" line="357">
                <params>
                    <param name="alignOnBaseline" type="boolean"/>
                </params>
            </method>
            <javadoc line="361">
                Returns true if components are to be vertically aligned along
                  their baseline.  The default is false.                
                <return>
                    true if components are to be vertically aligned along
                      their baseline                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAlignOnBaseline" type="boolean" line="369"/>
            <javadoc line="373">
                Adds the specified component to the layout.
                  Not used by this class.                
                <param>
                    name the name of the component                    
                </param>
                <param>
                    comp the component to be added                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="379">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="382">
                Removes the specified component from the layout.
                  Not used by this class.                
                <param>
                    comp the component to remove                    
                </param>
                <see>
                    java.awt.Container#removeAll                    
                </see>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="388">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="391">
                Returns the preferred dimensions for this layout given the
                  &lt;i&gt;visible&lt;/i&gt; components in the specified target container.                
                <param>
                    target the container that needs to be laid out                    
                </param>
                <return>
                    the preferred dimensions to lay out the
                      subcomponents of the specified container                    
                </return>
                <see>
                    Container                    
                </see>
                <see>
                    #minimumLayoutSize                    
                </see>
                <see>
                    java.awt.Container#getPreferredSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="402">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="403">
                    <declaration name="dim" type="Dimension" line="404"/>
                    <declaration name="nmembers" type="int" line="405"/>
                    <declaration name="firstVisibleComponent" type="boolean" line="406"/>
                    <declaration name="useBaseline" type="boolean" line="407"/>
                    <declaration name="maxAscent" type="int" line="408"/>
                    <declaration name="maxDescent" type="int" line="409"/>
                    <scope line="411">
                        <declaration name="m" type="Component" line="412"/>
                        <scope line="413">
                            <declaration name="d" type="Dimension" line="414"/>
                            <scope line="416"/>
                            <scope line="418"/>
                            <scope line="422">
                                <declaration name="baseline" type="int" line="423"/>
                                <scope line="424"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="431"/>
                    <declaration name="insets" type="Insets" line="434"/>
                </scope>
            </method>
            <javadoc line="441">
                Returns the minimum dimensions needed to layout the &lt;i&gt;visible&lt;/i&gt;
                  components contained in the specified target container.                
                <param>
                    target the container that needs to be laid out                    
                </param>
                <return>
                    the minimum dimensions to lay out the
                      subcomponents of the specified container                    
                </return>
                <see>
                    #preferredLayoutSize                    
                </see>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="451">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="452">
                    <declaration name="useBaseline" type="boolean" line="453"/>
                    <declaration name="dim" type="Dimension" line="454"/>
                    <declaration name="nmembers" type="int" line="455"/>
                    <declaration name="maxAscent" type="int" line="456"/>
                    <declaration name="maxDescent" type="int" line="457"/>
                    <declaration name="firstVisibleComponent" type="boolean" line="458"/>
                    <scope line="460">
                        <declaration name="m" type="Component" line="461"/>
                        <scope line="462">
                            <declaration name="d" type="Dimension" line="463"/>
                            <scope line="465"/>
                            <scope line="467"/>
                            <scope line="471">
                                <declaration name="baseline" type="int" line="472"/>
                                <scope line="473"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="482"/>
                    <declaration name="insets" type="Insets" line="486"/>
                </scope>
            </method>
            <javadoc line="498">
                Centers the elements in the specified row, if there is any slack.                
                <param>
                    target the component which needs to be moved                    
                </param>
                <param>
                    x the x coordinate                    
                </param>
                <param>
                    y the y coordinate                    
                </param>
                <param>
                    width the width dimensions                    
                </param>
                <param>
                    height the height dimensions                    
                </param>
                <param>
                    rowStart the beginning of the row                    
                </param>
                <param>
                    rowEnd the the ending of the row                    
                </param>
                <param>
                    useBaseline Whether or not to align on baseline.                    
                </param>
                <param>
                    ascent Ascent for the components. This is only valid if
                      useBaseline is true.                    
                </param>
                <param>
                    descent Ascent for the components. This is only valid if
                      useBaseline is true.                    
                </param>
                <return>
                    actual row height                    
                </return>
            </javadoc>
            <method name="moveComponents" type="int" line="517">
                <params>
                    <param name="target" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="rowStart" type="int"/>
                    <param name="rowEnd" type="int"/>
                    <param name="ltr" type="boolean"/>
                    <param name="useBaseline" type="boolean"/>
                    <param name="ascent" type="int[]"/>
                    <param name="descent" type="int[]"/>
                </params>
                <declaration name="maxAscent" type="int" line="534"/>
                <declaration name="nonbaselineHeight" type="int" line="535"/>
                <declaration name="baselineOffset" type="int" line="536"/>
                <scope line="537">
                    <declaration name="maxDescent" type="int" line="538"/>
                    <scope line="539">
                        <declaration name="m" type="Component" line="540"/>
                        <scope line="541">
                            <scope line="542"/>
                            <scope line="546"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="555">
                    <declaration name="m" type="Component" line="556"/>
                    <scope line="557">
                        <declaration name="cy" type="int" line="558"/>
                        <scope line="559"/>
                        <scope line="562"/>
                        <scope line="565"/>
                        <scope line="567"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="576">
                Lays out the container. This method lets each
                  &lt;i&gt;visible&lt;/i&gt; component take
                  its preferred size by reshaping the components in the
                  target container in order to satisfy the alignment of
                  this &lt;code&gt;FlowLayout&lt;/code&gt; object.                
                <param>
                    target the specified component being laid out                    
                </param>
                <see>
                    Container                    
                </see>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="layoutContainer" type="void" line="587">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="588">
                    <declaration name="insets" type="Insets" line="589"/>
                    <declaration name="maxwidth" type="int" line="590"/>
                    <declaration name="nmembers" type="int" line="591"/>
                    <declaration name="x" type="int" line="592"/>
                    <declaration name="rowh" type="int" line="593"/>
                    <declaration name="ltr" type="boolean" line="595"/>
                    <declaration name="useBaseline" type="boolean" line="597"/>
                    <declaration name="ascent" type="int[]" line="598"/>
                    <declaration name="descent" type="int[]" line="599"/>
                    <scope line="601"/>
                    <scope line="606">
                        <declaration name="m" type="Component" line="607"/>
                        <scope line="608">
                            <declaration name="d" type="Dimension" line="609"/>
                            <scope line="612">
                                <declaration name="baseline" type="int" line="613"/>
                                <scope line="614"/>
                                <scope line="618"/>
                            </scope>
                            <scope line="622">
                                <scope line="623"/>
                            </scope>
                            <scope line="628"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="currentSerialVersion" type="int" line="649"/>
            <declaration name="serialVersionOnStream" type="int" line="650"/>
            <javadoc line="650">
                This represent the &lt;code&gt;currentSerialVersion&lt;/code&gt;
                  which is bein used.  It will be one of two values :
                  &lt;code&gt;0&lt;/code&gt; versions before Java 2 platform v1.2..
                  &lt;code&gt;1&lt;/code&gt; versions after  Java 2 platform v1.2..                
                <serial>
                                        
                </serial>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="661">
                Reads this object out of a serialization stream, handling
                  objects written by older versions of the class that didn&apos;t contain all
                  of the fields we use now..                
            </javadoc>
            <method name="readObject" type="void" line="668">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <comment line="673">
                    &quot;newAlign&quot; field wasn&apos;t present, so use the old &quot;align&quot; field.                    
                </comment>
                <scope line="671"/>
            </method>
            <javadoc line="678">
                Returns a string representation of this &lt;code&gt;FlowLayout&lt;/code&gt;
                  object and its values.                
                <return>
                    a string representation of this layout                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="683">
                <declaration name="str" type="String" line="684"/>
            </method>
        </class>
    </source>