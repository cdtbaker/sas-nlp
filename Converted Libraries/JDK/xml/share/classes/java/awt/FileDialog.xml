<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.FileDialogPeer"/>
        <import package="java.io.FilenameFilter"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.File"/>
        <import package="sun.awt.AWTAccessor"/>
        <class name="FileDialog" line="34">
            <extends class="Dialog"/>
            <comment line="64">
                There are two &lt;code&gt;FileDialog&lt;code&gt; modes: &lt;code&gt;LOAD&lt;code&gt; and
                 &lt;code&gt;SAVE&lt;code&gt;.
                 This integer will represent one or the other.
                 If the mode is not specified it will default to &lt;code&gt;LOAD&lt;code&gt;.
                
                 @serial
                 @see getMode()
                 @see setMode()
                 @see java.awt.FileDialog#LOAD
                 @see java.awt.FileDialog#SAVE                
            </comment>
            <comment line="78">
                The string specifying the directory to display
                 in the file dialog.  This variable may be &lt;code&gt;null&lt;code&gt;.
                
                 @serial
                 @see getDirectory()
                 @see setDirectory()                
            </comment>
            <comment line="88">
                The string specifying the initial value of the
                 filename text field in the file dialog.
                 This variable may be &lt;code&gt;null&lt;code&gt;.
                
                 @serial
                 @see getFile()
                 @see setFile()                
            </comment>
            <comment line="118">
                The filter used as the file dialog&apos;s filename filter.
                 The file dialog will only be displaying files whose
                 names are accepted by this filter.
                 This variable may be &lt;code&gt;null&lt;code&gt;.
                
                 @serial
                 @see #getFilenameFilter()
                 @see #setFilenameFilter()
                 @see FileNameFilter                
            </comment>
            <comment line="134">
                JDK 1.1 serialVersionUID                
            </comment>
            <javadoc line="34">
                The &lt;code&gt;FileDialog&lt;/code&gt; class displays a dialog window
                  from which the user can select a file.
                  &lt;p&gt;
                  Since it is a modal dialog, when the application calls
                  its &lt;code&gt;show&lt;/code&gt; method to display the dialog,
                  it blocks the rest of the application until the user has
                  chosen a file.                
                <see>
                    Window#show                    
                </see>
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="LOAD" type="int" line="51"/>
            <javadoc line="51">
                This constant value indicates that the purpose of the file
                  dialog window is to locate a file from which to read.                
            </javadoc>
            <declaration name="SAVE" type="int" line="57"/>
            <javadoc line="57">
                This constant value indicates that the purpose of the file
                  dialog window is to locate a file to which to write.                
            </javadoc>
            <declaration name="mode" type="int" line="75"/>
            <declaration name="dir" type="String" line="85"/>
            <declaration name="file" type="String" line="96"/>
            <declaration name="files" type="File[]" line="98"/>
            <javadoc line="98">
                Contains the File instances for all the files that the user selects.                
                <serial>
                                        
                </serial>
                <see>
                    #getFiles                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="multipleMode" type="boolean" line="107"/>
            <javadoc line="107">
                Represents whether the file dialog allows the multiple file selection.                
                <serial>
                                        
                </serial>
                <see>
                    #setMultipleMode                    
                </see>
                <see>
                    #isMultipleMode                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="filter" type="FilenameFilter" line="128"/>
            <declaration name="base" type="String" line="130"/>
            <declaration name="nameCounter" type="int" line="131"/>
            <declaration name="serialVersionUID" type="long" line="136"/>
            <scope line="139">
                <scope line="142"/>
            </scope>
            <scope line="147">
                <anonymous_class line="149">
                    <method name="setFiles" type="void" line="150">
                        <params>
                            <param name="fileDialog" type="FileDialog"/>
                            <param name="directory" type="String"/>
                            <param name="files" type="String"/>
                        </params>
                    </method>
                    <method name="setFile" type="void" line="153">
                        <params>
                            <param name="fileDialog" type="FileDialog"/>
                            <param name="file" type="String"/>
                        </params>
                    </method>
                    <method name="setDirectory" type="void" line="156">
                        <params>
                            <param name="fileDialog" type="FileDialog"/>
                            <param name="directory" type="String"/>
                        </params>
                    </method>
                    <method name="isMultipleMode" type="boolean" line="159">
                        <params>
                            <param name="fileDialog" type="FileDialog"/>
                        </params>
                        <scope line="160"/>
                    </method>
                </anonymous_class>
            </scope>
            <method name="initIDs" type="void" line="167"/>
            <javadoc line="167">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="173">
                Creates a file dialog for loading a file.  The title of the
                  file dialog is initially empty.  This is a convenience method for
                  &lt;code&gt;FileDialog(parent, &quot;&quot;, LOAD)&lt;/code&gt;.                
                <param>
                    parent the owner of the dialog                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="FileDialog" type="constructor" line="181">
                <params>
                    <param name="parent" type="Frame"/>
                </params>
            </method>
            <javadoc line="185">
                Creates a file dialog window with the specified title for loading
                  a file. The files shown are those in the current directory.
                  This is a convenience method for
                  &lt;code&gt;FileDialog(parent, title, LOAD)&lt;/code&gt;.                
                <param>
                    parent   the owner of the dialog                    
                </param>
                <param>
                    title    the title of the dialog                    
                </param>
            </javadoc>
            <method name="FileDialog" type="constructor" line="194">
                <params>
                    <param name="parent" type="Frame"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="198">
                Creates a file dialog window with the specified title for loading
                  or saving a file.
                  &lt;p&gt;
                  If the value of &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;LOAD&lt;/code&gt;, then the
                  file dialog is finding a file to read, and the files shown are those
                  in the current directory.   If the value of
                  &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;SAVE&lt;/code&gt;, the file dialog is finding
                  a place to write a file.                
                <param>
                    parent   the owner of the dialog                    
                </param>
                <param>
                    title   the title of the dialog                    
                </param>
                <param>
                    mode   the mode of the dialog; either
                      <code>FileDialog.LOAD</code> or <code>FileDialog.SAVE</code>                    
                </param>
                <exception>
                    IllegalArgumentException if an illegal file
                      dialog mode is supplied                    
                </exception>
                <see>
                    java.awt.FileDialog#LOAD                    
                </see>
                <see>
                    java.awt.FileDialog#SAVE                    
                </see>
            </javadoc>
            <method name="FileDialog" type="constructor" line="217">
                <params>
                    <param name="parent" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Creates a file dialog for loading a file.  The title of the
                  file dialog is initially empty.  This is a convenience method for
                  &lt;code&gt;FileDialog(parent, &quot;&quot;, LOAD)&lt;/code&gt;.                
                <param>
                    parent   the owner of the dialog                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>parent</code>'s
                      <code>GraphicsConfiguration</code>
                      is not from a screen device;                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if <code>parent</code>
                      is <code>null</code>; this exception is always thrown when
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="FileDialog" type="constructor" line="239">
                <params>
                    <param name="parent" type="Dialog"/>
                </params>
            </method>
            <javadoc line="243">
                Creates a file dialog window with the specified title for loading
                  a file. The files shown are those in the current directory.
                  This is a convenience method for
                  &lt;code&gt;FileDialog(parent, title, LOAD)&lt;/code&gt;.                
                <param>
                    parent   the owner of the dialog                    
                </param>
                <param>
                    title    the title of the dialog; a <code>null</code> value
                      will be accepted without causing a
                      <code>NullPointerException</code> to be thrown                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the <code>parent</code>'s
                      <code>GraphicsConfiguration</code>
                      is not from a screen device;                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if <code>parent</code>
                      is <code>null</code>; this exception is always thrown when
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="FileDialog" type="constructor" line="263">
                <params>
                    <param name="parent" type="Dialog"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="267">
                Creates a file dialog window with the specified title for loading
                  or saving a file.
                  &lt;p&gt;
                  If the value of &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;LOAD&lt;/code&gt;, then the
                  file dialog is finding a file to read, and the files shown are those
                  in the current directory.   If the value of
                  &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;SAVE&lt;/code&gt;, the file dialog is finding
                  a place to write a file.                
                <param>
                    parent   the owner of the dialog                    
                </param>
                <param>
                    title    the title of the dialog; a <code>null</code> value
                      will be accepted without causing a
                      <code>NullPointerException</code> to be thrown                    
                </param>
                <param>
                    mode     the mode of the dialog; either
                      <code>FileDialog.LOAD</code> or <code>FileDialog.SAVE</code>                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if an illegal
                      file dialog mode is supplied;                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if the <code>parent</code>'s
                      <code>GraphicsConfiguration</code>
                      is not from a screen device;                    
                </exception>
                <exception>
                    java.lang.IllegalArgumentException if <code>parent</code>
                      is <code>null</code>; this exception is always thrown when
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.awt.FileDialog#LOAD                    
                </see>
                <see>
                    java.awt.FileDialog#SAVE                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="FileDialog" type="constructor" line="297">
                <params>
                    <param name="parent" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="303">
                Constructs a name for this component. Called by &lt;code&gt;getName()&lt;/code&gt;
                  when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="307">
                <scope line="308"/>
            </method>
            <javadoc line="313">
                Creates the file dialog&apos;s peer.  The peer allows us to change the look
                  of the file dialog without changing its functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="317">
                <scope line="318">
                    <scope line="319"/>
                </scope>
            </method>
            <javadoc line="328">
                Indicates whether this file dialog box is for loading from a file
                  or for saving to a file.                
                <return>
                    the mode of this file dialog window, either
                      <code>FileDialog.LOAD</code> or
                      <code>FileDialog.SAVE</code>                    
                </return>
                <see>
                    java.awt.FileDialog#LOAD                    
                </see>
                <see>
                    java.awt.FileDialog#SAVE                    
                </see>
                <see>
                    java.awt.FileDialog#setMode                    
                </see>
            </javadoc>
            <method name="getMode" type="int" line="339"/>
            <javadoc line="343">
                Sets the mode of the file dialog.  If &lt;code&gt;mode&lt;/code&gt; is not
                  a legal value, an exception will be thrown and &lt;code&gt;mode&lt;/code&gt;
                  will not be set.                
                <param>
                    mode  the mode for this file dialog, either
                      <code>FileDialog.LOAD</code> or
                      <code>FileDialog.SAVE</code>                    
                </param>
                <see>
                    java.awt.FileDialog#LOAD                    
                </see>
                <see>
                    java.awt.FileDialog#SAVE                    
                </see>
                <see>
                    java.awt.FileDialog#getMode                    
                </see>
                <exception>
                    IllegalArgumentException if an illegal file
                      dialog mode is supplied                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setMode" type="void" line="358">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="369">
                Gets the directory of this file dialog.                
                <return>
                    the (potentially <code>null</code> or invalid)
                      directory of this <code>FileDialog</code>                    
                </return>
                <see>
                    java.awt.FileDialog#setDirectory                    
                </see>
            </javadoc>
            <method name="getDirectory" type="String" line="376"/>
            <javadoc line="380">
                Sets the directory of this file dialog window to be the
                  specified directory. Specifying a &lt;code&gt;null&lt;/code&gt; or an
                  invalid directory implies an implementation-defined default.
                  This default will not be realized, however, until the user
                  has selected a file. Until this point, &lt;code&gt;getDirectory()&lt;/code&gt;
                  will return the value passed into this method.
                  &lt;p&gt;
                  Specifying &quot;&quot; as the directory is exactly equivalent to
                  specifying &lt;code&gt;null&lt;/code&gt; as the directory.                
                <param>
                    dir   the specified directory                    
                </param>
                <see>
                    java.awt.FileDialog#getDirectory                    
                </see>
            </javadoc>
            <method name="setDirectory" type="void" line="394">
                <params>
                    <param name="dir" type="String"/>
                </params>
                <declaration name="peer" type="FileDialogPeer" line="396"/>
                <scope line="397"/>
            </method>
            <javadoc line="402">
                Gets the selected file of this file dialog.  If the user
                  selected &lt;code&gt;CANCEL&lt;/code&gt;, the returned file is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the currently selected file of this file dialog window,
                      or <code>null</code> if none is selected                    
                </return>
                <see>
                    java.awt.FileDialog#setFile                    
                </see>
            </javadoc>
            <method name="getFile" type="String" line="410"/>
            <javadoc line="414">
                Returns files that the user selects.
                  &lt;p&gt;
                  If the user cancels the file dialog,
                  then the method returns an empty array.                
                <return>
                    files that the user selects or an empty array
                      if the user cancels the file dialog.                    
                </return>
                <see>
                    #setFile(String)                    
                </see>
                <see>
                    #getFile                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getFiles" type="File[]" line="426">
                <scope line="427">
                    <scope line="428"/>
                    <scope line="430"/>
                </scope>
            </method>
            <javadoc line="436">
                Stores the names of all the files that the user selects.
                  Note that the method is private and it&apos;s intended to be used
                  by the peers through the AWTAccessor API.                
                <param>
                    directory the current directory                    
                </param>
                <param>
                    files     the array that contains the short names of
                      all the files that the user selects.                    
                </param>
                <see>
                    #getFiles                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setFiles" type="void" line="449">
                <params>
                    <param name="directory" type="String"/>
                    <param name="files" type="String"/>
                </params>
                <scope line="450">
                    <declaration name="filesNumber" type="int" line="451"/>
                    <scope line="453"/>
                </scope>
            </method>
            <javadoc line="459">
                Sets the selected file for this file dialog window to be the
                  specified file. This file becomes the default file if it is set
                  before the file dialog window is first shown.
                  &lt;p&gt;
                  Specifying &quot;&quot; as the file is exactly equivalent to specifying
                  &lt;code&gt;null&lt;/code&gt;
                  as the file.                
                <param>
                    file   the file being set                    
                </param>
                <see>
                    #getFile                    
                </see>
                <see>
                    #getFiles                    
                </see>
            </javadoc>
            <method name="setFile" type="void" line="472">
                <params>
                    <param name="file" type="String"/>
                </params>
                <declaration name="peer" type="FileDialogPeer" line="474"/>
                <scope line="475"/>
            </method>
            <javadoc line="480">
                Enables or disables multiple file selection for the file dialog.                
                <param>
                    enable    if {@code true}, multiple file selection is enabled;{@code false} - disabled.                    
                </param>
                <see>
                    #isMultipleMode                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setMultipleMode" type="void" line="488">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <scope line="489"/>
            </method>
            <javadoc line="494">
                Returns whether the file dialog allows the multiple file selection.                
                <return>
                    {@code true} if the file dialog allows the multiple
                      file selection; {@code false} otherwise.                    
                </return>
                <see>
                    #setMultipleMode                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isMultipleMode" type="boolean" line="502">
                <scope line="503"/>
            </method>
            <javadoc line="508">
                Determines this file dialog&apos;s filename filter. A filename filter
                  allows the user to specify which files appear in the file dialog
                  window.  Filename filters do not function in Sun&apos;s reference
                  implementation for Microsoft Windows.                
                <return>
                    this file dialog's filename filter                    
                </return>
                <see>
                    java.io.FilenameFilter                    
                </see>
                <see>
                    java.awt.FileDialog#setFilenameFilter                    
                </see>
            </javadoc>
            <method name="getFilenameFilter" type="FilenameFilter" line="518"/>
            <javadoc line="522">
                Sets the filename filter for this file dialog window to the
                  specified filter.
                  Filename filters do not function in Sun&apos;s reference
                  implementation for Microsoft Windows.                
                <param>
                    filter   the specified filter                    
                </param>
                <see>
                    java.io.FilenameFilter                    
                </see>
                <see>
                    java.awt.FileDialog#getFilenameFilter                    
                </see>
            </javadoc>
            <method name="setFilenameFilter" type="void" line="532">
                <params>
                    <param name="filter" type="FilenameFilter"/>
                </params>
                <declaration name="peer" type="FileDialogPeer" line="534"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and performs
                  a backwards compatibility check by converting
                  either a &lt;code&gt;dir&lt;/code&gt; or a &lt;code&gt;file&lt;/code&gt;
                  equal to an empty string to &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    s the <code>ObjectInputStream</code> to read                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="550">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="553">
                    1.1 Compatibility: &quot;&quot; is not converted to null in 1.1                    
                </comment>
                <scope line="554"/>
                <scope line="557"/>
            </method>
            <javadoc line="562">
                Returns a string representing the state of this &lt;code&gt;FileDialog&lt;/code&gt;
                  window. This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this file dialog window                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="571">
                <declaration name="str" type="String" line="572"/>
            </method>
            <method name="postsOldMouseEvents" type="boolean" line="578"/>
        </class>
    </source>