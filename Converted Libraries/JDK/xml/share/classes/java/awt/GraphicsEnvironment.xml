<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.Locale"/>
        <import package="sun.font.FontManager"/>
        <import package="sun.font.FontManagerFactory"/>
        <import package="sun.java2d.HeadlessGraphicsEnvironment"/>
        <import package="sun.java2d.SunGraphicsEnvironment"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="GraphicsEnvironment" line="10">
            <javadoc line="10">
                The &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class describes the collection
                  of {@link GraphicsDevice} objects and {@link java.awt.Font} objects
                  available to a Java(tm) application on a particular platform.
                  The resources in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt; might be local
                  or on a remote machine.  &lt;code&gt;GraphicsDevice&lt;/code&gt; objects can be
                  screens, printers or image buffers and are the destination of{@link Graphics2D} drawing methods.  Each &lt;code&gt;GraphicsDevice&lt;/code&gt;
                  has a number of {@link GraphicsConfiguration} objects associated with
                  it.  These objects specify the different configurations in which the
                  &lt;code&gt;GraphicsDevice&lt;/code&gt; can be used.                
                <see>
                    GraphicsDevice                    
                </see>
                <see>
                    GraphicsConfiguration                    
                </see>
            </javadoc>
            <declaration name="localEnv" type="GraphicsEnvironment" line="24"/>
            <declaration name="headless" type="Boolean" line="25"/>
            <javadoc line="25">
                The headless state of the Toolkit and GraphicsEnvironment                
            </javadoc>
            <declaration name="defaultHeadless" type="Boolean" line="29"/>
            <javadoc line="29">
                The headless state assumed by default                
            </javadoc>
            <javadoc line="33">
                This is an abstract class and cannot be instantiated directly.
                  Instances must be obtained from a suitable factory or query method.                
            </javadoc>
            <method name="GraphicsEnvironment" type="constructor" line="37"/>
            <javadoc line="39">
                Returns the local &lt;code&gt;GraphicsEnvironment&lt;/code&gt;.                
                <return>
                    the local <code>GraphicsEnvironment</code>                    
                </return>
            </javadoc>
            <method name="getLocalGraphicsEnvironment" type="GraphicsEnvironment" line="43">
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Creates and returns the GraphicsEnvironment, according to the
                  system property &apos;java.awt.graphicsenv&apos;.                
                <return>
                    the graphics environment                    
                </return>
            </javadoc>
            <method name="createGE" type="GraphicsEnvironment" line="54">
                <declaration name="ge" type="GraphicsEnvironment" line="55"/>
                <declaration name="nm" type="String" line="56"/>
                <scope line="57">
                    <declaration name="geCls" type="Class" line="58"/>
                    <scope line="59"/>
                    <scope line="62">
                        <declaration name="cl" type="ClassLoader" line="63"/>
                    </scope>
                    <scope line="67"/>
                </scope>
                <scope line="71"/>
                <scope line="74"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Tests whether or not a display, keyboard, and mouse can be
                  supported in this environment.  If this method returns true,
                  a HeadlessException is thrown from areas of the Toolkit
                  and GraphicsEnvironment that are dependent on a display,
                  keyboard, or mouse.                
                <return>
                    <code>true</code> if this environment cannot support
                      a display, keyboard, and mouse; <code>false</code>
                      otherwise                    
                </return>
                <see>
                    java.awt.HeadlessException                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isHeadless" type="boolean" line="94"/>
            <javadoc line="97">
                @return warning message if headless state is assumed by default;
                  null otherwise                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getHeadlessMessage" type="String" line="102">
                <scope line="103"/>
            </method>
            <javadoc line="108">
                @return the value of the property &quot;java.awt.headless&quot;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHeadlessProperty" type="boolean" line="112">
                <scope line="113">
                    <anonymous_class line="114">
                        <method name="run" type="Object" line="115">
                            <declaration name="nm" type="String" line="116"/>
                            <scope line="117">
                                <scope line="118"/>
                                <scope line="121">
                                    <declaration name="osName" type="String" line="122"/>
                                </scope>
                            </scope>
                            <scope line="126"/>
                            <scope line="129"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="139">
                Check for headless state and throw HeadlessException if headless                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="checkHeadless" type="void" line="143">
                <scope line="144"/>
            </method>
            <javadoc line="148">
                Returns whether or not a display, keyboard, and mouse can be
                  supported in this graphics environment.  If this returns true,
                  &lt;code&gt;HeadlessException&lt;/code&gt; will be thrown from areas of the
                  graphics environment that are dependent on a display, keyboard, or
                  mouse.                
                <return>
                    <code>true</code> if a display, keyboard, and mouse
                      can be supported in this environment; <code>false</code>
                      otherwise                    
                </return>
                <see>
                    java.awt.HeadlessException                    
                </see>
                <see>
                    #isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isHeadlessInstance" type="boolean" line="161"/>
            <method name="getScreenDevices" type="GraphicsDevice[]" line="164"/>
            <javadoc line="164">
                Returns an array of all of the screen &lt;code&gt;GraphicsDevice&lt;/code&gt;
                  objects.                
                <return>
                    an array containing all the <code>GraphicsDevice</code>
                      objects that represent screen devices                    
                </return>
                <exception>
                    HeadlessException if isHeadless() returns true                    
                </exception>
                <see>
                    #isHeadless()                    
                </see>
            </javadoc>
            <method name="getDefaultScreenDevice" type="GraphicsDevice" line="173"/>
            <javadoc line="173">
                Returns the default screen &lt;code&gt;GraphicsDevice&lt;/code&gt;.                
                <return>
                    the <code>GraphicsDevice</code> that represents the
                      default screen device                    
                </return>
                <exception>
                    HeadlessException if isHeadless() returns true                    
                </exception>
                <see>
                    #isHeadless()                    
                </see>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="181"/>
            <javadoc line="181">
                Returns a &lt;code&gt;Graphics2D&lt;/code&gt; object for rendering into the
                  specified {@link BufferedImage}.                
                <param>
                    img the specified <code>BufferedImage</code>                    
                </param>
                <return>
                    a <code>Graphics2D</code> to be used for rendering into
                      the specified <code>BufferedImage</code>                    
                </return>
                <throws>
                    NullPointerException if <code>img</code> is null                    
                </throws>
            </javadoc>
            <method name="getAllFonts" type="Font[]" line="190"/>
            <javadoc line="190">
                Returns an array containing a one-point size instance of all fonts
                  available in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt;.  Typical usage
                  would be to allow a user to select a particular font.  Then, the
                  application can size the font and set various font attributes by
                  calling the &lt;code&gt;deriveFont&lt;/code&gt; method on the choosen instance.
                  &lt;p&gt;
                  This method provides for the application the most precise control
                  over which &lt;code&gt;Font&lt;/code&gt; instance is used to render text.
                  If a font in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt; has multiple
                  programmable variations, only one
                  instance of that &lt;code&gt;Font&lt;/code&gt; is returned in the array, and
                  other variations must be derived by the application.
                  &lt;p&gt;
                  If a font in this environment has multiple programmable variations,
                  such as Multiple-Master fonts, only one instance of that font is
                  returned in the &lt;code&gt;Font&lt;/code&gt; array.  The other variations
                  must be derived by the application.                
                <return>
                    an array of <code>Font</code> objects                    
                </return>
                <see>
                    #getAvailableFontFamilyNames                    
                </see>
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.Font#deriveFont                    
                </see>
                <see>
                    java.awt.Font#getFontName                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getAvailableFontFamilyNames" type="String[]" line="216"/>
            <javadoc line="216">
                Returns an array containing the names of all font families in this
                  &lt;code&gt;GraphicsEnvironment&lt;/code&gt; localized for the default locale,
                  as returned by &lt;code&gt;Locale.getDefault()&lt;/code&gt;.
                  &lt;p&gt;
                  Typical usage would be for presentation to a user for selection of
                  a particular family name. An application can then specify this name
                  when creating a font, in conjunction with a style, such as bold or
                  italic, giving the font system flexibility in choosing its own best
                  match among multiple fonts in the same font family.                
                <return>
                    an array of <code>String</code> containing font family names
                      localized for the default locale, or a suitable alternative
                      name if no name exists for this locale.                    
                </return>
                <see>
                    #getAllFonts                    
                </see>
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.Font#getFamily                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getAvailableFontFamilyNames" type="String[]" line="235"/>
            <javadoc line="235">
                Returns an array containing the names of all font families in this
                  &lt;code&gt;GraphicsEnvironment&lt;/code&gt; localized for the specified locale.
                  &lt;p&gt;
                  Typical usage would be for presentation to a user for selection of
                  a particular family name. An application can then specify this name
                  when creating a font, in conjunction with a style, such as bold or
                  italic, giving the font system flexibility in choosing its own best
                  match among multiple fonts in the same font family.                
                <param>
                    l a {@link Locale} object that represents a
                      particular geographical, political, or cultural region.
                      Specifying <code>null</code> is equivalent to
                      specifying <code>Locale.getDefault()</code>.                    
                </param>
                <return>
                    an array of <code>String</code> containing font family names
                      localized for the specified <code>Locale</code>, or a
                      suitable alternative name if no name exists for the specified locale.                    
                </return>
                <see>
                    #getAllFonts                    
                </see>
                <see>
                    java.awt.Font                    
                </see>
                <see>
                    java.awt.Font#getFamily                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="257">
                Registers a &lt;i&gt;created&lt;/i&gt; &lt;code&gt;Font&lt;/code&gt;in this
                  &lt;code&gt;GraphicsEnvironment&lt;/code&gt;.
                  A created font is one that was returned from calling{@link Font#createFont}, or derived from a created font by
                  calling {@link Font#deriveFont}.
                  After calling this method for such a font, it is available to
                  be used in constructing new &lt;code&gt;Font&lt;/code&gt;s by name or family name,
                  and is enumerated by {@link #getAvailableFontFamilyNames} and{@link #getAllFonts} within the execution context of this
                  application or applet. This means applets cannot register fonts in
                  a way that they are visible to other applets.
                  &lt;p&gt;
                  Reasons that this method might not register the font and therefore
                  return &lt;code&gt;false&lt;/code&gt; are:
                  &lt;ul&gt;
                  &lt;li&gt;The font is not a &lt;i&gt;created&lt;/i&gt; &lt;code&gt;Font&lt;/code&gt;.
                  &lt;li&gt;The font conflicts with a non-created &lt;code&gt;Font&lt;/code&gt; already
                  in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt;. For example if the name
                  is that of a system font, or a logical font as described in the
                  documentation of the {@link Font} class. It is implementation dependent
                  whether a font may also conflict if it has the same family name
                  as a system font.
                  &lt;p&gt;Notice that an application can supersede the registration
                  of an earlier created font with a new one.
                  &lt;/ul&gt;                
                <return>
                    true if the <code>font</code> is successfully
                      registered in this <code>GraphicsEnvironment</code>.                    
                </return>
                <throws>
                    NullPointerException if <code>font</code> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="registerFont" type="boolean" line="286">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <scope line="287"/>
                <declaration name="fm" type="FontManager" line="290"/>
            </method>
            <javadoc line="293">
                Indicates a preference for locale-specific fonts in the mapping of
                  logical fonts to physical fonts. Calling this method indicates that font
                  rendering should primarily use fonts specific to the primary writing
                  system (the one indicated by the default encoding and the initial
                  default locale). For example, if the primary writing system is
                  Japanese, then characters should be rendered using a Japanese font
                  if possible, and other fonts should only be used for characters for
                  which the Japanese font doesn&apos;t have glyphs.
                  &lt;p&gt;
                  The actual change in font rendering behavior resulting from a call
                  to this method is implementation dependent; it may have no effect at
                  all, or the requested behavior may already match the default behavior.
                  The behavior may differ between font rendering in lightweight
                  and peered components.  Since calling this method requests a
                  different font, clients should expect different metrics, and may need
                  to recalculate window sizes and layout. Therefore this method should
                  be called before user interface initialisation.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="preferLocaleFonts" type="void" line="313">
                <declaration name="fm" type="FontManager" line="314"/>
            </method>
            <javadoc line="317">
                Indicates a preference for proportional over non-proportional (e.g.
                  dual-spaced CJK fonts) fonts in the mapping of logical fonts to
                  physical fonts. If the default mapping contains fonts for which
                  proportional and non-proportional variants exist, then calling
                  this method indicates the mapping should use a proportional variant.
                  &lt;p&gt;
                  The actual change in font rendering behavior resulting from a call to
                  this method is implementation dependent; it may have no effect at all.
                  The behavior may differ between font rendering in lightweight and
                  peered components. Since calling this method requests a
                  different font, clients should expect different metrics, and may need
                  to recalculate window sizes and layout. Therefore this method should
                  be called before user interface initialisation.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="preferProportionalFonts" type="void" line="333">
                <declaration name="fm" type="FontManager" line="334"/>
            </method>
            <javadoc line="337">
                Returns the Point where Windows should be centered.
                  It is recommended that centered Windows be checked to ensure they fit
                  within the available display area using getMaximumWindowBounds().                
                <return>
                    the point where Windows should be centered                    
                </return>
                <exception>
                    HeadlessException if isHeadless() returns true                    
                </exception>
                <see>
                    #getMaximumWindowBounds                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCenterPoint" type="Point" line="346">
                <declaration name="usableBounds" type="Rectangle" line="347"/>
            </method>
            <javadoc line="350">
                Returns the maximum bounds for centered Windows.
                  These bounds account for objects in the native windowing system such as
                  task bars and menu bars.  The returned bounds will reside on a single
                  display with one exception: on multi-screen systems where Windows should
                  be centered across all displays, this method returns the bounds of the
                  entire display area.
                  &lt;p&gt;
                  To get the usable bounds of a single display, use
                  &lt;code&gt;GraphicsConfiguration.getBounds()&lt;/code&gt; and
                  &lt;code&gt;Toolkit.getScreenInsets()&lt;/code&gt;.                
                <return>
                    the maximum bounds for centered Windows                    
                </return>
                <exception>
                    HeadlessException if isHeadless() returns true                    
                </exception>
                <see>
                    #getCenterPoint                    
                </see>
                <see>
                    GraphicsConfiguration#getBounds                    
                </see>
                <see>
                    Toolkit#getScreenInsets                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMaximumWindowBounds" type="Rectangle" line="368"/>
        </class>
    </source>