<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.awt.AWTAutoShutdown"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.util.Vector"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.dnd.SunDragSourceContextPeer"/>
        <import package="sun.awt.EventQueueDelegate"/>
        <class name="EventDispatchThread" line="44">
            <extends class="Thread"/>
            <comment line="81">
                Must be called on EDT only, that&apos;s why no synchronization                
            </comment>
            <javadoc line="44">
                EventDispatchThread is a package-private AWT class which takes
                  events off the EventQueue and dispatches them to the appropriate
                  AWT components.
                  The Thread starts a &quot;permanent&quot; event pump with a call to
                  pumpEvents(Conditional) in its run() method. Event handlers can choose to
                  block this event pump at any time, but should start a new pump (&lt;b&gt;not&lt;/b&gt;
                  a new EventDispatchThread) by again calling pumpEvents(Conditional). This
                  secondary event pump will exit automatically as soon as the Condtional
                  evaluate()s to false and an additional Event is pumped and dispatched.                
                <author>
                    Tom Ball                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Fred Ecks                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="eventLog" type="PlatformLogger" line="65"/>
            <declaration name="theQueue" type="EventQueue" line="67"/>
            <declaration name="doDispatch" type="boolean" line="68"/>
            <declaration name="threadDeathCaught" type="boolean" line="69"/>
            <declaration name="ANY_EVENT" type="int" line="71"/>
            <declaration name="eventFilters" type="Vector&lt;EventFilter&gt;" line="73"/>
            <method name="EventDispatchThread" type="constructor" line="75">
                <params>
                    <param name="group" type="ThreadGroup"/>
                    <param name="name" type="String"/>
                    <param name="queue" type="EventQueue"/>
                </params>
            </method>
            <method name="stopDispatching" type="void" line="83"/>
            <method name="run" type="void" line="87">
                <scope line="88">
                    <scope line="89">
                        <anonymous_class line="90">
                            <method name="evaluate" type="boolean" line="91"/>
                        </anonymous_class>
                    </scope>
                    <scope line="95">
                        <declaration name="eq" type="EventQueue" line="96"/>
                        <scope line="97"/>
                    </scope>
                </scope>
            </method>
            <method name="pumpEvents" type="void" line="104">
                <params>
                    <param name="cond" type="Conditional"/>
                </params>
            </method>
            <method name="pumpEventsForHierarchy" type="void" line="108">
                <params>
                    <param name="cond" type="Conditional"/>
                    <param name="modalComponent" type="Component"/>
                </params>
            </method>
            <method name="pumpEvents" type="void" line="112">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                </params>
            </method>
            <method name="pumpEventsForHierarchy" type="void" line="116">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                    <param name="modalComponent" type="Component"/>
                </params>
            </method>
            <method name="pumpEventsForFilter" type="void" line="120">
                <params>
                    <param name="cond" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                </params>
            </method>
            <method name="pumpEventsForFilter" type="void" line="124">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="127">
                    <scope line="128"/>
                </scope>
            </method>
            <method name="addEventFilter" type="void" line="135">
                <params>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="137">
                    <scope line="138">
                        <scope line="139">
                            <declaration name="newFilter" type="ModalEventFilter" line="140"/>
                            <declaration name="k" type="int" line="141"/>
                            <scope line="142">
                                <declaration name="f" type="EventFilter" line="143"/>
                                <scope line="144">
                                    <declaration name="cf" type="ModalEventFilter" line="145"/>
                                    <scope line="146"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <method name="removeEventFilter" type="void" line="159">
                <params>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="161"/>
            </method>
            <method name="pumpOneEventForFilters" type="boolean" line="166">
                <params>
                    <param name="id" type="int"/>
                </params>
                <comment line="173">
                    EventQueue may change during the dispatching                    
                </comment>
                <comment line="224">
                    AppContext.dispose() interrupts all                    
                </comment>
                <comment line="225">
                    Threads in the AppContext                    
                </comment>
                <declaration name="event" type="AWTEvent" line="167"/>
                <declaration name="eventOK" type="boolean" line="168"/>
                <scope line="169">
                    <declaration name="eq" type="EventQueue" line="170"/>
                    <declaration name="delegate" type="EventQueueDelegate.Delegate" line="171"/>
                    <scope line="172">
                        <scope line="177"/>
                        <scope line="179"/>
                        <scope line="184">
                            <scope line="185">
                                <declaration name="f" type="EventFilter" line="186"/>
                                <declaration name="accept" type="EventFilter.FilterAction" line="187"/>
                                <scope line="188"/>
                                <scope line="191"/>
                            </scope>
                        </scope>
                        <scope line="197"/>
                    </scope>
                    <scope line="203"/>
                    <declaration name="handle" type="Object" line="207"/>
                    <scope line="208"/>
                    <scope line="212"/>
                </scope>
                <scope line="218"/>
                <scope line="223"/>
                <scope line="228"/>
            </method>
            <method name="processException" type="void" line="235">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="236"/>
            </method>
            <method name="getEventQueue" type="EventQueue" line="242"/>
            <method name="setEventQueue" type="void" line="245">
                <params>
                    <param name="eq" type="EventQueue"/>
                </params>
            </method>
            <class name="HierarchyEventFilter" line="249">
                <implements interface="EventFilter"/>
                <declaration name="modalComponent" type="Component" line="250"/>
                <method name="HierarchyEventFilter" type="constructor" line="251">
                    <params>
                        <param name="modalComponent" type="Component"/>
                    </params>
                </method>
                <method name="acceptEvent" type="FilterAction" line="254">
                    <params>
                        <param name="event" type="AWTEvent"/>
                    </params>
                    <comment line="262">
                        filter out MouseEvent and ActionEvent that&apos;s outside
                         the modalComponent hierarchy.
                         KeyEvent is handled by using enqueueKeyEvent
                         in Dialog.show                        
                    </comment>
                    <comment line="269">
                        Modal internal frames are handled separately. If event is
                         for some component from another heavyweight than modalComp,
                         it is accepted. If heavyweight is the same - we still accept
                         event and perform further filtering in LightweightDispatcher                        
                    </comment>
                    <comment line="280">
                        Exclude this object from modality and                        
                    </comment>
                    <comment line="281">
                        continue to pump it&apos;s events.                        
                    </comment>
                    <comment line="285">
                        5.0u3 modal exclusion                        
                    </comment>
                    <comment line="291">
                        Exclude this window and all its children from                        
                    </comment>
                    <comment line="292">
                        modality and continue to pump it&apos;s events.                        
                    </comment>
                    <scope line="255">
                        <declaration name="eventID" type="int" line="256"/>
                        <declaration name="mouseEvent" type="boolean" line="257"/>
                        <declaration name="actionEvent" type="boolean" line="259"/>
                        <declaration name="windowClosingEvent" type="boolean" line="261"/>
                        <scope line="268"/>
                        <scope line="277">
                            <declaration name="o" type="Object" line="278"/>
                            <scope line="279"/>
                            <scope line="283">
                                <declaration name="c" type="Component" line="284"/>
                                <declaration name="modalExcluded" type="boolean" line="286"/>
                                <scope line="287">
                                    <scope line="288">
                                        <scope line="290"/>
                                    </scope>
                                </scope>
                                <scope line="299"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>