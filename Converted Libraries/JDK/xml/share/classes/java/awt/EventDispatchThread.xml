<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.awt.AWTAutoShutdown"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.util.Vector"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <import package="sun.awt.dnd.SunDragSourceContextPeer"/>
        <import package="sun.awt.EventQueueDelegate"/>
        <class name="EventDispatchThread" line="15">
            <extends class="Thread"/>
            <javadoc line="15">
                EventDispatchThread is a package-private AWT class which takes
                  events off the EventQueue and dispatches them to the appropriate
                  AWT components.
                  The Thread starts a &quot;permanent&quot; event pump with a call to
                  pumpEvents(Conditional) in its run() method. Event handlers can choose to
                  block this event pump at any time, but should start a new pump (&lt;b&gt;not&lt;/b&gt;
                  a new EventDispatchThread) by again calling pumpEvents(Conditional). This
                  secondary event pump will exit automatically as soon as the Condtional
                  evaluate()s to false and an additional Event is pumped and dispatched.                
                <author>
                    Tom Ball                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Fred Ecks                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="eventLog" type="PlatformLogger" line="32"/>
            <declaration name="theQueue" type="EventQueue" line="33"/>
            <declaration name="doDispatch" type="boolean" line="34"/>
            <declaration name="threadDeathCaught" type="boolean" line="35"/>
            <declaration name="ANY_EVENT" type="int" line="36"/>
            <declaration name="eventFilters" type="Vector&lt;EventFilter&gt;" line="37"/>
            <method name="EventDispatchThread" type="constructor" line="38">
                <params>
                    <param name="group" type="ThreadGroup"/>
                    <param name="name" type="String"/>
                    <param name="queue" type="EventQueue"/>
                </params>
            </method>
            <method name="stopDispatching" type="void" line="42"/>
            <method name="run" type="void" line="45">
                <scope line="46">
                    <scope line="47">
                        <anonymous_class line="48">
                            <method name="evaluate" type="boolean" line="49"/>
                        </anonymous_class>
                    </scope>
                    <scope line="55">
                        <declaration name="eq" type="EventQueue" line="56"/>
                        <scope line="57"/>
                    </scope>
                </scope>
            </method>
            <method name="pumpEvents" type="void" line="63">
                <params>
                    <param name="cond" type="Conditional"/>
                </params>
            </method>
            <method name="pumpEventsForHierarchy" type="void" line="66">
                <params>
                    <param name="cond" type="Conditional"/>
                    <param name="modalComponent" type="Component"/>
                </params>
            </method>
            <method name="pumpEvents" type="void" line="69">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                </params>
            </method>
            <method name="pumpEventsForHierarchy" type="void" line="72">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                    <param name="modalComponent" type="Component"/>
                </params>
            </method>
            <method name="pumpEventsForFilter" type="void" line="75">
                <params>
                    <param name="cond" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                </params>
            </method>
            <method name="pumpEventsForFilter" type="void" line="78">
                <params>
                    <param name="id" type="int"/>
                    <param name="cond" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="81">
                    <scope line="82"/>
                </scope>
            </method>
            <method name="addEventFilter" type="void" line="88">
                <params>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="90">
                    <scope line="91">
                        <scope line="92">
                            <declaration name="newFilter" type="ModalEventFilter" line="93"/>
                            <declaration name="k" type="int" line="94"/>
                            <scope line="95">
                                <declaration name="f" type="EventFilter" line="96"/>
                                <scope line="97">
                                    <declaration name="cf" type="ModalEventFilter" line="98"/>
                                    <scope line="99"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="106"/>
                    </scope>
                </scope>
            </method>
            <method name="removeEventFilter" type="void" line="112">
                <params>
                    <param name="filter" type="EventFilter"/>
                </params>
                <scope line="114"/>
            </method>
            <method name="pumpOneEventForFilters" type="boolean" line="118">
                <params>
                    <param name="id" type="int"/>
                </params>
                <declaration name="event" type="AWTEvent" line="119"/>
                <declaration name="eventOK" type="boolean" line="120"/>
                <scope line="121">
                    <declaration name="eq" type="EventQueue" line="122"/>
                    <declaration name="delegate" type="EventQueueDelegate.Delegate" line="123"/>
                    <scope line="124">
                        <scope line="127"/>
                        <scope line="130"/>
                        <scope line="134">
                            <scope line="135">
                                <declaration name="f" type="EventFilter" line="136"/>
                                <declaration name="accept" type="EventFilter.FilterAction" line="137"/>
                                <scope line="138"/>
                                <scope line="142"/>
                            </scope>
                        </scope>
                        <scope line="148"/>
                    </scope>
                    <scope line="153"/>
                    <declaration name="handle" type="Object" line="156"/>
                    <scope line="157"/>
                    <scope line="161"/>
                </scope>
                <scope line="166"/>
                <scope line="170"/>
                <scope line="173"/>
            </method>
            <method name="processException" type="void" line="178">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="179"/>
            </method>
            <method name="getEventQueue" type="EventQueue" line="184"/>
            <method name="setEventQueue" type="void" line="187">
                <params>
                    <param name="eq" type="EventQueue"/>
                </params>
            </method>
            <class name="HierarchyEventFilter" line="190">
                <implements interface="EventFilter"/>
                <declaration name="modalComponent" type="Component" line="191"/>
                <method name="HierarchyEventFilter" type="constructor" line="192">
                    <params>
                        <param name="modalComponent" type="Component"/>
                    </params>
                </method>
                <method name="acceptEvent" type="FilterAction" line="195">
                    <params>
                        <param name="event" type="AWTEvent"/>
                    </params>
                    <scope line="196">
                        <declaration name="eventID" type="int" line="197"/>
                        <declaration name="mouseEvent" type="boolean" line="198"/>
                        <declaration name="actionEvent" type="boolean" line="199"/>
                        <declaration name="windowClosingEvent" type="boolean" line="200"/>
                        <scope line="201"/>
                        <scope line="204">
                            <declaration name="o" type="Object" line="205"/>
                            <scope line="206"/>
                            <scope line="209">
                                <declaration name="c" type="Component" line="210"/>
                                <declaration name="modalExcluded" type="boolean" line="211"/>
                                <scope line="212">
                                    <scope line="213">
                                        <scope line="214"/>
                                    </scope>
                                </scope>
                                <scope line="221"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>