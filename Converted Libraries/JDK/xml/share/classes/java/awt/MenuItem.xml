<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.MenuItemPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="MenuItem" line="36">
            <extends class="MenuComponent"/>
            <comment line="146">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="344">
                Delete a matching MenuShortcut associated with this MenuItem.
                 Used when iterating Menus.                
            </comment>
            <comment line="358">
                The main goal of this method is to post an appropriate event
                 to the event queue when menu shortcut is pressed. However,
                 in subclasses this method may do more than just posting
                 an event.                
            </comment>
            <comment line="370">
                Returns true if the item and all its ancestors are
                 enabled, false otherwise                
            </comment>
            <comment line="394">
                Post an ActionEvent to the target (on
                 keydown) and the item is enabled.
                 Returns true if there is an associated shortcut.                
            </comment>
            <comment line="482">
                This is final so it can be called on the Toolkit thread.                
            </comment>
            <comment line="610">
                REMIND: remove when filtering is done at lower level                
            </comment>
            <comment line="669">
                Serialization support.                
            </comment>
            <comment line="743">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="918">
                class AccessibleAWTMenuItem                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="36">
                All items in a menu must belong to the class
                  &lt;code&gt;MenuItem&lt;/code&gt;, or one of its subclasses.
                  &lt;p&gt;
                  The default &lt;code&gt;MenuItem&lt;/code&gt; object embodies
                  a simple labeled menu item.
                  &lt;p&gt;
                  This picture of a menu bar shows five menu items:
                  &lt;IMG SRC=&quot;doc-files/MenuBar-1.gif&quot; alt=&quot;The following text describes this graphic.&quot;
                  ALIGN=CENTER HSPACE=10 VSPACE=7&gt;
                  &lt;br CLEAR=LEFT&gt;
                  The first two items are simple menu items, labeled
                  &lt;code&gt;&quot;Basic&quot;&lt;/code&gt; and &lt;code&gt;&quot;Simple&quot;&lt;/code&gt;.
                  Following these two items is a separator, which is itself
                  a menu item, created with the label &lt;code&gt;&quot;-&quot;&lt;/code&gt;.
                  Next is an instance of &lt;code&gt;CheckboxMenuItem&lt;/code&gt;
                  labeled &lt;code&gt;&quot;Check&quot;&lt;/code&gt;. The final menu item is a
                  submenu labeled &lt;code&gt;&quot;More&amp;nbsp;Examples&quot;&lt;/code&gt;,
                  and this submenu is an instance of &lt;code&gt;Menu&lt;/code&gt;.
                  &lt;p&gt;
                  When a menu item is selected, AWT sends an action event to
                  the menu item. Since the event is an
                  instance of &lt;code&gt;ActionEvent&lt;/code&gt;, the &lt;code&gt;processEvent&lt;/code&gt;
                  method examines the event and passes it along to
                  &lt;code&gt;processActionEvent&lt;/code&gt;. The latter method redirects the
                  event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have
                  registered an interest in action events generated by this
                  menu item.
                  &lt;P&gt;
                  Note that the subclass &lt;code&gt;Menu&lt;/code&gt; overrides this behavior and
                  does not send any event to the frame until one of its subitems is
                  selected.                
                <author>
                    Sami Shaio                    
                </author>
            </javadoc>
            <scope line="73">
                <scope line="76"/>
            </scope>
            <declaration name="enabled" type="boolean" line="81"/>
            <javadoc line="81">
                A value to indicate whether a menu item is enabled
                  or not.  If it is enabled, &lt;code&gt;enabled&lt;/code&gt; will
                  be set to true.  Else &lt;code&gt;enabled&lt;/code&gt; will
                  be set to false.                
                <serial>
                                        
                </serial>
                <see>
                    #isEnabled()                    
                </see>
                <see>
                    #setEnabled(boolean)                    
                </see>
            </javadoc>
            <declaration name="label" type="String" line="93"/>
            <javadoc line="93">
                &lt;code&gt;label&lt;/code&gt; is the label of a menu item.
                  It can be any string.                
                <serial>
                                        
                </serial>
                <see>
                    #getLabel()                    
                </see>
                <see>
                    #setLabel(String)                    
                </see>
            </javadoc>
            <declaration name="actionCommand" type="String" line="103"/>
            <javadoc line="103">
                This field indicates the command tha has been issued
                  by a  particular menu item.
                  By default the &lt;code&gt;actionCommand&lt;/code&gt;
                  is the label of the menu item, unless it has been
                  set using setActionCommand.                
                <serial>
                                        
                </serial>
                <see>
                    #setActionCommand(String)                    
                </see>
                <see>
                    #getActionCommand()                    
                </see>
            </javadoc>
            <declaration name="eventMask" type="long" line="116"/>
            <javadoc line="116">
                The eventMask is ONLY set by subclasses via enableEvents.
                  The mask should NOT be set when listeners are registered
                  so that we can distinguish the difference between when
                  listeners request events and subclasses request them.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="actionListener" type="ActionListener" line="126"/>
            <declaration name="shortcut" type="MenuShortcut" line="128"/>
            <javadoc line="128">
                A sequence of key stokes that ia associated with
                  a menu item.
                  Note :in 1.1.2 you must use setActionCommand()
                  on a menu item in order for its shortcut to
                  work.                
                <serial>
                                        
                </serial>
                <see>
                    #getShortcut()                    
                </see>
                <see>
                    #setShortcut(MenuShortcut)                    
                </see>
                <see>
                    #deleteShortcut()                    
                </see>
            </javadoc>
            <declaration name="base" type="String" line="142"/>
            <declaration name="nameCounter" type="int" line="143"/>
            <declaration name="serialVersionUID" type="long" line="148"/>
            <javadoc line="150">
                Constructs a new MenuItem with an empty label and no keyboard
                  shortcut.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="MenuItem" type="constructor" line="158"/>
            <javadoc line="162">
                Constructs a new MenuItem with the specified label
                  and no keyboard shortcut. Note that use of &quot;-&quot; in
                  a label is reserved to indicate a separator between
                  menu items. By default, all menu items except for
                  separators are enabled.                
                <param>
                    label the label for this menu item.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="MenuItem" type="constructor" line="174">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="178">
                Create a menu item with an associated keyboard shortcut.
                  Note that use of &quot;-&quot; in a label is reserved to indicate
                  a separator between menu items. By default, all menu
                  items except for separators are enabled.                
                <param>
                    label the label for this menu item.                    
                </param>
                <param>
                    s the instance of <code>MenuShortcut</code>
                      associated with this menu item.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="MenuItem" type="constructor" line="191">
                <params>
                    <param name="label" type="String"/>
                    <param name="s" type="MenuShortcut"/>
                </params>
            </method>
            <javadoc line="196">
                Construct a name for this MenuComponent.  Called by getName() when
                  the name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="200">
                <scope line="201"/>
            </method>
            <javadoc line="206">
                Creates the menu item&apos;s peer.  The peer allows us to modify the
                  appearance of the menu item without changing its functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="210">
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Gets the label for this menu item.                
                <return>
                    the label of this menu item, or <code>null</code>
                      if this menu item has no label.                    
                </return>
                <see>
                    java.awt.MenuItem#setLabel                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="getLabel" type="String" line="224"/>
            <javadoc line="228">
                Sets the label for this menu item to the specified label.                
                <param>
                    label   the new label, or <code>null</code> for no label.                    
                </param>
                <see>
                    java.awt.MenuItem#getLabel                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="setLabel" type="void" line="234">
                <params>
                    <param name="label" type="String"/>
                </params>
                <declaration name="peer" type="MenuItemPeer" line="236"/>
                <scope line="237"/>
            </method>
            <javadoc line="242">
                Checks whether this menu item is enabled.                
                <see>
                    java.awt.MenuItem#setEnabled                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="isEnabled" type="boolean" line="247"/>
            <javadoc line="251">
                Sets whether or not this menu item can be chosen.                
                <param>
                    b  if <code>true</code>, enables this menu item;
                      if <code>false</code>, disables it.                    
                </param>
                <see>
                    java.awt.MenuItem#isEnabled                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setEnabled" type="void" line="258">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="262">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="enable" type="void" line="267">
                <declaration name="peer" type="MenuItemPeer" line="269"/>
                <scope line="270"/>
            </method>
            <javadoc line="275">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="enable" type="void" line="280">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="281"/>
                <scope line="283"/>
            </method>
            <javadoc line="288">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.                
            </javadoc>
            <method name="disable" type="void" line="293">
                <declaration name="peer" type="MenuItemPeer" line="295"/>
                <scope line="296"/>
            </method>
            <javadoc line="301">
                Get the &lt;code&gt;MenuShortcut&lt;/code&gt; object associated with this
                  menu item,                
                <return>
                    the menu shortcut associated with this menu item,
                      or <code>null</code> if none has been specified.                    
                </return>
                <see>
                    java.awt.MenuItem#setShortcut                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getShortcut" type="MenuShortcut" line="309"/>
            <javadoc line="313">
                Set the &lt;code&gt;MenuShortcut&lt;/code&gt; object associated with this
                  menu item. If a menu shortcut is already associated with
                  this menu item, it is replaced.                
                <param>
                    s  the menu shortcut to associate
                      with this menu item.                    
                </param>
                <see>
                    java.awt.MenuItem#getShortcut                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setShortcut" type="void" line="322">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
                <declaration name="peer" type="MenuItemPeer" line="324"/>
                <scope line="325"/>
            </method>
            <javadoc line="330">
                Delete any &lt;code&gt;MenuShortcut&lt;/code&gt; object associated
                  with this menu item.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="deleteShortcut" type="void" line="335">
                <declaration name="peer" type="MenuItemPeer" line="337"/>
                <scope line="338"/>
            </method>
            <method name="deleteShortcut" type="void" line="347">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
                <scope line="348">
                    <declaration name="peer" type="MenuItemPeer" line="350"/>
                    <scope line="351"/>
                </scope>
            </method>
            <method name="doMenuEvent" type="void" line="363">
                <params>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <method name="isItemEnabled" type="boolean" line="373">
                <comment line="375">
                    Fix For 6185151: Menu shortcuts of all menuitems within a menu
                     should be disabled when the menu itself is disabled                    
                </comment>
                <scope line="376"/>
                <declaration name="container" type="MenuContainer" line="379"/>
                <scope line="380">
                    <scope line="381"/>
                    <declaration name="menu" type="Menu" line="384"/>
                    <scope line="385"/>
                </scope>
            </method>
            <method name="handleShortcut" type="boolean" line="398">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <comment line="404">
                    Fix For 6185151: Menu shortcuts of all menuitems within a menu
                     should be disabled when the menu itself is disabled                    
                </comment>
                <comment line="407">
                    MenuShortcut match -- issue an event on keydown.                    
                </comment>
                <comment line="411">
                    silently eat key release.                    
                </comment>
                <declaration name="s" type="MenuShortcut" line="399"/>
                <declaration name="sE" type="MenuShortcut" line="401"/>
                <scope line="405">
                    <scope line="407"/>
                    <scope line="409"/>
                </scope>
            </method>
            <method name="getShortcutMenuItem" type="MenuItem" line="417">
                <params>
                    <param name="s" type="MenuShortcut"/>
                </params>
            </method>
            <javadoc line="421">
                Enables event delivery to this menu item for events
                  to be defined by the specified event mask parameter
                  &lt;p&gt;
                  Since event types are automatically enabled when a listener for
                  that type is added to the menu item, this method only needs
                  to be invoked by subclasses of &lt;code&gt;MenuItem&lt;/code&gt; which desire to
                  have the specified event types delivered to &lt;code&gt;processEvent&lt;/code&gt;
                  regardless of whether a listener is registered.                
                <param>
                    eventsToEnable the event mask defining the event types                    
                </param>
                <see>
                    java.awt.MenuItem#processEvent                    
                </see>
                <see>
                    java.awt.MenuItem#disableEvents                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="enableEvents" type="void" line="437">
                <params>
                    <param name="eventsToEnable" type="long"/>
                </params>
            </method>
            <javadoc line="442">
                Disables event delivery to this menu item for events
                  defined by the specified event mask parameter.                
                <param>
                    eventsToDisable the event mask defining the event types                    
                </param>
                <see>
                    java.awt.MenuItem#processEvent                    
                </see>
                <see>
                    java.awt.MenuItem#enableEvents                    
                </see>
                <see>
                    java.awt.Component#disableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="disableEvents" type="void" line="452">
                <params>
                    <param name="eventsToDisable" type="long"/>
                </params>
            </method>
            <javadoc line="456">
                Sets the command name of the action event that is fired
                  by this menu item.
                  &lt;p&gt;
                  By default, the action command is set to the label of
                  the menu item.                
                <param>
                    command   the action command to be set
                      for this menu item.                    
                </param>
                <see>
                    java.awt.MenuItem#getActionCommand                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setActionCommand" type="void" line="467">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="471">
                Gets the command name of the action event that is fired
                  by this menu item.                
                <see>
                    java.awt.MenuItem#setActionCommand                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getActionCommand" type="String" line="477"/>
            <method name="getActionCommandImpl" type="String" line="482"/>
            <javadoc line="486">
                Adds the specified action listener to receive action events
                  from this menu item.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener.                    
                </param>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addActionListener" type="void" line="500">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="501"/>
            </method>
            <javadoc line="508">
                Removes the specified action listener so it no longer receives
                  action events from this menu item.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener.                    
                </param>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeActionListener" type="void" line="522">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="523"/>
            </method>
            <javadoc line="529">
                Returns an array of all the action listeners
                  registered on this menu item.                
                <return>
                    all of this menu item's <code>ActionListener</code>s
                      or an empty array if no action
                      listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="543"/>
            <javadoc line="547">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;MenuItem&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;MenuItem&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;
                  for its action listeners with the following code:
                  &lt;pre&gt;ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this menu item,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getActionListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="580">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="581"/>
                <scope line="582"/>
            </method>
            <javadoc line="588">
                Processes events on this menu item. If the event is an
                  instance of &lt;code&gt;ActionEvent&lt;/code&gt;, it invokes
                  &lt;code&gt;processActionEvent&lt;/code&gt;, another method
                  defined by &lt;code&gt;MenuItem&lt;/code&gt;.
                  &lt;p&gt;
                  Currently, menu items only support action events.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.MenuItem#processActionEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="603">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="604"/>
            </method>
            <method name="eventEnabled" type="boolean" line="610">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="611">
                    <scope line="613"/>
                </scope>
            </method>
            <javadoc line="621">
                Processes action events occurring on this menu item,
                  by dispatching them to any registered
                  &lt;code&gt;ActionListener&lt;/code&gt; objects.
                  This method is not called unless action events are
                  enabled for this component. Action events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ActionListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addActionListener&lt;/code&gt;.
                  &lt;li&gt;Action events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the action event                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    java.awt.MenuItem#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processActionEvent" type="void" line="643">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listener" type="ActionListener" line="644"/>
                <scope line="645"/>
            </method>
            <javadoc line="650">
                Returns a string representing the state of this &lt;code&gt;MenuItem&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this menu item                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="659">
                <declaration name="str" type="String" line="660"/>
                <scope line="661"/>
            </method>
            <declaration name="menuItemSerializedDataVersion" type="int" line="671"/>
            <javadoc line="671">
                Menu item serialized data version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="678">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ActionListeners&lt;/code&gt;
                  as optional data. The non-serializable listeners are
                  detected and no attempt is made to serialize them.                
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <serialData>
                    <code>null</code> terminated sequence of 0
                      or more pairs; the pair consists of a <code>String</code>
                      and an <code>Object</code>; the <code>String</code>
                      indicates the type of object and is one of the following:
                      <code>actionListenerK</code> indicating an
                      <code>ActionListener</code> object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="697">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="704">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if it
                  isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to receive
                  action events fired by the &lt;code&gt;Menu&lt;/code&gt; Item.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the <code>ObjectInputStream</code> to read                    
                </param>
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    #removeActionListener(ActionListener)                    
                </see>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="720">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="722">
                    HeadlessException will be thrown from MenuComponent&apos;s readObject                    
                </comment>
                <comment line="732">
                    skip value for unrecognized key                    
                </comment>
                <declaration name="keyOrNull" type="Object" line="724"/>
                <scope line="725">
                    <declaration name="key" type="String" line="726"/>
                </scope>
            </method>
            <method name="initIDs" type="void" line="736"/>
            <javadoc line="736">
                Initialize JNI field and method IDs                
            </javadoc>
            <javadoc line="746">
                Gets the AccessibleContext associated with this MenuItem.
                  For menu items, the AccessibleContext takes the form of an
                  AccessibleAWTMenuItem.
                  A new AccessibleAWTMenuItem instance is created if necessary.                
                <return>
                    an AccessibleAWTMenuItem that serves as the
                      AccessibleContext of this MenuItem                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="756">
                <scope line="757"/>
            </method>
            <class name="AccessibleAWTMenuItem" line="763">
                <extends class="AccessibleAWTMenuComponent"/>
                <comment line="778">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="763">
                    Inner class of MenuItem used to provide default support for
                      accessibility.  This class is not meant to be used directly by
                      application developers, but is instead meant only to be
                      subclassed by menu component developers.
                      &lt;p&gt;
                      This class implements accessibility support for the
                      &lt;code&gt;MenuItem&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to menu item user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="780"/>
                <javadoc line="782">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                </javadoc>
                <method name="getAccessibleName" type="String" line="788">
                    <scope line="789"/>
                    <scope line="791">
                        <scope line="792"/>
                        <scope line="794"/>
                    </scope>
                </method>
                <javadoc line="800">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="806"/>
                <javadoc line="810">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="818"/>
                <javadoc line="822">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="830"/>
                <javadoc line="834">
                    Returns the number of Actions available in this object.  The
                      default behavior of a menu item is to have one action.                    
                    <return>
                        1, the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="840"/>
                <javadoc line="844">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="849">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="852">
                        [[[PENDING:  WDW -- need to provide a localized string]]]                        
                    </comment>
                    <scope line="850"/>
                    <scope line="853"/>
                </method>
                <javadoc line="858">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the action was performed; otherwise false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="864">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="867">
                        Simulate a button click                        
                    </comment>
                    <scope line="865"/>
                    <scope line="874"/>
                </method>
                <javadoc line="879">
                    Get the value of this object as a Number.                    
                    <return>
                        An Integer of 0 if this isn't selected or an Integer of 1 if
                          this is selected.                        
                    </return>
                    <see>
                        javax.swing.AbstractButton#isSelected()                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="886"/>
                <javadoc line="890">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="895">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                </method>
                <javadoc line="899">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        An Integer of 0.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="904"/>
                <javadoc line="908">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        An Integer of 0.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="913"/>
            </class>
        </class>
    </source>