<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Vector"/>
        <import package="java.awt.peer.SystemTrayPeer"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.HeadlessToolkit"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="SystemTray" line="10">
            <javadoc line="10">
                The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a
                  desktop.  On Microsoft Windows it is referred to as the &quot;Taskbar
                  Status Area&quot;, on Gnome it is referred to as the &quot;Notification
                  Area&quot;, on KDE it is referred to as the &quot;System Tray&quot;.  The system
                  tray is shared by all applications running on the desktop.
                  &lt;p&gt; On some platforms the system tray may not be present or may not
                  be supported, in this case {@link SystemTray#getSystemTray()}throws {@link UnsupportedOperationException}.  To detect whether the
                  system tray is supported, use {@link SystemTray#isSupported}.
                  &lt;p&gt;The &lt;code&gt;SystemTray&lt;/code&gt; may contain one or more {@link TrayIcon TrayIcons}, which are added to the tray using the {@link #add} method, and removed when no longer needed, using the{@link #remove}.  &lt;code&gt;TrayIcon&lt;/code&gt; consists of an
                  image, a popup menu and a set of associated listeners.  Please see
                  the {@link TrayIcon} class for details.
                  &lt;p&gt;Every Java application has a single &lt;code&gt;SystemTray&lt;/code&gt;
                  instance that allows the app to interface with the system tray of
                  the desktop while the app is running.  The &lt;code&gt;SystemTray&lt;/code&gt;
                  instance can be obtained from the {@link #getSystemTray} method.
                  An application may not create its own instance of
                  &lt;code&gt;SystemTray&lt;/code&gt;.
                  &lt;p&gt;The following code snippet demonstrates how to access
                  and customize the system tray:
                  &lt;code&gt;
                  &lt;pre&gt;{@link TrayIcon} trayIcon = null;
                  if (SystemTray.isSupported()) {
                  // get the SystemTray instance
                  SystemTray tray = SystemTray.{@link #getSystemTray};
                  // load an image{@link java.awt.Image} image = {@link java.awt.Toolkit#getImage(String) Toolkit.getDefaultToolkit().getImage}(...);
                  // create a action listener to listen for default action executed on the tray icon{@link java.awt.event.ActionListener} listener = new {@link java.awt.event.ActionListener ActionListener}() {
                  public void {@link java.awt.event.ActionListener#actionPerformed actionPerformed}({@link java.awt.event.ActionEvent} e) {
                  // execute default action of the application
                  // ...
                  }
                  };
                  // create a popup menu{@link java.awt.PopupMenu} popup = new {@link java.awt.PopupMenu#PopupMenu PopupMenu}();
                  // create menu item for the default action
                  MenuItem defaultItem = new MenuItem(...);
                  defaultItem.addActionListener(listener);
                  popup.add(defaultItem);
                  /// ... add other items
                  // construct a TrayIcon
                  trayIcon = new {@link TrayIcon#TrayIcon(java.awt.Image,String,java.awt.PopupMenu) TrayIcon}(image, &quot;Tray Demo&quot;, popup);
                  // set the TrayIcon properties
                  trayIcon.{@link TrayIcon#addActionListener(java.awt.event.ActionListener) addActionListener}(listener);
                  // ...
                  // add the tray image
                  try {
                  tray.{@link SystemTray#add(TrayIcon) add}(trayIcon);
                  } catch (AWTException e) {
                  System.err.println(e);
                  }
                  // ...
                  } else {
                  // disable tray option in your application or
                  // perform other actions
                  ...
                  }
                  // ...
                  // some time later
                  // the application state has changed - update the image
                  if (trayIcon != null) {
                  trayIcon.{@link TrayIcon#setImage(java.awt.Image) setImage}(updatedImage);
                  }
                  // ...
                  &lt;/pre&gt;
                  &lt;/code&gt;                
                <since>
                    1.6                    
                </since>
                <see>
                    TrayIcon                    
                </see>
                <author>
                    Bino George                    
                </author>
                <author>
                    Denis Mikhalkin                    
                </author>
                <author>
                    Sharon Zakhour                    
                </author>
                <author>
                    Anton Tarasov                    
                </author>
            </javadoc>
            <declaration name="systemTray" type="SystemTray" line="82"/>
            <declaration name="currentIconID" type="int" line="83"/>
            <declaration name="peer" type="SystemTrayPeer" line="84"/>
            <declaration name="EMPTY_TRAY_ARRAY" type="TrayIcon[]" line="85"/>
            <javadoc line="86">
                Private &lt;code&gt;SystemTray&lt;/code&gt; constructor.                
            </javadoc>
            <method name="SystemTray" type="constructor" line="89"/>
            <javadoc line="92">
                Gets the &lt;code&gt;SystemTray&lt;/code&gt; instance that represents the
                  desktop&apos;s tray area.  This always returns the same instance per
                  application.  On some platforms the system tray may not be
                  supported.  You may use the {@link #isSupported} method to
                  check if the system tray is supported.
                  &lt;p&gt;If a SecurityManager is installed, the AWTPermission{@code accessSystemTray} must be granted in order to get the{@code SystemTray} instance. Otherwise this method will throw a
                  SecurityException.                
                <return>
                    the &lt;code&gt;SystemTray&lt;/code&gt; instance that represents
                      the desktop&apos;s tray area                    
                </return>
                <throws>
                    UnsupportedOperationException if the system tray isn&apos;t
                      supported by the current platform                    
                </throws>
                <throws>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;                    
                </throws>
                <throws>
                    SecurityException if {@code accessSystemTray} permission
                      is not granted                    
                </throws>
                <see>
                    #add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon                    
                </see>
                <see>
                    #isSupported                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="getSystemTray" type="SystemTray" line="114">
                <scope line="116"/>
                <scope line="120"/>
            </method>
            <javadoc line="125">
                Returns whether the system tray is supported on the current
                  platform.  In addition to displaying the tray icon, minimal
                  system tray support includes either a popup menu (see {@link TrayIcon#setPopupMenu(PopupMenu)}) or an action event (see{@link TrayIcon#addActionListener(ActionListener)}).
                  &lt;p&gt;Developers should not assume that all of the system tray
                  functionality is supported.  To guarantee that the tray icon&apos;s
                  default action is always accessible, add the default action to
                  both the action listener and the popup menu.  See the {@link SystemTray example} for an example of how to do this.
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: When implementing &lt;code&gt;SystemTray&lt;/code&gt; and
                  &lt;code&gt;TrayIcon&lt;/code&gt; it is &lt;em&gt;strongly recommended&lt;/em&gt; that
                  you assign different gestures to the popup menu and an action
                  event.  Overloading a gesture for both purposes is confusing
                  and may prevent the user from accessing one or the other.                
                <see>
                    #getSystemTray                    
                </see>
                <return>
                    &lt;code&gt;false&lt;/code&gt; if no system tray access is supported; this
                      method returns &lt;code&gt;true&lt;/code&gt; if the minimal system tray access is
                      supported but does not guarantee that all system tray
                      functionality is supported for the current platform                    
                </return>
            </javadoc>
            <method name="isSupported" type="boolean" line="144">
                <declaration name="toolkit" type="Toolkit" line="145"/>
                <scope line="146"/>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="157">
                Adds a &lt;code&gt;TrayIcon&lt;/code&gt; to the &lt;code&gt;SystemTray&lt;/code&gt;.
                  The tray icon becomes visible in the system tray once it is
                  added.  The order in which icons are displayed in a tray is not
                  specified - it is platform and implementation-dependent.
                  &lt;p&gt; All icons added by the application are automatically
                  removed from the &lt;code&gt;SystemTray&lt;/code&gt; upon application exit
                  and also when the desktop system tray becomes unavailable.                
                <param>
                    trayIcon the &lt;code&gt;TrayIcon&lt;/code&gt; to be added                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;trayIcon&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if the same instance of
                      a &lt;code&gt;TrayIcon&lt;/code&gt; is added more than once                    
                </throws>
                <throws>
                    AWTException if the desktop system tray is missing                    
                </throws>
                <see>
                    #remove(TrayIcon)                    
                </see>
                <see>
                    #getSystemTray                    
                </see>
                <see>
                    TrayIcon                    
                </see>
                <see>
                    java.awt.Image                    
                </see>
            </javadoc>
            <method name="add" type="void" line="176">
                <params>
                    <param name="trayIcon" type="TrayIcon"/>
                </params>
                <scope line="177"/>
                <declaration name="oldArray" type="TrayIcon[]" line="180"/>
                <declaration name="icons" type="Vector&amp;lt;TrayIcon&amp;gt;" line="181"/>
                <scope line="182">
                    <scope line="185"/>
                    <scope line="189"/>
                </scope>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                Removes the specified &lt;code&gt;TrayIcon&lt;/code&gt; from the
                  &lt;code&gt;SystemTray&lt;/code&gt;.
                  &lt;p&gt; All icons added by the application are automatically
                  removed from the &lt;code&gt;SystemTray&lt;/code&gt; upon application exit
                  and also when the desktop system tray becomes unavailable.
                  &lt;p&gt; If &lt;code&gt;trayIcon&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or was not
                  added to the system tray, no exception is thrown and no action
                  is performed.                
                <param>
                    trayIcon the &lt;code&gt;TrayIcon&lt;/code&gt; to be removed                    
                </param>
                <see>
                    #add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="218">
                <params>
                    <param name="trayIcon" type="TrayIcon"/>
                </params>
                <scope line="219"/>
                <declaration name="oldArray" type="TrayIcon[]" line="222"/>
                <scope line="223">
                    <declaration name="icons" type="Vector&amp;lt;TrayIcon&amp;gt;" line="225"/>
                    <scope line="226"/>
                </scope>
            </method>
            <javadoc line="234">
                Returns an array of all icons added to the tray by this
                  application.  You can&apos;t access the icons added by another
                  application.  Some browsers partition applets in different
                  code bases into separate contexts, and establish walls between
                  these contexts.  In such a scenario, only the tray icons added
                  from this context will be returned.
                  &lt;p&gt; The returned array is a copy of the actual array and may be
                  modified in any way without affecting the system tray.  To
                  remove a &lt;code&gt;TrayIcon&lt;/code&gt; from the
                  &lt;code&gt;SystemTray&lt;/code&gt;, use the {@link #remove(TrayIcon)} method.                
                <return>
                    an array of all tray icons added to this tray, or an
                      empty array if none has been added                    
                </return>
                <see>
                    #add(TrayIcon)                    
                </see>
                <see>
                    TrayIcon                    
                </see>
            </javadoc>
            <method name="getTrayIcons" type="TrayIcon[]" line="250">
                <declaration name="icons" type="Vector&amp;lt;TrayIcon&amp;gt;" line="251"/>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Returns the size, in pixels, of the space that a tray icon will
                  occupy in the system tray.  Developers may use this methods to
                  acquire the preferred size for the image property of a tray icon
                  before it is created.  For convenience, there is a similar
                  method {@link TrayIcon#getSize} in the &lt;code&gt;TrayIcon&lt;/code&gt; class.                
                <return>
                    the default size of a tray icon, in pixels                    
                </return>
                <see>
                    TrayIcon#setImageAutoSize(boolean)                    
                </see>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    TrayIcon#getSize()                    
                </see>
            </javadoc>
            <method name="getTrayIconSize" type="Dimension" line="268"/>
            <javadoc line="271">
                Adds a {@code PropertyChangeListener} to the list of listeners for the
                  specific property. The following properties are currently supported:
                  &lt;p&gt; &lt;/p&gt;
                  &lt;table border=1 summary=&quot;SystemTray properties&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@code trayIcons}&lt;/td&gt;
                  &lt;td&gt;The {@code SystemTray}&apos;s array of {@code TrayIcon} objects.
                  The array is accessed via the {@link #getTrayIcons} method.&lt;br&gt;
                  This property is changed when a tray icon is added to (or removed
                  from) the system tray.&lt;br&gt; For example, this property is changed
                  when the system tray becomes unavailable on the desktop&lt;br&gt;
                  and the tray icons are automatically removed.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;{@code systemTray}&lt;/td&gt;
                  &lt;td&gt;This property contains {@code SystemTray} instance when the system tray
                  is available or &lt;code&gt;null&lt;/code&gt; otherwise.&lt;br&gt; This property is changed
                  when the system tray becomes available or unavailable on the desktop.&lt;br&gt;
                  The property is accessed by the {@link #getSystemTray} method.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt; &lt;/p&gt;
                  The {@code listener} listens to property changes only in this context.
                  &lt;p&gt;
                  If {@code listener} is {@code null}, no exception is thrown
                  and no action is performed.                
                <param>
                    propertyName the specified property                    
                </param>
                <param>
                    listener the property change listener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="307">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="308"/>
            </method>
            <javadoc line="313">
                Removes a {@code PropertyChangeListener} from the listener list
                  for a specific property.
                  &lt;p&gt;
                  The {@code PropertyChangeListener} must be from this context.
                  &lt;p&gt;
                  If {@code propertyName} or {@code listener} is {@code null} or invalid,
                  no exception is thrown and no action is taken.                
                <param>
                    propertyName the specified property                    
                </param>
                <param>
                    listener the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="326">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="327"/>
            </method>
            <javadoc line="332">
                Returns an array of all the listeners that have been associated
                  with the named property.
                  &lt;p&gt;
                  Only the listeners in this context are returned.                
                <param>
                    propertyName the specified property                    
                </param>
                <return>
                    all of the {@code PropertyChangeListener}s associated with
                      the named property; if no such listeners have been added or
                      if {@code propertyName} is {@code null} or invalid, an empty
                      array is returned                    
                </return>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="345">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
            </method>
            <javadoc line="348">
                Support for reporting bound property changes for Object properties.
                  This method can be called when a bound property has changed and it will
                  send the appropriate PropertyChangeEvent to any registered
                  PropertyChangeListeners.                
                <param>
                    propertyName the property whose value has changed                    
                </param>
                <param>
                    oldValue the property&apos;s previous value                    
                </param>
                <param>
                    newValue the property&apos;s new value                    
                </param>
            </javadoc>
            <method name="firePropertyChange" type="void" line="357">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="358"/>
            </method>
            <javadoc line="363">
                Returns the current PropertyChangeSupport instance for the
                  calling thread&apos;s context.                
                <return>
                    this thread&apos;s context&apos;s PropertyChangeSupport                    
                </return>
            </javadoc>
            <method name="getCurrentChangeSupport" type="PropertyChangeSupport" line="368">
                <declaration name="changeSupport" type="PropertyChangeSupport" line="369"/>
                <scope line="370"/>
            </method>
            <method name="addNotify" type="void" line="376">
                <scope line="377">
                    <declaration name="toolkit" type="Toolkit" line="378"/>
                    <scope line="379"/>
                    <scope line="382"/>
                </scope>
            </method>
            <method name="checkSystemTrayAllowed" type="void" line="387">
                <declaration name="security" type="SecurityManager" line="388"/>
                <scope line="389"/>
            </method>
            <method name="initializeSystemTrayIfNeeded" type="void" line="393">
                <scope line="394">
                    <scope line="395"/>
                </scope>
            </method>
        </class>
    </source>