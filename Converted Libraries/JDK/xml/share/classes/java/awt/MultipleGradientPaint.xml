<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Arrays"/>
        <class name="MultipleGradientPaint" line="6">
            <implements interface="Paint"/>
            <javadoc line="6">
                This is the superclass for Paints which use a multiple color
                  gradient to fill in their raster.  It provides storage for variables and
                  enumerated values common to{@code LinearGradientPaint} and {@code RadialGradientPaint}.                
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="CycleMethod" type="enum" line="14"/>
            <javadoc line="14">
                The method to use when painting outside the gradient bounds.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="18"/>
            <declaration name="ColorSpaceType" type="enum" line="30"/>
            <javadoc line="30">
                The color space in which to perform the gradient interpolation.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="34"/>
            <declaration name="transparency" type="int" line="42"/>
            <javadoc line="42">
                The transparency of this paint object.                
            </javadoc>
            <declaration name="fractions" type="float[]" line="46"/>
            <javadoc line="46">
                Gradient keyframe values in the range 0 to 1.                
            </javadoc>
            <declaration name="colors" type="Color[]" line="50"/>
            <javadoc line="50">
                Gradient colors.                
            </javadoc>
            <declaration name="gradientTransform" type="AffineTransform" line="54"/>
            <javadoc line="54">
                Transform to apply to gradient.                
            </javadoc>
            <declaration name="cycleMethod" type="CycleMethod" line="58"/>
            <javadoc line="58">
                The method to use when painting outside the gradient bounds.                
            </javadoc>
            <declaration name="colorSpace" type="ColorSpaceType" line="62"/>
            <javadoc line="62">
                The color space in which to perform the gradient interpolation.                
            </javadoc>
            <declaration name="model" type="ColorModel" line="66"/>
            <javadoc line="66">
                The following fields are used only by MultipleGradientPaintContext
                  to cache certain values that remain constant and do not need to be
                  recalculated for each context created from this paint instance.                
            </javadoc>
            <declaration name="normalizedIntervals" type="float[]" line="72"/>
            <declaration name="isSimpleLookup" type="boolean" line="73"/>
            <declaration name="gradients" type="SoftReference&amp;lt;int[][]&amp;gt;" line="74"/>
            <declaration name="gradient" type="SoftReference&amp;lt;int[]&amp;gt;" line="75"/>
            <declaration name="fastGradientArraySize" type="int" line="76"/>
            <javadoc line="77">
                Package-private constructor.                
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <param>
                    colorSpace which color space to use for interpolation,
                      either {@code SRGB} or {@code LINEAR_RGB}                    
                </param>
                <param>
                    gradientTransform transform to apply to the gradient                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code gradientTransform} is null,
                      or {@code cycleMethod} is null,
                      or {@code colorSpace} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="MultipleGradientPaint" type="constructor" line="97">
                <params>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                    <param name="gradientTransform" type="AffineTransform"/>
                </params>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="104"/>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
                <declaration name="previousFraction" type="float" line="119"/>
                <scope line="120">
                    <scope line="121"/>
                    <scope line="124"/>
                </scope>
                <declaration name="fixFirst" type="boolean" line="129"/>
                <declaration name="fixLast" type="boolean" line="130"/>
                <declaration name="len" type="int" line="131"/>
                <declaration name="off" type="int" line="132"/>
                <scope line="133"/>
                <scope line="138"/>
                <scope line="146"/>
                <scope line="150"/>
                <declaration name="opaque" type="boolean" line="157"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Returns a copy of the array of floats used by this gradient
                  to calculate color distribution.
                  The returned array always has 0 as its first value and 1 as its
                  last value, with increasing values in between.                
                <return>
                    a copy of the array of floats used by this gradient to
                      calculate color distribution                    
                </return>
            </javadoc>
            <method name="getFractions" type="float[]" line="171"/>
            <javadoc line="174">
                Returns a copy of the array of colors used by this gradient.
                  The first color maps to the first value in the fractions array,
                  and the last color maps to the last value in the fractions array.                
                <return>
                    a copy of the array of colors used by this gradient                    
                </return>
            </javadoc>
            <method name="getColors" type="Color[]" line="180"/>
            <javadoc line="183">
                Returns the enumerated type which specifies cycling behavior.                
                <return>
                    the enumerated type which specifies cycling behavior                    
                </return>
            </javadoc>
            <method name="getCycleMethod" type="CycleMethod" line="187"/>
            <javadoc line="190">
                Returns the enumerated type which specifies color space for
                  interpolation.                
                <return>
                    the enumerated type which specifies color space for
                      interpolation                    
                </return>
            </javadoc>
            <method name="getColorSpace" type="ColorSpaceType" line="196"/>
            <javadoc line="199">
                Returns a copy of the transform applied to the gradient.
                  &lt;p&gt;
                  Note that if no transform is applied to the gradient
                  when it is created, the identity transform is used.                
                <return>
                    a copy of the transform applied to the gradient                    
                </return>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="206"/>
            <javadoc line="209">
                Returns the transparency mode for this {@code Paint} object.                
                <return>
                    {@code OPAQUE} if all colors used by this{@code Paint} object are opaque,{@code TRANSLUCENT} if at least one of the
                      colors used by this {@code Paint} object is not opaque.                    
                </return>
                <see>
                    java.awt.Transparency                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="215"/>
        </class>
    </source>