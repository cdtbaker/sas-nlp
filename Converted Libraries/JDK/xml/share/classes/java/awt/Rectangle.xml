<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.beans.Transient"/>
        <class name="Rectangle" line="31">
            <extends class="Rectangle2D"/>
            <comment line="163">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="409">
                Return best integer representation for v, clipped to integer
                 range and floor-ed or ceiling-ed, depending on the boolean.                
            </comment>
            <implements interface="Shape"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="31">
                A &lt;code&gt;Rectangle&lt;/code&gt; specifies an area in a coordinate space that is
                  enclosed by the &lt;code&gt;Rectangle&lt;/code&gt; object&apos;s upper-left point{@code (x,y)}in the coordinate space, its width, and its height.
                  &lt;p&gt;
                  A &lt;code&gt;Rectangle&lt;/code&gt; object&apos;s &lt;code&gt;width&lt;/code&gt; and
                  &lt;code&gt;height&lt;/code&gt; are &lt;code&gt;public&lt;/code&gt; fields. The constructors
                  that create a &lt;code&gt;Rectangle&lt;/code&gt;, and the methods that can modify
                  one, do not prevent setting a negative value for width or height.
                  &lt;p&gt;
                  &lt;a name=&quot;Empty&quot;&gt;
                  A {@code Rectangle} whose width or height is exactly zero has location
                  along those axes with zero dimension, but is otherwise considered empty.
                  The {@link #isEmpty} method will return true for such a {@code Rectangle}.
                  Methods which test if an empty {@code Rectangle} contains or intersects
                  a point or rectangle will always return false if either dimension is zero.
                  Methods which combine such a {@code Rectangle} with a point or rectangle
                  will include the location of the {@code Rectangle} on that axis in the
                  result as if the {@link #add(Point)} method were being called.
                  &lt;/a&gt;
                  &lt;p&gt;
                  &lt;a name=&quot;NonExistant&quot;&gt;
                  A {@code Rectangle} whose width or height is negative has neither
                  location nor dimension along those axes with negative dimensions.
                  Such a {@code Rectangle} is treated as non-existant along those axes.
                  Such a {@code Rectangle} is also empty with respect to containment
                  calculations and methods which test if it contains or intersects a
                  point or rectangle will always return false.
                  Methods which combine such a {@code Rectangle} with a point or rectangle
                  will ignore the {@code Rectangle} entirely in generating the result.
                  If two {@code Rectangle} objects are combined and each has a negative
                  dimension, the result will have at least one negative dimension.
                  &lt;/a&gt;
                  &lt;p&gt;
                  Methods which affect only the location of a {@code Rectangle} will
                  operate on its location regardless of whether or not it has a negative
                  or zero dimension along either axis.
                  &lt;p&gt;
                  Note that a {@code Rectangle} constructed with the default no-argument
                  constructor will have dimensions of {@code 0x0} and therefore be empty.
                  That {@code Rectangle} will still have a location of {@code (0,0)} and
                  will contribute that location to the union and add operations.
                  Code attempting to accumulate the bounds of a set of points should
                  therefore initially construct the {@code Rectangle} with a specifically
                  negative width and height or it should use the first point in the set
                  to construct the {@code Rectangle}.
                  For example:
                  &lt;pre&gt;
                  Rectangle bounds = new Rectangle(0, 0, -1, -1);
                  for (int i = 0; i &lt; points.length; i++) {
                  bounds.add(points[i]);
                  }
                  &lt;/pre&gt;
                  or if we know that the points array contains at least one point:
                  &lt;pre&gt;
                  Rectangle bounds = new Rectangle(points[0]);
                  for (int i = 1; i &lt; points.length; i++) {
                  bounds.add(points[i]);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This class uses 32-bit integers to store its location and dimensions.
                  Frequently operations may produce a result that exceeds the range of
                  a 32-bit integer.
                  The methods will calculate their results in a way that avoids any
                  32-bit overflow for intermediate results and then choose the best
                  representation to store the final results back into the 32-bit fields
                  which hold the location and dimensions.
                  The location of the result will be stored into the {@link #x} and{@link #y} fields by clipping the true result to the nearest 32-bit value.
                  The values stored into the {@link #width} and {@link #height} dimension
                  fields will be chosen as the 32-bit values that encompass the largest
                  part of the true result as possible.
                  Generally this means that the dimension will be clipped independently
                  to the range of 32-bit integers except that if the location had to be
                  moved to store it into its pair of 32-bit fields then the dimensions
                  will be adjusted relative to the &quot;best representation&quot; of the location.
                  If the true result had a negative dimension and was therefore
                  non-existant along one or both axes, the stored dimensions will be
                  negative numbers in those axes.
                  If the true result had a location that could be represented within
                  the range of 32-bit integers, but zero dimension along one or both
                  axes, then the stored dimensions will be zero in those axes.                
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="x" type="int" line="123"/>
            <javadoc line="123">
                The X coordinate of the upper-left corner of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #getLocation()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="y" type="int" line="133"/>
            <javadoc line="133">
                The Y coordinate of the upper-left corner of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #getLocation()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="width" type="int" line="143"/>
            <javadoc line="143">
                The width of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #getSize()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="height" type="int" line="152"/>
            <javadoc line="152">
                The height of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #getSize()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="165"/>
            <method name="initIDs" type="void" line="167"/>
            <javadoc line="167">
                Initialize JNI field and method IDs                
            </javadoc>
            <scope line="172">
                <scope line="175"/>
            </scope>
            <javadoc line="180">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner
                  is at (0,&amp;nbsp;0) in the coordinate space, and whose width and
                  height are both zero.                
            </javadoc>
            <method name="Rectangle" type="constructor" line="185"/>
            <javadoc line="189">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt;, initialized to match
                  the values of the specified &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    r  the &lt;code&gt;Rectangle&lt;/code&gt; from which to copy initial values
                      to a newly constructed &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="Rectangle" type="constructor" line="196">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="200">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is
                  specified as{@code (x,y)} and whose width and height
                  are specified by the arguments of the same name.                
                <param>
                    x the specified X coordinate                    
                </param>
                <param>
                    y the specified Y coordinate                    
                </param>
                <param>
                    width    the width of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height   the height of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="Rectangle" type="constructor" line="211">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="218">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner
                  is at (0,&amp;nbsp;0) in the coordinate space, and whose width and
                  height are specified by the arguments of the same name.                
                <param>
                    width the width of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height the height of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="225">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="229">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is
                  specified by the {@link Point} argument, and
                  whose width and height are specified by the{@link Dimension} argument.                
                <param>
                    p a &lt;code&gt;Point&lt;/code&gt; that is the upper-left corner of
                      the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    d a &lt;code&gt;Dimension&lt;/code&gt;, representing the
                      width and height of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="239">
                <params>
                    <param name="p" type="Point"/>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="243">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is the
                  specified &lt;code&gt;Point&lt;/code&gt;, and whose width and height are both zero.                
                <param>
                    p a &lt;code&gt;Point&lt;/code&gt; that is the top left corner
                      of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="249">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="253">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose top left corner is
                  (0,&amp;nbsp;0) and whose width and height are specified
                  by the &lt;code&gt;Dimension&lt;/code&gt; argument.                
                <param>
                    d a &lt;code&gt;Dimension&lt;/code&gt;, specifying width and height                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="259">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="263">
                Returns the X coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the X coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="268"/>
            <javadoc line="272">
                Returns the Y coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the Y coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="277"/>
            <javadoc line="281">
                Returns the width of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the width of the bounding &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getWidth" type="double" line="286"/>
            <javadoc line="290">
                Returns the height of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the height of the bounding &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getHeight" type="double" line="295"/>
            <javadoc line="299">
                Gets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getBounds&lt;/code&gt; method of{@link Component}.                
                <return>
                    a new &lt;code&gt;Rectangle&lt;/code&gt;, equal to the
                      bounding &lt;code&gt;Rectangle&lt;/code&gt; for this &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
                <see>
                    java.awt.Component#getBounds                    
                </see>
                <see>
                    #setBounds(Rectangle)                    
                </see>
                <see>
                    #setBounds(int,int,int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="313"/>
            <javadoc line="317">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="321"/>
            <javadoc line="325">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this &lt;code&gt;Rectangle&lt;/code&gt;
                  to match the specified &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setBounds&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    r the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <see>
                    #getBounds                    
                </see>
                <see>
                    java.awt.Component#setBounds(java.awt.Rectangle)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="336">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="340">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this
                  &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;,
                  and &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setBounds&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    x the new X coordinate for the upper-left
                      corner of this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    y the new Y coordinate for the upper-left
                      corner of this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    width the new width for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height the new height for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <see>
                    #getBounds                    
                </see>
                <see>
                    java.awt.Component#setBounds(int,int,int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="358">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="362">
                Sets the bounds of this {@code Rectangle} to the integer bounds
                  which encompass the specified {@code x}, {@code y}, {@code width},
                  and {@code height}.
                  If the parameters specify a {@code Rectangle} that exceeds the
                  maximum range of integers, the result will be the best
                  representation of the specified {@code Rectangle} intersected
                  with the maximum integer bounds.                
                <param>
                    x the X coordinate of the upper-left corner of
                      the specified rectangle                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of
                      the specified rectangle                    
                </param>
                <param>
                    width the width of the specified rectangle                    
                </param>
                <param>
                    height the new height of the specified rectangle                    
                </param>
            </javadoc>
            <method name="setRect" type="void" line="377">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <comment line="382">
                    Too far in positive X direction to represent...
                     We cannot even reach the left side of the specified
                     rectangle even with both x &amp; width set to MAX_VALUE.
                     The intersection with the &quot;maximal integer rectangle&quot;
                     is non-existant so we should use a width &lt; 0.
                     REMIND: Should we try to determine a more &quot;meaningful&quot;
                     adjusted value for neww than just &quot;-1&quot;?                    
                </comment>
                <comment line="398">
                    Too far in positive Y direction to represent...                    
                </comment>
                <declaration name="newx" type="int" line="378"/>
                <scope line="380"/>
                <scope line="390"/>
                <scope line="396"/>
                <scope line="400"/>
            </method>
            <method name="clip" type="int" line="410">
                <params>
                    <param name="v" type="double"/>
                    <param name="doceil" type="boolean"/>
                </params>
                <scope line="411"/>
                <scope line="414"/>
            </method>
            <javadoc line="420">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this
                  &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;,
                  and &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    x the new X coordinate for the upper-left
                      corner of this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    y the new Y coordinate for the upper-left
                      corner of this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    width the new width for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height the new height for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;setBounds(int, int, int, int)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="reshape" type="void" line="436">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="443">
                Returns the location of this &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;Point&lt;/code&gt; that is the upper-left corner of
                      this &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
                <see>
                    java.awt.Component#getLocation                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getLocation" type="Point" line="455"/>
            <javadoc line="459">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    p the &lt;code&gt;Point&lt;/code&gt; specifying the new location
                      for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.Component#setLocation(java.awt.Point)                    
                </see>
                <see>
                    #getLocation                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="470">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="474">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    x the X coordinate of the new location                    
                </param>
                <param>
                    y the Y coordinate of the new location                    
                </param>
                <see>
                    #getLocation                    
                </see>
                <see>
                    java.awt.Component#setLocation(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="485">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="489">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;                
                <param>
                    x the X coordinate of the new location                    
                </param>
                <param>
                    y the Y coordinate of the new location                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;setLocation(int, int)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="move" type="void" line="498">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="503">
                Translates this &lt;code&gt;Rectangle&lt;/code&gt; the indicated distance,
                  to the right along the X coordinate axis, and
                  downward along the Y coordinate axis.                
                <param>
                    dx the distance to move this &lt;code&gt;Rectangle&lt;/code&gt;
                      along the X axis                    
                </param>
                <param>
                    dy the distance to move this &lt;code&gt;Rectangle&lt;/code&gt;
                      along the Y axis                    
                </param>
                <see>
                    java.awt.Rectangle#setLocation(int,int)                    
                </see>
                <see>
                    java.awt.Rectangle#setLocation(java.awt.Point)                    
                </see>
            </javadoc>
            <method name="translate" type="void" line="514">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <comment line="519">
                    moving leftward                    
                </comment>
                <comment line="521">
                    negative overflow
                     Only adjust width if it was valid (&gt;= 0).                    
                </comment>
                <comment line="524">
                    The right edge is now conceptually at
                     newv+width, but we may move newv to prevent
                     overflow.  But we want the right edge to
                     remain at its new location in spite of the
                     clipping.  Think of the following adjustment
                     conceptually the same as:
                     width += newv; newv = MIN_VALUE; width -= newv;                    
                </comment>
                <comment line="532">
                    width may go negative if the right edge went past
                     MIN_VALUE, but it cannot overflow since it cannot
                     have moved more than MIN_VALUE and any non-negative
                     number + MIN_VALUE does not overflow.                    
                </comment>
                <comment line="540">
                    moving rightward (or staying still)                    
                </comment>
                <comment line="542">
                    positive overflow                    
                </comment>
                <comment line="544">
                    Conceptually the same as:
                     width += newv; newv = MAX_VALUE; width -= newv;                    
                </comment>
                <comment line="547">
                    With large widths and large displacements
                     we may overflow so we need to check it.                    
                </comment>
                <comment line="559">
                    moving upward                    
                </comment>
                <comment line="561">
                    negative overflow                    
                </comment>
                <comment line="564">
                    See above comment about no overflow in this case                    
                </comment>
                <comment line="569">
                    moving downward (or staying still)                    
                </comment>
                <comment line="571">
                    positive overflow                    
                </comment>
                <declaration name="oldv" type="int" line="515"/>
                <declaration name="newv" type="int" line="516"/>
                <scope line="517">
                    <scope line="519">
                        <scope line="522"/>
                    </scope>
                </scope>
                <scope line="538">
                    <scope line="540">
                        <scope line="542"/>
                    </scope>
                </scope>
                <scope line="557">
                    <scope line="559">
                        <scope line="561"/>
                    </scope>
                </scope>
                <scope line="567">
                    <scope line="569">
                        <scope line="571"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="581">
                Gets the size of this &lt;code&gt;Rectangle&lt;/code&gt;, represented by
                  the returned &lt;code&gt;Dimension&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt;, representing the size of
                      this &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
                <see>
                    java.awt.Component#getSize                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getSize" type="Dimension" line="594"/>
            <javadoc line="598">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to match the
                  specified &lt;code&gt;Dimension&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    d the new size for the &lt;code&gt;Dimension&lt;/code&gt; object                    
                </param>
                <see>
                    java.awt.Component#setSize(java.awt.Dimension)                    
                </see>
                <see>
                    #getSize                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="609">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="613">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  width and height.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    width the new width for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height the new height for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.Component#setSize(int,int)                    
                </see>
                <see>
                    #getSize                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="625">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="629">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  width and height.
                  &lt;p&gt;                
                <param>
                    width the new width for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    height the new height for this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;setSize(int, int)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="resize" type="void" line="639">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="644">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  specified &lt;code&gt;Point&lt;/code&gt;.                
                <param>
                    p the &lt;code&gt;Point&lt;/code&gt; to test                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Point&lt;/code&gt;
                      is inside this &lt;code&gt;Rectangle&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="653">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="657">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  point at the specified location {@code (x,y)}.                
                <param>
                    x the specified X coordinate                    
                </param>
                <param>
                    y the specified Y coordinate                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the point{@code (x,y)} is inside this
                      &lt;code&gt;Rectangle&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="669">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="673">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; entirely contains
                  the specified &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    r   the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Rectangle&lt;/code&gt;
                      is contained entirely inside this &lt;code&gt;Rectangle&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="683">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="687">
                Checks whether this &lt;code&gt;Rectangle&lt;/code&gt; entirely contains
                  the &lt;code&gt;Rectangle&lt;/code&gt;
                  at the specified location {@code (X,Y)} with the
                  specified dimensions {@code (W,H)}.                
                <param>
                    X the specified X coordinate                    
                </param>
                <param>
                    Y the specified Y coordinate                    
                </param>
                <param>
                    W   the width of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <param>
                    H   the height of the &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Rectangle&lt;/code&gt; specified by{@code (X, Y, W, H)}is entirely enclosed inside this &lt;code&gt;Rectangle&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="702">
                <params>
                    <param name="X" type="int"/>
                    <param name="Y" type="int"/>
                    <param name="W" type="int"/>
                    <param name="H" type="int"/>
                </params>
                <comment line="707">
                    At least one of the dimensions is negative...                    
                </comment>
                <comment line="710">
                    Note: if any dimension is zero, tests below must return false...                    
                </comment>
                <comment line="719">
                    X+W overflowed or W was zero, return false if...
                     either original w or W was zero or
                     x+w did not overflow or
                     the overflowed x+w is smaller than the overflowed X+W                    
                </comment>
                <comment line="725">
                    X+W did not overflow and W was not zero, return false if...
                     original w was zero or
                     x+w did not overflow and x+w is smaller than X+W                    
                </comment>
                <declaration name="w" type="int" line="703"/>
                <declaration name="h" type="int" line="704"/>
                <scope line="705"/>
                <declaration name="x" type="int" line="710"/>
                <declaration name="y" type="int" line="711"/>
                <scope line="712"/>
                <scope line="717"/>
                <scope line="723"/>
                <scope line="731"/>
                <scope line="733"/>
            </method>
            <javadoc line="739">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  point at the specified location {@code (X,Y)}.                
                <param>
                    X the specified X coordinate                    
                </param>
                <param>
                    Y the specified Y coordinate                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the point{@code (X,Y)} is inside this
                      &lt;code&gt;Rectangle&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by &lt;code&gt;contains(int, int)&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="inside" type="boolean" line="753">
                <params>
                    <param name="X" type="int"/>
                    <param name="Y" type="int"/>
                </params>
                <comment line="758">
                    At least one of the dimensions is negative...                    
                </comment>
                <comment line="761">
                    Note: if either dimension is zero, tests below must return false...                    
                </comment>
                <comment line="769">
                    overflow || intersect                    
                </comment>
                <declaration name="w" type="int" line="754"/>
                <declaration name="h" type="int" line="755"/>
                <scope line="756"/>
                <declaration name="x" type="int" line="761"/>
                <declaration name="y" type="int" line="762"/>
                <scope line="763"/>
            </method>
            <javadoc line="773">
                Determines whether or not this &lt;code&gt;Rectangle&lt;/code&gt; and the specified
                  &lt;code&gt;Rectangle&lt;/code&gt; intersect. Two rectangles intersect if
                  their intersection is nonempty.                
                <param>
                    r the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Rectangle&lt;/code&gt;
                      and this &lt;code&gt;Rectangle&lt;/code&gt; intersect;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="783">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <comment line="800">
                    overflow || intersect                    
                </comment>
                <declaration name="tw" type="int" line="784"/>
                <declaration name="th" type="int" line="785"/>
                <declaration name="rw" type="int" line="786"/>
                <declaration name="rh" type="int" line="787"/>
                <scope line="788"/>
                <declaration name="tx" type="int" line="791"/>
                <declaration name="ty" type="int" line="792"/>
                <declaration name="rx" type="int" line="793"/>
                <declaration name="ry" type="int" line="794"/>
            </method>
            <javadoc line="806">
                Computes the intersection of this &lt;code&gt;Rectangle&lt;/code&gt; with the
                  specified &lt;code&gt;Rectangle&lt;/code&gt;. Returns a new &lt;code&gt;Rectangle&lt;/code&gt;
                  that represents the intersection of the two rectangles.
                  If the two rectangles do not intersect, the result will be
                  an empty rectangle.                
                <param>
                    r   the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    the largest &lt;code&gt;Rectangle&lt;/code&gt; contained in both the
                      specified &lt;code&gt;Rectangle&lt;/code&gt; and in
                      this &lt;code&gt;Rectangle&lt;/code&gt;; or if the rectangles
                      do not intersect, an empty rectangle.                    
                </return>
            </javadoc>
            <method name="intersection" type="Rectangle" line="819">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <comment line="835">
                    tx2,ty2 will never overflow (they will never be
                     larger than the smallest of the two source w,h)
                     they might underflow, though...                    
                </comment>
                <declaration name="tx1" type="int" line="820"/>
                <declaration name="ty1" type="int" line="821"/>
                <declaration name="rx1" type="int" line="822"/>
                <declaration name="ry1" type="int" line="823"/>
                <declaration name="tx2" type="long" line="824"/>
                <declaration name="ty2" type="long" line="825"/>
                <declaration name="rx2" type="long" line="826"/>
                <declaration name="ry2" type="long" line="827"/>
            </method>
            <javadoc line="842">
                Computes the union of this &lt;code&gt;Rectangle&lt;/code&gt; with the
                  specified &lt;code&gt;Rectangle&lt;/code&gt;. Returns a new
                  &lt;code&gt;Rectangle&lt;/code&gt; that
                  represents the union of the two rectangles.
                  &lt;p&gt;
                  If either {@code Rectangle} has any dimension less than zero
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt; rectangles
                  apply.
                  If only one has a dimension less than zero, then the result
                  will be a copy of the other {@code Rectangle}.
                  If both have dimension less than zero, then the result will
                  have at least one dimension less than zero.
                  &lt;p&gt;
                  If the resulting {@code Rectangle} would have a dimension
                  too large to be expressed as an {@code int}, the result
                  will have a dimension of {@code Integer.MAX_VALUE} along
                  that dimension.                
                <param>
                    r the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    the smallest &lt;code&gt;Rectangle&lt;/code&gt; containing both
                      the specified &lt;code&gt;Rectangle&lt;/code&gt; and this
                      &lt;code&gt;Rectangle&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="union" type="Rectangle" line="865">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <comment line="870">
                    This rectangle has negative dimensions...
                     If r has non-negative dimensions then it is the answer.
                     If r is non-existant (has a negative dimension), then both
                     are non-existant and we can return any non-existant rectangle
                     as an answer.  Thus, returning r meets that criterion.
                     Either way, r is our answer.                    
                </comment>
                <comment line="897">
                    tx2,ty2 will never underflow since both original rectangles
                     were already proven to be non-empty
                     they might overflow, though...                    
                </comment>
                <declaration name="tx2" type="long" line="866"/>
                <declaration name="ty2" type="long" line="867"/>
                <scope line="868"/>
                <declaration name="rx2" type="long" line="877"/>
                <declaration name="ry2" type="long" line="878"/>
                <scope line="879"/>
                <declaration name="tx1" type="int" line="882"/>
                <declaration name="ty1" type="int" line="883"/>
                <declaration name="rx1" type="int" line="886"/>
                <declaration name="ry1" type="int" line="887"/>
            </method>
            <javadoc line="904">
                Adds a point, specified by the integer arguments {@code newx,newy}to the bounds of this {@code Rectangle}.
                  &lt;p&gt;
                  If this {@code Rectangle} has any dimension less than zero,
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt;
                  rectangles apply.
                  In that case, the new bounds of this {@code Rectangle} will
                  have a location equal to the specified coordinates and
                  width and height equal to zero.
                  &lt;p&gt;
                  After adding a point, a call to &lt;code&gt;contains&lt;/code&gt; with the
                  added point as an argument does not necessarily return
                  &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;contains&lt;/code&gt; method does not
                  return &lt;code&gt;true&lt;/code&gt; for points on the right or bottom
                  edges of a &lt;code&gt;Rectangle&lt;/code&gt;. Therefore, if the added point
                  falls on the right or bottom edge of the enlarged
                  &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt; for that point.
                  If the specified point must be contained within the new{@code Rectangle}, a 1x1 rectangle should be added instead:
                  &lt;pre&gt;
                  r.add(newx, newy, 1, 1);
                  &lt;/pre&gt;                
                <param>
                    newx the X coordinate of the new point                    
                </param>
                <param>
                    newy the Y coordinate of the new point                    
                </param>
            </javadoc>
            <method name="add" type="void" line="931">
                <params>
                    <param name="newx" type="int"/>
                    <param name="newy" type="int"/>
                </params>
                <scope line="932"/>
                <declaration name="x1" type="int" line="938"/>
                <declaration name="y1" type="int" line="939"/>
                <declaration name="x2" type="long" line="940"/>
                <declaration name="y2" type="long" line="941"/>
            </method>
            <javadoc line="955">
                Adds the specified {@code Point} to the bounds of this{@code Rectangle}.
                  &lt;p&gt;
                  If this {@code Rectangle} has any dimension less than zero,
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt;
                  rectangles apply.
                  In that case, the new bounds of this {@code Rectangle} will
                  have a location equal to the coordinates of the specified{@code Point} and width and height equal to zero.
                  &lt;p&gt;
                  After adding a &lt;code&gt;Point&lt;/code&gt;, a call to &lt;code&gt;contains&lt;/code&gt;
                  with the added &lt;code&gt;Point&lt;/code&gt; as an argument does not
                  necessarily return &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;contains&lt;/code&gt;
                  method does not return &lt;code&gt;true&lt;/code&gt; for points on the right
                  or bottom edges of a &lt;code&gt;Rectangle&lt;/code&gt;. Therefore if the added
                  &lt;code&gt;Point&lt;/code&gt; falls on the right or bottom edge of the
                  enlarged &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt; for that &lt;code&gt;Point&lt;/code&gt;.
                  If the specified point must be contained within the new{@code Rectangle}, a 1x1 rectangle should be added instead:
                  &lt;pre&gt;
                  r.add(pt.x, pt.y, 1, 1);
                  &lt;/pre&gt;                
                <param>
                    pt the new &lt;code&gt;Point&lt;/code&gt; to add to this
                      &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="add" type="void" line="982">
                <params>
                    <param name="pt" type="Point"/>
                </params>
            </method>
            <javadoc line="986">
                Adds a &lt;code&gt;Rectangle&lt;/code&gt; to this &lt;code&gt;Rectangle&lt;/code&gt;.
                  The resulting &lt;code&gt;Rectangle&lt;/code&gt; is the union of the two
                  rectangles.
                  &lt;p&gt;
                  If either {@code Rectangle} has any dimension less than 0, the
                  result will have the dimensions of the other {@code Rectangle}.
                  If both {@code Rectangle}s have at least one dimension less
                  than 0, the result will have at least one dimension less than 0.
                  &lt;p&gt;
                  If either {@code Rectangle} has one or both dimensions equal
                  to 0, the result along those axes with 0 dimensions will be
                  equivalent to the results obtained by adding the corresponding
                  origin coordinate to the result rectangle along that axis,
                  similar to the operation of the {@link #add(Point)} method,
                  but contribute no further dimension beyond that.
                  &lt;p&gt;
                  If the resulting {@code Rectangle} would have a dimension
                  too large to be expressed as an {@code int}, the result
                  will have a dimension of {@code Integer.MAX_VALUE} along
                  that dimension.                
                <param>
                    r the specified &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="add" type="void" line="1009">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <comment line="1035">
                    tx2,ty2 will never underflow since both original
                     rectangles were non-empty
                     they might overflow, though...                    
                </comment>
                <declaration name="tx2" type="long" line="1010"/>
                <declaration name="ty2" type="long" line="1011"/>
                <scope line="1012"/>
                <declaration name="rx2" type="long" line="1015"/>
                <declaration name="ry2" type="long" line="1016"/>
                <scope line="1017"/>
                <declaration name="tx1" type="int" line="1020"/>
                <declaration name="ty1" type="int" line="1021"/>
                <declaration name="rx1" type="int" line="1024"/>
                <declaration name="ry1" type="int" line="1025"/>
            </method>
            <javadoc line="1042">
                Resizes the &lt;code&gt;Rectangle&lt;/code&gt; both horizontally and vertically.
                  &lt;p&gt;
                  This method modifies the &lt;code&gt;Rectangle&lt;/code&gt; so that it is
                  &lt;code&gt;h&lt;/code&gt; units larger on both the left and right side,
                  and &lt;code&gt;v&lt;/code&gt; units larger at both the top and bottom.
                  &lt;p&gt;
                  The new &lt;code&gt;Rectangle&lt;/code&gt; has {@code (x - h, y - v)}as its upper-left corner,
                  width of {@code (width + 2h)},
                  and a height of {@code (height + 2v)}.
                  &lt;p&gt;
                  If negative values are supplied for &lt;code&gt;h&lt;/code&gt; and
                  &lt;code&gt;v&lt;/code&gt;, the size of the &lt;code&gt;Rectangle&lt;/code&gt;
                  decreases accordingly.
                  The {@code grow} method will check for integer overflow
                  and underflow, but does not check whether the resulting
                  values of {@code width} and {@code height} grow
                  from negative to non-negative or shrink from non-negative
                  to negative.                
                <param>
                    h the horizontal expansion                    
                </param>
                <param>
                    v the vertical expansion                    
                </param>
            </javadoc>
            <method name="grow" type="void" line="1065">
                <params>
                    <param name="h" type="int"/>
                    <param name="v" type="int"/>
                </params>
                <comment line="1080">
                    Non-existant in X direction
                     Final width must remain negative so subtract x0 before
                     it is clipped so that we avoid the risk that the clipping
                     of x0 will reverse the ordering of x0 and x1.                    
                </comment>
                <comment line="1088">
                    (x1 &gt;= x0)                    
                </comment>
                <comment line="1089">
                    Clip x0 before we subtract it from x1 in case the clipping
                     affects the representable area of the rectangle.                    
                </comment>
                <comment line="1094">
                    The only way x1 can be negative now is if we clipped
                     x0 against MIN and x1 is less than MIN - in which case
                     we want to leave the width negative since the result
                     did not intersect the representable area.                    
                </comment>
                <comment line="1103">
                    Non-existant in Y direction                    
                </comment>
                <comment line="1108">
                    (y1 &gt;= y0)                    
                </comment>
                <declaration name="x0" type="long" line="1066"/>
                <declaration name="y0" type="long" line="1067"/>
                <declaration name="x1" type="long" line="1068"/>
                <declaration name="y1" type="long" line="1069"/>
                <scope line="1078"/>
                <scope line="1087"/>
                <scope line="1101"/>
                <scope line="1107"/>
            </method>
            <javadoc line="1118">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isEmpty" type="boolean" line="1122"/>
            <javadoc line="1126">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="outcode" type="int" line="1130">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="1132">
                    Note on casts to double below.  If the arithmetic of
                     x+w or y+h is done in int, then we may get integer
                     overflow. By converting to double before the addition
                     we force the addition to be carried out in double to
                     avoid overflow in the comparison.
                    
                     See bug 4320890 for problems that this can cause.                    
                </comment>
                <declaration name="out" type="int" line="1140"/>
                <scope line="1141"/>
                <scope line="1143"/>
                <scope line="1145"/>
                <scope line="1148"/>
                <scope line="1150"/>
                <scope line="1152"/>
            </method>
            <javadoc line="1158">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createIntersection" type="Rectangle2D" line="1162">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <scope line="1163"/>
                <declaration name="dest" type="Rectangle2D" line="1166"/>
            </method>
            <javadoc line="1171">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createUnion" type="Rectangle2D" line="1175">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <scope line="1176"/>
                <declaration name="dest" type="Rectangle2D" line="1179"/>
            </method>
            <javadoc line="1184">
                Checks whether two rectangles are equal.
                  &lt;p&gt;
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                  &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Rectangle&lt;/code&gt; object that has the
                  same upper-left corner, width, and height as
                  this &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; to compare with
                      this &lt;code&gt;Rectangle&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are equal;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1196">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="1197">
                    <declaration name="r" type="Rectangle" line="1198"/>
                </scope>
            </method>
            <javadoc line="1207">
                Returns a &lt;code&gt;String&lt;/code&gt; representing this
                  &lt;code&gt;Rectangle&lt;/code&gt; and its values.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing this
                      &lt;code&gt;Rectangle&lt;/code&gt; object&apos;s coordinate and size values.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1213"/>
        </class>
    </source>