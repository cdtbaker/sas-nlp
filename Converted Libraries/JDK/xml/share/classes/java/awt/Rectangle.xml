<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.beans.Transient"/>
        <class name="Rectangle" line="4">
            <extends class="Rectangle2D"/>
            <implements interface="Shape"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                A &lt;code&gt;Rectangle&lt;/code&gt; specifies an area in a coordinate space that is
                  enclosed by the &lt;code&gt;Rectangle&lt;/code&gt; object&apos;s upper-left point{@code (x,y)}in the coordinate space, its width, and its height.
                  &lt;p&gt;
                  A &lt;code&gt;Rectangle&lt;/code&gt; object&apos;s &lt;code&gt;width&lt;/code&gt; and
                  &lt;code&gt;height&lt;/code&gt; are &lt;code&gt;public&lt;/code&gt; fields. The constructors
                  that create a &lt;code&gt;Rectangle&lt;/code&gt;, and the methods that can modify
                  one, do not prevent setting a negative value for width or height.
                  &lt;p&gt;
                  &lt;a name=&quot;Empty&quot;&gt;
                  A {@code Rectangle} whose width or height is exactly zero has location
                  along those axes with zero dimension, but is otherwise considered empty.
                  The {@link #isEmpty} method will return true for such a {@code Rectangle}.
                  Methods which test if an empty {@code Rectangle} contains or intersects
                  a point or rectangle will always return false if either dimension is zero.
                  Methods which combine such a {@code Rectangle} with a point or rectangle
                  will include the location of the {@code Rectangle} on that axis in the
                  result as if the {@link #add(Point)} method were being called.
                  &lt;/a&gt;
                  &lt;p&gt;
                  &lt;a name=&quot;NonExistant&quot;&gt;
                  A {@code Rectangle} whose width or height is negative has neither
                  location nor dimension along those axes with negative dimensions.
                  Such a {@code Rectangle} is treated as non-existant along those axes.
                  Such a {@code Rectangle} is also empty with respect to containment
                  calculations and methods which test if it contains or intersects a
                  point or rectangle will always return false.
                  Methods which combine such a {@code Rectangle} with a point or rectangle
                  will ignore the {@code Rectangle} entirely in generating the result.
                  If two {@code Rectangle} objects are combined and each has a negative
                  dimension, the result will have at least one negative dimension.
                  &lt;/a&gt;
                  &lt;p&gt;
                  Methods which affect only the location of a {@code Rectangle} will
                  operate on its location regardless of whether or not it has a negative
                  or zero dimension along either axis.
                  &lt;p&gt;
                  Note that a {@code Rectangle} constructed with the default no-argument
                  constructor will have dimensions of {@code 0x0} and therefore be empty.
                  That {@code Rectangle} will still have a location of {@code (0,0)} and
                  will contribute that location to the union and add operations.
                  Code attempting to accumulate the bounds of a set of points should
                  therefore initially construct the {@code Rectangle} with a specifically
                  negative width and height or it should use the first point in the set
                  to construct the {@code Rectangle}.
                  For example:
                  &lt;pre&gt;
                  Rectangle bounds = new Rectangle(0, 0, -1, -1);
                  for (int i = 0; i &lt; points.length; i++) {
                  bounds.add(points[i]);
                  }
                  &lt;/pre&gt;
                  or if we know that the points array contains at least one point:
                  &lt;pre&gt;
                  Rectangle bounds = new Rectangle(points[0]);
                  for (int i = 1; i &lt; points.length; i++) {
                  bounds.add(points[i]);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This class uses 32-bit integers to store its location and dimensions.
                  Frequently operations may produce a result that exceeds the range of
                  a 32-bit integer.
                  The methods will calculate their results in a way that avoids any
                  32-bit overflow for intermediate results and then choose the best
                  representation to store the final results back into the 32-bit fields
                  which hold the location and dimensions.
                  The location of the result will be stored into the {@link #x} and{@link #y} fields by clipping the true result to the nearest 32-bit value.
                  The values stored into the {@link #width} and {@link #height} dimension
                  fields will be chosen as the 32-bit values that encompass the largest
                  part of the true result as possible.
                  Generally this means that the dimension will be clipped independently
                  to the range of 32-bit integers except that if the location had to be
                  moved to store it into its pair of 32-bit fields then the dimensions
                  will be adjusted relative to the &quot;best representation&quot; of the location.
                  If the true result had a negative dimension and was therefore
                  non-existant along one or both axes, the stored dimensions will be
                  negative numbers in those axes.
                  If the true result had a location that could be represented within
                  the range of 32-bit integers, but zero dimension along one or both
                  axes, then the stored dimensions will be zero in those axes.                
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="x" type="int" line="89"/>
            <javadoc line="89">
                The X coordinate of the upper-left corner of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #getLocation()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="y" type="int" line="97"/>
            <javadoc line="97">
                The Y coordinate of the upper-left corner of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setLocation(int,int)                    
                </see>
                <see>
                    #getLocation()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="width" type="int" line="105"/>
            <javadoc line="105">
                The width of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #getSize()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="height" type="int" line="113"/>
            <javadoc line="113">
                The height of the &lt;code&gt;Rectangle&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #setSize(int,int)                    
                </see>
                <see>
                    #getSize()                    
                </see>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="121"/>
            <method name="initIDs" type="void" line="122"/>
            <javadoc line="122">
                Initialize JNI field and method IDs                
            </javadoc>
            <scope line="126">
                <scope line="128"/>
            </scope>
            <javadoc line="132">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner
                  is at (0,&amp;nbsp;0) in the coordinate space, and whose width and
                  height are both zero.                
            </javadoc>
            <method name="Rectangle" type="constructor" line="137"/>
            <javadoc line="140">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt;, initialized to match
                  the values of the specified &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    r  the <code>Rectangle</code> from which to copy initial values
                      to a newly constructed <code>Rectangle</code>                    
                </param>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="Rectangle" type="constructor" line="147">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="150">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is
                  specified as{@code (x,y)} and whose width and height
                  are specified by the arguments of the same name.                
                <param>
                    x the specified X coordinate                    
                </param>
                <param>
                    y the specified Y coordinate                    
                </param>
                <param>
                    width    the width of the <code>Rectangle</code>                    
                </param>
                <param>
                    height   the height of the <code>Rectangle</code>                    
                </param>
                <since>
                    1.0                    
                </since>
            </javadoc>
            <method name="Rectangle" type="constructor" line="160">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner
                  is at (0,&amp;nbsp;0) in the coordinate space, and whose width and
                  height are specified by the arguments of the same name.                
                <param>
                    width the width of the <code>Rectangle</code>                    
                </param>
                <param>
                    height the height of the <code>Rectangle</code>                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="173">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="176">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is
                  specified by the {@link Point} argument, and
                  whose width and height are specified by the{@link Dimension} argument.                
                <param>
                    p a <code>Point</code> that is the upper-left corner of
                      the <code>Rectangle</code>                    
                </param>
                <param>
                    d a <code>Dimension</code>, representing the
                      width and height of the <code>Rectangle</code>                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="185">
                <params>
                    <param name="p" type="Point"/>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="188">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose upper-left corner is the
                  specified &lt;code&gt;Point&lt;/code&gt;, and whose width and height are both zero.                
                <param>
                    p a <code>Point</code> that is the top left corner
                      of the <code>Rectangle</code>                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="194">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="197">
                Constructs a new &lt;code&gt;Rectangle&lt;/code&gt; whose top left corner is
                  (0,&amp;nbsp;0) and whose width and height are specified
                  by the &lt;code&gt;Dimension&lt;/code&gt; argument.                
                <param>
                    d a <code>Dimension</code>, specifying width and height                    
                </param>
            </javadoc>
            <method name="Rectangle" type="constructor" line="203">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="206">
                Returns the X coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the X coordinate of the bounding <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="getX" type="double" line="211"/>
            <javadoc line="214">
                Returns the Y coordinate of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the Y coordinate of the bounding <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="getY" type="double" line="219"/>
            <javadoc line="222">
                Returns the width of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the width of the bounding <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="getWidth" type="double" line="227"/>
            <javadoc line="230">
                Returns the height of the bounding &lt;code&gt;Rectangle&lt;/code&gt; in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the height of the bounding <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="getHeight" type="double" line="235"/>
            <javadoc line="238">
                Gets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getBounds&lt;/code&gt; method of{@link Component}.                
                <return>
                    a new <code>Rectangle</code>, equal to the
                      bounding <code>Rectangle</code> for this <code>Rectangle</code>.                    
                </return>
                <see>
                    java.awt.Component#getBounds                    
                </see>
                <see>
                    #setBounds(Rectangle)                    
                </see>
                <see>
                    #setBounds(int,int,int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="250"/>
            <javadoc line="253">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="257"/>
            <javadoc line="260">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this &lt;code&gt;Rectangle&lt;/code&gt;
                  to match the specified &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setBounds&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    r the specified <code>Rectangle</code>                    
                </param>
                <see>
                    #getBounds                    
                </see>
                <see>
                    java.awt.Component#setBounds(java.awt.Rectangle)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="271">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="274">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this
                  &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;,
                  and &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setBounds&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    x the new X coordinate for the upper-left
                      corner of this <code>Rectangle</code>                    
                </param>
                <param>
                    y the new Y coordinate for the upper-left
                      corner of this <code>Rectangle</code>                    
                </param>
                <param>
                    width the new width for this <code>Rectangle</code>                    
                </param>
                <param>
                    height the new height for this <code>Rectangle</code>                    
                </param>
                <see>
                    #getBounds                    
                </see>
                <see>
                    java.awt.Component#setBounds(int,int,int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setBounds" type="void" line="292">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="295">
                Sets the bounds of this {@code Rectangle} to the integer bounds
                  which encompass the specified {@code x}, {@code y}, {@code width},
                  and {@code height}.
                  If the parameters specify a {@code Rectangle} that exceeds the
                  maximum range of integers, the result will be the best
                  representation of the specified {@code Rectangle} intersected
                  with the maximum integer bounds.                
                <param>
                    x the X coordinate of the upper-left corner of
                      the specified rectangle                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of
                      the specified rectangle                    
                </param>
                <param>
                    width the width of the specified rectangle                    
                </param>
                <param>
                    height the new height of the specified rectangle                    
                </param>
            </javadoc>
            <method name="setRect" type="void" line="310">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="width" type="double"/>
                    <param name="height" type="double"/>
                </params>
                <declaration name="newx" type="int" line="311"/>
                <scope line="312"/>
                <scope line="316"/>
                <scope line="321"/>
                <scope line="325"/>
            </method>
            <method name="clip" type="int" line="332">
                <params>
                    <param name="v" type="double"/>
                    <param name="doceil" type="boolean"/>
                </params>
                <scope line="333"/>
                <scope line="336"/>
            </method>
            <javadoc line="341">
                Sets the bounding &lt;code&gt;Rectangle&lt;/code&gt; of this
                  &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;,
                  and &lt;code&gt;height&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    x the new X coordinate for the upper-left
                      corner of this <code>Rectangle</code>                    
                </param>
                <param>
                    y the new Y coordinate for the upper-left
                      corner of this <code>Rectangle</code>                    
                </param>
                <param>
                    width the new width for this <code>Rectangle</code>                    
                </param>
                <param>
                    height the new height for this <code>Rectangle</code>                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>setBounds(int, int, int, int)</code>.                    
                </deprecated>
            </javadoc>
            <method name="reshape" type="void" line="356">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="362">
                Returns the location of this &lt;code&gt;Rectangle&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <return>
                    the <code>Point</code> that is the upper-left corner of
                      this <code>Rectangle</code>.                    
                </return>
                <see>
                    java.awt.Component#getLocation                    
                </see>
                <see>
                    #setLocation(Point)                    
                </see>
                <see>
                    #setLocation(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getLocation" type="Point" line="374"/>
            <javadoc line="377">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    p the <code>Point</code> specifying the new location
                      for this <code>Rectangle</code>                    
                </param>
                <see>
                    java.awt.Component#setLocation(java.awt.Point)                    
                </see>
                <see>
                    #getLocation                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="388">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="391">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setLocation&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    x the X coordinate of the new location                    
                </param>
                <param>
                    y the Y coordinate of the new location                    
                </param>
                <see>
                    #getLocation                    
                </see>
                <see>
                    java.awt.Component#setLocation(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setLocation" type="void" line="402">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="405">
                Moves this &lt;code&gt;Rectangle&lt;/code&gt; to the specified location.
                  &lt;p&gt;                
                <param>
                    x the X coordinate of the new location                    
                </param>
                <param>
                    y the Y coordinate of the new location                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>setLocation(int, int)</code>.                    
                </deprecated>
            </javadoc>
            <method name="move" type="void" line="413">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="417">
                Translates this &lt;code&gt;Rectangle&lt;/code&gt; the indicated distance,
                  to the right along the X coordinate axis, and
                  downward along the Y coordinate axis.                
                <param>
                    dx the distance to move this <code>Rectangle</code>
                      along the X axis                    
                </param>
                <param>
                    dy the distance to move this <code>Rectangle</code>
                      along the Y axis                    
                </param>
                <see>
                    java.awt.Rectangle#setLocation(int,int)                    
                </see>
                <see>
                    java.awt.Rectangle#setLocation(java.awt.Point)                    
                </see>
            </javadoc>
            <method name="translate" type="void" line="428">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                </params>
                <declaration name="oldv" type="int" line="429"/>
                <declaration name="newv" type="int" line="430"/>
                <scope line="431">
                    <scope line="432">
                        <scope line="433"/>
                    </scope>
                </scope>
                <scope line="439">
                    <scope line="440">
                        <scope line="441"/>
                    </scope>
                </scope>
                <scope line="451">
                    <scope line="452">
                        <scope line="453"/>
                    </scope>
                </scope>
                <scope line="459">
                    <scope line="460">
                        <scope line="461"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="470">
                Gets the size of this &lt;code&gt;Rectangle&lt;/code&gt;, represented by
                  the returned &lt;code&gt;Dimension&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;getSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <return>
                    a <code>Dimension</code>, representing the size of
                      this <code>Rectangle</code>.                    
                </return>
                <see>
                    java.awt.Component#getSize                    
                </see>
                <see>
                    #setSize(Dimension)                    
                </see>
                <see>
                    #setSize(int,int)                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="getSize" type="Dimension" line="483"/>
            <javadoc line="486">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to match the
                  specified &lt;code&gt;Dimension&lt;/code&gt;.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    d the new size for the <code>Dimension</code> object                    
                </param>
                <see>
                    java.awt.Component#setSize(java.awt.Dimension)                    
                </see>
                <see>
                    #getSize                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="497">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="500">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  width and height.
                  &lt;p&gt;
                  This method is included for completeness, to parallel the
                  &lt;code&gt;setSize&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    width the new width for this <code>Rectangle</code>                    
                </param>
                <param>
                    height the new height for this <code>Rectangle</code>                    
                </param>
                <see>
                    java.awt.Component#setSize(int,int)                    
                </see>
                <see>
                    #getSize                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="setSize" type="void" line="512">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="515">
                Sets the size of this &lt;code&gt;Rectangle&lt;/code&gt; to the specified
                  width and height.
                  &lt;p&gt;                
                <param>
                    width the new width for this <code>Rectangle</code>                    
                </param>
                <param>
                    height the new height for this <code>Rectangle</code>                    
                </param>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>setSize(int, int)</code>.                    
                </deprecated>
            </javadoc>
            <method name="resize" type="void" line="524">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="528">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  specified &lt;code&gt;Point&lt;/code&gt;.                
                <param>
                    p the <code>Point</code> to test                    
                </param>
                <return>
                    <code>true</code> if the specified <code>Point</code>
                      is inside this <code>Rectangle</code>;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="537">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="540">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  point at the specified location {@code (x,y)}.                
                <param>
                    x the specified X coordinate                    
                </param>
                <param>
                    y the specified Y coordinate                    
                </param>
                <return>
                    <code>true</code> if the point{@code (x,y)} is inside this
                      <code>Rectangle</code>;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="550">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="553">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; entirely contains
                  the specified &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    r   the specified <code>Rectangle</code>                    
                </param>
                <return>
                    <code>true</code> if the <code>Rectangle</code>
                      is contained entirely inside this <code>Rectangle</code>;
                      <code>false</code> otherwise                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="562">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="565">
                Checks whether this &lt;code&gt;Rectangle&lt;/code&gt; entirely contains
                  the &lt;code&gt;Rectangle&lt;/code&gt;
                  at the specified location {@code (X,Y)} with the
                  specified dimensions {@code (W,H)}.                
                <param>
                    X the specified X coordinate                    
                </param>
                <param>
                    Y the specified Y coordinate                    
                </param>
                <param>
                    W   the width of the <code>Rectangle</code>                    
                </param>
                <param>
                    H   the height of the <code>Rectangle</code>                    
                </param>
                <return>
                    <code>true</code> if the <code>Rectangle</code> specified by{@code (X, Y, W, H)}is entirely enclosed inside this <code>Rectangle</code>;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="578">
                <params>
                    <param name="X" type="int"/>
                    <param name="Y" type="int"/>
                    <param name="W" type="int"/>
                    <param name="H" type="int"/>
                </params>
                <declaration name="w" type="int" line="579"/>
                <declaration name="h" type="int" line="580"/>
                <scope line="581"/>
                <declaration name="x" type="int" line="584"/>
                <declaration name="y" type="int" line="585"/>
                <scope line="586"/>
                <scope line="591"/>
                <scope line="594"/>
                <scope line="599"/>
                <scope line="602"/>
            </method>
            <javadoc line="607">
                Checks whether or not this &lt;code&gt;Rectangle&lt;/code&gt; contains the
                  point at the specified location {@code (X,Y)}.                
                <param>
                    X the specified X coordinate                    
                </param>
                <param>
                    Y the specified Y coordinate                    
                </param>
                <return>
                    <code>true</code> if the point{@code (X,Y)} is inside this
                      <code>Rectangle</code>;
                      <code>false</code> otherwise.                    
                </return>
                <deprecated>
                    As of JDK version 1.1,
                      replaced by <code>contains(int, int)</code>.                    
                </deprecated>
            </javadoc>
            <method name="inside" type="boolean" line="618">
                <params>
                    <param name="X" type="int"/>
                    <param name="Y" type="int"/>
                </params>
                <declaration name="w" type="int" line="619"/>
                <declaration name="h" type="int" line="620"/>
                <scope line="621"/>
                <declaration name="x" type="int" line="624"/>
                <declaration name="y" type="int" line="625"/>
                <scope line="626"/>
            </method>
            <javadoc line="633">
                Determines whether or not this &lt;code&gt;Rectangle&lt;/code&gt; and the specified
                  &lt;code&gt;Rectangle&lt;/code&gt; intersect. Two rectangles intersect if
                  their intersection is nonempty.                
                <param>
                    r the specified <code>Rectangle</code>                    
                </param>
                <return>
                    <code>true</code> if the specified <code>Rectangle</code>
                      and this <code>Rectangle</code> intersect;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="intersects" type="boolean" line="642">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="tw" type="int" line="643"/>
                <declaration name="th" type="int" line="644"/>
                <declaration name="rw" type="int" line="645"/>
                <declaration name="rh" type="int" line="646"/>
                <scope line="647"/>
                <declaration name="tx" type="int" line="650"/>
                <declaration name="ty" type="int" line="651"/>
                <declaration name="rx" type="int" line="652"/>
                <declaration name="ry" type="int" line="653"/>
            </method>
            <javadoc line="660">
                Computes the intersection of this &lt;code&gt;Rectangle&lt;/code&gt; with the
                  specified &lt;code&gt;Rectangle&lt;/code&gt;. Returns a new &lt;code&gt;Rectangle&lt;/code&gt;
                  that represents the intersection of the two rectangles.
                  If the two rectangles do not intersect, the result will be
                  an empty rectangle.                
                <param>
                    r   the specified <code>Rectangle</code>                    
                </param>
                <return>
                    the largest <code>Rectangle</code> contained in both the
                      specified <code>Rectangle</code> and in
                      this <code>Rectangle</code>; or if the rectangles
                      do not intersect, an empty rectangle.                    
                </return>
            </javadoc>
            <method name="intersection" type="Rectangle" line="672">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="tx1" type="int" line="673"/>
                <declaration name="ty1" type="int" line="674"/>
                <declaration name="rx1" type="int" line="675"/>
                <declaration name="ry1" type="int" line="676"/>
                <declaration name="tx2" type="long" line="677"/>
                <declaration name="ty2" type="long" line="679"/>
                <declaration name="rx2" type="long" line="681"/>
                <declaration name="ry2" type="long" line="683"/>
            </method>
            <javadoc line="695">
                Computes the union of this &lt;code&gt;Rectangle&lt;/code&gt; with the
                  specified &lt;code&gt;Rectangle&lt;/code&gt;. Returns a new
                  &lt;code&gt;Rectangle&lt;/code&gt; that
                  represents the union of the two rectangles.
                  &lt;p&gt;
                  If either {@code Rectangle} has any dimension less than zero
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt; rectangles
                  apply.
                  If only one has a dimension less than zero, then the result
                  will be a copy of the other {@code Rectangle}.
                  If both have dimension less than zero, then the result will
                  have at least one dimension less than zero.
                  &lt;p&gt;
                  If the resulting {@code Rectangle} would have a dimension
                  too large to be expressed as an {@code int}, the result
                  will have a dimension of {@code Integer.MAX_VALUE} along
                  that dimension.                
                <param>
                    r the specified <code>Rectangle</code>                    
                </param>
                <return>
                    the smallest <code>Rectangle</code> containing both
                      the specified <code>Rectangle</code> and this
                      <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="union" type="Rectangle" line="718">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="tx2" type="long" line="719"/>
                <declaration name="ty2" type="long" line="720"/>
                <scope line="721"/>
                <declaration name="rx2" type="long" line="724"/>
                <declaration name="ry2" type="long" line="725"/>
                <scope line="726"/>
                <declaration name="tx1" type="int" line="729"/>
                <declaration name="ty1" type="int" line="730"/>
                <declaration name="rx1" type="int" line="733"/>
                <declaration name="ry1" type="int" line="734"/>
            </method>
            <javadoc line="747">
                Adds a point, specified by the integer arguments {@code newx,newy}to the bounds of this {@code Rectangle}.
                  &lt;p&gt;
                  If this {@code Rectangle} has any dimension less than zero,
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt;
                  rectangles apply.
                  In that case, the new bounds of this {@code Rectangle} will
                  have a location equal to the specified coordinates and
                  width and height equal to zero.
                  &lt;p&gt;
                  After adding a point, a call to &lt;code&gt;contains&lt;/code&gt; with the
                  added point as an argument does not necessarily return
                  &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;contains&lt;/code&gt; method does not
                  return &lt;code&gt;true&lt;/code&gt; for points on the right or bottom
                  edges of a &lt;code&gt;Rectangle&lt;/code&gt;. Therefore, if the added point
                  falls on the right or bottom edge of the enlarged
                  &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt; for that point.
                  If the specified point must be contained within the new{@code Rectangle}, a 1x1 rectangle should be added instead:
                  &lt;pre&gt;
                  r.add(newx, newy, 1, 1);
                  &lt;/pre&gt;                
                <param>
                    newx the X coordinate of the new point                    
                </param>
                <param>
                    newy the Y coordinate of the new point                    
                </param>
            </javadoc>
            <method name="add" type="void" line="772">
                <params>
                    <param name="newx" type="int"/>
                    <param name="newy" type="int"/>
                </params>
                <scope line="773"/>
                <declaration name="x1" type="int" line="779"/>
                <declaration name="y1" type="int" line="780"/>
                <declaration name="x2" type="long" line="781"/>
                <declaration name="y2" type="long" line="782"/>
            </method>
            <javadoc line="795">
                Adds the specified {@code Point} to the bounds of this{@code Rectangle}.
                  &lt;p&gt;
                  If this {@code Rectangle} has any dimension less than zero,
                  the rules for &lt;a href=#NonExistant&gt;non-existant&lt;/a&gt;
                  rectangles apply.
                  In that case, the new bounds of this {@code Rectangle} will
                  have a location equal to the coordinates of the specified{@code Point} and width and height equal to zero.
                  &lt;p&gt;
                  After adding a &lt;code&gt;Point&lt;/code&gt;, a call to &lt;code&gt;contains&lt;/code&gt;
                  with the added &lt;code&gt;Point&lt;/code&gt; as an argument does not
                  necessarily return &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;contains&lt;/code&gt;
                  method does not return &lt;code&gt;true&lt;/code&gt; for points on the right
                  or bottom edges of a &lt;code&gt;Rectangle&lt;/code&gt;. Therefore if the added
                  &lt;code&gt;Point&lt;/code&gt; falls on the right or bottom edge of the
                  enlarged &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt; for that &lt;code&gt;Point&lt;/code&gt;.
                  If the specified point must be contained within the new{@code Rectangle}, a 1x1 rectangle should be added instead:
                  &lt;pre&gt;
                  r.add(pt.x, pt.y, 1, 1);
                  &lt;/pre&gt;                
                <param>
                    pt the new <code>Point</code> to add to this
                      <code>Rectangle</code>                    
                </param>
            </javadoc>
            <method name="add" type="void" line="819">
                <params>
                    <param name="pt" type="Point"/>
                </params>
            </method>
            <javadoc line="822">
                Adds a &lt;code&gt;Rectangle&lt;/code&gt; to this &lt;code&gt;Rectangle&lt;/code&gt;.
                  The resulting &lt;code&gt;Rectangle&lt;/code&gt; is the union of the two
                  rectangles.
                  &lt;p&gt;
                  If either {@code Rectangle} has any dimension less than 0, the
                  result will have the dimensions of the other {@code Rectangle}.
                  If both {@code Rectangle}s have at least one dimension less
                  than 0, the result will have at least one dimension less than 0.
                  &lt;p&gt;
                  If either {@code Rectangle} has one or both dimensions equal
                  to 0, the result along those axes with 0 dimensions will be
                  equivalent to the results obtained by adding the corresponding
                  origin coordinate to the result rectangle along that axis,
                  similar to the operation of the {@link #add(Point)} method,
                  but contribute no further dimension beyond that.
                  &lt;p&gt;
                  If the resulting {@code Rectangle} would have a dimension
                  too large to be expressed as an {@code int}, the result
                  will have a dimension of {@code Integer.MAX_VALUE} along
                  that dimension.                
                <param>
                    r the specified <code>Rectangle</code>                    
                </param>
            </javadoc>
            <method name="add" type="void" line="845">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="tx2" type="long" line="846"/>
                <declaration name="ty2" type="long" line="847"/>
                <scope line="848"/>
                <declaration name="rx2" type="long" line="851"/>
                <declaration name="ry2" type="long" line="852"/>
                <scope line="853"/>
                <declaration name="tx1" type="int" line="856"/>
                <declaration name="ty1" type="int" line="857"/>
                <declaration name="rx1" type="int" line="860"/>
                <declaration name="ry1" type="int" line="861"/>
            </method>
            <javadoc line="874">
                Resizes the &lt;code&gt;Rectangle&lt;/code&gt; both horizontally and vertically.
                  &lt;p&gt;
                  This method modifies the &lt;code&gt;Rectangle&lt;/code&gt; so that it is
                  &lt;code&gt;h&lt;/code&gt; units larger on both the left and right side,
                  and &lt;code&gt;v&lt;/code&gt; units larger at both the top and bottom.
                  &lt;p&gt;
                  The new &lt;code&gt;Rectangle&lt;/code&gt; has {@code (x - h, y - v)}as its upper-left corner,
                  width of {@code (width + 2h)},
                  and a height of {@code (height + 2v)}.
                  &lt;p&gt;
                  If negative values are supplied for &lt;code&gt;h&lt;/code&gt; and
                  &lt;code&gt;v&lt;/code&gt;, the size of the &lt;code&gt;Rectangle&lt;/code&gt;
                  decreases accordingly.
                  The {@code grow} method will check for integer overflow
                  and underflow, but does not check whether the resulting
                  values of {@code width} and {@code height} grow
                  from negative to non-negative or shrink from non-negative
                  to negative.                
                <param>
                    h the horizontal expansion                    
                </param>
                <param>
                    v the vertical expansion                    
                </param>
            </javadoc>
            <method name="grow" type="void" line="896">
                <params>
                    <param name="h" type="int"/>
                    <param name="v" type="int"/>
                </params>
                <declaration name="x0" type="long" line="897"/>
                <declaration name="y0" type="long" line="898"/>
                <declaration name="x1" type="long" line="899"/>
                <declaration name="y1" type="long" line="900"/>
                <scope line="907"/>
                <scope line="913"/>
                <scope line="920"/>
                <scope line="926"/>
            </method>
            <javadoc line="935">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isEmpty" type="boolean" line="939"/>
            <javadoc line="942">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="outcode" type="int" line="946">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="out" type="int" line="947"/>
                <scope line="948"/>
                <scope line="951"/>
                <scope line="954"/>
                <scope line="957"/>
                <scope line="960"/>
                <scope line="963"/>
            </method>
            <javadoc line="968">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createIntersection" type="Rectangle2D" line="972">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <scope line="973"/>
                <declaration name="dest" type="Rectangle2D" line="976"/>
            </method>
            <javadoc line="980">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createUnion" type="Rectangle2D" line="984">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
                <scope line="985"/>
                <declaration name="dest" type="Rectangle2D" line="988"/>
            </method>
            <javadoc line="992">
                Checks whether two rectangles are equal.
                  &lt;p&gt;
                  The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                  &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Rectangle&lt;/code&gt; object that has the
                  same upper-left corner, width, and height as
                  this &lt;code&gt;Rectangle&lt;/code&gt;.                
                <param>
                    obj the <code>Object</code> to compare with
                      this <code>Rectangle</code>                    
                </param>
                <return>
                    <code>true</code> if the objects are equal;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1004">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="1005">
                    <declaration name="r" type="Rectangle" line="1006"/>
                </scope>
            </method>
            <javadoc line="1011">
                Returns a &lt;code&gt;String&lt;/code&gt; representing this
                  &lt;code&gt;Rectangle&lt;/code&gt; and its values.                
                <return>
                    a <code>String</code> representing this
                      <code>Rectangle</code> object's coordinate and size values.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1017"/>
        </class>
    </source>