<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.awt.peer.ScrollPanePeer"/>
        <import package="java.awt.event"/>
        <import package="javax.accessibility"/>
        <import package="sun.awt.ScrollPaneWheelScroller"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.beans.Transient"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <class name="ScrollPane" line="40">
            <extends class="Container"/>
            <comment line="176">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="234">
                The scrollpane won&apos;t work with a windowless child... it assumes                
            </comment>
            <comment line="235">
                it is moving a child window around so the windowless child is                
            </comment>
            <comment line="236">
                wrapped with a window.                
            </comment>
            <comment line="754">
                ///////////////                
            </comment>
            <comment line="755">
                Accessibility support                
            </comment>
            <comment line="756">
                //////////////                
            </comment>
            <comment line="800">
                class AccessibleAWTScrollPane                
            </comment>
            <comment line="816">
                serialVersionUID                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="40">
                A container class which implements automatic horizontal and/or
                  vertical scrolling for a single child component.  The display
                  policy for the scrollbars can be set to:
                  &lt;OL&gt;
                  &lt;LI&gt;as needed: scrollbars created and shown only when needed by scrollpane
                  &lt;LI&gt;always: scrollbars created and always shown by the scrollpane
                  &lt;LI&gt;never: scrollbars never created or shown by the scrollpane
                  &lt;/OL&gt;
                  &lt;P&gt;
                  The state of the horizontal and vertical scrollbars is represented
                  by two &lt;code&gt;ScrollPaneAdjustable&lt;/code&gt; objects (one for each
                  dimension) which implement the &lt;code&gt;Adjustable&lt;/code&gt; interface.
                  The API provides methods to access those objects such that the
                  attributes on the Adjustable object (such as unitIncrement, value,
                  etc.) can be manipulated.
                  &lt;P&gt;
                  Certain adjustable properties (minimum, maximum, blockIncrement,
                  and visibleAmount) are set internally by the scrollpane in accordance
                  with the geometry of the scrollpane and its child and these should
                  not be set by programs using the scrollpane.
                  &lt;P&gt;
                  If the scrollbar display policy is defined as &quot;never&quot;, then the
                  scrollpane can still be programmatically scrolled using the
                  setScrollPosition() method and the scrollpane will move and clip
                  the child&apos;s contents appropriately.  This policy is useful if the
                  program needs to create and manage its own adjustable controls.
                  &lt;P&gt;
                  The placement of the scrollbars is controlled by platform-specific
                  properties set by the user outside of the program.
                  &lt;P&gt;
                  The initial size of this container is set to 100x100, but can
                  be reset using setSize().
                  &lt;P&gt;
                  Scrolling with the wheel on a wheel-equipped mouse is enabled by default.
                  This can be disabled using &lt;code&gt;setWheelScrollingEnabled&lt;/code&gt;.
                  Wheel scrolling can be customized by setting the block and
                  unit increment of the horizontal and vertical Adjustables.
                  For information on how mouse wheel events are dispatched, see
                  the class description for {@link MouseWheelEvent}.
                  &lt;P&gt;
                  Insets are used to define any space used by scrollbars and any
                  borders created by the scroll pane. getInsets() can be used
                  to get the current value for the insets.  If the value of
                  scrollbarsAlwaysVisible is false, then the value of the insets
                  will change dynamically depending on whether the scrollbars are
                  currently visible or not.                
                <author>
                    Tom Ball                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Tim Prinzing                    
                </author>
            </javadoc>
            <method name="initIDs" type="void" line="95"/>
            <javadoc line="95">
                Initialize JNI field and method IDs                
            </javadoc>
            <scope line="100">
                <scope line="103"/>
            </scope>
            <declaration name="SCROLLBARS_AS_NEEDED" type="int" line="108"/>
            <javadoc line="108">
                Specifies that horizontal/vertical scrollbar should be shown
                  only when the size of the child exceeds the size of the scrollpane
                  in the horizontal/vertical dimension.                
            </javadoc>
            <declaration name="SCROLLBARS_ALWAYS" type="int" line="115"/>
            <javadoc line="115">
                Specifies that horizontal/vertical scrollbars should always be
                  shown regardless of the respective sizes of the scrollpane and child.                
            </javadoc>
            <declaration name="SCROLLBARS_NEVER" type="int" line="121"/>
            <javadoc line="121">
                Specifies that horizontal/vertical scrollbars should never be shown
                  regardless of the respective sizes of the scrollpane and child.                
            </javadoc>
            <declaration name="scrollbarDisplayPolicy" type="int" line="127"/>
            <javadoc line="127">
                There are 3 ways in which a scroll bar can be displayed.
                  This integer will represent one of these 3 displays -
                  (SCROLLBARS_ALWAYS, SCROLLBARS_AS_NEEDED, SCROLLBARS_NEVER)                
                <serial>
                                        
                </serial>
                <see>
                    #getScrollbarDisplayPolicy                    
                </see>
            </javadoc>
            <declaration name="vAdjustable" type="ScrollPaneAdjustable" line="137"/>
            <javadoc line="137">
                An adjustable vertical scrollbar.
                  It is important to note that you must &lt;em&gt;NOT&lt;/em&gt; call 3
                  &lt;code&gt;Adjustable&lt;/code&gt; methods, namely:
                  &lt;code&gt;setMinimum()&lt;/code&gt;, &lt;code&gt;setMaximum()&lt;/code&gt;,
                  &lt;code&gt;setVisibleAmount()&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getVAdjustable                    
                </see>
            </javadoc>
            <declaration name="hAdjustable" type="ScrollPaneAdjustable" line="149"/>
            <javadoc line="149">
                An adjustable horizontal scrollbar.
                  It is important to note that you must &lt;em&gt;NOT&lt;/em&gt; call 3
                  &lt;code&gt;Adjustable&lt;/code&gt; methods, namely:
                  &lt;code&gt;setMinimum()&lt;/code&gt;, &lt;code&gt;setMaximum()&lt;/code&gt;,
                  &lt;code&gt;setVisibleAmount()&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getHAdjustable                    
                </see>
            </javadoc>
            <declaration name="base" type="String" line="161"/>
            <declaration name="nameCounter" type="int" line="162"/>
            <declaration name="defaultWheelScroll" type="boolean" line="164"/>
            <declaration name="wheelScrollingEnabled" type="boolean" line="166"/>
            <javadoc line="166">
                Indicates whether or not scrolling should take place when a
                  MouseWheelEvent is received.                
                <serial>
                                        
                </serial>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="178"/>
            <javadoc line="180">
                Create a new scrollpane container with a scrollbar display
                  policy of &quot;as needed&quot;.                
                <throws>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="ScrollPane" type="constructor" line="187"/>
            <javadoc line="191">
                Create a new scrollpane container.                
                <param>
                    scrollbarDisplayPolicy policy for when scrollbars should be shown                    
                </param>
                <throws>
                    IllegalArgumentException if the specified scrollbar
                      display policy is invalid                    
                </throws>
                <throws>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="ScrollPane" type="constructor" line="201">
                <params>
                    <param name="scrollbarDisplayPolicy" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="227">
                <scope line="228"/>
            </method>
            <method name="addToPanel" type="void" line="236">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="child" type="Panel" line="237"/>
            </method>
            <javadoc line="244">
                Adds the specified component to this scroll pane container.
                  If the scroll pane has an existing child component, that
                  component is removed and the new one is added.                
                <param>
                    comp the component to be added                    
                </param>
                <param>
                    constraints  not applicable                    
                </param>
                <param>
                    index position of child component (must be <= 0)                    
                </param>
            </javadoc>
            <method name="addImpl" type="void" line="252">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="253">
                    <scope line="254"/>
                    <scope line="257"/>
                    <scope line="261"/>
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="269">
                Returns the display policy for the scrollbars.                
                <return>
                    the display policy for the scrollbars                    
                </return>
            </javadoc>
            <method name="getScrollbarDisplayPolicy" type="int" line="273"/>
            <javadoc line="277">
                Returns the current size of the scroll pane&apos;s view port.                
                <return>
                    the size of the view port in pixels                    
                </return>
            </javadoc>
            <method name="getViewportSize" type="Dimension" line="281">
                <declaration name="i" type="Insets" line="282"/>
            </method>
            <javadoc line="287">
                Returns the height that would be occupied by a horizontal
                  scrollbar, which is independent of whether it is currently
                  displayed by the scroll pane or not.                
                <return>
                    the height of a horizontal scrollbar in pixels                    
                </return>
            </javadoc>
            <method name="getHScrollbarHeight" type="int" line="293">
                <declaration name="h" type="int" line="294"/>
                <scope line="295">
                    <declaration name="peer" type="ScrollPanePeer" line="296"/>
                    <scope line="297"/>
                </scope>
            </method>
            <javadoc line="304">
                Returns the width that would be occupied by a vertical
                  scrollbar, which is independent of whether it is currently
                  displayed by the scroll pane or not.                
                <return>
                    the width of a vertical scrollbar in pixels                    
                </return>
            </javadoc>
            <method name="getVScrollbarWidth" type="int" line="310">
                <declaration name="w" type="int" line="311"/>
                <scope line="312">
                    <declaration name="peer" type="ScrollPanePeer" line="313"/>
                    <scope line="314"/>
                </scope>
            </method>
            <javadoc line="321">
                Returns the &lt;code&gt;ScrollPaneAdjustable&lt;/code&gt; object which
                  represents the state of the vertical scrollbar.
                  The declared return type of this method is
                  &lt;code&gt;Adjustable&lt;/code&gt; to maintain backward compatibility.                
                <see>
                    java.awt.ScrollPaneAdjustable                    
                </see>
            </javadoc>
            <method name="getVAdjustable" type="Adjustable" line="328"/>
            <javadoc line="332">
                Returns the &lt;code&gt;ScrollPaneAdjustable&lt;/code&gt; object which
                  represents the state of the horizontal scrollbar.
                  The declared return type of this method is
                  &lt;code&gt;Adjustable&lt;/code&gt; to maintain backward compatibility.                
                <see>
                    java.awt.ScrollPaneAdjustable                    
                </see>
            </javadoc>
            <method name="getHAdjustable" type="Adjustable" line="339"/>
            <javadoc line="343">
                Scrolls to the specified position within the child component.
                  A call to this method is only valid if the scroll pane contains
                  a child.  Specifying a position outside of the legal scrolling bounds
                  of the child will scroll to the closest legal position.
                  Legal bounds are defined to be the rectangle:
                  x = 0, y = 0, width = (child width - view port width),
                  height = (child height - view port height).
                  This is a convenience method which interfaces with the Adjustable
                  objects which represent the state of the scrollbars.                
                <param>
                    x the x position to scroll to                    
                </param>
                <param>
                    y the y position to scroll to                    
                </param>
                <throws>
                    NullPointerException if the scrollpane does not contain
                      a child                    
                </throws>
            </javadoc>
            <method name="setScrollPosition" type="void" line="358">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="359">
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="368">
                Scrolls to the specified position within the child component.
                  A call to this method is only valid if the scroll pane contains
                  a child and the specified position is within legal scrolling bounds
                  of the child.  Specifying a position outside of the legal scrolling
                  bounds of the child will scroll to the closest legal position.
                  Legal bounds are defined to be the rectangle:
                  x = 0, y = 0, width = (child width - view port width),
                  height = (child height - view port height).
                  This is a convenience method which interfaces with the Adjustable
                  objects which represent the state of the scrollbars.                
                <param>
                    p the Point representing the position to scroll to                    
                </param>
                <throws>
                    NullPointerException if {@code p} is {@code null}                    
                </throws>
            </javadoc>
            <method name="setScrollPosition" type="void" line="382">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="386">
                Returns the current x,y position within the child which is displayed
                  at the 0,0 location of the scrolled panel&apos;s view port.
                  This is a convenience method which interfaces with the adjustable
                  objects which represent the state of the scrollbars.                
                <return>
                    the coordinate position for the current scroll position                    
                </return>
                <throws>
                    NullPointerException if the scrollpane does not contain
                      a child                    
                </throws>
            </javadoc>
            <method name="getScrollPosition" type="Point" line="396">
                <scope line="397">
                    <scope line="398"/>
                </scope>
            </method>
            <javadoc line="405">
                Sets the layout manager for this container.  This method is
                  overridden to prevent the layout mgr from being set.                
                <param>
                    mgr the specified layout manager                    
                </param>
            </javadoc>
            <method name="setLayout" type="void" line="410">
                <params>
                    <param name="mgr" type="LayoutManager"/>
                </params>
            </method>
            <javadoc line="414">
                Lays out this container by resizing its child to its preferred size.
                  If the new preferred size of the child causes the current scroll
                  position to be invalid, the scroll position is set to the closest
                  valid position.                
                <see>
                    Component#validate                    
                </see>
            </javadoc>
            <method name="doLayout" type="void" line="422"/>
            <javadoc line="426">
                Determine the size to allocate the child component.
                  If the viewport area is bigger than the childs
                  preferred size then the child is allocated enough
                  to fill the viewport, otherwise the child is given
                  it&apos;s preferred size.                
            </javadoc>
            <method name="calculateChildSize" type="Dimension" line="433">
                <comment line="434">
                                        
                </comment>
                <comment line="435">
                    calculate the view size, accounting for border but not scrollbars                    
                </comment>
                <comment line="436">
                    - don&apos;t use right/bottom insets since they vary depending                    
                </comment>
                <comment line="437">
                    on whether or not scrollbars were displayed on last resize                    
                </comment>
                <comment line="438">
                                        
                </comment>
                <comment line="444">
                                        
                </comment>
                <comment line="445">
                    determine whether or not horz or vert scrollbars will be displayed                    
                </comment>
                <comment line="446">
                                        
                </comment>
                <comment line="457">
                    SCROLLBARS_NEVER                    
                </comment>
                <comment line="461">
                                        
                </comment>
                <comment line="462">
                    adjust predicted view size to account for scrollbars                    
                </comment>
                <comment line="463">
                                        
                </comment>
                <comment line="473">
                                        
                </comment>
                <comment line="474">
                    if child is smaller than view, size it up                    
                </comment>
                <comment line="475">
                                        
                </comment>
                <declaration name="size" type="Dimension" line="439"/>
                <declaration name="insets" type="Insets" line="440"/>
                <declaration name="viewWidth" type="int" line="441"/>
                <declaration name="viewHeight" type="int" line="442"/>
                <declaration name="vbarOn" type="boolean" line="447"/>
                <declaration name="hbarOn" type="boolean" line="448"/>
                <declaration name="child" type="Component" line="449"/>
                <declaration name="childSize" type="Dimension" line="450"/>
                <scope line="452"/>
                <scope line="455"/>
                <scope line="457"/>
                <declaration name="vbarWidth" type="int" line="464"/>
                <declaration name="hbarHeight" type="int" line="465"/>
                <scope line="466"/>
                <scope line="469"/>
                <scope line="476"/>
                <scope line="479"/>
            </method>
            <javadoc line="486">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;doLayout()&lt;/code&gt;.                
            </javadoc>
            <method name="layout" type="void" line="491">
                <comment line="507">
                    update adjustables... the viewport size may have changed                    
                </comment>
                <comment line="508">
                    with the scrollbars coming or going so the viewport size                    
                </comment>
                <comment line="509">
                    is updated before the adjustables.                    
                </comment>
                <scope line="492"/>
                <declaration name="c" type="Component" line="495"/>
                <declaration name="p" type="Point" line="496"/>
                <declaration name="cs" type="Dimension" line="497"/>
                <declaration name="vs" type="Dimension" line="498"/>
                <declaration name="i" type="Insets" line="499"/>
                <declaration name="peer" type="ScrollPanePeer" line="502"/>
                <scope line="503"/>
            </method>
            <javadoc line="515">
                Prints the component in this scroll pane.                
                <param>
                    g the specified Graphics window                    
                </param>
                <see>
                    Component#print                    
                </see>
                <see>
                    Component#printAll                    
                </see>
            </javadoc>
            <method name="printComponents" type="void" line="521">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="522"/>
                <declaration name="c" type="Component" line="525"/>
                <declaration name="p" type="Point" line="526"/>
                <declaration name="vs" type="Dimension" line="527"/>
                <declaration name="i" type="Insets" line="528"/>
                <declaration name="cg" type="Graphics" line="530"/>
                <scope line="531"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Creates the scroll pane&apos;s peer.                
            </javadoc>
            <method name="addNotify" type="void" line="543">
                <comment line="549">
                    Bug 4124460. Save the current adjustable values,                    
                </comment>
                <comment line="550">
                    so they can be restored after addnotify. Set the                    
                </comment>
                <comment line="551">
                    adjustables to 0, to prevent crashes for possible                    
                </comment>
                <comment line="552">
                    negative values.                    
                </comment>
                <comment line="564">
                    Bug 4124460. Restore the adjustable values.                    
                </comment>
                <scope line="544">
                    <declaration name="vAdjustableValue" type="int" line="546"/>
                    <declaration name="hAdjustableValue" type="int" line="547"/>
                    <scope line="553"/>
                    <scope line="565"/>
                </scope>
            </method>
            <javadoc line="572">
                Returns a string representing the state of this
                  &lt;code&gt;ScrollPane&lt;/code&gt;. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this scroll pane                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="582">
                <declaration name="sdpStr" type="String" line="583"/>
                <declaration name="p" type="Point" line="597"/>
                <declaration name="i" type="Insets" line="598"/>
            </method>
            <method name="autoProcessMouseWheel" type="void" line="605">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
            </method>
            <javadoc line="609">
                Process mouse wheel events that are delivered to this
                  &lt;code&gt;ScrollPane&lt;/code&gt; by scrolling an appropriate amount.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e  the mouse wheel event                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="processMouseWheelEvent" type="void" line="619">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                </params>
                <scope line="620"/>
            </method>
            <javadoc line="627">
                If wheel scrolling is enabled, we return true for MouseWheelEvents                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="eventTypeEnabled" type="boolean" line="631">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="632"/>
                <scope line="635"/>
            </method>
            <javadoc line="640">
                Enables/disables scrolling in response to movement of the mouse wheel.
                  Wheel scrolling is enabled by default.                
                <param>
                    handleWheel   <code>true</code> if scrolling should be done
                      automatically for a MouseWheelEvent,
                      <code>false</code> otherwise.                    
                </param>
                <see>
                    #isWheelScrollingEnabled                    
                </see>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setWheelScrollingEnabled" type="void" line="652">
                <params>
                    <param name="handleWheel" type="boolean"/>
                </params>
            </method>
            <javadoc line="656">
                Indicates whether or not scrolling will take place in response to
                  the mouse wheel.  Wheel scrolling is enabled by default.                
                <see>
                    #setWheelScrollingEnabled(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isWheelScrollingEnabled" type="boolean" line="663"/>
            <javadoc line="668">
                Writes default serializable fields to stream.                
            </javadoc>
            <method name="writeObject" type="void" line="671">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="672">
                    4352819: We only need this degenerate writeObject to make                    
                </comment>
                <comment line="673">
                    it safe for future versions of this class to write optional                    
                </comment>
                <comment line="674">
                    data to the stream.                    
                </comment>
            </method>
            <javadoc line="678">
                Reads default serializable fields to stream.                
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless()</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="687">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="689">
                    4352819: Gotcha!  Cannot use s.defaultReadObject here and                    
                </comment>
                <comment line="690">
                    then continue with reading optional data.  Use GetField instead.                    
                </comment>
                <comment line="693">
                    Old fields                    
                </comment>
                <comment line="699">
                    Since 1.4                    
                </comment>
                <comment line="703">
                    // Note to future maintainers                    
                </comment>
                <comment line="704">
                    if (f.defaulted(&quot;wheelScrollingEnabled&quot;)) {                    
                </comment>
                <comment line="705">
                    // We are reading pre-1.4 stream that doesn&apos;t have                    
                </comment>
                <comment line="706">
                    // optional data, not even the TC_ENDBLOCKDATA marker.                    
                </comment>
                <comment line="707">
                    // Reading anything after this point is unsafe as we will                    
                </comment>
                <comment line="708">
                    // read unrelated objects further down the stream (4352819).                    
                </comment>
                <comment line="709">
                    }                    
                </comment>
                <comment line="710">
                    else {                    
                </comment>
                <comment line="711">
                    // Reading data from 1.4 or later, it&apos;s ok to try to read                    
                </comment>
                <comment line="712">
                    // optional data as OptionalDataException with eof == true                    
                </comment>
                <comment line="713">
                    // will be correctly reported                    
                </comment>
                <comment line="714">
                    }                    
                </comment>
                <declaration name="f" type="ObjectInputStream.GetField" line="691"/>
            </method>
            <class name="PeerFixer" line="717">
                <comment line="784">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <implements interface="AdjustmentListener"/>
                <implements interface="java.io.Serializable"/>
                <declaration name="serialVersionUID" type="long" line="719"/>
                <method name="PeerFixer" type="constructor" line="721">
                    <params>
                        <param name="scroller" type="ScrollPane"/>
                    </params>
                </method>
                <javadoc line="725">
                    Invoked when the value of the adjustable has changed.                    
                </javadoc>
                <method name="adjustmentValueChanged" type="void" line="728">
                    <params>
                        <param name="e" type="AdjustmentEvent"/>
                    </params>
                    <declaration name="adj" type="Adjustable" line="729"/>
                    <declaration name="value" type="int" line="730"/>
                    <declaration name="peer" type="ScrollPanePeer" line="731"/>
                    <scope line="732"/>
                    <declaration name="c" type="Component" line="736"/>
                </method>
                <declaration name="scroller" type="ScrollPane" line="749"/>
            </class>
            <javadoc line="757">
                Gets the AccessibleContext associated with this ScrollPane.
                  For scroll panes, the AccessibleContext takes the form of an
                  AccessibleAWTScrollPane.
                  A new AccessibleAWTScrollPane instance is created if necessary.                
                <return>
                    an AccessibleAWTScrollPane that serves as the
                      AccessibleContext of this ScrollPane                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="767">
                <scope line="768"/>
            </method>
            <class name="AccessibleAWTScrollPane" line="774">
                <extends class="AccessibleAWTContainer"/>
                <comment line="784">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <javadoc line="774">
                    This class implements accessibility support for the
                      &lt;code&gt;ScrollPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to scroll pane user-interface
                      elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="786"/>
                <javadoc line="788">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="795"/>
            </class>
        </class>
        <class name="PeerFixer" line="814">
            <comment line="176">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="234">
                The scrollpane won&apos;t work with a windowless child... it assumes                
            </comment>
            <comment line="235">
                it is moving a child window around so the windowless child is                
            </comment>
            <comment line="236">
                wrapped with a window.                
            </comment>
            <comment line="754">
                ///////////////                
            </comment>
            <comment line="755">
                Accessibility support                
            </comment>
            <comment line="756">
                //////////////                
            </comment>
            <comment line="800">
                class AccessibleAWTScrollPane                
            </comment>
            <comment line="816">
                serialVersionUID                
            </comment>
            <implements interface="AdjustmentListener"/>
            <implements interface="java.io.Serializable"/>
            <declaration name="serialVersionUID" type="long" line="818"/>
            <method name="PeerFixer" type="constructor" line="820">
                <params>
                    <param name="scroller" type="ScrollPane"/>
                </params>
            </method>
            <javadoc line="824">
                Invoked when the value of the adjustable has changed.                
            </javadoc>
            <method name="adjustmentValueChanged" type="void" line="827">
                <params>
                    <param name="e" type="AdjustmentEvent"/>
                </params>
                <declaration name="adj" type="Adjustable" line="828"/>
                <declaration name="value" type="int" line="829"/>
                <declaration name="peer" type="ScrollPanePeer" line="830"/>
                <scope line="831"/>
                <declaration name="c" type="Component" line="835"/>
            </method>
            <declaration name="scroller" type="ScrollPane" line="848"/>
        </class>
    </source>