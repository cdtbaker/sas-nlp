<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.IOException"/>
        <class name="CardLayout" line="10">
            <implements interface="LayoutManager2"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                A &lt;code&gt;CardLayout&lt;/code&gt; object is a layout manager for a
                  container. It treats each component in the container as a card.
                  Only one card is visible at a time, and the container acts as
                  a stack of cards. The first component added to a
                  &lt;code&gt;CardLayout&lt;/code&gt; object is the visible component when the
                  container is first displayed.
                  &lt;p&gt;
                  The ordering of cards is determined by the container&apos;s own internal
                  ordering of its component objects. &lt;code&gt;CardLayout&lt;/code&gt;
                  defines a set of methods that allow an application to flip
                  through these cards sequentially, or to show a specified card.
                  The {@link CardLayout#addLayoutComponent}method can be used to associate a string identifier with a given card
                  for fast random access.                
                <author>
                    Arthur van Hoff                    
                </author>
                <see>
                    java.awt.Container                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <declaration name="vector" type="Vector" line="30"/>
            <class name="Card" line="31">
                <implements interface="Serializable"/>
                <declaration name="serialVersionUID" type="long" line="32"/>
                <declaration name="name" type="String" line="33"/>
                <declaration name="comp" type="Component" line="34"/>
                <method name="Card" type="constructor" line="35">
                    <params>
                        <param name="cardName" type="String"/>
                        <param name="cardComponent" type="Component"/>
                    </params>
                </method>
            </class>
            <declaration name="currentCard" type="int" line="40"/>
            <declaration name="hgap" type="int" line="41"/>
            <declaration name="vgap" type="int" line="42"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="43"/>
            <javadoc line="43">
                @serialField tab         Hashtable
                  deprectated, for forward compatibility only                
                <serialField>
                    hgap        int                    
                </serialField>
                <serialField>
                    vgap        int                    
                </serialField>
                <serialField>
                    vector      Vector                    
                </serialField>
                <serialField>
                    currentCard int                    
                </serialField>
            </javadoc>
            <javadoc line="52">
                Creates a new card layout with gaps of size zero.                
            </javadoc>
            <method name="CardLayout" type="constructor" line="55"/>
            <javadoc line="58">
                Creates a new card layout with the specified horizontal and
                  vertical gaps. The horizontal gaps are placed at the left and
                  right edges. The vertical gaps are placed at the top and bottom
                  edges.                
                <param>
                    hgap   the horizontal gap.                    
                </param>
                <param>
                    vgap   the vertical gap.                    
                </param>
            </javadoc>
            <method name="CardLayout" type="constructor" line="66">
                <params>
                    <param name="hgap" type="int"/>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="70">
                Gets the horizontal gap between components.                
                <return>
                    the horizontal gap between components.                    
                </return>
                <see>
                    java.awt.CardLayout#setHgap(int)                    
                </see>
                <see>
                    java.awt.CardLayout#getVgap()                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getHgap" type="int" line="77"/>
            <javadoc line="80">
                Sets the horizontal gap between components.                
                <param>
                    hgap the horizontal gap between components.                    
                </param>
                <see>
                    java.awt.CardLayout#getHgap()                    
                </see>
                <see>
                    java.awt.CardLayout#setVgap(int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setHgap" type="void" line="87">
                <params>
                    <param name="hgap" type="int"/>
                </params>
            </method>
            <javadoc line="90">
                Gets the vertical gap between components.                
                <return>
                    the vertical gap between components.                    
                </return>
                <see>
                    java.awt.CardLayout#setVgap(int)                    
                </see>
                <see>
                    java.awt.CardLayout#getHgap()                    
                </see>
            </javadoc>
            <method name="getVgap" type="int" line="96"/>
            <javadoc line="99">
                Sets the vertical gap between components.                
                <param>
                    vgap the vertical gap between components.                    
                </param>
                <see>
                    java.awt.CardLayout#getVgap()                    
                </see>
                <see>
                    java.awt.CardLayout#setHgap(int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVgap" type="void" line="106">
                <params>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                Adds the specified component to this card layout&apos;s internal
                  table of names. The object specified by &lt;code&gt;constraints&lt;/code&gt;
                  must be a string. The card layout stores this string as a key-value
                  pair that can be used for random access to a particular card.
                  By calling the &lt;code&gt;show&lt;/code&gt; method, an application can
                  display the component with the specified name.                
                <param>
                    comp          the component to be added.                    
                </param>
                <param>
                    constraints   a tag that identifies a particular
                      card in the layout.                    
                </param>
                <see>
                    java.awt.CardLayout#show(java.awt.Container,java.lang.String)                    
                </see>
                <exception>
                    IllegalArgumentException  if the constraint is not a string.                    
                </exception>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="122">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="123">
                    <scope line="124"/>
                    <scope line="127"/>
                    <scope line="130"/>
                </scope>
            </method>
            <javadoc line="135">
                @deprecated   replaced by
                  &lt;code&gt;addLayoutComponent(Component, Object)&lt;/code&gt;.                
            </javadoc>
            <method name="addLayoutComponent" type="void" line="139">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="140">
                    <scope line="141"/>
                    <scope line="144">
                        <scope line="145"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="153">
                Removes the specified component from the layout.
                  If the card was visible on top, the next card underneath it is shown.                
                <param>
                    comp   the component to be removed.                    
                </param>
                <see>
                    java.awt.Container#remove(java.awt.Component)                    
                </see>
                <see>
                    java.awt.Container#removeAll()                    
                </see>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="160">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="161">
                    <scope line="162">
                        <scope line="163">
                            <scope line="164"/>
                            <scope line="168"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Determines the preferred size of the container argument using
                  this card layout.                
                <param>
                    parent the parent container in which to do the layout                    
                </param>
                <return>
                    the preferred dimensions to lay out the subcomponents
                      of the specified container                    
                </return>
                <see>
                    java.awt.Container#getPreferredSize                    
                </see>
                <see>
                    java.awt.CardLayout#minimumLayoutSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="185">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="186">
                    <declaration name="insets" type="Insets" line="187"/>
                    <declaration name="ncomponents" type="int" line="188"/>
                    <declaration name="w" type="int" line="189"/>
                    <declaration name="h" type="int" line="190"/>
                    <scope line="191">
                        <declaration name="comp" type="Component" line="192"/>
                        <declaration name="d" type="Dimension" line="193"/>
                        <scope line="194"/>
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="204">
                Calculates the minimum size for the specified panel.                
                <param>
                    parent the parent container in which to do the layout                    
                </param>
                <return>
                    the minimum dimensions required to lay out the
                      subcomponents of the specified container                    
                </return>
                <see>
                    java.awt.Container#doLayout                    
                </see>
                <see>
                    java.awt.CardLayout#preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="212">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="213">
                    <declaration name="insets" type="Insets" line="214"/>
                    <declaration name="ncomponents" type="int" line="215"/>
                    <declaration name="w" type="int" line="216"/>
                    <declaration name="h" type="int" line="217"/>
                    <scope line="218">
                        <declaration name="comp" type="Component" line="219"/>
                        <declaration name="d" type="Dimension" line="220"/>
                        <scope line="221"/>
                        <scope line="224"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="231">
                Returns the maximum dimensions for this layout given the components
                  in the specified target container.                
                <param>
                    target the component which needs to be laid out                    
                </param>
                <see>
                    Container                    
                </see>
                <see>
                    #minimumLayoutSize                    
                </see>
                <see>
                    #preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="239">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="242">
                Returns the alignment along the x axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="249">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="252">
                Returns the alignment along the y axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="259">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="262">
                Invalidates the layout, indicating that if the layout manager
                  has cached information it should be discarded.                
            </javadoc>
            <method name="invalidateLayout" type="void" line="266">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="268">
                Lays out the specified container using this card layout.
                  &lt;p&gt;
                  Each component in the &lt;code&gt;parent&lt;/code&gt; container is reshaped
                  to be the size of the container, minus space for surrounding
                  insets, horizontal gaps, and vertical gaps.                
                <param>
                    parent the parent container in which to do the layout                    
                </param>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="layoutContainer" type="void" line="277">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="278">
                    <declaration name="insets" type="Insets" line="279"/>
                    <declaration name="ncomponents" type="int" line="280"/>
                    <declaration name="comp" type="Component" line="281"/>
                    <declaration name="currentFound" type="boolean" line="282"/>
                    <scope line="283">
                        <scope line="286"/>
                    </scope>
                    <scope line="290"/>
                </scope>
            </method>
            <javadoc line="295">
                Make sure that the Container really has a CardLayout installed.
                  Otherwise havoc can ensue!                
            </javadoc>
            <method name="checkLayout" type="void" line="299">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="300"/>
            </method>
            <javadoc line="304">
                Flips to the first card of the container.                
                <param>
                    parent   the parent container in which to do the layout                    
                </param>
                <see>
                    java.awt.CardLayout#last                    
                </see>
            </javadoc>
            <method name="first" type="void" line="309">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="310">
                    <declaration name="ncomponents" type="int" line="312"/>
                    <scope line="313">
                        <declaration name="comp" type="Component" line="314"/>
                        <scope line="315"/>
                    </scope>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="327">
                Flips to the next card of the specified container. If the
                  currently visible card is the last one, this method flips to the
                  first card in the layout.                
                <param>
                    parent   the parent container in which to do the layout                    
                </param>
                <see>
                    java.awt.CardLayout#previous                    
                </see>
            </javadoc>
            <method name="next" type="void" line="334">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="335">
                    <declaration name="ncomponents" type="int" line="337"/>
                    <scope line="338">
                        <declaration name="comp" type="Component" line="339"/>
                        <scope line="340"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="352">
                Flips to the previous card of the specified container. If the
                  currently visible card is the first one, this method flips to the
                  last card in the layout.                
                <param>
                    parent   the parent container in which to do the layout                    
                </param>
                <see>
                    java.awt.CardLayout#next                    
                </see>
            </javadoc>
            <method name="previous" type="void" line="359">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="360">
                    <declaration name="ncomponents" type="int" line="362"/>
                    <scope line="363">
                        <declaration name="comp" type="Component" line="364"/>
                        <scope line="365"/>
                    </scope>
                </scope>
            </method>
            <method name="showDefaultComponent" type="void" line="377">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="378"/>
            </method>
            <javadoc line="384">
                Flips to the last card of the container.                
                <param>
                    parent   the parent container in which to do the layout                    
                </param>
                <see>
                    java.awt.CardLayout#first                    
                </see>
            </javadoc>
            <method name="last" type="void" line="389">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="390">
                    <declaration name="ncomponents" type="int" line="392"/>
                    <scope line="393">
                        <declaration name="comp" type="Component" line="394"/>
                        <scope line="395"/>
                    </scope>
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="407">
                Flips to the component that was added to this layout with the
                  specified &lt;code&gt;name&lt;/code&gt;, using &lt;code&gt;addLayoutComponent&lt;/code&gt;.
                  If no such component exists, then nothing happens.                
                <param>
                    parent   the parent container in which to do the layout                    
                </param>
                <param>
                    name     the component name                    
                </param>
                <see>
                    java.awt.CardLayout#addLayoutComponent(java.awt.Component,java.lang.Object)                    
                </see>
            </javadoc>
            <method name="show" type="void" line="415">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="416">
                    <declaration name="next" type="Component" line="418"/>
                    <declaration name="ncomponents" type="int" line="419"/>
                    <scope line="420">
                        <declaration name="card" type="Card" line="421"/>
                        <scope line="422"/>
                    </scope>
                    <scope line="428">
                        <scope line="430">
                            <declaration name="comp" type="Component" line="431"/>
                            <scope line="432"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="442">
                Returns a string representation of the state of this card layout.                
                <return>
                    a string representation of this card layout.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="446"/>
            <javadoc line="449">
                Reads serializable fields from stream.                
            </javadoc>
            <method name="readObject" type="void" line="452">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="f" type="ObjectInputStream.GetField" line="453"/>
                <scope line="456">
                    <declaration name="tab" type="Hashtable" line="457"/>
                    <scope line="459">
                        <scope line="460">
                            <declaration name="key" type="String" line="461"/>
                            <declaration name="comp" type="Component" line="462"/>
                            <scope line="464"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="470"/>
            </method>
            <javadoc line="475">
                Writes serializable fields to stream.                
            </javadoc>
            <method name="writeObject" type="void" line="478">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="tab" type="Hashtable" line="479"/>
                <declaration name="ncomponents" type="int" line="480"/>
                <scope line="481">
                    <declaration name="card" type="Card" line="482"/>
                </scope>
                <declaration name="f" type="ObjectOutputStream.PutField" line="485"/>
            </method>
        </class>
    </source>