<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.ComponentPeer"/>
        <class name="DefaultFocusTraversalPolicy" line="3">
            <extends class="ContainerOrderFocusTraversalPolicy"/>
            <javadoc line="3">
                A FocusTraversalPolicy that determines traversal order based on the order
                  of child Components in a Container. From a particular focus cycle root, the
                  policy makes a pre-order traversal of the Component hierarchy, and traverses
                  a Container&apos;s children according to the ordering of the array returned by
                  &lt;code&gt;Container.getComponents()&lt;/code&gt;. Portions of the hierarchy that are
                  not visible and displayable will not be searched.
                  &lt;p&gt;
                  If client code has explicitly set the focusability of a Component by either
                  overriding &lt;code&gt;Component.isFocusTraversable()&lt;/code&gt; or
                  &lt;code&gt;Component.isFocusable()&lt;/code&gt;, or by calling
                  &lt;code&gt;Component.setFocusable()&lt;/code&gt;, then a DefaultFocusTraversalPolicy
                  behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the
                  Component is relying on default focusability, then a
                  DefaultFocusTraversalPolicy will reject all Components with non-focusable
                  peers. This is the default FocusTraversalPolicy for all AWT Containers.
                  &lt;p&gt;
                  The focusability of a peer is implementation-dependent. Sun recommends that
                  all implementations for a particular native platform construct peers with
                  the same focusability. The recommendations for Windows and Unix are that
                  Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight
                  Components have non-focusable peers, and all other Components have focusable
                  peers. These recommendations are used in the Sun AWT implementations. Note
                  that the focusability of a Component&apos;s peer is different from, and does not
                  impact, the focusability of the Component itself.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/focus.html&quot;&gt;
                  How to Use the Focus Subsystem&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;, and the
                  &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt;
                  for more information.                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    Container#getComponents                    
                </see>
                <see>
                    Component#isFocusable                    
                </see>
                <see>
                    Component#setFocusable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="43">
                Determines whether a Component is an acceptable choice as the new
                  focus owner. The Component must be visible, displayable, and enabled
                  to be accepted. If client code has explicitly set the focusability
                  of the Component by either overriding
                  &lt;code&gt;Component.isFocusTraversable()&lt;/code&gt; or
                  &lt;code&gt;Component.isFocusable()&lt;/code&gt;, or by calling
                  &lt;code&gt;Component.setFocusable()&lt;/code&gt;, then the Component will be
                  accepted if and only if it is focusable. If, however, the Component is
                  relying on default focusability, then all Canvases, Labels, Panels,
                  Scrollbars, ScrollPanes, Windows, and lightweight Components will be
                  rejected.                
                <param>
                    aComponent the Component whose fitness as a focus owner is to
                      be tested                    
                </param>
                <return>
                    <code>true</code> if aComponent meets the above requirements;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="60">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="61"/>
                <scope line="64">
                    <scope line="65">
                        <scope line="66"/>
                        <scope line="69"/>
                    </scope>
                </scope>
                <declaration name="focusable" type="boolean" line="74"/>
                <scope line="75"/>
                <declaration name="peer" type="ComponentPeer" line="78"/>
            </method>
        </class>
    </source>