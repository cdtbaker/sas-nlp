<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.RenderingHints.Key"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.BufferedImageOp"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.renderable.RenderableImage"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.util.Map"/>
        <class name="Graphics2D" line="14">
            <extends class="Graphics"/>
            <javadoc line="14">
                This &lt;code&gt;Graphics2D&lt;/code&gt; class extends the{@link Graphics} class to provide more sophisticated
                  control over geometry, coordinate transformations, color management,
                  and text layout.  This is the fundamental class for rendering
                  2-dimensional shapes, text and images on the  Java(tm) platform.
                  &lt;p&gt;
                  &lt;h2&gt;Coordinate Spaces&lt;/h2&gt;
                  All coordinates passed to a &lt;code&gt;Graphics2D&lt;/code&gt; object are specified
                  in a device-independent coordinate system called User Space, which is
                  used by applications.  The &lt;code&gt;Graphics2D&lt;/code&gt; object contains
                  an {@link AffineTransform} object as part of its rendering state
                  that defines how to convert coordinates from user space to
                  device-dependent coordinates in Device Space.
                  &lt;p&gt;
                  Coordinates in device space usually refer to individual device pixels
                  and are aligned on the infinitely thin gaps between these pixels.
                  Some &lt;code&gt;Graphics2D&lt;/code&gt; objects can be used to capture rendering
                  operations for storage into a graphics metafile for playback on a
                  concrete device of unknown physical resolution at a later time.  Since
                  the resolution might not be known when the rendering operations are
                  captured, the &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Transform&lt;/code&gt; is set up
                  to transform user coordinates to a virtual device space that
                  approximates the expected resolution of the target device. Further
                  transformations might need to be applied at playback time if the
                  estimate is incorrect.
                  &lt;p&gt;
                  Some of the operations performed by the rendering attribute objects
                  occur in the device space, but all &lt;code&gt;Graphics2D&lt;/code&gt; methods take
                  user space coordinates.
                  &lt;p&gt;
                  Every &lt;code&gt;Graphics2D&lt;/code&gt; object is associated with a target that
                  defines where rendering takes place. A{@link GraphicsConfiguration} object defines the characteristics
                  of the rendering target, such as pixel format and resolution.
                  The same rendering target is used throughout the life of a
                  &lt;code&gt;Graphics2D&lt;/code&gt; object.
                  &lt;p&gt;
                  When creating a &lt;code&gt;Graphics2D&lt;/code&gt; object,  the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                  specifies the &lt;a name=&quot;#deftransform&quot;&gt;default transform&lt;/a&gt; for
                  the target of the &lt;code&gt;Graphics2D&lt;/code&gt; (a{@link Component} or {@link Image}).  This default transform maps the
                  user space coordinate system to screen and printer device coordinates
                  such that the origin maps to the upper left hand corner of the
                  target region of the device with increasing X coordinates extending
                  to the right and increasing Y coordinates extending downward.
                  The scaling of the default transform is set to identity for those devices
                  that are close to 72 dpi, such as screen devices.
                  The scaling of the default transform is set to approximately 72 user
                  space coordinates per square inch for high resolution devices, such as
                  printers.  For image buffers, the default transform is the
                  &lt;code&gt;Identity&lt;/code&gt; transform.
                  &lt;h2&gt;Rendering Process&lt;/h2&gt;
                  The Rendering Process can be broken down into four phases that are
                  controlled by the &lt;code&gt;Graphics2D&lt;/code&gt; rendering attributes.
                  The renderer can optimize many of these steps, either by caching the
                  results for future calls, by collapsing multiple virtual steps into
                  a single operation, or by recognizing various attributes as common
                  simple cases that can be eliminated by modifying other parts of the
                  operation.
                  &lt;p&gt;
                  The steps in the rendering process are:
                  &lt;ol&gt;
                  &lt;li&gt;
                  Determine what to render.
                  &lt;li&gt;
                  Constrain the rendering operation to the current &lt;code&gt;Clip&lt;/code&gt;.
                  The &lt;code&gt;Clip&lt;/code&gt; is specified by a {@link Shape} in user
                  space and is controlled by the program using the various clip
                  manipulation methods of &lt;code&gt;Graphics&lt;/code&gt; and
                  &lt;code&gt;Graphics2D&lt;/code&gt;.  This &lt;i&gt;user clip&lt;/i&gt;
                  is transformed into device space by the current
                  &lt;code&gt;Transform&lt;/code&gt; and combined with the
                  &lt;i&gt;device clip&lt;/i&gt;, which is defined by the visibility of windows and
                  device extents.  The combination of the user clip and device clip
                  defines the &lt;i&gt;composite clip&lt;/i&gt;, which determines the final clipping
                  region.  The user clip is not modified by the rendering
                  system to reflect the resulting composite clip.
                  &lt;li&gt;
                  Determine what colors to render.
                  &lt;li&gt;
                  Apply the colors to the destination drawing surface using the current{@link Composite} attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  &lt;/ol&gt;
                  &lt;br&gt;
                  The three types of rendering operations, along with details of each
                  of their particular rendering processes are:
                  &lt;ol&gt;
                  &lt;li&gt;
                  &lt;b&gt;&lt;a name=&quot;rendershape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt; operations&lt;/a&gt;&lt;/b&gt;
                  &lt;ol&gt;
                  &lt;li&gt;
                  If the operation is a &lt;code&gt;draw(Shape)&lt;/code&gt; operation, then
                  the  {@link Stroke#createStrokedShape(Shape) createStrokedShape}method on the current {@link Stroke} attribute in the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context is used to construct a new
                  &lt;code&gt;Shape&lt;/code&gt; object that contains the outline of the specified
                  &lt;code&gt;Shape&lt;/code&gt;.
                  &lt;li&gt;
                  The &lt;code&gt;Shape&lt;/code&gt; is transformed from user space to device space
                  using the current &lt;code&gt;Transform&lt;/code&gt;
                  in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  &lt;li&gt;
                  The outline of the &lt;code&gt;Shape&lt;/code&gt; is extracted using the{@link Shape#getPathIterator(AffineTransform) getPathIterator} method of
                  &lt;code&gt;Shape&lt;/code&gt;, which returns a{@link java.awt.geom.PathIterator PathIterator}object that iterates along the boundary of the &lt;code&gt;Shape&lt;/code&gt;.
                  &lt;li&gt;
                  If the &lt;code&gt;Graphics2D&lt;/code&gt; object cannot handle the curved segments
                  that the &lt;code&gt;PathIterator&lt;/code&gt; object returns then it can call the
                  alternate{@link Shape#getPathIterator(AffineTransform,double) getPathIterator}method of &lt;code&gt;Shape&lt;/code&gt;, which flattens the &lt;code&gt;Shape&lt;/code&gt;.
                  &lt;li&gt;
                  The current {@link Paint} in the &lt;code&gt;Graphics2D&lt;/code&gt; context
                  is queried for a {@link PaintContext}, which specifies the
                  colors to render in device space.
                  &lt;/ol&gt;
                  &lt;li&gt;
                  &lt;b&gt;&lt;a name=rendertext&gt;Text operations&lt;/a&gt;&lt;/b&gt;
                  &lt;ol&gt;
                  &lt;li&gt;
                  The following steps are used to determine the set of glyphs required
                  to render the indicated &lt;code&gt;String&lt;/code&gt;:
                  &lt;ol&gt;
                  &lt;li&gt;
                  If the argument is a &lt;code&gt;String&lt;/code&gt;, then the current
                  &lt;code&gt;Font&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt; context is asked to
                  convert the Unicode characters in the &lt;code&gt;String&lt;/code&gt; into a set of
                  glyphs for presentation with whatever basic layout and shaping
                  algorithms the font implements.
                  &lt;li&gt;
                  If the argument is an{@link AttributedCharacterIterator},
                  the iterator is asked to convert itself to a{@link java.awt.font.TextLayout TextLayout}using its embedded font attributes. The &lt;code&gt;TextLayout&lt;/code&gt;
                  implements more sophisticated glyph layout algorithms that
                  perform Unicode bi-directional layout adjustments automatically
                  for multiple fonts of differing writing directions.
                  &lt;li&gt;
                  If the argument is a{@link GlyphVector}, then the
                  &lt;code&gt;GlyphVector&lt;/code&gt; object already contains the appropriate
                  font-specific glyph codes with explicit coordinates for the position of
                  each glyph.
                  &lt;/ol&gt;
                  &lt;li&gt;
                  The current &lt;code&gt;Font&lt;/code&gt; is queried to obtain outlines for the
                  indicated glyphs.  These outlines are treated as shapes in user space
                  relative to the position of each glyph that was determined in step 1.
                  &lt;li&gt;
                  The character outlines are filled as indicated above
                  under &lt;a href=&quot;#rendershape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt; operations&lt;/a&gt;.
                  &lt;li&gt;
                  The current &lt;code&gt;Paint&lt;/code&gt; is queried for a
                  &lt;code&gt;PaintContext&lt;/code&gt;, which specifies
                  the colors to render in device space.
                  &lt;/ol&gt;
                  &lt;li&gt;
                  &lt;b&gt;&lt;a name= renderingimage&gt;&lt;code&gt;Image&lt;/code&gt; Operations&lt;/a&gt;&lt;/b&gt;
                  &lt;ol&gt;
                  &lt;li&gt;
                  The region of interest is defined by the bounding box of the source
                  &lt;code&gt;Image&lt;/code&gt;.
                  This bounding box is specified in Image Space, which is the
                  &lt;code&gt;Image&lt;/code&gt; object&apos;s local coordinate system.
                  &lt;li&gt;
                  If an &lt;code&gt;AffineTransform&lt;/code&gt; is passed to{@link #drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver) drawImage(Image, AffineTransform, ImageObserver)},
                  the &lt;code&gt;AffineTransform&lt;/code&gt; is used to transform the bounding
                  box from image space to user space. If no &lt;code&gt;AffineTransform&lt;/code&gt;
                  is supplied, the bounding box is treated as if it is already in user space.
                  &lt;li&gt;
                  The bounding box of the source &lt;code&gt;Image&lt;/code&gt; is transformed from user
                  space into device space using the current &lt;code&gt;Transform&lt;/code&gt;.
                  Note that the result of transforming the bounding box does not
                  necessarily result in a rectangular region in device space.
                  &lt;li&gt;
                  The &lt;code&gt;Image&lt;/code&gt; object determines what colors to render,
                  sampled according to the source to destination
                  coordinate mapping specified by the current &lt;code&gt;Transform&lt;/code&gt; and the
                  optional image transform.
                  &lt;/ol&gt;
                  &lt;/ol&gt;
                  &lt;h2&gt;Default Rendering Attributes&lt;/h2&gt;
                  The default values for the &lt;code&gt;Graphics2D&lt;/code&gt; rendering attributes are:
                  &lt;dl compact&gt;
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;The color of the &lt;code&gt;Component&lt;/code&gt;.
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;The &lt;code&gt;Font&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Stroke&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;A square pen with a linewidth of 1, no dashing, miter segment joins
                  and square end caps.
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;The{@link GraphicsConfiguration#getDefaultTransform() getDefaultTransform}for the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Composite&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;The {@link AlphaComposite#SRC_OVER} rule.
                  &lt;dt&gt;&lt;i&gt;&lt;code&gt;Clip&lt;/code&gt;&lt;/i&gt;
                  &lt;dd&gt;No rendering &lt;code&gt;Clip&lt;/code&gt;, the output is clipped to the
                  &lt;code&gt;Component&lt;/code&gt;.
                  &lt;/dl&gt;
                  &lt;h2&gt;Rendering Compatibility Issues&lt;/h2&gt;
                  The JDK(tm) 1.1 rendering model is based on a pixelization model
                  that specifies that coordinates
                  are infinitely thin, lying between the pixels.  Drawing operations are
                  performed using a one-pixel wide pen that fills the
                  pixel below and to the right of the anchor point on the path.
                  The JDK 1.1 rendering model is consistent with the
                  capabilities of most of the existing class of platform
                  renderers that need  to resolve integer coordinates to a
                  discrete pen that must fall completely on a specified number of pixels.
                  &lt;p&gt;
                  The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers.
                  A pen with a width of one pixel does not need to fall
                  completely on pixel N as opposed to pixel N+1.  The pen can fall
                  partially on both pixels. It is not necessary to choose a bias
                  direction for a wide pen since the blending that occurs along the
                  pen traversal edges makes the sub-pixel position of the pen
                  visible to the user.  On the other hand, when antialiasing is
                  turned off by setting the{@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint key
                  to the{@link RenderingHints#VALUE_ANTIALIAS_OFF VALUE_ANTIALIAS_OFF}hint value, the renderer might need
                  to apply a bias to determine which pixel to modify when the pen
                  is straddling a pixel boundary, such as when it is drawn
                  along an integer coordinate in device space.  While the capabilities
                  of an antialiasing renderer make it no longer necessary for the
                  rendering model to specify a bias for the pen, it is desirable for the
                  antialiasing and non-antialiasing renderers to perform similarly for
                  the common cases of drawing one-pixel wide horizontal and vertical
                  lines on the screen.  To ensure that turning on antialiasing by
                  setting the{@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint
                  key to{@link RenderingHints#VALUE_ANTIALIAS_ON VALUE_ANTIALIAS_ON}does not cause such lines to suddenly become twice as wide and half
                  as opaque, it is desirable to have the model specify a path for such
                  lines so that they completely cover a particular set of pixels to help
                  increase their crispness.
                  &lt;p&gt;
                  Java 2D API maintains compatibility with JDK 1.1 rendering
                  behavior, such that legacy operations and existing renderer
                  behavior is unchanged under Java 2D API.  Legacy
                  methods that map onto general &lt;code&gt;draw&lt;/code&gt; and
                  &lt;code&gt;fill&lt;/code&gt; methods are defined, which clearly indicates
                  how &lt;code&gt;Graphics2D&lt;/code&gt; extends &lt;code&gt;Graphics&lt;/code&gt; based
                  on settings of &lt;code&gt;Stroke&lt;/code&gt; and &lt;code&gt;Transform&lt;/code&gt;
                  attributes and rendering hints.  The definition
                  performs identically under default attribute settings.
                  For example, the default &lt;code&gt;Stroke&lt;/code&gt; is a
                  &lt;code&gt;BasicStroke&lt;/code&gt; with a width of 1 and no dashing and the
                  default Transform for screen drawing is an Identity transform.
                  &lt;p&gt;
                  The following two rules provide predictable rendering behavior whether
                  aliasing or antialiasing is being used.
                  &lt;ul&gt;
                  &lt;li&gt; Device coordinates are defined to be between device pixels which
                  avoids any inconsistent results between aliased and antaliased
                  rendering.  If coordinates were defined to be at a pixel&apos;s center, some
                  of the pixels covered by a shape, such as a rectangle, would only be
                  half covered.
                  With aliased rendering, the half covered pixels would either be
                  rendered inside the shape or outside the shape.  With anti-aliased
                  rendering, the pixels on the entire edge of the shape would be half
                  covered.  On the other hand, since coordinates are defined to be
                  between pixels, a shape like a rectangle would have no half covered
                  pixels, whether or not it is rendered using antialiasing.
                  &lt;li&gt; Lines and paths stroked using the &lt;code&gt;BasicStroke&lt;/code&gt;
                  object may be &quot;normalized&quot; to provide consistent rendering of the
                  outlines when positioned at various points on the drawable and
                  whether drawn with aliased or antialiased rendering.  This
                  normalization process is controlled by the{@link RenderingHints#KEY_STROKE_CONTROL KEY_STROKE_CONTROL} hint.
                  The exact normalization algorithm is not specified, but the goals
                  of this normalization are to ensure that lines are rendered with
                  consistent visual appearance regardless of how they fall on the
                  pixel grid and to promote more solid horizontal and vertical
                  lines in antialiased mode so that they resemble their non-antialiased
                  counterparts more closely.  A typical normalization step might
                  promote antialiased line endpoints to pixel centers to reduce the
                  amount of blending or adjust the subpixel positioning of
                  non-antialiased lines so that the floating point line widths
                  round to even or odd pixel counts with equal likelihood.  This
                  process can move endpoints by up to half a pixel (usually towards
                  positive infinity along both axes) to promote these consistent
                  results.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The following definitions of general legacy methods
                  perform identically to previously specified behavior under default
                  attribute settings:
                  &lt;ul&gt;
                  &lt;li&gt;
                  For &lt;code&gt;fill&lt;/code&gt; operations, including &lt;code&gt;fillRect&lt;/code&gt;,
                  &lt;code&gt;fillRoundRect&lt;/code&gt;, &lt;code&gt;fillOval&lt;/code&gt;,
                  &lt;code&gt;fillArc&lt;/code&gt;, &lt;code&gt;fillPolygon&lt;/code&gt;, and
                  &lt;code&gt;clearRect&lt;/code&gt;, {@link #fill(Shape) fill} can now be called
                  with the desired &lt;code&gt;Shape&lt;/code&gt;.  For example, when filling a
                  rectangle:
                  &lt;pre&gt;
                  fill(new Rectangle(x, y, w, h));
                  &lt;/pre&gt;
                  is called.
                  &lt;p&gt;
                  &lt;li&gt;
                  Similarly, for draw operations, including &lt;code&gt;drawLine&lt;/code&gt;,
                  &lt;code&gt;drawRect&lt;/code&gt;, &lt;code&gt;drawRoundRect&lt;/code&gt;,
                  &lt;code&gt;drawOval&lt;/code&gt;, &lt;code&gt;drawArc&lt;/code&gt;, &lt;code&gt;drawPolyline&lt;/code&gt;,
                  and &lt;code&gt;drawPolygon&lt;/code&gt;, {@link #draw(Shape) draw} can now be
                  called with the desired &lt;code&gt;Shape&lt;/code&gt;.  For example, when drawing a
                  rectangle:
                  &lt;pre&gt;
                  draw(new Rectangle(x, y, w, h));
                  &lt;/pre&gt;
                  is called.
                  &lt;p&gt;
                  &lt;li&gt;
                  The &lt;code&gt;draw3DRect&lt;/code&gt; and &lt;code&gt;fill3DRect&lt;/code&gt; methods were
                  implemented in terms of the &lt;code&gt;drawLine&lt;/code&gt; and
                  &lt;code&gt;fillRect&lt;/code&gt; methods in the &lt;code&gt;Graphics&lt;/code&gt; class which
                  would predicate their behavior upon the current &lt;code&gt;Stroke&lt;/code&gt;
                  and &lt;code&gt;Paint&lt;/code&gt; objects in a &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  This class overrides those implementations with versions that use
                  the current &lt;code&gt;Color&lt;/code&gt; exclusively, overriding the current
                  &lt;code&gt;Paint&lt;/code&gt; and which uses &lt;code&gt;fillRect&lt;/code&gt; to describe
                  the exact same behavior as the preexisting methods regardless of the
                  setting of the current &lt;code&gt;Stroke&lt;/code&gt;.
                  &lt;/ul&gt;
                  The &lt;code&gt;Graphics&lt;/code&gt; class defines only the &lt;code&gt;setColor&lt;/code&gt;
                  method to control the color to be painted.  Since the Java 2D API extends
                  the &lt;code&gt;Color&lt;/code&gt; object to implement the new &lt;code&gt;Paint&lt;/code&gt;
                  interface, the existing
                  &lt;code&gt;setColor&lt;/code&gt; method is now a convenience method for setting the
                  current &lt;code&gt;Paint&lt;/code&gt; attribute to a &lt;code&gt;Color&lt;/code&gt; object.
                  &lt;code&gt;setColor(c)&lt;/code&gt; is equivalent to &lt;code&gt;setPaint(c)&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;Graphics&lt;/code&gt; class defines two methods for controlling
                  how colors are applied to the destination.
                  &lt;ol&gt;
                  &lt;li&gt;
                  The &lt;code&gt;setPaintMode&lt;/code&gt; method is implemented as a convenience
                  method to set the default &lt;code&gt;Composite&lt;/code&gt;, equivalent to
                  &lt;code&gt;setComposite(new AlphaComposite.SrcOver)&lt;/code&gt;.
                  &lt;li&gt;
                  The &lt;code&gt;setXORMode(Color xorcolor)&lt;/code&gt; method is implemented
                  as a convenience method to set a special &lt;code&gt;Composite&lt;/code&gt; object that
                  ignores the &lt;code&gt;Alpha&lt;/code&gt; components of source colors and sets the
                  destination color to the value:
                  &lt;pre&gt;
                  dstpixel = (PixelOf(srccolor) ^ PixelOf(xorcolor) ^ dstpixel);
                  &lt;/pre&gt;
                  &lt;/ol&gt;                
                <author>
                    Jim Graham                    
                </author>
                <see>
                    java.awt.RenderingHints                    
                </see>
            </javadoc>
            <javadoc line="353">
                Constructs a new &lt;code&gt;Graphics2D&lt;/code&gt; object.  Since
                  &lt;code&gt;Graphics2D&lt;/code&gt; is an abstract class, and since it must be
                  customized by subclasses for different output devices,
                  &lt;code&gt;Graphics2D&lt;/code&gt; objects cannot be created directly.
                  Instead, &lt;code&gt;Graphics2D&lt;/code&gt; objects must be obtained from another
                  &lt;code&gt;Graphics2D&lt;/code&gt; object, created by a
                  &lt;code&gt;Component&lt;/code&gt;, or obtained from images such as{@link BufferedImage} objects.                
                <see>
                    java.awt.Component#getGraphics                    
                </see>
                <see>
                    java.awt.Graphics#create                    
                </see>
            </javadoc>
            <method name="Graphics2D" type="constructor" line="364"/>
            <javadoc line="366">
                Draws a 3-D highlighted outline of the specified rectangle.
                  The edges of the rectangle are highlighted so that they
                  appear to be beveled and lit from the upper left corner.
                  &lt;p&gt;
                  The colors used for the highlighting effect are determined
                  based on the current color.
                  The resulting rectangle covers an area that is
                  &lt;code&gt;width&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels wide
                  by &lt;code&gt;height&amp;nbsp;+&amp;nbsp;1&lt;/code&gt; pixels tall.  This method
                  uses the current &lt;code&gt;Color&lt;/code&gt; exclusively and ignores
                  the current &lt;code&gt;Paint&lt;/code&gt;.                
                <param>
                    x the x coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be drawn.                    
                </param>
                <param>
                    width the width of the rectangle to be drawn.                    
                </param>
                <param>
                    height the height of the rectangle to be drawn.                    
                </param>
                <param>
                    raised a boolean that determines whether the rectangle
                      appears to be raised above the surface
                      or sunk into the surface.                    
                </param>
                <see>
                    java.awt.Graphics#fill3DRect                    
                </see>
            </javadoc>
            <method name="draw3DRect" type="void" line="387">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="p" type="Paint" line="388"/>
                <declaration name="c" type="Color" line="389"/>
                <declaration name="brighter" type="Color" line="390"/>
                <declaration name="darker" type="Color" line="391"/>
            </method>
            <javadoc line="400">
                Paints a 3-D highlighted rectangle filled with the current color.
                  The edges of the rectangle are highlighted so that it appears
                  as if the edges were beveled and lit from the upper left corner.
                  The colors used for the highlighting effect and for filling are
                  determined from the current &lt;code&gt;Color&lt;/code&gt;.  This method uses
                  the current &lt;code&gt;Color&lt;/code&gt; exclusively and ignores the current
                  &lt;code&gt;Paint&lt;/code&gt;.                
                <param>
                    x the x coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    y the y coordinate of the rectangle to be filled.                    
                </param>
                <param>
                    width the width of the rectangle to be filled.                    
                </param>
                <param>
                    height the height of the rectangle to be filled.                    
                </param>
                <param>
                    raised a boolean value that determines whether the
                      rectangle appears to be raised above the surface
                      or etched into the surface.                    
                </param>
                <see>
                    java.awt.Graphics#draw3DRect                    
                </see>
            </javadoc>
            <method name="fill3DRect" type="void" line="417">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="raised" type="boolean"/>
                </params>
                <declaration name="p" type="Paint" line="418"/>
                <declaration name="c" type="Color" line="419"/>
                <declaration name="brighter" type="Color" line="420"/>
                <declaration name="darker" type="Color" line="421"/>
                <scope line="422"/>
                <scope line="425"/>
            </method>
            <method name="draw" type="void" line="437"/>
            <javadoc line="437">
                Strokes the outline of a &lt;code&gt;Shape&lt;/code&gt; using the settings of the
                  current &lt;code&gt;Graphics2D&lt;/code&gt; context.  The rendering attributes
                  applied include the &lt;code&gt;Clip&lt;/code&gt;, &lt;code&gt;Transform&lt;/code&gt;,
                  &lt;code&gt;Paint&lt;/code&gt;, &lt;code&gt;Composite&lt;/code&gt; and
                  &lt;code&gt;Stroke&lt;/code&gt; attributes.                
                <param>
                    s the &lt;code&gt;Shape&lt;/code&gt; to be rendered                    
                </param>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="drawImage" type="boolean" line="454"/>
            <javadoc line="454">
                Renders an image, applying a transform from image space into user space
                  before drawing.
                  The transformation from user space into device space is done with
                  the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt;.
                  The specified transformation is applied to the image before the
                  transform attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context is applied.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, and &lt;code&gt;Composite&lt;/code&gt; attributes.
                  Note that no rendering is done if the specified transform is
                  noninvertible.                
                <param>
                    img the specified image to be rendered.
                      This method does nothing if &lt;code&gt;img&lt;/code&gt; is null.                    
                </param>
                <param>
                    xform the transformation from image space into user space                    
                </param>
                <param>
                    obs the {@link ImageObserver}to be notified as more of the &lt;code&gt;Image&lt;/code&gt;
                      is converted                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Image&lt;/code&gt; is
                      fully loaded and completely rendered, or if it&apos;s null;
                      &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;Image&lt;/code&gt; is still being loaded.                    
                </return>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawImage" type="void" line="480"/>
            <javadoc line="480">
                Renders a &lt;code&gt;BufferedImage&lt;/code&gt; that is
                  filtered with a{@link BufferedImageOp}.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;
                  and &lt;code&gt;Composite&lt;/code&gt; attributes.  This is equivalent to:
                  &lt;pre&gt;
                  img1 = op.filter(img, null);
                  drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);
                  &lt;/pre&gt;                
                <param>
                    op the filter to be applied to the image before rendering                    
                </param>
                <param>
                    img the specified &lt;code&gt;BufferedImage&lt;/code&gt; to be rendered.
                      This method does nothing if &lt;code&gt;img&lt;/code&gt; is null.                    
                </param>
                <param>
                    x the x coordinate of the location in user space where
                      the upper left corner of the image is rendered                    
                </param>
                <param>
                    y the y coordinate of the location in user space where
                      the upper left corner of the image is rendered                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawRenderedImage" type="void" line="504"/>
            <javadoc line="504">
                Renders a {@link RenderedImage},
                  applying a transform from image
                  space into user space before drawing.
                  The transformation from user space into device space is done with
                  the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt;.
                  The specified transformation is applied to the image before the
                  transform attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context is applied.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, and &lt;code&gt;Composite&lt;/code&gt; attributes. Note
                  that no rendering is done if the specified transform is
                  noninvertible.                
                <param>
                    img the image to be rendered. This method does
                      nothing if &lt;code&gt;img&lt;/code&gt; is null.                    
                </param>
                <param>
                    xform the transformation from image space into user space                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawRenderableImage" type="void" line="526"/>
            <javadoc line="526">
                Renders a{@link RenderableImage},
                  applying a transform from image space into user space before drawing.
                  The transformation from user space into device space is done with
                  the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt;.
                  The specified transformation is applied to the image before the
                  transform attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context is applied.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, and &lt;code&gt;Composite&lt;/code&gt; attributes. Note
                  that no rendering is done if the specified transform is
                  noninvertible.
                  &lt;p&gt;
                  Rendering hints set on the &lt;code&gt;Graphics2D&lt;/code&gt; object might
                  be used in rendering the &lt;code&gt;RenderableImage&lt;/code&gt;.
                  If explicit control is required over specific hints recognized by a
                  specific &lt;code&gt;RenderableImage&lt;/code&gt;, or if knowledge of which hints
                  are used is required, then a &lt;code&gt;RenderedImage&lt;/code&gt; should be
                  obtained directly from the &lt;code&gt;RenderableImage&lt;/code&gt;
                  and rendered using{@link #drawRenderedImage(RenderedImage,AffineTransform) drawRenderedImage}.                
                <param>
                    img the image to be rendered. This method does
                      nothing if &lt;code&gt;img&lt;/code&gt; is null.                    
                </param>
                <param>
                    xform the transformation from image space into user space                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
                <see>
                    #drawRenderedImage                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="556"/>
            <javadoc line="556">
                Renders the text of the specified &lt;code&gt;String&lt;/code&gt;, using the
                  current text attribute state in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The baseline of the
                  first character is at position (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in
                  the User Space.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;, &lt;code&gt;Font&lt;/code&gt; and
                  &lt;code&gt;Composite&lt;/code&gt; attributes.  For characters in script
                  systems such as Hebrew and Arabic, the glyphs can be rendered from
                  right to left, in which case the coordinate supplied is the
                  location of the leftmost character on the baseline.                
                <param>
                    str the string to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the
                      &lt;code&gt;String&lt;/code&gt; should be rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the
                      &lt;code&gt;String&lt;/code&gt; should be rendered                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    java.awt.Graphics#drawBytes                    
                </see>
                <see>
                    java.awt.Graphics#drawChars                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="drawString" type="void" line="580"/>
            <javadoc line="580">
                Renders the text specified by the specified &lt;code&gt;String&lt;/code&gt;,
                  using the current text attribute state in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The baseline of the first character is at position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the User Space.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;, &lt;code&gt;Font&lt;/code&gt; and
                  &lt;code&gt;Composite&lt;/code&gt; attributes. For characters in script systems
                  such as Hebrew and Arabic, the glyphs can be rendered from right to
                  left, in which case the coordinate supplied is the location of the
                  leftmost character on the baseline.                
                <param>
                    str the &lt;code&gt;String&lt;/code&gt; to be rendered                    
                </param>
                <param>
                    x the x coordinate of the location where the
                      &lt;code&gt;String&lt;/code&gt; should be rendered                    
                </param>
                <param>
                    y the y coordinate of the location where the
                      &lt;code&gt;String&lt;/code&gt; should be rendered                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;str&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    java.awt.Graphics#setFont                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="606"/>
            <javadoc line="606">
                Renders the text of the specified iterator applying its attributes
                  in accordance with the specification of the {@link TextAttribute} class.
                  &lt;p&gt;
                  The baseline of the first character is at position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in User Space.
                  For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character
                  on the baseline.                
                <param>
                    iterator the iterator whose text is to be rendered                    
                </param>
                <param>
                    x the x coordinate where the iterator&apos;s text is to be
                      rendered                    
                </param>
                <param>
                    y the y coordinate where the iterator&apos;s text is to be
                      rendered                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;iterator&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawString" type="void" line="630"/>
            <javadoc line="630">
                Renders the text of the specified iterator applying its attributes
                  in accordance with the specification of the {@link TextAttribute} class.
                  &lt;p&gt;
                  The baseline of the first character is at position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in User Space.
                  For characters in script systems such as Hebrew and Arabic,
                  the glyphs can be rendered from right to left, in which case the
                  coordinate supplied is the location of the leftmost character
                  on the baseline.                
                <param>
                    iterator the iterator whose text is to be rendered                    
                </param>
                <param>
                    x the x coordinate where the iterator&apos;s text is to be
                      rendered                    
                </param>
                <param>
                    y the y coordinate where the iterator&apos;s text is to be
                      rendered                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;iterator&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="drawGlyphVector" type="void" line="654"/>
            <javadoc line="654">
                Renders the text of the specified{@link GlyphVector} using
                  the &lt;code&gt;Graphics2D&lt;/code&gt; context&apos;s rendering attributes.
                  The rendering attributes applied include the &lt;code&gt;Clip&lt;/code&gt;,
                  &lt;code&gt;Transform&lt;/code&gt;, &lt;code&gt;Paint&lt;/code&gt;, and
                  &lt;code&gt;Composite&lt;/code&gt; attributes.  The &lt;code&gt;GlyphVector&lt;/code&gt;
                  specifies individual glyphs from a {@link Font}.
                  The &lt;code&gt;GlyphVector&lt;/code&gt; can also contain the glyph positions.
                  This is the fastest way to render a set of characters to the
                  screen.                
                <param>
                    g the &lt;code&gt;GlyphVector&lt;/code&gt; to be rendered                    
                </param>
                <param>
                    x the x position in User Space where the glyphs should
                      be rendered                    
                </param>
                <param>
                    y the y position in User Space where the glyphs should
                      be rendered                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;g&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <see>
                    java.awt.Font#createGlyphVector                    
                </see>
                <see>
                    java.awt.font.GlyphVector                    
                </see>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="fill" type="void" line="679"/>
            <javadoc line="679">
                Fills the interior of a &lt;code&gt;Shape&lt;/code&gt; using the settings of the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context. The rendering attributes applied
                  include the &lt;code&gt;Clip&lt;/code&gt;, &lt;code&gt;Transform&lt;/code&gt;,
                  &lt;code&gt;Paint&lt;/code&gt;, and &lt;code&gt;Composite&lt;/code&gt;.                
                <param>
                    s the &lt;code&gt;Shape&lt;/code&gt; to be filled                    
                </param>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #setComposite                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="hit" type="boolean" line="694"/>
            <javadoc line="694">
                Checks whether or not the specified &lt;code&gt;Shape&lt;/code&gt; intersects
                  the specified {@link Rectangle}, which is in device
                  space. If &lt;code&gt;onStroke&lt;/code&gt; is false, this method checks
                  whether or not the interior of the specified &lt;code&gt;Shape&lt;/code&gt;
                  intersects the specified &lt;code&gt;Rectangle&lt;/code&gt;.  If
                  &lt;code&gt;onStroke&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this method checks
                  whether or not the &lt;code&gt;Stroke&lt;/code&gt; of the specified
                  &lt;code&gt;Shape&lt;/code&gt; outline intersects the specified
                  &lt;code&gt;Rectangle&lt;/code&gt;.
                  The rendering attributes taken into account include the
                  &lt;code&gt;Clip&lt;/code&gt;, &lt;code&gt;Transform&lt;/code&gt;, and &lt;code&gt;Stroke&lt;/code&gt;
                  attributes.                
                <param>
                    rect the area in device space to check for a hit                    
                </param>
                <param>
                    s the &lt;code&gt;Shape&lt;/code&gt; to check for a hit                    
                </param>
                <param>
                    onStroke flag used to choose between testing the
                      stroked or the filled shape.  If the flag is &lt;code&gt;true&lt;/code&gt;, the
                      &lt;code&gt;Stroke&lt;/code&gt; oultine is tested.  If the flag is
                      &lt;code&gt;false&lt;/code&gt;, the filled &lt;code&gt;Shape&lt;/code&gt; is tested.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if there is a hit; &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <see>
                    #setStroke                    
                </see>
                <see>
                    #fill                    
                </see>
                <see>
                    #draw                    
                </see>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
                <see>
                    #clip                    
                </see>
                <see>
                    #setClip                    
                </see>
            </javadoc>
            <method name="getDeviceConfiguration" type="GraphicsConfiguration" line="724"/>
            <javadoc line="724">
                Returns the device configuration associated with this
                  &lt;code&gt;Graphics2D&lt;/code&gt;.                
                <return>
                    the device configuration of this &lt;code&gt;Graphics2D&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="setComposite" type="void" line="730"/>
            <javadoc line="730">
                Sets the &lt;code&gt;Composite&lt;/code&gt; for the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The &lt;code&gt;Composite&lt;/code&gt; is used in all drawing methods such as
                  &lt;code&gt;drawImage&lt;/code&gt;, &lt;code&gt;drawString&lt;/code&gt;, &lt;code&gt;draw&lt;/code&gt;,
                  and &lt;code&gt;fill&lt;/code&gt;.  It specifies how new pixels are to be combined
                  with the existing pixels on the graphics device during the rendering
                  process.
                  &lt;p&gt;If this &lt;code&gt;Graphics2D&lt;/code&gt; context is drawing to a
                  &lt;code&gt;Component&lt;/code&gt; on the display screen and the
                  &lt;code&gt;Composite&lt;/code&gt; is a custom object rather than an
                  instance of the &lt;code&gt;AlphaComposite&lt;/code&gt; class, and if
                  there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
                  method is called with an &lt;code&gt;AWTPermission(&quot;readDisplayPixels&quot;)&lt;/code&gt;
                  permission.                
                <throws>
                    SecurityExceptionif a custom &lt;code&gt;Composite&lt;/code&gt; object is being
                      used to render to the screen and a security manager
                      is set and its &lt;code&gt;checkPermission&lt;/code&gt; method
                      does not allow the operation.                    
                </throws>
                <param>
                    comp the &lt;code&gt;Composite&lt;/code&gt; object to be used for rendering                    
                </param>
                <see>
                    java.awt.Graphics#setXORMode                    
                </see>
                <see>
                    java.awt.Graphics#setPaintMode                    
                </see>
                <see>
                    #getComposite                    
                </see>
                <see>
                    AlphaComposite                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    java.awt.AWTPermission                    
                </see>
            </javadoc>
            <method name="setPaint" type="void" line="757"/>
            <javadoc line="757">
                Sets the &lt;code&gt;Paint&lt;/code&gt; attribute for the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.  Calling this method
                  with a &lt;code&gt;null&lt;/code&gt; &lt;code&gt;Paint&lt;/code&gt; object does
                  not have any effect on the current &lt;code&gt;Paint&lt;/code&gt; attribute
                  of this &lt;code&gt;Graphics2D&lt;/code&gt;.                
                <param>
                    paint the &lt;code&gt;Paint&lt;/code&gt; object to be used to generate
                      color during the rendering process, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
                <see>
                    #getPaint                    
                </see>
                <see>
                    GradientPaint                    
                </see>
                <see>
                    TexturePaint                    
                </see>
            </javadoc>
            <method name="setStroke" type="void" line="771"/>
            <javadoc line="771">
                Sets the &lt;code&gt;Stroke&lt;/code&gt; for the &lt;code&gt;Graphics2D&lt;/code&gt; context.                
                <param>
                    s the &lt;code&gt;Stroke&lt;/code&gt; object to be used to stroke a
                      &lt;code&gt;Shape&lt;/code&gt; during the rendering process                    
                </param>
                <see>
                    BasicStroke                    
                </see>
                <see>
                    #getStroke                    
                </see>
            </javadoc>
            <method name="setRenderingHint" type="void" line="779"/>
            <javadoc line="779">
                Sets the value of a single preference for the rendering algorithms.
                  Hint categories include controls for rendering quality and overall
                  time/quality trade-off in the rendering process.  Refer to the
                  &lt;code&gt;RenderingHints&lt;/code&gt; class for definitions of some common
                  keys and values.                
                <param>
                    hintKey the key of the hint to be set.                    
                </param>
                <param>
                    hintValue the value indicating preferences for the specified
                      hint category.                    
                </param>
                <see>
                    #getRenderingHint(RenderingHints.Key)                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="getRenderingHint" type="Object" line="792"/>
            <javadoc line="792">
                Returns the value of a single preference for the rendering algorithms.
                  Hint categories include controls for rendering quality and overall
                  time/quality trade-off in the rendering process.  Refer to the
                  &lt;code&gt;RenderingHints&lt;/code&gt; class for definitions of some common
                  keys and values.                
                <param>
                    hintKey the key corresponding to the hint to get.                    
                </param>
                <return>
                    an object representing the value for the specified hint key.
                      Some of the keys and their associated values are defined in the
                      &lt;code&gt;RenderingHints&lt;/code&gt; class.                    
                </return>
                <see>
                    RenderingHints                    
                </see>
                <see>
                    #setRenderingHint(RenderingHints.Key,Object)                    
                </see>
            </javadoc>
            <method name="setRenderingHints" type="void" line="806"/>
            <javadoc line="806">
                Replaces the values of all preferences for the rendering
                  algorithms with the specified &lt;code&gt;hints&lt;/code&gt;.
                  The existing values for all rendering hints are discarded and
                  the new set of known hints and values are initialized from the
                  specified {@link Map} object.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.
                  Refer to the &lt;code&gt;RenderingHints&lt;/code&gt; class for definitions of
                  some common keys and values.                
                <param>
                    hints the rendering hints to be set                    
                </param>
                <see>
                    #getRenderingHints                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="addRenderingHints" type="void" line="821"/>
            <javadoc line="821">
                Sets the values of an arbitrary number of preferences for the
                  rendering algorithms.
                  Only values for the rendering hints that are present in the
                  specified &lt;code&gt;Map&lt;/code&gt; object are modified.
                  All other preferences not present in the specified
                  object are left unmodified.
                  Hint categories include controls for rendering quality and
                  overall time/quality trade-off in the rendering process.
                  Refer to the &lt;code&gt;RenderingHints&lt;/code&gt; class for definitions of
                  some common keys and values.                
                <param>
                    hints the rendering hints to be set                    
                </param>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="836"/>
            <javadoc line="836">
                Gets the preferences for the rendering algorithms.  Hint categories
                  include controls for rendering quality and overall time/quality
                  trade-off in the rendering process.
                  Returns all of the hint key/value pairs that were ever specified in
                  one operation.  Refer to the
                  &lt;code&gt;RenderingHints&lt;/code&gt; class for definitions of some common
                  keys and values.                
                <return>
                    a reference to an instance of &lt;code&gt;RenderingHints&lt;/code&gt;
                      that contains the current preferences.                    
                </return>
                <see>
                    RenderingHints                    
                </see>
                <see>
                    #setRenderingHints(Map)                    
                </see>
            </javadoc>
            <method name="translate" type="void" line="850"/>
            <javadoc line="850">
                Translates the origin of the &lt;code&gt;Graphics2D&lt;/code&gt; context to the
                  point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the current coordinate system.
                  Modifies the &lt;code&gt;Graphics2D&lt;/code&gt; context so that its new origin
                  corresponds to the point (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context&apos;s former coordinate system.  All
                  coordinates used in subsequent rendering operations on this graphics
                  context are relative to this new origin.                
                <param>
                    x the specified x coordinate                    
                </param>
                <param>
                    y the specified y coordinate                    
                </param>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <method name="translate" type="void" line="863"/>
            <javadoc line="863">
                Concatenates the current
                  &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Transform&lt;/code&gt;
                  with a translation transform.
                  Subsequent rendering is translated by the specified
                  distance relative to the previous position.
                  This is equivalent to calling transform(T), where T is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    tx the distance to translate along the x-axis                    
                </param>
                <param>
                    ty the distance to translate along the y-axis                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="880"/>
            <javadoc line="880">
                Concatenates the current &lt;code&gt;Graphics2D&lt;/code&gt;
                  &lt;code&gt;Transform&lt;/code&gt; with a rotation transform.
                  Subsequent rendering is rotated by the specified radians relative
                  to the previous origin.
                  This is equivalent to calling &lt;code&gt;transform(R)&lt;/code&gt;, where R is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta the angle of rotation in radians                    
                </param>
            </javadoc>
            <method name="rotate" type="void" line="897"/>
            <javadoc line="897">
                Concatenates the current &lt;code&gt;Graphics2D&lt;/code&gt;
                  &lt;code&gt;Transform&lt;/code&gt; with a translated rotation
                  transform.  Subsequent rendering is transformed by a transform
                  which is constructed by translating to the specified location,
                  rotating by the specified radians, and translating back by the same
                  amount as the original translation.  This is equivalent to the
                  following sequence of calls:
                  &lt;pre&gt;
                  translate(x, y);
                  rotate(theta);
                  translate(-x, -y);
                  &lt;/pre&gt;
                  Rotating with a positive angle theta rotates points on the positive
                  x axis toward the positive y axis.                
                <param>
                    theta the angle of rotation in radians                    
                </param>
                <param>
                    x the x coordinate of the origin of the rotation                    
                </param>
                <param>
                    y the y coordinate of the origin of the rotation                    
                </param>
            </javadoc>
            <method name="scale" type="void" line="917"/>
            <javadoc line="917">
                Concatenates the current &lt;code&gt;Graphics2D&lt;/code&gt;
                  &lt;code&gt;Transform&lt;/code&gt; with a scaling transformation
                  Subsequent rendering is resized according to the specified scaling
                  factors relative to the previous scaling.
                  This is equivalent to calling &lt;code&gt;transform(S)&lt;/code&gt;, where S is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    sx the amount by which X coordinates in subsequent
                      rendering operations are multiplied relative to previous
                      rendering operations.                    
                </param>
                <param>
                    sy the amount by which Y coordinates in subsequent
                      rendering operations are multiplied relative to previous
                      rendering operations.                    
                </param>
            </javadoc>
            <method name="shear" type="void" line="937"/>
            <javadoc line="937">
                Concatenates the current &lt;code&gt;Graphics2D&lt;/code&gt;
                  &lt;code&gt;Transform&lt;/code&gt; with a shearing transform.
                  Subsequent renderings are sheared by the specified
                  multiplier relative to the previous position.
                  This is equivalent to calling &lt;code&gt;transform(SH)&lt;/code&gt;, where SH
                  is an &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following
                  matrix:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx the multiplier by which coordinates are shifted in
                      the positive X axis direction as a function of their Y coordinate                    
                </param>
                <param>
                    shy the multiplier by which coordinates are shifted in
                      the positive Y axis direction as a function of their X coordinate                    
                </param>
            </javadoc>
            <method name="transform" type="void" line="956"/>
            <javadoc line="956">
                Composes an &lt;code&gt;AffineTransform&lt;/code&gt; object with the
                  &lt;code&gt;Transform&lt;/code&gt; in this &lt;code&gt;Graphics2D&lt;/code&gt; according
                  to the rule last-specified-first-applied.  If the current
                  &lt;code&gt;Transform&lt;/code&gt; is Cx, the result of composition
                  with Tx is a new &lt;code&gt;Transform&lt;/code&gt; Cx&apos;.  Cx&apos; becomes the
                  current &lt;code&gt;Transform&lt;/code&gt; for this &lt;code&gt;Graphics2D&lt;/code&gt;.
                  Transforming a point p by the updated &lt;code&gt;Transform&lt;/code&gt; Cx&apos; is
                  equivalent to first transforming p by Tx and then transforming
                  the result by the original &lt;code&gt;Transform&lt;/code&gt; Cx.  In other
                  words, Cx&apos;(p) = Cx(Tx(p)).  A copy of the Tx is made, if necessary,
                  so further modifications to Tx do not affect rendering.                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; object to be composed with
                      the current &lt;code&gt;Transform&lt;/code&gt;                    
                </param>
                <see>
                    #setTransform                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="setTransform" type="void" line="974"/>
            <javadoc line="974">
                Overwrites the Transform in the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  WARNING: This method should &lt;b&gt;never&lt;/b&gt; be used to apply a new
                  coordinate transform on top of an existing transform because the
                  &lt;code&gt;Graphics2D&lt;/code&gt; might already have a transform that is
                  needed for other purposes, such as rendering Swing
                  components or applying a scaling transformation to adjust for the
                  resolution of a printer.
                  &lt;p&gt;To add a coordinate transform, use the
                  &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;,
                  or &lt;code&gt;shear&lt;/code&gt; methods.  The &lt;code&gt;setTransform&lt;/code&gt;
                  method is intended only for restoring the original
                  &lt;code&gt;Graphics2D&lt;/code&gt; transform after rendering, as shown in this
                  example:
                  &lt;pre&gt;&lt;blockquote&gt;
                  // Get the current transform
                  AffineTransform saveAT = g2.getTransform();
                  // Perform transformation
                  g2d.transform(...);
                  // Render
                  g2d.draw(...);
                  // Restore original transform
                  g2d.setTransform(saveAT);
                  &lt;/blockquote&gt;&lt;/pre&gt;                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; that was retrieved
                      from the &lt;code&gt;getTransform&lt;/code&gt; method                    
                </param>
                <see>
                    #transform                    
                </see>
                <see>
                    #getTransform                    
                </see>
                <see>
                    AffineTransform                    
                </see>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="1005"/>
            <javadoc line="1005">
                Returns a copy of the current &lt;code&gt;Transform&lt;/code&gt; in the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.                
                <return>
                    the current &lt;code&gt;AffineTransform&lt;/code&gt; in the
                      &lt;code&gt;Graphics2D&lt;/code&gt; context.                    
                </return>
                <see>
                    #transform                    
                </see>
                <see>
                    #setTransform                    
                </see>
            </javadoc>
            <method name="getPaint" type="Paint" line="1014"/>
            <javadoc line="1014">
                Returns the current &lt;code&gt;Paint&lt;/code&gt; of the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.                
                <return>
                    the current &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Paint&lt;/code&gt;,
                      which defines a color or pattern.                    
                </return>
                <see>
                    #setPaint                    
                </see>
                <see>
                    java.awt.Graphics#setColor                    
                </see>
            </javadoc>
            <method name="getComposite" type="Composite" line="1023"/>
            <javadoc line="1023">
                Returns the current &lt;code&gt;Composite&lt;/code&gt; in the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.                
                <return>
                    the current &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Composite&lt;/code&gt;,
                      which defines a compositing style.                    
                </return>
                <see>
                    #setComposite                    
                </see>
            </javadoc>
            <method name="setBackground" type="void" line="1031"/>
            <javadoc line="1031">
                Sets the background color for the &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The background color is used for clearing a region.
                  When a &lt;code&gt;Graphics2D&lt;/code&gt; is constructed for a
                  &lt;code&gt;Component&lt;/code&gt;, the background color is
                  inherited from the &lt;code&gt;Component&lt;/code&gt;. Setting the background color
                  in the &lt;code&gt;Graphics2D&lt;/code&gt; context only affects the subsequent
                  &lt;code&gt;clearRect&lt;/code&gt; calls and not the background color of the
                  &lt;code&gt;Component&lt;/code&gt;.  To change the background
                  of the &lt;code&gt;Component&lt;/code&gt;, use appropriate methods of
                  the &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    color the background color that isused in
                      subsequent calls to &lt;code&gt;clearRect&lt;/code&gt;                    
                </param>
                <see>
                    #getBackground                    
                </see>
                <see>
                    java.awt.Graphics#clearRect                    
                </see>
            </javadoc>
            <method name="getBackground" type="Color" line="1048"/>
            <javadoc line="1048">
                Returns the background color used for clearing a region.                
                <return>
                    the current &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Color&lt;/code&gt;,
                      which defines the background color.                    
                </return>
                <see>
                    #setBackground                    
                </see>
            </javadoc>
            <method name="getStroke" type="Stroke" line="1055"/>
            <javadoc line="1055">
                Returns the current &lt;code&gt;Stroke&lt;/code&gt; in the
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.                
                <return>
                    the current &lt;code&gt;Graphics2D&lt;/code&gt; &lt;code&gt;Stroke&lt;/code&gt;,
                      which defines the line style.                    
                </return>
                <see>
                    #setStroke                    
                </see>
            </javadoc>
            <method name="clip" type="void" line="1063"/>
            <javadoc line="1063">
                Intersects the current &lt;code&gt;Clip&lt;/code&gt; with the interior of the
                  specified &lt;code&gt;Shape&lt;/code&gt; and sets the &lt;code&gt;Clip&lt;/code&gt; to the
                  resulting intersection.  The specified &lt;code&gt;Shape&lt;/code&gt; is
                  transformed with the current &lt;code&gt;Graphics2D&lt;/code&gt;
                  &lt;code&gt;Transform&lt;/code&gt; before being intersected with the current
                  &lt;code&gt;Clip&lt;/code&gt;.  This method is used to make the current
                  &lt;code&gt;Clip&lt;/code&gt; smaller.
                  To make the &lt;code&gt;Clip&lt;/code&gt; larger, use &lt;code&gt;setClip&lt;/code&gt;.
                  The &lt;i&gt;user clip&lt;/i&gt; modified by this method is independent of the
                  clipping associated with device bounds and visibility.  If no clip has
                  previously been set, or if the clip has been cleared using{@link Graphics#setClip(Shape) setClip} with a &lt;code&gt;null&lt;/code&gt;
                  argument, the specified &lt;code&gt;Shape&lt;/code&gt; becomes the new
                  user clip.                
                <param>
                    s the &lt;code&gt;Shape&lt;/code&gt; to be intersected with the current
                      &lt;code&gt;Clip&lt;/code&gt;.  If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                      this method clears the current &lt;code&gt;Clip&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="1082"/>
            <javadoc line="1082">
                Get the rendering context of the &lt;code&gt;Font&lt;/code&gt; within this
                  &lt;code&gt;Graphics2D&lt;/code&gt; context.
                  The {@link FontRenderContext}encapsulates application hints such as anti-aliasing and
                  fractional metrics, as well as target device specific information
                  such as dots-per-inch.  This information should be provided by the
                  application when using objects that perform typographical
                  formatting, such as &lt;code&gt;Font&lt;/code&gt; and
                  &lt;code&gt;TextLayout&lt;/code&gt;.  This information should also be provided
                  by applications that perform their own layout and need accurate
                  measurements of various characteristics of glyphs such as advance
                  and line height when various rendering hints have been applied to
                  the text rendering.                
                <return>
                    a reference to an instance of FontRenderContext.                    
                </return>
                <see>
                    java.awt.font.FontRenderContext                    
                </see>
                <see>
                    java.awt.Font#createGlyphVector                    
                </see>
                <see>
                    java.awt.font.TextLayout                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
        </class>
    </source>