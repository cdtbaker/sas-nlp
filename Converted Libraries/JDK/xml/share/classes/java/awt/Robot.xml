<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.peer.RobotPeer"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="sun.awt.ComponentFactory"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="Robot" line="15">
            <javadoc line="15">
                This class is used to generate native system input events
                  for the purposes of test automation, self-running demos, and
                  other applications where control of the mouse and keyboard
                  is needed. The primary purpose of Robot is to facilitate
                  automated testing of Java platform implementations.
                  &lt;p&gt;
                  Using the class to generate input events differs from posting
                  events to the AWT event queue or AWT components in that the
                  events are generated in the platform&apos;s native input
                  queue. For example, &lt;code&gt;Robot.mouseMove&lt;/code&gt; will actually move
                  the mouse cursor instead of just generating mouse move events.
                  &lt;p&gt;
                  Note that some platforms require special privileges or extensions
                  to access low-level input control. If the current platform configuration
                  does not allow input control, an &lt;code&gt;AWTException&lt;/code&gt; will be thrown
                  when trying to construct Robot objects. For example, X-Window systems
                  will throw the exception if the XTEST 2.2 standard extension is not supported
                  (or not enabled) by the X server.
                  &lt;p&gt;
                  Applications that use Robot for purposes other than self-testing should
                  handle these error conditions gracefully.                
                <author>
                    Robi Khan                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="MAX_DELAY" type="int" line="41"/>
            <declaration name="peer" type="RobotPeer" line="42"/>
            <declaration name="isAutoWaitForIdle" type="boolean" line="43"/>
            <declaration name="autoDelay" type="int" line="44"/>
            <declaration name="LEGAL_BUTTON_MASK" type="int" line="45"/>
            <declaration name="gdLoc" type="Point" line="46"/>
            <declaration name="screenCapCM" type="DirectColorModel" line="47"/>
            <javadoc line="48">
                Constructs a Robot object in the coordinate system of the primary screen.
                  &lt;p&gt;                
                <throws>
                    AWTException if the platform configuration does not allow
                      low-level input control.  This exception is always thrown when
                      GraphicsEnvironment.isHeadless() returns true                    
                </throws>
                <throws>
                    SecurityException if <code>createRobot</code> permission is not granted                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="Robot" type="constructor" line="59">
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Creates a Robot for the given screen device. Coordinates passed
                  to Robot method calls like mouseMove and createScreenCapture will
                  be interpreted as being in the same coordinate system as the
                  specified screen. Note that depending on the platform configuration,
                  multiple screens may either:
                  &lt;ul&gt;
                  &lt;li&gt;share the same coordinate system to form a combined virtual screen&lt;/li&gt;
                  &lt;li&gt;use different coordinate systems to act as independent screens&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor is meant for the latter case.
                  &lt;p&gt;
                  If screen devices are reconfigured such that the coordinate system is
                  affected, the behavior of existing Robot objects is undefined.                
                <param>
                    screen    A screen GraphicsDevice indicating the coordinate
                      system the Robot will operate in.                    
                </param>
                <throws>
                    AWTException if the platform configuration does not allow
                      low-level input control.  This exception is always thrown when
                      GraphicsEnvironment.isHeadless() returns true.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>screen</code> is not a screen
                      GraphicsDevice.                    
                </throws>
                <throws>
                    SecurityException if <code>createRobot</code> permission is not granted                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    GraphicsDevice                    
                </see>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="Robot" type="constructor" line="92">
                <params>
                    <param name="screen" type="GraphicsDevice"/>
                </params>
            </method>
            <method name="init" type="void" line="96">
                <params>
                    <param name="screen" type="GraphicsDevice"/>
                </params>
                <declaration name="toolkit" type="Toolkit" line="99"/>
                <scope line="100"/>
            </method>
            <method name="initLegalButtonMask" type="void" line="107">
                <declaration name="tmpMask" type="int" line="109"/>
                <scope line="110">
                    <scope line="111">
                        <declaration name="buttonsNumber" type="int" line="112"/>
                        <scope line="113"/>
                    </scope>
                </scope>
            </method>
            <method name="checkRobotAllowed" type="void" line="121">
                <declaration name="security" type="SecurityManager" line="122"/>
                <scope line="123"/>
            </method>
            <method name="checkIsScreenDevice" type="void" line="127">
                <params>
                    <param name="device" type="GraphicsDevice"/>
                </params>
                <scope line="128"/>
            </method>
            <declaration name="anchor" type="Object" line="132"/>
            <class name="RobotDisposer" line="133">
                <implements interface="sun.java2d.DisposerRecord"/>
                <declaration name="peer" type="RobotPeer" line="134"/>
                <method name="RobotDisposer" type="constructor" line="135">
                    <params>
                        <param name="peer" type="RobotPeer"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="138">
                    <scope line="139"/>
                </method>
            </class>
            <declaration name="disposer" type="RobotDisposer" line="144"/>
            <javadoc line="145">
                Moves mouse pointer to given screen coordinates.                
                <param>
                    x         X position                    
                </param>
                <param>
                    y         Y position                    
                </param>
            </javadoc>
            <method name="mouseMove" type="void" line="150">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Presses one or more mouse buttons.  The mouse buttons should
                  be released using the {@link #mouseRelease(int)} method.                
                <param>
                    buttons the Button mask; a combination of one or more
                      mouse button masks.
                      <p>
                      It is allowed to use only a combination of valid values as a {@code buttons} parameter.
                      A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},{@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}and values returned by the{@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.
                      The valid combination also depends on a{@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:
                      <ul>
                      <li> If support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
                      then it is allowed to use only the following standard button masks:{@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},{@code InputEvent.BUTTON3_DOWN_MASK}.
                      <li> If support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
                      then it is allowed to use the standard button masks
                      and masks for existing extended mouse buttons, if the mouse has more then three buttons.
                      In that way, it is allowed to use the button masks corresponding to the buttons
                      in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.
                      <br>
                      It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}method to obtain the mask for any mouse button by its number.
                      </ul>
                      <p>
                      The following standard button masks are also accepted:
                      <ul>
                      <li>{@code InputEvent.BUTTON1_MASK}<li>{@code InputEvent.BUTTON2_MASK}<li>{@code InputEvent.BUTTON3_MASK}</ul>
                      However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},{@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.
                      Either extended {@code _DOWN_MASK} or old {@code _MASK} values
                      should be used, but both those models should not be mixed.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code buttons} mask contains the mask for extra mouse button
                      and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if the {@code buttons} mask contains the mask for extra mouse button
                      that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java                    
                </throws>
                <see>
                    #mouseRelease(int)                    
                </see>
                <see>
                    InputEvent#getMaskForButton(int)                    
                </see>
                <see>
                    Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
                <see>
                    java.awt.MouseInfo#getNumberOfButtons()                    
                </see>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
            </javadoc>
            <method name="mousePress" type="void" line="191">
                <params>
                    <param name="buttons" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Releases one or more mouse buttons.                
                <param>
                    buttons the Button mask; a combination of one or more
                      mouse button masks.
                      <p>
                      It is allowed to use only a combination of valid values as a {@code buttons} parameter.
                      A valid combination consists of {@code InputEvent.BUTTON1_DOWN_MASK},{@code InputEvent.BUTTON2_DOWN_MASK}, {@code InputEvent.BUTTON3_DOWN_MASK}and values returned by the{@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)} method.
                      The valid combination also depends on a{@link Toolkit#areExtraMouseButtonsEnabled() Toolkit.areExtraMouseButtonsEnabled()} value as follows:
                      <ul>
                      <li> If the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
                      then it is allowed to use only the following standard button masks:{@code InputEvent.BUTTON1_DOWN_MASK}, {@code InputEvent.BUTTON2_DOWN_MASK},{@code InputEvent.BUTTON3_DOWN_MASK}.
                      <li> If the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
                      then it is allowed to use the standard button masks
                      and masks for existing extended mouse buttons, if the mouse has more then three buttons.
                      In that way, it is allowed to use the button masks corresponding to the buttons
                      in the range from 1 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.
                      <br>
                      It is recommended to use the {@link InputEvent#getMaskForButton(int) InputEvent.getMaskForButton(button)}method to obtain the mask for any mouse button by its number.
                      </ul>
                      <p>
                      The following standard button masks are also accepted:
                      <ul>
                      <li>{@code InputEvent.BUTTON1_MASK}<li>{@code InputEvent.BUTTON2_MASK}<li>{@code InputEvent.BUTTON3_MASK}</ul>
                      However, it is recommended to use {@code InputEvent.BUTTON1_DOWN_MASK},{@code InputEvent.BUTTON2_DOWN_MASK},  {@code InputEvent.BUTTON3_DOWN_MASK} instead.
                      Either extended {@code _DOWN_MASK} or old {@code _MASK} values
                      should be used, but both those models should not be mixed.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code buttons} mask contains the mask for extra mouse button
                      and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if the {@code buttons} mask contains the mask for extra mouse button
                      that does not exist on the mouse and support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java                    
                </throws>
                <see>
                    #mousePress(int)                    
                </see>
                <see>
                    InputEvent#getMaskForButton(int)                    
                </see>
                <see>
                    Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
                <see>
                    java.awt.MouseInfo#getNumberOfButtons()                    
                </see>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
            </javadoc>
            <method name="mouseRelease" type="void" line="232">
                <params>
                    <param name="buttons" type="int"/>
                </params>
            </method>
            <method name="checkButtonsArgument" type="void" line="237">
                <params>
                    <param name="buttons" type="int"/>
                </params>
                <scope line="238"/>
            </method>
            <javadoc line="242">
                Rotates the scroll wheel on wheel-equipped mice.                
                <param>
                    wheelAmt  number of "notches" to move the mouse wheel
                      Negative values indicate movement up/away from the user,
                      positive values indicate movement down/towards the user.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="mouseWheel" type="void" line="249">
                <params>
                    <param name="wheelAmt" type="int"/>
                </params>
            </method>
            <javadoc line="253">
                Presses a given key.  The key should be released using the
                  &lt;code&gt;keyRelease&lt;/code&gt; method.
                  &lt;p&gt;
                  Key codes that have more than one physical key associated with them
                  (e.g. &lt;code&gt;KeyEvent.VK_SHIFT&lt;/code&gt; could mean either the
                  left or right shift key) will map to the left key.                
                <param>
                    keycode Key to press (e.g. <code>KeyEvent.VK_A</code>)                    
                </param>
                <throws>
                    IllegalArgumentException if <code>keycode</code> is not
                      a valid key                    
                </throws>
                <see>
                    #keyRelease(int)                    
                </see>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="keyPress" type="void" line="266">
                <params>
                    <param name="keycode" type="int"/>
                </params>
            </method>
            <javadoc line="271">
                Releases a given key.
                  &lt;p&gt;
                  Key codes that have more than one physical key associated with them
                  (e.g. &lt;code&gt;KeyEvent.VK_SHIFT&lt;/code&gt; could mean either the
                  left or right shift key) will map to the left key.                
                <param>
                    keycode Key to release (e.g. <code>KeyEvent.VK_A</code>)                    
                </param>
                <throws>
                    IllegalArgumentException if <code>keycode</code> is not a
                      valid key                    
                </throws>
                <see>
                    #keyPress(int)                    
                </see>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="keyRelease" type="void" line="283">
                <params>
                    <param name="keycode" type="int"/>
                </params>
            </method>
            <method name="checkKeycodeArgument" type="void" line="288">
                <params>
                    <param name="keycode" type="int"/>
                </params>
                <scope line="289"/>
            </method>
            <javadoc line="293">
                Returns the color of a pixel at the given screen coordinates.                
                <param>
                    x       X position of pixel                    
                </param>
                <param>
                    y       Y position of pixel                    
                </param>
                <return>
                    Color of the pixel                    
                </return>
            </javadoc>
            <method name="getPixelColor" type="Color" line="299">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="color" type="Color" line="300"/>
            </method>
            <javadoc line="303">
                Creates an image containing pixels read from the screen.  This image does
                  not include the mouse cursor.                
                <param>
                    screenRect      Rect to capture in screen coordinates                    
                </param>
                <return>
                    The captured image                    
                </return>
                <throws>
                    IllegalArgumentException if <code>screenRect</code> width and height are not greater than zero                    
                </throws>
                <throws>
                    SecurityException if <code>readDisplayPixels</code> permission is not granted                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    AWTPermission                    
                </see>
            </javadoc>
            <method name="createScreenCapture" type="BufferedImage" line="313">
                <params>
                    <param name="screenRect" type="Rectangle"/>
                </params>
                <declaration name="translatedRect" type="Rectangle" line="315"/>
                <declaration name="image" type="BufferedImage" line="318"/>
                <declaration name="buffer" type="DataBufferInt" line="319"/>
                <declaration name="raster" type="WritableRaster" line="320"/>
                <scope line="321"/>
                <declaration name="pixels" type="int" line="325"/>
                <declaration name="bandmasks" type="int[]" line="326"/>
            </method>
            <method name="checkValidRect" type="void" line="337">
                <params>
                    <param name="rect" type="Rectangle"/>
                </params>
                <scope line="338"/>
            </method>
            <method name="checkScreenCaptureAllowed" type="void" line="342">
                <declaration name="security" type="SecurityManager" line="343"/>
                <scope line="344"/>
            </method>
            <method name="afterEvent" type="void" line="348"/>
            <javadoc line="352">
                Returns whether this Robot automatically invokes &lt;code&gt;waitForIdle&lt;/code&gt;
                  after generating an event.                
                <return>
                    Whether <code>waitForIdle</code> is automatically called                    
                </return>
            </javadoc>
            <method name="isAutoWaitForIdle" type="boolean" line="357"/>
            <javadoc line="360">
                Sets whether this Robot automatically invokes &lt;code&gt;waitForIdle&lt;/code&gt;
                  after generating an event.                
                <param>
                    isOn    Whether <code>waitForIdle</code> is automatically invoked                    
                </param>
            </javadoc>
            <method name="setAutoWaitForIdle" type="void" line="365">
                <params>
                    <param name="isOn" type="boolean"/>
                </params>
            </method>
            <method name="autoWaitForIdle" type="void" line="368">
                <scope line="369"/>
            </method>
            <javadoc line="373">
                Returns the number of milliseconds this Robot sleeps after generating an event.                
            </javadoc>
            <method name="getAutoDelay" type="int" line="376"/>
            <javadoc line="379">
                Sets the number of milliseconds this Robot sleeps after generating an event.                
                <throws>
                    IllegalArgumentException If <code>ms</code> is not between 0 and 60,000 milliseconds inclusive                    
                </throws>
            </javadoc>
            <method name="setAutoDelay" type="void" line="383">
                <params>
                    <param name="ms" type="int"/>
                </params>
            </method>
            <method name="autoDelay" type="void" line="387"/>
            <javadoc line="390">
                Sleeps for the specified time.
                  To catch any &lt;code&gt;InterruptedException&lt;/code&gt;s that occur,
                  &lt;code&gt;Thread.sleep()&lt;/code&gt; may be used instead.                
                <param>
                    ms      time to sleep in milliseconds                    
                </param>
                <throws>
                    IllegalArgumentException if <code>ms</code> is not between 0 and 60,000 milliseconds inclusive                    
                </throws>
                <see>
                    java.lang.Thread#sleep                    
                </see>
            </javadoc>
            <method name="delay" type="void" line="398">
                <params>
                    <param name="ms" type="int"/>
                </params>
                <scope line="400"/>
                <scope line="403"/>
            </method>
            <method name="checkDelayArgument" type="void" line="407">
                <params>
                    <param name="ms" type="int"/>
                </params>
                <scope line="408"/>
            </method>
            <javadoc line="412">
                Waits until all events currently on the event queue have been processed.                
                <throws>
                    IllegalThreadStateException if called on the AWT event dispatching thread                    
                </throws>
            </javadoc>
            <method name="waitForIdle" type="void" line="416">
                <scope line="418">
                    <anonymous_class line="420">
                        <method name="run" type="void" line="421"/>
                    </anonymous_class>
                </scope>
                <scope line="426"/>
                <scope line="430"/>
            </method>
            <method name="checkNotDispatchThread" type="void" line="435">
                <scope line="436"/>
            </method>
            <javadoc line="440">
                Returns a string representation of this Robot.                
                <return>
                    the string representation.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="444">
                <declaration name="params" type="String" line="445"/>
            </method>
        </class>
    </source>