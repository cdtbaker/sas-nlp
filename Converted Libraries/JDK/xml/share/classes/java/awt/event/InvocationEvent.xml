<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.ActiveEvent"/>
        <import package="java.awt.AWTEvent"/>
        <class name="InvocationEvent" line="4">
            <extends class="AWTEvent"/>
            <implements interface="ActiveEvent"/>
            <javadoc line="4">
                An event which executes the &lt;code&gt;run()&lt;/code&gt; method on a &lt;code&gt;Runnable
                  &lt;/code&gt; when dispatched by the AWT event dispatcher thread. This class can
                  be used as a reference implementation of &lt;code&gt;ActiveEvent&lt;/code&gt; rather
                  than declaring a new class and defining &lt;code&gt;dispatch()&lt;/code&gt;.&lt;p&gt;
                  Instances of this class are placed on the &lt;code&gt;EventQueue&lt;/code&gt; by calls
                  to &lt;code&gt;invokeLater&lt;/code&gt; and &lt;code&gt;invokeAndWait&lt;/code&gt;. Client code
                  can use this fact to write replacement functions for &lt;code&gt;invokeLater
                  &lt;/code&gt; and &lt;code&gt;invokeAndWait&lt;/code&gt; without writing special-case code
                  in any &lt;code&gt;AWTEventListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code InvocationEvent} instance is not
                  in the range from {@code INVOCATION_FIRST} to {@code INVOCATION_LAST}.                
                <author>
                    Fred Ecks                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    java.awt.ActiveEvent                    
                </see>
                <see>
                    java.awt.EventQueue#invokeLater                    
                </see>
                <see>
                    java.awt.EventQueue#invokeAndWait                    
                </see>
                <see>
                    AWTEventListener                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="INVOCATION_FIRST" type="int" line="27"/>
            <javadoc line="27">
                Marks the first integer id for the range of invocation event ids.                
            </javadoc>
            <declaration name="INVOCATION_DEFAULT" type="int" line="31"/>
            <javadoc line="31">
                The default id for all InvocationEvents.                
            </javadoc>
            <declaration name="INVOCATION_LAST" type="int" line="35"/>
            <javadoc line="35">
                Marks the last integer id for the range of invocation event ids.                
            </javadoc>
            <declaration name="runnable" type="Runnable" line="39"/>
            <javadoc line="39">
                The Runnable whose run() method will be called.                
            </javadoc>
            <declaration name="notifier" type="Object" line="43"/>
            <javadoc line="43">
                The (potentially null) Object whose notifyAll() method will be called
                  immediately after the Runnable.run() method has returned or thrown an exception.                
                <see>
                    #isDispatched                    
                </see>
            </javadoc>
            <declaration name="dispatched" type="boolean" line="49"/>
            <javadoc line="49">
                Indicates whether the &lt;code&gt;run()&lt;/code&gt; method of the &lt;code&gt;runnable&lt;/code&gt;
                  was executed or not.                
                <see>
                    #isDispatched                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="catchExceptions" type="boolean" line="56"/>
            <javadoc line="56">
                Set to true if dispatch() catches Throwable and stores it in the
                  exception instance variable. If false, Throwables are propagated up
                  to the EventDispatchThread&apos;s dispatch loop.                
            </javadoc>
            <declaration name="exception" type="Exception" line="62"/>
            <javadoc line="62">
                The (potentially null) Exception thrown during execution of the
                  Runnable.run() method. This variable will also be null if a particular
                  instance does not catch exceptions.                
            </javadoc>
            <declaration name="throwable" type="Throwable" line="68"/>
            <javadoc line="68">
                The (potentially null) Throwable thrown during execution of the
                  Runnable.run() method. This variable will also be null if a particular
                  instance does not catch exceptions.                
            </javadoc>
            <declaration name="when" type="long" line="74"/>
            <javadoc line="74">
                The timestamp of when this event occurred.                
                <serial>
                                        
                </serial>
                <see>
                    #getWhen                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="80"/>
            <javadoc line="81">
                Constructs an &lt;code&gt;InvocationEvent&lt;/code&gt; with the specified
                  source which will execute the runnable&apos;s &lt;code&gt;run&lt;/code&gt;
                  method when dispatched.
                  &lt;p&gt;This is a convenience constructor.  An invocation of the form
                  &lt;tt&gt;InvocationEvent(source, runnable)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation of
                  &lt;tt&gt;{@link #InvocationEvent(Object,Runnable,Object,boolean) InvocationEvent}(source, runnable, null, false)&lt;/tt&gt;.
                  &lt;p&gt; This method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  if &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The &lt;code&gt;Object&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    runnable  The &lt;code&gt;Runnable&lt;/code&gt; whose &lt;code&gt;run&lt;/code&gt;
                      method will be executed                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #InvocationEvent(Object,Runnable,Object,boolean)                    
                </see>
            </javadoc>
            <method name="InvocationEvent" type="constructor" line="98">
                <params>
                    <param name="source" type="Object"/>
                    <param name="runnable" type="Runnable"/>
                </params>
            </method>
            <javadoc line="101">
                Constructs an &lt;code&gt;InvocationEvent&lt;/code&gt; with the specified
                  source which will execute the runnable&apos;s &lt;code&gt;run&lt;/code&gt;
                  method when dispatched.  If notifier is non-&lt;code&gt;null&lt;/code&gt;,
                  &lt;code&gt;notifyAll()&lt;/code&gt; will be called on it
                  immediately after &lt;code&gt;run&lt;/code&gt; has returned or thrown an exception.
                  &lt;p&gt;An invocation of the form &lt;tt&gt;InvocationEvent(source,
                  runnable, notifier, catchThrowables)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation of
                  &lt;tt&gt;{@link #InvocationEvent(Object,int,Runnable,Object,boolean) InvocationEvent}(source, InvocationEvent.INVOCATION_DEFAULT, runnable, notifier, catchThrowables)&lt;/tt&gt;.
                  &lt;p&gt;This method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  if &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source            The &lt;code&gt;Object&lt;/code&gt; that originated
                      the event                    
                </param>
                <param>
                    runnable          The &lt;code&gt;Runnable&lt;/code&gt; whose
                      &lt;code&gt;run&lt;/code&gt; method will be
                      executed                    
                </param>
                <param>
                    notifier          The {@code Object} whose &lt;code&gt;notifyAll&lt;/code&gt;
                      method will be called after
                      &lt;code&gt;Runnable.run&lt;/code&gt; has returned or
                      thrown an exception                    
                </param>
                <param>
                    catchThrowables   Specifies whether &lt;code&gt;dispatch&lt;/code&gt;
                      should catch Throwable when executing
                      the &lt;code&gt;Runnable&lt;/code&gt;&apos;s &lt;code&gt;run&lt;/code&gt;
                      method, or should instead propagate those
                      Throwables to the EventDispatchThread&apos;s
                      dispatch loop                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #InvocationEvent(Object,int,Runnable,Object,boolean)                    
                </see>
            </javadoc>
            <method name="InvocationEvent" type="constructor" line="132">
                <params>
                    <param name="source" type="Object"/>
                    <param name="runnable" type="Runnable"/>
                    <param name="notifier" type="Object"/>
                    <param name="catchThrowables" type="boolean"/>
                </params>
            </method>
            <javadoc line="135">
                Constructs an &lt;code&gt;InvocationEvent&lt;/code&gt; with the specified
                  source and ID which will execute the runnable&apos;s &lt;code&gt;run&lt;/code&gt;
                  method when dispatched.  If notifier is non-&lt;code&gt;null&lt;/code&gt;,
                  &lt;code&gt;notifyAll&lt;/code&gt; will be called on it immediately after
                  &lt;code&gt;run&lt;/code&gt; has returned or thrown an exception.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source            The &lt;code&gt;Object&lt;/code&gt; that originated
                      the event                    
                </param>
                <param>
                    id     An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link InvocationEvent}                    
                </param>
                <param>
                    runnable          The &lt;code&gt;Runnable&lt;/code&gt; whose
                      &lt;code&gt;run&lt;/code&gt; method will be executed                    
                </param>
                <param>
                    notifier          The &lt;code&gt;Object&lt;/code&gt; whose &lt;code&gt;notifyAll&lt;/code&gt;
                      method will be called after
                      &lt;code&gt;Runnable.run&lt;/code&gt; has returned or
                      thrown an exception                    
                </param>
                <param>
                    catchThrowables   Specifies whether &lt;code&gt;dispatch&lt;/code&gt;
                      should catch Throwable when executing the
                      &lt;code&gt;Runnable&lt;/code&gt;&apos;s &lt;code&gt;run&lt;/code&gt;
                      method, or should instead propagate those
                      Throwables to the EventDispatchThread&apos;s
                      dispatch loop                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
            </javadoc>
            <method name="InvocationEvent" type="constructor" line="165">
                <params>
                    <param name="source" type="Object"/>
                    <param name="id" type="int"/>
                    <param name="runnable" type="Runnable"/>
                    <param name="notifier" type="Object"/>
                    <param name="catchThrowables" type="boolean"/>
                </params>
            </method>
            <javadoc line="172">
                Executes the Runnable&apos;s &lt;code&gt;run()&lt;/code&gt; method and notifies the
                  notifier (if any) when &lt;code&gt;run()&lt;/code&gt; has returned or thrown an exception.                
                <see>
                    #isDispatched                    
                </see>
            </javadoc>
            <method name="dispatch" type="void" line="177">
                <scope line="178">
                    <scope line="179">
                        <scope line="180"/>
                        <scope line="183">
                            <scope line="184"/>
                        </scope>
                    </scope>
                    <scope line="190"/>
                </scope>
                <scope line="194">
                    <scope line="196">
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="203">
                Returns any Exception caught while executing the Runnable&apos;s &lt;code&gt;run()
                  &lt;/code&gt; method.                
                <return>
                    A reference to the Exception if one was thrown; null if no
                      Exception was thrown or if this InvocationEvent does not
                      catch exceptions                    
                </return>
            </javadoc>
            <method name="getException" type="Exception" line="210"/>
            <javadoc line="213">
                Returns any Throwable caught while executing the Runnable&apos;s &lt;code&gt;run()
                  &lt;/code&gt; method.                
                <return>
                    A reference to the Throwable if one was thrown; null if no
                      Throwable was thrown or if this InvocationEvent does not
                      catch Throwables                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getThrowable" type="Throwable" line="221"/>
            <javadoc line="224">
                Returns the timestamp of when this event occurred.                
                <return>
                    this event&apos;s timestamp                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWhen" type="long" line="229"/>
            <javadoc line="232">
                Returns {@code true} if the event is dispatched or any exception is
                  thrown while dispatching, {@code false} otherwise. The method should
                  be called by a waiting thread that calls the {@code notifier.wait()} method.
                  Since spurious wakeups are possible (as explained in {@link Object#wait()}),
                  this method should be used in a waiting loop to ensure that the event
                  got dispatched:
                  &lt;pre&gt;
                  while (!event.isDispatched()) {
                  notifier.wait();
                  }
                  &lt;/pre&gt;
                  If the waiting thread wakes up without dispatching the event,
                  the {@code isDispatched()} method returns {@code false}, and
                  the {@code while} loop executes once more, thus, causing
                  the awakened thread to revert to the waiting mode.
                  &lt;p&gt;
                  If the {@code notifier.notifyAll()} happens before the waiting thread
                  enters the {@code notifier.wait()} method, the {@code while} loop ensures
                  that the waiting thread will not enter the {@code notifier.wait()} method.
                  Otherwise, there is no guarantee that the waiting thread will ever be woken
                  from the wait.                
                <return>
                    {@code true} if the event has been dispatched, or any exception
                      has been thrown while dispatching, {@code false} otherwise                    
                </return>
                <see>
                    #dispatch                    
                </see>
                <see>
                    #notifier                    
                </see>
                <see>
                    #catchExceptions                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="isDispatched" type="boolean" line="261"/>
            <javadoc line="264">
                Returns a parameter string identifying this event.
                  This method is useful for event-logging and for debugging.                
                <return>
                    A string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="269">
                <declaration name="typeStr" type="String" line="270"/>
            </method>
        </class>
    </source>