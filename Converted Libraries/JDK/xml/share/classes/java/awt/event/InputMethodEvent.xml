<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.CharacterIterator"/>
        <class name="InputMethodEvent" line="10">
            <extends class="AWTEvent"/>
            <javadoc line="10">
                Input method events contain information about text that is being
                  composed using an input method. Whenever the text changes, the
                  input method sends an event. If the text component that&apos;s currently
                  using the input method is an active client, the event is dispatched
                  to that component. Otherwise, it is dispatched to a separate
                  composition window.
                  &lt;p&gt;
                  The text included with the input method event consists of two parts:
                  committed text and composed text. Either part may be empty. The two
                  parts together replace any uncommitted composed text sent in previous events,
                  or the currently selected committed text.
                  Committed text should be integrated into the text component&apos;s persistent
                  data, it will not be sent again. Composed text may be sent repeatedly,
                  with changes to reflect the user&apos;s editing operations. Committed text
                  always precedes composed text.                
                <author>
                    JavaSoft Asia/Pacific                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="30"/>
            <javadoc line="30">
                Serial Version ID.                
            </javadoc>
            <declaration name="INPUT_METHOD_FIRST" type="int" line="34"/>
            <javadoc line="34">
                Marks the first integer id for the range of input method event ids.                
            </javadoc>
            <declaration name="INPUT_METHOD_TEXT_CHANGED" type="int" line="38"/>
            <javadoc line="38">
                The event type indicating changed input method text. This event is
                  generated by input methods while processing input.                
            </javadoc>
            <declaration name="CARET_POSITION_CHANGED" type="int" line="43"/>
            <javadoc line="43">
                The event type indicating a changed insertion point in input method text.
                  This event is
                  generated by input methods while processing input if only the caret changed.                
            </javadoc>
            <declaration name="INPUT_METHOD_LAST" type="int" line="49"/>
            <javadoc line="49">
                Marks the last integer id for the range of input method event ids.                
            </javadoc>
            <declaration name="when" type="long" line="53"/>
            <javadoc line="53">
                The time stamp that indicates when the event was created.                
                <serial>
                                        
                </serial>
                <see>
                    #getWhen                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="text" type="AttributedCharacterIterator" line="60"/>
            <declaration name="committedCharacterCount" type="int" line="61"/>
            <declaration name="caret" type="TextHitInfo" line="62"/>
            <declaration name="visiblePosition" type="TextHitInfo" line="63"/>
            <javadoc line="64">
                Constructs an &lt;code&gt;InputMethodEvent&lt;/code&gt; with the specified
                  source component, type, time, text, caret, and visiblePosition.
                  &lt;p&gt;
                  The offsets of caret and visiblePosition are relative to the current
                  composed text; that is, the composed text within &lt;code&gt;text&lt;/code&gt;
                  if this is an &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event,
                  the composed text within the &lt;code&gt;text&lt;/code&gt; of the
                  preceding &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event otherwise.
                  &lt;p&gt;Note that passing in an invalid &lt;code&gt;id&lt;/code&gt; results in
                  unspecified behavior. This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source the object where the event originated                    
                </param>
                <param>
                    id the event type                    
                </param>
                <param>
                    when a long integer that specifies the time the event occurred                    
                </param>
                <param>
                    text the combined committed and composed text,
                      committed text first; must be <code>null</code>
                      when the event type is <code>CARET_POSITION_CHANGED</code>;
                      may be <code>null</code> for
                      <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
                      committed or composed text                    
                </param>
                <param>
                    committedCharacterCount the number of committed
                      characters in the text                    
                </param>
                <param>
                    caret the caret (a.k.a. insertion point);
                      <code>null</code> if there's no caret within current
                      composed text                    
                </param>
                <param>
                    visiblePosition the position that's most important
                      to be visible; <code>null</code> if there's no
                      recommendation for a visible position within current
                      composed text                    
                </param>
                <throws>
                    IllegalArgumentException if <code>id</code> is not
                      in the range
                      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
                      or if id is <code>CARET_POSITION_CHANGED</code> and
                      <code>text</code> is not <code>null</code>;
                      or if <code>committedCharacterCount</code> is not in the range
                      <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="InputMethodEvent" type="constructor" line="105">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
                <declaration name="textLength" type="int" line="115"/>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="126">
                Constructs an &lt;code&gt;InputMethodEvent&lt;/code&gt; with the specified
                  source component, type, text, caret, and visiblePosition.
                  &lt;p&gt;
                  The offsets of caret and visiblePosition are relative to the current
                  composed text; that is, the composed text within &lt;code&gt;text&lt;/code&gt;
                  if this is an &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event,
                  the composed text within the &lt;code&gt;text&lt;/code&gt; of the
                  preceding &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event otherwise.
                  The time stamp for this event is initialized by invoking{@link java.awt.EventQueue#getMostRecentEventTime()}.
                  &lt;p&gt;Note that passing in an invalid &lt;code&gt;id&lt;/code&gt; results in
                  unspecified behavior. This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source the object where the event originated                    
                </param>
                <param>
                    id the event type                    
                </param>
                <param>
                    text the combined committed and composed text,
                      committed text first; must be <code>null</code>
                      when the event type is <code>CARET_POSITION_CHANGED</code>;
                      may be <code>null</code> for
                      <code>INPUT_METHOD_TEXT_CHANGED</code> if there's no
                      committed or composed text                    
                </param>
                <param>
                    committedCharacterCount the number of committed
                      characters in the text                    
                </param>
                <param>
                    caret the caret (a.k.a. insertion point);
                      <code>null</code> if there's no caret within current
                      composed text                    
                </param>
                <param>
                    visiblePosition the position that's most important
                      to be visible; <code>null</code> if there's no
                      recommendation for a visible position within current
                      composed text                    
                </param>
                <throws>
                    IllegalArgumentException if <code>id</code> is not
                      in the range
                      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>;
                      or if id is <code>CARET_POSITION_CHANGED</code> and
                      <code>text</code> is not <code>null</code>;
                      or if <code>committedCharacterCount</code> is not in the range
                      <code>0</code>..<code>(text.getEndIndex() - text.getBeginIndex())</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
            </javadoc>
            <method name="InputMethodEvent" type="constructor" line="166">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                    <param name="committedCharacterCount" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="169">
                Constructs an &lt;code&gt;InputMethodEvent&lt;/code&gt; with the
                  specified source component, type, caret, and visiblePosition.
                  The text is set to &lt;code&gt;null&lt;/code&gt;,
                  &lt;code&gt;committedCharacterCount&lt;/code&gt; to 0.
                  &lt;p&gt;
                  The offsets of &lt;code&gt;caret&lt;/code&gt; and &lt;code&gt;visiblePosition&lt;/code&gt;
                  are relative to the current composed text; that is,
                  the composed text within the &lt;code&gt;text&lt;/code&gt; of the
                  preceding &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event if the
                  event being constructed as a &lt;code&gt;CARET_POSITION_CHANGED&lt;/code&gt; event.
                  For an &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event without text,
                  &lt;code&gt;caret&lt;/code&gt; and &lt;code&gt;visiblePosition&lt;/code&gt; must be
                  &lt;code&gt;null&lt;/code&gt;.
                  The time stamp for this event is initialized by invoking{@link java.awt.EventQueue#getMostRecentEventTime()}.
                  &lt;p&gt;Note that passing in an invalid &lt;code&gt;id&lt;/code&gt; results in
                  unspecified behavior. This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source the object where the event originated                    
                </param>
                <param>
                    id the event type                    
                </param>
                <param>
                    caret the caret (a.k.a. insertion point);
                      <code>null</code> if there's no caret within current
                      composed text                    
                </param>
                <param>
                    visiblePosition the position that's most important
                      to be visible; <code>null</code> if there's no
                      recommendation for a visible position within current
                      composed text                    
                </param>
                <throws>
                    IllegalArgumentException if <code>id</code> is not
                      in the range
                      <code>INPUT_METHOD_FIRST</code>..<code>INPUT_METHOD_LAST</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
            </javadoc>
            <method name="InputMethodEvent" type="constructor" line="202">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="caret" type="TextHitInfo"/>
                    <param name="visiblePosition" type="TextHitInfo"/>
                </params>
            </method>
            <javadoc line="205">
                Gets the combined committed and composed text.
                  Characters from index 0 to index &lt;code&gt;getCommittedCharacterCount() - 1&lt;/code&gt; are committed
                  text, the remaining characters are composed text.                
                <return>
                    the text.
                      Always null for CARET_POSITION_CHANGED;
                      may be null for INPUT_METHOD_TEXT_CHANGED if there's no composed or committed text.                    
                </return>
            </javadoc>
            <method name="getText" type="AttributedCharacterIterator" line="213"/>
            <javadoc line="216">
                Gets the number of committed characters in the text.                
            </javadoc>
            <method name="getCommittedCharacterCount" type="int" line="219"/>
            <javadoc line="222">
                Gets the caret.
                  &lt;p&gt;
                  The offset of the caret is relative to the current
                  composed text; that is, the composed text within getText()
                  if this is an &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event,
                  the composed text within getText() of the
                  preceding &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event otherwise.                
                <return>
                    the caret (a.k.a. insertion point).
                      Null if there's no caret within current composed text.                    
                </return>
            </javadoc>
            <method name="getCaret" type="TextHitInfo" line="233"/>
            <javadoc line="236">
                Gets the position that&apos;s most important to be visible.
                  &lt;p&gt;
                  The offset of the visible position is relative to the current
                  composed text; that is, the composed text within getText()
                  if this is an &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event,
                  the composed text within getText() of the
                  preceding &lt;code&gt;INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; event otherwise.                
                <return>
                    the position that's most important to be visible.
                      Null if there's no recommendation for a visible position within current composed text.                    
                </return>
            </javadoc>
            <method name="getVisiblePosition" type="TextHitInfo" line="247"/>
            <javadoc line="250">
                Consumes this event so that it will not be processed
                  in the default manner by the source which originated it.                
            </javadoc>
            <method name="consume" type="void" line="254"/>
            <javadoc line="257">
                Returns whether or not this event has been consumed.                
                <see>
                    #consume                    
                </see>
            </javadoc>
            <method name="isConsumed" type="boolean" line="261"/>
            <javadoc line="264">
                Returns the time stamp of when this event occurred.                
                <return>
                    this event's timestamp                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWhen" type="long" line="269"/>
            <javadoc line="272">
                Returns a parameter string identifying this event.
                  This method is useful for event-logging and for debugging.
                  It contains the event ID in text form, the characters of the
                  committed and composed text
                  separated by &quot;+&quot;, the number of committed characters,
                  the caret, and the visible position.                
                <return>
                    a string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="281">
                <declaration name="typeStr" type="String" line="282"/>
                <declaration name="textString" type="String" line="293"/>
                <scope line="294"/>
                <scope line="297">
                    <declaration name="textBuffer" type="StringBuilder" line="298"/>
                    <declaration name="committedCharacterCount" type="int" line="299"/>
                    <declaration name="c" type="char" line="300"/>
                    <scope line="301"/>
                    <scope line="306"/>
                </scope>
                <declaration name="countString" type="String" line="313"/>
                <declaration name="caretString" type="String" line="314"/>
                <scope line="315"/>
                <scope line="318"/>
                <declaration name="visiblePositionString" type="String" line="321"/>
                <scope line="322"/>
                <scope line="325"/>
            </method>
            <javadoc line="330">
                Initializes the &lt;code&gt;when&lt;/code&gt; field if it is not present in the
                  object input stream. In that case, the field will be initialized by
                  invoking {@link java.awt.EventQueue#getMostRecentEventTime()}.                
            </javadoc>
            <method name="readObject" type="void" line="335">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="337"/>
            </method>
        </class>
    </source>