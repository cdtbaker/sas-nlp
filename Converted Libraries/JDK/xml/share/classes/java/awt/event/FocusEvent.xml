<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.Component"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="FocusEvent" line="32">
            <extends class="ComponentEvent"/>
            <comment line="82">
                Event.GOT_FOCUS                
            </comment>
            <comment line="87">
                Event.LOST_FOCUS                
            </comment>
            <comment line="112">
                JDK 1.1 serialVersionUID                
            </comment>
            <javadoc line="32">
                A low-level event which indicates that a Component has gained or lost the
                  input focus. This low-level event is generated by a Component (such as a
                  TextField). The event is passed to every &lt;code&gt;FocusListener&lt;/code&gt; or
                  &lt;code&gt;FocusAdapter&lt;/code&gt; object which registered to receive such events
                  using the Component&apos;s &lt;code&gt;addFocusListener&lt;/code&gt; method. (&lt;code&gt;
                  FocusAdapter&lt;/code&gt; objects implement the &lt;code&gt;FocusListener&lt;/code&gt;
                  interface.) Each such listener object gets this &lt;code&gt;FocusEvent&lt;/code&gt; when
                  the event occurs.
                  &lt;p&gt;
                  There are two levels of focus events: permanent and temporary. Permanent
                  focus change events occur when focus is directly moved from one Component to
                  another, such as through a call to requestFocus() or as the user uses the
                  TAB key to traverse Components. Temporary focus change events occur when
                  focus is temporarily lost for a Component as the indirect result of another
                  operation, such as Window deactivation or a Scrollbar drag. In this case,
                  the original focus state will automatically be restored once that operation
                  is finished, or, for the case of Window deactivation, when the Window is
                  reactivated. Both permanent and temporary focus events are delivered using
                  the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
                  the event using the isTemporary() method.
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code FocusEvent} instance is not
                  in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.                
                <see>
                    FocusAdapter                    
                </see>
                <see>
                    FocusListener                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/post1.0/ui/focuslistener.html&quot;&gt;Tutorial: Writing a Focus Listener&lt;/a&gt;                    
                </see>
                <author>
                    Carl Quinn                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="FOCUS_FIRST" type="int" line="68"/>
            <javadoc line="68">
                The first number in the range of ids used for focus events.                
            </javadoc>
            <declaration name="FOCUS_LAST" type="int" line="73"/>
            <javadoc line="73">
                The last number in the range of ids used for focus events.                
            </javadoc>
            <declaration name="FOCUS_GAINED" type="int" line="78"/>
            <javadoc line="78">
                This event indicates that the Component is now the focus owner.                
            </javadoc>
            <declaration name="FOCUS_LOST" type="int" line="83"/>
            <javadoc line="83">
                This event indicates that the Component is no longer the focus owner.                
            </javadoc>
            <declaration name="temporary" type="boolean" line="88"/>
            <javadoc line="88">
                A focus event can have two different levels, permanent and temporary.
                  It will be set to true if some operation takes away the focus
                  temporarily and intends on getting it back once the event is completed.
                  Otherwise it will be set to false.                
                <serial>
                                        
                </serial>
                <see>
                    #isTemporary                    
                </see>
            </javadoc>
            <declaration name="opposite" type="Component" line="99"/>
            <javadoc line="99">
                The other Component involved in this focus change. For a FOCUS_GAINED
                  event, this is the Component that lost focus. For a FOCUS_LOST event,
                  this is the Component that gained focus. If this focus change occurs
                  with a native application, a Java application in a different VM, or with
                  no other Component, then the opposite Component is null.                
                <see>
                    #getOppositeComponent                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="114"/>
            <javadoc line="116">
                Constructs a &lt;code&gt;FocusEvent&lt;/code&gt; object with the
                  specified temporary state and opposite &lt;code&gt;Component&lt;/code&gt;.
                  The opposite &lt;code&gt;Component&lt;/code&gt; is the other
                  &lt;code&gt;Component&lt;/code&gt; involved in this focus change.
                  For a &lt;code&gt;FOCUS_GAINED&lt;/code&gt; event, this is the
                  &lt;code&gt;Component&lt;/code&gt; that lost focus. For a
                  &lt;code&gt;FOCUS_LOST&lt;/code&gt; event, this is the &lt;code&gt;Component&lt;/code&gt;
                  that gained focus. If this focus change occurs with a native
                  application, with a Java application in a different VM,
                  or with no other &lt;code&gt;Component&lt;/code&gt;, then the opposite
                  &lt;code&gt;Component&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source     The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id         An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link FocusEvent}                    
                </param>
                <param>
                    temporary  Equals &lt;code&gt;true&lt;/code&gt; if the focus change is temporary;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    opposite   The other Component involved in the focus change,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; equals {@code null}                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #isTemporary()                    
                </see>
                <see>
                    #getOppositeComponent()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="FocusEvent" type="constructor" line="148">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="temporary" type="boolean"/>
                    <param name="opposite" type="Component"/>
                </params>
            </method>
            <javadoc line="154">
                Constructs a &lt;code&gt;FocusEvent&lt;/code&gt; object and identifies
                  whether or not the change is temporary.
                  &lt;p&gt; This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id        An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link FocusEvent}                    
                </param>
                <param>
                    temporary Equals &lt;code&gt;true&lt;/code&gt; if the focus change is temporary;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; equals {@code null}                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #isTemporary()                    
                </see>
            </javadoc>
            <method name="FocusEvent" type="constructor" line="172">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="temporary" type="boolean"/>
                </params>
            </method>
            <javadoc line="176">
                Constructs a &lt;code&gt;FocusEvent&lt;/code&gt; object and identifies it
                  as a permanent change in focus.
                  &lt;p&gt; This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id        An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link FocusEvent}                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; equals {@code null}                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
            </javadoc>
            <method name="FocusEvent" type="constructor" line="191">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="195">
                Identifies the focus change event as temporary or permanent.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the focus change is temporary;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="isTemporary" type="boolean" line="201"/>
            <javadoc line="205">
                Returns the other Component involved in this focus change. For a
                  FOCUS_GAINED event, this is the Component that lost focus. For a
                  FOCUS_LOST event, this is the Component that gained focus. If this
                  focus change occurs with a native application, with a Java application
                  in a different VM or context, or with no other Component, then null is
                  returned.                
                <return>
                    the other Component involved in the focus change, or null                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getOppositeComponent" type="Component" line="216">
                <scope line="217"/>
            </method>
            <javadoc line="227">
                Returns a parameter string identifying this event.
                  This method is useful for event-logging and for debugging.                
                <return>
                    a string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="233">
                <declaration name="typeStr" type="String" line="234"/>
            </method>
        </class>
    </source>