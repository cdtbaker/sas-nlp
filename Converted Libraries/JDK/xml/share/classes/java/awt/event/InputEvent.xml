<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.Event"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.util.Arrays"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="InputEvent" line="37">
            <extends class="ComponentEvent"/>
            <comment line="252">
                the constant below MUST be updated if any extra modifier
                 bits are to be added!
                 in fact, it is undesirable to add modifier bits
                 to the same field as this may break applications
                 see bug# 5066958                
            </comment>
            <comment line="283">
                A flag that indicates that this instance can be used to access
                 the system clipboard.                
            </comment>
            <comment line="471">
                state serialization compatibility with JDK 1.1                
            </comment>
            <javadoc line="37">
                The root event class for all component-level input events.
                  Input events are delivered to listeners before they are
                  processed normally by the source where they originated.
                  This allows listeners and component subclasses to &quot;consume&quot;
                  the event so that the source will not process them in their
                  default manner.  For example, consuming mousePressed events
                  on a Button component will prevent the Button from being
                  activated.                
                <author>
                    Carl Quinn                    
                </author>
                <see>
                    KeyEvent                    
                </see>
                <see>
                    KeyAdapter                    
                </see>
                <see>
                    MouseEvent                    
                </see>
                <see>
                    MouseAdapter                    
                </see>
                <see>
                    MouseMotionAdapter                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="logger" type="PlatformLogger" line="60"/>
            <declaration name="SHIFT_MASK" type="int" line="62"/>
            <javadoc line="62">
                The Shift key modifier constant.
                  It is recommended that SHIFT_DOWN_MASK be used instead.                
            </javadoc>
            <declaration name="CTRL_MASK" type="int" line="68"/>
            <javadoc line="68">
                The Control key modifier constant.
                  It is recommended that CTRL_DOWN_MASK be used instead.                
            </javadoc>
            <declaration name="META_MASK" type="int" line="74"/>
            <javadoc line="74">
                The Meta key modifier constant.
                  It is recommended that META_DOWN_MASK be used instead.                
            </javadoc>
            <declaration name="ALT_MASK" type="int" line="80"/>
            <javadoc line="80">
                The Alt key modifier constant.
                  It is recommended that ALT_DOWN_MASK be used instead.                
            </javadoc>
            <declaration name="ALT_GRAPH_MASK" type="int" line="86"/>
            <javadoc line="86">
                The AltGraph key modifier constant.                
            </javadoc>
            <declaration name="BUTTON1_MASK" type="int" line="91"/>
            <javadoc line="91">
                The Mouse Button1 modifier constant.
                  It is recommended that BUTTON1_DOWN_MASK be used instead.                
            </javadoc>
            <declaration name="BUTTON2_MASK" type="int" line="97"/>
            <javadoc line="97">
                The Mouse Button2 modifier constant.
                  It is recommended that BUTTON2_DOWN_MASK be used instead.
                  Note that BUTTON2_MASK has the same value as ALT_MASK.                
            </javadoc>
            <declaration name="BUTTON3_MASK" type="int" line="104"/>
            <javadoc line="104">
                The Mouse Button3 modifier constant.
                  It is recommended that BUTTON3_DOWN_MASK be used instead.
                  Note that BUTTON3_MASK has the same value as META_MASK.                
            </javadoc>
            <declaration name="SHIFT_DOWN_MASK" type="int" line="111"/>
            <javadoc line="111">
                The Shift key extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="CTRL_DOWN_MASK" type="int" line="117"/>
            <javadoc line="117">
                The Control key extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="META_DOWN_MASK" type="int" line="123"/>
            <javadoc line="123">
                The Meta key extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="ALT_DOWN_MASK" type="int" line="129"/>
            <javadoc line="129">
                The Alt key extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON1_DOWN_MASK" type="int" line="135"/>
            <javadoc line="135">
                The Mouse Button1 extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON2_DOWN_MASK" type="int" line="141"/>
            <javadoc line="141">
                The Mouse Button2 extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON3_DOWN_MASK" type="int" line="147"/>
            <javadoc line="147">
                The Mouse Button3 extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="ALT_GRAPH_DOWN_MASK" type="int" line="153"/>
            <javadoc line="153">
                The AltGraph key extended modifier constant.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON_DOWN_MASK" type="int[]" line="159"/>
            <javadoc line="159">
                An array of extended modifiers for additional buttons.                
                <see>
                    getButtonDownMasksThere are twenty buttons fit into 4byte space.
                      one more bit is reserved for FIRST_HIGH_BIT.                    
                </see>
                <since>
                    7.0                    
                </since>
            </javadoc>
            <javadoc line="187">
                A method to access an array of extended modifiers for additional buttons.                
                <since>
                    7.0                    
                </since>
            </javadoc>
            <method name="getButtonDownMasks" type="int[]" line="191"/>
            <javadoc line="196">
                A method to obtain a mask for any existing mouse button.
                  The returned mask may be used for different purposes. Following are some of them:
                  &lt;ul&gt;
                  &lt;li&gt; {@link java.awt.Robot#mousePress(int) mousePress(buttons)} and{@link java.awt.Robot#mouseRelease(int) mouseRelease(buttons)}&lt;li&gt; as a {@code modifiers} parameter when creating a new {@link MouseEvent} instance
                  &lt;li&gt; to check {@link MouseEvent#getModifiersEx() modifiersEx} of existing {@code MouseEvent}&lt;/ul&gt;                
                <param>
                    button is a number to represent a button starting from 1.
                      For example,
                      &lt;pre&gt;
                      int button = InputEvent.getMaskForButton(1);
                      &lt;/pre&gt;
                      will have the same meaning as
                      &lt;pre&gt;
                      int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1);
                      &lt;/pre&gt;
                      because {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1.
                      If a mouse has three enabled buttons(see {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()})
                      then the values from the left column passed into the method will return
                      corresponding values from the right column:
                      &lt;PRE&gt;
                      &lt;b&gt;button &lt;/b&gt;   &lt;b&gt;returned mask&lt;/b&gt;{@link MouseEvent#BUTTON1 BUTTON1}  {@link MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK}{@link MouseEvent#BUTTON2 BUTTON2}  {@link MouseEvent#BUTTON2_DOWN_MASK BUTTON2_DOWN_MASK}{@link MouseEvent#BUTTON3 BUTTON3}  {@link MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK}&lt;/PRE&gt;
                      If a mouse has more than three enabled buttons then more values
                      are admissible (4, 5, etc.). There is no assigned constants for these extended buttons.
                      The button masks for the extra buttons returned by this method have no assigned names like the
                      first three button masks.
                      &lt;p&gt;
                      This method has the following implementation restriction.
                      It returns masks for a limited number of buttons only. The maximum number is
                      implementation dependent and may vary.
                      This limit is defined by the relevant number
                      of buttons that may hypothetically exist on the mouse but it is greater than the{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}.
                      &lt;p&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if {@code button} is less than zero or greater than the number
                      of button masks reserved for buttons                    
                </throws>
                <since>
                    7.0                    
                </since>
                <see>
                    java.awt.MouseInfo#getNumberOfButtons()                    
                </see>
                <see>
                    Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
                <see>
                    MouseEvent#getModifiers()                    
                </see>
                <see>
                    MouseEvent#getModifiersEx()                    
                </see>
            </javadoc>
            <method name="getMaskForButton" type="int" line="244">
                <params>
                    <param name="button" type="int"/>
                </params>
                <scope line="245"/>
            </method>
            <declaration name="FIRST_HIGH_BIT" type="int" line="256"/>
            <declaration name="JDK_1_3_MODIFIERS" type="int" line="258"/>
            <declaration name="HIGH_MODIFIERS" type="int" line="259"/>
            <declaration name="when" type="long" line="261"/>
            <javadoc line="261">
                The input event&apos;s Time stamp in UTC format.  The time stamp
                  indicates when the input event was created.                
                <serial>
                                        
                </serial>
                <see>
                    #getWhen()                    
                </see>
            </javadoc>
            <declaration name="modifiers" type="int" line="270"/>
            <javadoc line="270">
                The state of the modifier mask at the time the input
                  event was fired.                
                <serial>
                                        
                </serial>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getModifiersEx()                    
                </see>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.MouseEvent                    
                </see>
            </javadoc>
            <declaration name="canAccessSystemClipboard" type="boolean" line="286"/>
            <scope line="288">
                <scope line="291"/>
                <anonymous_class line="295">
                    <method name="getButtonDownMasks" type="int[]" line="296"/>
                </anonymous_class>
            </scope>
            <method name="initIDs" type="void" line="302"/>
            <javadoc line="302">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="308">
                Constructs an InputEvent object with the specified source component,
                  modifiers, and type.
                  &lt;p&gt; This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source the object where the event originated                    
                </param>
                <param>
                    id           the integer that identifies the event type.
                      It is allowed to pass as parameter any value that
                      allowed for some subclass of {@code InputEvent} class.
                      Passing in the value different from those values result
                      in unspecified behavior                    
                </param>
                <param>
                    when         a long int that gives the time the event occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers    the modifier keys down during event (e.g. shift, ctrl,
                      alt, meta)
                      Passing negative parameter is not recommended.
                      Zero value means no modifiers.
                      Either extended _DOWN_MASK or old _MASK modifiers
                      should be used, but both models should not be mixed
                      in one event. Use of the extended modifiers is
                      preferred                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
            </javadoc>
            <method name="InputEvent" type="constructor" line="338">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <method name="canAccessSystemClipboard" type="boolean" line="345">
                <declaration name="b" type="boolean" line="346"/>
                <scope line="348">
                    <declaration name="sm" type="SecurityManager" line="349"/>
                    <scope line="350">
                        <scope line="351"/>
                        <scope line="354">
                            <scope line="355"/>
                        </scope>
                    </scope>
                    <scope line="359"/>
                </scope>
            </method>
            <javadoc line="367">
                Returns whether or not the Shift modifier is down on this event.                
            </javadoc>
            <method name="isShiftDown" type="boolean" line="370"/>
            <javadoc line="374">
                Returns whether or not the Control modifier is down on this event.                
            </javadoc>
            <method name="isControlDown" type="boolean" line="377"/>
            <javadoc line="381">
                Returns whether or not the Meta modifier is down on this event.                
            </javadoc>
            <method name="isMetaDown" type="boolean" line="384"/>
            <javadoc line="388">
                Returns whether or not the Alt modifier is down on this event.                
            </javadoc>
            <method name="isAltDown" type="boolean" line="391"/>
            <javadoc line="395">
                Returns whether or not the AltGraph modifier is down on this event.                
            </javadoc>
            <method name="isAltGraphDown" type="boolean" line="398"/>
            <javadoc line="402">
                Returns the difference in milliseconds between the timestamp of when this event occurred and
                  midnight, January 1, 1970 UTC.                
            </javadoc>
            <method name="getWhen" type="long" line="406"/>
            <javadoc line="410">
                Returns the modifier mask for this event.                
            </javadoc>
            <method name="getModifiers" type="int" line="413"/>
            <javadoc line="417">
                Returns the extended modifier mask for this event.
                  Extended modifiers represent the state of all modal keys,
                  such as ALT, CTRL, META, and the mouse buttons just after
                  the event occurred
                  &lt;P&gt;
                  For example, if the user presses &lt;b&gt;button 1&lt;/b&gt; followed by
                  &lt;b&gt;button 2&lt;/b&gt;, and then releases them in the same order,
                  the following sequence of events is generated:
                  &lt;PRE&gt;
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_DOWN_MASK&lt;/code&gt;
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK&lt;/code&gt;
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON2_DOWN_MASK&lt;/code&gt;
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON2_DOWN_MASK&lt;/code&gt;
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;:
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  It is not recommended to compare the return value of this method
                  using &lt;code&gt;==&lt;/code&gt; because new modifiers can be added in the future.
                  For example, the appropriate way to check that SHIFT and BUTTON1 are
                  down, but CTRL is up is demonstrated by the following code:
                  &lt;PRE&gt;
                  int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
                  int offmask = CTRL_DOWN_MASK;
                  if ((event.getModifiersEx() &amp; (onmask | offmask)) == onmask) {
                  ...
                  }
                  &lt;/PRE&gt;
                  The above code will work even if new modifiers are added.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getModifiersEx" type="int" line="450"/>
            <javadoc line="454">
                Consumes this event so that it will not be processed
                  in the default manner by the source which originated it.                
            </javadoc>
            <method name="consume" type="void" line="458"/>
            <javadoc line="462">
                Returns whether or not this event has been consumed.                
                <see>
                    #consume                    
                </see>
            </javadoc>
            <method name="isConsumed" type="boolean" line="466"/>
            <declaration name="serialVersionUID" type="long" line="471"/>
            <javadoc line="473">
                Returns a String describing the extended modifier keys and
                  mouse buttons, such as &quot;Shift&quot;, &quot;Button1&quot;, or &quot;Ctrl+Shift&quot;.
                  These strings can be localized by changing the
                  &lt;code&gt;awt.properties&lt;/code&gt; file.
                  &lt;p&gt;
                  Note that passing negative parameter is incorrect,
                  and will cause the returning an unspecified string.
                  Zero parameter means that no modifiers were passed and will
                  cause the returning an empty string.                
                <param>
                    modifiers a modifier mask describing the extended
                      modifier keys and mouse buttons for the event                    
                </param>
                <return>
                    a text description of the combination of extended
                      modifier keys and mouse buttons that were held down
                      during the event.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getModifiersExText" type="String" line="491">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <comment line="524">
                    remove trailing &apos;+&apos;                    
                </comment>
                <declaration name="buf" type="StringBuilder" line="492"/>
                <scope line="493"/>
                <scope line="497"/>
                <scope line="501"/>
                <scope line="505"/>
                <scope line="509"/>
                <declaration name="buttonNumber" type="int" line="514"/>
                <scope line="515">
                    <scope line="516"/>
                </scope>
                <scope line="522"/>
            </method>
        </class>
    </source>