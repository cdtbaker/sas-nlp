<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Event"/>
        <class name="ActionEvent" line="4">
            <extends class="AWTEvent"/>
            <javadoc line="4">
                A semantic event which indicates that a component-defined action occurred.
                  This high-level event is generated by a component (such as a
                  &lt;code&gt;Button&lt;/code&gt;) when
                  the component-specific action occurs (such as being pressed).
                  The event is passed to every &lt;code&gt;ActionListener&lt;/code&gt; object
                  that registered to receive such events using the component&apos;s
                  &lt;code&gt;addActionListener&lt;/code&gt; method.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; To invoke an &lt;code&gt;ActionEvent&lt;/code&gt; on a
                  &lt;code&gt;Button&lt;/code&gt; using the keyboard, use the Space bar.
                  &lt;P&gt;
                  The object that implements the &lt;code&gt;ActionListener&lt;/code&gt; interface
                  gets this &lt;code&gt;ActionEvent&lt;/code&gt; when the event occurs. The listener
                  is therefore spared the details of processing individual mouse movements
                  and mouse clicks, and can instead process a &quot;meaningful&quot; (semantic)
                  event like &quot;button pressed&quot;.
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code ActionEvent} instance is not
                  in the range from {@code ACTION_FIRST} to {@code ACTION_LAST}.                
                <see>
                    ActionListener                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/events/actionlistener.html&quot;&gt;Tutorial: How to Write an Action Listener&lt;/a&gt;                    
                </see>
                <author>
                    Carl Quinn                    
                </author>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="SHIFT_MASK" type="int" line="31"/>
            <javadoc line="31">
                The shift modifier. An indicator that the shift key was held
                  down during the event.                
            </javadoc>
            <declaration name="CTRL_MASK" type="int" line="36"/>
            <javadoc line="36">
                The control modifier. An indicator that the control key was held
                  down during the event.                
            </javadoc>
            <declaration name="META_MASK" type="int" line="41"/>
            <javadoc line="41">
                The meta modifier. An indicator that the meta key was held
                  down during the event.                
            </javadoc>
            <declaration name="ALT_MASK" type="int" line="46"/>
            <javadoc line="46">
                The alt modifier. An indicator that the alt key was held
                  down during the event.                
            </javadoc>
            <declaration name="ACTION_FIRST" type="int" line="51"/>
            <javadoc line="51">
                The first number in the range of ids used for action events.                
            </javadoc>
            <declaration name="ACTION_LAST" type="int" line="55"/>
            <javadoc line="55">
                The last number in the range of ids used for action events.                
            </javadoc>
            <declaration name="ACTION_PERFORMED" type="int" line="59"/>
            <javadoc line="59">
                This event id indicates that a meaningful action occured.                
            </javadoc>
            <declaration name="actionCommand" type="String" line="63"/>
            <javadoc line="63">
                The nonlocalized string that gives more details
                  of what actually caused the event.
                  This information is very specific to the component
                  that fired it.                
                <serial>
                                        
                </serial>
                <see>
                    #getActionCommand                    
                </see>
            </javadoc>
            <declaration name="when" type="long" line="72"/>
            <javadoc line="72">
                Timestamp of when this event occurred. Because an ActionEvent is a high-
                  level, semantic event, the timestamp is typically the same as an
                  underlying InputEvent.                
                <serial>
                                        
                </serial>
                <see>
                    #getWhen                    
                </see>
            </javadoc>
            <declaration name="modifiers" type="int" line="80"/>
            <javadoc line="80">
                This represents the key modifier that was selected,
                  and is used to determine the state of the selected key.
                  If no modifier has been selected it will default to
                  zero.                
                <serial>
                                        
                </serial>
                <see>
                    #getModifiers                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <javadoc line="90">
                Constructs an &lt;code&gt;ActionEvent&lt;/code&gt; object.
                  &lt;p&gt;
                  This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.
                  A &lt;code&gt;null&lt;/code&gt; &lt;code&gt;command&lt;/code&gt; string is legal,
                  but not recommended.                
                <param>
                    source  The object that originated the event                    
                </param>
                <param>
                    id      An integer that identifies the event.
                      For information on allowable values, see
                      the class description for {@link ActionEvent}                    
                </param>
                <param>
                    command A string that may specify a command (possibly one
                      of several) associated with the event                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getActionCommand()                    
                </see>
            </javadoc>
            <method name="ActionEvent" type="constructor" line="109">
                <params>
                    <param name="source" type="Object"/>
                    <param name="id" type="int"/>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="112">
                Constructs an &lt;code&gt;ActionEvent&lt;/code&gt; object with modifier keys.
                  &lt;p&gt;
                  This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.
                  A &lt;code&gt;null&lt;/code&gt; &lt;code&gt;command&lt;/code&gt; string is legal,
                  but not recommended.                
                <param>
                    source  The object that originated the event                    
                </param>
                <param>
                    id      An integer that identifies the event.
                      For information on allowable values, see
                      the class description for {@link ActionEvent}                    
                </param>
                <param>
                    command A string that may specify a command (possibly one
                      of several) associated with the event                    
                </param>
                <param>
                    modifiers The modifier keys down during event
                      (shift, ctrl, alt, meta).
                      Passing negative parameter is not recommended.
                      Zero value means that no modifiers were passed                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getActionCommand()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
            </javadoc>
            <method name="ActionEvent" type="constructor" line="136">
                <params>
                    <param name="source" type="Object"/>
                    <param name="id" type="int"/>
                    <param name="command" type="String"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                Constructs an &lt;code&gt;ActionEvent&lt;/code&gt; object with the specified
                  modifier keys and timestamp.
                  &lt;p&gt;
                  This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.
                  A &lt;code&gt;null&lt;/code&gt; &lt;code&gt;command&lt;/code&gt; string is legal,
                  but not recommended.                
                <param>
                    source    The object that originated the event                    
                </param>
                <param>
                    id      An integer that identifies the event.
                      For information on allowable values, see
                      the class description for {@link ActionEvent}                    
                </param>
                <param>
                    command A string that may specify a command (possibly one
                      of several) associated with the event                    
                </param>
                <param>
                    modifiers The modifier keys down during event
                      (shift, ctrl, alt, meta).
                      Passing negative parameter is not recommended.
                      Zero value means that no modifiers were passed                    
                </param>
                <param>
                    when   A long that gives the time the event occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getActionCommand()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="ActionEvent" type="constructor" line="169">
                <params>
                    <param name="source" type="Object"/>
                    <param name="id" type="int"/>
                    <param name="command" type="String"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <javadoc line="175">
                Returns the command string associated with this action.
                  This string allows a &quot;modal&quot; component to specify one of several
                  commands, depending on its state. For example, a single button might
                  toggle between &quot;show details&quot; and &quot;hide details&quot;. The source object
                  and the event would be the same in each case, but the command string
                  would identify the intended action.
                  &lt;p&gt;
                  Note that if a &lt;code&gt;null&lt;/code&gt; command string was passed
                  to the constructor for this &lt;code&gt;ActionEvent&lt;/code&gt;, this
                  this method returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the string identifying the command for this event                    
                </return>
            </javadoc>
            <method name="getActionCommand" type="String" line="188"/>
            <javadoc line="191">
                Returns the timestamp of when this event occurred. Because an
                  ActionEvent is a high-level, semantic event, the timestamp is typically
                  the same as an underlying InputEvent.                
                <return>
                    this event&apos;s timestamp                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWhen" type="long" line="198"/>
            <javadoc line="201">
                Returns the modifier keys held down during this action event.                
                <return>
                    the bitwise-or of the modifier constants                    
                </return>
            </javadoc>
            <method name="getModifiers" type="int" line="205"/>
            <javadoc line="208">
                Returns a parameter string identifying this action event.
                  This method is useful for event-logging and for debugging.                
                <return>
                    a string identifying the event and its associated command                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="213">
                <declaration name="typeStr" type="String" line="214"/>
            </method>
        </class>
    </source>