<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.Window"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="WindowEvent" line="32">
            <extends class="ComponentEvent"/>
            <comment line="70">
                200                
            </comment>
            <comment line="79">
                Event.WINDOW_DESTROY                
            </comment>
            <comment line="94">
                Event.WINDOW_ICONIFY                
            </comment>
            <comment line="100">
                Event.WINDOW_DEICONIFY                
            </comment>
            <comment line="170">
                JDK 1.1 serialVersionUID                
            </comment>
            <javadoc line="32">
                A low-level event that indicates that a window has changed its status. This
                  low-level event is generated by a Window object when it is opened, closed,
                  activated, deactivated, iconified, or deiconified, or when focus is
                  transfered into or out of the Window.
                  &lt;P&gt;
                  The event is passed to every &lt;code&gt;WindowListener&lt;/code&gt;
                  or &lt;code&gt;WindowAdapter&lt;/code&gt; object which registered to receive such
                  events using the window&apos;s &lt;code&gt;addWindowListener&lt;/code&gt; method.
                  (&lt;code&gt;WindowAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;WindowListener&lt;/code&gt; interface.) Each such listener object
                  gets this &lt;code&gt;WindowEvent&lt;/code&gt; when the event occurs.
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code WindowEvent} instance is not
                  in the range from {@code WINDOW_FIRST} to {@code WINDOW_LAST}.                
                <author>
                    Carl Quinn                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <see>
                    WindowAdapter                    
                </see>
                <see>
                    WindowListener                    
                </see>
                <see>
                    <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/windowlistener.html">Tutorial: Writing a Window Listener</a>                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="WINDOW_FIRST" type="int" line="60"/>
            <javadoc line="60">
                The first number in the range of ids used for window events.                
            </javadoc>
            <declaration name="WINDOW_OPENED" type="int" line="65"/>
            <javadoc line="65">
                The window opened event.  This event is delivered only
                  the first time a window is made visible.                
            </javadoc>
            <declaration name="WINDOW_CLOSING" type="int" line="71"/>
            <javadoc line="71">
                The &quot;window is closing&quot; event. This event is delivered when
                  the user attempts to close the window from the window&apos;s system menu.
                  If the program does not explicitly hide or dispose the window
                  while processing this event, the window close operation will be
                  cancelled.                
            </javadoc>
            <declaration name="WINDOW_CLOSED" type="int" line="80"/>
            <javadoc line="80">
                The window closed event. This event is delivered after
                  the window has been closed as the result of a call to dispose.                
            </javadoc>
            <declaration name="WINDOW_ICONIFIED" type="int" line="86"/>
            <javadoc line="86">
                The window iconified event. This event is delivered when
                  the window has been changed from a normal to a minimized state.
                  For many platforms, a minimized window is displayed as
                  the icon specified in the window&apos;s iconImage property.                
                <see>
                    java.awt.Frame#setIconImage                    
                </see>
            </javadoc>
            <declaration name="WINDOW_DEICONIFIED" type="int" line="95"/>
            <javadoc line="95">
                The window deiconified event type. This event is delivered when
                  the window has been changed from a minimized to a normal state.                
            </javadoc>
            <declaration name="WINDOW_ACTIVATED" type="int" line="101"/>
            <javadoc line="101">
                The window-activated event type. This event is delivered when the Window
                  becomes the active Window. Only a Frame or a Dialog can be the active
                  Window. The native windowing system may denote the active Window or its
                  children with special decorations, such as a highlighted title bar. The
                  active Window is always either the focused Window, or the first Frame or
                  Dialog that is an owner of the focused Window.                
            </javadoc>
            <declaration name="WINDOW_DEACTIVATED" type="int" line="111"/>
            <javadoc line="111">
                The window-deactivated event type. This event is delivered when the
                  Window is no longer the active Window. Only a Frame or a Dialog can be
                  the active Window. The native windowing system may denote the active
                  Window or its children with special decorations, such as a highlighted
                  title bar. The active Window is always either the focused Window, or the
                  first Frame or Dialog that is an owner of the focused Window.                
            </javadoc>
            <declaration name="WINDOW_GAINED_FOCUS" type="int" line="121"/>
            <javadoc line="121">
                The window-gained-focus event type. This event is delivered when the
                  Window becomes the focused Window, which means that the Window, or one
                  of its subcomponents, will receive keyboard events.                
            </javadoc>
            <declaration name="WINDOW_LOST_FOCUS" type="int" line="128"/>
            <javadoc line="128">
                The window-lost-focus event type. This event is delivered when a Window
                  is no longer the focused Window, which means keyboard events will no
                  longer be delivered to the Window or any of its subcomponents.                
            </javadoc>
            <declaration name="WINDOW_STATE_CHANGED" type="int" line="135"/>
            <javadoc line="135">
                The window-state-changed event type.  This event is delivered
                  when a Window&apos;s state is changed by virtue of it being
                  iconified, maximized etc.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="WINDOW_LAST" type="int" line="143"/>
            <javadoc line="143">
                The last number in the range of ids used for window events.                
            </javadoc>
            <declaration name="opposite" type="Window" line="148"/>
            <javadoc line="148">
                The other Window involved in this focus or activation change. For a
                  WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window that
                  lost activation or focus. For a WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS
                  event, this is the Window that gained activation or focus. For any other
                  type of WindowEvent, or if the focus or activation change occurs with a
                  native application, a Java application in a different VM, or with no
                  other Window, null is returned.                
                <see>
                    #getOppositeWindow                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="oldState" type="int" line="162"/>
            <javadoc line="162">
                TBS                
            </javadoc>
            <declaration name="newState" type="int" line="166"/>
            <declaration name="serialVersionUID" type="long" line="172"/>
            <javadoc line="175">
                Constructs a &lt;code&gt;WindowEvent&lt;/code&gt; object.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The <code>Window</code> object
                      that originated the event                    
                </param>
                <param>
                    id        An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link WindowEvent}                    
                </param>
                <param>
                    opposite  The other window involved in the focus or activation
                      change, or <code>null</code>                    
                </param>
                <param>
                    oldState  Previous state of the window for window state change event.
                      See {@code #getOldState()} for allowable values                    
                </param>
                <param>
                    newState  New state of the window for window state change event.
                      See {@code #getNewState()} for allowable values                    
                </param>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
                <see>
                    #getWindow()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getOppositeWindow()                    
                </see>
                <see>
                    #getOldState()                    
                </see>
                <see>
                    #getNewState()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="WindowEvent" type="constructor" line="202">
                <params>
                    <param name="source" type="Window"/>
                    <param name="id" type="int"/>
                    <param name="opposite" type="Window"/>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
            </method>
            <javadoc line="209">
                Constructs a &lt;code&gt;WindowEvent&lt;/code&gt; object with the
                  specified opposite &lt;code&gt;Window&lt;/code&gt;. The opposite
                  &lt;code&gt;Window&lt;/code&gt; is the other &lt;code&gt;Window&lt;/code&gt;
                  involved in this focus or activation change.
                  For a &lt;code&gt;WINDOW_ACTIVATED&lt;/code&gt; or
                  &lt;code&gt;WINDOW_GAINED_FOCUS&lt;/code&gt; event, this is the
                  &lt;code&gt;Window&lt;/code&gt; that lost activation or focus.
                  For a &lt;code&gt;WINDOW_DEACTIVATED&lt;/code&gt; or
                  &lt;code&gt;WINDOW_LOST_FOCUS&lt;/code&gt; event, this is the
                  &lt;code&gt;Window&lt;/code&gt; that gained activation or focus.
                  If this focus change occurs with a native application, with a
                  Java application in a different VM, or with no other
                  &lt;code&gt;Window&lt;/code&gt;, then the opposite Window is &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source     The <code>Window</code> object that
                      originated the event                    
                </param>
                <param>
                    id        An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link WindowEvent}.
                      It is expected that this constructor will not
                      be used for other then{@code WINDOW_ACTIVATED},{@code WINDOW_DEACTIVATED},{@code WINDOW_GAINED_FOCUS}, or {@code WINDOW_LOST_FOCUS}.{@code WindowEvent} types,
                      because the opposite <code>Window</code> of other event types
                      will always be {@code null}.                    
                </param>
                <param>
                    opposite   The other <code>Window</code> involved in the
                      focus or activation change, or <code>null</code>                    
                </param>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
                <see>
                    #getWindow()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getOppositeWindow()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="WindowEvent" type="constructor" line="247">
                <params>
                    <param name="source" type="Window"/>
                    <param name="id" type="int"/>
                    <param name="opposite" type="Window"/>
                </params>
            </method>
            <javadoc line="251">
                Constructs a &lt;code&gt;WindowEvent&lt;/code&gt; object with the specified
                  previous and new window states.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The <code>Window</code> object
                      that originated the event                    
                </param>
                <param>
                    id        An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link WindowEvent}.
                      It is expected that this constructor will not
                      be used for other then{@code WINDOW_STATE_CHANGED}{@code WindowEvent}types, because the previous and new window
                      states are meaningless for other event types.                    
                </param>
                <param>
                    oldState  An integer representing the previous window state.
                      See {@code #getOldState()} for allowable values                    
                </param>
                <param>
                    newState  An integer representing the new window state.
                      See {@code #getNewState()} for allowable values                    
                </param>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
                <see>
                    #getWindow()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getOldState()                    
                </see>
                <see>
                    #getNewState()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="WindowEvent" type="constructor" line="280">
                <params>
                    <param name="source" type="Window"/>
                    <param name="id" type="int"/>
                    <param name="oldState" type="int"/>
                    <param name="newState" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                Constructs a &lt;code&gt;WindowEvent&lt;/code&gt; object.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source The <code>Window</code> object that originated the event                    
                </param>
                <param>
                    id     An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link WindowEvent}.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>source</code> is null                    
                </throws>
                <see>
                    #getWindow()                    
                </see>
                <see>
                    #getID()                    
                </see>
            </javadoc>
            <method name="WindowEvent" type="constructor" line="298">
                <params>
                    <param name="source" type="Window"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <javadoc line="302">
                Returns the originator of the event.                
                <return>
                    the Window object that originated the event                    
                </return>
            </javadoc>
            <method name="getWindow" type="Window" line="307"/>
            <javadoc line="311">
                Returns the other Window involved in this focus or activation change.
                  For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window
                  that lost activation or focus. For a WINDOW_DEACTIVATED or
                  WINDOW_LOST_FOCUS event, this is the Window that gained activation or
                  focus. For any other type of WindowEvent, or if the focus or activation
                  change occurs with a native application, with a Java application in a
                  different VM or context, or with no other Window, null is returned.                
                <return>
                    the other Window involved in the focus or activation change, or
                      null                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getOppositeWindow" type="Window" line="324">
                <scope line="325"/>
            </method>
            <javadoc line="335">
                For &lt;code&gt;WINDOW_STATE_CHANGED&lt;/code&gt; events returns the
                  previous state of the window. The state is
                  represented as a bitwise mask.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;NORMAL&lt;/code&gt;
                  &lt;br&gt;Indicates that no state bits are set.
                  &lt;li&gt;&lt;code&gt;ICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_BOTH&lt;/code&gt;
                  &lt;br&gt;Concatenates &lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  and &lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;.
                  &lt;/ul&gt;                
                <return>
                    a bitwise mask of the previous window state                    
                </return>
                <see>
                    java.awt.Frame#getExtendedState()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getOldState" type="int" line="354"/>
            <javadoc line="358">
                For &lt;code&gt;WINDOW_STATE_CHANGED&lt;/code&gt; events returns the
                  new state of the window. The state is
                  represented as a bitwise mask.
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;NORMAL&lt;/code&gt;
                  &lt;br&gt;Indicates that no state bits are set.
                  &lt;li&gt;&lt;code&gt;ICONIFIED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;MAXIMIZED_BOTH&lt;/code&gt;
                  &lt;br&gt;Concatenates &lt;code&gt;MAXIMIZED_HORIZ&lt;/code&gt;
                  and &lt;code&gt;MAXIMIZED_VERT&lt;/code&gt;.
                  &lt;/ul&gt;                
                <return>
                    a bitwise mask of the new window state                    
                </return>
                <see>
                    java.awt.Frame#getExtendedState()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNewState" type="int" line="377"/>
            <javadoc line="381">
                Returns a parameter string identifying this event.
                  This method is useful for event-logging and for debugging.                
                <return>
                    a string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="387">
                <declaration name="typeStr" type="String" line="388"/>
            </method>
        </class>
    </source>