<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.Event"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <class name="KeyEvent" line="8">
            <extends class="InputEvent"/>
            <javadoc line="8">
                An event which indicates that a keystroke occurred in a component.
                  &lt;p&gt;
                  This low-level event is generated by a component object (such as a text
                  field) when a key is pressed, released, or typed.
                  The event is passed to every &lt;code&gt;KeyListener&lt;/code&gt;
                  or &lt;code&gt;KeyAdapter&lt;/code&gt; object which registered to receive such
                  events using the component&apos;s &lt;code&gt;addKeyListener&lt;/code&gt; method.
                  (&lt;code&gt;KeyAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;KeyListener&lt;/code&gt; interface.)  Each such listener object
                  gets this &lt;code&gt;KeyEvent&lt;/code&gt; when the event occurs.
                  &lt;p&gt;
                  &lt;em&gt;&quot;Key typed&quot; events&lt;/em&gt; are higher-level and generally do not depend on
                  the platform or keyboard layout.  They are generated when a Unicode character
                  is entered, and are the preferred way to find out about character input.
                  In the simplest case, a key typed event is produced by a single key press
                  (e.g., &apos;a&apos;).  Often, however, characters are produced by series of key
                  presses (e.g., &apos;shift&apos; + &apos;a&apos;), and the mapping from key pressed events to
                  key typed events may be many-to-one or many-to-many.  Key releases are not
                  usually necessary to generate a key typed event, but there are some cases
                  where the key typed event is not generated until a key is released (e.g.,
                  entering ASCII sequences via the Alt-Numpad method in Windows).
                  No key typed events are generated for keys that don&apos;t generate Unicode
                  characters (e.g., action keys, modifier keys, etc.).
                  &lt;p&gt;
                  The getKeyChar method always returns a valid Unicode character or
                  CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:
                  KEY_PRESSED and KEY_RELEASED events are not necessarily associated
                  with character input.  Therefore, the result of the getKeyChar method
                  is guaranteed to be meaningful only for KEY_TYPED events.
                  &lt;p&gt;
                  For key pressed and key released events, the getKeyCode method returns
                  the event&apos;s keyCode.  For key typed events, the getKeyCode method
                  always returns {@code VK_UNDEFINED}. The {@code getExtendedKeyCode} method
                  may also be used with many international keyboard layouts.
                  &lt;p&gt;
                  &lt;em&gt;&quot;Key pressed&quot; and &quot;key released&quot; events&lt;/em&gt; are lower-level and depend
                  on the platform and keyboard layout. They are generated whenever a key is
                  pressed or released, and are the only way to find out about keys that don&apos;t
                  generate character input (e.g., action keys, modifier keys, etc.). The key
                  being pressed or released is indicated by the {@code getKeyCode} and {@code getExtendedKeyCode}methods, which return a virtual key code.
                  &lt;p&gt;
                  &lt;em&gt;Virtual key codes&lt;/em&gt; are used to report which keyboard key has
                  been pressed, rather than a character generated by the combination
                  of one or more keystrokes (such as &quot;A&quot;, which comes from shift and &quot;a&quot;).
                  &lt;p&gt;
                  For example, pressing the Shift key will cause a KEY_PRESSED event
                  with a VK_SHIFT keyCode, while pressing the &apos;a&apos; key will result in
                  a VK_A keyCode.  After the &apos;a&apos; key is released, a KEY_RELEASED event
                  will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar
                  value of &apos;A&apos; is generated.
                  &lt;p&gt;
                  Pressing and releasing a key on the keyboard results in the generating
                  the following key events (in order):
                  &lt;PRE&gt;{@code KEY_PRESSED}{@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.){@code KEY_RELEASED}&lt;/PRE&gt;
                  But in some cases (e.g. auto-repeat or input method is activated) the order
                  could be different (and platform dependent).
                  &lt;p&gt;
                  Notes:
                  &lt;ul&gt;
                  &lt;li&gt;Key combinations which do not result in Unicode characters, such as action
                  keys like F1 and the HELP key, do not generate KEY_TYPED events.
                  &lt;li&gt;Not all keyboards or systems are capable of generating all
                  virtual key codes.  No attempt is made in Java to generate these keys
                  artificially.
                  &lt;li&gt;Virtual key codes do not identify a physical key: they depend on the
                  platform and keyboard layout. For example, the key that generates VK_Q
                  when using a U.S. keyboard layout will generate VK_A when using a French
                  keyboard layout.
                  &lt;li&gt;The key that generates {@code VK_Q} when using a U.S. keyboard layout also
                  generates a unique code for Russian or Hebrew layout. There is no a{@code VK_} constant for these and many other codes in various layouts. These codes
                  may be obtained by using {@code getExtendedKeyCode} and are used whenever
                  a {@code VK_} constant is used.
                  &lt;li&gt;Not all characters have a keycode associated with them.  For example,
                  there is no keycode for the question mark because there is no keyboard
                  for which it appears on the primary layer.
                  &lt;li&gt;In order to support the platform-independent handling of action keys,
                  the Java platform uses a few additional virtual key constants for functions
                  that would otherwise have to be recognized by interpreting virtual key codes
                  and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
                  is returned instead of VK_CONVERT with the ALT modifier.
                  &lt;li&gt;As specified in &lt;a href=&quot;../doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt;
                  key events are dispatched to the focus owner by default.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  WARNING: Aside from those keys that are defined by the Java language
                  (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
                  constants.  Sun reserves the right to change these values as needed
                  to accomodate a wider range of keyboards in the future.
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code KeyEvent} instance is not
                  in the range from {@code KEY_FIRST} to {@code KEY_LAST}.                
                <author>
                    Carl Quinn                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Norbert Lindenberg                    
                </author>
                <see>
                    KeyAdapter                    
                </see>
                <see>
                    KeyListener                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/post1.0/ui/keylistener.html&quot;&gt;Tutorial: Writing a Key Listener&lt;/a&gt;                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="isProxyActive" type="boolean" line="110"/>
            <javadoc line="110">
                Stores the state of native event dispatching system
                  - true, if when the event was created event proxying
                  mechanism was active
                  - false, if it was inactive
                  Used in Component.dispatchEventImpl to correctly dispatch
                  events when proxy is active                
            </javadoc>
            <declaration name="KEY_FIRST" type="int" line="119"/>
            <javadoc line="119">
                The first number in the range of ids used for key events.                
            </javadoc>
            <declaration name="KEY_LAST" type="int" line="123"/>
            <javadoc line="123">
                The last number in the range of ids used for key events.                
            </javadoc>
            <declaration name="KEY_TYPED" type="int" line="127"/>
            <javadoc line="127">
                The &quot;key typed&quot; event.  This event is generated when a character is
                  entered.  In the simplest case, it is produced by a single key press.
                  Often, however, characters are produced by series of key presses, and
                  the mapping from key pressed events to key typed events may be
                  many-to-one or many-to-many.                
            </javadoc>
            <declaration name="KEY_PRESSED" type="int" line="135"/>
            <javadoc line="135">
                The &quot;key pressed&quot; event. This event is generated when a key
                  is pushed down.                
            </javadoc>
            <declaration name="KEY_RELEASED" type="int" line="140"/>
            <javadoc line="140">
                The &quot;key released&quot; event. This event is generated when a key
                  is let up.                
            </javadoc>
            <declaration name="VK_ENTER" type="int" line="145"/>
            <declaration name="VK_BACK_SPACE" type="int" line="146"/>
            <declaration name="VK_TAB" type="int" line="147"/>
            <declaration name="VK_CANCEL" type="int" line="148"/>
            <declaration name="VK_CLEAR" type="int" line="149"/>
            <declaration name="VK_SHIFT" type="int" line="150"/>
            <declaration name="VK_CONTROL" type="int" line="151"/>
            <declaration name="VK_ALT" type="int" line="152"/>
            <declaration name="VK_PAUSE" type="int" line="153"/>
            <declaration name="VK_CAPS_LOCK" type="int" line="154"/>
            <declaration name="VK_ESCAPE" type="int" line="155"/>
            <declaration name="VK_SPACE" type="int" line="156"/>
            <declaration name="VK_PAGE_UP" type="int" line="157"/>
            <declaration name="VK_PAGE_DOWN" type="int" line="158"/>
            <declaration name="VK_END" type="int" line="159"/>
            <declaration name="VK_HOME" type="int" line="160"/>
            <declaration name="VK_LEFT" type="int" line="161"/>
            <javadoc line="161">
                Constant for the non-numpad &lt;b&gt;left&lt;/b&gt; arrow key.                
                <see>
                    #VK_KP_LEFT                    
                </see>
            </javadoc>
            <declaration name="VK_UP" type="int" line="166"/>
            <javadoc line="166">
                Constant for the non-numpad &lt;b&gt;up&lt;/b&gt; arrow key.                
                <see>
                    #VK_KP_UP                    
                </see>
            </javadoc>
            <declaration name="VK_RIGHT" type="int" line="171"/>
            <javadoc line="171">
                Constant for the non-numpad &lt;b&gt;right&lt;/b&gt; arrow key.                
                <see>
                    #VK_KP_RIGHT                    
                </see>
            </javadoc>
            <declaration name="VK_DOWN" type="int" line="176"/>
            <javadoc line="176">
                Constant for the non-numpad &lt;b&gt;down&lt;/b&gt; arrow key.                
                <see>
                    #VK_KP_DOWN                    
                </see>
            </javadoc>
            <declaration name="VK_COMMA" type="int" line="181"/>
            <javadoc line="181">
                Constant for the comma key, &quot;,&quot;                
            </javadoc>
            <declaration name="VK_MINUS" type="int" line="185"/>
            <javadoc line="185">
                Constant for the minus key, &quot;-&quot;                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_PERIOD" type="int" line="190"/>
            <javadoc line="190">
                Constant for the period key, &quot;.&quot;                
            </javadoc>
            <declaration name="VK_SLASH" type="int" line="194"/>
            <javadoc line="194">
                Constant for the forward slash key, &quot;/&quot;                
            </javadoc>
            <declaration name="VK_0" type="int" line="198"/>
            <javadoc line="198">
                VK_0 thru VK_9 are the same as ASCII &apos;0&apos; thru &apos;9&apos; (0x30 - 0x39)                
            </javadoc>
            <declaration name="VK_1" type="int" line="202"/>
            <declaration name="VK_2" type="int" line="203"/>
            <declaration name="VK_3" type="int" line="204"/>
            <declaration name="VK_4" type="int" line="205"/>
            <declaration name="VK_5" type="int" line="206"/>
            <declaration name="VK_6" type="int" line="207"/>
            <declaration name="VK_7" type="int" line="208"/>
            <declaration name="VK_8" type="int" line="209"/>
            <declaration name="VK_9" type="int" line="210"/>
            <declaration name="VK_SEMICOLON" type="int" line="211"/>
            <javadoc line="211">
                Constant for the semicolon key, &quot;;&quot;                
            </javadoc>
            <declaration name="VK_EQUALS" type="int" line="215"/>
            <javadoc line="215">
                Constant for the equals key, &quot;=&quot;                
            </javadoc>
            <declaration name="VK_A" type="int" line="219"/>
            <javadoc line="219">
                VK_A thru VK_Z are the same as ASCII &apos;A&apos; thru &apos;Z&apos; (0x41 - 0x5A)                
            </javadoc>
            <declaration name="VK_B" type="int" line="223"/>
            <declaration name="VK_C" type="int" line="224"/>
            <declaration name="VK_D" type="int" line="225"/>
            <declaration name="VK_E" type="int" line="226"/>
            <declaration name="VK_F" type="int" line="227"/>
            <declaration name="VK_G" type="int" line="228"/>
            <declaration name="VK_H" type="int" line="229"/>
            <declaration name="VK_I" type="int" line="230"/>
            <declaration name="VK_J" type="int" line="231"/>
            <declaration name="VK_K" type="int" line="232"/>
            <declaration name="VK_L" type="int" line="233"/>
            <declaration name="VK_M" type="int" line="234"/>
            <declaration name="VK_N" type="int" line="235"/>
            <declaration name="VK_O" type="int" line="236"/>
            <declaration name="VK_P" type="int" line="237"/>
            <declaration name="VK_Q" type="int" line="238"/>
            <declaration name="VK_R" type="int" line="239"/>
            <declaration name="VK_S" type="int" line="240"/>
            <declaration name="VK_T" type="int" line="241"/>
            <declaration name="VK_U" type="int" line="242"/>
            <declaration name="VK_V" type="int" line="243"/>
            <declaration name="VK_W" type="int" line="244"/>
            <declaration name="VK_X" type="int" line="245"/>
            <declaration name="VK_Y" type="int" line="246"/>
            <declaration name="VK_Z" type="int" line="247"/>
            <declaration name="VK_OPEN_BRACKET" type="int" line="248"/>
            <javadoc line="248">
                Constant for the open bracket key, &quot;[&quot;                
            </javadoc>
            <declaration name="VK_BACK_SLASH" type="int" line="252"/>
            <javadoc line="252">
                Constant for the back slash key, &quot;\&quot;                
            </javadoc>
            <declaration name="VK_CLOSE_BRACKET" type="int" line="256"/>
            <javadoc line="256">
                Constant for the close bracket key, &quot;]&quot;                
            </javadoc>
            <declaration name="VK_NUMPAD0" type="int" line="260"/>
            <declaration name="VK_NUMPAD1" type="int" line="261"/>
            <declaration name="VK_NUMPAD2" type="int" line="262"/>
            <declaration name="VK_NUMPAD3" type="int" line="263"/>
            <declaration name="VK_NUMPAD4" type="int" line="264"/>
            <declaration name="VK_NUMPAD5" type="int" line="265"/>
            <declaration name="VK_NUMPAD6" type="int" line="266"/>
            <declaration name="VK_NUMPAD7" type="int" line="267"/>
            <declaration name="VK_NUMPAD8" type="int" line="268"/>
            <declaration name="VK_NUMPAD9" type="int" line="269"/>
            <declaration name="VK_MULTIPLY" type="int" line="270"/>
            <declaration name="VK_ADD" type="int" line="271"/>
            <declaration name="VK_SEPARATER" type="int" line="272"/>
            <javadoc line="272">
                This constant is obsolete, and is included only for backwards
                  compatibility.                
                <see>
                    #VK_SEPARATOR                    
                </see>
            </javadoc>
            <declaration name="VK_SEPARATOR" type="int" line="278"/>
            <javadoc line="278">
                Constant for the Numpad Separator key.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="VK_SUBTRACT" type="int" line="283"/>
            <declaration name="VK_DECIMAL" type="int" line="284"/>
            <declaration name="VK_DIVIDE" type="int" line="285"/>
            <declaration name="VK_DELETE" type="int" line="286"/>
            <declaration name="VK_NUM_LOCK" type="int" line="287"/>
            <declaration name="VK_SCROLL_LOCK" type="int" line="288"/>
            <declaration name="VK_F1" type="int" line="289"/>
            <javadoc line="289">
                Constant for the F1 function key.                
            </javadoc>
            <declaration name="VK_F2" type="int" line="293"/>
            <javadoc line="293">
                Constant for the F2 function key.                
            </javadoc>
            <declaration name="VK_F3" type="int" line="297"/>
            <javadoc line="297">
                Constant for the F3 function key.                
            </javadoc>
            <declaration name="VK_F4" type="int" line="301"/>
            <javadoc line="301">
                Constant for the F4 function key.                
            </javadoc>
            <declaration name="VK_F5" type="int" line="305"/>
            <javadoc line="305">
                Constant for the F5 function key.                
            </javadoc>
            <declaration name="VK_F6" type="int" line="309"/>
            <javadoc line="309">
                Constant for the F6 function key.                
            </javadoc>
            <declaration name="VK_F7" type="int" line="313"/>
            <javadoc line="313">
                Constant for the F7 function key.                
            </javadoc>
            <declaration name="VK_F8" type="int" line="317"/>
            <javadoc line="317">
                Constant for the F8 function key.                
            </javadoc>
            <declaration name="VK_F9" type="int" line="321"/>
            <javadoc line="321">
                Constant for the F9 function key.                
            </javadoc>
            <declaration name="VK_F10" type="int" line="325"/>
            <javadoc line="325">
                Constant for the F10 function key.                
            </javadoc>
            <declaration name="VK_F11" type="int" line="329"/>
            <javadoc line="329">
                Constant for the F11 function key.                
            </javadoc>
            <declaration name="VK_F12" type="int" line="333"/>
            <javadoc line="333">
                Constant for the F12 function key.                
            </javadoc>
            <declaration name="VK_F13" type="int" line="337"/>
            <javadoc line="337">
                Constant for the F13 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F14" type="int" line="342"/>
            <javadoc line="342">
                Constant for the F14 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F15" type="int" line="347"/>
            <javadoc line="347">
                Constant for the F15 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F16" type="int" line="352"/>
            <javadoc line="352">
                Constant for the F16 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F17" type="int" line="357"/>
            <javadoc line="357">
                Constant for the F17 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F18" type="int" line="362"/>
            <javadoc line="362">
                Constant for the F18 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F19" type="int" line="367"/>
            <javadoc line="367">
                Constant for the F19 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F20" type="int" line="372"/>
            <javadoc line="372">
                Constant for the F20 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F21" type="int" line="377"/>
            <javadoc line="377">
                Constant for the F21 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F22" type="int" line="382"/>
            <javadoc line="382">
                Constant for the F22 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F23" type="int" line="387"/>
            <javadoc line="387">
                Constant for the F23 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_F24" type="int" line="392"/>
            <javadoc line="392">
                Constant for the F24 function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_PRINTSCREEN" type="int" line="397"/>
            <declaration name="VK_INSERT" type="int" line="398"/>
            <declaration name="VK_HELP" type="int" line="399"/>
            <declaration name="VK_META" type="int" line="400"/>
            <declaration name="VK_BACK_QUOTE" type="int" line="401"/>
            <declaration name="VK_QUOTE" type="int" line="402"/>
            <declaration name="VK_KP_UP" type="int" line="403"/>
            <javadoc line="403">
                Constant for the numeric keypad &lt;b&gt;up&lt;/b&gt; arrow key.                
                <see>
                    #VK_UP                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_KP_DOWN" type="int" line="409"/>
            <javadoc line="409">
                Constant for the numeric keypad &lt;b&gt;down&lt;/b&gt; arrow key.                
                <see>
                    #VK_DOWN                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_KP_LEFT" type="int" line="415"/>
            <javadoc line="415">
                Constant for the numeric keypad &lt;b&gt;left&lt;/b&gt; arrow key.                
                <see>
                    #VK_LEFT                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_KP_RIGHT" type="int" line="421"/>
            <javadoc line="421">
                Constant for the numeric keypad &lt;b&gt;right&lt;/b&gt; arrow key.                
                <see>
                    #VK_RIGHT                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_DEAD_GRAVE" type="int" line="427"/>
            <javadoc line="427">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_ACUTE" type="int" line="431"/>
            <javadoc line="431">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_CIRCUMFLEX" type="int" line="435"/>
            <javadoc line="435">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_TILDE" type="int" line="439"/>
            <javadoc line="439">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_MACRON" type="int" line="443"/>
            <javadoc line="443">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_BREVE" type="int" line="447"/>
            <javadoc line="447">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_ABOVEDOT" type="int" line="451"/>
            <javadoc line="451">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_DIAERESIS" type="int" line="455"/>
            <javadoc line="455">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_ABOVERING" type="int" line="459"/>
            <javadoc line="459">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_DOUBLEACUTE" type="int" line="463"/>
            <javadoc line="463">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_CARON" type="int" line="467"/>
            <javadoc line="467">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_CEDILLA" type="int" line="471"/>
            <javadoc line="471">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_OGONEK" type="int" line="475"/>
            <javadoc line="475">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_IOTA" type="int" line="479"/>
            <javadoc line="479">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_VOICED_SOUND" type="int" line="483"/>
            <javadoc line="483">
                @since 1.2                
            </javadoc>
            <declaration name="VK_DEAD_SEMIVOICED_SOUND" type="int" line="487"/>
            <javadoc line="487">
                @since 1.2                
            </javadoc>
            <declaration name="VK_AMPERSAND" type="int" line="491"/>
            <javadoc line="491">
                @since 1.2                
            </javadoc>
            <declaration name="VK_ASTERISK" type="int" line="495"/>
            <javadoc line="495">
                @since 1.2                
            </javadoc>
            <declaration name="VK_QUOTEDBL" type="int" line="499"/>
            <javadoc line="499">
                @since 1.2                
            </javadoc>
            <declaration name="VK_LESS" type="int" line="503"/>
            <javadoc line="503">
                @since 1.2                
            </javadoc>
            <declaration name="VK_GREATER" type="int" line="507"/>
            <javadoc line="507">
                @since 1.2                
            </javadoc>
            <declaration name="VK_BRACELEFT" type="int" line="511"/>
            <javadoc line="511">
                @since 1.2                
            </javadoc>
            <declaration name="VK_BRACERIGHT" type="int" line="515"/>
            <javadoc line="515">
                @since 1.2                
            </javadoc>
            <declaration name="VK_AT" type="int" line="519"/>
            <javadoc line="519">
                Constant for the &quot;@&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_COLON" type="int" line="524"/>
            <javadoc line="524">
                Constant for the &quot;:&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_CIRCUMFLEX" type="int" line="529"/>
            <javadoc line="529">
                Constant for the &quot;^&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_DOLLAR" type="int" line="534"/>
            <javadoc line="534">
                Constant for the &quot;$&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_EURO_SIGN" type="int" line="539"/>
            <javadoc line="539">
                Constant for the Euro currency sign key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_EXCLAMATION_MARK" type="int" line="544"/>
            <javadoc line="544">
                Constant for the &quot;!&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_INVERTED_EXCLAMATION_MARK" type="int" line="549"/>
            <javadoc line="549">
                Constant for the inverted exclamation mark key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_LEFT_PARENTHESIS" type="int" line="554"/>
            <javadoc line="554">
                Constant for the &quot;(&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_NUMBER_SIGN" type="int" line="559"/>
            <javadoc line="559">
                Constant for the &quot;#&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_PLUS" type="int" line="564"/>
            <javadoc line="564">
                Constant for the &quot;+&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_RIGHT_PARENTHESIS" type="int" line="569"/>
            <javadoc line="569">
                Constant for the &quot;)&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_UNDERSCORE" type="int" line="574"/>
            <javadoc line="574">
                Constant for the &quot;_&quot; key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_WINDOWS" type="int" line="579"/>
            <javadoc line="579">
                Constant for the Microsoft Windows &quot;Windows&quot; key.
                  It is used for both the left and right version of the key.                
                <see>
                    #getKeyLocation()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="VK_CONTEXT_MENU" type="int" line="586"/>
            <javadoc line="586">
                Constant for the Microsoft Windows Context Menu key.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="VK_FINAL" type="int" line="591"/>
            <declaration name="VK_CONVERT" type="int" line="592"/>
            <javadoc line="592">
                Constant for the Convert function key.                
            </javadoc>
            <declaration name="VK_NONCONVERT" type="int" line="596"/>
            <javadoc line="596">
                Constant for the Don&apos;t Convert function key.                
            </javadoc>
            <declaration name="VK_ACCEPT" type="int" line="600"/>
            <javadoc line="600">
                Constant for the Accept or Commit function key.                
            </javadoc>
            <declaration name="VK_MODECHANGE" type="int" line="604"/>
            <declaration name="VK_KANA" type="int" line="605"/>
            <declaration name="VK_KANJI" type="int" line="606"/>
            <declaration name="VK_ALPHANUMERIC" type="int" line="607"/>
            <javadoc line="607">
                Constant for the Alphanumeric function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_KATAKANA" type="int" line="612"/>
            <javadoc line="612">
                Constant for the Katakana function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_HIRAGANA" type="int" line="617"/>
            <javadoc line="617">
                Constant for the Hiragana function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_FULL_WIDTH" type="int" line="622"/>
            <javadoc line="622">
                Constant for the Full-Width Characters function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_HALF_WIDTH" type="int" line="627"/>
            <javadoc line="627">
                Constant for the Half-Width Characters function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_ROMAN_CHARACTERS" type="int" line="632"/>
            <javadoc line="632">
                Constant for the Roman Characters function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_ALL_CANDIDATES" type="int" line="637"/>
            <javadoc line="637">
                Constant for the All Candidates function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_PREVIOUS_CANDIDATE" type="int" line="642"/>
            <javadoc line="642">
                Constant for the Previous Candidate function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_CODE_INPUT" type="int" line="647"/>
            <javadoc line="647">
                Constant for the Code Input function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_JAPANESE_KATAKANA" type="int" line="652"/>
            <javadoc line="652">
                Constant for the Japanese-Katakana function key.
                  This key switches to a Japanese input method and selects its Katakana input mode.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_JAPANESE_HIRAGANA" type="int" line="658"/>
            <javadoc line="658">
                Constant for the Japanese-Hiragana function key.
                  This key switches to a Japanese input method and selects its Hiragana input mode.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_JAPANESE_ROMAN" type="int" line="664"/>
            <javadoc line="664">
                Constant for the Japanese-Roman function key.
                  This key switches to a Japanese input method and selects its Roman-Direct input mode.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_KANA_LOCK" type="int" line="670"/>
            <javadoc line="670">
                Constant for the locking Kana function key.
                  This key locks the keyboard into a Kana layout.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="VK_INPUT_METHOD_ON_OFF" type="int" line="676"/>
            <javadoc line="676">
                Constant for the input method on/off key.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="VK_CUT" type="int" line="681"/>
            <javadoc line="681">
                @since 1.2                
            </javadoc>
            <declaration name="VK_COPY" type="int" line="685"/>
            <javadoc line="685">
                @since 1.2                
            </javadoc>
            <declaration name="VK_PASTE" type="int" line="689"/>
            <javadoc line="689">
                @since 1.2                
            </javadoc>
            <declaration name="VK_UNDO" type="int" line="693"/>
            <javadoc line="693">
                @since 1.2                
            </javadoc>
            <declaration name="VK_AGAIN" type="int" line="697"/>
            <javadoc line="697">
                @since 1.2                
            </javadoc>
            <declaration name="VK_FIND" type="int" line="701"/>
            <javadoc line="701">
                @since 1.2                
            </javadoc>
            <declaration name="VK_PROPS" type="int" line="705"/>
            <javadoc line="705">
                @since 1.2                
            </javadoc>
            <declaration name="VK_STOP" type="int" line="709"/>
            <javadoc line="709">
                @since 1.2                
            </javadoc>
            <declaration name="VK_COMPOSE" type="int" line="713"/>
            <javadoc line="713">
                Constant for the Compose function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_ALT_GRAPH" type="int" line="718"/>
            <javadoc line="718">
                Constant for the AltGraph function key.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="VK_BEGIN" type="int" line="723"/>
            <javadoc line="723">
                Constant for the Begin key.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="VK_UNDEFINED" type="int" line="728"/>
            <javadoc line="728">
                This value is used to indicate that the keyCode is unknown.
                  KEY_TYPED events do not have a keyCode value; this value
                  is used instead.                
            </javadoc>
            <declaration name="CHAR_UNDEFINED" type="char" line="734"/>
            <javadoc line="734">
                KEY_PRESSED and KEY_RELEASED events which do not map to a
                  valid Unicode character use this for the keyChar value.                
            </javadoc>
            <declaration name="KEY_LOCATION_UNKNOWN" type="int" line="739"/>
            <javadoc line="739">
                A constant indicating that the keyLocation is indeterminate
                  or not relevant.
                  &lt;code&gt;KEY_TYPED&lt;/code&gt; events do not have a keyLocation; this value
                  is used instead.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="KEY_LOCATION_STANDARD" type="int" line="747"/>
            <javadoc line="747">
                A constant indicating that the key pressed or released
                  is not distinguished as the left or right version of a key,
                  and did not originate on the numeric keypad (or did not
                  originate with a virtual key corresponding to the numeric
                  keypad).                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="KEY_LOCATION_LEFT" type="int" line="756"/>
            <javadoc line="756">
                A constant indicating that the key pressed or released is in
                  the left key location (there is more than one possible location
                  for this key).  Example: the left shift key.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="KEY_LOCATION_RIGHT" type="int" line="763"/>
            <javadoc line="763">
                A constant indicating that the key pressed or released is in
                  the right key location (there is more than one possible location
                  for this key).  Example: the right shift key.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="KEY_LOCATION_NUMPAD" type="int" line="770"/>
            <javadoc line="770">
                A constant indicating that the key event originated on the
                  numeric keypad or with a virtual key corresponding to the
                  numeric keypad.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="keyCode" type="int" line="777"/>
            <javadoc line="777">
                The unique value assigned to each of the keys on the
                  keyboard.  There is a common set of key codes that
                  can be fired by most keyboards.
                  The symbolic name for a key code should be used rather
                  than the code value itself.                
                <serial>
                                        
                </serial>
                <see>
                    #getKeyCode()                    
                </see>
                <see>
                    #setKeyCode(int)                    
                </see>
            </javadoc>
            <declaration name="keyChar" type="char" line="788"/>
            <javadoc line="788">
                &lt;code&gt;keyChar&lt;/code&gt; is a valid unicode character
                  that is fired by a key or a key combination on
                  a keyboard.                
                <serial>
                                        
                </serial>
                <see>
                    #getKeyChar()                    
                </see>
                <see>
                    #setKeyChar(char)                    
                </see>
            </javadoc>
            <declaration name="keyLocation" type="int" line="797"/>
            <javadoc line="797">
                The location of the key on the keyboard.
                  Some keys occur more than once on a keyboard, e.g. the left and
                  right shift keys.  Additionally, some keys occur on the numeric
                  keypad.  This variable is used to distinguish such keys.
                  The only legal values are &lt;code&gt;KEY_LOCATION_UNKNOWN&lt;/code&gt;,
                  &lt;code&gt;KEY_LOCATION_STANDARD&lt;/code&gt;, &lt;code&gt;KEY_LOCATION_LEFT&lt;/code&gt;,
                  &lt;code&gt;KEY_LOCATION_RIGHT&lt;/code&gt;, and &lt;code&gt;KEY_LOCATION_NUMPAD&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getKeyLocation()                    
                </see>
            </javadoc>
            <declaration name="rawCode" type="long" line="809"/>
            <declaration name="primaryLevelUnicode" type="long" line="810"/>
            <declaration name="scancode" type="long" line="811"/>
            <declaration name="extendedKeyCode" type="long" line="812"/>
            <declaration name="serialVersionUID" type="long" line="813"/>
            <scope line="814">
                <scope line="816"/>
            </scope>
            <method name="initIDs" type="void" line="820"/>
            <javadoc line="820">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <method name="KeyEvent" type="constructor" line="825">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="keyCode" type="int"/>
                    <param name="keyChar" type="char"/>
                    <param name="keyLocation" type="int"/>
                    <param name="isProxyActive" type="boolean"/>
                </params>
            </method>
            <javadoc line="829">
                Constructs a &lt;code&gt;KeyEvent&lt;/code&gt; object.
                  &lt;p&gt;This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id              An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link KeyEvent}                    
                </param>
                <param>
                    when      A long integer that specifies the time the event
                      occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers The modifier keys down during event (shift, ctrl,
                      alt, meta).
                      Passing negative value
                      is not recommended.
                      Zero value means that no modifiers were passed.
                      Use either an extended _DOWN_MASK or old _MASK modifiers,
                      however do not mix models in the one event.
                      The extended modifiers are preferred for using                    
                </param>
                <param>
                    keyCode   The integer code for an actual key, or VK_UNDEFINED
                      (for a key-typed event)                    
                </param>
                <param>
                    keyChar   The Unicode character generated by this event, or
                      CHAR_UNDEFINED (for key-pressed and key-released
                      events which do not map to a valid Unicode character)                    
                </param>
                <param>
                    keyLocation  Identifies the key location.  The only legal
                      values are &lt;code&gt;KEY_LOCATION_UNKNOWN&lt;/code&gt;,
                      &lt;code&gt;KEY_LOCATION_STANDARD&lt;/code&gt;, &lt;code&gt;KEY_LOCATION_LEFT&lt;/code&gt;,
                      &lt;code&gt;KEY_LOCATION_RIGHT&lt;/code&gt;, and &lt;code&gt;KEY_LOCATION_NUMPAD&lt;/code&gt;.                    
                </param>
                <throws>
                    IllegalArgumentExceptionif &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;KEY_TYPED&lt;/code&gt; and
                      &lt;code&gt;keyChar&lt;/code&gt; is &lt;code&gt;CHAR_UNDEFINED&lt;/code&gt;;
                      or if &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;KEY_TYPED&lt;/code&gt; and
                      &lt;code&gt;keyCode&lt;/code&gt; is not &lt;code&gt;VK_UNDEFINED&lt;/code&gt;;
                      or if &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;KEY_TYPED&lt;/code&gt; and
                      &lt;code&gt;keyLocation&lt;/code&gt; is not &lt;code&gt;KEY_LOCATION_UNKNOWN&lt;/code&gt;;
                      or if &lt;code&gt;keyLocation&lt;/code&gt; is not one of the legal
                      values enumerated above.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getKeyCode()                    
                </see>
                <see>
                    #getKeyChar()                    
                </see>
                <see>
                    #getKeyLocation()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="KeyEvent" type="constructor" line="877">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="keyCode" type="int"/>
                    <param name="keyChar" type="char"/>
                    <param name="keyLocation" type="int"/>
                </params>
                <scope line="879">
                    <scope line="880"/>
                    <scope line="883"/>
                    <scope line="886"/>
                </scope>
                <scope line="892"/>
                <scope line="896"/>
                <scope line="899"/>
            </method>
            <javadoc line="903">
                Constructs a &lt;code&gt;KeyEvent&lt;/code&gt; object.
                  &lt;p&gt; This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source    The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id              An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link KeyEvent}                    
                </param>
                <param>
                    when      A long integer that specifies the time the event
                      occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers The modifier keys down during event (shift, ctrl,
                      alt, meta).
                      Passing negative value
                      is not recommended.
                      Zero value means that no modifiers were passed.
                      Use either an extended _DOWN_MASK or old _MASK modifiers,
                      however do not mix models in the one event.
                      The extended modifiers are preferred for using                    
                </param>
                <param>
                    keyCode   The integer code for an actual key, or VK_UNDEFINED
                      (for a key-typed event)                    
                </param>
                <param>
                    keyChar   The Unicode character generated by this event, or
                      CHAR_UNDEFINED (for key-pressed and key-released
                      events which do not map to a valid Unicode character)                    
                </param>
                <throws>
                    IllegalArgumentException  if &lt;code&gt;id&lt;/code&gt; is
                      &lt;code&gt;KEY_TYPED&lt;/code&gt; and &lt;code&gt;keyChar&lt;/code&gt; is
                      &lt;code&gt;CHAR_UNDEFINED&lt;/code&gt;; or if &lt;code&gt;id&lt;/code&gt; is
                      &lt;code&gt;KEY_TYPED&lt;/code&gt; and &lt;code&gt;keyCode&lt;/code&gt; is not
                      &lt;code&gt;VK_UNDEFINED&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getKeyCode()                    
                </see>
                <see>
                    #getKeyChar()                    
                </see>
            </javadoc>
            <method name="KeyEvent" type="constructor" line="942">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="keyCode" type="int"/>
                    <param name="keyChar" type="char"/>
                </params>
            </method>
            <javadoc line="945">
                @deprecated as of JDK1.1                
            </javadoc>
            <method name="KeyEvent" type="constructor" line="948">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="keyCode" type="int"/>
                </params>
            </method>
            <javadoc line="951">
                Returns the integer keyCode associated with the key in this event.                
                <return>
                    the integer code for an actual key on the keyboard.
                      (For &lt;code&gt;KEY_TYPED&lt;/code&gt; events, the keyCode is
                      &lt;code&gt;VK_UNDEFINED&lt;/code&gt;.)                    
                </return>
            </javadoc>
            <method name="getKeyCode" type="int" line="957"/>
            <javadoc line="960">
                Set the keyCode value to indicate a physical key.                
                <param>
                    keyCode an integer corresponding to an actual key on the keyboard.                    
                </param>
            </javadoc>
            <method name="setKeyCode" type="void" line="964">
                <params>
                    <param name="keyCode" type="int"/>
                </params>
            </method>
            <javadoc line="967">
                Returns the character associated with the key in this event.
                  For example, the &lt;code&gt;KEY_TYPED&lt;/code&gt; event for shift + &quot;a&quot;
                  returns the value for &quot;A&quot;.
                  &lt;p&gt;
                  &lt;code&gt;KEY_PRESSED&lt;/code&gt; and &lt;code&gt;KEY_RELEASED&lt;/code&gt; events
                  are not intended for reporting of character input.  Therefore,
                  the values returned by this method are guaranteed to be
                  meaningful only for &lt;code&gt;KEY_TYPED&lt;/code&gt; events.                
                <return>
                    the Unicode character defined for this key event.
                      If no valid Unicode character exists for this key event,
                      &lt;code&gt;CHAR_UNDEFINED&lt;/code&gt; is returned.                    
                </return>
            </javadoc>
            <method name="getKeyChar" type="char" line="980"/>
            <javadoc line="983">
                Set the keyChar value to indicate a logical character.                
                <param>
                    keyChar a char corresponding to to the combination of keystrokes
                      that make up this event.                    
                </param>
            </javadoc>
            <method name="setKeyChar" type="void" line="988">
                <params>
                    <param name="keyChar" type="char"/>
                </params>
            </method>
            <javadoc line="991">
                Set the modifiers to indicate additional keys that were held down
                  (e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
                  &lt;p&gt;
                  NOTE:  use of this method is not recommended, because many AWT
                  implementations do not recognize modifier changes.  This is
                  especially true for &lt;code&gt;KEY_TYPED&lt;/code&gt; events where the shift
                  modifier is changed.                
                <param>
                    modifiers an integer combination of the modifier constants.                    
                </param>
                <see>
                    InputEvent                    
                </see>
                <deprecated>
                    as of JDK1.1.4                    
                </deprecated>
            </javadoc>
            <method name="setModifiers" type="void" line="1003">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="1005"/>
                <scope line="1008"/>
            </method>
            <javadoc line="1012">
                Returns the location of the key that originated this key event.
                  Some keys occur more than once on a keyboard, e.g. the left and
                  right shift keys.  Additionally, some keys occur on the numeric
                  keypad.  This provides a way of distinguishing such keys.                
                <return>
                    the location of the key that was pressed or released.
                      Always returns &lt;code&gt;KEY_LOCATION_UNKNOWN&lt;/code&gt; for
                      &lt;code&gt;KEY_TYPED&lt;/code&gt; events.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getKeyLocation" type="int" line="1022"/>
            <javadoc line="1025">
                Returns a String describing the keyCode, such as &quot;HOME&quot;, &quot;F1&quot; or &quot;A&quot;.
                  These strings can be localized by changing the awt.properties file.                
                <return>
                    a string containing a text description for a physical key,
                      identified by its keyCode                    
                </return>
            </javadoc>
            <method name="getKeyText" type="String" line="1031">
                <params>
                    <param name="keyCode" type="int"/>
                </params>
                <scope line="1032"/>
                <scope line="1319">
                    <declaration name="numpad" type="String" line="1320"/>
                    <declaration name="c" type="char" line="1321"/>
                </scope>
                <scope line="1324"/>
                <declaration name="unknown" type="String" line="1327"/>
            </method>
            <javadoc line="1330">
                Returns a &lt;code&gt;String&lt;/code&gt; describing the modifier key(s),
                  such as &quot;Shift&quot;, or &quot;Ctrl+Shift&quot;.  These strings can be
                  localized by changing the &lt;code&gt;awt.properties&lt;/code&gt; file.
                  &lt;p&gt;
                  Note that &lt;code&gt;InputEvent.ALT_MASK&lt;/code&gt; and
                  &lt;code&gt;InputEvent.BUTTON2_MASK&lt;/code&gt; have the same value,
                  so the string &quot;Alt&quot; is returned for both modifiers.  Likewise,
                  &lt;code&gt;InputEvent.META_MASK&lt;/code&gt; and
                  &lt;code&gt;InputEvent.BUTTON3_MASK&lt;/code&gt; have the same value,
                  so the string &quot;Meta&quot; is returned for both modifiers.                
                <return>
                    string a text description of the combination of modifier
                      keys that were held down during the event                    
                </return>
                <see>
                    InputEvent#getModifiersExText(int)                    
                </see>
            </javadoc>
            <method name="getKeyModifiersText" type="String" line="1345">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="1346"/>
                <scope line="1347"/>
                <scope line="1351"/>
                <scope line="1355"/>
                <scope line="1359"/>
                <scope line="1363"/>
                <scope line="1367"/>
                <scope line="1371"/>
            </method>
            <javadoc line="1376">
                Returns whether the key in this event is an &quot;action&quot; key.
                  Typically an action key does not fire a unicode character and is
                  not a modifier key.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the key is an &quot;action&quot; key,
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="isActionKey" type="boolean" line="1383"/>
            <javadoc line="1464">
                Returns a parameter string identifying this event.
                  This method is useful for event logging and for debugging.                
                <return>
                    a string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1469">
                <declaration name="str" type="StringBuilder" line="1470"/>
                <scope line="1515"/>
                <scope line="1518"/>
            </method>
            <javadoc line="1548">
                Returns an extended key code for the event.
                  The extended key code is a unique id assigned to  a key on the keyboard
                  just like {@code keyCode}. However, unlike {@code keyCode}, this value depends on the
                  current keyboard layout. For instance, pressing the left topmost letter key
                  in a common English layout produces the same value as {@code keyCode}, {@code VK_Q}.
                  Pressing the same key in a regular Russian layout gives another code, unique for the
                  letter &quot;Cyrillic I short&quot;.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getExtendedKeyCode" type="int" line="1558"/>
            <javadoc line="1561">
                Returns an extended key code for a unicode character.                
                <return>
                    for a unicode character with a corresponding {@code VK_} constant -- this{@code VK_} constant; for a character appearing on the primary
                      level of a known keyboard layout -- a unique integer.
                      If a character does not appear on the primary level of a known keyboard,{@code VK_UNDEFINED} is returned.                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getExtendedKeyCodeForChar" type="int" line="1568">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="1571">
                Sets new modifiers by the old ones. The key modifiers
                  override overlaping mouse modifiers.                
            </javadoc>
            <method name="setNewModifiers" type="void" line="1575">
                <scope line="1576"/>
                <scope line="1579"/>
                <scope line="1582"/>
                <scope line="1585"/>
                <scope line="1588"/>
                <scope line="1591"/>
            </method>
            <javadoc line="1595">
                Sets old modifiers by the new ones.                
            </javadoc>
            <method name="setOldModifiers" type="void" line="1598">
                <scope line="1599"/>
                <scope line="1602"/>
                <scope line="1605"/>
                <scope line="1608"/>
                <scope line="1611"/>
                <scope line="1614"/>
            </method>
            <javadoc line="1618">
                Sets new modifiers by the old ones. The key modifiers
                  override overlaping mouse modifiers.                
                <serial>
                                        
                </serial>
            </javadoc>
            <method name="readObject" type="void" line="1623">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1625"/>
            </method>
        </class>
    </source>