<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.util.EventListener"/>
        <interface name="WindowListener">
            <implements interface="EventListener"/>
            <javadoc line="3">
                The listener interface for receiving window events.
                  The class that is interested in processing a window event
                  either implements this interface (and all the methods it
                  contains) or extends the abstract &lt;code&gt;WindowAdapter&lt;/code&gt; class
                  (overriding only the methods of interest).
                  The listener object created from that class is then registered with a
                  Window using the window&apos;s &lt;code&gt;addWindowListener&lt;/code&gt;
                  method. When the window&apos;s status changes by virtue of being opened,
                  closed, activated or deactivated, iconified or deiconified,
                  the relevant method in the listener object is invoked, and the
                  &lt;code&gt;WindowEvent&lt;/code&gt; is passed to it.                
                <author>
                    Carl Quinn                    
                </author>
                <see>
                    WindowAdapter                    
                </see>
                <see>
                    WindowEvent                    
                </see>
                <see>
                    <a href="http://java.sun.com/docs/books/tutorial/uiswing/events/windowlistener.html">Tutorial: How to Write Window Listeners</a>                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="windowOpened" type="void" line="22"/>
            <javadoc line="22">
                Invoked the first time a window is made visible.                
            </javadoc>
            <method name="windowClosing" type="void" line="26"/>
            <javadoc line="26">
                Invoked when the user attempts to close the window
                  from the window&apos;s system menu.                
            </javadoc>
            <method name="windowClosed" type="void" line="31"/>
            <javadoc line="31">
                Invoked when a window has been closed as the result
                  of calling dispose on the window.                
            </javadoc>
            <method name="windowIconified" type="void" line="36"/>
            <javadoc line="36">
                Invoked when a window is changed from a normal to a
                  minimized state. For many platforms, a minimized window
                  is displayed as the icon specified in the window&apos;s
                  iconImage property.                
                <see>
                    java.awt.Frame#setIconImage                    
                </see>
            </javadoc>
            <method name="windowDeiconified" type="void" line="44"/>
            <javadoc line="44">
                Invoked when a window is changed from a minimized
                  to a normal state.                
            </javadoc>
            <method name="windowActivated" type="void" line="49"/>
            <javadoc line="49">
                Invoked when the Window is set to be the active Window. Only a Frame or
                  a Dialog can be the active Window. The native windowing system may
                  denote the active Window or its children with special decorations, such
                  as a highlighted title bar. The active Window is always either the
                  focused Window, or the first Frame or Dialog that is an owner of the
                  focused Window.                
            </javadoc>
            <method name="windowDeactivated" type="void" line="58"/>
            <javadoc line="58">
                Invoked when a Window is no longer the active Window. Only a Frame or a
                  Dialog can be the active Window. The native windowing system may denote
                  the active Window or its children with special decorations, such as a
                  highlighted title bar. The active Window is always either the focused
                  Window, or the first Frame or Dialog that is an owner of the focused
                  Window.                
            </javadoc>
        </interface>
    </source>