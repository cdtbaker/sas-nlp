<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.event">
        <import package="java.awt.Component"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.awt.IllegalComponentStateException"/>
        <import package="java.awt.MouseInfo"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="MouseEvent" line="11">
            <extends class="InputEvent"/>
            <javadoc line="11">
                An event which indicates that a mouse action occurred in a component.
                  A mouse action is considered to occur in a particular component if and only
                  if the mouse cursor is over the unobscured part of the component&apos;s bounds
                  when the action happens.
                  For lightweight components, such as Swing&apos;s components, mouse events
                  are only dispatched to the component if the mouse event type has been
                  enabled on the component. A mouse event type is enabled by adding the
                  appropriate mouse-based {@code EventListener} to the component
                  ({@link MouseListener} or {@link MouseMotionListener}), or by invoking{@link Component#enableEvents(long)} with the appropriate mask parameter
                  ({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).
                  If the mouse event type has not been enabled on the component, the
                  corresponding mouse events are dispatched to the first ancestor that
                  has enabled the mouse event type.
                  &lt;p&gt;
                  For example, if a {@code MouseListener} has been added to a component, or{@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all
                  the events defined by {@code MouseListener} are dispatched to the component.
                  On the other hand, if a {@code MouseMotionListener} has not been added and{@code enableEvents} has not been invoked with{@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not
                  dispatched to the component. Instead the mouse motion events are
                  dispatched to the first ancestors that has enabled mouse motion
                  events.
                  &lt;P&gt;
                  This low-level event is generated by a component object for:
                  &lt;ul&gt;
                  &lt;li&gt;Mouse Events
                  &lt;ul&gt;
                  &lt;li&gt;a mouse button is pressed
                  &lt;li&gt;a mouse button is released
                  &lt;li&gt;a mouse button is clicked (pressed and released)
                  &lt;li&gt;the mouse cursor enters the unobscured part of component&apos;s geometry
                  &lt;li&gt;the mouse cursor exits the unobscured part of component&apos;s geometry
                  &lt;/ul&gt;
                  &lt;li&gt; Mouse Motion Events
                  &lt;ul&gt;
                  &lt;li&gt;the mouse is moved
                  &lt;li&gt;the mouse is dragged
                  &lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;P&gt;
                  A &lt;code&gt;MouseEvent&lt;/code&gt; object is passed to every
                  &lt;code&gt;MouseListener&lt;/code&gt;
                  or &lt;code&gt;MouseAdapter&lt;/code&gt; object which is registered to receive
                  the &quot;interesting&quot; mouse events using the component&apos;s
                  &lt;code&gt;addMouseListener&lt;/code&gt; method.
                  (&lt;code&gt;MouseAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;MouseListener&lt;/code&gt; interface.) Each such listener object
                  gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse event.
                  &lt;P&gt;
                  A &lt;code&gt;MouseEvent&lt;/code&gt; object is also passed to every
                  &lt;code&gt;MouseMotionListener&lt;/code&gt; or
                  &lt;code&gt;MouseMotionAdapter&lt;/code&gt; object which is registered to receive
                  mouse motion events using the component&apos;s
                  &lt;code&gt;addMouseMotionListener&lt;/code&gt;
                  method. (&lt;code&gt;MouseMotionAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;MouseMotionListener&lt;/code&gt; interface.) Each such listener object
                  gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse motion event.
                  &lt;P&gt;
                  When a mouse button is clicked, events are generated and sent to the
                  registered &lt;code&gt;MouseListener&lt;/code&gt;s.
                  The state of modal keys can be retrieved using {@link InputEvent#getModifiers}and {@link InputEvent#getModifiersEx}.
                  The button mask returned by {@link InputEvent#getModifiers} reflects
                  only the button that changed state, not the current state of all buttons.
                  (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
                  META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
                  modifier keys).
                  To get the state of all buttons and modifier keys, use{@link InputEvent#getModifiersEx}.
                  The button which has changed state is returned by {@link MouseEvent#getButton}&lt;P&gt;
                  For example, if the first mouse button is pressed, events are sent in the
                  following order:
                  &lt;PRE&gt;
                  &lt;b   &gt;id           &lt;/b   &gt;   &lt;b   &gt;modifiers   &lt;/b   &gt; &lt;b   &gt;button &lt;/b   &gt;
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;/PRE&gt;
                  When multiple mouse buttons are pressed, each press, release, and click
                  results in a separate event.
                  &lt;P&gt;
                  For example, if the user presses &lt;b&gt;button 1&lt;/b&gt; followed by
                  &lt;b&gt;button 2&lt;/b&gt;, and then releases them in the same order,
                  the following sequence of events is generated:
                  &lt;PRE&gt;
                  &lt;b   &gt;id           &lt;/b   &gt;   &lt;b   &gt;modifiers   &lt;/b   &gt; &lt;b   &gt;button &lt;/b   &gt;
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt;:  &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON1_MASK&lt;/code&gt; &lt;code&gt;BUTTON1&lt;/code&gt;
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;: &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;:  &lt;code&gt;BUTTON2_MASK&lt;/code&gt; &lt;code&gt;BUTTON2&lt;/code&gt;
                  &lt;/PRE&gt;
                  If &lt;b&gt;button 2&lt;/b&gt; is released first, the
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;/&lt;code&gt;MOUSE_CLICKED&lt;/code&gt; pair
                  for &lt;code&gt;BUTTON2_MASK&lt;/code&gt; arrives first,
                  followed by the pair for &lt;code&gt;BUTTON1_MASK&lt;/code&gt;.
                  &lt;p&gt;
                  Some extra mouse buttons are added to extend the standard set of buttons
                  represented by the following constants:{@code BUTTON1}, {@code BUTTON2}, and {@code BUTTON3}.
                  Extra buttons have no assigned {@code BUTTONx}constants as well as their button masks have no assigned {@code BUTTONx_DOWN_MASK}constants. Nevertheless, ordinal numbers starting from 4 may be
                  used as button numbers (button ids). Values obtained by the{@link InputEvent#getMaskForButton(int) getMaskForButton(button)} method may be used
                  as button masks.
                  &lt;p&gt;
                  &lt;code&gt;MOUSE_DRAGGED&lt;/code&gt; events are delivered to the &lt;code&gt;Component&lt;/code&gt;
                  in which the mouse button was pressed until the mouse button is released
                  (regardless of whether the mouse position is within the bounds of the
                  &lt;code&gt;Component&lt;/code&gt;).  Due to platform-dependent Drag&amp;Drop implementations,
                  &lt;code&gt;MOUSE_DRAGGED&lt;/code&gt; events may not be delivered during a native
                  Drag&amp;Drop operation.
                  In a multi-screen environment mouse drag events are delivered to the
                  &lt;code&gt;Component&lt;/code&gt; even if the mouse position is outside the bounds of the
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; associated with that
                  &lt;code&gt;Component&lt;/code&gt;. However, the reported position for mouse drag events
                  in this case may differ from the actual mouse position:
                  &lt;ul&gt;
                  &lt;li&gt;In a multi-screen environment without a virtual device:
                  &lt;br&gt;
                  The reported coordinates for mouse drag events are clipped to fit within the
                  bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; associated with
                  the &lt;code&gt;Component&lt;/code&gt;.
                  &lt;li&gt;In a multi-screen environment with a virtual device:
                  &lt;br&gt;
                  The reported coordinates for mouse drag events are clipped to fit within the
                  bounds of the virtual device associated with the &lt;code&gt;Component&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  An unspecified behavior will be caused if the {@code id} parameter
                  of any particular {@code MouseEvent} instance is not
                  in the range from {@code MOUSE_FIRST} to {@code MOUSE_LAST}-1
                  ({@code MOUSE_WHEEL} is not acceptable).                
                <author>
                    Carl Quinn                    
                </author>
                <see>
                    MouseAdapter                    
                </see>
                <see>
                    MouseListener                    
                </see>
                <see>
                    MouseMotionAdapter                    
                </see>
                <see>
                    MouseMotionListener                    
                </see>
                <see>
                    MouseWheelListener                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/post1.0/ui/mouselistener.html&quot;&gt;Tutorial: Writing a Mouse Listener&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/post1.0/ui/mousemotionlistener.html&quot;&gt;Tutorial: Writing a Mouse Motion Listener&lt;/a&gt;                    
                </see>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <declaration name="MOUSE_FIRST" type="int" line="150"/>
            <javadoc line="150">
                The first number in the range of ids used for mouse events.                
            </javadoc>
            <declaration name="MOUSE_LAST" type="int" line="154"/>
            <javadoc line="154">
                The last number in the range of ids used for mouse events.                
            </javadoc>
            <declaration name="MOUSE_CLICKED" type="int" line="158"/>
            <javadoc line="158">
                The &quot;mouse clicked&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when a mouse button is pressed and released.                
            </javadoc>
            <declaration name="MOUSE_PRESSED" type="int" line="163"/>
            <javadoc line="163">
                The &quot;mouse pressed&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when a mouse button is pushed down.                
            </javadoc>
            <declaration name="MOUSE_RELEASED" type="int" line="168"/>
            <javadoc line="168">
                The &quot;mouse released&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when a mouse button is let up.                
            </javadoc>
            <declaration name="MOUSE_MOVED" type="int" line="173"/>
            <javadoc line="173">
                The &quot;mouse moved&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when the mouse position changes.                
            </javadoc>
            <declaration name="MOUSE_ENTERED" type="int" line="178"/>
            <javadoc line="178">
                The &quot;mouse entered&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when the mouse cursor enters the unobscured part of component&apos;s
                  geometry.                
            </javadoc>
            <declaration name="MOUSE_EXITED" type="int" line="184"/>
            <javadoc line="184">
                The &quot;mouse exited&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when the mouse cursor exits the unobscured part of component&apos;s
                  geometry.                
            </javadoc>
            <declaration name="MOUSE_DRAGGED" type="int" line="190"/>
            <javadoc line="190">
                The &quot;mouse dragged&quot; event. This &lt;code&gt;MouseEvent&lt;/code&gt;
                  occurs when the mouse position changes while a mouse button is pressed.                
            </javadoc>
            <declaration name="MOUSE_WHEEL" type="int" line="195"/>
            <javadoc line="195">
                The &quot;mouse wheel&quot; event.  This is the only &lt;code&gt;MouseWheelEvent&lt;/code&gt;.
                  It occurs when a mouse equipped with a wheel has its wheel rotated.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="NOBUTTON" type="int" line="201"/>
            <javadoc line="201">
                Indicates no mouse buttons; used by {@link #getButton}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON1" type="int" line="206"/>
            <javadoc line="206">
                Indicates mouse button #1; used by {@link #getButton}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON2" type="int" line="211"/>
            <javadoc line="211">
                Indicates mouse button #2; used by {@link #getButton}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="BUTTON3" type="int" line="216"/>
            <javadoc line="216">
                Indicates mouse button #3; used by {@link #getButton}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="x" type="int" line="221"/>
            <javadoc line="221">
                The mouse event&apos;s x coordinate.
                  The x value is relative to the component that fired the event.                
                <serial>
                                        
                </serial>
                <see>
                    #getX()                    
                </see>
            </javadoc>
            <declaration name="y" type="int" line="228"/>
            <javadoc line="228">
                The mouse event&apos;s y coordinate.
                  The y value is relative to the component that fired the event.                
                <serial>
                                        
                </serial>
                <see>
                    #getY()                    
                </see>
            </javadoc>
            <declaration name="xAbs" type="int" line="235"/>
            <javadoc line="235">
                The mouse event&apos;s x absolute coordinate.
                  In a virtual device multi-screen environment in which the
                  desktop area could span multiple physical screen devices,
                  this coordinate is relative to the virtual coordinate system.
                  Otherwise, this coordinate is relative to the coordinate system
                  associated with the Component&apos;s GraphicsConfiguration.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="yAbs" type="int" line="245"/>
            <javadoc line="245">
                The mouse event&apos;s y absolute coordinate.
                  In a virtual device multi-screen environment in which the
                  desktop area could span multiple physical screen devices,
                  this coordinate is relative to the virtual coordinate system.
                  Otherwise, this coordinate is relative to the coordinate system
                  associated with the Component&apos;s GraphicsConfiguration.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="clickCount" type="int" line="255"/>
            <javadoc line="255">
                Indicates the number of quick consecutive clicks of
                  a mouse button.
                  clickCount will be valid for only three mouse events :&lt;BR&gt;
                  &lt;code&gt;MOUSE_CLICKED&lt;/code&gt;,
                  &lt;code&gt;MOUSE_PRESSED&lt;/code&gt; and
                  &lt;code&gt;MOUSE_RELEASED&lt;/code&gt;.
                  For the above, the &lt;code&gt;clickCount&lt;/code&gt; will be at least 1.
                  For all other events the count will be 0.                
                <serial>
                                        
                </serial>
                <see>
                    #getClickCount().                    
                </see>
            </javadoc>
            <declaration name="button" type="int" line="268"/>
            <javadoc line="268">
                Indicates which, if any, of the mouse buttons has changed state.
                  The valid values are ranged from 0 to the value returned by the{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()} method.
                  This range already includes constants {@code NOBUTTON}, {@code BUTTON1},{@code BUTTON2}, and {@code BUTTON3}if these buttons are present. So it is allowed to use these constants too.
                  For example, for a mouse with two buttons this field may contain the following values:
                  &lt;ul&gt;
                  &lt;li&gt; 0 ({@code NOBUTTON})
                  &lt;li&gt; 1 ({@code BUTTON1})
                  &lt;li&gt; 2 ({@code BUTTON2})
                  &lt;/ul&gt;
                  If a mouse has 5 buttons, this field may contain the following values:
                  &lt;ul&gt;
                  &lt;li&gt; 0 ({@code NOBUTTON})
                  &lt;li&gt; 1 ({@code BUTTON1})
                  &lt;li&gt; 2 ({@code BUTTON2})
                  &lt;li&gt; 3 ({@code BUTTON3})
                  &lt;li&gt; 4
                  &lt;li&gt; 5
                  &lt;/ul&gt;
                  If support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled()} disabled by Java
                  then the field may not contain the value larger than {@code BUTTON3}.                
                <serial>
                                        
                </serial>
                <see>
                    #getButton()                    
                </see>
                <see>
                    java.awt.Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
            </javadoc>
            <declaration name="popupTrigger" type="boolean" line="294"/>
            <javadoc line="294">
                A property used to indicate whether a Popup Menu
                  should appear  with a certain gestures.
                  If &lt;code&gt;popupTrigger&lt;/code&gt; = &lt;code&gt;false&lt;/code&gt;,
                  no popup menu should appear.  If it is &lt;code&gt;true&lt;/code&gt;
                  then a popup menu should appear.                
                <serial>
                                        
                </serial>
                <see>
                    java.awt.PopupMenu                    
                </see>
                <see>
                    #isPopupTrigger()                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="305"/>
            <declaration name="cachedNumberOfButtons" type="int" line="306"/>
            <javadoc line="306">
                A number of buttons available on the mouse at the {@code Toolkit} machinery startup.                
            </javadoc>
            <scope line="310">
                <scope line="312"/>
                <declaration name="tk" type="Toolkit" line="315"/>
                <scope line="316"/>
                <scope line="319"/>
            </scope>
            <method name="initIDs" type="void" line="323"/>
            <javadoc line="323">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="328">
                Returns the absolute x, y position of the event.
                  In a virtual device multi-screen environment in which the
                  desktop area could span multiple physical screen devices,
                  these coordinates are relative to the virtual coordinate system.
                  Otherwise, these coordinates are relative to the coordinate system
                  associated with the Component&apos;s GraphicsConfiguration.                
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; object containing the absolute  x
                      and y coordinates.                    
                </return>
                <see>
                    java.awt.GraphicsConfiguration                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLocationOnScreen" type="Point" line="340"/>
            <javadoc line="343">
                Returns the absolute horizontal x position of the event.
                  In a virtual device multi-screen environment in which the
                  desktop area could span multiple physical screen devices,
                  this coordinate is relative to the virtual coordinate system.
                  Otherwise, this coordinate is relative to the coordinate system
                  associated with the Component&apos;s GraphicsConfiguration.                
                <return>
                    x  an integer indicating absolute horizontal position.                    
                </return>
                <see>
                    java.awt.GraphicsConfiguration                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getXOnScreen" type="int" line="354"/>
            <javadoc line="357">
                Returns the absolute vertical y position of the event.
                  In a virtual device multi-screen environment in which the
                  desktop area could span multiple physical screen devices,
                  this coordinate is relative to the virtual coordinate system.
                  Otherwise, this coordinate is relative to the coordinate system
                  associated with the Component&apos;s GraphicsConfiguration.                
                <return>
                    y  an integer indicating absolute vertical position.                    
                </return>
                <see>
                    java.awt.GraphicsConfiguration                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getYOnScreen" type="int" line="368"/>
            <javadoc line="371">
                Constructs a &lt;code&gt;MouseEvent&lt;/code&gt; object with the
                  specified source component,
                  type, time, modifiers, coordinates, click count, popupTrigger flag,
                  and button number.
                  &lt;p&gt;
                  Creating an invalid event (such
                  as by using more than one of the old _MASKs, or modifier/button
                  values which don&apos;t match) results in unspecified behavior.
                  An invocation of the form
                  &lt;tt&gt;MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt; {@link #MouseEvent(Component,int,long,int,int,int,int,int,int,boolean,int) MouseEvent}(source, id, when, modifiers,
                  x, y, xAbs, yAbs, clickCount, popupTrigger, button)&lt;/tt&gt;
                  where xAbs and yAbs defines as source&apos;s location on screen plus
                  relative coordinates x and y.
                  xAbs and yAbs are set to zero if the source is not showing.
                  This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source       The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id              An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link MouseEvent}                    
                </param>
                <param>
                    when         A long integer that gives the time the event occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers    The modifier keys down during event (e.g. shift, ctrl,
                      alt, meta)
                      Passing negative parameter
                      is not recommended.
                      Zero value means that no modifiers were passed.
                      Use either an extended _DOWN_MASK or old _MASK modifiers,
                      however do not mix models in the one event.
                      The extended modifiers are preferred for using                    
                </param>
                <param>
                    x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended                    
                </param>
                <param>
                    popupTrigger A boolean that equals {@code true} if this event
                      is a trigger for a popup menu                    
                </param>
                <param>
                    button       An integer that indicates, which of the mouse buttons has
                      changed its state.
                      The following rules are applied to this parameter:
                      &lt;ul&gt;
                      &lt;li&gt;If support for the extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
                      then it is allowed to create {@code MouseEvent} objects only with the standard buttons:{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and{@code BUTTON3}.
                      &lt;li&gt; If support for the extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
                      then it is allowed to create {@code MouseEvent} objects with
                      the standard buttons.
                      In case the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then
                      in addition to the standard buttons, {@code MouseEvent} objects can be created
                      using buttons from the range starting from 4 to{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}if the mouse has more than three buttons.
                      &lt;/ul&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if {@code button} is less then zero                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code button} is greater then the{@link java.awt.MouseInfo#getNumberOfButtons() current number of buttons} and the support
                      for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled}by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if an invalid &lt;code&gt;button&lt;/code&gt;
                      value is passed in                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getClickCount()                    
                </see>
                <see>
                    #isPopupTrigger()                    
                </see>
                <see>
                    #getButton()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="MouseEvent" type="constructor" line="447">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="clickCount" type="int"/>
                    <param name="popupTrigger" type="boolean"/>
                    <param name="button" type="int"/>
                </params>
                <declaration name="eventLocationOnScreen" type="Point" line="449"/>
                <scope line="450"/>
                <scope line="455"/>
            </method>
            <javadoc line="460">
                Constructs a &lt;code&gt;MouseEvent&lt;/code&gt; object with the
                  specified source component,
                  type, modifiers, coordinates, click count, and popupTrigger flag.
                  An invocation of the form
                  &lt;tt&gt;MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger)&lt;/tt&gt;
                  behaves in exactly the same way as the invocation
                  &lt;tt&gt; {@link #MouseEvent(Component,int,long,int,int,int,int,int,int,boolean,int) MouseEvent}(source, id, when, modifiers,
                  x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON)&lt;/tt&gt;
                  where xAbs and yAbs defines as source&apos;s location on screen plus
                  relative coordinates x and y.
                  xAbs and yAbs are set to zero if the source is not showing.
                  This method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  if &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source       The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id              An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link MouseEvent}                    
                </param>
                <param>
                    when         A long integer that gives the time the event occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers    The modifier keys down during event (e.g. shift, ctrl,
                      alt, meta)
                      Passing negative parameter
                      is not recommended.
                      Zero value means that no modifiers were passed.
                      Use either an extended _DOWN_MASK or old _MASK modifiers,
                      however do not mix models in the one event.
                      The extended modifiers are preferred for using                    
                </param>
                <param>
                    x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended                    
                </param>
                <param>
                    popupTrigger A boolean that equals {@code true} if this event
                      is a trigger for a popup menu                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getClickCount()                    
                </see>
                <see>
                    #isPopupTrigger()                    
                </see>
            </javadoc>
            <method name="MouseEvent" type="constructor" line="508">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="clickCount" type="int"/>
                    <param name="popupTrigger" type="boolean"/>
                </params>
            </method>
            <declaration name="shouldExcludeButtonFromExtModifiers" type="boolean" line="511"/>
            <javadoc line="512">
                {@inheritDoc}                
            </javadoc>
            <method name="getModifiersEx" type="int" line="515">
                <declaration name="tmpModifiers" type="int" line="516"/>
                <scope line="517"/>
            </method>
            <javadoc line="522">
                Constructs a &lt;code&gt;MouseEvent&lt;/code&gt; object with the
                  specified source component,
                  type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag,
                  and button number.
                  &lt;p&gt;
                  Creating an invalid event (such
                  as by using more than one of the old _MASKs, or modifier/button
                  values which don&apos;t match) results in unspecified behavior.
                  Even if inconsistent values for relative and absolute coordinates are
                  passed to the constructor, the mouse event instance is still
                  created and no exception is thrown.
                  This method throws an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;source&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    source       The &lt;code&gt;Component&lt;/code&gt; that originated the event                    
                </param>
                <param>
                    id              An integer indicating the type of event.
                      For information on allowable values, see
                      the class description for {@link MouseEvent}                    
                </param>
                <param>
                    when         A long integer that gives the time the event occurred.
                      Passing negative or zero value
                      is not recommended                    
                </param>
                <param>
                    modifiers    The modifier keys down during event (e.g. shift, ctrl,
                      alt, meta)
                      Passing negative parameter
                      is not recommended.
                      Zero value means that no modifiers were passed.
                      Use either an extended _DOWN_MASK or old _MASK modifiers,
                      however do not mix models in the one event.
                      The extended modifiers are preferred for using                    
                </param>
                <param>
                    x            The horizontal x coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    y            The vertical y coordinate for the mouse location.
                      It is allowed to pass negative values                    
                </param>
                <param>
                    xAbs           The absolute horizontal x coordinate for the mouse location
                      It is allowed to pass negative values                    
                </param>
                <param>
                    yAbs           The absolute vertical y coordinate for the mouse location
                      It is allowed to pass negative values                    
                </param>
                <param>
                    clickCount   The number of mouse clicks associated with event.
                      Passing negative value
                      is not recommended                    
                </param>
                <param>
                    popupTrigger A boolean that equals {@code true} if this event
                      is a trigger for a popup menu                    
                </param>
                <param>
                    button       An integer that indicates, which of the mouse buttons has
                      changed its state.
                      The following rules are applied to this parameter:
                      &lt;ul&gt;
                      &lt;li&gt;If support for the extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
                      then it is allowed to create {@code MouseEvent} objects only with the standard buttons:{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and{@code BUTTON3}.
                      &lt;li&gt; If support for the extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java
                      then it is allowed to create {@code MouseEvent} objects with
                      the standard buttons.
                      In case the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then
                      in addition to the standard buttons, {@code MouseEvent} objects can be created
                      using buttons from the range starting from 4 to{@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}if the mouse has more than three buttons.
                      &lt;/ul&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if {@code button} is less then zero                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is{@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if {@code button} is greater then the{@link java.awt.MouseInfo#getNumberOfButtons() current number of buttons} and the support
                      for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled}by Java                    
                </throws>
                <throws>
                    IllegalArgumentException if an invalid &lt;code&gt;button&lt;/code&gt;
                      value is passed in                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;source&lt;/code&gt; is null                    
                </throws>
                <see>
                    #getSource()                    
                </see>
                <see>
                    #getID()                    
                </see>
                <see>
                    #getWhen()                    
                </see>
                <see>
                    #getModifiers()                    
                </see>
                <see>
                    #getX()                    
                </see>
                <see>
                    #getY()                    
                </see>
                <see>
                    #getXOnScreen()                    
                </see>
                <see>
                    #getYOnScreen()                    
                </see>
                <see>
                    #getClickCount()                    
                </see>
                <see>
                    #isPopupTrigger()                    
                </see>
                <see>
                    #getButton()                    
                </see>
                <see>
                    #button                    
                </see>
                <see>
                    Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
                <see>
                    java.awt.MouseInfo#getNumberOfButtons()                    
                </see>
                <see>
                    InputEvent#getMaskForButton(int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MouseEvent" type="constructor" line="603">
                <params>
                    <param name="source" type="Component"/>
                    <param name="id" type="int"/>
                    <param name="when" type="long"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="xAbs" type="int"/>
                    <param name="yAbs" type="int"/>
                    <param name="clickCount" type="int"/>
                    <param name="popupTrigger" type="boolean"/>
                    <param name="button" type="int"/>
                </params>
                <scope line="611"/>
                <scope line="614">
                    <scope line="615"/>
                    <scope line="618">
                        <scope line="619"/>
                    </scope>
                    <scope line="623">
                        <scope line="624"/>
                    </scope>
                </scope>
                <scope line="631"/>
                <scope line="634"/>
            </method>
            <javadoc line="638">
                Returns the horizontal x position of the event relative to the
                  source component.                
                <return>
                    x  an integer indicating horizontal position relative to
                      the component                    
                </return>
            </javadoc>
            <method name="getX" type="int" line="644"/>
            <javadoc line="647">
                Returns the vertical y position of the event relative to the
                  source component.                
                <return>
                    y  an integer indicating vertical position relative to
                      the component                    
                </return>
            </javadoc>
            <method name="getY" type="int" line="653"/>
            <javadoc line="656">
                Returns the x,y position of the event relative to the source component.                
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; object containing the x and y coordinates
                      relative to the source component                    
                </return>
            </javadoc>
            <method name="getPoint" type="Point" line="661">
                <declaration name="x" type="int" line="662"/>
                <declaration name="y" type="int" line="663"/>
                <scope line="664"/>
            </method>
            <javadoc line="670">
                Translates the event&apos;s coordinates to a new position
                  by adding specified &lt;code&gt;x&lt;/code&gt; (horizontal) and &lt;code&gt;y&lt;/code&gt;
                  (vertical) offsets.                
                <param>
                    x the horizontal x value to add to the current x
                      coordinate position                    
                </param>
                <param>
                    y the vertical y value to add to the current y
                      coordinate position                    
                </param>
            </javadoc>
            <method name="translatePoint" type="void" line="679">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="683">
                Returns the number of mouse clicks associated with this event.                
                <return>
                    integer value for the number of clicks                    
                </return>
            </javadoc>
            <method name="getClickCount" type="int" line="687"/>
            <javadoc line="690">
                Returns which, if any, of the mouse buttons has changed state.
                  The returned value is ranged
                  from 0 to the {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}value.
                  The returned value includes at least the following constants:
                  &lt;ul&gt;
                  &lt;li&gt; {@code NOBUTTON}&lt;li&gt; {@code BUTTON1}&lt;li&gt; {@code BUTTON2}&lt;li&gt; {@code BUTTON3}&lt;/ul&gt;
                  It is allowed to use those constants to compare with the returned button number in the application.
                  For example,
                  &lt;pre&gt;
                  if (anEvent.getButton() == MouseEvent.BUTTON1) {
                  &lt;/pre&gt;
                  In particular, for a mouse with one, two, or three buttons this method may return the following values:
                  &lt;ul&gt;
                  &lt;li&gt; 0 ({@code NOBUTTON})
                  &lt;li&gt; 1 ({@code BUTTON1})
                  &lt;li&gt; 2 ({@code BUTTON2})
                  &lt;li&gt; 3 ({@code BUTTON3})
                  &lt;/ul&gt;
                  Button numbers greater then {@code BUTTON3} have no constant identifier. So if a mouse with five buttons is
                  installed, this method may return the following values:
                  &lt;ul&gt;
                  &lt;li&gt; 0 ({@code NOBUTTON})
                  &lt;li&gt; 1 ({@code BUTTON1})
                  &lt;li&gt; 2 ({@code BUTTON2})
                  &lt;li&gt; 3 ({@code BUTTON3})
                  &lt;li&gt; 4
                  &lt;li&gt; 5
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Note: If support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java
                  then the AWT event subsystem does not produce mouse events for the extended mouse
                  buttons. So it is not expected that this method returns anything except {@code NOBUTTON}, {@code BUTTON1},{@code BUTTON2}, {@code BUTTON3}.                
                <return>
                    one of the values from 0 to {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}if support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} by Java.
                      That range includes {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, {@code BUTTON3};
                      &lt;br&gt;{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2} or {@code BUTTON3}if support for the extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java                    
                </return>
                <since>
                    1.4                    
                </since>
                <see>
                    Toolkit#areExtraMouseButtonsEnabled()                    
                </see>
                <see>
                    java.awt.MouseInfo#getNumberOfButtons()                    
                </see>
                <see>
                    #MouseEvent(Component,int,long,int,int,int,int,int,int,boolean,int)                    
                </see>
                <see>
                    InputEvent#getMaskForButton(int)                    
                </see>
            </javadoc>
            <method name="getButton" type="int" line="732"/>
            <javadoc line="735">
                Returns whether or not this mouse event is the popup menu
                  trigger event for the platform.
                  &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: Popup menus are triggered differently
                  on different systems. Therefore, &lt;code&gt;isPopupTrigger&lt;/code&gt;
                  should be checked in both &lt;code&gt;mousePressed&lt;/code&gt;
                  and &lt;code&gt;mouseReleased&lt;/code&gt;
                  for proper cross-platform functionality.                
                <return>
                    boolean, true if this event is the popup menu trigger
                      for this platform                    
                </return>
            </javadoc>
            <method name="isPopupTrigger" type="boolean" line="746"/>
            <javadoc line="749">
                Returns a &lt;code&gt;String&lt;/code&gt; instance describing the modifier keys and
                  mouse buttons that were down during the event, such as &quot;Shift&quot;,
                  or &quot;Ctrl+Shift&quot;. These strings can be localized by changing
                  the &lt;code&gt;awt.properties&lt;/code&gt; file.
                  &lt;p&gt;
                  Note that the &lt;code&gt;InputEvent.ALT_MASK&lt;/code&gt; and
                  &lt;code&gt;InputEvent.BUTTON2_MASK&lt;/code&gt; have equal values,
                  so the &quot;Alt&quot; string is returned for both modifiers.  Likewise,
                  the &lt;code&gt;InputEvent.META_MASK&lt;/code&gt; and
                  &lt;code&gt;InputEvent.BUTTON3_MASK&lt;/code&gt; have equal values,
                  so the &quot;Meta&quot; string is returned for both modifiers.
                  &lt;p&gt;
                  Note that passing negative parameter is incorrect,
                  and will cause the returning an unspecified string.
                  Zero parameter means that no modifiers were passed and will
                  cause the returning an empty string.
                  &lt;p&gt;                
                <param>
                    modifiers A modifier mask describing the modifier keys and
                      mouse buttons that were down during the event                    
                </param>
                <return>
                    string   string text description of the combination of modifier
                      keys and mouse buttons that were down during the event                    
                </return>
                <see>
                    InputEvent#getModifiersExText(int)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMouseModifiersText" type="String" line="774">
                <params>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="775"/>
                <scope line="776"/>
                <scope line="780"/>
                <scope line="784"/>
                <scope line="788"/>
                <scope line="792"/>
                <scope line="796"/>
                <scope line="800"/>
                <scope line="804"/>
                <declaration name="mask" type="int" line="808"/>
                <scope line="809">
                    <scope line="811"/>
                </scope>
                <scope line="816"/>
            </method>
            <javadoc line="821">
                Returns a parameter string identifying this event.
                  This method is useful for event-logging and for debugging.                
                <return>
                    a string identifying the event and its attributes                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="826">
                <declaration name="str" type="StringBuilder" line="827"/>
                <scope line="858"/>
                <scope line="861"/>
                <scope line="864"/>
            </method>
            <javadoc line="870">
                Sets new modifiers by the old ones.
                  Also sets button.                
            </javadoc>
            <method name="setNewModifiers" type="void" line="874">
                <scope line="875"/>
                <scope line="878"/>
                <scope line="881"/>
                <scope line="884">
                    <scope line="885">
                        <scope line="888"/>
                    </scope>
                    <scope line="892">
                        <scope line="895"/>
                    </scope>
                    <scope line="899">
                        <scope line="902"/>
                    </scope>
                </scope>
                <scope line="907"/>
                <scope line="910"/>
                <scope line="913"/>
                <scope line="916"/>
                <scope line="919"/>
            </method>
            <javadoc line="923">
                Sets old modifiers by the new ones.                
            </javadoc>
            <method name="setOldModifiers" type="void" line="926">
                <scope line="927"/>
                <scope line="940">
                    <scope line="941"/>
                    <scope line="944"/>
                    <scope line="947"/>
                </scope>
                <scope line="951"/>
                <scope line="954"/>
                <scope line="957"/>
                <scope line="960"/>
                <scope line="963"/>
            </method>
            <javadoc line="967">
                Sets new modifiers by the old ones.                
                <serial>
                                        
                </serial>
            </javadoc>
            <method name="readObject" type="void" line="971">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="973"/>
            </method>
        </class>
    </source>