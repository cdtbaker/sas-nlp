<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="GradientPaint" line="7">
            <implements interface="Paint"/>
            <javadoc line="7">
                The &lt;code&gt;GradientPaint&lt;/code&gt; class provides a way to fill
                  a {@link Shape} with a linear color gradient pattern.
                  If {@link Point} P1 with {@link Color} C1 and &lt;code&gt;Point&lt;/code&gt; P2 with
                  &lt;code&gt;Color&lt;/code&gt; C2 are specified in user space, the
                  &lt;code&gt;Color&lt;/code&gt; on the P1, P2 connecting line is proportionally
                  changed from C1 to C2.  Any point P not on the extended P1, P2
                  connecting line has the color of the point P&apos; that is the perpendicular
                  projection of P on the extended P1, P2 connecting line.
                  Points on the extended line outside of the P1, P2 segment can be colored
                  in one of two ways.
                  &lt;ul&gt;
                  &lt;li&gt;
                  If the gradient is cyclic then the points on the extended P1, P2
                  connecting line cycle back and forth between the colors C1 and C2.
                  &lt;li&gt;
                  If the gradient is acyclic then points on the P1 side of the segment
                  have the constant &lt;code&gt;Color&lt;/code&gt; C1 while points on the P2 side
                  have the constant &lt;code&gt;Color&lt;/code&gt; C2.
                  &lt;/ul&gt;                
                <see>
                    Paint                    
                </see>
                <see>
                    Graphics2D#setPaint                    
                </see>
                <version>
                    10 Feb 1997                    
                </version>
            </javadoc>
            <declaration name="p1" type="Point2D.Float" line="32"/>
            <declaration name="p2" type="Point2D.Float" line="33"/>
            <declaration name="color1" type="Color" line="34"/>
            <declaration name="color2" type="Color" line="35"/>
            <declaration name="cyclic" type="boolean" line="36"/>
            <javadoc line="37">
                Constructs a simple acyclic &lt;code&gt;GradientPaint&lt;/code&gt; object.                
                <param>
                    x1 x coordinate of the first specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    y1 y coordinate of the first specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color1 &lt;code&gt;Color&lt;/code&gt; at the first specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    x2 x coordinate of the second specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    y2 y coordinate of the second specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color2 &lt;code&gt;Color&lt;/code&gt; at the second specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if either one of colors is null                    
                </throws>
            </javadoc>
            <method name="GradientPaint" type="constructor" line="53">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="color1" type="Color"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="color2" type="Color"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="62">
                Constructs a simple acyclic &lt;code&gt;GradientPaint&lt;/code&gt; object.                
                <param>
                    pt1 the first specified &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color1 &lt;code&gt;Color&lt;/code&gt; at the first specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    pt2 the second specified &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color2 &lt;code&gt;Color&lt;/code&gt; at the second specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if either one of colors or points
                      is null                    
                </throws>
            </javadoc>
            <method name="GradientPaint" type="constructor" line="73">
                <params>
                    <param name="pt1" type="Point2D"/>
                    <param name="color1" type="Color"/>
                    <param name="pt2" type="Point2D"/>
                    <param name="color2" type="Color"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="82">
                Constructs either a cyclic or acyclic &lt;code&gt;GradientPaint&lt;/code&gt;
                  object depending on the &lt;code&gt;boolean&lt;/code&gt; parameter.                
                <param>
                    x1 x coordinate of the first specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    y1 y coordinate of the first specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color1 &lt;code&gt;Color&lt;/code&gt; at the first specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    x2 x coordinate of the second specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    y2 y coordinate of the second specified
                      &lt;code&gt;Point&lt;/code&gt; in user space                    
                </param>
                <param>
                    color2 &lt;code&gt;Color&lt;/code&gt; at the second specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    cyclic &lt;code&gt;true&lt;/code&gt; if the gradient pattern should cycle
                      repeatedly between the two colors; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
            </javadoc>
            <method name="GradientPaint" type="constructor" line="100">
                <params>
                    <param name="x1" type="float"/>
                    <param name="y1" type="float"/>
                    <param name="color1" type="Color"/>
                    <param name="x2" type="float"/>
                    <param name="y2" type="float"/>
                    <param name="color2" type="Color"/>
                    <param name="cyclic" type="boolean"/>
                </params>
            </method>
            <javadoc line="104">
                Constructs either a cyclic or acyclic &lt;code&gt;GradientPaint&lt;/code&gt;
                  object depending on the &lt;code&gt;boolean&lt;/code&gt; parameter.                
                <param>
                    pt1 the first specified &lt;code&gt;Point&lt;/code&gt;
                      in user space                    
                </param>
                <param>
                    color1 &lt;code&gt;Color&lt;/code&gt; at the first specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    pt2 the second specified &lt;code&gt;Point&lt;/code&gt;
                      in user space                    
                </param>
                <param>
                    color2 &lt;code&gt;Color&lt;/code&gt; at the second specified
                      &lt;code&gt;Point&lt;/code&gt;                    
                </param>
                <param>
                    cyclic &lt;code&gt;true&lt;/code&gt; if the gradient pattern should cycle
                      repeatedly between the two colors; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <throws>
                    NullPointerException if either one of colors or points
                      is null                    
                </throws>
            </javadoc>
            <method name="GradientPaint" type="constructor" line="120">
                <params>
                    <param name="pt1" type="Point2D"/>
                    <param name="color1" type="Color"/>
                    <param name="pt2" type="Point2D"/>
                    <param name="color2" type="Color"/>
                    <param name="cyclic" type="boolean"/>
                </params>
            </method>
            <javadoc line="124">
                Returns a copy of the point P1 that anchors the first color.                
                <return>
                    a {@link Point2D} object that is a copy of the point
                      that anchors the first color of this
                      &lt;code&gt;GradientPaint&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPoint1" type="Point2D" line="130"/>
            <javadoc line="133">
                Returns the color C1 anchored by the point P1.                
                <return>
                    a &lt;code&gt;Color&lt;/code&gt; object that is the color
                      anchored by P1.                    
                </return>
            </javadoc>
            <method name="getColor1" type="Color" line="138"/>
            <javadoc line="141">
                Returns a copy of the point P2 which anchors the second color.                
                <return>
                    a {@link Point2D} object that is a copy of the point
                      that anchors the second color of this
                      &lt;code&gt;GradientPaint&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPoint2" type="Point2D" line="147"/>
            <javadoc line="150">
                Returns the color C2 anchored by the point P2.                
                <return>
                    a &lt;code&gt;Color&lt;/code&gt; object that is the color
                      anchored by P2.                    
                </return>
            </javadoc>
            <method name="getColor2" type="Color" line="155"/>
            <javadoc line="158">
                Returns &lt;code&gt;true&lt;/code&gt; if the gradient cycles repeatedly
                  between the two colors C1 and C2.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the gradient cycles repeatedly
                      between the two colors; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isCyclic" type="boolean" line="164"/>
            <javadoc line="167">
                Creates and returns a {@link PaintContext} used to
                  generate a linear color gradient pattern.
                  See the {@link Paint#createContext specification} of the
                  method in the {@link Paint} interface for information
                  on null parameter handling.                
                <param>
                    cm the preferred {@link ColorModel} which represents the most convenient
                      format for the caller to receive the pixel data, or {@code null}if there is no preference.                    
                </param>
                <param>
                    deviceBounds the device space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    userBounds the user space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    xform the {@link AffineTransform} from user
                      space into device space.                    
                </param>
                <param>
                    hints the set of hints that the context object can use to
                      choose between rendering alternatives.                    
                </param>
                <return>
                    the {@code PaintContext} for
                      generating color patterns.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    PaintContext                    
                </see>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Rectangle                    
                </see>
                <see>
                    Rectangle2D                    
                </see>
                <see>
                    AffineTransform                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="createContext" type="PaintContext" line="193">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="196">
                Returns the transparency mode for this &lt;code&gt;GradientPaint&lt;/code&gt;.                
                <return>
                    an integer value representing this &lt;code&gt;GradientPaint&lt;/code&gt;
                      object&apos;s transparency mode.                    
                </return>
                <see>
                    Transparency                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="202">
                <declaration name="a1" type="int" line="203"/>
                <declaration name="a2" type="int" line="204"/>
            </method>
        </class>
    </source>