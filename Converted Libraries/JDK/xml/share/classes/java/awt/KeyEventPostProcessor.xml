<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.KeyEvent"/>
        <interface name="KeyEventPostProcessor">
            <javadoc line="3">
                A KeyEventPostProcessor cooperates with the current KeyboardFocusManager
                  in the final resolution of all unconsumed KeyEvents. KeyEventPostProcessors
                  registered with the current KeyboardFocusManager will receive KeyEvents
                  after the KeyEvents have been dispatched to and handled by their targets.
                  KeyEvents that would have been otherwise discarded because no Component in
                  the application currently owns the focus will also be forwarded to
                  registered KeyEventPostProcessors. This will allow applications to implement
                  features that require global KeyEvent post-handling, such as menu shortcuts.
                  &lt;p&gt;
                  Note that the KeyboardFocusManager itself implements KeyEventPostProcessor.
                  By default, the current KeyboardFocusManager will be the final
                  KeyEventPostProcessor in the chain. The current KeyboardFocusManager cannot
                  be completely deregistered as a KeyEventPostProcessor. However, if a
                  KeyEventPostProcessor reports that no further post-processing of the
                  KeyEvent should take place, the AWT will consider the event fully handled
                  and will take no additional action with regard to the event. (While it is
                  possible for client code to register the current KeyboardFocusManager as
                  a KeyEventPostProcessor one or more times, this is usually unnecessary and
                  not recommended.)                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    KeyboardFocusManager#addKeyEventPostProcessor                    
                </see>
                <see>
                    KeyboardFocusManager#removeKeyEventPostProcessor                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="postProcessKeyEvent" type="boolean" line="29"/>
            <javadoc line="29">
                This method is called by the current KeyboardFocusManager, requesting
                  that this KeyEventPostProcessor perform any necessary post-processing
                  which should be part of the KeyEvent&apos;s final resolution. At the time
                  this method is invoked, typically the KeyEvent has already been
                  dispatched to and handled by its target. However, if no Component in
                  the application currently owns the focus, then the KeyEvent has not
                  been dispatched to any Component. Typically, KeyEvent post-processing
                  will be used to implement features which require global KeyEvent
                  post-handling, such as menu shortcuts. Note that if a
                  KeyEventPostProcessor wishes to dispatch the KeyEvent, it must use
                  &lt;code&gt;redispatchEvent&lt;/code&gt; to prevent the AWT from recursively
                  requesting that this KeyEventPostProcessor perform post-processing
                  of the event again.
                  &lt;p&gt;
                  If an implementation of this method returns &lt;code&gt;false&lt;/code&gt;, then the
                  KeyEvent is passed to the next KeyEventPostProcessor in the chain,
                  ending with the current KeyboardFocusManager. If an implementation
                  returns &lt;code&gt;true&lt;/code&gt;, the KeyEvent is assumed to have been fully
                  handled (although this need not be the case), and the AWT will take no
                  further action with regard to the KeyEvent. If an implementation
                  consumes the KeyEvent but returns &lt;code&gt;false&lt;/code&gt;, the consumed
                  event will still be passed to the next KeyEventPostProcessor in the
                  chain. It is important for developers to check whether the KeyEvent has
                  been consumed before performing any post-processing of the KeyEvent. By
                  default, the current KeyboardFocusManager will perform no post-
                  processing in response to a consumed KeyEvent.                
                <param>
                    e the KeyEvent to post-process                    
                </param>
                <return>
                    <code>true</code> if the AWT should take no further action with
                      regard to the KeyEvent; <code>false</code> otherwise                    
                </return>
                <see>
                    KeyboardFocusManager#redispatchEvent                    
                </see>
            </javadoc>
        </interface>
    </source>