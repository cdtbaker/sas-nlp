<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="TexturePaint" line="33">
            <implements interface="Paint"/>
            <javadoc line="33">
                The &lt;code&gt;TexturePaint&lt;/code&gt; class provides a way to fill a{@link Shape} with a texture that is specified as
                  a {@link BufferedImage}. The size of the &lt;code&gt;BufferedImage&lt;/code&gt;
                  object should be small because the &lt;code&gt;BufferedImage&lt;/code&gt; data
                  is copied by the &lt;code&gt;TexturePaint&lt;/code&gt; object.
                  At construction time, the texture is anchored to the upper
                  left corner of a {@link Rectangle2D} that is
                  specified in user space.  Texture is computed for
                  locations in the device space by conceptually replicating the
                  specified &lt;code&gt;Rectangle2D&lt;/code&gt; infinitely in all directions
                  in user space and mapping the &lt;code&gt;BufferedImage&lt;/code&gt; to each
                  replicated &lt;code&gt;Rectangle2D&lt;/code&gt;.                
                <see>
                    Paint                    
                </see>
                <see>
                    Graphics2D#setPaint                    
                </see>
                <version>
                    1.48, 06/05/07                    
                </version>
            </javadoc>
            <declaration name="bufImg" type="BufferedImage" line="53"/>
            <declaration name="tx" type="double" line="54"/>
            <declaration name="ty" type="double" line="55"/>
            <declaration name="sx" type="double" line="56"/>
            <declaration name="sy" type="double" line="57"/>
            <javadoc line="59">
                Constructs a &lt;code&gt;TexturePaint&lt;/code&gt; object.                
                <param>
                    txtr the <code>BufferedImage</code> object with the texture
                      used for painting                    
                </param>
                <param>
                    anchor the <code>Rectangle2D</code> in user space used to
                      anchor and replicate the texture                    
                </param>
            </javadoc>
            <method name="TexturePaint" type="constructor" line="67">
                <params>
                    <param name="txtr" type="BufferedImage"/>
                    <param name="anchor" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="75">
                Returns the &lt;code&gt;BufferedImage&lt;/code&gt; texture used to
                  fill the shapes.                
                <return>
                    a <code>BufferedImage</code>.                    
                </return>
            </javadoc>
            <method name="getImage" type="BufferedImage" line="80"/>
            <javadoc line="84">
                Returns a copy of the anchor rectangle which positions and
                  sizes the textured image.                
                <return>
                    the <code>Rectangle2D</code> used to anchor and
                      size this <code>TexturePaint</code>.                    
                </return>
            </javadoc>
            <method name="getAnchorRect" type="Rectangle2D" line="90"/>
            <javadoc line="96">
                Creates and returns a {@link PaintContext} used to
                  generate a tiled image pattern.
                  See the {@link Paint#createContext specification} of the
                  method in the {@link Paint} interface for information
                  on null parameter handling.                
                <param>
                    cm the preferred {@link ColorModel} which represents the most convenient
                      format for the caller to receive the pixel data, or {@code null}if there is no preference.                    
                </param>
                <param>
                    deviceBounds the device space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    userBounds the user space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    xform the {@link AffineTransform} from user
                      space into device space.                    
                </param>
                <param>
                    hints the set of hints that the context object can use to
                      choose between rendering alternatives.                    
                </param>
                <return>
                    the {@code PaintContext} for
                      generating color patterns.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    PaintContext                    
                </see>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Rectangle                    
                </see>
                <see>
                    Rectangle2D                    
                </see>
                <see>
                    AffineTransform                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="createContext" type="PaintContext" line="128">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="129"/>
                <scope line="131"/>
            </method>
            <javadoc line="141">
                Returns the transparency mode for this &lt;code&gt;TexturePaint&lt;/code&gt;.                
                <return>
                    the transparency mode for this <code>TexturePaint</code>
                      as an integer value.                    
                </return>
                <see>
                    Transparency                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="147"/>
        </class>
    </source>