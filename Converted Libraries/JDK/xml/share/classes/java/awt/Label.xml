<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.LabelPeer"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="javax.accessibility"/>
        <class name="Label" line="32">
            <extends class="Component"/>
            <comment line="105">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="291">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="359">
                inner class AccessibleAWTLabel                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="32">
                A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a
                  container. A label displays a single line of read-only text.
                  The text can be changed by the application, but a user cannot edit it
                  directly.
                  &lt;p&gt;
                  For example, the code&amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
                  add(new Label(&quot;Hi There!&quot;));
                  add(new Label(&quot;Another Label&quot;));
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  produces the following labels:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Label-1.gif&quot; alt=&quot;Two labels: &apos;Hi There!&apos; and &apos;Another label&apos;&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;                
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="56">
                <scope line="59"/>
            </scope>
            <declaration name="LEFT" type="int" line="64"/>
            <javadoc line="64">
                Indicates that the label should be left justified.                
            </javadoc>
            <declaration name="CENTER" type="int" line="69"/>
            <javadoc line="69">
                Indicates that the label should be centered.                
            </javadoc>
            <declaration name="RIGHT" type="int" line="74"/>
            <javadoc line="74">
                Indicates that the label should be right justified.                
                <since>
                    JDK1.0t.                    
                </since>
            </javadoc>
            <declaration name="text" type="String" line="80"/>
            <javadoc line="80">
                The text of this label.
                  This text can be modified by the program
                  but never by the user.                
                <serial>
                                        
                </serial>
                <see>
                    #getText()                    
                </see>
                <see>
                    #setText(String)                    
                </see>
            </javadoc>
            <declaration name="alignment" type="int" line="91"/>
            <javadoc line="91">
                The label&apos;s alignment.  The default alignment is set
                  to be left justified.                
                <serial>
                                        
                </serial>
                <see>
                    #getAlignment()                    
                </see>
                <see>
                    #setAlignment(int)                    
                </see>
            </javadoc>
            <declaration name="base" type="String" line="101"/>
            <declaration name="nameCounter" type="int" line="102"/>
            <declaration name="serialVersionUID" type="long" line="107"/>
            <javadoc line="109">
                Constructs an empty label.
                  The text of the label is the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Label" type="constructor" line="116"/>
            <javadoc line="120">
                Constructs a new label with the specified string of text,
                  left justified.                
                <param>
                    text the string that the label presents.
                      A &lt;code&gt;null&lt;/code&gt; value
                      will be accepted without causing a NullPointerException
                      to be thrown.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Label" type="constructor" line="131">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="135">
                Constructs a new label that presents the specified string of
                  text with the specified alignment.
                  Possible values for &lt;code&gt;alignment&lt;/code&gt; are &lt;code&gt;Label.LEFT&lt;/code&gt;,
                  &lt;code&gt;Label.RIGHT&lt;/code&gt;, and &lt;code&gt;Label.CENTER&lt;/code&gt;.                
                <param>
                    text the string that the label presents.
                      A &lt;code&gt;null&lt;/code&gt; value
                      will be accepted without causing a NullPointerException
                      to be thrown.                    
                </param>
                <param>
                    alignment   the alignment value.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Label" type="constructor" line="149">
                <params>
                    <param name="text" type="String"/>
                    <param name="alignment" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Read a label from an object input stream.                
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <serial>
                                        
                </serial>
                <since>
                    1.4                    
                </since>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="165">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="170">
                Construct a name for this component.  Called by getName() when the
                  name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="174">
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Creates the peer for this label.  The peer allows us to
                  modify the appearance of the label without changing its
                  functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="185">
                <scope line="186"/>
            </method>
            <javadoc line="193">
                Gets the current alignment of this label. Possible values are
                  &lt;code&gt;Label.LEFT&lt;/code&gt;, &lt;code&gt;Label.RIGHT&lt;/code&gt;, and
                  &lt;code&gt;Label.CENTER&lt;/code&gt;.                
                <see>
                    java.awt.Label#setAlignment                    
                </see>
            </javadoc>
            <method name="getAlignment" type="int" line="199"/>
            <javadoc line="203">
                Sets the alignment for this label to the specified alignment.
                  Possible values are &lt;code&gt;Label.LEFT&lt;/code&gt;,
                  &lt;code&gt;Label.RIGHT&lt;/code&gt;, and &lt;code&gt;Label.CENTER&lt;/code&gt;.                
                <param>
                    alignment    the alignment to be set.                    
                </param>
                <exception>
                    IllegalArgumentException if an improper value for
                      &lt;code&gt;alignment&lt;/code&gt; is given.                    
                </exception>
                <see>
                    java.awt.Label#getAlignment                    
                </see>
            </javadoc>
            <method name="setAlignment" type="void" line="212">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="peer" type="LabelPeer" line="218"/>
                <scope line="219"/>
            </method>
            <javadoc line="227">
                Gets the text of this label.                
                <return>
                    the text of this label, or &lt;code&gt;null&lt;/code&gt; if
                      the text has been set to &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <see>
                    java.awt.Label#setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="233"/>
            <javadoc line="237">
                Sets the text for this label to the specified text.                
                <param>
                    text the text that this label displays. If
                      &lt;code&gt;text&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, it is
                      treated for display purposes like an empty
                      string &lt;code&gt;&quot;&quot;&lt;/code&gt;.                    
                </param>
                <see>
                    java.awt.Label#getText                    
                </see>
            </javadoc>
            <method name="setText" type="void" line="245">
                <params>
                    <param name="text" type="String"/>
                </params>
                <comment line="260">
                    This could change the preferred size of the Component.                    
                </comment>
                <declaration name="testvalid" type="boolean" line="246"/>
                <scope line="247">
                    <scope line="249">
                        <declaration name="peer" type="LabelPeer" line="251"/>
                        <scope line="252"/>
                    </scope>
                </scope>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Returns a string representing the state of this &lt;code&gt;Label&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this label                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="274">
                <declaration name="str" type="String" line="275"/>
            </method>
            <method name="initIDs" type="void" line="284"/>
            <javadoc line="284">
                Initialize JNI field and method IDs                
            </javadoc>
            <javadoc line="295">
                Gets the AccessibleContext associated with this Label.
                  For labels, the AccessibleContext takes the form of an
                  AccessibleAWTLabel.
                  A new AccessibleAWTLabel instance is created if necessary.                
                <return>
                    an AccessibleAWTLabel that serves as the
                      AccessibleContext of this Label                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="305">
                <scope line="306"/>
            </method>
            <class name="AccessibleAWTLabel" line="312">
                <extends class="AccessibleAWTComponent"/>
                <comment line="321">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <javadoc line="312">
                    This class implements accessibility support for the
                      &lt;code&gt;Label&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to label user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="323"/>
                <method name="AccessibleAWTLabel" type="constructor" line="325"/>
                <javadoc line="329">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                    <see>
                        AccessibleContext#setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="336">
                    <scope line="337"/>
                    <scope line="339">
                        <scope line="340"/>
                        <scope line="342"/>
                    </scope>
                </method>
                <javadoc line="348">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="354"/>
            </class>
        </class>
    </source>