<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Timer"/>
        <import package="java.util.TimerTask"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="sun.awt.PeerEvent"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="WaitDispatchSupport" line="9">
            <implements interface="SecondaryLoop"/>
            <javadoc line="9">
                This utility class is used to suspend execution on a thread
                  while still allowing {@code EventDispatchThread} to dispatch events.
                  The API methods of the class are thread-safe.                
                <author>
                    Anton Tarasov, Artem Ananiev                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="17"/>
            <declaration name="dispatchThread" type="EventDispatchThread" line="18"/>
            <declaration name="filter" type="EventFilter" line="19"/>
            <declaration name="extCondition" type="Conditional" line="20"/>
            <declaration name="condition" type="Conditional" line="21"/>
            <declaration name="interval" type="long" line="22"/>
            <declaration name="timer" type="Timer" line="23"/>
            <declaration name="timerTask" type="TimerTask" line="24"/>
            <declaration name="keepBlockingEDT" type="AtomicBoolean" line="25"/>
            <declaration name="keepBlockingCT" type="AtomicBoolean" line="26"/>
            <method name="initializeTimer" type="void" line="27">
                <scope line="28"/>
            </method>
            <javadoc line="32">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="39">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                </params>
            </method>
            <javadoc line="42">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <param>
                    extCondition A conditional object used to determine
                      if the loop should be terminated                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="51">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                    <param name="extCond" type="Conditional"/>
                </params>
                <scope line="52"/>
                <anonymous_class line="57">
                    <method name="evaluate" type="boolean" line="58">
                        <scope line="59"/>
                        <declaration name="extEvaluate" type="boolean" line="62"/>
                        <scope line="63">
                            <scope line="64"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="75">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.
                  &lt;p&gt;
                  The {@link EventFilter} is set on the {@code dispatchThread}while waiting. The filter is removed on completion of the
                  waiting process.
                  &lt;p&gt;                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <param>
                    filter {@code EventFilter} to be set                    
                </param>
                <param>
                    interval A time interval to wait for. Note that
                      when the waiting process takes place on EDT
                      there is no guarantee to stop it in the given time                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="90">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                    <param name="extCondition" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                    <param name="interval" type="long"/>
                </params>
                <scope line="93"/>
                <scope line="97"/>
            </method>
            <javadoc line="101">
                @inheritDoc                
            </javadoc>
            <method name="enter" type="boolean" line="104">
                <scope line="106"/>
                <anonymous_class line="110">
                    <method name="run" type="void" line="111">
                        <scope line="113"/>
                        <scope line="116"/>
                    </method>
                </anonymous_class>
                <declaration name="run" type="Runnable" line="110"/>
                <declaration name="currentThread" type="Thread" line="122"/>
                <scope line="123">
                    <scope line="125">
                        <anonymous_class line="127">
                            <method name="run" type="void" line="128">
                                <scope line="129"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <declaration name="currentSE" type="SequencedEvent" line="136"/>
                    <scope line="137"/>
                    <anonymous_class line="141">
                        <method name="run" type="Object" line="142"/>
                    </anonymous_class>
                </scope>
                <scope line="149">
                    <scope line="151">
                        <scope line="152"/>
                        <scope line="155">
                            <declaration name="eq" type="EventQueue" line="156"/>
                            <scope line="159">
                                <declaration name="currTime" type="long" line="160"/>
                                <scope line="161"/>
                            </scope>
                            <scope line="165">
                                <scope line="166"/>
                            </scope>
                        </scope>
                        <scope line="172"/>
                        <scope line="175">
                            <scope line="176"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="186">
                @inheritDoc                
            </javadoc>
            <method name="exit" type="boolean" line="189">
                <scope line="191"/>
            </method>
            <method name="getTreeLock" type="Object" line="197"/>
            <declaration name="wakingRunnable" type="Runnable" line="200"/>
            <anonymous_class line="200">
                <method name="run" type="void" line="201">
                    <scope line="203"/>
                </method>
            </anonymous_class>
            <method name="wakeupEDT" type="void" line="211">
                <declaration name="eq" type="EventQueue" line="213"/>
            </method>
        </class>
    </source>