<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.Timer"/>
        <import package="java.util.TimerTask"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessController"/>
        <import package="sun.awt.PeerEvent"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="WaitDispatchSupport" line="39">
            <comment line="61">
                Use a shared daemon timer to serve all the WaitDispatchSupports                
            </comment>
            <comment line="63">
                When this WDS expires, we cancel the timer task leaving the                
            </comment>
            <comment line="64">
                shared timer up and running                
            </comment>
            <implements interface="SecondaryLoop"/>
            <javadoc line="39">
                This utility class is used to suspend execution on a thread
                  while still allowing {@code EventDispatchThread} to dispatch events.
                  The API methods of the class are thread-safe.                
                <author>
                    Anton Tarasov, Artem Ananiev                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="log" type="PlatformLogger" line="50"/>
            <declaration name="dispatchThread" type="EventDispatchThread" line="53"/>
            <declaration name="filter" type="EventFilter" line="54"/>
            <declaration name="extCondition" type="Conditional" line="56"/>
            <declaration name="condition" type="Conditional" line="57"/>
            <declaration name="interval" type="long" line="59"/>
            <declaration name="timer" type="Timer" line="61"/>
            <declaration name="timerTask" type="TimerTask" line="64"/>
            <declaration name="keepBlockingEDT" type="AtomicBoolean" line="66"/>
            <declaration name="keepBlockingCT" type="AtomicBoolean" line="67"/>
            <method name="initializeTimer" type="void" line="69">
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="84">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                </params>
            </method>
            <javadoc line="88">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <param>
                    extCondition A conditional object used to determine
                      if the loop should be terminated                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="101">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                    <param name="extCond" type="Conditional"/>
                </params>
                <scope line="102"/>
                <anonymous_class line="108">
                    <method name="evaluate" type="boolean" line="110">
                        <scope line="111"/>
                        <declaration name="extEvaluate" type="boolean" line="115"/>
                        <scope line="117">
                            <scope line="118"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="129">
                Creates a {@code WaitDispatchSupport} instance to
                  serve the given event dispatch thread.
                  &lt;p&gt;
                  The {@link EventFilter} is set on the {@code dispatchThread}while waiting. The filter is removed on completion of the
                  waiting process.
                  &lt;p&gt;                
                <param>
                    dispatchThread An event dispatch thread that
                      should not stop dispatching events while waiting                    
                </param>
                <param>
                    filter {@code EventFilter} to be set                    
                </param>
                <param>
                    interval A time interval to wait for. Note that
                      when the waiting process takes place on EDT
                      there is no guarantee to stop it in the given time                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="WaitDispatchSupport" type="constructor" line="151">
                <params>
                    <param name="dispatchThread" type="EventDispatchThread"/>
                    <param name="extCondition" type="Conditional"/>
                    <param name="filter" type="EventFilter"/>
                    <param name="interval" type="long"/>
                </params>
                <scope line="154"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                @inheritDoc                
            </javadoc>
            <method name="enter" type="boolean" line="167">
                <comment line="187">
                    We have two mechanisms for blocking: if we&apos;re on the                    
                </comment>
                <comment line="188">
                    dispatch thread, start a new event pump; if we&apos;re                    
                </comment>
                <comment line="189">
                    on any other thread, call wait() on the treelock                    
                </comment>
                <comment line="205">
                    Dispose SequencedEvent we are dispatching on the the current                    
                </comment>
                <comment line="206">
                    AppContext, to prevent us from hang - see 4531693 for details                    
                </comment>
                <comment line="213">
                    In case the exit() method is called before starting                    
                </comment>
                <comment line="214">
                    new event pump it will post the waking event to EDT.                    
                </comment>
                <comment line="215">
                    The event will be handled after the the new event pump                    
                </comment>
                <comment line="216">
                    starts. Thus, the enter() method will not hang.                    
                </comment>
                <comment line="217">
                                        
                </comment>
                <comment line="218">
                    Event pump should be privileged. See 6300270.                    
                </comment>
                <comment line="258">
                    If the waiting process has been stopped because of the                    
                </comment>
                <comment line="259">
                    time interval passed or an exception occurred, the state                    
                </comment>
                <comment line="260">
                    should be changed                    
                </comment>
                <scope line="171"/>
                <anonymous_class line="176">
                    <method name="run" type="void" line="177">
                        <scope line="179"/>
                        <scope line="181"/>
                    </method>
                </anonymous_class>
                <declaration name="run" type="Runnable" line="176"/>
                <declaration name="currentThread" type="Thread" line="191"/>
                <scope line="192">
                    <scope line="194">
                        <anonymous_class line="196">
                            <method name="run" type="void" line="198">
                                <scope line="199"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <declaration name="currentSE" type="SequencedEvent" line="207"/>
                    <scope line="209"/>
                    <anonymous_class line="219">
                        <method name="run" type="Object" line="220"/>
                    </anonymous_class>
                </scope>
                <scope line="225">
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="231">
                            <declaration name="eq" type="EventQueue" line="232"/>
                            <scope line="235">
                                <declaration name="currTime" type="long" line="236"/>
                                <scope line="240"/>
                            </scope>
                            <scope line="243">
                                <scope line="246"/>
                            </scope>
                        </scope>
                        <scope line="251"/>
                        <scope line="253">
                            <scope line="254"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="269">
                @inheritDoc                
            </javadoc>
            <method name="exit" type="boolean" line="272">
                <scope line="275"/>
            </method>
            <method name="getTreeLock" type="Object" line="282"/>
            <declaration name="wakingRunnable" type="Runnable" line="286"/>
            <anonymous_class line="286">
                <method name="run" type="void" line="287">
                    <scope line="289"/>
                </method>
            </anonymous_class>
            <method name="wakeupEDT" type="void" line="297">
                <declaration name="eq" type="EventQueue" line="299"/>
            </method>
        </class>
    </source>