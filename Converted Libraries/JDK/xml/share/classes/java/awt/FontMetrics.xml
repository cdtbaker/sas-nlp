<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineMetrics"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.text.CharacterIterator"/>
        <class name="FontMetrics" line="7">
            <implements interface="java.io.Serializable"/>
            <javadoc line="7">
                The &lt;code&gt;FontMetrics&lt;/code&gt; class defines a font metrics object, which
                  encapsulates information about the rendering of a particular font on a
                  particular screen.
                  &lt;p&gt;
                  &lt;b&gt;Note to subclassers&lt;/b&gt;: Since many of these methods form closed,
                  mutually recursive loops, you must take care that you implement
                  at least one of the methods in each such loop to prevent
                  infinite recursion when your subclass is used.
                  In particular, the following is the minimal suggested set of methods
                  to override in order to ensure correctness and prevent infinite
                  recursion (though other subsets are equally feasible):
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getAscent()}&lt;li&gt;{@link #getLeading()}&lt;li&gt;{@link #getMaxAdvance()}&lt;li&gt;{@link #charWidth(char)}&lt;li&gt;{@link #charsWidth(char[],int,int)}&lt;/ul&gt;
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/FontMetrics-1.gif&quot; alt=&quot;The letter &apos;p&apos; showing its &apos;reference point&apos;&quot; border=15 align
                  ALIGN=right HSPACE=10 VSPACE=7&gt;
                  Note that the implementations of these methods are
                  inefficient, so they are usually overridden with more efficient
                  toolkit-specific implementations.
                  &lt;p&gt;
                  When an application asks to place a character at the position
                  (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;), the character is placed so that its
                  reference point (shown as the dot in the accompanying image) is
                  put at that position. The reference point specifies a horizontal
                  line called the &lt;i&gt;baseline&lt;/i&gt; of the character. In normal
                  printing, the baselines of characters should align.
                  &lt;p&gt;
                  In addition, every character in a font has an &lt;i&gt;ascent&lt;/i&gt;, a
                  &lt;i&gt;descent&lt;/i&gt;, and an &lt;i&gt;advance width&lt;/i&gt;. The ascent is the
                  amount by which the character ascends above the baseline. The
                  descent is the amount by which the character descends below the
                  baseline. The advance width indicates the position at which AWT
                  should place the next character.
                  &lt;p&gt;
                  An array of characters or a string can also have an ascent, a
                  descent, and an advance width. The ascent of the array is the
                  maximum ascent of any character in the array. The descent is the
                  maximum descent of any character in the array. The advance width
                  is the sum of the advance widths of each of the characters in the
                  character array.  The advance of a &lt;code&gt;String&lt;/code&gt; is the
                  distance along the baseline of the &lt;code&gt;String&lt;/code&gt;.  This
                  distance is the width that should be used for centering or
                  right-aligning the &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;Note that the advance of a &lt;code&gt;String&lt;/code&gt; is not necessarily
                  the sum of the advances of its characters measured in isolation
                  because the width of a character can vary depending on its context.
                  For example, in Arabic text, the shape of a character can change
                  in order to connect to other characters.  Also, in some scripts,
                  certain character sequences can be represented by a single shape,
                  called a &lt;em&gt;ligature&lt;/em&gt;.  Measuring characters individually does
                  not account for these transformations.
                  &lt;p&gt;Font metrics are baseline-relative, meaning that they are
                  generally independent of the rotation applied to the font (modulo
                  possible grid hinting effects).  See {@link java.awt.Font Font}.                
                <author>
                    Jim Graham                    
                </author>
                <see>
                    java.awt.Font                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <scope line="67">
                <scope line="69"/>
            </scope>
            <declaration name="DEFAULT_FRC" type="FontRenderContext" line="73"/>
            <declaration name="font" type="Font" line="74"/>
            <javadoc line="74">
                The actual {@link Font} from which the font metrics are
                  created.
                  This cannot be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getFont()                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="82"/>
            <javadoc line="83">
                Creates a new &lt;code&gt;FontMetrics&lt;/code&gt; object for finding out
                  height and width information about the specified &lt;code&gt;Font&lt;/code&gt;
                  and specific character glyphs in that &lt;code&gt;Font&lt;/code&gt;.                
                <param>
                    font the &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <see>
                    java.awt.Font                    
                </see>
            </javadoc>
            <method name="FontMetrics" type="constructor" line="90">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="93">
                Gets the &lt;code&gt;Font&lt;/code&gt; described by this
                  &lt;code&gt;FontMetrics&lt;/code&gt; object.                
                <return>
                    the &lt;code&gt;Font&lt;/code&gt; described by this
                      &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="99"/>
            <javadoc line="102">
                Gets the &lt;code&gt;FontRenderContext&lt;/code&gt; used by this
                  &lt;code&gt;FontMetrics&lt;/code&gt; object to measure text.
                  &lt;p&gt;
                  Note that methods in this class which take a &lt;code&gt;Graphics&lt;/code&gt;
                  parameter measure text using the &lt;code&gt;FontRenderContext&lt;/code&gt;
                  of that &lt;code&gt;Graphics&lt;/code&gt; object, and not this
                  &lt;code&gt;FontRenderContext&lt;/code&gt;                
                <return>
                    the &lt;code&gt;FontRenderContext&lt;/code&gt; used by this
                      &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFontRenderContext" type="FontRenderContext" line="114"/>
            <javadoc line="117">
                Determines the &lt;em&gt;standard leading&lt;/em&gt; of the
                  &lt;code&gt;Font&lt;/code&gt; described by this &lt;code&gt;FontMetrics&lt;/code&gt;
                  object.  The standard leading, or
                  interline spacing, is the logical amount of space to be reserved
                  between the descent of one line of text and the ascent of the next
                  line. The height metric is calculated to include this extra space.                
                <return>
                    the standard leading of the &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getHeight()                    
                </see>
                <see>
                    #getAscent()                    
                </see>
                <see>
                    #getDescent()                    
                </see>
            </javadoc>
            <method name="getLeading" type="int" line="129"/>
            <javadoc line="132">
                Determines the &lt;em&gt;font ascent&lt;/em&gt; of the &lt;code&gt;Font&lt;/code&gt;
                  described by this &lt;code&gt;FontMetrics&lt;/code&gt; object. The font ascent
                  is the distance from the font&apos;s baseline to the top of most
                  alphanumeric characters. Some characters in the &lt;code&gt;Font&lt;/code&gt;
                  might extend above the font ascent line.                
                <return>
                    the font ascent of the &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getMaxAscent()                    
                </see>
            </javadoc>
            <method name="getAscent" type="int" line="141"/>
            <javadoc line="144">
                Determines the &lt;em&gt;font descent&lt;/em&gt; of the &lt;code&gt;Font&lt;/code&gt;
                  described by this
                  &lt;code&gt;FontMetrics&lt;/code&gt; object. The font descent is the distance
                  from the font&apos;s baseline to the bottom of most alphanumeric
                  characters with descenders. Some characters in the
                  &lt;code&gt;Font&lt;/code&gt; might extend
                  below the font descent line.                
                <return>
                    the font descent of the &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getMaxDescent()                    
                </see>
            </javadoc>
            <method name="getDescent" type="int" line="155"/>
            <javadoc line="158">
                Gets the standard height of a line of text in this font.  This
                  is the distance between the baseline of adjacent lines of text.
                  It is the sum of the leading + ascent + descent. Due to rounding
                  this may not be the same as getAscent() + getDescent() + getLeading().
                  There is no guarantee that lines of text spaced at this distance are
                  disjoint; such lines may overlap if some characters overshoot
                  either the standard ascent or the standard descent metric.                
                <return>
                    the standard height of the font.                    
                </return>
                <see>
                    #getLeading()                    
                </see>
                <see>
                    #getAscent()                    
                </see>
                <see>
                    #getDescent()                    
                </see>
            </javadoc>
            <method name="getHeight" type="int" line="171"/>
            <javadoc line="174">
                Determines the maximum ascent of the &lt;code&gt;Font&lt;/code&gt;
                  described by this &lt;code&gt;FontMetrics&lt;/code&gt; object.  No character
                  extends further above the font&apos;s baseline than this height.                
                <return>
                    the maximum ascent of any character in the
                      &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getAscent()                    
                </see>
            </javadoc>
            <method name="getMaxAscent" type="int" line="182"/>
            <javadoc line="185">
                Determines the maximum descent of the &lt;code&gt;Font&lt;/code&gt;
                  described by this &lt;code&gt;FontMetrics&lt;/code&gt; object.  No character
                  extends further below the font&apos;s baseline than this height.                
                <return>
                    the maximum descent of any character in the
                      &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getDescent()                    
                </see>
            </javadoc>
            <method name="getMaxDescent" type="int" line="193"/>
            <javadoc line="196">
                For backward compatibility only.                
                <return>
                    the maximum descent of any character in the
                      &lt;code&gt;Font&lt;/code&gt;.                    
                </return>
                <see>
                    #getMaxDescent()                    
                </see>
                <deprecated>
                    As of JDK version 1.1.1,
                      replaced by &lt;code&gt;getMaxDescent()&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="getMaxDecent" type="int" line="204"/>
            <javadoc line="207">
                Gets the maximum advance width of any character in this
                  &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  string&apos;s baseline.  The advance of a &lt;code&gt;String&lt;/code&gt; is
                  not necessarily the sum of the advances of its characters.                
                <return>
                    the maximum advance width of any character
                      in the &lt;code&gt;Font&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if the
                      maximum advance width is not known.                    
                </return>
            </javadoc>
            <method name="getMaxAdvance" type="int" line="217"/>
            <javadoc line="220">
                Returns the advance width of the specified character in this
                  &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  character&apos;s baseline.  Note that the advance of a
                  &lt;code&gt;String&lt;/code&gt; is not necessarily the sum of the advances
                  of its characters.
                  &lt;p&gt;This method doesn&apos;t validate the specified character to be a
                  valid Unicode code point. The caller must validate the
                  character value using {@link java.lang.Character#isValidCodePoint(int)Character.isValidCodePoint} if necessary.                
                <param>
                    codePoint the character (Unicode code point) to be measured                    
                </param>
                <return>
                    the advance width of the specified character
                      in the &lt;code&gt;Font&lt;/code&gt; described by this
                      &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <see>
                    #charsWidth(char[],int,int)                    
                </see>
                <see>
                    #stringWidth(String)                    
                </see>
            </javadoc>
            <method name="charWidth" type="int" line="237">
                <params>
                    <param name="codePoint" type="int"/>
                </params>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244">
                    <declaration name="buffer" type="char[]" line="245"/>
                    <declaration name="len" type="int" line="246"/>
                </scope>
            </method>
            <javadoc line="250">
                Returns the advance width of the specified character in this
                  &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  character&apos;s baseline.  Note that the advance of a
                  &lt;code&gt;String&lt;/code&gt; is not necessarily the sum of the advances
                  of its characters.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
                  href=&quot;../lang/Character.html#supplementary&quot;&gt; supplementary
                  characters&lt;/a&gt;. To support all Unicode characters, including
                  supplementary characters, use the {@link #charWidth(int)} method.                
                <param>
                    ch the character to be measured                    
                </param>
                <return>
                    the advance width of the specified character
                      in the &lt;code&gt;Font&lt;/code&gt; described by this
                      &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <see>
                    #charsWidth(char[],int,int)                    
                </see>
                <see>
                    #stringWidth(String)                    
                </see>
            </javadoc>
            <method name="charWidth" type="int" line="268">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <scope line="269"/>
                <declaration name="data" type="char" line="272"/>
            </method>
            <javadoc line="275">
                Returns the total advance width for showing the specified
                  &lt;code&gt;String&lt;/code&gt; in this &lt;code&gt;Font&lt;/code&gt;.  The advance
                  is the distance from the leftmost point to the rightmost point
                  on the string&apos;s baseline.
                  &lt;p&gt;
                  Note that the advance of a &lt;code&gt;String&lt;/code&gt; is
                  not necessarily the sum of the advances of its characters.                
                <param>
                    str the &lt;code&gt;String&lt;/code&gt; to be measured                    
                </param>
                <return>
                    the advance width of the specified &lt;code&gt;String&lt;/code&gt;
                      in the &lt;code&gt;Font&lt;/code&gt; described by this
                      &lt;code&gt;FontMetrics&lt;/code&gt;.                    
                </return>
                <throws>
                    NullPointerException if str is null.                    
                </throws>
                <see>
                    #bytesWidth(byte[],int,int)                    
                </see>
                <see>
                    #charsWidth(char[],int,int)                    
                </see>
                <see>
                    #getStringBounds(String,Graphics)                    
                </see>
            </javadoc>
            <method name="stringWidth" type="int" line="292">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="293"/>
                <declaration name="data" type="char" line="294"/>
            </method>
            <javadoc line="298">
                Returns the total advance width for showing the specified array
                  of characters in this &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  string&apos;s baseline.  The advance of a &lt;code&gt;String&lt;/code&gt;
                  is not necessarily the sum of the advances of its characters.
                  This is equivalent to measuring a &lt;code&gt;String&lt;/code&gt; of the
                  characters in the specified range.                
                <param>
                    data the array of characters to be measured                    
                </param>
                <param>
                    off the start offset of the characters in the array                    
                </param>
                <param>
                    len the number of characters to be measured from the array                    
                </param>
                <return>
                    the advance width of the subarray of the specified
                      &lt;code&gt;char&lt;/code&gt; array in the font described by
                      this &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;data&lt;/code&gt; is null.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the &lt;code&gt;off&lt;/code&gt;
                      and &lt;code&gt;len&lt;/code&gt; arguments index characters outside
                      the bounds of the &lt;code&gt;data&lt;/code&gt; array.                    
                </throws>
                <see>
                    #charWidth(int)                    
                </see>
                <see>
                    #charWidth(char)                    
                </see>
                <see>
                    #bytesWidth(byte[],int,int)                    
                </see>
                <see>
                    #stringWidth(String)                    
                </see>
            </javadoc>
            <method name="charsWidth" type="int" line="321">
                <params>
                    <param name="data" type="char"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="324">
                Returns the total advance width for showing the specified array
                  of bytes in this &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  string&apos;s baseline.  The advance of a &lt;code&gt;String&lt;/code&gt;
                  is not necessarily the sum of the advances of its characters.
                  This is equivalent to measuring a &lt;code&gt;String&lt;/code&gt; of the
                  characters in the specified range.                
                <param>
                    data the array of bytes to be measured                    
                </param>
                <param>
                    off the start offset of the bytes in the array                    
                </param>
                <param>
                    len the number of bytes to be measured from the array                    
                </param>
                <return>
                    the advance width of the subarray of the specified
                      &lt;code&gt;byte&lt;/code&gt; array in the &lt;code&gt;Font&lt;/code&gt;
                      described by
                      this &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;data&lt;/code&gt; is null.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException if the &lt;code&gt;off&lt;/code&gt;
                      and &lt;code&gt;len&lt;/code&gt; arguments index bytes outside
                      the bounds of the &lt;code&gt;data&lt;/code&gt; array.                    
                </throws>
                <see>
                    #charsWidth(char[],int,int)                    
                </see>
                <see>
                    #stringWidth(String)                    
                </see>
            </javadoc>
            <method name="bytesWidth" type="int" line="346">
                <params>
                    <param name="data" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="349">
                Gets the advance widths of the first 256 characters in the
                  &lt;code&gt;Font&lt;/code&gt;.  The advance is the
                  distance from the leftmost point to the rightmost point on the
                  character&apos;s baseline.  Note that the advance of a
                  &lt;code&gt;String&lt;/code&gt; is not necessarily the sum of the advances
                  of its characters.                
                <return>
                    an array storing the advance widths of the
                      characters in the &lt;code&gt;Font&lt;/code&gt;
                      described by this &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getWidths" type="int[]" line="360">
                <declaration name="widths" type="int" line="361"/>
                <scope line="362"/>
            </method>
            <javadoc line="367">
                Checks to see if the &lt;code&gt;Font&lt;/code&gt; has uniform line metrics.  A
                  composite font may consist of several different fonts to cover
                  various character sets.  In such cases, the
                  &lt;code&gt;FontLineMetrics&lt;/code&gt; objects are not uniform.
                  Different fonts may have a different ascent, descent, metrics and
                  so on.  This information is sometimes necessary for line
                  measuring and line breaking.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the font has uniform line metrics;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    java.awt.Font#hasUniformLineMetrics()                    
                </see>
            </javadoc>
            <method name="hasUniformLineMetrics" type="boolean" line="379"/>
            <javadoc line="382">
                Returns the {@link LineMetrics} object for the specified
                  &lt;code&gt;String&lt;/code&gt; in the specified {@link Graphics} context.                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getLineMetrics(String,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="391">
                <params>
                    <param name="str" type="String"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="394">
                Returns the {@link LineMetrics} object for the specified
                  &lt;code&gt;String&lt;/code&gt; in the specified {@link Graphics} context.                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getLineMetrics(String,int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="405">
                <params>
                    <param name="str" type="String"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="408">
                Returns the {@link LineMetrics} object for the specified
                  character array in the specified {@link Graphics} context.                
                <param>
                    chars the specified character array                    
                </param>
                <param>
                    beginIndex the initial offset of &lt;code&gt;chars&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;chars&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified character array and &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getLineMetrics(char[],int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="419">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="422">
                Returns the {@link LineMetrics} object for the specified{@link CharacterIterator} in the specified {@link Graphics}context.                
                <param>
                    ci the specified &lt;code&gt;CharacterIterator&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset in &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    limit the end index of &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;LineMetrics&lt;/code&gt; object created with the
                      specified arguments.                    
                </return>
                <see>
                    java.awt.Font#getLineMetrics(CharacterIterator,int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getLineMetrics" type="LineMetrics" line="432">
                <params>
                    <param name="ci" type="CharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="435">
                Returns the bounds of the specified &lt;code&gt;String&lt;/code&gt; in the
                  specified &lt;code&gt;Graphics&lt;/code&gt; context.  The bounds is used
                  to layout the &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.FontMetrics class notes}).                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a {@link Rectangle2D} that is the bounding box of the
                      specified &lt;code&gt;String&lt;/code&gt; in the specified
                      &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getStringBounds(String,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="448">
                <params>
                    <param name="str" type="String"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="451">
                Returns the bounds of the specified &lt;code&gt;String&lt;/code&gt; in the
                  specified &lt;code&gt;Graphics&lt;/code&gt; context.  The bounds is used
                  to layout the &lt;code&gt;String&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.FontMetrics class notes}).                
                <param>
                    str the specified &lt;code&gt;String&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the offset of the beginning of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    limit the end offset of &lt;code&gt;str&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      specified &lt;code&gt;String&lt;/code&gt; in the specified
                      &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getStringBounds(String,int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="466">
                <params>
                    <param name="str" type="String"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="469">
                Returns the bounds of the specified array of characters
                  in the specified &lt;code&gt;Graphics&lt;/code&gt; context.
                  The bounds is used to layout the &lt;code&gt;String&lt;/code&gt;
                  created with the specified array of characters,
                  &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt;.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.FontMetrics class notes}).                
                <param>
                    chars an array of characters                    
                </param>
                <param>
                    beginIndex the initial offset of the array of
                      characters                    
                </param>
                <param>
                    limit the end offset of the array of characters                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      specified character array in the specified
                      &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getStringBounds(char[],int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="487">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="490">
                Returns the bounds of the characters indexed in the specified
                  &lt;code&gt;CharacterIterator&lt;/code&gt; in the
                  specified &lt;code&gt;Graphics&lt;/code&gt; context.
                  &lt;p&gt;Note: The returned bounds is in baseline-relative coordinates
                  (see {@link java.awt.FontMetrics class notes}).                
                <param>
                    ci the specified &lt;code&gt;CharacterIterator&lt;/code&gt;                    
                </param>
                <param>
                    beginIndex the initial offset in &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    limit the end index of &lt;code&gt;ci&lt;/code&gt;                    
                </param>
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box of the
                      characters indexed in the specified &lt;code&gt;CharacterIterator&lt;/code&gt;
                      in the specified &lt;code&gt;Graphics&lt;/code&gt; context.                    
                </return>
                <see>
                    java.awt.Font#getStringBounds(CharacterIterator,int,int,FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getStringBounds" type="Rectangle2D" line="505">
                <params>
                    <param name="ci" type="CharacterIterator"/>
                    <param name="beginIndex" type="int"/>
                    <param name="limit" type="int"/>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <javadoc line="508">
                Returns the bounds for the character with the maximum bounds
                  in the specified &lt;code&gt;Graphics&lt;/code&gt; context.                
                <param>
                    context the specified &lt;code&gt;Graphics&lt;/code&gt; context                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the
                      bounding box for the character with the maximum bounds.                    
                </return>
                <see>
                    java.awt.Font#getMaxCharBounds(FontRenderContext)                    
                </see>
            </javadoc>
            <method name="getMaxCharBounds" type="Rectangle2D" line="516">
                <params>
                    <param name="context" type="Graphics"/>
                </params>
            </method>
            <method name="myFRC" type="FontRenderContext" line="519">
                <params>
                    <param name="context" type="Graphics"/>
                </params>
                <scope line="520"/>
            </method>
            <javadoc line="525">
                Returns a representation of this &lt;code&gt;FontMetrics&lt;/code&gt;
                  object&apos;s values as a &lt;code&gt;String&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representation of this
                      &lt;code&gt;FontMetrics&lt;/code&gt; object.                    
                </return>
                <since>
                    JDK1.0.                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="532"/>
            <method name="initIDs" type="void" line="535"/>
            <javadoc line="535">
                Initialize JNI field and method IDs                
            </javadoc>
        </class>
    </source>