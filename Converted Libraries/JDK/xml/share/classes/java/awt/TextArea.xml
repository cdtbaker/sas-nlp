<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.peer.TextAreaPeer"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="javax.accessibility"/>
        <class name="TextArea" line="11">
            <extends class="TextComponent"/>
            <javadoc line="11">
                A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region
                  that displays text. It can be set to allow editing or
                  to be read-only.
                  &lt;p&gt;
                  The following image shows the appearance of a text area:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/TextArea-1.gif&quot; alt=&quot;A TextArea showing the word &apos;Hello!&apos;&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  This text area could be created by the following line of code:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  new TextArea(&quot;Hello&quot;, 5, 40);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;                
                <author>
                    Sami Shaio                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="rows" type="int" line="31"/>
            <javadoc line="31">
                The number of rows in the &lt;code&gt;TextArea&lt;/code&gt;.
                  This parameter will determine the text area&apos;s height.
                  Guaranteed to be non-negative.                
                <serial>
                                        
                </serial>
                <see>
                    #getRows()                    
                </see>
                <see>
                    #setRows(int)                    
                </see>
            </javadoc>
            <declaration name="columns" type="int" line="40"/>
            <javadoc line="40">
                The number of columns in the &lt;code&gt;TextArea&lt;/code&gt;.
                  A column is an approximate average character
                  width that is platform-dependent.
                  This parameter will determine the text area&apos;s width.
                  Guaranteed to be non-negative.                
                <serial>
                                        
                </serial>
                <see>
                    #setColumns(int)                    
                </see>
                <see>
                    #getColumns()                    
                </see>
            </javadoc>
            <declaration name="base" type="String" line="51"/>
            <declaration name="nameCounter" type="int" line="52"/>
            <declaration name="SCROLLBARS_BOTH" type="int" line="53"/>
            <javadoc line="53">
                Create and display both vertical and horizontal scrollbars.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCROLLBARS_VERTICAL_ONLY" type="int" line="58"/>
            <javadoc line="58">
                Create and display vertical scrollbar only.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCROLLBARS_HORIZONTAL_ONLY" type="int" line="63"/>
            <javadoc line="63">
                Create and display horizontal scrollbar only.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="SCROLLBARS_NONE" type="int" line="68"/>
            <javadoc line="68">
                Do not create or display any scrollbars for the text area.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <declaration name="scrollbarVisibility" type="int" line="73"/>
            <javadoc line="73">
                Determines which scrollbars are created for the
                  text area. It can be one of four values :
                  &lt;code&gt;SCROLLBARS_BOTH&lt;/code&gt; = both scrollbars.&lt;BR&gt;
                  &lt;code&gt;SCROLLBARS_HORIZONTAL_ONLY&lt;/code&gt; = Horizontal bar only.&lt;BR&gt;
                  &lt;code&gt;SCROLLBARS_VERTICAL_ONLY&lt;/code&gt; = Vertical bar only.&lt;BR&gt;
                  &lt;code&gt;SCROLLBARS_NONE&lt;/code&gt; = No scrollbars.&lt;BR&gt;                
                <serial>
                                        
                </serial>
                <see>
                    #getScrollbarVisibility()                    
                </see>
            </javadoc>
            <declaration name="forwardTraversalKeys" type="Set" line="84"/>
            <javadoc line="84">
                Cache the Sets of forward and backward traversal keys so we need not
                  look them up each time.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <method name="initIDs" type="void" line="90"/>
            <javadoc line="90">
                Initialize JNI field and method ids                
            </javadoc>
            <scope line="94">
                <scope line="96"/>
            </scope>
            <javadoc line="102">
                Constructs a new text area with the empty string as text.
                  This text area is created with scrollbar visibility equal to{@link #SCROLLBARS_BOTH}, so both vertical and horizontal
                  scrollbars will be visible for this text area.                
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
            </javadoc>
            <method name="TextArea" type="constructor" line="110"/>
            <javadoc line="113">
                Constructs a new text area with the specified text.
                  This text area is created with scrollbar visibility equal to{@link #SCROLLBARS_BOTH}, so both vertical and horizontal
                  scrollbars will be visible for this text area.                
                <param>
                    text       the text to be displayed; if
                      &lt;code&gt;text&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the empty
                      string &lt;code&gt;&quot;&quot;&lt;/code&gt; will be displayed                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
            </javadoc>
            <method name="TextArea" type="constructor" line="124">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="127">
                Constructs a new text area with the specified number of
                  rows and columns and the empty string as text.
                  A column is an approximate average character
                  width that is platform-dependent.  The text area is created with
                  scrollbar visibility equal to {@link #SCROLLBARS_BOTH}, so both
                  vertical and horizontal scrollbars will be visible for this
                  text area.                
                <param>
                    rows the number of rows                    
                </param>
                <param>
                    columns the number of columns                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
            </javadoc>
            <method name="TextArea" type="constructor" line="141">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="144">
                Constructs a new text area with the specified text,
                  and with the specified number of rows and columns.
                  A column is an approximate average character
                  width that is platform-dependent.  The text area is created with
                  scrollbar visibility equal to {@link #SCROLLBARS_BOTH}, so both
                  vertical and horizontal scrollbars will be visible for this
                  text area.                
                <param>
                    text       the text to be displayed; if
                      &lt;code&gt;text&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the empty
                      string &lt;code&gt;&quot;&quot;&lt;/code&gt; will be displayed                    
                </param>
                <param>
                    rows      the number of rows                    
                </param>
                <param>
                    columns   the number of columns                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
            </javadoc>
            <method name="TextArea" type="constructor" line="161">
                <params>
                    <param name="text" type="String"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="164">
                Constructs a new text area with the specified text,
                  and with the rows, columns, and scroll bar visibility
                  as specified.  All &lt;code&gt;TextArea&lt;/code&gt; constructors defer to
                  this one.
                  &lt;p&gt;
                  The &lt;code&gt;TextArea&lt;/code&gt; class defines several constants
                  that can be supplied as values for the
                  &lt;code&gt;scrollbars&lt;/code&gt; argument:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;SCROLLBARS_BOTH&lt;/code&gt;,
                  &lt;li&gt;&lt;code&gt;SCROLLBARS_VERTICAL_ONLY&lt;/code&gt;,
                  &lt;li&gt;&lt;code&gt;SCROLLBARS_HORIZONTAL_ONLY&lt;/code&gt;,
                  &lt;li&gt;&lt;code&gt;SCROLLBARS_NONE&lt;/code&gt;.
                  &lt;/ul&gt;
                  Any other value for the
                  &lt;code&gt;scrollbars&lt;/code&gt; argument is invalid and will result in
                  this text area being created with scrollbar visibility equal to
                  the default value of {@link #SCROLLBARS_BOTH}.                
                <param>
                    text       the text to be displayed; if
                      &lt;code&gt;text&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the empty
                      string &lt;code&gt;&quot;&quot;&lt;/code&gt; will be displayed                    
                </param>
                <param>
                    rows       the number of rows; if
                      &lt;code&gt;rows&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;,
                      &lt;code&gt;rows&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;                    
                </param>
                <param>
                    columns    the number of columns; if
                      &lt;code&gt;columns&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;,
                      &lt;code&gt;columns&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;                    
                </param>
                <param>
                    scrollbars  a constant that determines what
                      scrollbars are created to view the text area                    
                </param>
                <since>
                    JDK1.1                    
                </since>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless()                    
                </see>
            </javadoc>
            <method name="TextArea" type="constructor" line="199">
                <params>
                    <param name="text" type="String"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="scrollbars" type="int"/>
                </params>
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <javadoc line="212">
                Construct a name for this component.  Called by &lt;code&gt;getName&lt;/code&gt;
                  when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="216">
                <scope line="217"/>
            </method>
            <javadoc line="221">
                Creates the &lt;code&gt;TextArea&lt;/code&gt;&apos;s peer.  The peer allows us to modify
                  the appearance of the &lt;code&gt;TextArea&lt;/code&gt; without changing any of its
                  functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="226">
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Inserts the specified text at the specified position
                  in this text area.
                  &lt;p&gt;Note that passing &lt;code&gt;null&lt;/code&gt; or inconsistent
                  parameters is invalid and will result in unspecified
                  behavior.                
                <param>
                    str the non-&lt;code&gt;null&lt;/code&gt; text to insert                    
                </param>
                <param>
                    pos the position at which to insert                    
                </param>
                <see>
                    java.awt.TextComponent#setText                    
                </see>
                <see>
                    java.awt.TextArea#replaceRange                    
                </see>
                <see>
                    java.awt.TextArea#append                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="insert" type="void" line="245">
                <params>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;insert(String, int)&lt;/code&gt;.                
            </javadoc>
            <method name="insertText" type="void" line="252">
                <params>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="peer" type="TextAreaPeer" line="253"/>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Appends the given text to the text area&apos;s current text.
                  &lt;p&gt;Note that passing &lt;code&gt;null&lt;/code&gt; or inconsistent
                  parameters is invalid and will result in unspecified
                  behavior.                
                <param>
                    str the non-&lt;code&gt;null&lt;/code&gt; text to append                    
                </param>
                <see>
                    java.awt.TextArea#insert                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="append" type="void" line="270">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="273">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;append(String)&lt;/code&gt;.                
            </javadoc>
            <method name="appendText" type="void" line="277">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <javadoc line="285">
                Replaces text between the indicated start and end positions
                  with the specified replacement text.  The text at the end
                  position will not be replaced.  The text at the start
                  position will be replaced (unless the start position is the
                  same as the end position).
                  The text position is zero-based.  The inserted substring may be
                  of a different length than the text it replaces.
                  &lt;p&gt;Note that passing &lt;code&gt;null&lt;/code&gt; or inconsistent
                  parameters is invalid and will result in unspecified
                  behavior.                
                <param>
                    str      the non-&lt;code&gt;null&lt;/code&gt; text to use as
                      the replacement                    
                </param>
                <param>
                    start    the start position                    
                </param>
                <param>
                    end      the end position                    
                </param>
                <see>
                    java.awt.TextArea#insert                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="replaceRange" type="void" line="303">
                <params>
                    <param name="str" type="String"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="306">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;replaceRange(String, int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="replaceText" type="void" line="310">
                <params>
                    <param name="str" type="String"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="peer" type="TextAreaPeer" line="311"/>
                <scope line="312"/>
                <scope line="315"/>
            </method>
            <javadoc line="319">
                Returns the number of rows in the text area.                
                <return>
                    the number of rows in the text area                    
                </return>
                <see>
                    #setRows(int)                    
                </see>
                <see>
                    #getColumns()                    
                </see>
                <since>
                    JDK1                    
                </since>
            </javadoc>
            <method name="getRows" type="int" line="326"/>
            <javadoc line="329">
                Sets the number of rows for this text area.                
                <param>
                    rows   the number of rows                    
                </param>
                <see>
                    #getRows()                    
                </see>
                <see>
                    #setColumns(int)                    
                </see>
                <exception>
                    IllegalArgumentException   if the value
                      supplied for &lt;code&gt;rows&lt;/code&gt;
                      is less than &lt;code&gt;0&lt;/code&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setRows" type="void" line="339">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="340"/>
                <scope line="341"/>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                Returns the number of columns in this text area.                
                <return>
                    the number of columns in the text area                    
                </return>
                <see>
                    #setColumns(int)                    
                </see>
                <see>
                    #getRows()                    
                </see>
            </javadoc>
            <method name="getColumns" type="int" line="355"/>
            <javadoc line="358">
                Sets the number of columns for this text area.                
                <param>
                    columns   the number of columns                    
                </param>
                <see>
                    #getColumns()                    
                </see>
                <see>
                    #setRows(int)                    
                </see>
                <exception>
                    IllegalArgumentException   if the value
                      supplied for &lt;code&gt;columns&lt;/code&gt;
                      is less than &lt;code&gt;0&lt;/code&gt;                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setColumns" type="void" line="368">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="369"/>
                <scope line="370"/>
                <scope line="373"/>
            </method>
            <javadoc line="378">
                Returns an enumerated value that indicates which scroll bars
                  the text area uses.
                  &lt;p&gt;
                  The &lt;code&gt;TextArea&lt;/code&gt; class defines four integer constants
                  that are used to specify which scroll bars are available.
                  &lt;code&gt;TextArea&lt;/code&gt; has one constructor that gives the
                  application discretion over scroll bars.                
                <return>
                    an integer that indicates which scroll bars are used                    
                </return>
                <see>
                    java.awt.TextArea#SCROLLBARS_BOTH                    
                </see>
                <see>
                    java.awt.TextArea#SCROLLBARS_VERTICAL_ONLY                    
                </see>
                <see>
                    java.awt.TextArea#SCROLLBARS_HORIZONTAL_ONLY                    
                </see>
                <see>
                    java.awt.TextArea#SCROLLBARS_NONE                    
                </see>
                <see>
                    java.awt.TextArea#TextArea(java.lang.String,int,int,int)                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getScrollbarVisibility" type="int" line="394"/>
            <javadoc line="397">
                Determines the preferred size of a text area with the specified
                  number of rows and columns.                
                <param>
                    rows   the number of rows                    
                </param>
                <param>
                    columns   the number of columns                    
                </param>
                <return>
                    the preferred dimensions required to display
                      the text area with the specified
                      number of rows and columns                    
                </return>
                <see>
                    java.awt.Component#getPreferredSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="408">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="411">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize(int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="415">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <scope line="416">
                    <declaration name="peer" type="TextAreaPeer" line="417"/>
                </scope>
            </method>
            <javadoc line="421">
                Determines the preferred size of this text area.                
                <return>
                    the preferred dimensions needed for this text area                    
                </return>
                <see>
                    java.awt.Component#getPreferredSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="427"/>
            <javadoc line="430">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize()&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="434">
                <scope line="435"/>
            </method>
            <javadoc line="439">
                Determines the minimum size of a text area with the specified
                  number of rows and columns.                
                <param>
                    rows   the number of rows                    
                </param>
                <param>
                    columns   the number of columns                    
                </param>
                <return>
                    the minimum dimensions required to display
                      the text area with the specified
                      number of rows and columns                    
                </return>
                <see>
                    java.awt.Component#getMinimumSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="450">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="453">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize(int, int)&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="457">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <scope line="458">
                    <declaration name="peer" type="TextAreaPeer" line="459"/>
                </scope>
            </method>
            <javadoc line="463">
                Determines the minimum size of this text area.                
                <return>
                    the preferred dimensions needed for this text area                    
                </return>
                <see>
                    java.awt.Component#getPreferredSize                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="469"/>
            <javadoc line="472">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize()&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="476">
                <scope line="477"/>
            </method>
            <javadoc line="481">
                Returns a string representing the state of this &lt;code&gt;TextArea&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this text area                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="489">
                <declaration name="sbVisStr" type="String" line="490"/>
            </method>
            <declaration name="textAreaSerializedDataVersion" type="int" line="509"/>
            <javadoc line="509">
                The textArea Serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="514">
                Read the ObjectInputStream.                
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="521">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="523"/>
                <scope line="526"/>
                <scope line="529"/>
                <scope line="532"/>
            </method>
            <javadoc line="537">
                Returns the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with
                  this &lt;code&gt;TextArea&lt;/code&gt;. For text areas, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleAWTTextArea&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleAWTTextArea&lt;/code&gt; instance is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleAWTTextArea&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;TextArea&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="547">
                <scope line="548"/>
            </method>
            <class name="AccessibleAWTTextArea" line="553">
                <extends class="AccessibleAWTTextComponent"/>
                <javadoc line="553">
                    This class implements accessibility support for the
                      &lt;code&gt;TextArea&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to text area user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="560"/>
                <javadoc line="561">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="567">
                    <declaration name="states" type="AccessibleStateSet" line="568"/>
                </method>
            </class>
        </class>
    </source>