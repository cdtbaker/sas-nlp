<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="LinearGradientPaint" line="7">
            <extends class="MultipleGradientPaint"/>
            <javadoc line="7">
                The {@code LinearGradientPaint} class provides a way to fill
                  a {@link java.awt.Shape} with a linear color gradient pattern.  The user
                  may specify two or more gradient colors, and this paint will provide an
                  interpolation between each color.  The user also specifies start and end
                  points which define where in user space the color gradient should begin
                  and end.
                  &lt;p&gt;
                  The user must provide an array of floats specifying how to distribute the
                  colors along the gradient.  These values should range from 0.0 to 1.0 and
                  act like keyframes along the gradient (they mark where the gradient should
                  be exactly a particular color).
                  &lt;p&gt;
                  In the event that the user does not set the first keyframe value equal
                  to 0 and/or the last keyframe value equal to 1, keyframes will be created
                  at these positions and the first and last colors will be replicated there.
                  So, if a user specifies the following arrays to construct a gradient:&lt;br&gt;
                  &lt;pre&gt;
                  {Color.BLUE, Color.RED}, {.3f, .7f}
                  &lt;/pre&gt;
                  this will be converted to a gradient with the following keyframes:&lt;br&gt;
                  &lt;pre&gt;
                  {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The user may also select what action the {@code LinearGradientPaint} object
                  takes when it is filling the space outside the start and end points by
                  setting {@code CycleMethod} to either {@code REFLECTION} or {@code REPEAT}.
                  The distances between any two colors in any of the reflected or repeated
                  copies of the gradient are the same as the distance between those same two
                  colors between the start and end points.
                  Note that some minor variations in distances may occur due to sampling at
                  the granularity of a pixel.
                  If no cycle method is specified, {@code NO_CYCLE} will be chosen by
                  default, which means the endpoint colors will be used to fill the
                  remaining area.
                  &lt;p&gt;
                  The colorSpace parameter allows the user to specify in which colorspace
                  the interpolation should be performed, default sRGB or linearized RGB.
                  &lt;p&gt;
                  The following code demonstrates typical usage of{@code LinearGradientPaint}:
                  &lt;p&gt;
                  &lt;pre&gt;
                  Point2D start = new Point2D.Float(0, 0);
                  Point2D end = new Point2D.Float(50, 50);
                  float[] dist = {0.0f, 0.2f, 1.0f};
                  Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
                  LinearGradientPaint p =
                  new LinearGradientPaint(start, end, dist, colors);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This code will create a {@code LinearGradientPaint} which interpolates
                  between red and white for the first 20% of the gradient and between white
                  and blue for the remaining 80%.
                  &lt;p&gt;
                  This image demonstrates the example code above for each
                  of the three cycle methods:
                  &lt;p&gt;
                  &lt;center&gt;
                  &lt;img src = &quot;doc-files/LinearGradientPaint.png&quot;&gt;
                  &lt;/center&gt;                
                <see>
                    java.awt.Paint                    
                </see>
                <see>
                    java.awt.Graphics2D#setPaint                    
                </see>
                <author>
                    Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="start" type="Point2D" line="74"/>
            <javadoc line="74">
                Gradient start and end points.                
            </javadoc>
            <javadoc line="78">
                Constructs a {@code LinearGradientPaint} with a default{@code NO_CYCLE} repeating method and {@code SRGB} color space.                
                <param>
                    startX the X coordinate of the gradient axis start point
                      in user space                    
                </param>
                <param>
                    startY the Y coordinate of the gradient axis start point
                      in user space                    
                </param>
                <param>
                    endX   the X coordinate of the gradient axis end point
                      in user space                    
                </param>
                <param>
                    endY   the Y coordinate of the gradient axis end point
                      in user space                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null,                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif start and end points are the same points,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="LinearGradientPaint" type="constructor" line="99">
                <params>
                    <param name="startX" type="float"/>
                    <param name="startY" type="float"/>
                    <param name="endX" type="float"/>
                    <param name="endY" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                </params>
            </method>
            <javadoc line="102">
                Constructs a {@code LinearGradientPaint} with a default {@code SRGB}color space.                
                <param>
                    startX the X coordinate of the gradient axis start point
                      in user space                    
                </param>
                <param>
                    startY the Y coordinate of the gradient axis start point
                      in user space                    
                </param>
                <param>
                    endX   the X coordinate of the gradient axis end point
                      in user space                    
                </param>
                <param>
                    endY   the Y coordinate of the gradient axis end point
                      in user space                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif start and end points are the same points,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="LinearGradientPaint" type="constructor" line="126">
                <params>
                    <param name="startX" type="float"/>
                    <param name="startY" type="float"/>
                    <param name="endX" type="float"/>
                    <param name="endY" type="float"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="129">
                Constructs a {@code LinearGradientPaint} with a default{@code NO_CYCLE} repeating method and {@code SRGB} color space.                
                <param>
                    start the gradient axis start {@code Point2D} in user space                    
                </param>
                <param>
                    end the gradient axis end {@code Point2D} in user space                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <throws>
                    NullPointerExceptionif one of the points is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif start and end points are the same points,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="LinearGradientPaint" type="constructor" line="145">
                <params>
                    <param name="start" type="Point2D"/>
                    <param name="end" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                </params>
            </method>
            <javadoc line="148">
                Constructs a {@code LinearGradientPaint} with a default {@code SRGB}color space.                
                <param>
                    start the gradient axis start {@code Point2D} in user space                    
                </param>
                <param>
                    end the gradient axis end {@code Point2D} in user space                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <throws>
                    NullPointerExceptionif one of the points is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif start and end points are the same points,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="LinearGradientPaint" type="constructor" line="167">
                <params>
                    <param name="start" type="Point2D"/>
                    <param name="end" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                </params>
            </method>
            <javadoc line="170">
                Constructs a {@code LinearGradientPaint}.                
                <param>
                    start the gradient axis start {@code Point2D} in user space                    
                </param>
                <param>
                    end the gradient axis end {@code Point2D} in user space                    
                </param>
                <param>
                    fractions numbers ranging from 0.0 to 1.0 specifying the
                      distribution of colors along the gradient                    
                </param>
                <param>
                    colors array of colors corresponding to each fractional value                    
                </param>
                <param>
                    cycleMethod either {@code NO_CYCLE}, {@code REFLECT},
                      or {@code REPEAT}                    
                </param>
                <param>
                    colorSpace which color space to use for interpolation,
                      either {@code SRGB} or {@code LINEAR_RGB}                    
                </param>
                <param>
                    gradientTransform transform to apply to the gradient                    
                </param>
                <throws>
                    NullPointerExceptionif one of the points is null,
                      or {@code fractions} array is null,
                      or {@code colors} array is null,
                      or {@code cycleMethod} is null,
                      or {@code colorSpace} is null,
                      or {@code gradientTransform} is null                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif start and end points are the same points,
                      or {@code fractions.length != colors.length},
                      or {@code colors} is less than 2 in size,
                      or a {@code fractions} value is less than 0.0 or greater than 1.0,
                      or the {@code fractions} are not provided in strictly increasing order                    
                </throws>
            </javadoc>
            <method name="LinearGradientPaint" type="constructor" line="194">
                <params>
                    <param name="start" type="Point2D"/>
                    <param name="end" type="Point2D"/>
                    <param name="fractions" type="float[]"/>
                    <param name="colors" type="Color[]"/>
                    <param name="cycleMethod" type="CycleMethod"/>
                    <param name="colorSpace" type="ColorSpaceType"/>
                    <param name="gradientTransform" type="AffineTransform"/>
                </params>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <javadoc line="205">
                Creates and returns a {@link PaintContext} used to
                  generate a linear color gradient pattern.
                  See the {@link Paint#createContext specification} of the
                  method in the {@link Paint} interface for information
                  on null parameter handling.                
                <param>
                    cm the preferred {@link ColorModel} which represents the most convenient
                      format for the caller to receive the pixel data, or {@code null}if there is no preference.                    
                </param>
                <param>
                    deviceBounds the device space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    userBounds the user space bounding box
                      of the graphics primitive being rendered.                    
                </param>
                <param>
                    transform the {@link AffineTransform} from user
                      space into device space.                    
                </param>
                <param>
                    hints the set of hints that the context object can use to
                      choose between rendering alternatives.                    
                </param>
                <return>
                    the {@code PaintContext} for
                      generating color patterns.                    
                </return>
                <see>
                    Paint                    
                </see>
                <see>
                    PaintContext                    
                </see>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Rectangle                    
                </see>
                <see>
                    Rectangle2D                    
                </see>
                <see>
                    AffineTransform                    
                </see>
                <see>
                    RenderingHints                    
                </see>
            </javadoc>
            <method name="createContext" type="PaintContext" line="231">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="deviceBounds" type="Rectangle"/>
                    <param name="userBounds" type="Rectangle2D"/>
                    <param name="transform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="234">
                    <declaration name="cyclic" type="boolean" line="235"/>
                </scope>
                <scope line="238"/>
            </method>
            <javadoc line="242">
                Returns a copy of the start point of the gradient axis.                
                <return>
                    a {@code Point2D} object that is a copy of the point
                      that anchors the first color of this {@code LinearGradientPaint}                    
                </return>
            </javadoc>
            <method name="getStartPoint" type="Point2D" line="247"/>
            <javadoc line="250">
                Returns a copy of the end point of the gradient axis.                
                <return>
                    a {@code Point2D} object that is a copy of the point
                      that anchors the last color of this {@code LinearGradientPaint}                    
                </return>
            </javadoc>
            <method name="getEndPoint" type="Point2D" line="255"/>
        </class>
    </source>