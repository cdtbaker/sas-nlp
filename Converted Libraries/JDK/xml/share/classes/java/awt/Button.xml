<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.ButtonPeer"/>
        <import package="java.util.EventListener"/>
        <import package="java.awt.event"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="Button" line="36">
            <extends class="Component"/>
            <comment line="112">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="350">
                REMIND: remove when filtering is done at lower level                
            </comment>
            <comment line="428">
                Serialization support.                
            </comment>
            <comment line="431">
                Button Serial Data Version.
                 @serial                
            </comment>
            <comment line="500">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="674">
                inner class AccessibleAWTButton                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="36">
                This class creates a labeled button. The application can cause
                  some action to happen when the button is pushed. This image
                  depicts three views of a &quot;&lt;code&gt;Quit&lt;/code&gt;&quot; button as it appears
                  under the Solaris operating system:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Button-1.gif&quot; alt=&quot;The following context describes the graphic&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  The first view shows the button as it appears normally.
                  The second view shows the button
                  when it has input focus. Its outline is darkened to let the
                  user know that it is an active object. The third view shows the
                  button when the user clicks the mouse over the button, and thus
                  requests that an action be performed.
                  &lt;p&gt;
                  The gesture of clicking on a button with the mouse
                  is associated with one instance of &lt;code&gt;ActionEvent&lt;/code&gt;,
                  which is sent out when the mouse is both pressed and released
                  over the button. If an application is interested in knowing
                  when the button has been pressed but not released, as a separate
                  gesture, it can specialize &lt;code&gt;processMouseEvent&lt;/code&gt;,
                  or it can register itself as a listener for mouse events by
                  calling &lt;code&gt;addMouseListener&lt;/code&gt;. Both of these methods are
                  defined by &lt;code&gt;Component&lt;/code&gt;, the abstract superclass of
                  all components.
                  &lt;p&gt;
                  When a button is pressed and released, AWT sends an instance
                  of &lt;code&gt;ActionEvent&lt;/code&gt; to the button, by calling
                  &lt;code&gt;processEvent&lt;/code&gt; on the button. The button&apos;s
                  &lt;code&gt;processEvent&lt;/code&gt; method receives all events
                  for the button; it passes an action event along by
                  calling its own &lt;code&gt;processActionEvent&lt;/code&gt; method.
                  The latter method passes the action event on to any action
                  listeners that have registered an interest in action
                  events generated by this button.
                  &lt;p&gt;
                  If an application wants to perform some action based on
                  a button being pressed and released, it should implement
                  &lt;code&gt;ActionListener&lt;/code&gt; and register the new listener
                  to receive events from this button, by calling the button&apos;s
                  &lt;code&gt;addActionListener&lt;/code&gt; method. The application can
                  make use of the button&apos;s action command as a messaging protocol.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    java.awt.Component#processMouseEvent                    
                </see>
                <see>
                    java.awt.Component#addMouseListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="label" type="String" line="89"/>
            <javadoc line="89">
                The button&apos;s label.  This value may be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getLabel()                    
                </see>
                <see>
                    #setLabel(String)                    
                </see>
            </javadoc>
            <declaration name="actionCommand" type="String" line="97"/>
            <javadoc line="97">
                The action to be performed once a button has been
                  pressed.  This value may be null.                
                <serial>
                                        
                </serial>
                <see>
                    #getActionCommand()                    
                </see>
                <see>
                    #setActionCommand(String)                    
                </see>
            </javadoc>
            <declaration name="actionListener" type="ActionListener" line="106"/>
            <declaration name="base" type="String" line="108"/>
            <declaration name="nameCounter" type="int" line="109"/>
            <declaration name="serialVersionUID" type="long" line="114"/>
            <scope line="117">
                <scope line="120"/>
            </scope>
            <method name="initIDs" type="void" line="125"/>
            <javadoc line="125">
                Initialize JNI field and method IDs for fields that may be
                  accessed from C.                
            </javadoc>
            <javadoc line="131">
                Constructs a button with an empty string for its label.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Button" type="constructor" line="138"/>
            <javadoc line="142">
                Constructs a button with the specified label.                
                <param>
                    label  a string label for the button, or
                      &lt;code&gt;null&lt;/code&gt; for no label                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="Button" type="constructor" line="151">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="156">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="160">
                <scope line="161"/>
            </method>
            <javadoc line="166">
                Creates the peer of the button.  The button&apos;s peer allows the
                  application to change the look of the button without changing
                  its functionality.                
                <see>
                    java.awt.Toolkit#createButton(java.awt.Button)                    
                </see>
                <see>
                    java.awt.Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="174">
                <scope line="175"/>
            </method>
            <javadoc line="182">
                Gets the label of this button.                
                <return>
                    the button&apos;s label, or &lt;code&gt;null&lt;/code&gt;
                      if the button has no label.                    
                </return>
                <see>
                    java.awt.Button#setLabel                    
                </see>
            </javadoc>
            <method name="getLabel" type="String" line="189"/>
            <javadoc line="193">
                Sets the button&apos;s label to be the specified string.                
                <param>
                    label   the new label, or &lt;code&gt;null&lt;/code&gt;
                      if the button has no label.                    
                </param>
                <see>
                    java.awt.Button#getLabel                    
                </see>
            </javadoc>
            <method name="setLabel" type="void" line="200">
                <params>
                    <param name="label" type="String"/>
                </params>
                <comment line="216">
                    This could change the preferred size of the Component.                    
                </comment>
                <declaration name="testvalid" type="boolean" line="201"/>
                <scope line="203">
                    <scope line="205">
                        <declaration name="peer" type="ButtonPeer" line="207"/>
                        <scope line="208"/>
                    </scope>
                </scope>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Sets the command name for the action event fired
                  by this button. By default this action command is
                  set to match the label of the button.                
                <param>
                    command  a string used to set the button&apos;s
                      action command.
                      If the string is &lt;code&gt;null&lt;/code&gt; then the action command
                      is set to match the label of the button.                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setActionCommand" type="void" line="233">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <javadoc line="237">
                Returns the command name of the action event fired by this button.
                  If the command name is &lt;code&gt;null&lt;/code&gt; (default) then this method
                  returns the label of the button.                
            </javadoc>
            <method name="getActionCommand" type="String" line="242"/>
            <javadoc line="246">
                Adds the specified action listener to receive action events from
                  this button. Action events occur when a user presses or releases
                  the mouse over this button.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener                    
                </param>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addActionListener" type="void" line="260">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="261"/>
            </method>
            <javadoc line="268">
                Removes the specified action listener so that it no longer
                  receives action events from this button. Action events occur
                  when a user presses or releases the mouse over this button.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l     the action listener                    
                </param>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeActionListener" type="void" line="282">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="283"/>
            </method>
            <javadoc line="289">
                Returns an array of all the action listeners
                  registered on this button.                
                <return>
                    all of this button&apos;s &lt;code&gt;ActionListener&lt;/code&gt;s
                      or an empty array if no action
                      listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="302"/>
            <javadoc line="306">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Button&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Button&lt;/code&gt; &lt;code&gt;b&lt;/code&gt;
                  for its action listeners with the following code:
                  &lt;pre&gt;ActionListener[] als = (ActionListener[])(b.getListeners(ActionListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this button,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getActionListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="339">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="340"/>
                <scope line="341"/>
                <scope line="343"/>
            </method>
            <method name="eventEnabled" type="boolean" line="350">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="351">
                    <scope line="353"/>
                </scope>
            </method>
            <javadoc line="361">
                Processes events on this button. If an event is
                  an instance of &lt;code&gt;ActionEvent&lt;/code&gt;, this method invokes
                  the &lt;code&gt;processActionEvent&lt;/code&gt; method. Otherwise,
                  it invokes &lt;code&gt;processEvent&lt;/code&gt; on the superclass.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.Button#processActionEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="375">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="376"/>
            </method>
            <javadoc line="383">
                Processes action events occurring on this button
                  by dispatching them to any registered
                  &lt;code&gt;ActionListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless action events are
                  enabled for this button. Action events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ActionListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addActionListener&lt;/code&gt;.
                  &lt;li&gt;Action events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the action event                    
                </param>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    java.awt.Button#addActionListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processActionEvent" type="void" line="406">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listener" type="ActionListener" line="407"/>
                <scope line="408"/>
            </method>
            <javadoc line="413">
                Returns a string representing the state of this &lt;code&gt;Button&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this button                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="422"/>
            <declaration name="buttonSerializedDataVersion" type="int" line="434"/>
            <javadoc line="436">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ActionListeners&lt;/code&gt;
                  as optional data.  The non-serializable
                  &lt;code&gt;ActionListeners&lt;/code&gt; are detected and
                  no attempt is made to serialize them.                
                <serialData>
                    &lt;code&gt;null&lt;/code&gt; terminated sequence of 0 or
                      more pairs: the pair consists of a &lt;code&gt;String&lt;/code&gt;
                      and an &lt;code&gt;Object&lt;/code&gt;; the &lt;code&gt;String&lt;/code&gt;
                      indicates the type of object and is one of the following:
                      &lt;code&gt;actionListenerK&lt;/code&gt; indicating an
                      &lt;code&gt;ActionListener&lt;/code&gt; object                    
                </serialData>
                <param>
                    s the &lt;code&gt;ObjectOutputStream&lt;/code&gt; to write                    
                </param>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#actionListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="457">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="464">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if
                  it isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to
                  receive action events fired by the button.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the &lt;code&gt;ObjectInputStream&lt;/code&gt; to read                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <serial>
                                        
                </serial>
                <see>
                    #removeActionListener(ActionListener)                    
                </see>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="482">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="494">
                    skip value for unrecognized key                    
                </comment>
                <declaration name="keyOrNull" type="Object" line="486"/>
                <scope line="487">
                    <declaration name="key" type="String" line="488"/>
                </scope>
            </method>
            <javadoc line="503">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with
                  this &lt;code&gt;Button&lt;/code&gt;. For buttons, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleAWTButton&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleAWTButton&lt;/code&gt; instance is
                  created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleAWTButton&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;Button&lt;/code&gt;                    
                </return>
                <beaninfo>
                    expert: true
                      description: The AccessibleContext associated with this Button.                    
                </beaninfo>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="518">
                <scope line="519"/>
            </method>
            <class name="AccessibleAWTButton" line="525">
                <extends class="AccessibleAWTComponent"/>
                <comment line="535">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="525">
                    This class implements accessibility support for the
                      &lt;code&gt;Button&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to button user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="537"/>
                <javadoc line="539">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                </javadoc>
                <method name="getAccessibleName" type="String" line="545">
                    <scope line="546"/>
                    <scope line="548">
                        <scope line="549"/>
                        <scope line="551"/>
                    </scope>
                </method>
                <javadoc line="557">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="565"/>
                <javadoc line="569">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="577"/>
                <javadoc line="581">
                    Returns the number of Actions available in this object.  The
                      default behavior of a button is to have one action - toggle
                      the button.                    
                    <return>
                        1, the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="588"/>
                <javadoc line="592">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="597">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="600">
                        [[[PENDING:  WDW -- need to provide a localized string]]]                        
                    </comment>
                    <scope line="598"/>
                    <scope line="601"/>
                </method>
                <javadoc line="606">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the the action was performed; else false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="612">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="615">
                        Simulate a button click                        
                    </comment>
                    <scope line="613"/>
                    <scope line="620"/>
                </method>
                <javadoc line="625">
                    Get the value of this object as a Number.                    
                    <return>
                        An Integer of 0 if this isn&apos;t selected or an Integer of 1 if
                          this is selected.                        
                    </return>
                    <see>
                        javax.swing.AbstractButton#isSelected()                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="632"/>
                <javadoc line="636">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="641">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                </method>
                <javadoc line="645">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        An Integer of 0.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="650"/>
                <javadoc line="654">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        An Integer of 0.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="659"/>
                <javadoc line="663">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="670"/>
            </class>
        </class>
    </source>