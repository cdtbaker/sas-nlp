<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="sun.awt.geom.Curve"/>
        <import package="sun.awt.geom.Crossings"/>
        <import package="sun.awt.geom.AreaOp"/>
        <class name="Area" line="10">
            <implements interface="Shape"/>
            <implements interface="Cloneable"/>
            <javadoc line="10">
                An &lt;code&gt;Area&lt;/code&gt; object stores and manipulates a
                  resolution-independent description of an enclosed area of
                  2-dimensional space.
                  &lt;code&gt;Area&lt;/code&gt; objects can be transformed and can perform
                  various Constructive Area Geometry (CAG) operations when combined
                  with other &lt;code&gt;Area&lt;/code&gt; objects.
                  The CAG operations include area{@link #add addition}, {@link #subtract subtraction},{@link #intersect intersection}, and {@link #exclusiveOr exclusive or}.
                  See the linked method documentation for examples of the various
                  operations.
                  &lt;p&gt;
                  The &lt;code&gt;Area&lt;/code&gt; class implements the &lt;code&gt;Shape&lt;/code&gt;
                  interface and provides full support for all of its hit-testing
                  and path iteration facilities, but an &lt;code&gt;Area&lt;/code&gt; is more
                  specific than a generalized path in a number of ways:
                  &lt;ul&gt;
                  &lt;li&gt;Only closed paths and sub-paths are stored.
                  &lt;code&gt;Area&lt;/code&gt; objects constructed from unclosed paths
                  are implicitly closed during construction as if those paths
                  had been filled by the &lt;code&gt;Graphics2D.fill&lt;/code&gt; method.
                  &lt;li&gt;The interiors of the individual stored sub-paths are all
                  non-empty and non-overlapping.  Paths are decomposed during
                  construction into separate component non-overlapping parts,
                  empty pieces of the path are discarded, and then these
                  non-empty and non-overlapping properties are maintained
                  through all subsequent CAG operations.  Outlines of different
                  component sub-paths may touch each other, as long as they
                  do not cross so that their enclosed areas overlap.
                  &lt;li&gt;The geometry of the path describing the outline of the
                  &lt;code&gt;Area&lt;/code&gt; resembles the path from which it was
                  constructed only in that it describes the same enclosed
                  2-dimensional area, but may use entirely different types
                  and ordering of the path segments to do so.
                  &lt;/ul&gt;
                  Interesting issues which are not always obvious when using
                  the &lt;code&gt;Area&lt;/code&gt; include:
                  &lt;ul&gt;
                  &lt;li&gt;Creating an &lt;code&gt;Area&lt;/code&gt; from an unclosed (open)
                  &lt;code&gt;Shape&lt;/code&gt; results in a closed outline in the
                  &lt;code&gt;Area&lt;/code&gt; object.
                  &lt;li&gt;Creating an &lt;code&gt;Area&lt;/code&gt; from a &lt;code&gt;Shape&lt;/code&gt;
                  which encloses no area (even when &quot;closed&quot;) produces an
                  empty &lt;code&gt;Area&lt;/code&gt;.  A common example of this issue
                  is that producing an &lt;code&gt;Area&lt;/code&gt; from a line will
                  be empty since the line encloses no area.  An empty
                  &lt;code&gt;Area&lt;/code&gt; will iterate no geometry in its
                  &lt;code&gt;PathIterator&lt;/code&gt; objects.
                  &lt;li&gt;A self-intersecting &lt;code&gt;Shape&lt;/code&gt; may be split into
                  two (or more) sub-paths each enclosing one of the
                  non-intersecting portions of the original path.
                  &lt;li&gt;An &lt;code&gt;Area&lt;/code&gt; may take more path segments to
                  describe the same geometry even when the original
                  outline is simple and obvious.  The analysis that the
                  &lt;code&gt;Area&lt;/code&gt; class must perform on the path may
                  not reflect the same concepts of &quot;simple and obvious&quot;
                  as a human being perceives.
                  &lt;/ul&gt;                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="EmptyCurves" type="Vector" line="70"/>
            <declaration name="curves" type="Vector" line="71"/>
            <javadoc line="72">
                Default constructor which creates an empty area.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Area" type="constructor" line="76"/>
            <javadoc line="79">
                The &lt;code&gt;Area&lt;/code&gt; class creates an area geometry from the
                  specified {@link Shape} object.  The geometry is explicitly
                  closed, if the &lt;code&gt;Shape&lt;/code&gt; is not already closed.  The
                  fill rule (even-odd or winding) specified by the geometry of the
                  &lt;code&gt;Shape&lt;/code&gt; is used to determine the resulting enclosed area.                
                <param>
                    s  the <code>Shape</code> from which the area is constructed                    
                </param>
                <throws>
                    NullPointerException if <code>s</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Area" type="constructor" line="89">
                <params>
                    <param name="s" type="Shape"/>
                </params>
                <scope line="90"/>
                <scope line="93"/>
            </method>
            <method name="pathToCurves" type="Vector" line="97">
                <params>
                    <param name="pi" type="PathIterator"/>
                </params>
                <declaration name="curves" type="Vector" line="98"/>
                <declaration name="windingRule" type="int" line="99"/>
                <declaration name="coords" type="double" line="100"/>
                <declaration name="movx" type="double" line="101"/>
                <declaration name="curx" type="double" line="102"/>
                <declaration name="newx" type="double" line="103"/>
                <scope line="104"/>
                <declaration name="operator" type="AreaOp" line="142"/>
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Adds the shape of the specified &lt;code&gt;Area&lt;/code&gt; to the
                  shape of this &lt;code&gt;Area&lt;/code&gt;.
                  The resulting shape of this &lt;code&gt;Area&lt;/code&gt; will include
                  the union of both shapes, or all areas that were contained
                  in either this or the specified &lt;code&gt;Area&lt;/code&gt;.
                  &lt;pre&gt;
                  // Example:
                  Area a1 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 0,8]);
                  Area a2 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 8,8]);
                  a1.add(a2);
                  a1(before)     +         a2         =     a1(after)
                  ################     ################     ################
                  ##############         ##############     ################
                  ############             ############     ################
                  ##########                 ##########     ################
                  ########                     ########     ################
                  ######                         ######     ######    ######
                  ####                             ####     ####        ####
                  ##                                 ##     ##            ##
                  &lt;/pre&gt;                
                <param>
                    rhs  the <code>Area</code> to be added to the
                      current shape                    
                </param>
                <throws>
                    NullPointerException if <code>rhs</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="add" type="void" line="177">
                <params>
                    <param name="rhs" type="Area"/>
                </params>
            </method>
            <javadoc line="181">
                Subtracts the shape of the specified &lt;code&gt;Area&lt;/code&gt; from the
                  shape of this &lt;code&gt;Area&lt;/code&gt;.
                  The resulting shape of this &lt;code&gt;Area&lt;/code&gt; will include
                  areas that were contained only in this &lt;code&gt;Area&lt;/code&gt;
                  and not in the specified &lt;code&gt;Area&lt;/code&gt;.
                  &lt;pre&gt;
                  // Example:
                  Area a1 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 0,8]);
                  Area a2 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 8,8]);
                  a1.subtract(a2);
                  a1(before)     -         a2         =     a1(after)
                  ################     ################
                  ##############         ##############     ##
                  ############             ############     ####
                  ##########                 ##########     ######
                  ########                     ########     ########
                  ######                         ######     ######
                  ####                             ####     ####
                  ##                                 ##     ##
                  &lt;/pre&gt;                
                <param>
                    rhs  the <code>Area</code> to be subtracted from the
                      current shape                    
                </param>
                <throws>
                    NullPointerException if <code>rhs</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subtract" type="void" line="207">
                <params>
                    <param name="rhs" type="Area"/>
                </params>
            </method>
            <javadoc line="211">
                Sets the shape of this &lt;code&gt;Area&lt;/code&gt; to the intersection of
                  its current shape and the shape of the specified &lt;code&gt;Area&lt;/code&gt;.
                  The resulting shape of this &lt;code&gt;Area&lt;/code&gt; will include
                  only areas that were contained in both this &lt;code&gt;Area&lt;/code&gt;
                  and also in the specified &lt;code&gt;Area&lt;/code&gt;.
                  &lt;pre&gt;
                  // Example:
                  Area a1 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 0,8]);
                  Area a2 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 8,8]);
                  a1.intersect(a2);
                  a1(before)   intersect     a2         =     a1(after)
                  ################     ################     ################
                  ##############         ##############       ############
                  ############             ############         ########
                  ##########                 ##########           ####
                  ########                     ########
                  ######                         ######
                  ####                             ####
                  ##                                 ##
                  &lt;/pre&gt;                
                <param>
                    rhs  the <code>Area</code> to be intersected with this
                      <code>Area</code>                    
                </param>
                <throws>
                    NullPointerException if <code>rhs</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersect" type="void" line="237">
                <params>
                    <param name="rhs" type="Area"/>
                </params>
            </method>
            <javadoc line="241">
                Sets the shape of this &lt;code&gt;Area&lt;/code&gt; to be the combined area
                  of its current shape and the shape of the specified &lt;code&gt;Area&lt;/code&gt;,
                  minus their intersection.
                  The resulting shape of this &lt;code&gt;Area&lt;/code&gt; will include
                  only areas that were contained in either this &lt;code&gt;Area&lt;/code&gt;
                  or in the specified &lt;code&gt;Area&lt;/code&gt;, but not in both.
                  &lt;pre&gt;
                  // Example:
                  Area a1 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 0,8]);
                  Area a2 = new Area([triangle 0,0 =&amp;gt; 8,0 =&amp;gt; 8,8]);
                  a1.exclusiveOr(a2);
                  a1(before)    xor        a2         =     a1(after)
                  ################     ################
                  ##############         ##############     ##            ##
                  ############             ############     ####        ####
                  ##########                 ##########     ######    ######
                  ########                     ########     ################
                  ######                         ######     ######    ######
                  ####                             ####     ####        ####
                  ##                                 ##     ##            ##
                  &lt;/pre&gt;                
                <param>
                    rhs  the <code>Area</code> to be exclusive ORed with this
                      <code>Area</code>.                    
                </param>
                <throws>
                    NullPointerException if <code>rhs</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="exclusiveOr" type="void" line="268">
                <params>
                    <param name="rhs" type="Area"/>
                </params>
            </method>
            <javadoc line="272">
                Removes all of the geometry from this &lt;code&gt;Area&lt;/code&gt; and
                  restores it to an empty area.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="reset" type="void" line="277"/>
            <javadoc line="281">
                Tests whether this &lt;code&gt;Area&lt;/code&gt; object encloses any area.                
                <return>
                    <code>true</code> if this <code>Area</code> object
                      represents an empty area; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isEmpty" type="boolean" line="287"/>
            <javadoc line="290">
                Tests whether this &lt;code&gt;Area&lt;/code&gt; consists entirely of
                  straight edged polygonal geometry.                
                <return>
                    <code>true</code> if the geometry of this
                      <code>Area</code> consists entirely of line segments;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isPolygonal" type="boolean" line="298">
                <declaration name="enum_" type="Enumeration" line="299"/>
                <scope line="300">
                    <scope line="301"/>
                </scope>
            </method>
            <javadoc line="307">
                Tests whether this &lt;code&gt;Area&lt;/code&gt; is rectangular in shape.                
                <return>
                    <code>true</code> if the geometry of this
                      <code>Area</code> is rectangular in shape; <code>false</code>
                      otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isRectangular" type="boolean" line="314">
                <declaration name="size" type="int" line="315"/>
                <scope line="316"/>
                <scope line="319"/>
                <declaration name="c1" type="Curve" line="322"/>
                <declaration name="c2" type="Curve" line="323"/>
                <scope line="324"/>
                <scope line="327"/>
                <scope line="330"/>
            </method>
            <javadoc line="335">
                Tests whether this &lt;code&gt;Area&lt;/code&gt; is comprised of a single
                  closed subpath.  This method returns &lt;code&gt;true&lt;/code&gt; if the
                  path contains 0 or 1 subpaths, or &lt;code&gt;false&lt;/code&gt; if the path
                  contains more than 1 subpath.  The subpaths are counted by the
                  number of {@link PathIterator#SEG_MOVETO SEG_MOVETO}  segments
                  that appear in the path.                
                <return>
                    <code>true</code> if the <code>Area</code> is comprised
                      of a single basic geometry; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isSingular" type="boolean" line="346">
                <scope line="347"/>
                <declaration name="enum_" type="Enumeration" line="350"/>
                <scope line="352">
                    <scope line="353"/>
                </scope>
            </method>
            <declaration name="cachedBounds" type="Rectangle2D" line="359"/>
            <method name="invalidateBounds" type="void" line="360"/>
            <method name="getCachedBounds" type="Rectangle2D" line="363">
                <scope line="364"/>
                <declaration name="r" type="Rectangle2D" line="367"/>
                <scope line="368">
                    <declaration name="c" type="Curve" line="369"/>
                    <scope line="371"/>
                </scope>
            </method>
            <javadoc line="377">
                Returns a high precision bounding {@link Rectangle2D} that
                  completely encloses this &lt;code&gt;Area&lt;/code&gt;.
                  &lt;p&gt;
                  The Area class will attempt to return the tightest bounding
                  box possible for the Shape.  The bounding box will not be
                  padded to include the control points of curves in the outline
                  of the Shape, but should tightly fit the actual geometry of
                  the outline itself.                
                <return>
                    the bounding <code>Rectangle2D</code> for the
                      <code>Area</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="390"/>
            <javadoc line="393">
                Returns a bounding {@link Rectangle} that completely encloses
                  this &lt;code&gt;Area&lt;/code&gt;.
                  &lt;p&gt;
                  The Area class will attempt to return the tightest bounding
                  box possible for the Shape.  The bounding box will not be
                  padded to include the control points of curves in the outline
                  of the Shape, but should tightly fit the actual geometry of
                  the outline itself.  Since the returned object represents
                  the bounding box with integers, the bounding box can only be
                  as tight as the nearest integer coordinates that encompass
                  the geometry of the Shape.                
                <return>
                    the bounding <code>Rectangle</code> for the
                      <code>Area</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="409"/>
            <javadoc line="412">
                Returns an exact copy of this &lt;code&gt;Area&lt;/code&gt; object.                
                <return>
                    Created clone object                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="417"/>
            <javadoc line="420">
                Tests whether the geometries of the two &lt;code&gt;Area&lt;/code&gt; objects
                  are equal.
                  This method will return false if the argument is null.                
                <param>
                    other  the <code>Area</code> to be compared to this
                      <code>Area</code>                    
                </param>
                <return>
                    <code>true</code> if the two geometries are equal;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="430">
                <params>
                    <param name="other" type="Area"/>
                </params>
                <scope line="431"/>
                <scope line="434"/>
                <declaration name="c" type="Vector" line="437"/>
            </method>
            <javadoc line="440">
                Transforms the geometry of this &lt;code&gt;Area&lt;/code&gt; using the specified{@link AffineTransform}.  The geometry is transformed in place, which
                  permanently changes the enclosed area defined by this object.                
                <param>
                    t  the transformation used to transform the area                    
                </param>
                <throws>
                    NullPointerException if <code>t</code> is null                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="447">
                <params>
                    <param name="t" type="AffineTransform"/>
                </params>
                <scope line="448"/>
            </method>
            <javadoc line="454">
                Creates a new &lt;code&gt;Area&lt;/code&gt; object that contains the same
                  geometry as this &lt;code&gt;Area&lt;/code&gt; transformed by the specified
                  &lt;code&gt;AffineTransform&lt;/code&gt;.  This &lt;code&gt;Area&lt;/code&gt; object
                  is unchanged.                
                <param>
                    t  the specified <code>AffineTransform</code> used to transform
                      the new <code>Area</code>                    
                </param>
                <throws>
                    NullPointerException if <code>t</code> is null                    
                </throws>
                <return>
                    a new <code>Area</code> object representing the transformed
                      geometry.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createTransformedArea" type="Area" line="466">
                <params>
                    <param name="t" type="AffineTransform"/>
                </params>
                <declaration name="a" type="Area" line="467"/>
            </method>
            <javadoc line="471">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="475">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="476"/>
                <declaration name="enum_" type="Enumeration" line="479"/>
                <declaration name="crossings" type="int" line="480"/>
                <scope line="481">
                    <declaration name="c" type="Curve" line="482"/>
                </scope>
            </method>
            <javadoc line="487">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="491">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="494">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="498">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="499"/>
                <scope line="502"/>
                <declaration name="c" type="Crossings" line="505"/>
            </method>
            <javadoc line="508">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="512">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="515">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="519">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="520"/>
                <scope line="523"/>
                <declaration name="c" type="Crossings" line="526"/>
            </method>
            <javadoc line="529">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="533">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="536">
                Creates a {@link PathIterator} for the outline of this
                  &lt;code&gt;Area&lt;/code&gt; object.  This &lt;code&gt;Area&lt;/code&gt; object is unchanged.                
                <param>
                    at an optional <code>AffineTransform</code> to be applied to
                      the coordinates as they are returned in the iteration, or
                      <code>null</code> if untransformed coordinates are desired                    
                </param>
                <return>
                    the <code>PathIterator</code> object that returns the
                      geometry of the outline of this <code>Area</code>, one
                      segment at a time.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="547">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="550">
                Creates a &lt;code&gt;PathIterator&lt;/code&gt; for the flattened outline of
                  this &lt;code&gt;Area&lt;/code&gt; object.  Only uncurved path segments
                  represented by the SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point
                  types are returned by the iterator.  This &lt;code&gt;Area&lt;/code&gt;
                  object is unchanged.                
                <param>
                    at an optional <code>AffineTransform</code> to be
                      applied to the coordinates as they are returned in the
                      iteration, or <code>null</code> if untransformed coordinates
                      are desired                    
                </param>
                <param>
                    flatness the maximum amount that the control points
                      for a given curve can vary from colinear before a subdivided
                      curve is replaced by a straight line connecting the end points                    
                </param>
                <return>
                    the <code>PathIterator</code> object that returns the
                      geometry of the outline of this <code>Area</code>, one segment
                      at a time.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="568">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
        </class>
        <class name="AreaIterator" line="572">
            <implements interface="PathIterator"/>
            <declaration name="transform" type="AffineTransform" line="573"/>
            <declaration name="curves" type="Vector" line="574"/>
            <declaration name="index" type="int" line="575"/>
            <declaration name="prevcurve" type="Curve" line="576"/>
            <declaration name="thiscurve" type="Curve" line="577"/>
            <method name="AreaIterator" type="constructor" line="578">
                <params>
                    <param name="curves" type="Vector"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <scope line="581"/>
            </method>
            <method name="getWindingRule" type="int" line="585"/>
            <method name="isDone" type="boolean" line="588"/>
            <method name="next" type="void" line="591">
                <scope line="592"/>
                <scope line="595">
                    <scope line="598">
                        <scope line="600"/>
                    </scope>
                    <scope line="604"/>
                </scope>
            </method>
            <method name="currentSegment" type="int" line="609">
                <params>
                    <param name="coords" type="float"/>
                </params>
                <declaration name="dcoords" type="double" line="610"/>
                <declaration name="segtype" type="int" line="611"/>
                <declaration name="numpoints" type="int" line="612"/>
                <scope line="613"/>
            </method>
            <method name="currentSegment" type="int" line="618">
                <params>
                    <param name="coords" type="double"/>
                </params>
                <declaration name="segtype" type="int" line="619"/>
                <declaration name="numpoints" type="int" line="620"/>
                <scope line="621">
                    <scope line="622"/>
                </scope>
                <scope line="630"/>
                <scope line="633">
                    <scope line="636"/>
                </scope>
                <scope line="640"/>
            </method>
        </class>
    </source>