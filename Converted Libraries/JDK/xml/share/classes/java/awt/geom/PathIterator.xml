<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <interface name="PathIterator">
            <javadoc line="2">
                The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism
                  for objects that implement the {@link java.awt.Shape Shape}interface to return the geometry of their boundary by allowing
                  a caller to retrieve the path of that boundary a segment at a
                  time.  This interface allows these objects to retrieve the path of
                  their boundary a segment at a time by using 1st through 3rd order
                  B&amp;eacute;zier curves, which are lines and quadratic or cubic
                  B&amp;eacute;zier splines.
                  &lt;p&gt;
                  Multiple subpaths can be expressed by using a &quot;MOVETO&quot; segment to
                  create a discontinuity in the geometry to move from the end of
                  one subpath to the beginning of the next.
                  &lt;p&gt;
                  Each subpath can be closed manually by ending the last segment in
                  the subpath on the same coordinate as the beginning &quot;MOVETO&quot; segment
                  for that subpath or by using a &quot;CLOSE&quot; segment to append a line
                  segment from the last point back to the first.
                  Be aware that manually closing an outline as opposed to using a
                  &quot;CLOSE&quot; segment to close the path might result in different line
                  style decorations being used at the end points of the subpath.
                  For example, the {@link java.awt.BasicStroke BasicStroke} object
                  uses a line &quot;JOIN&quot; decoration to connect the first and last points
                  if a &quot;CLOSE&quot; segment is encountered, whereas simply ending the path
                  on the same coordinate as the beginning coordinate results in line
                  &quot;CAP&quot; decorations being used at the ends.                
                <see>
                    java.awt.Shape                    
                </see>
                <see>
                    java.awt.BasicStroke                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="WIND_EVEN_ODD" type="int" line="32"/>
            <javadoc line="32">
                The winding rule constant for specifying an even-odd rule
                  for determining the interior of a path.
                  The even-odd rule specifies that a point lies inside the
                  path if a ray drawn in any direction from that point to
                  infinity is crossed by path segments an odd number of times.                
            </javadoc>
            <declaration name="WIND_NON_ZERO" type="int" line="40"/>
            <javadoc line="40">
                The winding rule constant for specifying a non-zero rule
                  for determining the interior of a path.
                  The non-zero rule specifies that a point lies inside the
                  path if a ray drawn in any direction from that point to
                  infinity is crossed by path segments a different number
                  of times in the counter-clockwise direction than the
                  clockwise direction.                
            </javadoc>
            <declaration name="SEG_MOVETO" type="int" line="50"/>
            <javadoc line="50">
                The segment type constant for a point that specifies the
                  starting location for a new subpath.                
            </javadoc>
            <declaration name="SEG_LINETO" type="int" line="55"/>
            <javadoc line="55">
                The segment type constant for a point that specifies the
                  end point of a line to be drawn from the most recently
                  specified point.                
            </javadoc>
            <declaration name="SEG_QUADTO" type="int" line="61"/>
            <javadoc line="61">
                The segment type constant for the pair of points that specify
                  a quadratic parametric curve to be drawn from the most recently
                  specified point.
                  The curve is interpolated by solving the parametric control
                  equation in the range &lt;code&gt;(t=[0..1])&lt;/code&gt; using
                  the most recently specified (current) point (CP),
                  the first control point (P1),
                  and the final interpolated control point (P2).
                  The parametric control equation for this curve is:
                  &lt;pre&gt;
                  P(t) = B(2,0)CP + B(2,1)P1 + B(2,2)P2
                  0 &amp;lt;= t &amp;lt;= 1
                  B(n,m) = mth coefficient of nth degree Bernstein polynomial
                  = C(n,m)  t^(m)  (1 - t)^(n-m)
                  C(n,m) = Combinations of n things, taken m at a time
                  = n! / (m!  (n-m)!)
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="SEG_CUBICTO" type="int" line="81"/>
            <javadoc line="81">
                The segment type constant for the set of 3 points that specify
                  a cubic parametric curve to be drawn from the most recently
                  specified point.
                  The curve is interpolated by solving the parametric control
                  equation in the range &lt;code&gt;(t=[0..1])&lt;/code&gt; using
                  the most recently specified (current) point (CP),
                  the first control point (P1),
                  the second control point (P2),
                  and the final interpolated control point (P3).
                  The parametric control equation for this curve is:
                  &lt;pre&gt;
                  P(t) = B(3,0)CP + B(3,1)P1 + B(3,2)P2 + B(3,3)P3
                  0 &amp;lt;= t &amp;lt;= 1
                  B(n,m) = mth coefficient of nth degree Bernstein polynomial
                  = C(n,m)  t^(m)  (1 - t)^(n-m)
                  C(n,m) = Combinations of n things, taken m at a time
                  = n! / (m!  (n-m)!)
                  &lt;/pre&gt;
                  This form of curve is commonly known as a B&amp;eacute;zier curve.                
            </javadoc>
            <declaration name="SEG_CLOSE" type="int" line="103"/>
            <javadoc line="103">
                The segment type constant that specifies that
                  the preceding subpath should be closed by appending a line segment
                  back to the point corresponding to the most recent SEG_MOVETO.                
            </javadoc>
            <method name="getWindingRule" type="int" line="109"/>
            <javadoc line="109">
                Returns the winding rule for determining the interior of the
                  path.                
                <return>
                    the winding rule.                    
                </return>
                <see>
                    #WIND_EVEN_ODD                    
                </see>
                <see>
                    #WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="isDone" type="boolean" line="117"/>
            <javadoc line="117">
                Tests if the iteration is complete.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if all the segments have
                      been read; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="next" type="void" line="123"/>
            <javadoc line="123">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="currentSegment" type="int" line="129"/>
            <javadoc line="129">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path-segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types returns one point,
                  SEG_QUADTO returns two points,
                  SEG_CUBICTO returns 3 points
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path-segment type of the current path segment.                    
                </return>
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="151"/>
            <javadoc line="151">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path-segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types returns one point,
                  SEG_QUADTO returns two points,
                  SEG_CUBICTO returns 3 points
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path-segment type of the current path segment.                    
                </return>
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
        </interface>
    </source>