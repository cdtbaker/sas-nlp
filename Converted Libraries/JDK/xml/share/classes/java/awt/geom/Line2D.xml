<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.io.Serializable"/>
        <class name="Line2D" line="5">
            <implements interface="Shape"/>
            <implements interface="Cloneable"/>
            <javadoc line="5">
                This &lt;code&gt;Line2D&lt;/code&gt; represents a line segment in {@code (x,y)}coordinate space.  This class, like all of the Java 2D API, uses a
                  default coordinate system called &lt;i&gt;user space&lt;/i&gt; in which the y-axis
                  values increase downward and x-axis values increase to the right.  For
                  more information on the user space coordinate system, see the
                  &lt;a href=&quot;http://java.sun.com/j2se/1.3/docs/guide/2d/spec/j2d-intro.fm2.html#61857&quot;&gt;
                  Coordinate Systems&lt;/a&gt; section of the Java 2D Programmer&apos;s Guide.
                  &lt;p&gt;
                  This class is only the abstract superclass for all objects that
                  store a 2D line segment.
                  The actual storage representation of the coordinates is left to
                  the subclass.                
                <author>
                    Jim Graham                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="Float" line="21">
                <extends class="Line2D"/>
                <implements interface="Serializable"/>
                <javadoc line="21">
                    A line segment specified with float coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="float" line="26"/>
                <javadoc line="26">
                    The X coordinate of the start point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="float" line="32"/>
                <javadoc line="32">
                    The Y coordinate of the start point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="float" line="38"/>
                <javadoc line="38">
                    The X coordinate of the end point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="float" line="44"/>
                <javadoc line="44">
                    The Y coordinate of the end point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="50">
                    Constructs and initializes a Line with coordinates (0, 0) -&gt; (0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="54"/>
                <javadoc line="56">
                    Constructs and initializes a Line from the specified coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="64">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="67">
                    Constructs and initializes a &lt;code&gt;Line2D&lt;/code&gt; from the
                      specified &lt;code&gt;Point2D&lt;/code&gt; objects.                    
                    <param>
                        p1 the start <code>Point2D</code> of this line segment                        
                    </param>
                    <param>
                        p2 the end <code>Point2D</code> of this line segment                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="74">
                    <params>
                        <param name="p1" type="Point2D"/>
                        <param name="p2" type="Point2D"/>
                    </params>
                </method>
                <javadoc line="77">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="81"/>
                <javadoc line="84">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="88"/>
                <javadoc line="91">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="95"/>
                <javadoc line="98">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="102"/>
                <javadoc line="105">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="109"/>
                <javadoc line="112">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="116"/>
                <javadoc line="119">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setLine" type="void" line="123">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="129">
                    Sets the location of the end points of this &lt;code&gt;Line2D&lt;/code&gt;
                      to the specified float coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setLine" type="void" line="138">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="144">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="148">
                    <declaration name="x" type="float" line="149"/>
                    <scope line="150"/>
                    <scope line="154"/>
                    <scope line="158"/>
                    <scope line="162"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="168"/>
            </class>
            <class name="Double" line="170">
                <extends class="Line2D"/>
                <implements interface="Serializable"/>
                <javadoc line="170">
                    A line segment specified with double coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="double" line="175"/>
                <javadoc line="175">
                    The X coordinate of the start point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="double" line="181"/>
                <javadoc line="181">
                    The Y coordinate of the start point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="double" line="187"/>
                <javadoc line="187">
                    The X coordinate of the end point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="double" line="193"/>
                <javadoc line="193">
                    The Y coordinate of the end point of the line segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="199">
                    Constructs and initializes a Line with coordinates (0, 0) -&gt; (0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="203"/>
                <javadoc line="205">
                    Constructs and initializes a &lt;code&gt;Line2D&lt;/code&gt; from the
                      specified coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="214">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="217">
                    Constructs and initializes a &lt;code&gt;Line2D&lt;/code&gt; from the
                      specified &lt;code&gt;Point2D&lt;/code&gt; objects.                    
                    <param>
                        p1 the start <code>Point2D</code> of this line segment                        
                    </param>
                    <param>
                        p2 the end <code>Point2D</code> of this line segment                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="224">
                    <params>
                        <param name="p1" type="Point2D"/>
                        <param name="p2" type="Point2D"/>
                    </params>
                </method>
                <javadoc line="227">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="231"/>
                <javadoc line="234">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="238"/>
                <javadoc line="241">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="245"/>
                <javadoc line="248">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="252"/>
                <javadoc line="255">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="259"/>
                <javadoc line="262">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="266"/>
                <javadoc line="269">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setLine" type="void" line="273">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="279">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="283">
                    <declaration name="x" type="double" line="284"/>
                    <scope line="285"/>
                    <scope line="289"/>
                    <scope line="293"/>
                    <scope line="297"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="303"/>
            </class>
            <javadoc line="305">
                This is an abstract class that cannot be instantiated directly.
                  Type-specific implementation subclasses are available for
                  instantiation and provide a number of formats for storing
                  the information necessary to satisfy the various accessory
                  methods below.                
                <see>
                    java.awt.geom.Line2D.Float                    
                </see>
                <see>
                    java.awt.geom.Line2D.Double                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="Line2D" type="constructor" line="315"/>
            <method name="getX1" type="double" line="317"/>
            <javadoc line="317">
                Returns the X coordinate of the start point in double precision.                
                <return>
                    the X coordinate of the start point of this{@code Line2D} object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY1" type="double" line="323"/>
            <javadoc line="323">
                Returns the Y coordinate of the start point in double precision.                
                <return>
                    the Y coordinate of the start point of this{@code Line2D} object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP1" type="Point2D" line="329"/>
            <javadoc line="329">
                Returns the start &lt;code&gt;Point2D&lt;/code&gt; of this &lt;code&gt;Line2D&lt;/code&gt;.                
                <return>
                    the start <code>Point2D</code> of this <code>Line2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getX2" type="double" line="335"/>
            <javadoc line="335">
                Returns the X coordinate of the end point in double precision.                
                <return>
                    the X coordinate of the end point of this{@code Line2D} object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY2" type="double" line="341"/>
            <javadoc line="341">
                Returns the Y coordinate of the end point in double precision.                
                <return>
                    the Y coordinate of the end point of this{@code Line2D} object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP2" type="Point2D" line="347"/>
            <javadoc line="347">
                Returns the end &lt;code&gt;Point2D&lt;/code&gt; of this &lt;code&gt;Line2D&lt;/code&gt;.                
                <return>
                    the end <code>Point2D</code> of this <code>Line2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setLine" type="void" line="353"/>
            <javadoc line="353">
                Sets the location of the end points of this &lt;code&gt;Line2D&lt;/code&gt; to
                  the specified double coordinates.                
                <param>
                    x1 the X coordinate of the start point                    
                </param>
                <param>
                    y1 the Y coordinate of the start point                    
                </param>
                <param>
                    x2 the X coordinate of the end point                    
                </param>
                <param>
                    y2 the Y coordinate of the end point                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="363">
                Sets the location of the end points of this &lt;code&gt;Line2D&lt;/code&gt; to
                  the specified &lt;code&gt;Point2D&lt;/code&gt; coordinates.                
                <param>
                    p1 the start <code>Point2D</code> of the line segment                    
                </param>
                <param>
                    p2 the end <code>Point2D</code> of the line segment                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setLine" type="void" line="370">
                <params>
                    <param name="p1" type="Point2D"/>
                    <param name="p2" type="Point2D"/>
                </params>
            </method>
            <javadoc line="373">
                Sets the location of the end points of this &lt;code&gt;Line2D&lt;/code&gt; to
                  the same as those end points of the specified &lt;code&gt;Line2D&lt;/code&gt;.                
                <param>
                    l the specified <code>Line2D</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setLine" type="void" line="379">
                <params>
                    <param name="l" type="Line2D"/>
                </params>
            </method>
            <javadoc line="382">
                Returns an indicator of where the specified point{@code (px,py)} lies with respect to the line segment from{@code (x1,y1)} to {@code (x2,y2)}.
                  The return value can be either 1, -1, or 0 and indicates
                  in which direction the specified line must pivot around its
                  first end point, {@code (x1,y1)}, in order to point at the
                  specified point {@code (px,py)}.
                  &lt;p&gt;A return value of 1 indicates that the line segment must
                  turn in the direction that takes the positive X axis towards
                  the negative Y axis.  In the default coordinate system used by
                  Java 2D, this direction is counterclockwise.
                  &lt;p&gt;A return value of -1 indicates that the line segment must
                  turn in the direction that takes the positive X axis towards
                  the positive Y axis.  In the default coordinate system, this
                  direction is clockwise.
                  &lt;p&gt;A return value of 0 indicates that the point lies
                  exactly on the line segment.  Note that an indicator value
                  of 0 is rare and not useful for determining colinearity
                  because of floating point rounding issues.
                  &lt;p&gt;If the point is colinear with the line segment, but
                  not between the end points, then the value will be -1 if the point
                  lies &quot;beyond {@code (x1,y1)}&quot; or 1 if the point lies
                  &quot;beyond {@code (x2,y2)}&quot;.                
                <param>
                    x1 the X coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    px the X coordinate of the specified point to be
                      compared with the specified line segment                    
                </param>
                <param>
                    py the Y coordinate of the specified point to be
                      compared with the specified line segment                    
                </param>
                <return>
                    an integer that indicates the position of the third specified
                      coordinates with respect to the line segment formed
                      by the first two specified coordinates.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="relativeCCW" type="int" line="421">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
                <declaration name="ccw" type="double" line="426"/>
                <scope line="427">
                    <scope line="429">
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="440">
                Returns an indicator of where the specified point{@code (px,py)} lies with respect to this line segment.
                  See the method comments of{@link #relativeCCW(double,double,double,double,double,double)}to interpret the return value.                
                <param>
                    px the X coordinate of the specified point
                      to be compared with this <code>Line2D</code>                    
                </param>
                <param>
                    py the Y coordinate of the specified point
                      to be compared with this <code>Line2D</code>                    
                </param>
                <return>
                    an integer that indicates the position of the specified
                      coordinates with respect to this <code>Line2D</code>                    
                </return>
                <see>
                    #relativeCCW(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="relativeCCW" type="int" line="452">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="455">
                Returns an indicator of where the specified &lt;code&gt;Point2D&lt;/code&gt;
                  lies with respect to this line segment.
                  See the method comments of{@link #relativeCCW(double,double,double,double,double,double)}to interpret the return value.                
                <param>
                    p the specified <code>Point2D</code> to be compared
                      with this <code>Line2D</code>                    
                </param>
                <return>
                    an integer that indicates the position of the specified
                      <code>Point2D</code> with respect to this <code>Line2D</code>                    
                </return>
                <see>
                    #relativeCCW(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="relativeCCW" type="int" line="466">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="469">
                Tests if the line segment from {@code (x1,y1)} to{@code (x2,y2)} intersects the line segment from {@code (x3,y3)}to {@code (x4,y4)}.                
                <param>
                    x1 the X coordinate of the start point of the first
                      specified line segment                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the first
                      specified line segment                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the first
                      specified line segment                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the first
                      specified line segment                    
                </param>
                <param>
                    x3 the X coordinate of the start point of the second
                      specified line segment                    
                </param>
                <param>
                    y3 the Y coordinate of the start point of the second
                      specified line segment                    
                </param>
                <param>
                    x4 the X coordinate of the end point of the second
                      specified line segment                    
                </param>
                <param>
                    y4 the Y coordinate of the end point of the second
                      specified line segment                    
                </param>
                <return>
                    <code>true</code> if the first specified line segment
                      and the second specified line segment intersect
                      each other; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="linesIntersect" type="boolean" line="492">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="x3" type="double"/>
                    <param name="y3" type="double"/>
                    <param name="x4" type="double"/>
                    <param name="y4" type="double"/>
                </params>
            </method>
            <javadoc line="495">
                Tests if the line segment from {@code (x1,y1)} to{@code (x2,y2)} intersects this line segment.                
                <param>
                    x1 the X coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the
                      specified line segment                    
                </param>
                <return>
                    <true> if this line segment and the specified line segment
                      intersect each other; <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersectsLine" type="boolean" line="509">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <javadoc line="512">
                Tests if the specified line segment intersects this line segment.                
                <param>
                    l the specified <code>Line2D</code>                    
                </param>
                <return>
                    <code>true</code> if this line segment and the specified line
                      segment intersect each other;
                      <code>false</code> otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersectsLine" type="boolean" line="520">
                <params>
                    <param name="l" type="Line2D"/>
                </params>
            </method>
            <javadoc line="523">
                Returns the square of the distance from a point to a line segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the specified end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    x1 the X coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    px the X coordinate of the specified point being
                      measured against the specified line segment                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against the specified line segment                    
                </param>
                <return>
                    a double value that is the square of the distance from the
                      specified point to the specified line segment.                    
                </return>
                <see>
                    #ptLineDistSq(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDistSq" type="double" line="546">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
                <declaration name="dotprod" type="double" line="551"/>
                <declaration name="projlenSq" type="double" line="552"/>
                <scope line="553"/>
                <scope line="556">
                    <scope line="560"/>
                    <scope line="563"/>
                </scope>
                <declaration name="lenSq" type="double" line="567"/>
                <scope line="568"/>
            </method>
            <javadoc line="573">
                Returns the distance from a point to a line segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the specified end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    x1 the X coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the
                      specified line segment                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the
                      specified line segment                    
                </param>
                <param>
                    px the X coordinate of the specified point being
                      measured against the specified line segment                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against the specified line segment                    
                </param>
                <return>
                    a double value that is the distance from the specified point
                      to the specified line segment.                    
                </return>
                <see>
                    #ptLineDist(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDist" type="double" line="596">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="599">
                Returns the square of the distance from a point to this line segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the current line&apos;s end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    px the X coordinate of the specified point being
                      measured against this line segment                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against this line segment                    
                </param>
                <return>
                    a double value that is the square of the distance from the
                      specified point to the current line segment.                    
                </return>
                <see>
                    #ptLineDistSq(double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDistSq" type="double" line="614">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="617">
                Returns the square of the distance from a &lt;code&gt;Point2D&lt;/code&gt; to
                  this line segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the current line&apos;s end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    pt the specified <code>Point2D</code> being measured against
                      this line segment.                    
                </param>
                <return>
                    a double value that is the square of the distance from the
                      specified <code>Point2D</code> to the current
                      line segment.                    
                </return>
                <see>
                    #ptLineDistSq(Point2D)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDistSq" type="double" line="632">
                <params>
                    <param name="pt" type="Point2D"/>
                </params>
            </method>
            <javadoc line="635">
                Returns the distance from a point to this line segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the current line&apos;s end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    px the X coordinate of the specified point being
                      measured against this line segment                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against this line segment                    
                </param>
                <return>
                    a double value that is the distance from the specified
                      point to the current line segment.                    
                </return>
                <see>
                    #ptLineDist(double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDist" type="double" line="650">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="653">
                Returns the distance from a &lt;code&gt;Point2D&lt;/code&gt; to this line
                  segment.
                  The distance measured is the distance between the specified
                  point and the closest point between the current line&apos;s end points.
                  If the specified point intersects the line segment in between the
                  end points, this method returns 0.0.                
                <param>
                    pt the specified <code>Point2D</code> being measured
                      against this line segment                    
                </param>
                <return>
                    a double value that is the distance from the specified
                      <code>Point2D</code> to the current line
                      segment.                    
                </return>
                <see>
                    #ptLineDist(Point2D)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptSegDist" type="double" line="668">
                <params>
                    <param name="pt" type="Point2D"/>
                </params>
            </method>
            <javadoc line="671">
                Returns the square of the distance from a point to a line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by the specified coordinates.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    x1 the X coordinate of the start point of the specified line                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the specified line                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the specified line                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the specified line                    
                </param>
                <param>
                    px the X coordinate of the specified point being
                      measured against the specified line                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against the specified line                    
                </param>
                <return>
                    a double value that is the square of the distance from the
                      specified point to the specified line.                    
                </return>
                <see>
                    #ptSegDistSq(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDistSq" type="double" line="690">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
                <declaration name="dotprod" type="double" line="695"/>
                <declaration name="projlenSq" type="double" line="696"/>
                <declaration name="lenSq" type="double" line="697"/>
                <scope line="698"/>
            </method>
            <javadoc line="703">
                Returns the distance from a point to a line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by the specified coordinates.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    x1 the X coordinate of the start point of the specified line                    
                </param>
                <param>
                    y1 the Y coordinate of the start point of the specified line                    
                </param>
                <param>
                    x2 the X coordinate of the end point of the specified line                    
                </param>
                <param>
                    y2 the Y coordinate of the end point of the specified line                    
                </param>
                <param>
                    px the X coordinate of the specified point being
                      measured against the specified line                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against the specified line                    
                </param>
                <return>
                    a double value that is the distance from the specified
                      point to the specified line.                    
                </return>
                <see>
                    #ptSegDist(double,double,double,double,double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDist" type="double" line="722">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="725">
                Returns the square of the distance from a point to this line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by this &lt;code&gt;Line2D&lt;/code&gt;.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    px the X coordinate of the specified point being
                      measured against this line                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against this line                    
                </param>
                <return>
                    a double value that is the square of the distance from a
                      specified point to the current line.                    
                </return>
                <see>
                    #ptSegDistSq(double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDistSq" type="double" line="740">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="743">
                Returns the square of the distance from a specified
                  &lt;code&gt;Point2D&lt;/code&gt; to this line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by this &lt;code&gt;Line2D&lt;/code&gt;.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    pt the specified <code>Point2D</code> being measured
                      against this line                    
                </param>
                <return>
                    a double value that is the square of the distance from a
                      specified <code>Point2D</code> to the current
                      line.                    
                </return>
                <see>
                    #ptSegDistSq(Point2D)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDistSq" type="double" line="758">
                <params>
                    <param name="pt" type="Point2D"/>
                </params>
            </method>
            <javadoc line="761">
                Returns the distance from a point to this line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by this &lt;code&gt;Line2D&lt;/code&gt;.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    px the X coordinate of the specified point being
                      measured against this line                    
                </param>
                <param>
                    py the Y coordinate of the specified point being
                      measured against this line                    
                </param>
                <return>
                    a double value that is the distance from a specified point
                      to the current line.                    
                </return>
                <see>
                    #ptSegDist(double,double)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDist" type="double" line="776">
                <params>
                    <param name="px" type="double"/>
                    <param name="py" type="double"/>
                </params>
            </method>
            <javadoc line="779">
                Returns the distance from a &lt;code&gt;Point2D&lt;/code&gt; to this line.
                  The distance measured is the distance between the specified
                  point and the closest point on the infinitely-extended line
                  defined by this &lt;code&gt;Line2D&lt;/code&gt;.  If the specified point
                  intersects the line, this method returns 0.0.                
                <param>
                    pt the specified <code>Point2D</code> being measured                    
                </param>
                <return>
                    a double value that is the distance from a specified
                      <code>Point2D</code> to the current line.                    
                </return>
                <see>
                    #ptSegDist(Point2D)                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="ptLineDist" type="double" line="791">
                <params>
                    <param name="pt" type="Point2D"/>
                </params>
            </method>
            <javadoc line="794">
                Tests if a specified coordinate is inside the boundary of this
                  &lt;code&gt;Line2D&lt;/code&gt;.  This method is required to implement the{@link Shape} interface, but in the case of &lt;code&gt;Line2D&lt;/code&gt;
                  objects it always returns &lt;code&gt;false&lt;/code&gt; since a line contains
                  no area.                
                <param>
                    x the X coordinate of the specified point to be tested                    
                </param>
                <param>
                    y the Y coordinate of the specified point to be tested                    
                </param>
                <return>
                    <code>false</code> because a <code>Line2D</code> contains
                      no area.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="805">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="808">
                Tests if a given &lt;code&gt;Point2D&lt;/code&gt; is inside the boundary of
                  this &lt;code&gt;Line2D&lt;/code&gt;.
                  This method is required to implement the {@link Shape} interface,
                  but in the case of &lt;code&gt;Line2D&lt;/code&gt; objects it always returns
                  &lt;code&gt;false&lt;/code&gt; since a line contains no area.                
                <param>
                    p the specified <code>Point2D</code> to be tested                    
                </param>
                <return>
                    <code>false</code> because a <code>Line2D</code> contains
                      no area.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="819">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="822">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="826">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
            </method>
            <javadoc line="829">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="833">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="836">
                Tests if the interior of this &lt;code&gt;Line2D&lt;/code&gt; entirely contains
                  the specified set of rectangular coordinates.
                  This method is required to implement the &lt;code&gt;Shape&lt;/code&gt; interface,
                  but in the case of &lt;code&gt;Line2D&lt;/code&gt; objects it always returns
                  false since a line contains no area.                
                <param>
                    x the X coordinate of the upper-left corner of the
                      specified rectangular area                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the
                      specified rectangular area                    
                </param>
                <param>
                    w the width of the specified rectangular area                    
                </param>
                <param>
                    h the height of the specified rectangular area                    
                </param>
                <return>
                    <code>false</code> because a <code>Line2D</code> contains
                      no area.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="852">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
            </method>
            <javadoc line="855">
                Tests if the interior of this &lt;code&gt;Line2D&lt;/code&gt; entirely contains
                  the specified &lt;code&gt;Rectangle2D&lt;/code&gt;.
                  This method is required to implement the &lt;code&gt;Shape&lt;/code&gt; interface,
                  but in the case of &lt;code&gt;Line2D&lt;/code&gt; objects it always returns
                  &lt;code&gt;false&lt;/code&gt; since a line contains no area.                
                <param>
                    r the specified <code>Rectangle2D</code> to be tested                    
                </param>
                <return>
                    <code>false</code> because a <code>Line2D</code> contains
                      no area.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="866">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="869">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="873"/>
            <javadoc line="876">
                Returns an iteration object that defines the boundary of this
                  &lt;code&gt;Line2D&lt;/code&gt;.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;Line2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;Line2D&lt;/code&gt; object do not affect any iterations of that
                  geometry that are already in process.                
                <param>
                    at the specified {@link AffineTransform}                    
                </param>
                <return>
                    a {@link PathIterator} that defines the boundary of this
                      <code>Line2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="889">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="892">
                Returns an iteration object that defines the boundary of this
                  flattened &lt;code&gt;Line2D&lt;/code&gt;.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;Line2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;Line2D&lt;/code&gt; object do not affect any iterations of that
                  geometry that are already in process.                
                <param>
                    at the specified <code>AffineTransform</code>                    
                </param>
                <param>
                    flatness the maximum amount that the control points for a
                      given curve can vary from colinear before a subdivided
                      curve is replaced by a straight line connecting the
                      end points.  Since a <code>Line2D</code> object is
                      always flat, this parameter is ignored.                    
                </param>
                <return>
                    a <code>PathIterator</code> that defines the boundary of the
                      flattened <code>Line2D</code>                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="910">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <javadoc line="913">
                Creates a new object of the same class as this object.                
                <return>
                    a clone of this instance.                    
                </return>
                <exception>
                    OutOfMemoryError            if there is not enough memory.                    
                </exception>
                <see>
                    java.lang.Cloneable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="920">
                <scope line="921"/>
                <scope line="924"/>
            </method>
        </class>
    </source>