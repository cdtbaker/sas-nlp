<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="FlatteningPathIterator" line="30">
            <comment line="40">
                Multiple of cubic &amp; quad curve size                
            </comment>
            <comment line="42">
                The source iterator                
            </comment>
            <comment line="44">
                Square of the flatness parameter                
            </comment>
            <comment line="45">
                for testing against squared lengths                
            </comment>
            <comment line="47">
                Maximum number of recursion levels                
            </comment>
            <comment line="49">
                The cache of interpolated coords                
            </comment>
            <comment line="50">
                Note that this must be long enough                
            </comment>
            <comment line="51">
                to store a full cubic segment and                
            </comment>
            <comment line="52">
                a relative cubic segment to avoid                
            </comment>
            <comment line="53">
                aliasing when copying the coords                
            </comment>
            <comment line="54">
                of a curve to the end of the array.                
            </comment>
            <comment line="55">
                This is also serendipitously equal                
            </comment>
            <comment line="56">
                to the size of a full quad segment                
            </comment>
            <comment line="57">
                and 2 relative quad segments.                
            </comment>
            <comment line="59">
                The ending x,y of the last segment                
            </comment>
            <comment line="61">
                The x,y of the last move segment                
            </comment>
            <comment line="63">
                The type of the curve being held                
            </comment>
            <comment line="64">
                for interpolation                
            </comment>
            <comment line="66">
                The index of the last curve segment                
            </comment>
            <comment line="67">
                being held for interpolation                
            </comment>
            <comment line="69">
                The index of the curve segment                
            </comment>
            <comment line="70">
                that was last interpolated.  This                
            </comment>
            <comment line="71">
                is the curve segment ready to be                
            </comment>
            <comment line="72">
                returned in the next call to                
            </comment>
            <comment line="73">
                currentSegment().                
            </comment>
            <comment line="75">
                The recursion level at which                
            </comment>
            <comment line="76">
                each curve being held in storage                
            </comment>
            <comment line="77">
                was generated.                
            </comment>
            <comment line="79">
                The index of the entry in the                
            </comment>
            <comment line="80">
                levels array of the curve segment                
            </comment>
            <comment line="81">
                at the holdIndex                
            </comment>
            <comment line="83">
                True when iteration is done                
            </comment>
            <comment line="171">
                Ensures that the hold array can hold up to (want) more values.
                 It is currently holding (hold.length - holdIndex) values.                
            </comment>
            <implements interface="PathIterator"/>
            <javadoc line="30">
                The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of
                  another {@link PathIterator} object.  Other {@link java.awt.Shape Shape}classes can use this class to provide flattening behavior for their paths
                  without having to perform the interpolation calculations themselves.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="GROW_SIZE" type="int" line="39"/>
            <declaration name="src" type="PathIterator" line="41"/>
            <declaration name="squareflat" type="double" line="43"/>
            <declaration name="limit" type="int" line="46"/>
            <declaration name="hold" type="double" line="48"/>
            <declaration name="curx" type="double" line="58"/>
            <declaration name="movx" type="double" line="60"/>
            <declaration name="holdType" type="int" line="62"/>
            <declaration name="holdEnd" type="int" line="65"/>
            <declaration name="holdIndex" type="int" line="68"/>
            <declaration name="levels" type="int" line="74"/>
            <declaration name="levelIndex" type="int" line="78"/>
            <declaration name="done" type="boolean" line="82"/>
            <javadoc line="84">
                Constructs a new &lt;code&gt;FlatteningPathIterator&lt;/code&gt; object that
                  flattens a path as it iterates over it.  The iterator does not
                  subdivide any curve read from the source iterator to more than
                  10 levels of subdivision which yields a maximum of 1024 line
                  segments per curve.                
                <param>
                    src the original unflattened path being iterated over                    
                </param>
                <param>
                    flatness the maximum allowable distance between the
                      control points and the flattened curve                    
                </param>
            </javadoc>
            <method name="FlatteningPathIterator" type="constructor" line="94">
                <params>
                    <param name="src" type="PathIterator"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <javadoc line="98">
                Constructs a new &lt;code&gt;FlatteningPathIterator&lt;/code&gt; object
                  that flattens a path as it iterates over it.
                  The &lt;code&gt;limit&lt;/code&gt; parameter allows you to control the
                  maximum number of recursive subdivisions that the iterator
                  can make before it assumes that the curve is flat enough
                  without measuring against the &lt;code&gt;flatness&lt;/code&gt; parameter.
                  The flattened iteration therefore never generates more than
                  a maximum of &lt;code&gt;(2^limit)&lt;/code&gt; line segments per curve.                
                <param>
                    src the original unflattened path being iterated over                    
                </param>
                <param>
                    flatness the maximum allowable distance between the
                      control points and the flattened curve                    
                </param>
                <param>
                    limit the maximum number of recursive subdivisions
                      allowed for any curved segment                    
                </param>
                <exception>
                    <code>IllegalArgumentException</code> if
                      <code>flatness</code> or <code>limit</code>
                      is less than zero                    
                </exception>
            </javadoc>
            <method name="FlatteningPathIterator" type="constructor" line="117">
                <params>
                    <param name="src" type="PathIterator"/>
                    <param name="flatness" type="double"/>
                    <param name="limit" type="int"/>
                </params>
                <comment line="128">
                    prime the first path segment                    
                </comment>
                <scope line="118"/>
                <scope line="121"/>
            </method>
            <javadoc line="132">
                Returns the flatness of this iterator.                
                <return>
                    the flatness of this <code>FlatteningPathIterator</code>.                    
                </return>
            </javadoc>
            <method name="getFlatness" type="double" line="136"/>
            <javadoc line="140">
                Returns the recursion limit of this iterator.                
                <return>
                    the recursion limit of this
                      <code>FlatteningPathIterator</code>.                    
                </return>
            </javadoc>
            <method name="getRecursionLimit" type="int" line="145"/>
            <javadoc line="149">
                Returns the winding rule for determining the interior of the
                  path.                
                <return>
                    the winding rule of the original unflattened path being
                      iterated over.                    
                </return>
                <see>
                    PathIterator#WIND_EVEN_ODD                    
                </see>
                <see>
                    PathIterator#WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="157"/>
            <javadoc line="161">
                Tests if the iteration is complete.                
                <return>
                    <code>true</code> if all the segments have
                      been read; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="166"/>
            <method name="ensureHoldCapacity" type="void" line="174">
                <params>
                    <param name="want" type="int"/>
                </params>
                <scope line="175">
                    <declaration name="have" type="int" line="176"/>
                    <declaration name="newsize" type="int" line="177"/>
                    <declaration name="newhold" type="double" line="178"/>
                </scope>
            </method>
            <javadoc line="188">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="193"/>
            <method name="next" type="void" line="197">
                <params>
                    <param name="doNext" type="boolean"/>
                </params>
                <comment line="233">
                    Move the coordinates to the end of the array.                    
                </comment>
                <comment line="256">
                    Now that we have subdivided, we have constructed                    
                </comment>
                <comment line="257">
                    two curves of one depth lower than the original                    
                </comment>
                <comment line="258">
                    curve.  One of those curves is in the place of                    
                </comment>
                <comment line="259">
                    the former curve and one of them is in the next                    
                </comment>
                <comment line="260">
                    set of held coordinate slots.  We now set both                    
                </comment>
                <comment line="261">
                    curves level values to the next higher level.                    
                </comment>
                <comment line="268">
                    This curve segment is flat enough, or it is too deep                    
                </comment>
                <comment line="269">
                    in recursion levels to try to flatten any more.  The                    
                </comment>
                <comment line="270">
                    two coordinates at holdIndex+4 and holdIndex+5 now                    
                </comment>
                <comment line="271">
                    contain the endpoint of the curve which can be the                    
                </comment>
                <comment line="272">
                    endpoint of an approximating line segment.                    
                </comment>
                <comment line="278">
                    Move the coordinates to the end of the array.                    
                </comment>
                <comment line="303">
                    Now that we have subdivided, we have constructed                    
                </comment>
                <comment line="304">
                    two curves of one depth lower than the original                    
                </comment>
                <comment line="305">
                    curve.  One of those curves is in the place of                    
                </comment>
                <comment line="306">
                    the former curve and one of them is in the next                    
                </comment>
                <comment line="307">
                    set of held coordinate slots.  We now set both                    
                </comment>
                <comment line="308">
                    curves level values to the next higher level.                    
                </comment>
                <comment line="315">
                    This curve segment is flat enough, or it is too deep                    
                </comment>
                <comment line="316">
                    in recursion levels to try to flatten any more.  The                    
                </comment>
                <comment line="317">
                    two coordinates at holdIndex+6 and holdIndex+7 now                    
                </comment>
                <comment line="318">
                    contain the endpoint of the curve which can be the                    
                </comment>
                <comment line="319">
                    endpoint of an approximating line segment.                    
                </comment>
                <declaration name="level" type="int" line="198"/>
                <scope line="200">
                    <scope line="201"/>
                    <scope line="204"/>
                </scope>
                <scope line="218"/>
                <scope line="232"/>
                <scope line="245">
                    <scope line="246"/>
                </scope>
                <scope line="277"/>
                <scope line="292">
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="326">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types return one point,
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path segment type of the current path segment.                    
                </return>
                <exception>
                    <code>NoSuchElementException</code> if there
                      are no more elements in the flattening path to be
                      returned.                    
                </exception>
                <see>
                    PathIterator#SEG_MOVETO                    
                </see>
                <see>
                    PathIterator#SEG_LINETO                    
                </see>
                <see>
                    PathIterator#SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="346">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="347"/>
                <declaration name="type" type="int" line="350"/>
                <scope line="351">
                    <scope line="354"/>
                </scope>
            </method>
            <javadoc line="361">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types return one point,
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path segment type of the current path segment.                    
                </return>
                <exception>
                    <code>NoSuchElementException</code> if there
                      are no more elements in the flattening path to be
                      returned.                    
                </exception>
                <see>
                    PathIterator#SEG_MOVETO                    
                </see>
                <see>
                    PathIterator#SEG_LINETO                    
                </see>
                <see>
                    PathIterator#SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="381">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="382"/>
                <declaration name="type" type="int" line="385"/>
                <scope line="386">
                    <scope line="389"/>
                </scope>
            </method>
        </class>
    </source>