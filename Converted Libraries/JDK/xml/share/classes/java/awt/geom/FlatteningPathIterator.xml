<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="FlatteningPathIterator" line="3">
            <implements interface="PathIterator"/>
            <javadoc line="3">
                The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of
                  another {@link PathIterator} object.  Other {@link java.awt.Shape Shape}classes can use this class to provide flattening behavior for their paths
                  without having to perform the interpolation calculations themselves.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="GROW_SIZE" type="int" line="10"/>
            <declaration name="src" type="PathIterator" line="11"/>
            <declaration name="squareflat" type="double" line="12"/>
            <declaration name="limit" type="int" line="13"/>
            <declaration name="hold" type="double" line="14"/>
            <declaration name="curx" type="double" line="15"/>
            <declaration name="movx" type="double" line="16"/>
            <declaration name="holdType" type="int" line="17"/>
            <declaration name="holdEnd" type="int" line="18"/>
            <declaration name="holdIndex" type="int" line="19"/>
            <declaration name="levels" type="int" line="20"/>
            <declaration name="levelIndex" type="int" line="21"/>
            <declaration name="done" type="boolean" line="22"/>
            <javadoc line="23">
                Constructs a new &lt;code&gt;FlatteningPathIterator&lt;/code&gt; object that
                  flattens a path as it iterates over it.  The iterator does not
                  subdivide any curve read from the source iterator to more than
                  10 levels of subdivision which yields a maximum of 1024 line
                  segments per curve.                
                <param>
                    src the original unflattened path being iterated over                    
                </param>
                <param>
                    flatness the maximum allowable distance between the
                      control points and the flattened curve                    
                </param>
            </javadoc>
            <method name="FlatteningPathIterator" type="constructor" line="33">
                <params>
                    <param name="src" type="PathIterator"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <javadoc line="36">
                Constructs a new &lt;code&gt;FlatteningPathIterator&lt;/code&gt; object
                  that flattens a path as it iterates over it.
                  The &lt;code&gt;limit&lt;/code&gt; parameter allows you to control the
                  maximum number of recursive subdivisions that the iterator
                  can make before it assumes that the curve is flat enough
                  without measuring against the &lt;code&gt;flatness&lt;/code&gt; parameter.
                  The flattened iteration therefore never generates more than
                  a maximum of &lt;code&gt;(2^limit)&lt;/code&gt; line segments per curve.                
                <param>
                    src the original unflattened path being iterated over                    
                </param>
                <param>
                    flatness the maximum allowable distance between the
                      control points and the flattened curve                    
                </param>
                <param>
                    limit the maximum number of recursive subdivisions
                      allowed for any curved segment                    
                </param>
                <exception>
                    <code>IllegalArgumentException</code> if
                      <code>flatness</code> or <code>limit</code>
                      is less than zero                    
                </exception>
            </javadoc>
            <method name="FlatteningPathIterator" type="constructor" line="54">
                <params>
                    <param name="src" type="PathIterator"/>
                    <param name="flatness" type="double"/>
                    <param name="limit" type="int"/>
                </params>
                <scope line="55"/>
                <scope line="58"/>
            </method>
            <javadoc line="67">
                Returns the flatness of this iterator.                
                <return>
                    the flatness of this <code>FlatteningPathIterator</code>.                    
                </return>
            </javadoc>
            <method name="getFlatness" type="double" line="71"/>
            <javadoc line="74">
                Returns the recursion limit of this iterator.                
                <return>
                    the recursion limit of this
                      <code>FlatteningPathIterator</code>.                    
                </return>
            </javadoc>
            <method name="getRecursionLimit" type="int" line="79"/>
            <javadoc line="82">
                Returns the winding rule for determining the interior of the
                  path.                
                <return>
                    the winding rule of the original unflattened path being
                      iterated over.                    
                </return>
                <see>
                    PathIterator#WIND_EVEN_ODD                    
                </see>
                <see>
                    PathIterator#WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="90"/>
            <javadoc line="93">
                Tests if the iteration is complete.                
                <return>
                    <code>true</code> if all the segments have
                      been read; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="98"/>
            <method name="ensureHoldCapacity" type="void" line="101">
                <params>
                    <param name="want" type="int"/>
                </params>
                <scope line="102">
                    <declaration name="have" type="int" line="103"/>
                    <declaration name="newsize" type="int" line="104"/>
                    <declaration name="newhold" type="double" line="105"/>
                </scope>
            </method>
            <javadoc line="112">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="117"/>
            <method name="next" type="void" line="120">
                <params>
                    <param name="doNext" type="boolean"/>
                </params>
                <declaration name="level" type="int" line="121"/>
                <scope line="122">
                    <scope line="123"/>
                    <scope line="126"/>
                </scope>
                <scope line="139"/>
                <scope line="153"/>
                <scope line="164">
                    <scope line="165"/>
                </scope>
                <scope line="180"/>
                <scope line="193">
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="210">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types return one point,
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path segment type of the current path segment.                    
                </return>
                <exception>
                    <code>NoSuchElementException</code> if there
                      are no more elements in the flattening path to be
                      returned.                    
                </exception>
                <see>
                    PathIterator#SEG_MOVETO                    
                </see>
                <see>
                    PathIterator#SEG_LINETO                    
                </see>
                <see>
                    PathIterator#SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="230">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="231"/>
                <declaration name="type" type="int" line="234"/>
                <scope line="235">
                    <scope line="238"/>
                </scope>
            </method>
            <javadoc line="244">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and can be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types return one point,
                  and SEG_CLOSE does not return any points.                
                <param>
                    coords an array that holds the data returned from
                      this method                    
                </param>
                <return>
                    the path segment type of the current path segment.                    
                </return>
                <exception>
                    <code>NoSuchElementException</code> if there
                      are no more elements in the flattening path to be
                      returned.                    
                </exception>
                <see>
                    PathIterator#SEG_MOVETO                    
                </see>
                <see>
                    PathIterator#SEG_LINETO                    
                </see>
                <see>
                    PathIterator#SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="264">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="265"/>
                <declaration name="type" type="int" line="268"/>
                <scope line="269">
                    <scope line="272"/>
                </scope>
            </method>
        </class>
    </source>