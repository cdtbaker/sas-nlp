<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.io.Serializable"/>
        <import package="sun.awt.geom.Curve"/>
        <class name="QuadCurve2D" line="6">
            <implements interface="Shape"/>
            <implements interface="Cloneable"/>
            <javadoc line="6">
                The &lt;code&gt;QuadCurve2D&lt;/code&gt; class defines a quadratic parametric curve
                  segment in {@code (x,y)} coordinate space.
                  &lt;p&gt;
                  This class is only the abstract superclass for all objects that
                  store a 2D quadratic curve segment.
                  The actual storage representation of the coordinates is left to
                  the subclass.                
                <author>
                    Jim Graham                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="Float" line="18">
                <extends class="QuadCurve2D"/>
                <implements interface="Serializable"/>
                <javadoc line="18">
                    A quadratic parametric curve segment specified with{@code float} coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="float" line="23"/>
                <javadoc line="23">
                    The X coordinate of the start point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="float" line="30"/>
                <javadoc line="30">
                    The Y coordinate of the start point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx" type="float" line="37"/>
                <javadoc line="37">
                    The X coordinate of the control point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly" type="float" line="44"/>
                <javadoc line="44">
                    The Y coordinate of the control point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="float" line="51"/>
                <javadoc line="51">
                    The X coordinate of the end point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="float" line="58"/>
                <javadoc line="58">
                    The Y coordinate of the end point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="65">
                    Constructs and initializes a &lt;code&gt;QuadCurve2D&lt;/code&gt; with
                      coordinates (0, 0, 0, 0, 0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="70"/>
                <javadoc line="72">
                    Constructs and initializes a &lt;code&gt;QuadCurve2D&lt;/code&gt; from the
                      specified {@code float} coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        ctrlx the X coordinate of the control point                        
                    </param>
                    <param>
                        ctrly the Y coordinate of the control point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="83">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="ctrlx" type="float"/>
                        <param name="ctrly" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="86">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="90"/>
                <javadoc line="93">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="97"/>
                <javadoc line="100">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="104"/>
                <javadoc line="107">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX" type="double" line="111"/>
                <javadoc line="114">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY" type="double" line="118"/>
                <javadoc line="121">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlPt" type="Point2D" line="125"/>
                <javadoc line="128">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="132"/>
                <javadoc line="135">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="139"/>
                <javadoc line="142">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="146"/>
                <javadoc line="149">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="153">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx" type="double"/>
                        <param name="ctrly" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="161">
                    Sets the location of the end points and control point of this curve
                      to the specified {@code float} coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        ctrlx the X coordinate of the control point                        
                    </param>
                    <param>
                        ctrly the Y coordinate of the control point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="172">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="ctrlx" type="float"/>
                        <param name="ctrly" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="180">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="184">
                    <declaration name="left" type="float" line="185"/>
                    <declaration name="top" type="float" line="186"/>
                    <declaration name="right" type="float" line="187"/>
                    <declaration name="bottom" type="float" line="188"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="191"/>
            </class>
            <class name="Double" line="193">
                <extends class="QuadCurve2D"/>
                <implements interface="Serializable"/>
                <javadoc line="193">
                    A quadratic parametric curve segment specified with{@code double} coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="double" line="198"/>
                <javadoc line="198">
                    The X coordinate of the start point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="double" line="205"/>
                <javadoc line="205">
                    The Y coordinate of the start point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx" type="double" line="212"/>
                <javadoc line="212">
                    The X coordinate of the control point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly" type="double" line="219"/>
                <javadoc line="219">
                    The Y coordinate of the control point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="double" line="226"/>
                <javadoc line="226">
                    The X coordinate of the end point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="double" line="233"/>
                <javadoc line="233">
                    The Y coordinate of the end point of the quadratic curve
                      segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="240">
                    Constructs and initializes a &lt;code&gt;QuadCurve2D&lt;/code&gt; with
                      coordinates (0, 0, 0, 0, 0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="245"/>
                <javadoc line="247">
                    Constructs and initializes a &lt;code&gt;QuadCurve2D&lt;/code&gt; from the
                      specified {@code double} coordinates.                    
                    <param>
                        x1 the X coordinate of the start point                        
                    </param>
                    <param>
                        y1 the Y coordinate of the start point                        
                    </param>
                    <param>
                        ctrlx the X coordinate of the control point                        
                    </param>
                    <param>
                        ctrly the Y coordinate of the control point                        
                    </param>
                    <param>
                        x2 the X coordinate of the end point                        
                    </param>
                    <param>
                        y2 the Y coordinate of the end point                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="258">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx" type="double"/>
                        <param name="ctrly" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="261">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="265"/>
                <javadoc line="268">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="272"/>
                <javadoc line="275">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="279"/>
                <javadoc line="282">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX" type="double" line="286"/>
                <javadoc line="289">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY" type="double" line="293"/>
                <javadoc line="296">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlPt" type="Point2D" line="300"/>
                <javadoc line="303">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="307"/>
                <javadoc line="310">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="314"/>
                <javadoc line="317">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="321"/>
                <javadoc line="324">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="328">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx" type="double"/>
                        <param name="ctrly" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="336">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="340">
                    <declaration name="left" type="double" line="341"/>
                    <declaration name="top" type="double" line="342"/>
                    <declaration name="right" type="double" line="343"/>
                    <declaration name="bottom" type="double" line="344"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="347"/>
            </class>
            <javadoc line="349">
                This is an abstract class that cannot be instantiated directly.
                  Type-specific implementation subclasses are available for
                  instantiation and provide a number of formats for storing
                  the information necessary to satisfy the various accessor
                  methods below.                
                <see>
                    java.awt.geom.QuadCurve2D.Float                    
                </see>
                <see>
                    java.awt.geom.QuadCurve2D.Double                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="QuadCurve2D" type="constructor" line="359"/>
            <method name="getX1" type="double" line="361"/>
            <javadoc line="361">
                Returns the X coordinate of the start point in
                  &lt;code&gt;double&lt;/code&gt; in precision.                
                <return>
                    the X coordinate of the start point.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY1" type="double" line="368"/>
            <javadoc line="368">
                Returns the Y coordinate of the start point in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the Y coordinate of the start point.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP1" type="Point2D" line="375"/>
            <javadoc line="375">
                Returns the start point.                
                <return>
                    a <code>Point2D</code> that is the start point of this
                      <code>QuadCurve2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlX" type="double" line="382"/>
            <javadoc line="382">
                Returns the X coordinate of the control point in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    X coordinate the control point                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlY" type="double" line="389"/>
            <javadoc line="389">
                Returns the Y coordinate of the control point in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the Y coordinate of the control point.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlPt" type="Point2D" line="396"/>
            <javadoc line="396">
                Returns the control point.                
                <return>
                    a <code>Point2D</code> that is the control point of this
                      <code>Point2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getX2" type="double" line="403"/>
            <javadoc line="403">
                Returns the X coordinate of the end point in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the x coordiante of the end point.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY2" type="double" line="410"/>
            <javadoc line="410">
                Returns the Y coordinate of the end point in
                  &lt;code&gt;double&lt;/code&gt; precision.                
                <return>
                    the Y coordinate of the end point.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP2" type="Point2D" line="417"/>
            <javadoc line="417">
                Returns the end point.                
                <return>
                    a <code>Point</code> object that is the end point
                      of this <code>Point2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="424"/>
            <javadoc line="424">
                Sets the location of the end points and control point of this curve
                  to the specified &lt;code&gt;double&lt;/code&gt; coordinates.                
                <param>
                    x1 the X coordinate of the start point                    
                </param>
                <param>
                    y1 the Y coordinate of the start point                    
                </param>
                <param>
                    ctrlx the X coordinate of the control point                    
                </param>
                <param>
                    ctrly the Y coordinate of the control point                    
                </param>
                <param>
                    x2 the X coordinate of the end point                    
                </param>
                <param>
                    y2 the Y coordinate of the end point                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="436">
                Sets the location of the end points and control points of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; to the &lt;code&gt;double&lt;/code&gt; coordinates at
                  the specified offset in the specified array.                
                <param>
                    coords the array containing coordinate values                    
                </param>
                <param>
                    offset the index into the array from which to start
                      getting the coordinate values and assigning them to this
                      <code>QuadCurve2D</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="446">
                <params>
                    <param name="coords" type="double[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="449">
                Sets the location of the end points and control point of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; to the specified &lt;code&gt;Point2D&lt;/code&gt;
                  coordinates.                
                <param>
                    p1 the start point                    
                </param>
                <param>
                    cp the control point                    
                </param>
                <param>
                    p2 the end point                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="458">
                <params>
                    <param name="p1" type="Point2D"/>
                    <param name="cp" type="Point2D"/>
                    <param name="p2" type="Point2D"/>
                </params>
            </method>
            <javadoc line="461">
                Sets the location of the end points and control points of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; to the coordinates of the
                  &lt;code&gt;Point2D&lt;/code&gt; objects at the specified offset in
                  the specified array.                
                <param>
                    pts an array containing <code>Point2D</code> that define
                      coordinate values                    
                </param>
                <param>
                    offset the index into <code>pts</code> from which to start
                      getting the coordinate values and assigning them to this
                      <code>QuadCurve2D</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="473">
                <params>
                    <param name="pts" type="Point2D[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="476">
                Sets the location of the end points and control point of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; to the same as those in the specified
                  &lt;code&gt;QuadCurve2D&lt;/code&gt;.                
                <param>
                    c the specified <code>QuadCurve2D</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="483">
                <params>
                    <param name="c" type="QuadCurve2D"/>
                </params>
            </method>
            <javadoc line="486">
                Returns the square of the flatness, or maximum distance of a
                  control point from the line connecting the end points, of the
                  quadratic curve specified by the indicated control points.                
                <param>
                    x1 the X coordinate of the start point                    
                </param>
                <param>
                    y1 the Y coordinate of the start point                    
                </param>
                <param>
                    ctrlx the X coordinate of the control point                    
                </param>
                <param>
                    ctrly the Y coordinate of the control point                    
                </param>
                <param>
                    x2 the X coordinate of the end point                    
                </param>
                <param>
                    y2 the Y coordinate of the end point                    
                </param>
                <return>
                    the square of the flatness of the quadratic curve
                      defined by the specified coordinates.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="500">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="ctrlx" type="double"/>
                    <param name="ctrly" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <javadoc line="503">
                Returns the flatness, or maximum distance of a
                  control point from the line connecting the end points, of the
                  quadratic curve specified by the indicated control points.                
                <param>
                    x1 the X coordinate of the start point                    
                </param>
                <param>
                    y1 the Y coordinate of the start point                    
                </param>
                <param>
                    ctrlx the X coordinate of the control point                    
                </param>
                <param>
                    ctrly the Y coordinate of the control point                    
                </param>
                <param>
                    x2 the X coordinate of the end point                    
                </param>
                <param>
                    y2 the Y coordinate of the end point                    
                </param>
                <return>
                    the flatness of the quadratic curve defined by the
                      specified coordinates.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="517">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="ctrlx" type="double"/>
                    <param name="ctrly" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <javadoc line="520">
                Returns the square of the flatness, or maximum distance of a
                  control point from the line connecting the end points, of the
                  quadratic curve specified by the control points stored in the
                  indicated array at the indicated index.                
                <param>
                    coords an array containing coordinate values                    
                </param>
                <param>
                    offset the index into <code>coords</code> from which to
                      to start getting the values from the array                    
                </param>
                <return>
                    the flatness of the quadratic curve that is defined by the
                      values in the specified array at the specified index.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="532">
                <params>
                    <param name="coords" type="double"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="535">
                Returns the flatness, or maximum distance of a
                  control point from the line connecting the end points, of the
                  quadratic curve specified by the control points stored in the
                  indicated array at the indicated index.                
                <param>
                    coords an array containing coordinate values                    
                </param>
                <param>
                    offset the index into <code>coords</code> from which to
                      start getting the coordinate values                    
                </param>
                <return>
                    the flatness of a quadratic curve defined by the
                      specified array at the specified offset.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="547">
                <params>
                    <param name="coords" type="double"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="550">
                Returns the square of the flatness, or maximum distance of a
                  control point from the line connecting the end points, of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt;.                
                <return>
                    the square of the flatness of this
                      <code>QuadCurve2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="558"/>
            <javadoc line="561">
                Returns the flatness, or maximum distance of a
                  control point from the line connecting the end points, of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt;.                
                <return>
                    the flatness of this <code>QuadCurve2D</code>.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="568"/>
            <javadoc line="571">
                Subdivides this &lt;code&gt;QuadCurve2D&lt;/code&gt; and stores the resulting
                  two subdivided curves into the &lt;code&gt;left&lt;/code&gt; and
                  &lt;code&gt;right&lt;/code&gt; curve parameters.
                  Either or both of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;
                  objects can be the same as this &lt;code&gt;QuadCurve2D&lt;/code&gt; or
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    left the <code>QuadCurve2D</code> object for storing the
                      left or first half of the subdivided curve                    
                </param>
                <param>
                    right the <code>QuadCurve2D</code> object for storing the
                      right or second half of the subdivided curve                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="584">
                <params>
                    <param name="left" type="QuadCurve2D"/>
                    <param name="right" type="QuadCurve2D"/>
                </params>
            </method>
            <javadoc line="587">
                Subdivides the quadratic curve specified by the &lt;code&gt;src&lt;/code&gt;
                  parameter and stores the resulting two subdivided curves into the
                  &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; curve parameters.
                  Either or both of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;
                  objects can be the same as the &lt;code&gt;src&lt;/code&gt; object or
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    src the quadratic curve to be subdivided                    
                </param>
                <param>
                    left the <code>QuadCurve2D</code> object for storing the
                      left or first half of the subdivided curve                    
                </param>
                <param>
                    right the <code>QuadCurve2D</code> object for storing the
                      right or second half of the subdivided curve                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="601">
                <params>
                    <param name="src" type="QuadCurve2D"/>
                    <param name="left" type="QuadCurve2D"/>
                    <param name="right" type="QuadCurve2D"/>
                </params>
                <declaration name="x1" type="double" line="602"/>
                <declaration name="y1" type="double" line="603"/>
                <declaration name="ctrlx" type="double" line="604"/>
                <declaration name="ctrly" type="double" line="605"/>
                <declaration name="x2" type="double" line="606"/>
                <declaration name="y2" type="double" line="607"/>
                <declaration name="ctrlx1" type="double" line="608"/>
                <declaration name="ctrly1" type="double" line="609"/>
                <declaration name="ctrlx2" type="double" line="610"/>
                <declaration name="ctrly2" type="double" line="611"/>
                <scope line="614"/>
                <scope line="617"/>
            </method>
            <javadoc line="621">
                Subdivides the quadratic curve specified by the coordinates
                  stored in the &lt;code&gt;src&lt;/code&gt; array at indices
                  &lt;code&gt;srcoff&lt;/code&gt; through &lt;code&gt;srcoff&lt;/code&gt;&amp;nbsp;+&amp;nbsp;5
                  and stores the resulting two subdivided curves into the two
                  result arrays at the corresponding indices.
                  Either or both of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;
                  arrays can be &lt;code&gt;null&lt;/code&gt; or a reference to the same array
                  and offset as the &lt;code&gt;src&lt;/code&gt; array.
                  Note that the last point in the first subdivided curve is the
                  same as the first point in the second subdivided curve.  Thus,
                  it is possible to pass the same array for &lt;code&gt;left&lt;/code&gt; and
                  &lt;code&gt;right&lt;/code&gt; and to use offsets such that
                  &lt;code&gt;rightoff&lt;/code&gt; equals &lt;code&gt;leftoff&lt;/code&gt; + 4 in order
                  to avoid allocating extra storage for this common point.                
                <param>
                    src the array holding the coordinates for the source curve                    
                </param>
                <param>
                    srcoff the offset into the array of the beginning of the
                      the 6 source coordinates                    
                </param>
                <param>
                    left the array for storing the coordinates for the first
                      half of the subdivided curve                    
                </param>
                <param>
                    leftoff the offset into the array of the beginning of the
                      the 6 left coordinates                    
                </param>
                <param>
                    right the array for storing the coordinates for the second
                      half of the subdivided curve                    
                </param>
                <param>
                    rightoff the offset into the array of the beginning of the
                      the 6 right coordinates                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="649">
                <params>
                    <param name="src" type="double"/>
                    <param name="srcoff" type="int"/>
                    <param name="left" type="double"/>
                    <param name="leftoff" type="int"/>
                    <param name="right" type="double"/>
                    <param name="rightoff" type="int"/>
                </params>
                <declaration name="x1" type="double" line="650"/>
                <declaration name="y1" type="double" line="651"/>
                <declaration name="ctrlx" type="double" line="652"/>
                <declaration name="ctrly" type="double" line="653"/>
                <declaration name="x2" type="double" line="654"/>
                <declaration name="y2" type="double" line="655"/>
                <scope line="656"/>
                <scope line="660"/>
                <scope line="670"/>
                <scope line="676"/>
            </method>
            <javadoc line="683">
                Solves the quadratic whose coefficients are in the &lt;code&gt;eqn&lt;/code&gt;
                  array and places the non-complex roots back into the same array,
                  returning the number of roots.  The quadratic solved is represented
                  by the equation:
                  &lt;pre&gt;
                  eqn = {C, B, A};
                  ax^2 + bx + c = 0
                  &lt;/pre&gt;
                  A return value of &lt;code&gt;-1&lt;/code&gt; is used to distinguish a constant
                  equation, which might be always 0 or never 0, from an equation that
                  has no zeroes.                
                <param>
                    eqn the array that contains the quadratic coefficients                    
                </param>
                <return>
                    the number of roots, or <code>-1</code> if the equation is
                      a constant                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="solveQuadratic" type="int" line="700">
                <params>
                    <param name="eqn" type="double"/>
                </params>
            </method>
            <javadoc line="703">
                Solves the quadratic whose coefficients are in the &lt;code&gt;eqn&lt;/code&gt;
                  array and places the non-complex roots into the &lt;code&gt;res&lt;/code&gt;
                  array, returning the number of roots.
                  The quadratic solved is represented by the equation:
                  &lt;pre&gt;
                  eqn = {C, B, A};
                  ax^2 + bx + c = 0
                  &lt;/pre&gt;
                  A return value of &lt;code&gt;-1&lt;/code&gt; is used to distinguish a constant
                  equation, which might be always 0 or never 0, from an equation that
                  has no zeroes.                
                <param>
                    eqn the specified array of coefficients to use to solve
                      the quadratic equation                    
                </param>
                <param>
                    res the array that contains the non-complex roots
                      resulting from the solution of the quadratic equation                    
                </param>
                <return>
                    the number of roots, or <code>-1</code> if the equation is
                      a constant.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="solveQuadratic" type="int" line="723">
                <params>
                    <param name="eqn" type="double"/>
                    <param name="res" type="double"/>
                </params>
                <declaration name="a" type="double" line="724"/>
                <declaration name="b" type="double" line="725"/>
                <declaration name="c" type="double" line="726"/>
                <declaration name="roots" type="int" line="727"/>
                <scope line="728">
                    <scope line="729"/>
                </scope>
                <scope line="734">
                    <declaration name="d" type="double" line="735"/>
                    <scope line="736"/>
                    <scope line="740"/>
                    <declaration name="q" type="double" line="743"/>
                    <scope line="745"/>
                </scope>
            </method>
            <javadoc line="751">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="755">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="x1" type="double" line="756"/>
                <declaration name="y1" type="double" line="757"/>
                <declaration name="xc" type="double" line="758"/>
                <declaration name="yc" type="double" line="759"/>
                <declaration name="x2" type="double" line="760"/>
                <declaration name="y2" type="double" line="761"/>
                <declaration name="kx" type="double" line="762"/>
                <declaration name="ky" type="double" line="763"/>
                <declaration name="dx" type="double" line="764"/>
                <declaration name="dy" type="double" line="765"/>
                <declaration name="dxl" type="double" line="766"/>
                <declaration name="dyl" type="double" line="767"/>
                <declaration name="t0" type="double" line="768"/>
                <scope line="769"/>
                <declaration name="xb" type="double" line="772"/>
                <declaration name="yb" type="double" line="773"/>
                <declaration name="xl" type="double" line="774"/>
                <declaration name="yl" type="double" line="775"/>
            </method>
            <javadoc line="778">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="782">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="785">
                Fill an array with the coefficients of the parametric equation
                  in t, ready for solving against val with solveQuadratic.
                  We currently have:
                  val = Py(t) = C1(1-t)^2 + 2CPt(1-t) + C2t^2
                  = C1 - 2C1t + C1t^2 + 2CPt - 2CPt^2 + C2t^2
                  = C1 + (2CP - 2C1)t + (C1 - 2CP + C2)t^2
                  0 = (C1 - val) + (2CP - 2C1)t + (C1 - 2CP + C2)t^2
                  0 = C + Bt + At^2
                  C = C1 - val
                  B = 2CP - 2C1
                  A = C1 - 2CP + C2                
            </javadoc>
            <method name="fillEqn" type="void" line="798">
                <params>
                    <param name="eqn" type="double"/>
                    <param name="val" type="double"/>
                    <param name="c1" type="double"/>
                    <param name="cp" type="double"/>
                    <param name="c2" type="double"/>
                </params>
            </method>
            <javadoc line="804">
                Evaluate the t values in the first num slots of the vals[] array
                  and place the evaluated values back into the same array.  Only
                  evaluate t values that are within the range &lt;0, 1&gt;, including
                  the 0 and 1 ends of the range iff the include0 or include1
                  booleans are true.  If an &quot;inflection&quot; equation is handed in,
                  then any points which represent a point of inflection for that
                  quadratic equation are also ignored.                
            </javadoc>
            <method name="evalQuadratic" type="int" line="813">
                <params>
                    <param name="vals" type="double"/>
                    <param name="num" type="int"/>
                    <param name="include0" type="boolean"/>
                    <param name="include1" type="boolean"/>
                    <param name="inflect" type="double"/>
                    <param name="c1" type="double"/>
                    <param name="ctrl" type="double"/>
                    <param name="c2" type="double"/>
                </params>
                <declaration name="j" type="int" line="814"/>
                <scope line="815">
                    <declaration name="t" type="double" line="816"/>
                    <scope line="817">
                        <declaration name="u" type="double" line="818"/>
                    </scope>
                </scope>
            </method>
            <declaration name="BELOW" type="int" line="824"/>
            <declaration name="LOWEDGE" type="int" line="825"/>
            <declaration name="INSIDE" type="int" line="826"/>
            <declaration name="HIGHEDGE" type="int" line="827"/>
            <declaration name="ABOVE" type="int" line="828"/>
            <javadoc line="829">
                Determine where coord lies with respect to the range from
                  low to high.  It is assumed that low &lt;= high.  The return
                  value is one of the 5 values BELOW, LOWEDGE, INSIDE, HIGHEDGE,
                  or ABOVE.                
            </javadoc>
            <method name="getTag" type="int" line="835">
                <params>
                    <param name="coord" type="double"/>
                    <param name="low" type="double"/>
                    <param name="high" type="double"/>
                </params>
                <scope line="836"/>
                <scope line="839"/>
            </method>
            <javadoc line="844">
                Determine if the pttag represents a coordinate that is already
                  in its test range, or is on the border with either of the two
                  opttags representing another coordinate that is &quot;towards the
                  inside&quot; of that test range.  In other words, are either of the
                  two &quot;opt&quot; points &quot;drawing the pt inward&quot;?                
            </javadoc>
            <method name="inwards" type="boolean" line="851">
                <params>
                    <param name="pttag" type="int"/>
                    <param name="opt1tag" type="int"/>
                    <param name="opt2tag" type="int"/>
                </params>
            </method>
            <javadoc line="865">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="869">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="870"/>
                <declaration name="x1" type="double" line="873"/>
                <declaration name="y1" type="double" line="874"/>
                <declaration name="x1tag" type="int" line="875"/>
                <declaration name="y1tag" type="int" line="876"/>
                <scope line="877"/>
                <declaration name="x2" type="double" line="880"/>
                <declaration name="y2" type="double" line="881"/>
                <declaration name="x2tag" type="int" line="882"/>
                <declaration name="y2tag" type="int" line="883"/>
                <scope line="884"/>
                <declaration name="ctrlx" type="double" line="887"/>
                <declaration name="ctrly" type="double" line="888"/>
                <declaration name="ctrlxtag" type="int" line="889"/>
                <declaration name="ctrlytag" type="int" line="890"/>
                <scope line="891"/>
                <scope line="894"/>
                <scope line="897"/>
                <scope line="900"/>
                <scope line="903"/>
                <scope line="906"/>
                <declaration name="xoverlap" type="boolean" line="909"/>
                <declaration name="yoverlap" type="boolean" line="910"/>
                <scope line="911"/>
                <scope line="914"/>
                <declaration name="eqn" type="double[]" line="917"/>
                <declaration name="res" type="double[]" line="918"/>
                <scope line="919"/>
                <scope line="923"/>
                <declaration name="dx" type="double" line="927"/>
                <declaration name="dy" type="double" line="928"/>
                <declaration name="k" type="double" line="929"/>
                <declaration name="c1tag" type="int" line="930"/>
                <scope line="931"/>
                <scope line="934"/>
                <scope line="937"/>
                <scope line="940"/>
                <scope line="943"/>
                <declaration name="num" type="int" line="948"/>
            </method>
            <javadoc line="953">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="957">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="960">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="964">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="965"/>
            </method>
            <javadoc line="970">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="974">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="977">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="981"/>
            <javadoc line="984">
                Returns an iteration object that defines the boundary of the
                  shape of this &lt;code&gt;QuadCurve2D&lt;/code&gt;.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;QuadCurve2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; object do not affect any iterations of
                  that geometry that are already in process.                
                <param>
                    at an optional {@link AffineTransform} to apply to the
                      shape boundary                    
                </param>
                <return>
                    a {@link PathIterator} object that defines the boundary
                      of the shape.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="998">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1001">
                Returns an iteration object that defines the boundary of the
                  flattened shape of this &lt;code&gt;QuadCurve2D&lt;/code&gt;.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;QuadCurve2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;QuadCurve2D&lt;/code&gt; object do not affect any iterations of
                  that geometry that are already in process.                
                <param>
                    at an optional <code>AffineTransform</code> to apply
                      to the boundary of the shape                    
                </param>
                <param>
                    flatness the maximum distance that the control points for a
                      subdivided curve can be with respect to a line connecting
                      the end points of this curve before this curve is
                      replaced by a straight line connecting the end points.                    
                </param>
                <return>
                    a <code>PathIterator</code> object that defines the
                      flattened boundary of the shape.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="1019">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <javadoc line="1022">
                Creates a new object of the same class and with the same contents
                  as this object.                
                <return>
                    a clone of this instance.                    
                </return>
                <exception>
                    OutOfMemoryError            if there is not enough memory.                    
                </exception>
                <see>
                    java.lang.Cloneable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="1030">
                <scope line="1031"/>
                <scope line="1034"/>
            </method>
        </class>
    </source>