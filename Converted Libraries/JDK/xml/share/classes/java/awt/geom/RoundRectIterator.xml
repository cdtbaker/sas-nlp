<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="RoundRectIterator" line="30">
            <comment line="90">
                For each array:
                     4 values for each point {v0, v1, v2, v3}:
                         point = (x + v0 * w + v1 * arcWidth,
                                  y + v2 * h + v3 * arcHeight);                
            </comment>
            <implements interface="PathIterator"/>
            <javadoc line="30">
                A utility class to iterate over the path segments of an rounded rectangle
                  through the PathIterator interface.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="x" type="double" line="37"/>
            <declaration name="affine" type="AffineTransform" line="38"/>
            <declaration name="index" type="int" line="39"/>
            <method name="RoundRectIterator" type="constructor" line="41">
                <params>
                    <param name="rr" type="RoundRectangle2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <comment line="51">
                    Don&apos;t draw anything...                    
                </comment>
                <scope line="49"/>
            </method>
            <javadoc line="55">
                Return the winding rule for determining the insideness of the
                  path.                
                <see>
                    #WIND_EVEN_ODD                    
                </see>
                <see>
                    #WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="61"/>
            <javadoc line="65">
                Tests if there are more points to read.                
                <return>
                    true if there are more points to read                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="69"/>
            <javadoc line="73">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="78"/>
            <declaration name="angle" type="double" line="82"/>
            <declaration name="a" type="double" line="83"/>
            <declaration name="b" type="double" line="84"/>
            <declaration name="c" type="double" line="85"/>
            <declaration name="cv" type="double" line="86"/>
            <declaration name="acv" type="double" line="87"/>
            <declaration name="ctrlpts" type="double" line="93"/>
            <declaration name="types" type="int" line="113"/>
            <javadoc line="122">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="140">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="141"/>
                <declaration name="ctrls" type="double" line="144"/>
                <declaration name="nc" type="int" line="145"/>
                <scope line="146"/>
                <scope line="150"/>
            </method>
            <javadoc line="156">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="174">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="175"/>
                <declaration name="ctrls" type="double" line="178"/>
                <declaration name="nc" type="int" line="179"/>
                <scope line="180"/>
                <scope line="184"/>
            </method>
        </class>
    </source>