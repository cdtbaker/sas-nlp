<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Arrays"/>
        <import package="java.io.Serializable"/>
        <import package="sun.awt.geom.Curve"/>
        <import package="java.lang.Math.abs"/>
        <import package="java.lang.Math.max"/>
        <import package="java.lang.Math.ulp"/>
        <class name="CubicCurve2D" line="38">
            <comment line="1176">
                preconditions: eqn != res &amp;&amp; eqn[3] != 0 &amp;&amp; num &gt; 1
                 This method tries to improve the accuracy of the roots of eqn (which
                 should be in res). It also might eliminate roots in res if it decideds
                 that they&apos;re not real roots. It will not check for roots that the
                 computation of res might have missed, so this method should only be
                 used when the roots in res have been computed using an algorithm
                 that never underestimates the number of roots (such as solveCubic above)                
            </comment>
            <comment line="1282">
                use newton&apos;s method.                
            </comment>
            <comment line="1381">
                Computes M+1 where M is an upper bound for all the roots in of eqn.
                 See: http:en.wikipedia.orgwikiSturm%27s_theorem#Applications.
                 The above link doesn&apos;t contain a proof, but I [dlila] proved it myself
                 so the result is reliable. The proof isn&apos;t difficult, but it&apos;s a bit
                 long to include here.
                 Precondition: eqn must represent a cubic polynomial                
            </comment>
            <implements interface="Shape"/>
            <implements interface="Cloneable"/>
            <javadoc line="38">
                The &lt;code&gt;CubicCurve2D&lt;/code&gt; class defines a cubic parametric curve
                  segment in {@code (x,y)} coordinate space.
                  &lt;p&gt;
                  This class is only the abstract superclass for all objects which
                  store a 2D cubic curve segment.
                  The actual storage representation of the coordinates is left to
                  the subclass.                
                <author>
                    Jim Graham                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <class name="Float" line="52">
                <extends class="CubicCurve2D"/>
                <comment line="330">
                    JDK 1.6 serialVersionUID                    
                </comment>
                <comment line="576">
                    JDK 1.6 serialVersionUID                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="52">
                    A cubic parametric curve segment specified with{@code float} coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="float" line="58"/>
                <javadoc line="58">
                    The X coordinate of the start point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="float" line="66"/>
                <javadoc line="66">
                    The Y coordinate of the start point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx1" type="float" line="74"/>
                <javadoc line="74">
                    The X coordinate of the first control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly1" type="float" line="82"/>
                <javadoc line="82">
                    The Y coordinate of the first control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx2" type="float" line="90"/>
                <javadoc line="90">
                    The X coordinate of the second control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly2" type="float" line="98"/>
                <javadoc line="98">
                    The Y coordinate of the second control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="float" line="106"/>
                <javadoc line="106">
                    The X coordinate of the end point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="float" line="114"/>
                <javadoc line="114">
                    The Y coordinate of the end point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="122">
                    Constructs and initializes a CubicCurve with coordinates
                      (0, 0, 0, 0, 0, 0, 0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="127"/>
                <javadoc line="130">
                    Constructs and initializes a {@code CubicCurve2D} from
                      the specified {@code float} coordinates.                    
                    <param>
                        x1 the X coordinate for the start point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y1 the Y coordinate for the start point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx1 the X coordinate for the first control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly1 the Y coordinate for the first control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx2 the X coordinate for the second control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly2 the Y coordinate for the second control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        x2 the X coordinate for the end point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y2 the Y coordinate for the end point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Float" type="constructor" line="156">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="ctrlx1" type="float"/>
                        <param name="ctrly1" type="float"/>
                        <param name="ctrlx2" type="float"/>
                        <param name="ctrly2" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="160">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="164"/>
                <javadoc line="168">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="172"/>
                <javadoc line="176">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="180"/>
                <javadoc line="184">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX1" type="double" line="188"/>
                <javadoc line="192">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY1" type="double" line="196"/>
                <javadoc line="200">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlP1" type="Point2D" line="204"/>
                <javadoc line="208">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX2" type="double" line="212"/>
                <javadoc line="216">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY2" type="double" line="220"/>
                <javadoc line="224">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlP2" type="Point2D" line="228"/>
                <javadoc line="232">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="236"/>
                <javadoc line="240">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="244"/>
                <javadoc line="248">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="252"/>
                <javadoc line="256">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="264">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx1" type="double"/>
                        <param name="ctrly1" type="double"/>
                        <param name="ctrlx2" type="double"/>
                        <param name="ctrly2" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="275">
                    Sets the location of the end points and control points
                      of this curve to the specified {@code float} coordinates.                    
                    <param>
                        x1 the X coordinate used to set the start point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y1 the Y coordinate used to set the start point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx1 the X coordinate used to set the first control point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly1 the Y coordinate used to set the first control point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx2 the X coordinate used to set the second control point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly2 the Y coordinate used to set the second control point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        x2 the X coordinate used to set the end point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y2 the Y coordinate used to set the end point
                          of this {@code CubicCurve2D}                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="301">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="ctrlx1" type="float"/>
                        <param name="ctrly1" type="float"/>
                        <param name="ctrlx2" type="float"/>
                        <param name="ctrly2" type="float"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                    </params>
                </method>
                <javadoc line="312">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="316">
                    <declaration name="left" type="float" line="317"/>
                    <declaration name="top" type="float" line="319"/>
                    <declaration name="right" type="float" line="321"/>
                    <declaration name="bottom" type="float" line="323"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="332"/>
            </class>
            <class name="Double" line="335">
                <extends class="CubicCurve2D"/>
                <comment line="330">
                    JDK 1.6 serialVersionUID                    
                </comment>
                <comment line="576">
                    JDK 1.6 serialVersionUID                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="335">
                    A cubic parametric curve segment specified with{@code double} coordinates.                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <declaration name="x1" type="double" line="341"/>
                <javadoc line="341">
                    The X coordinate of the start point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y1" type="double" line="349"/>
                <javadoc line="349">
                    The Y coordinate of the start point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx1" type="double" line="357"/>
                <javadoc line="357">
                    The X coordinate of the first control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly1" type="double" line="365"/>
                <javadoc line="365">
                    The Y coordinate of the first control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrlx2" type="double" line="373"/>
                <javadoc line="373">
                    The X coordinate of the second control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="ctrly2" type="double" line="381"/>
                <javadoc line="381">
                    The Y coordinate of the second control point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="x2" type="double" line="389"/>
                <javadoc line="389">
                    The X coordinate of the end point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="y2" type="double" line="397"/>
                <javadoc line="397">
                    The Y coordinate of the end point
                      of the cubic curve segment.                    
                    <since>
                        1.2                        
                    </since>
                    <serial>
                                                
                    </serial>
                </javadoc>
                <javadoc line="405">
                    Constructs and initializes a CubicCurve with coordinates
                      (0, 0, 0, 0, 0, 0, 0, 0).                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="410"/>
                <javadoc line="413">
                    Constructs and initializes a {@code CubicCurve2D} from
                      the specified {@code double} coordinates.                    
                    <param>
                        x1 the X coordinate for the start point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y1 the Y coordinate for the start point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx1 the X coordinate for the first control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly1 the Y coordinate for the first control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrlx2 the X coordinate for the second control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        ctrly2 the Y coordinate for the second control point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        x2 the X coordinate for the end point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <param>
                        y2 the Y coordinate for the end point
                          of the resulting {@code CubicCurve2D}                        
                    </param>
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="Double" type="constructor" line="439">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx1" type="double"/>
                        <param name="ctrly1" type="double"/>
                        <param name="ctrlx2" type="double"/>
                        <param name="ctrly2" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="443">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX1" type="double" line="447"/>
                <javadoc line="451">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY1" type="double" line="455"/>
                <javadoc line="459">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP1" type="Point2D" line="463"/>
                <javadoc line="467">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX1" type="double" line="471"/>
                <javadoc line="475">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY1" type="double" line="479"/>
                <javadoc line="483">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlP1" type="Point2D" line="487"/>
                <javadoc line="491">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlX2" type="double" line="495"/>
                <javadoc line="499">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlY2" type="double" line="503"/>
                <javadoc line="507">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getCtrlP2" type="Point2D" line="511"/>
                <javadoc line="515">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getX2" type="double" line="519"/>
                <javadoc line="523">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getY2" type="double" line="527"/>
                <javadoc line="531">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getP2" type="Point2D" line="535"/>
                <javadoc line="539">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="setCurve" type="void" line="547">
                    <params>
                        <param name="x1" type="double"/>
                        <param name="y1" type="double"/>
                        <param name="ctrlx1" type="double"/>
                        <param name="ctrly1" type="double"/>
                        <param name="ctrlx2" type="double"/>
                        <param name="ctrly2" type="double"/>
                        <param name="x2" type="double"/>
                        <param name="y2" type="double"/>
                    </params>
                </method>
                <javadoc line="558">
                    {@inheritDoc}                    
                    <since>
                        1.2                        
                    </since>
                </javadoc>
                <method name="getBounds2D" type="Rectangle2D" line="562">
                    <declaration name="left" type="double" line="563"/>
                    <declaration name="top" type="double" line="565"/>
                    <declaration name="right" type="double" line="567"/>
                    <declaration name="bottom" type="double" line="569"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="578"/>
            </class>
            <javadoc line="581">
                This is an abstract class that cannot be instantiated directly.
                  Type-specific implementation subclasses are available for
                  instantiation and provide a number of formats for storing
                  the information necessary to satisfy the various accessor
                  methods below.                
                <see>
                    java.awt.geom.CubicCurve2D.Float                    
                </see>
                <see>
                    java.awt.geom.CubicCurve2D.Double                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="CubicCurve2D" type="constructor" line="592"/>
            <method name="getX1" type="double" line="595"/>
            <javadoc line="595">
                Returns the X coordinate of the start point in double precision.                
                <return>
                    the X coordinate of the start point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY1" type="double" line="603"/>
            <javadoc line="603">
                Returns the Y coordinate of the start point in double precision.                
                <return>
                    the Y coordinate of the start point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP1" type="Point2D" line="611"/>
            <javadoc line="611">
                Returns the start point.                
                <return>
                    a {@code Point2D} that is the start point of
                      the {@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlX1" type="double" line="619"/>
            <javadoc line="619">
                Returns the X coordinate of the first control point in double precision.                
                <return>
                    the X coordinate of the first control point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlY1" type="double" line="627"/>
            <javadoc line="627">
                Returns the Y coordinate of the first control point in double precision.                
                <return>
                    the Y coordinate of the first control point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlP1" type="Point2D" line="635"/>
            <javadoc line="635">
                Returns the first control point.                
                <return>
                    a {@code Point2D} that is the first control point of
                      the {@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlX2" type="double" line="643"/>
            <javadoc line="643">
                Returns the X coordinate of the second control point
                  in double precision.                
                <return>
                    the X coordinate of the second control point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlY2" type="double" line="652"/>
            <javadoc line="652">
                Returns the Y coordinate of the second control point
                  in double precision.                
                <return>
                    the Y coordinate of the second control point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getCtrlP2" type="Point2D" line="661"/>
            <javadoc line="661">
                Returns the second control point.                
                <return>
                    a {@code Point2D} that is the second control point of
                      the {@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getX2" type="double" line="669"/>
            <javadoc line="669">
                Returns the X coordinate of the end point in double precision.                
                <return>
                    the X coordinate of the end point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getY2" type="double" line="677"/>
            <javadoc line="677">
                Returns the Y coordinate of the end point in double precision.                
                <return>
                    the Y coordinate of the end point of the{@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getP2" type="Point2D" line="685"/>
            <javadoc line="685">
                Returns the end point.                
                <return>
                    a {@code Point2D} that is the end point of
                      the {@code CubicCurve2D}.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="693"/>
            <javadoc line="693">
                Sets the location of the end points and control points of this curve
                  to the specified double coordinates.                
                <param>
                    x1 the X coordinate used to set the start point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    y1 the Y coordinate used to set the start point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx1 the X coordinate used to set the first control point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly1 the Y coordinate used to set the first control point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx2 the X coordinate used to set the second control point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly2 the Y coordinate used to set the second control point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    x2 the X coordinate used to set the end point
                      of this {@code CubicCurve2D}                    
                </param>
                <param>
                    y2 the Y coordinate used to set the end point
                      of this {@code CubicCurve2D}                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <javadoc line="720">
                Sets the location of the end points and control points of this curve
                  to the double coordinates at the specified offset in the specified
                  array.                
                <param>
                    coords a double array containing coordinates                    
                </param>
                <param>
                    offset the index of <code>coords</code> from which to begin
                      setting the end points and control points of this curve
                      to the coordinates contained in <code>coords</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="730">
                <params>
                    <param name="coords" type="double[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="737">
                Sets the location of the end points and control points of this curve
                  to the specified &lt;code&gt;Point2D&lt;/code&gt; coordinates.                
                <param>
                    p1 the first specified <code>Point2D</code> used to set the
                      start point of this curve                    
                </param>
                <param>
                    cp1 the second specified <code>Point2D</code> used to set the
                      first control point of this curve                    
                </param>
                <param>
                    cp2 the third specified <code>Point2D</code> used to set the
                      second control point of this curve                    
                </param>
                <param>
                    p2 the fourth specified <code>Point2D</code> used to set the
                      end point of this curve                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="750">
                <params>
                    <param name="p1" type="Point2D"/>
                    <param name="cp1" type="Point2D"/>
                    <param name="cp2" type="Point2D"/>
                    <param name="p2" type="Point2D"/>
                </params>
            </method>
            <javadoc line="755">
                Sets the location of the end points and control points of this curve
                  to the coordinates of the &lt;code&gt;Point2D&lt;/code&gt; objects at the specified
                  offset in the specified array.                
                <param>
                    pts an array of <code>Point2D</code> objects                    
                </param>
                <param>
                    offset  the index of <code>pts</code> from which to begin setting
                      the end points and control points of this curve to the
                      points contained in <code>pts</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="765">
                <params>
                    <param name="pts" type="Point2D[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="772">
                Sets the location of the end points and control points of this curve
                  to the same as those in the specified &lt;code&gt;CubicCurve2D&lt;/code&gt;.                
                <param>
                    c the specified <code>CubicCurve2D</code>                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setCurve" type="void" line="778">
                <params>
                    <param name="c" type="CubicCurve2D"/>
                </params>
            </method>
            <javadoc line="783">
                Returns the square of the flatness of the cubic curve specified
                  by the indicated control points. The flatness is the maximum distance
                  of a control point from the line connecting the end points.                
                <param>
                    x1 the X coordinate that specifies the start point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    y1 the Y coordinate that specifies the start point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx1 the X coordinate that specifies the first control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly1 the Y coordinate that specifies the first control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx2 the X coordinate that specifies the second control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly2 the Y coordinate that specifies the second control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    x2 the X coordinate that specifies the end point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    y2 the Y coordinate that specifies the end point
                      of a {@code CubicCurve2D}                    
                </param>
                <return>
                    the square of the flatness of the {@code CubicCurve2D}represented by the specified coordinates.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="811">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="ctrlx1" type="double"/>
                    <param name="ctrly1" type="double"/>
                    <param name="ctrlx2" type="double"/>
                    <param name="ctrly2" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <javadoc line="817">
                Returns the flatness of the cubic curve specified
                  by the indicated control points. The flatness is the maximum distance
                  of a control point from the line connecting the end points.                
                <param>
                    x1 the X coordinate that specifies the start point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    y1 the Y coordinate that specifies the start point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx1 the X coordinate that specifies the first control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly1 the Y coordinate that specifies the first control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrlx2 the X coordinate that specifies the second control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    ctrly2 the Y coordinate that specifies the second control point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    x2 the X coordinate that specifies the end point
                      of a {@code CubicCurve2D}                    
                </param>
                <param>
                    y2 the Y coordinate that specifies the end point
                      of a {@code CubicCurve2D}                    
                </param>
                <return>
                    the flatness of the {@code CubicCurve2D}represented by the specified coordinates.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="845">
                <params>
                    <param name="x1" type="double"/>
                    <param name="y1" type="double"/>
                    <param name="ctrlx1" type="double"/>
                    <param name="ctrly1" type="double"/>
                    <param name="ctrlx2" type="double"/>
                    <param name="ctrly2" type="double"/>
                    <param name="x2" type="double"/>
                    <param name="y2" type="double"/>
                </params>
            </method>
            <javadoc line="850">
                Returns the square of the flatness of the cubic curve specified
                  by the control points stored in the indicated array at the
                  indicated index. The flatness is the maximum distance
                  of a control point from the line connecting the end points.                
                <param>
                    coords an array containing coordinates                    
                </param>
                <param>
                    offset the index of <code>coords</code> from which to begin
                      getting the end points and control points of the curve                    
                </param>
                <return>
                    the square of the flatness of the <code>CubicCurve2D</code>
                      specified by the coordinates in <code>coords</code> at
                      the specified offset.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="863">
                <params>
                    <param name="coords" type="double"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="870">
                Returns the flatness of the cubic curve specified
                  by the control points stored in the indicated array at the
                  indicated index.  The flatness is the maximum distance
                  of a control point from the line connecting the end points.                
                <param>
                    coords an array containing coordinates                    
                </param>
                <param>
                    offset the index of <code>coords</code> from which to begin
                      getting the end points and control points of the curve                    
                </param>
                <return>
                    the flatness of the <code>CubicCurve2D</code>
                      specified by the coordinates in <code>coords</code> at
                      the specified offset.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="883">
                <params>
                    <param name="coords" type="double"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="890">
                Returns the square of the flatness of this curve.  The flatness is the
                  maximum distance of a control point from the line connecting the
                  end points.                
                <return>
                    the square of the flatness of this curve.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatnessSq" type="double" line="897"/>
            <javadoc line="902">
                Returns the flatness of this curve.  The flatness is the
                  maximum distance of a control point from the line connecting the
                  end points.                
                <return>
                    the flatness of this curve.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getFlatness" type="double" line="909"/>
            <javadoc line="914">
                Subdivides this cubic curve and stores the resulting two
                  subdivided curves into the left and right curve parameters.
                  Either or both of the left and right objects may be the same
                  as this object or null.                
                <param>
                    left the cubic curve object for storing for the left or
                      first half of the subdivided curve                    
                </param>
                <param>
                    right the cubic curve object for storing for the right or
                      second half of the subdivided curve                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="925">
                <params>
                    <param name="left" type="CubicCurve2D"/>
                    <param name="right" type="CubicCurve2D"/>
                </params>
            </method>
            <javadoc line="929">
                Subdivides the cubic curve specified by the &lt;code&gt;src&lt;/code&gt; parameter
                  and stores the resulting two subdivided curves into the
                  &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; curve parameters.
                  Either or both of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; objects
                  may be the same as the &lt;code&gt;src&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    src the cubic curve to be subdivided                    
                </param>
                <param>
                    left the cubic curve object for storing the left or
                      first half of the subdivided curve                    
                </param>
                <param>
                    right the cubic curve object for storing the right or
                      second half of the subdivided curve                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="944">
                <params>
                    <param name="src" type="CubicCurve2D"/>
                    <param name="left" type="CubicCurve2D"/>
                    <param name="right" type="CubicCurve2D"/>
                </params>
                <declaration name="x1" type="double" line="945"/>
                <declaration name="y1" type="double" line="946"/>
                <declaration name="ctrlx1" type="double" line="947"/>
                <declaration name="ctrly1" type="double" line="948"/>
                <declaration name="ctrlx2" type="double" line="949"/>
                <declaration name="ctrly2" type="double" line="950"/>
                <declaration name="x2" type="double" line="951"/>
                <declaration name="y2" type="double" line="952"/>
                <declaration name="centerx" type="double" line="953"/>
                <declaration name="centery" type="double" line="954"/>
                <declaration name="ctrlx12" type="double" line="959"/>
                <declaration name="ctrly12" type="double" line="960"/>
                <declaration name="ctrlx21" type="double" line="961"/>
                <declaration name="ctrly21" type="double" line="962"/>
                <scope line="965"/>
                <scope line="969"/>
            </method>
            <javadoc line="975">
                Subdivides the cubic curve specified by the coordinates
                  stored in the &lt;code&gt;src&lt;/code&gt; array at indices &lt;code&gt;srcoff&lt;/code&gt;
                  through (&lt;code&gt;srcoff&lt;/code&gt;&amp;nbsp;+&amp;nbsp;7) and stores the
                  resulting two subdivided curves into the two result arrays at the
                  corresponding indices.
                  Either or both of the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;
                  arrays may be &lt;code&gt;null&lt;/code&gt; or a reference to the same array
                  as the &lt;code&gt;src&lt;/code&gt; array.
                  Note that the last point in the first subdivided curve is the
                  same as the first point in the second subdivided curve. Thus,
                  it is possible to pass the same array for &lt;code&gt;left&lt;/code&gt;
                  and &lt;code&gt;right&lt;/code&gt; and to use offsets, such as &lt;code&gt;rightoff&lt;/code&gt;
                  equals (&lt;code&gt;leftoff&lt;/code&gt; + 6), in order
                  to avoid allocating extra storage for this common point.                
                <param>
                    src the array holding the coordinates for the source curve                    
                </param>
                <param>
                    srcoff the offset into the array of the beginning of the
                      the 6 source coordinates                    
                </param>
                <param>
                    left the array for storing the coordinates for the first
                      half of the subdivided curve                    
                </param>
                <param>
                    leftoff the offset into the array of the beginning of the
                      the 6 left coordinates                    
                </param>
                <param>
                    right the array for storing the coordinates for the second
                      half of the subdivided curve                    
                </param>
                <param>
                    rightoff the offset into the array of the beginning of the
                      the 6 right coordinates                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="subdivide" type="void" line="1005">
                <params>
                    <param name="src" type="double"/>
                    <param name="srcoff" type="int"/>
                    <param name="left" type="double"/>
                    <param name="leftoff" type="int"/>
                    <param name="right" type="double"/>
                    <param name="rightoff" type="int"/>
                </params>
                <declaration name="x1" type="double" line="1006"/>
                <declaration name="y1" type="double" line="1007"/>
                <declaration name="ctrlx1" type="double" line="1008"/>
                <declaration name="ctrly1" type="double" line="1009"/>
                <declaration name="ctrlx2" type="double" line="1010"/>
                <declaration name="ctrly2" type="double" line="1011"/>
                <declaration name="x2" type="double" line="1012"/>
                <declaration name="y2" type="double" line="1013"/>
                <scope line="1014"/>
                <scope line="1018"/>
                <declaration name="centerx" type="double" line="1026"/>
                <declaration name="centery" type="double" line="1027"/>
                <scope line="1034"/>
                <scope line="1042"/>
            </method>
            <javadoc line="1052">
                Solves the cubic whose coefficients are in the &lt;code&gt;eqn&lt;/code&gt;
                  array and places the non-complex roots back into the same array,
                  returning the number of roots.  The solved cubic is represented
                  by the equation:
                  &lt;pre&gt;
                  eqn = {c, b, a, d}
                  dx^3 + ax^2 + bx + c = 0
                  &lt;/pre&gt;
                  A return value of -1 is used to distinguish a constant equation
                  that might be always 0 or never 0 from an equation that has no
                  zeroes.                
                <param>
                    eqn an array containing coefficients for a cubic                    
                </param>
                <return>
                    the number of roots, or -1 if the equation is a constant.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="solveCubic" type="int" line="1068">
                <params>
                    <param name="eqn" type="double"/>
                </params>
            </method>
            <javadoc line="1072">
                Solve the cubic whose coefficients are in the &lt;code&gt;eqn&lt;/code&gt;
                  array and place the non-complex roots into the &lt;code&gt;res&lt;/code&gt;
                  array, returning the number of roots.
                  The cubic solved is represented by the equation:
                  eqn = {c, b, a, d}
                  dx^3 + ax^2 + bx + c = 0
                  A return value of -1 is used to distinguish a constant equation,
                  which may be always 0 or never 0, from an equation which has no
                  zeroes.                
                <param>
                    eqn the specified array of coefficients to use to solve
                      the cubic equation                    
                </param>
                <param>
                    res the array that contains the non-complex roots
                      resulting from the solution of the cubic equation                    
                </param>
                <return>
                    the number of roots, or -1 if the equation is a constant                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="solveCubic" type="int" line="1089">
                <params>
                    <param name="eqn" type="double"/>
                    <param name="res" type="double"/>
                </params>
                <comment line="1091">
                    From Graphics Gems:
                     http:tog.acm.org/resources/GraphicsGems/gems/Roots3And4.c                    
                </comment>
                <comment line="1098">
                                        
                </comment>
                <comment line="1104">
                    substitute x = y - A/3 to eliminate quadratic term:
                         x^3 +Px + Q = 0
                    
                     Since we actually need P/3 and Q/2 for all of the
                     calculations that follow, we will calculate
                     p = P/3
                     q = Q/2
                     instead and use those values for simplicity of the code.                    
                </comment>
                <comment line="1116">
                                        
                </comment>
                <comment line="1124">
                                        
                </comment>
                <comment line="1125">
                    see: http://en.wikipedia.org/wiki/Cubic_function#Trigonometric_.28and_hyperbolic.29_method                    
                </comment>
                <comment line="1143">
                    Please see the comment in fixRoots marked &apos;XXX&apos; before changing
                     any of the code in this case.                    
                </comment>
                <comment line="1160">
                    this must be done after the potential Arrays.copyOf                    
                </comment>
                <comment line="1164">
                    num == 3 || num == 2                    
                </comment>
                <comment line="1171">
                    Copies res[2] to res[1] if needed                    
                </comment>
                <declaration name="d" type="double" line="1092"/>
                <scope line="1093"/>
                <declaration name="A" type="double" line="1098"/>
                <declaration name="B" type="double" line="1099"/>
                <declaration name="C" type="double" line="1100"/>
                <declaration name="sq_A" type="double" line="1111"/>
                <declaration name="p" type="double" line="1112"/>
                <declaration name="q" type="double" line="1113"/>
                <declaration name="cb_p" type="double" line="1117"/>
                <declaration name="D" type="double" line="1118"/>
                <declaration name="sub" type="double" line="1120"/>
                <declaration name="num" type="int" line="1122"/>
                <scope line="1123">
                    <declaration name="phi" type="double" line="1125"/>
                    <declaration name="t" type="double" line="1126"/>
                    <scope line="1128"/>
                    <scope line="1137"/>
                </scope>
                <scope line="1141">
                    <declaration name="sqrt_D" type="double" line="1144"/>
                    <declaration name="u" type="double" line="1145"/>
                    <declaration name="v" type="double" line="1146"/>
                    <declaration name="uv" type="double" line="1147"/>
                    <declaration name="err" type="double" line="1151"/>
                    <scope line="1152">
                        <scope line="1153"/>
                    </scope>
                </scope>
                <scope line="1163"/>
                <scope line="1166"/>
                <scope line="1169"/>
            </method>
            <method name="fixRoots" type="int" line="1182">
                <params>
                    <param name="eqn" type="double[]"/>
                    <param name="res" type="double[]"/>
                    <param name="num" type="int"/>
                </params>
                <comment line="1195">
                    below we use critCount to possibly filter out roots that shouldn&apos;t
                     have been computed. We require that eqn[3] != 0, so eqn is a proper
                     cubic, which means that its limits at -/+inf are -/+inf or +/-inf.
                     Therefore, if critCount==2, the curve is shaped like a sideways S,
                     and it could have 1-3 roots. If critCount==0 it is monotonic, and
                     if critCount==1 it is monotonic with a single point where it is
                     flat. In the last 2 cases there can only be 1 root. So in cases
                     where num &gt; 1 but critCount &lt; 2, we eliminate all roots in res
                     except one.                    
                </comment>
                <comment line="1211">
                    this just tries to improve the accuracy of the computed
                     roots using Newton&apos;s method.                    
                </comment>
                <comment line="1218">
                    we only need fx0 and fxe for the sign of the polynomial
                     at -inf and +inf respectively, so we don&apos;t need to do
                     fx0 = solveEqn(eqn, 3, x0); fxe = solveEqn(eqn, 3, xe)                    
                </comment>
                <comment line="1227">
                    if critCount == 1 or critCount == 0, but num == 3 then
                     something has gone wrong. This branch and the one below
                     would ideally never execute, but if they do we can&apos;t know
                     which of the computed roots is closest to the real root;
                     therefore, we can&apos;t use refineRootWithHint. But even if
                     we did know, being here most likely means that the
                     curve is very flat close to two of the computed roots
                     (or maybe even all three). This might make Newton&apos;s method
                     fail altogether, which would be a pain to detect and fix.
                     This is why we use a very stable bisection method.                    
                </comment>
                <comment line="1241">
                                        
                </comment>
                <comment line="1244">
                    return 1                    
                </comment>
                <comment line="1247">
                    return 1                    
                </comment>
                <comment line="1250">
                    XXX: here we assume that res[0] has better accuracy than res[1].
                     This is true because this method is only used from solveCubic
                     which puts in res[0] the root that it would compute anyway even
                     if num==1. If this method is ever used from any other method, or
                     if the solveCubic implementation changes, this assumption should
                     be reevaluated, and the choice of goodRoot might have to become
                     goodRoot = (abs(eqn&apos;(res[0])) &gt; abs(eqn&apos;(res[1]))) ? res[0] : res[1]
                     where eqn&apos; is the derivative of eqn.                    
                </comment>
                <comment line="1262">
                    If a cubic curve really has 2 roots, one of those roots must be
                     at a critical point. That can&apos;t be goodRoot, so we compute x to
                     be the farthest critical point from goodRoot. If there are two
                     roots, x must be the second one, so we evaluate eqn at x, and if
                     it is zero (or close enough) we put x in res[1] (or badRoot, if
                     |solveEqn(eqn, 3, badRoot)| &lt; |solveEqn(eqn, 3, x)| but this
                     shouldn&apos;t happen often).                    
                </comment>
                <comment line="1277">
                    else there can only be one root - goodRoot, and it is already in res[0]                    
                </comment>
                <declaration name="intervals" type="double[]" line="1183"/>
                <declaration name="critCount" type="int" line="1184"/>
                <scope line="1185"/>
                <scope line="1188">
                    <declaration name="tmp" type="double" line="1189"/>
                </scope>
                <scope line="1204">
                    <declaration name="xe" type="double" line="1205"/>
                    <declaration name="x0" type="double" line="1206"/>
                    <scope line="1209"/>
                    <scope line="1216">
                        <declaration name="fxe" type="double" line="1220"/>
                        <declaration name="fx0" type="double" line="1221"/>
                        <declaration name="x1" type="double" line="1223"/>
                        <declaration name="fx1" type="double" line="1224"/>
                        <scope line="1236"/>
                        <scope line="1238"/>
                        <scope line="1240"/>
                    </scope>
                    <scope line="1244"/>
                </scope>
                <scope line="1248">
                    <declaration name="goodRoot" type="double" line="1257"/>
                    <declaration name="badRoot" type="double" line="1258"/>
                    <declaration name="x1" type="double" line="1259"/>
                    <declaration name="x2" type="double" line="1260"/>
                    <declaration name="x" type="double" line="1268"/>
                    <declaration name="fx" type="double" line="1269"/>
                    <scope line="1271">
                        <declaration name="badRootVal" type="double" line="1272"/>
                    </scope>
                </scope>
            </method>
            <method name="refineRootWithHint" type="double" line="1282">
                <params>
                    <param name="eqn" type="double[]"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="t" type="double"/>
                </params>
                <scope line="1283"/>
                <declaration name="deriv" type="double[]" line="1286"/>
                <declaration name="origt" type="double" line="1287"/>
                <scope line="1288">
                    <declaration name="slope" type="double" line="1289"/>
                    <declaration name="y" type="double" line="1290"/>
                    <declaration name="delta" type="double" line="1291"/>
                    <declaration name="newt" type="double" line="1292"/>
                    <scope line="1294"/>
                </scope>
                <scope line="1300"/>
            </method>
            <method name="bisectRootWithHint" type="double" line="1306">
                <params>
                    <param name="eqn" type="double[]"/>
                    <param name="x0" type="double"/>
                    <param name="xe" type="double"/>
                    <param name="hint" type="double"/>
                </params>
                <declaration name="delta1" type="double" line="1307"/>
                <declaration name="delta2" type="double" line="1308"/>
                <declaration name="x02" type="double" line="1309"/>
                <declaration name="xe2" type="double" line="1310"/>
                <declaration name="fx02" type="double" line="1311"/>
                <declaration name="fxe2" type="double" line="1312"/>
                <scope line="1313">
                    <scope line="1314"/>
                </scope>
                <scope line="1326"/>
                <scope line="1329"/>
            </method>
            <method name="bisectRoot" type="double" line="1336">
                <params>
                    <param name="eqn" type="double[]"/>
                    <param name="x0" type="double"/>
                    <param name="xe" type="double"/>
                </params>
                <declaration name="fx0" type="double" line="1337"/>
                <declaration name="m" type="double" line="1338"/>
                <scope line="1339">
                    <declaration name="fm" type="double" line="1340"/>
                    <scope line="1341"/>
                    <scope line="1344"/>
                    <scope line="1346"/>
                </scope>
            </method>
            <method name="inInterval" type="boolean" line="1355">
                <params>
                    <param name="t" type="double"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                </params>
            </method>
            <method name="within" type="boolean" line="1359">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="err" type="double"/>
                </params>
                <declaration name="d" type="double" line="1360"/>
            </method>
            <method name="iszero" type="boolean" line="1364">
                <params>
                    <param name="x" type="double"/>
                    <param name="err" type="double"/>
                </params>
            </method>
            <method name="oppositeSigns" type="boolean" line="1368">
                <params>
                    <param name="x1" type="double"/>
                    <param name="x2" type="double"/>
                </params>
            </method>
            <method name="solveEqn" type="double" line="1372">
                <params>
                    <param name="eqn" type="double"/>
                    <param name="order" type="int"/>
                    <param name="t" type="double"/>
                </params>
                <declaration name="v" type="double" line="1373"/>
                <scope line="1374"/>
            </method>
            <method name="getRootUpperBound" type="double" line="1388">
                <params>
                    <param name="eqn" type="double[]"/>
                </params>
                <declaration name="d" type="double" line="1389"/>
                <declaration name="a" type="double" line="1390"/>
                <declaration name="b" type="double" line="1391"/>
                <declaration name="c" type="double" line="1392"/>
                <declaration name="M" type="double" line="1394"/>
            </method>
            <javadoc line="1400">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="1404">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="1407">
                    Either x or y was infinite or NaN.
                     A NaN always produces a negative response to any test
                     and Infinity values cannot be &quot;inside&quot; any path so
                     they should return false as well.                    
                </comment>
                <comment line="1414">
                    We count the &quot;Y&quot; crossings to determine if the point is
                     inside the curve bounded by its closing line.                    
                </comment>
                <scope line="1405"/>
                <declaration name="x1" type="double" line="1415"/>
                <declaration name="y1" type="double" line="1416"/>
                <declaration name="x2" type="double" line="1417"/>
                <declaration name="y2" type="double" line="1418"/>
                <declaration name="crossings" type="int" line="1419"/>
            </method>
            <javadoc line="1429">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="1433">
                <params>
                    <param name="p" type="Point2D"/>
                </params>
            </method>
            <javadoc line="1437">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="1441">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <comment line="1443">
                    Trivially reject non-existant rectangles                    
                </comment>
                <comment line="1449">
                    the intended return value is
                     numCrossings != 0 || numCrossings == Curve.RECT_INTERSECTS
                     but if (numCrossings != 0) numCrossings == INTERSECTS won&apos;t matter
                     and if !(numCrossings != 0) then numCrossings == 0, so
                     numCrossings != RECT_INTERSECT                    
                </comment>
                <scope line="1443"/>
                <declaration name="numCrossings" type="int" line="1447"/>
            </method>
            <javadoc line="1456">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="intersects" type="boolean" line="1460">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="1464">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="1468">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <scope line="1469"/>
                <declaration name="numCrossings" type="int" line="1473"/>
            </method>
            <method name="rectCrossings" type="int" line="1477">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                    <param name="w" type="double"/>
                    <param name="h" type="double"/>
                </params>
                <comment line="1490">
                    we call this with the curve&apos;s direction reversed, because we wanted
                     to call rectCrossingsForLine first, because it&apos;s cheaper.                    
                </comment>
                <declaration name="crossings" type="int" line="1478"/>
                <scope line="1479">
                    <scope line="1485"/>
                </scope>
            </method>
            <javadoc line="1500">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="1504">
                <params>
                    <param name="r" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="1508">
                {@inheritDoc}                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="1512"/>
            <javadoc line="1516">
                Returns an iteration object that defines the boundary of the
                  shape.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;CubicCurve2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;CubicCurve2D&lt;/code&gt; object do not affect any iterations of
                  that geometry that are already in process.                
                <param>
                    at an optional <code>AffineTransform</code> to be applied to the
                      coordinates as they are returned in the iteration, or <code>null</code>
                      if untransformed coordinates are desired                    
                </param>
                <return>
                    the <code>PathIterator</code> object that returns the
                      geometry of the outline of this <code>CubicCurve2D</code>, one
                      segment at a time.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="1532">
                <params>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="1536">
                Return an iteration object that defines the boundary of the
                  flattened shape.
                  The iterator for this class is not multi-threaded safe,
                  which means that this &lt;code&gt;CubicCurve2D&lt;/code&gt; class does not
                  guarantee that modifications to the geometry of this
                  &lt;code&gt;CubicCurve2D&lt;/code&gt; object do not affect any iterations of
                  that geometry that are already in process.                
                <param>
                    at an optional <code>AffineTransform</code> to be applied to the
                      coordinates as they are returned in the iteration, or <code>null</code>
                      if untransformed coordinates are desired                    
                </param>
                <param>
                    flatness the maximum amount that the control points
                      for a given curve can vary from colinear before a subdivided
                      curve is replaced by a straight line connecting the end points                    
                </param>
                <return>
                    the <code>PathIterator</code> object that returns the
                      geometry of the outline of this <code>CubicCurve2D</code>,
                      one segment at a time.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPathIterator" type="PathIterator" line="1555">
                <params>
                    <param name="at" type="AffineTransform"/>
                    <param name="flatness" type="double"/>
                </params>
            </method>
            <javadoc line="1559">
                Creates a new object of the same class as this object.                
                <return>
                    a clone of this instance.                    
                </return>
                <exception>
                    OutOfMemoryError            if there is not enough memory.                    
                </exception>
                <see>
                    java.lang.Cloneable                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="1567">
                <comment line="1572">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="1568"/>
                <scope line="1570"/>
            </method>
        </class>
    </source>