<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="CubicIterator" line="30">
            <implements interface="PathIterator"/>
            <javadoc line="30">
                A utility class to iterate over the path segments of a cubic curve
                  segment through the PathIterator interface.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="cubic" type="CubicCurve2D" line="37"/>
            <declaration name="affine" type="AffineTransform" line="38"/>
            <declaration name="index" type="int" line="39"/>
            <method name="CubicIterator" type="constructor" line="41">
                <params>
                    <param name="q" type="CubicCurve2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="46">
                Return the winding rule for determining the insideness of the
                  path.                
                <see>
                    #WIND_EVEN_ODD                    
                </see>
                <see>
                    #WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="52"/>
            <javadoc line="56">
                Tests if there are more points to read.                
                <return>
                    true if there are more points to read                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="60"/>
            <javadoc line="64">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="69"/>
            <javadoc line="73">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="91">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="92"/>
                <declaration name="type" type="int" line="95"/>
                <scope line="96"/>
                <scope line="100"/>
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="133">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="134"/>
                <declaration name="type" type="int" line="137"/>
                <scope line="138"/>
                <scope line="142"/>
                <scope line="151"/>
            </method>
        </class>
    </source>