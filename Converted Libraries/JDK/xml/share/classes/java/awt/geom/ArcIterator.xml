<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="ArcIterator" line="30">
            <comment line="112">
                btan computes the length (k) of the control segments at
                 the beginning and end of a cubic bezier that approximates
                 a segment of an arc with extent less than or equal to
                 90 degrees.  This length (k) will be used to generate the
                 2 bezier control points for such a segment.
                
                   Assumptions:
                     a) arc is centered on 0,0 with radius of 1.0
                     b) arc extent is less than 90 degrees
                     c) control points should preserve tangent
                     d) control segments should have equal length
                
                   Initial data:
                     start angle: ang1
                     end angle:   ang2 = ang1 + extent
                     start point: P1 = (x1, y1) = (cos(ang1), sin(ang1))
                     end point:   P4 = (x4, y4) = (cos(ang2), sin(ang2))
                
                   Control points:
                     P2 = (x2, y2)
                     | x2 = x1 - k  sin(ang1) = cos(ang1) - k  sin(ang1)
                     | y2 = y1 + k  cos(ang1) = sin(ang1) + k  cos(ang1)
                
                     P3 = (x3, y3)
                     | x3 = x4 + k  sin(ang2) = cos(ang2) + k  sin(ang2)
                     | y3 = y4 - k  cos(ang2) = sin(ang2) - k  cos(ang2)
                
                 The formula for this length (k) can be found using the
                 following derivations:
                
                   Midpoints:
                     a) bezier (t = 12)
                        bPm = P1  (1-t)^3 +
                              3  P2  t  (1-t)^2 +
                              3  P3  t^2  (1-t) +
                              P4  t^3 =
                            = (P1 + 3P2 + 3P3 + P4)8
                
                     b) arc
                        aPm = (cos((ang1 + ang2)2), sin((ang1 + ang2)2))
                
                   Let angb = (ang2 - ang1)2; angb is half of the angle
                   between ang1 and ang2.
                
                   Solve the equation bPm == aPm
                
                     a) For xm coord:
                        x1 + 3x2 + 3x3 + x4 = 8cos((ang1 + ang2)2)
                
                        cos(ang1) + 3cos(ang1) - 3ksin(ang1) +
                        3cos(ang2) + 3ksin(ang2) + cos(ang2) =
                        = 8cos((ang1 + ang2)2)
                
                        4cos(ang1) + 4cos(ang2) + 3k(sin(ang2) - sin(ang1)) =
                        = 8cos((ang1 + ang2)2)
                
                        8cos((ang1 + ang2)2)cos((ang2 - ang1)2) +
                        6ksin((ang2 - ang1)2)cos((ang1 + ang2)2) =
                        = 8cos((ang1 + ang2)2)
                
                        4cos(angb) + 3ksin(angb) = 4
                
                        k = 4  3  (1 - cos(angb))  sin(angb)
                
                     b) For ym coord we derive the same formula.
                
                 Since this formula can generate &quot;NaN&quot; values for small
                 angles, we will derive a safer form that does not involve
                 dividing by very small values:
                     (1 - cos(angb))  sin(angb) =
                     = (1 - cos(angb))(1 + cos(angb))  sin(angb)(1 + cos(angb)) =
                     = (1 - cos(angb)^2)  sin(angb)(1 + cos(angb)) =
                     = sin(angb)^2  sin(angb)(1 + cos(angb)) =
                     = sin(angb)  (1 + cos(angb))                
            </comment>
            <implements interface="PathIterator"/>
            <javadoc line="30">
                A utility class to iterate over the path segments of an arc
                  through the PathIterator interface.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="x" type="double" line="37"/>
            <declaration name="affine" type="AffineTransform" line="38"/>
            <declaration name="index" type="int" line="39"/>
            <declaration name="arcSegs" type="int" line="40"/>
            <declaration name="lineSegs" type="int" line="41"/>
            <method name="ArcIterator" type="constructor" line="43">
                <params>
                    <param name="a" type="Arc2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <comment line="55">
                    btan(Math.PI / 2);                    
                </comment>
                <declaration name="ext" type="double" line="50"/>
                <scope line="51">
                    <scope line="56"/>
                </scope>
                <scope line="60">
                    <scope line="64"/>
                </scope>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                Return the winding rule for determining the insideness of the
                  path.                
                <see>
                    #WIND_EVEN_ODD                    
                </see>
                <see>
                    #WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="90"/>
            <javadoc line="94">
                Tests if there are more points to read.                
                <return>
                    true if there are more points to read                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="98"/>
            <javadoc line="102">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="107"/>
            <method name="btan" type="double" line="188">
                <params>
                    <param name="increment" type="double"/>
                </params>
            </method>
            <javadoc line="193">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="211">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="212"/>
                <declaration name="angle" type="double" line="215"/>
                <scope line="216">
                    <scope line="219"/>
                </scope>
                <scope line="224">
                    <scope line="225"/>
                    <scope line="230"/>
                </scope>
                <declaration name="relx" type="double" line="236"/>
                <declaration name="rely" type="double" line="237"/>
                <scope line="247"/>
            </method>
            <javadoc line="253">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="271">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="272"/>
                <declaration name="angle" type="double" line="275"/>
                <scope line="276">
                    <scope line="279"/>
                </scope>
                <scope line="284">
                    <scope line="285"/>
                    <scope line="290"/>
                </scope>
                <declaration name="relx" type="double" line="296"/>
                <declaration name="rely" type="double" line="297"/>
                <scope line="307"/>
            </method>
        </class>
    </source>