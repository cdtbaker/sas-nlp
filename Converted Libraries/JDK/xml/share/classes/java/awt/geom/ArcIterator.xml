<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.util"/>
        <class name="ArcIterator" line="3">
            <implements interface="PathIterator"/>
            <javadoc line="3">
                A utility class to iterate over the path segments of an arc
                  through the PathIterator interface.                
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="x" type="double" line="9"/>
            <declaration name="affine" type="AffineTransform" line="10"/>
            <declaration name="index" type="int" line="11"/>
            <declaration name="arcSegs" type="int" line="12"/>
            <declaration name="lineSegs" type="int" line="13"/>
            <method name="ArcIterator" type="constructor" line="14">
                <params>
                    <param name="a" type="Arc2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <declaration name="ext" type="double" line="21"/>
                <scope line="22">
                    <scope line="26"/>
                </scope>
                <scope line="31">
                    <scope line="35"/>
                </scope>
                <scope line="50"/>
            </method>
            <javadoc line="54">
                Return the winding rule for determining the insideness of the
                  path.                
                <see>
                    #WIND_EVEN_ODD                    
                </see>
                <see>
                    #WIND_NON_ZERO                    
                </see>
            </javadoc>
            <method name="getWindingRule" type="int" line="60"/>
            <javadoc line="63">
                Tests if there are more points to read.                
                <return>
                    true if there are more points to read                    
                </return>
            </javadoc>
            <method name="isDone" type="boolean" line="67"/>
            <javadoc line="70">
                Moves the iterator to the next segment of the path forwards
                  along the primary direction of traversal as long as there are
                  more points in that direction.                
            </javadoc>
            <method name="next" type="void" line="75"/>
            <method name="btan" type="double" line="78">
                <params>
                    <param name="increment" type="double"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A float array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of float x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="100">
                <params>
                    <param name="coords" type="float[]"/>
                </params>
                <scope line="101"/>
                <declaration name="angle" type="double" line="104"/>
                <scope line="105">
                    <scope line="108"/>
                </scope>
                <scope line="113">
                    <scope line="114"/>
                    <scope line="119"/>
                </scope>
                <declaration name="relx" type="double" line="125"/>
                <declaration name="rely" type="double" line="126"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Returns the coordinates and type of the current path segment in
                  the iteration.
                  The return value is the path segment type:
                  SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
                  A double array of length 6 must be passed in and may be used to
                  store the coordinates of the point(s).
                  Each point is stored as a pair of double x,y coordinates.
                  SEG_MOVETO and SEG_LINETO types will return one point,
                  SEG_QUADTO will return two points,
                  SEG_CUBICTO will return 3 points
                  and SEG_CLOSE will not return any points.                
                <see>
                    #SEG_MOVETO                    
                </see>
                <see>
                    #SEG_LINETO                    
                </see>
                <see>
                    #SEG_QUADTO                    
                </see>
                <see>
                    #SEG_CUBICTO                    
                </see>
                <see>
                    #SEG_CLOSE                    
                </see>
            </javadoc>
            <method name="currentSegment" type="int" line="159">
                <params>
                    <param name="coords" type="double[]"/>
                </params>
                <scope line="160"/>
                <declaration name="angle" type="double" line="163"/>
                <scope line="164">
                    <scope line="167"/>
                </scope>
                <scope line="172">
                    <scope line="173"/>
                    <scope line="178"/>
                </scope>
                <declaration name="relx" type="double" line="184"/>
                <declaration name="rely" type="double" line="185"/>
                <scope line="195"/>
            </method>
        </class>
    </source>