<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.geom">
        <import package="java.awt.Shape"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="AffineTransform" line="31">
            <comment line="118">
                This constant is only useful for the cached type field.
                 It indicates that the type has been decached and must be recalculated.                
            </comment>
            <comment line="238">
                NOTE: TYPE_FLIP was added after GENERAL_TRANSFORM was in public
                 circulation and the flag bits could no longer be conveniently
                 renumbered without introducing binary incompatibility in outside
                 code.                
            </comment>
            <comment line="369">
                For methods which combine together the state of two separate
                 transforms and dispatch based upon the combination, these constants
                 specify how far to shift one of the states so that the two states
                 are mutually non-interfering and provide constants for testing the
                 bits of the shifted (HI) state.  The methods in this class use
                 the convention that the state of &quot;this&quot; transform is unshifted and
                 the state of the &quot;other&quot; or &quot;argument&quot; transform is shifted (HI).                
            </comment>
            <comment line="1124">
                Convenience method used internally to throw exceptions when
                 a case was forgotten in a switch statement.                
            </comment>
            <comment line="1327">
                Utility methods to optimize rotate methods.
                 These tables translate the flags during predictable quadrant
                 rotations where the shear and scale values are swapped and negated.                
            </comment>
            <comment line="3815">
                Round values to sane precision for printing
                 Note that Math.sin(Math.PI) has an error of about 10^-16                
            </comment>
            <comment line="3900">
                Serialization support.  A readObject method is neccessary because
                 the state field is part of the implementation of this particular
                 AffineTransform and not part of the public specification.  The
                 state variable&apos;s value needs to be recalculated on the fly by the
                 readObject method as it is in the 6-argument matrix constructor.                
            </comment>
            <comment line="3907">
                JDK 1.2 serialVersionUID                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="31">
                The &lt;code&gt;AffineTransform&lt;/code&gt; class represents a 2D affine transform
                  that performs a linear mapping from 2D coordinates to other 2D
                  coordinates that preserves the &quot;straightness&quot; and
                  &quot;parallelness&quot; of lines.  Affine transformations can be constructed
                  using sequences of translations, scales, flips, rotations, and shears.
                  &lt;p&gt;
                  Such a coordinate transformation can be represented by a 3 row by
                  3 column matrix with an implied last row of [ 0 0 1 ].  This matrix
                  transforms source coordinates {@code (x,y)} into
                  destination coordinates {@code (x&apos;,y&apos;)} by considering
                  them to be a column vector and multiplying the coordinate vector
                  by the matrix according to the following process:
                  &lt;pre&gt;
                  [ x&apos;]   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
                  [ y&apos;] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
                  [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;a name=&quot;quadrantapproximation&quot;&gt;&lt;h4&gt;Handling 90-Degree Rotations&lt;/h4&gt;&lt;/a&gt;
                  &lt;p&gt;
                  In some variations of the &lt;code&gt;rotate&lt;/code&gt; methods in the
                  &lt;code&gt;AffineTransform&lt;/code&gt; class, a double-precision argument
                  specifies the angle of rotation in radians.
                  These methods have special handling for rotations of approximately
                  90 degrees (including multiples such as 180, 270, and 360 degrees),
                  so that the common case of quadrant rotation is handled more
                  efficiently.
                  This special handling can cause angles very close to multiples of
                  90 degrees to be treated as if they were exact multiples of
                  90 degrees.
                  For small multiples of 90 degrees the range of angles treated
                  as a quadrant rotation is approximately 0.00000121 degrees wide.
                  This section explains why such special care is needed and how
                  it is implemented.
                  &lt;p&gt;
                  Since 90 degrees is represented as &lt;code&gt;PI/2&lt;/code&gt; in radians,
                  and since PI is a transcendental (and therefore irrational) number,
                  it is not possible to exactly represent a multiple of 90 degrees as
                  an exact double precision value measured in radians.
                  As a result it is theoretically impossible to describe quadrant
                  rotations (90, 180, 270 or 360 degrees) using these values.
                  Double precision floating point values can get very close to
                  non-zero multiples of &lt;code&gt;PI/2&lt;/code&gt; but never close enough
                  for the sine or cosine to be exactly 0.0, 1.0 or -1.0.
                  The implementations of &lt;code&gt;Math.sin()&lt;/code&gt; and
                  &lt;code&gt;Math.cos()&lt;/code&gt; correspondingly never return 0.0
                  for any case other than &lt;code&gt;Math.sin(0.0)&lt;/code&gt;.
                  These same implementations do, however, return exactly 1.0 and
                  -1.0 for some range of numbers around each multiple of 90
                  degrees since the correct answer is so close to 1.0 or -1.0 that
                  the double precision significand cannot represent the difference
                  as accurately as it can for numbers that are near 0.0.
                  &lt;p&gt;
                  The net result of these issues is that if the
                  &lt;code&gt;Math.sin()&lt;/code&gt; and &lt;code&gt;Math.cos()&lt;/code&gt; methods
                  are used to directly generate the values for the matrix modifications
                  during these radian-based rotation operations then the resulting
                  transform is never strictly classifiable as a quadrant rotation
                  even for a simple case like &lt;code&gt;rotate(Math.PI/2.0)&lt;/code&gt;,
                  due to minor variations in the matrix caused by the non-0.0 values
                  obtained for the sine and cosine.
                  If these transforms are not classified as quadrant rotations then
                  subsequent code which attempts to optimize further operations based
                  upon the type of the transform will be relegated to its most general
                  implementation.
                  &lt;p&gt;
                  Because quadrant rotations are fairly common,
                  this class should handle these cases reasonably quickly, both in
                  applying the rotations to the transform and in applying the resulting
                  transform to the coordinates.
                  To facilitate this optimal handling, the methods which take an angle
                  of rotation measured in radians attempt to detect angles that are
                  intended to be quadrant rotations and treat them as such.
                  These methods therefore treat an angle &lt;em&gt;theta&lt;/em&gt; as a quadrant
                  rotation if either &lt;code&gt;Math.sin(&lt;em&gt;theta&lt;/em&gt;)&lt;/code&gt; or
                  &lt;code&gt;Math.cos(&lt;em&gt;theta&lt;/em&gt;)&lt;/code&gt; returns exactly 1.0 or -1.0.
                  As a rule of thumb, this property holds true for a range of
                  approximately 0.0000000211 radians (or 0.00000121 degrees) around
                  small multiples of &lt;code&gt;Math.PI/2.0&lt;/code&gt;.                
                <author>
                    Jim Graham                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_UNKNOWN" type="int" line="121"/>
            <declaration name="TYPE_IDENTITY" type="int" line="123"/>
            <javadoc line="123">
                This constant indicates that the transform defined by this object
                  is an identity transform.
                  An identity transform is one in which the output coordinates are
                  always the same as the input coordinates.
                  If this transform is anything other than the identity transform,
                  the type will either be the constant GENERAL_TRANSFORM or a
                  combination of the appropriate flag bits for the various coordinate
                  conversions that this transform performs.                
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_TRANSLATION" type="int" line="144"/>
            <javadoc line="144">
                This flag bit indicates that the transform defined by this object
                  performs a translation in addition to the conversions indicated
                  by other flag bits.
                  A translation moves the coordinates by a constant amount in x
                  and y without changing the length or angle of vectors.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_UNIFORM_SCALE" type="int" line="162"/>
            <javadoc line="162">
                This flag bit indicates that the transform defined by this object
                  performs a uniform scale in addition to the conversions indicated
                  by other flag bits.
                  A uniform scale multiplies the length of vectors by the same amount
                  in both the x and y directions without changing the angle between
                  vectors.
                  This flag bit is mutually exclusive with the TYPE_GENERAL_SCALE flag.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_GENERAL_SCALE" type="int" line="182"/>
            <javadoc line="182">
                This flag bit indicates that the transform defined by this object
                  performs a general scale in addition to the conversions indicated
                  by other flag bits.
                  A general scale multiplies the length of vectors by different
                  amounts in the x and y directions without changing the angle
                  between perpendicular vectors.
                  This flag bit is mutually exclusive with the TYPE_UNIFORM_SCALE flag.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_MASK_SCALE" type="int" line="202"/>
            <javadoc line="202">
                This constant is a bit mask for any of the scale flag bits.                
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_FLIP" type="int" line="211"/>
            <javadoc line="211">
                This flag bit indicates that the transform defined by this object
                  performs a mirror image flip about some axis which changes the
                  normally right handed coordinate system into a left handed
                  system in addition to the conversions indicated by other flag bits.
                  A right handed coordinate system is one where the positive X
                  axis rotates counterclockwise to overlay the positive Y axis
                  similar to the direction that the fingers on your right hand
                  curl when you stare end on at your thumb.
                  A left handed coordinate system is one where the positive X
                  axis rotates clockwise to overlay the positive Y axis similar
                  to the direction that the fingers on your left hand curl.
                  There is no mathematical way to determine the angle of the
                  original flipping or mirroring transformation since all angles
                  of flip are identical given an appropriate adjusting rotation.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_QUADRANT_ROTATION" type="int" line="243"/>
            <javadoc line="243">
                This flag bit indicates that the transform defined by this object
                  performs a quadrant rotation by some multiple of 90 degrees in
                  addition to the conversions indicated by other flag bits.
                  A rotation changes the angles of vectors by the same amount
                  regardless of the original direction of the vector and without
                  changing the length of the vector.
                  This flag bit is mutually exclusive with the TYPE_GENERAL_ROTATION flag.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_GENERAL_ROTATION" type="int" line="263"/>
            <javadoc line="263">
                This flag bit indicates that the transform defined by this object
                  performs a rotation by an arbitrary angle in addition to the
                  conversions indicated by other flag bits.
                  A rotation changes the angles of vectors by the same amount
                  regardless of the original direction of the vector and without
                  changing the length of the vector.
                  This flag bit is mutually exclusive with the
                  TYPE_QUADRANT_ROTATION flag.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_MASK_ROTATION" type="int" line="284"/>
            <javadoc line="284">
                This constant is a bit mask for any of the rotation flag bits.                
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TYPE_GENERAL_TRANSFORM" type="int" line="293"/>
            <javadoc line="293">
                This constant indicates that the transform defined by this object
                  performs an arbitrary conversion of the input coordinates.
                  If this transform can be classified by any of the above constants,
                  the type will either be the constant TYPE_IDENTITY or a
                  combination of the appropriate flag bits for the various coordinate
                  conversions that this transform performs.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #getType                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="APPLY_IDENTITY" type="int" line="312"/>
            <javadoc line="312">
                This constant is used for the internal state variable to indicate
                  that no calculations need to be performed and that the source
                  coordinates only need to be copied to their destinations to
                  complete the transformation equation of this transform.                
                <see>
                    #APPLY_TRANSLATE                    
                </see>
                <see>
                    #APPLY_SCALE                    
                </see>
                <see>
                    #APPLY_SHEAR                    
                </see>
                <see>
                    #state                    
                </see>
            </javadoc>
            <declaration name="APPLY_TRANSLATE" type="int" line="324"/>
            <javadoc line="324">
                This constant is used for the internal state variable to indicate
                  that the translation components of the matrix (m02 and m12) need
                  to be added to complete the transformation equation of this transform.                
                <see>
                    #APPLY_IDENTITY                    
                </see>
                <see>
                    #APPLY_SCALE                    
                </see>
                <see>
                    #APPLY_SHEAR                    
                </see>
                <see>
                    #state                    
                </see>
            </javadoc>
            <declaration name="APPLY_SCALE" type="int" line="335"/>
            <javadoc line="335">
                This constant is used for the internal state variable to indicate
                  that the scaling components of the matrix (m00 and m11) need
                  to be factored in to complete the transformation equation of
                  this transform.  If the APPLY_SHEAR bit is also set then it
                  indicates that the scaling components are not both 0.0.  If the
                  APPLY_SHEAR bit is not also set then it indicates that the
                  scaling components are not both 1.0.  If neither the APPLY_SHEAR
                  nor the APPLY_SCALE bits are set then the scaling components
                  are both 1.0, which means that the x and y components contribute
                  to the transformed coordinate, but they are not multiplied by
                  any scaling factor.                
                <see>
                    #APPLY_IDENTITY                    
                </see>
                <see>
                    #APPLY_TRANSLATE                    
                </see>
                <see>
                    #APPLY_SHEAR                    
                </see>
                <see>
                    #state                    
                </see>
            </javadoc>
            <declaration name="APPLY_SHEAR" type="int" line="354"/>
            <javadoc line="354">
                This constant is used for the internal state variable to indicate
                  that the shearing components of the matrix (m01 and m10) need
                  to be factored in to complete the transformation equation of this
                  transform.  The presence of this bit in the state variable changes
                  the interpretation of the APPLY_SCALE bit as indicated in its
                  documentation.                
                <see>
                    #APPLY_IDENTITY                    
                </see>
                <see>
                    #APPLY_TRANSLATE                    
                </see>
                <see>
                    #APPLY_SCALE                    
                </see>
                <see>
                    #state                    
                </see>
            </javadoc>
            <declaration name="HI_SHIFT" type="int" line="377"/>
            <declaration name="HI_IDENTITY" type="int" line="378"/>
            <declaration name="HI_TRANSLATE" type="int" line="379"/>
            <declaration name="HI_SCALE" type="int" line="380"/>
            <declaration name="HI_SHEAR" type="int" line="381"/>
            <declaration name="m00" type="double" line="383"/>
            <javadoc line="383">
                The X coordinate scaling element of the 3x3
                  affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="m10" type="double" line="391"/>
            <javadoc line="391">
                The Y coordinate shearing element of the 3x3
                  affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="m01" type="double" line="399"/>
            <javadoc line="399">
                The X coordinate shearing element of the 3x3
                  affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="m11" type="double" line="407"/>
            <javadoc line="407">
                The Y coordinate scaling element of the 3x3
                  affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="m02" type="double" line="415"/>
            <javadoc line="415">
                The X coordinate of the translation element of the
                  3x3 affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="m12" type="double" line="423"/>
            <javadoc line="423">
                The Y coordinate of the translation element of the
                  3x3 affine transformation matrix.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="state" type="int" line="431"/>
            <javadoc line="431">
                This field keeps track of which components of the matrix need to
                  be applied when performing a transformation.                
                <see>
                    #APPLY_IDENTITY                    
                </see>
                <see>
                    #APPLY_TRANSLATE                    
                </see>
                <see>
                    #APPLY_SCALE                    
                </see>
                <see>
                    #APPLY_SHEAR                    
                </see>
            </javadoc>
            <declaration name="type" type="int" line="441"/>
            <javadoc line="441">
                This field caches the current transformation type of the matrix.                
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_FLIP                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <see>
                    #TYPE_UNKNOWN                    
                </see>
                <see>
                    #getType                    
                </see>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="459">
                <params>
                    <param name="m00" type="double"/>
                    <param name="m10" type="double"/>
                    <param name="m01" type="double"/>
                    <param name="m11" type="double"/>
                    <param name="m02" type="double"/>
                    <param name="m12" type="double"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="470">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; representing the
                  Identity transformation.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="475">
                <comment line="478">
                    m01 = m10 = m02 = m12 = 0.0;         /* Not needed. */
                     state = APPLY_IDENTITY;              /* Not needed. */
                     type = TYPE_IDENTITY;                /* Not needed. */                    
                </comment>
            </method>
            <javadoc line="482">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; that is a copy of
                  the specified &lt;code&gt;AffineTransform&lt;/code&gt; object.                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; object to copy                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="488">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="499">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; from 6 floating point
                  values representing the 6 specifiable entries of the 3x3
                  transformation matrix.                
                <param>
                    m00 the X coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m10 the Y coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m01 the X coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m11 the Y coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m02 the X coordinate translation element of the 3x3 matrix                    
                </param>
                <param>
                    m12 the Y coordinate translation element of the 3x3 matrix                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="515">
                <params>
                    <param name="m00" type="float"/>
                    <param name="m10" type="float"/>
                    <param name="m01" type="float"/>
                    <param name="m11" type="float"/>
                    <param name="m02" type="float"/>
                    <param name="m12" type="float"/>
                </params>
            </method>
            <javadoc line="525">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; from an array of
                  floating point values representing either the 4 non-translation
                  enries or the 6 specifiable entries of the 3x3 transformation
                  matrix.  The values are retrieved from the array as
                  {&amp;nbsp;m00&amp;nbsp;m10&amp;nbsp;m01&amp;nbsp;m11&amp;nbsp;[m02&amp;nbsp;m12]}.                
                <param>
                    flatmatrix the float array containing the values to be set
                      in the new &lt;code&gt;AffineTransform&lt;/code&gt; object. The length of the
                      array is assumed to be at least 4. If the length of the array is
                      less than 6, only the first 4 values are taken. If the length of
                      the array is greater than 6, the first 6 values are taken.                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="538">
                <params>
                    <param name="flatmatrix" type="float[]"/>
                </params>
                <scope line="543"/>
            </method>
            <javadoc line="550">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; from 6 double
                  precision values representing the 6 specifiable entries of the 3x3
                  transformation matrix.                
                <param>
                    m00 the X coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m10 the Y coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m01 the X coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m11 the Y coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m02 the X coordinate translation element of the 3x3 matrix                    
                </param>
                <param>
                    m12 the Y coordinate translation element of the 3x3 matrix                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="565">
                <params>
                    <param name="m00" type="double"/>
                    <param name="m10" type="double"/>
                    <param name="m01" type="double"/>
                    <param name="m11" type="double"/>
                    <param name="m02" type="double"/>
                    <param name="m12" type="double"/>
                </params>
            </method>
            <javadoc line="575">
                Constructs a new &lt;code&gt;AffineTransform&lt;/code&gt; from an array of
                  double precision values representing either the 4 non-translation
                  entries or the 6 specifiable entries of the 3x3 transformation
                  matrix. The values are retrieved from the array as
                  {&amp;nbsp;m00&amp;nbsp;m10&amp;nbsp;m01&amp;nbsp;m11&amp;nbsp;[m02&amp;nbsp;m12]}.                
                <param>
                    flatmatrix the double array containing the values to be set
                      in the new &lt;code&gt;AffineTransform&lt;/code&gt; object. The length of the
                      array is assumed to be at least 4. If the length of the array is
                      less than 6, only the first 4 values are taken. If the length of
                      the array is greater than 6, the first 6 values are taken.                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="AffineTransform" type="constructor" line="588">
                <params>
                    <param name="flatmatrix" type="double[]"/>
                </params>
                <scope line="593"/>
            </method>
            <javadoc line="600">
                Returns a transform representing a translation transformation.
                  The matrix representing the returned transform is:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    tx the distance by which coordinates are translated in the
                      X axis direction                    
                </param>
                <param>
                    ty the distance by which coordinates are translated in the
                      Y axis direction                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that represents a
                      translation transformation, created with the specified vector.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTranslateInstance" type="AffineTransform" line="616">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="617"/>
            </method>
            <javadoc line="622">
                Returns a transform representing a rotation transformation.
                  The matrix representing the returned transform is:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that is a rotation
                      transformation, created with the specified angle of rotation.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRotateInstance" type="AffineTransform" line="640">
                <params>
                    <param name="theta" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="641"/>
            </method>
            <javadoc line="646">
                Returns a transform that rotates coordinates around an anchor point.
                  This operation is equivalent to translating the coordinates so
                  that the anchor point is at the origin (S1), then rotating them
                  about the new origin (S2), and finally translating so that the
                  intermediate origin is restored to the coordinates of the original
                  anchor point (S3).
                  &lt;p&gt;
                  This operation is equivalent to the following sequence of calls:
                  &lt;pre&gt;
                  AffineTransform Tx = new AffineTransform();
                  Tx.translate(anchorx, anchory);    // S3: final translation
                  Tx.rotate(theta);                  // S2: rotate around anchor
                  Tx.translate(-anchorx, -anchory);  // S1: translate anchor to origin
                  &lt;/pre&gt;
                  The matrix representing the returned transform is:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    x-xcos+ysin  ]
                  [   sin(theta)     cos(theta)    y-xsin-ycos  ]
                  [       0              0               1        ]
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that rotates
                      coordinates around the specified point by the specified angle of
                      rotation.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getRotateInstance" type="AffineTransform" line="684">
                <params>
                    <param name="theta" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="685"/>
            </method>
            <javadoc line="690">
                Returns a transform that rotates coordinates according to
                  a rotation vector.
                  All coordinates rotate about the origin by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  an identity transform is returned.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  AffineTransform.getRotateInstance(Math.atan2(vecy, vecx));
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that rotates
                      coordinates according to the specified rotation vector.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRotateInstance" type="AffineTransform" line="710">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="711"/>
            </method>
            <javadoc line="716">
                Returns a transform that rotates coordinates around an anchor
                  point accordinate to a rotation vector.
                  All coordinates rotate about the specified anchor coordinates
                  by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  an identity transform is returned.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  AffineTransform.getRotateInstance(Math.atan2(vecy, vecx),
                  anchorx, anchory);
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that rotates
                      coordinates around the specified point according to the
                      specified rotation vector.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRotateInstance" type="AffineTransform" line="745">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="746"/>
            </method>
            <javadoc line="751">
                Returns a transform that rotates coordinates by the specified
                  number of quadrants.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  AffineTransform.getRotateInstance(numquadrants  Math.PI / 2.0);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that rotates
                      coordinates by the specified number of quadrants.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getQuadrantRotateInstance" type="AffineTransform" line="765">
                <params>
                    <param name="numquadrants" type="int"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="766"/>
            </method>
            <javadoc line="771">
                Returns a transform that rotates coordinates by the specified
                  number of quadrants around the specified anchor point.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  AffineTransform.getRotateInstance(numquadrants  Math.PI / 2.0,
                  anchorx, anchory);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that rotates
                      coordinates by the specified number of quadrants around the
                      specified anchor point.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getQuadrantRotateInstance" type="AffineTransform" line="793">
                <params>
                    <param name="numquadrants" type="int"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="794"/>
            </method>
            <javadoc line="799">
                Returns a transform representing a scaling transformation.
                  The matrix representing the returned transform is:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    sx the factor by which coordinates are scaled along the
                      X axis direction                    
                </param>
                <param>
                    sy the factor by which coordinates are scaled along the
                      Y axis direction                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that scales
                      coordinates by the specified factors.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getScaleInstance" type="AffineTransform" line="815">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="816"/>
            </method>
            <javadoc line="821">
                Returns a transform representing a shearing transformation.
                  The matrix representing the returned transform is:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx the multiplier by which coordinates are shifted in the
                      direction of the positive X axis as a factor of their Y coordinate                    
                </param>
                <param>
                    shy the multiplier by which coordinates are shifted in the
                      direction of the positive Y axis as a factor of their X coordinate                    
                </param>
                <return>
                    an &lt;code&gt;AffineTransform&lt;/code&gt; object that shears
                      coordinates by the specified multipliers.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getShearInstance" type="AffineTransform" line="837">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
                <declaration name="Tx" type="AffineTransform" line="838"/>
            </method>
            <javadoc line="843">
                Retrieves the flag bits describing the conversion properties of
                  this transform.
                  The return value is either one of the constants TYPE_IDENTITY
                  or TYPE_GENERAL_TRANSFORM, or a combination of the
                  appriopriate flag bits.
                  A valid combination of flag bits is an exclusive OR operation
                  that can combine
                  the TYPE_TRANSLATION flag bit
                  in addition to either of the
                  TYPE_UNIFORM_SCALE or TYPE_GENERAL_SCALE flag bits
                  as well as either of the
                  TYPE_QUADRANT_ROTATION or TYPE_GENERAL_ROTATION flag bits.                
                <return>
                    the OR combination of any of the indicated flags that
                      apply to this transform                    
                </return>
                <see>
                    #TYPE_IDENTITY                    
                </see>
                <see>
                    #TYPE_TRANSLATION                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <see>
                    #TYPE_GENERAL_SCALE                    
                </see>
                <see>
                    #TYPE_QUADRANT_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_ROTATION                    
                </see>
                <see>
                    #TYPE_GENERAL_TRANSFORM                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getType" type="int" line="867">
                <scope line="868"/>
            </method>
            <javadoc line="874">
                This is the utility function to calculate the flag bits when
                  they have not been cached.                
                <see>
                    #getType                    
                </see>
            </javadoc>
            <method name="calculateType" type="void" line="879">
                <comment line="888">
                                        
                </comment>
                <comment line="891">
                                        
                </comment>
                <comment line="894">
                    Transformed unit vectors are not perpendicular...                    
                </comment>
                <comment line="901">
                    sgn(M0) == sgn(M1) therefore sgn(M2) == -sgn(M3)
                     This is the &quot;unflipped&quot; (right-handed) state                    
                </comment>
                <comment line="911">
                    sgn(M0) == -sgn(M1) therefore sgn(M2) == sgn(M3)
                     This is the &quot;flipped&quot; (left-handed) state                    
                </comment>
                <comment line="928">
                                        
                </comment>
                <comment line="933">
                    Different signs - simple 90 degree rotation                    
                </comment>
                <comment line="942">
                    Same signs - 90 degree rotation plus an axis flip too                    
                </comment>
                <comment line="956">
                                        
                </comment>
                <comment line="962">
                    Both scaling factors non-negative - simple scale
                     Note: APPLY_SCALE implies M0, M1 are not both 1                    
                </comment>
                <comment line="970">
                    Both scaling factors negative - 180 degree rotation                    
                </comment>
                <comment line="980">
                    Scaling factor signs different - flip about some axis                    
                </comment>
                <declaration name="ret" type="int" line="880"/>
                <declaration name="sgn0" type="boolean" line="881"/>
                <declaration name="M0" type="double" line="882"/>
                <scope line="892"/>
                <scope line="899">
                    <scope line="902"/>
                    <scope line="904"/>
                    <scope line="906"/>
                </scope>
                <scope line="909">
                    <scope line="912"/>
                    <scope line="916"/>
                    <scope line="920"/>
                </scope>
                <scope line="931">
                    <scope line="933"/>
                    <scope line="935"/>
                    <scope line="937"/>
                </scope>
                <scope line="940">
                    <scope line="942"/>
                    <scope line="946"/>
                </scope>
                <scope line="959">
                    <scope line="960">
                        <scope line="963"/>
                        <scope line="965"/>
                    </scope>
                    <scope line="968">
                        <scope line="970"/>
                        <scope line="972"/>
                        <scope line="974"/>
                    </scope>
                </scope>
                <scope line="978">
                    <scope line="980">
                        <scope line="981"/>
                        <scope line="983"/>
                    </scope>
                    <scope line="986"/>
                </scope>
            </method>
            <javadoc line="1000">
                Returns the determinant of the matrix representation of the transform.
                  The determinant is useful both to determine if the transform can
                  be inverted and to get a single value representing the
                  combined X and Y scaling of the transform.
                  &lt;p&gt;
                  If the determinant is non-zero, then this transform is
                  invertible and the various methods that depend on the inverse
                  transform do not need to throw a{@link NoninvertibleTransformException}.
                  If the determinant is zero then this transform can not be
                  inverted since the transform maps all input coordinates onto
                  a line or a point.
                  If the determinant is near enough to zero then inverse transform
                  operations might not carry enough precision to produce meaningful
                  results.
                  &lt;p&gt;
                  If this transform represents a uniform scale, as indicated by
                  the &lt;code&gt;getType&lt;/code&gt; method then the determinant also
                  represents the square of the uniform scale factor by which all of
                  the points are expanded from or contracted towards the origin.
                  If this transform represents a non-uniform scale or more general
                  transform then the determinant is not likely to represent a
                  value useful for any purpose other than determining if inverse
                  transforms are possible.
                  &lt;p&gt;
                  Mathematically, the determinant is calculated using the formula:
                  &lt;pre&gt;
                  |  m00  m01  m02  |
                  |  m10  m11  m12  |  =  m00  m11 - m01  m10
                  |   0    0    1   |
                  &lt;/pre&gt;                
                <return>
                    the determinant of the matrix used to transform the
                      coordinates.                    
                </return>
                <see>
                    #getType                    
                </see>
                <see>
                    #createInverse                    
                </see>
                <see>
                    #inverseTransform                    
                </see>
                <see>
                    #TYPE_UNIFORM_SCALE                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getDeterminant" type="double" line="1041">
                <comment line="1046">
                                        
                </comment>
            </method>
            <javadoc line="1061">
                Manually recalculates the state of the transform when the matrix
                  changes too much to predict the effects on the state.
                  The following table specifies what the various settings of the
                  state field say about the values of the corresponding matrix
                  element fields.
                  Note that the rules governing the SCALE fields are slightly
                  different depending on whether the SHEAR flag is also set.
                  &lt;pre&gt;
                  SCALE            SHEAR          TRANSLATE
                  m00/m11          m01/m10          m02/m12
                  IDENTITY             1.0              0.0              0.0
                  TRANSLATE (TR)       1.0              0.0          not both 0.0
                  SCALE (SC)       not both 1.0         0.0              0.0
                  TR | SC          not both 1.0         0.0          not both 0.0
                  SHEAR (SH)           0.0          not both 0.0         0.0
                  TR | SH              0.0          not both 0.0     not both 0.0
                  SC | SH          not both 0.0     not both 0.0         0.0
                  TR | SC | SH     not both 0.0     not both 0.0     not both 0.0
                  &lt;/pre&gt;                
            </javadoc>
            <method name="updateState" type="void" line="1083">
                <scope line="1084">
                    <scope line="1085">
                        <scope line="1086"/>
                        <scope line="1089"/>
                    </scope>
                    <scope line="1093">
                        <scope line="1094"/>
                        <scope line="1097"/>
                    </scope>
                </scope>
                <scope line="1102">
                    <scope line="1103">
                        <scope line="1104"/>
                        <scope line="1107"/>
                    </scope>
                    <scope line="1111">
                        <scope line="1112"/>
                        <scope line="1115"/>
                    </scope>
                </scope>
            </method>
            <method name="stateError" type="void" line="1127"/>
            <javadoc line="1131">
                Retrieves the 6 specifiable values in the 3x3 affine transformation
                  matrix and places them into an array of double precisions values.
                  The values are stored in the array as
                  {&amp;nbsp;m00&amp;nbsp;m10&amp;nbsp;m01&amp;nbsp;m11&amp;nbsp;m02&amp;nbsp;m12&amp;nbsp;}.
                  An array of 4 doubles can also be specified, in which case only the
                  first four elements representing the non-transform
                  parts of the array are retrieved and the values are stored into
                  the array as {&amp;nbsp;m00&amp;nbsp;m10&amp;nbsp;m01&amp;nbsp;m11&amp;nbsp;}                
                <param>
                    flatmatrix the double array used to store the returned
                      values.                    
                </param>
                <see>
                    #getScaleX                    
                </see>
                <see>
                    #getScaleY                    
                </see>
                <see>
                    #getShearX                    
                </see>
                <see>
                    #getShearY                    
                </see>
                <see>
                    #getTranslateX                    
                </see>
                <see>
                    #getTranslateY                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMatrix" type="void" line="1150">
                <params>
                    <param name="flatmatrix" type="double[]"/>
                </params>
                <scope line="1155"/>
            </method>
            <javadoc line="1161">
                Returns the X coordinate scaling element (m00) of the 3x3
                  affine transformation matrix.                
                <return>
                    a double value that is the X coordinate of the scaling
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getScaleX" type="double" line="1169"/>
            <javadoc line="1173">
                Returns the Y coordinate scaling element (m11) of the 3x3
                  affine transformation matrix.                
                <return>
                    a double value that is the Y coordinate of the scaling
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getScaleY" type="double" line="1181"/>
            <javadoc line="1185">
                Returns the X coordinate shearing element (m01) of the 3x3
                  affine transformation matrix.                
                <return>
                    a double value that is the X coordinate of the shearing
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getShearX" type="double" line="1193"/>
            <javadoc line="1197">
                Returns the Y coordinate shearing element (m10) of the 3x3
                  affine transformation matrix.                
                <return>
                    a double value that is the Y coordinate of the shearing
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getShearY" type="double" line="1205"/>
            <javadoc line="1209">
                Returns the X coordinate of the translation element (m02) of the
                  3x3 affine transformation matrix.                
                <return>
                    a double value that is the X coordinate of the translation
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTranslateX" type="double" line="1217"/>
            <javadoc line="1221">
                Returns the Y coordinate of the translation element (m12) of the
                  3x3 affine transformation matrix.                
                <return>
                    a double value that is the Y coordinate of the translation
                      element of the affine transformation matrix.                    
                </return>
                <see>
                    #getMatrix                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getTranslateY" type="double" line="1229"/>
            <javadoc line="1233">
                Concatenates this transform with a translation transformation.
                  This is equivalent to calling concatenate(T), where T is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    tx the distance by which coordinates are translated in the
                      X axis direction                    
                </param>
                <param>
                    ty the distance by which coordinates are translated in the
                      Y axis direction                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="translate" type="void" line="1248">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
                <comment line="1253">
                                        
                </comment>
                <scope line="1256">
                    <scope line="1258"/>
                </scope>
                <scope line="1266"/>
                <scope line="1274">
                    <scope line="1276"/>
                </scope>
                <scope line="1284"/>
                <scope line="1292">
                    <scope line="1294"/>
                </scope>
                <scope line="1302"/>
                <scope line="1310"/>
                <scope line="1318"/>
            </method>
            <declaration name="rot90conversion" type="int" line="1329"/>
            <method name="rotate90" type="void" line="1339">
                <declaration name="M0" type="double" line="1340"/>
                <declaration name="state" type="int" line="1346"/>
                <scope line="1349"/>
            </method>
            <method name="rotate180" type="void" line="1355">
                <comment line="1361">
                    If there was a shear, then this rotation has no
                     effect on the state.                    
                </comment>
                <comment line="1366">
                    No shear means the SCALE state may toggle when
                     m00 and m11 are negated.                    
                </comment>
                <declaration name="state" type="int" line="1358"/>
                <scope line="1359"/>
                <scope line="1364">
                    <scope line="1367"/>
                    <scope line="1369"/>
                </scope>
            </method>
            <method name="rotate270" type="void" line="1375">
                <declaration name="M0" type="double" line="1376"/>
                <declaration name="state" type="int" line="1382"/>
                <scope line="1385"/>
            </method>
            <javadoc line="1392">
                Concatenates this transform with a rotation transformation.
                  This is equivalent to calling concatenate(R), where R is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="rotate" type="void" line="1409">
                <params>
                    <param name="theta" type="double"/>
                </params>
                <declaration name="sin" type="double" line="1410"/>
                <scope line="1411"/>
                <scope line="1413"/>
                <scope line="1415">
                    <declaration name="cos" type="double" line="1416"/>
                    <scope line="1417"/>
                    <scope line="1419">
                        <declaration name="M0" type="double" line="1420"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1434">
                Concatenates this transform with a transform that rotates
                  coordinates around an anchor point.
                  This operation is equivalent to translating the coordinates so
                  that the anchor point is at the origin (S1), then rotating them
                  about the new origin (S2), and finally translating so that the
                  intermediate origin is restored to the coordinates of the original
                  anchor point (S3).
                  &lt;p&gt;
                  This operation is equivalent to the following sequence of calls:
                  &lt;pre&gt;
                  translate(anchorx, anchory);      // S3: final translation
                  rotate(theta);                    // S2: rotate around anchor
                  translate(-anchorx, -anchory);    // S1: translate anchor to origin
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="rotate" type="void" line="1460">
                <params>
                    <param name="theta" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <comment line="1462">
                    REMIND: Simple for now - optimize later                    
                </comment>
            </method>
            <javadoc line="1467">
                Concatenates this transform with a transform that rotates
                  coordinates according to a rotation vector.
                  All coordinates rotate about the origin by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  no additional rotation is added to this transform.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  rotate(Math.atan2(vecy, vecx));
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="rotate" type="void" line="1485">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                </params>
                <comment line="1491">
                    If vecx &gt; 0.0 - no rotation
                     If vecx == 0.0 - undefined rotation - treat as no rotation                    
                </comment>
                <comment line="1496">
                    vecy must be &lt; 0.0                    
                </comment>
                <scope line="1486">
                    <scope line="1487"/>
                </scope>
                <scope line="1492">
                    <scope line="1493"/>
                    <scope line="1495"/>
                </scope>
                <scope line="1498">
                    <declaration name="len" type="double" line="1499"/>
                    <declaration name="sin" type="double" line="1500"/>
                    <declaration name="cos" type="double" line="1501"/>
                    <declaration name="M0" type="double" line="1502"/>
                </scope>
            </method>
            <javadoc line="1515">
                Concatenates this transform with a transform that rotates
                  coordinates around an anchor point according to a rotation
                  vector.
                  All coordinates rotate about the specified anchor coordinates
                  by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  the transform is not modified in any way.
                  This method is equivalent to calling:
                  &lt;pre&gt;
                  rotate(Math.atan2(vecy, vecx), anchorx, anchory);
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="rotate" type="void" line="1539">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <comment line="1541">
                    REMIND: Simple for now - optimize later                    
                </comment>
            </method>
            <javadoc line="1546">
                Concatenates this transform with a transform that rotates
                  coordinates by the specified number of quadrants.
                  This is equivalent to calling:
                  &lt;pre&gt;
                  rotate(numquadrants  Math.PI / 2.0);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="quadrantRotate" type="void" line="1558">
                <params>
                    <param name="numquadrants" type="int"/>
                </params>
            </method>
            <javadoc line="1574">
                Concatenates this transform with a transform that rotates
                  coordinates by the specified number of quadrants around
                  the specified anchor point.
                  This method is equivalent to calling:
                  &lt;pre&gt;
                  rotate(numquadrants  Math.PI / 2.0, anchorx, anchory);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="quadrantRotate" type="void" line="1592">
                <params>
                    <param name="numquadrants" type="int"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <scope line="1612"/>
                <scope line="1614"/>
            </method>
            <javadoc line="1619">
                Concatenates this transform with a scaling transformation.
                  This is equivalent to calling concatenate(S), where S is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    sx the factor by which coordinates are scaled along the
                      X axis direction                    
                </param>
                <param>
                    sy the factor by which coordinates are scaled along the
                      Y axis direction                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="scale" type="void" line="1634">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
                <comment line="1640">
                                        
                </comment>
                <comment line="1645">
                                        
                </comment>
                <declaration name="state" type="int" line="1635"/>
                <scope line="1649">
                    <scope line="1651"/>
                    <scope line="1655"/>
                </scope>
                <scope line="1666"/>
                <scope line="1671"/>
                <scope line="1679"/>
            </method>
            <javadoc line="1687">
                Concatenates this transform with a shearing transformation.
                  This is equivalent to calling concatenate(SH), where SH is an
                  &lt;code&gt;AffineTransform&lt;/code&gt; represented by the following matrix:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx the multiplier by which coordinates are shifted in the
                      direction of the positive X axis as a factor of their Y coordinate                    
                </param>
                <param>
                    shy the multiplier by which coordinates are shifted in the
                      direction of the positive Y axis as a factor of their X coordinate                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="shear" type="void" line="1702">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
                <comment line="1708">
                                        
                </comment>
                <declaration name="state" type="int" line="1703"/>
                <declaration name="M0" type="double" line="1710"/>
                <scope line="1726"/>
                <scope line="1735"/>
                <scope line="1744"/>
            </method>
            <javadoc line="1752">
                Resets this transform to the Identity transform.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToIdentity" type="void" line="1756"/>
            <javadoc line="1763">
                Sets this transform to a translation transformation.
                  The matrix representing this transform becomes:
                  &lt;pre&gt;
                  [   1    0    tx  ]
                  [   0    1    ty  ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    tx the distance by which coordinates are translated in the
                      X axis direction                    
                </param>
                <param>
                    ty the distance by which coordinates are translated in the
                      Y axis direction                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToTranslation" type="void" line="1777">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
                <scope line="1784"/>
                <scope line="1787"/>
            </method>
            <javadoc line="1793">
                Sets this transform to a rotation transformation.
                  The matrix representing this transform becomes:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    0   ]
                  [   sin(theta)     cos(theta)    0   ]
                  [       0              0         1   ]
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToRotation" type="void" line="1809">
                <params>
                    <param name="theta" type="double"/>
                </params>
                <declaration name="sin" type="double" line="1810"/>
                <declaration name="cos" type="double" line="1811"/>
                <scope line="1812"/>
                <scope line="1816">
                    <scope line="1818"/>
                    <scope line="1822"/>
                    <scope line="1826"/>
                </scope>
            </method>
            <javadoc line="1839">
                Sets this transform to a translated rotation transformation.
                  This operation is equivalent to translating the coordinates so
                  that the anchor point is at the origin (S1), then rotating them
                  about the new origin (S2), and finally translating so that the
                  intermediate origin is restored to the coordinates of the original
                  anchor point (S3).
                  &lt;p&gt;
                  This operation is equivalent to the following sequence of calls:
                  &lt;pre&gt;
                  setToTranslation(anchorx, anchory); // S3: final translation
                  rotate(theta);                      // S2: rotate around anchor
                  translate(-anchorx, -anchory);      // S1: translate anchor to origin
                  &lt;/pre&gt;
                  The matrix representing this transform becomes:
                  &lt;pre&gt;
                  [   cos(theta)    -sin(theta)    x-xcos+ysin  ]
                  [   sin(theta)     cos(theta)    y-xsin-ycos  ]
                  [       0              0               1        ]
                  &lt;/pre&gt;
                  Rotating by a positive angle theta rotates points on the positive
                  X axis toward the positive Y axis.
                  Note also the discussion of
                  &lt;a href=&quot;#quadrantapproximation&quot;&gt;Handling 90-Degree Rotations&lt;/a&gt;
                  above.                
                <param>
                    theta the angle of rotation measured in radians                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToRotation" type="void" line="1870">
                <params>
                    <param name="theta" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <declaration name="sin" type="double" line="1872"/>
                <declaration name="oneMinusCos" type="double" line="1873"/>
                <scope line="1876"/>
            </method>
            <javadoc line="1882">
                Sets this transform to a rotation transformation that rotates
                  coordinates according to a rotation vector.
                  All coordinates rotate about the origin by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  the transform is set to an identity transform.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  setToRotation(Math.atan2(vecy, vecx));
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setToRotation" type="void" line="1900">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                </params>
                <declaration name="sin" type="double" line="1901"/>
                <scope line="1902">
                    <scope line="1904"/>
                    <scope line="1908"/>
                </scope>
                <scope line="1913"/>
                <scope line="1918">
                    <declaration name="len" type="double" line="1919"/>
                </scope>
            </method>
            <javadoc line="1933">
                Sets this transform to a rotation transformation that rotates
                  coordinates around an anchor point according to a rotation
                  vector.
                  All coordinates rotate about the specified anchor coordinates
                  by the same amount.
                  The amount of rotation is such that coordinates along the former
                  positive X axis will subsequently align with the vector pointing
                  from the origin to the specified vector coordinates.
                  If both &lt;code&gt;vecx&lt;/code&gt; and &lt;code&gt;vecy&lt;/code&gt; are 0.0,
                  the transform is set to an identity transform.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);
                  &lt;/pre&gt;                
                <param>
                    vecx the X coordinate of the rotation vector                    
                </param>
                <param>
                    vecy the Y coordinate of the rotation vector                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setToRotation" type="void" line="1957">
                <params>
                    <param name="vecx" type="double"/>
                    <param name="vecy" type="double"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <declaration name="sin" type="double" line="1959"/>
                <declaration name="oneMinusCos" type="double" line="1960"/>
                <scope line="1963"/>
            </method>
            <javadoc line="1969">
                Sets this transform to a rotation transformation that rotates
                  coordinates by the specified number of quadrants.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  setToRotation(numquadrants  Math.PI / 2.0);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setToQuadrantRotation" type="void" line="1981">
                <params>
                    <param name="numquadrants" type="int"/>
                </params>
            </method>
            <javadoc line="2026">
                Sets this transform to a translated rotation transformation
                  that rotates coordinates by the specified number of quadrants
                  around the specified anchor point.
                  This operation is equivalent to calling:
                  &lt;pre&gt;
                  setToRotation(numquadrants  Math.PI / 2.0, anchorx, anchory);
                  &lt;/pre&gt;
                  Rotating by a positive number of quadrants rotates points on
                  the positive X axis toward the positive Y axis.                
                <param>
                    numquadrants the number of 90 degree arcs to rotate by                    
                </param>
                <param>
                    anchorx the X coordinate of the rotation anchor point                    
                </param>
                <param>
                    anchory the Y coordinate of the rotation anchor point                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setToQuadrantRotation" type="void" line="2044">
                <params>
                    <param name="numquadrants" type="int"/>
                    <param name="anchorx" type="double"/>
                    <param name="anchory" type="double"/>
                </params>
                <scope line="2063"/>
                <scope line="2066"/>
                <scope line="2078"/>
                <scope line="2081"/>
                <scope line="2093"/>
                <scope line="2096"/>
            </method>
            <javadoc line="2104">
                Sets this transform to a scaling transformation.
                  The matrix representing this transform becomes:
                  &lt;pre&gt;
                  [   sx   0    0   ]
                  [   0    sy   0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    sx the factor by which coordinates are scaled along the
                      X axis direction                    
                </param>
                <param>
                    sy the factor by which coordinates are scaled along the
                      Y axis direction                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToScale" type="void" line="2118">
                <params>
                    <param name="sx" type="double"/>
                    <param name="sy" type="double"/>
                </params>
                <scope line="2125"/>
                <scope line="2128"/>
            </method>
            <javadoc line="2134">
                Sets this transform to a shearing transformation.
                  The matrix representing this transform becomes:
                  &lt;pre&gt;
                  [   1   shx   0   ]
                  [  shy   1    0   ]
                  [   0    0    1   ]
                  &lt;/pre&gt;                
                <param>
                    shx the multiplier by which coordinates are shifted in the
                      direction of the positive X axis as a factor of their Y coordinate                    
                </param>
                <param>
                    shy the multiplier by which coordinates are shifted in the
                      direction of the positive Y axis as a factor of their X coordinate                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setToShear" type="void" line="2148">
                <params>
                    <param name="shx" type="double"/>
                    <param name="shy" type="double"/>
                </params>
                <scope line="2155"/>
                <scope line="2158"/>
            </method>
            <javadoc line="2164">
                Sets this transform to a copy of the transform in the specified
                  &lt;code&gt;AffineTransform&lt;/code&gt; object.                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; object from which to
                      copy the transform                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setTransform" type="void" line="2171">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="2182">
                Sets this transform to the matrix specified by the 6
                  double precision values.                
                <param>
                    m00 the X coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m10 the Y coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m01 the X coordinate shearing element of the 3x3 matrix                    
                </param>
                <param>
                    m11 the Y coordinate scaling element of the 3x3 matrix                    
                </param>
                <param>
                    m02 the X coordinate translation element of the 3x3 matrix                    
                </param>
                <param>
                    m12 the Y coordinate translation element of the 3x3 matrix                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setTransform" type="void" line="2196">
                <params>
                    <param name="m00" type="double"/>
                    <param name="m10" type="double"/>
                    <param name="m01" type="double"/>
                    <param name="m11" type="double"/>
                    <param name="m02" type="double"/>
                    <param name="m12" type="double"/>
                </params>
            </method>
            <javadoc line="2206">
                Concatenates an &lt;code&gt;AffineTransform&lt;/code&gt; &lt;code&gt;Tx&lt;/code&gt; to
                  this &lt;code&gt;AffineTransform&lt;/code&gt; Cx in the most commonly useful
                  way to provide a new user space
                  that is mapped to the former user space by &lt;code&gt;Tx&lt;/code&gt;.
                  Cx is updated to perform the combined transformation.
                  Transforming a point p by the updated transform Cx&apos; is
                  equivalent to first transforming p by &lt;code&gt;Tx&lt;/code&gt; and then
                  transforming the result by the original transform Cx like this:
                  Cx&apos;(p) = Cx(Tx(p))
                  In matrix notation, if this transform Cx is
                  represented by the matrix [this] and &lt;code&gt;Tx&lt;/code&gt; is represented
                  by the matrix [Tx] then this method does the following:
                  &lt;pre&gt;
                  [this] = [this] x [Tx]
                  &lt;/pre&gt;                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; object to be
                      concatenated with this &lt;code&gt;AffineTransform&lt;/code&gt; object.                    
                </param>
                <see>
                    #preConcatenate                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="concatenate" type="void" line="2227">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
                <comment line="2236">
                                        
                </comment>
                <comment line="2247">
                                        
                </comment>
                <comment line="2251">
                                        
                </comment>
                <comment line="2255">
                                        
                </comment>
                <comment line="2265">
                                        
                </comment>
                <comment line="2275">
                                        
                </comment>
                <comment line="2284">
                                        
                </comment>
                <comment line="2295">
                                        
                </comment>
                <comment line="2306">
                                        
                </comment>
                <comment line="2345">
                    If Tx has more than one attribute, it is not worth optimizing
                     all of those cases...                    
                </comment>
                <comment line="2352">
                                        
                </comment>
                <comment line="2355">
                                        
                </comment>
                <declaration name="M0" type="double" line="2228"/>
                <declaration name="T00" type="double" line="2229"/>
                <declaration name="T02" type="double" line="2230"/>
                <declaration name="mystate" type="int" line="2231"/>
                <declaration name="txstate" type="int" line="2232"/>
            </method>
            <javadoc line="2411">
                Concatenates an &lt;code&gt;AffineTransform&lt;/code&gt; &lt;code&gt;Tx&lt;/code&gt; to
                  this &lt;code&gt;AffineTransform&lt;/code&gt; Cx
                  in a less commonly used way such that &lt;code&gt;Tx&lt;/code&gt; modifies the
                  coordinate transformation relative to the absolute pixel
                  space rather than relative to the existing user space.
                  Cx is updated to perform the combined transformation.
                  Transforming a point p by the updated transform Cx&apos; is
                  equivalent to first transforming p by the original transform
                  Cx and then transforming the result by
                  &lt;code&gt;Tx&lt;/code&gt; like this:
                  Cx&apos;(p) = Tx(Cx(p))
                  In matrix notation, if this transform Cx
                  is represented by the matrix [this] and &lt;code&gt;Tx&lt;/code&gt; is
                  represented by the matrix [Tx] then this method does the
                  following:
                  &lt;pre&gt;
                  [this] = [Tx] x [this]
                  &lt;/pre&gt;                
                <param>
                    Tx the &lt;code&gt;AffineTransform&lt;/code&gt; object to be
                      concatenated with this &lt;code&gt;AffineTransform&lt;/code&gt; object.                    
                </param>
                <see>
                    #concatenate                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="preConcatenate" type="void" line="2435">
                <params>
                    <param name="Tx" type="AffineTransform"/>
                </params>
                <comment line="2451">
                    Tx is IDENTITY...                    
                </comment>
                <comment line="2458">
                    Tx is TRANSLATE, this has no TRANSLATE                    
                </comment>
                <comment line="2469">
                    Tx is TRANSLATE, this has one too                    
                </comment>
                <comment line="2476">
                    Only these two existing states need a new state                    
                </comment>
                <comment line="2478">
                                        
                </comment>
                <comment line="2485">
                    Tx is SCALE, this is anything                    
                </comment>
                <comment line="2508">
                                        
                </comment>
                <comment line="2514">
                                        
                </comment>
                <comment line="2517">
                    Tx is SHEAR, this is anything                    
                </comment>
                <comment line="2535">
                    If Tx has more than one attribute, it is not worth optimizing
                     all of those cases...                    
                </comment>
                <comment line="2542">
                                        
                </comment>
                <comment line="2549">
                                        
                </comment>
                <comment line="2571">
                                        
                </comment>
                <comment line="2591">
                                        
                </comment>
                <comment line="2611">
                                        
                </comment>
                <declaration name="M0" type="double" line="2436"/>
                <declaration name="T00" type="double" line="2437"/>
                <declaration name="T02" type="double" line="2438"/>
                <declaration name="mystate" type="int" line="2439"/>
                <declaration name="txstate" type="int" line="2440"/>
                <scope line="2487">
                    <scope line="2490"/>
                </scope>
                <scope line="2494"/>
                <scope line="2498"/>
            </method>
            <javadoc line="2628">
                Returns an &lt;code&gt;AffineTransform&lt;/code&gt; object representing the
                  inverse transformation.
                  The inverse transform Tx&apos; of this transform Tx
                  maps coordinates transformed by Tx back
                  to their original coordinates.
                  In other words, Tx&apos;(Tx(p)) = p = Tx(Tx&apos;(p)).
                  &lt;p&gt;
                  If this transform maps all coordinates onto a point or a line
                  then it will not have an inverse, since coordinates that do
                  not lie on the destination point or line will not have an inverse
                  mapping.
                  The &lt;code&gt;getDeterminant&lt;/code&gt; method can be used to determine if this
                  transform has no inverse, in which case an exception will be
                  thrown if the &lt;code&gt;createInverse&lt;/code&gt; method is called.                
                <return>
                    a new &lt;code&gt;AffineTransform&lt;/code&gt; object representing the
                      inverse transformation.                    
                </return>
                <see>
                    #getDeterminant                    
                </see>
                <exception>
                    NoninvertibleTransformExceptionif the matrix cannot be inverted.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createInverse" type="AffineTransform" line="2652">
                <comment line="2658">
                                        
                </comment>
                <comment line="2723">
                                        
                </comment>
                <declaration name="det" type="double" line="2653"/>
                <scope line="2660"/>
                <scope line="2673"/>
                <scope line="2682"/>
                <scope line="2690"/>
                <scope line="2698"/>
                <scope line="2706"/>
            </method>
            <javadoc line="2725">
                Sets this transform to the inverse of itself.
                  The inverse transform Tx&apos; of this transform Tx
                  maps coordinates transformed by Tx back
                  to their original coordinates.
                  In other words, Tx&apos;(Tx(p)) = p = Tx(Tx&apos;(p)).
                  &lt;p&gt;
                  If this transform maps all coordinates onto a point or a line
                  then it will not have an inverse, since coordinates that do
                  not lie on the destination point or line will not have an inverse
                  mapping.
                  The &lt;code&gt;getDeterminant&lt;/code&gt; method can be used to determine if this
                  transform has no inverse, in which case an exception will be
                  thrown if the &lt;code&gt;invert&lt;/code&gt; method is called.                
                <see>
                    #getDeterminant                    
                </see>
                <exception>
                    NoninvertibleTransformExceptionif the matrix cannot be inverted.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="invert" type="void" line="2746">
                <comment line="2754">
                                        
                </comment>
                <comment line="2782">
                    m02 = 0.0;
                     m12 = 0.0;                    
                </comment>
                <comment line="2791">
                    m00 = 0.0;                    
                </comment>
                <comment line="2794">
                    m11 = 0.0;                    
                </comment>
                <comment line="2804">
                    m00 = 0.0;                    
                </comment>
                <comment line="2807">
                    m11 = 0.0;
                     m02 = 0.0;
                     m12 = 0.0;                    
                </comment>
                <comment line="2818">
                    m10 = 0.0;
                     m01 = 0.0;                    
                </comment>
                <comment line="2831">
                    m10 = 0.0;
                     m01 = 0.0;                    
                </comment>
                <comment line="2834">
                    m02 = 0.0;
                     m12 = 0.0;                    
                </comment>
                <comment line="2838">
                    m00 = 1.0;
                     m10 = 0.0;
                     m01 = 0.0;
                     m11 = 1.0;                    
                </comment>
                <comment line="2846">
                    m00 = 1.0;
                     m10 = 0.0;
                     m01 = 0.0;
                     m11 = 1.0;
                     m02 = 0.0;
                     m12 = 0.0;                    
                </comment>
                <declaration name="M00" type="double" line="2747"/>
                <declaration name="M10" type="double" line="2748"/>
                <declaration name="det" type="double" line="2749"/>
                <scope line="2758"/>
                <scope line="2773"/>
                <scope line="2787"/>
                <scope line="2800"/>
                <scope line="2813"/>
                <scope line="2826"/>
            </method>
            <javadoc line="2855">
                Transforms the specified &lt;code&gt;ptSrc&lt;/code&gt; and stores the result
                  in &lt;code&gt;ptDst&lt;/code&gt;.
                  If &lt;code&gt;ptDst&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a new {@link Point2D}object is allocated and then the result of the transformation is
                  stored in this object.
                  In either case, &lt;code&gt;ptDst&lt;/code&gt;, which contains the
                  transformed point, is returned for convenience.
                  If &lt;code&gt;ptSrc&lt;/code&gt; and &lt;code&gt;ptDst&lt;/code&gt; are the same
                  object, the input point is correctly overwritten with
                  the transformed point.                
                <param>
                    ptSrc the specified &lt;code&gt;Point2D&lt;/code&gt; to be transformed                    
                </param>
                <param>
                    ptDst the specified &lt;code&gt;Point2D&lt;/code&gt; that stores the
                      result of transforming &lt;code&gt;ptSrc&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;ptDst&lt;/code&gt; after transforming
                      &lt;code&gt;ptSrc&lt;/code&gt; and stroring the result in &lt;code&gt;ptDst&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="Point2D" line="2873">
                <params>
                    <param name="ptSrc" type="Point2D"/>
                    <param name="ptDst" type="Point2D"/>
                </params>
                <comment line="2882">
                    Copy source coords into local variables in case src == dst                    
                </comment>
                <comment line="2888">
                                        
                </comment>
                <comment line="2916">
                                        
                </comment>
                <scope line="2874">
                    <scope line="2875"/>
                    <scope line="2877"/>
                </scope>
                <declaration name="x" type="double" line="2882"/>
                <declaration name="y" type="double" line="2883"/>
            </method>
            <javadoc line="2918">
                Transforms an array of point objects by this transform.
                  If any element of the &lt;code&gt;ptDst&lt;/code&gt; array is
                  &lt;code&gt;null&lt;/code&gt;, a new &lt;code&gt;Point2D&lt;/code&gt; object is allocated
                  and stored into that element before storing the results of the
                  transformation.
                  &lt;p&gt;
                  Note that this method does not take any precautions to
                  avoid problems caused by storing results into &lt;code&gt;Point2D&lt;/code&gt;
                  objects that will be used as the source for calculations
                  further down the source array.
                  This method does guarantee that if a specified &lt;code&gt;Point2D&lt;/code&gt;
                  object is both the source and destination for the same single point
                  transform operation then the results will not be stored until
                  the calculations are complete to avoid storing the results on
                  top of the operands.
                  If, however, the destination &lt;code&gt;Point2D&lt;/code&gt; object for one
                  operation is the same object as the source &lt;code&gt;Point2D&lt;/code&gt;
                  object for another operation further down the source array then
                  the original coordinates in that point are overwritten before
                  they can be converted.                
                <param>
                    ptSrc the array containing the source point objects                    
                </param>
                <param>
                    ptDst the array into which the transform point objects are
                      returned                    
                </param>
                <param>
                    srcOff the offset to the first point object to be
                      transformed in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point object that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of point objects to be transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="2951">
                <params>
                    <param name="ptSrc" type="Point2D[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="ptDst" type="Point2D[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="2955">
                    Copy source coords into local variables in case src == dst                    
                </comment>
                <comment line="2971">
                                        
                </comment>
                <comment line="3000">
                                        
                </comment>
                <declaration name="state" type="int" line="2952"/>
                <scope line="2953">
                    <declaration name="src" type="Point2D" line="2955"/>
                    <declaration name="x" type="double" line="2956"/>
                    <declaration name="y" type="double" line="2957"/>
                    <declaration name="dst" type="Point2D" line="2958"/>
                    <scope line="2959">
                        <scope line="2960"/>
                        <scope line="2962"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3002">
                Transforms an array of floating point coordinates by this transform.
                  The two coordinate array sections can be exactly the same or
                  can be overlapping sections of the same array without affecting the
                  validity of the results.
                  This method ensures that no source coordinates are overwritten by a
                  previous operation before they can be transformed.
                  The coordinates are stored in the arrays starting at the specified
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source point coordinates.
                      Each point is stored as a pair of x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed point coordinates
                      are returned.  Each point is stored as a pair of x,&amp;nbsp;y
                      coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first point to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of points to be transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="3025">
                <params>
                    <param name="srcPts" type="float[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="float[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3027">
                    For caching                    
                </comment>
                <comment line="3031">
                    If the arrays overlap partially with the destination higher
                     than the source and we transform the coordinates normally
                     we would overwrite some of the later source coordinates
                     with results of previous transformations.
                     To get around this we use arraycopy to copy the points
                     to their final destination with correct overwrite
                     handling and then transform them in place in the new
                     safer location.                    
                </comment>
                <comment line="3040">
                    srcPts = dstPts;         // They are known to be equal.                    
                </comment>
                <comment line="3046">
                                        
                </comment>
                <comment line="3114">
                                        
                </comment>
                <declaration name="M00" type="double" line="3026"/>
                <scope line="3029"/>
                <scope line="3049">
                    <declaration name="x" type="double" line="3050"/>
                    <declaration name="y" type="double" line="3051"/>
                </scope>
                <scope line="3059">
                    <declaration name="x" type="double" line="3060"/>
                    <declaration name="y" type="double" line="3061"/>
                </scope>
                <scope line="3069">
                    <declaration name="x" type="double" line="3070"/>
                </scope>
                <scope line="3077">
                    <declaration name="x" type="double" line="3078"/>
                </scope>
                <scope line="3086"/>
                <scope line="3093"/>
                <scope line="3100"/>
                <scope line="3106"/>
            </method>
            <javadoc line="3116">
                Transforms an array of double precision coordinates by this transform.
                  The two coordinate array sections can be exactly the same or
                  can be overlapping sections of the same array without affecting the
                  validity of the results.
                  This method ensures that no source coordinates are
                  overwritten by a previous operation before they can be transformed.
                  The coordinates are stored in the arrays starting at the indicated
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source point coordinates.
                      Each point is stored as a pair of x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed point
                      coordinates are returned.  Each point is stored as a pair of
                      x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first point to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of point objects to be transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="3139">
                <params>
                    <param name="srcPts" type="double[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="double[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3141">
                    For caching                    
                </comment>
                <comment line="3145">
                    If the arrays overlap partially with the destination higher
                     than the source and we transform the coordinates normally
                     we would overwrite some of the later source coordinates
                     with results of previous transformations.
                     To get around this we use arraycopy to copy the points
                     to their final destination with correct overwrite
                     handling and then transform them in place in the new
                     safer location.                    
                </comment>
                <comment line="3154">
                    srcPts = dstPts;         // They are known to be equal.                    
                </comment>
                <comment line="3160">
                                        
                </comment>
                <comment line="3228">
                                        
                </comment>
                <declaration name="M00" type="double" line="3140"/>
                <scope line="3143"/>
                <scope line="3163">
                    <declaration name="x" type="double" line="3164"/>
                    <declaration name="y" type="double" line="3165"/>
                </scope>
                <scope line="3173">
                    <declaration name="x" type="double" line="3174"/>
                    <declaration name="y" type="double" line="3175"/>
                </scope>
                <scope line="3183">
                    <declaration name="x" type="double" line="3184"/>
                </scope>
                <scope line="3191">
                    <declaration name="x" type="double" line="3192"/>
                </scope>
                <scope line="3200"/>
                <scope line="3207"/>
                <scope line="3214"/>
                <scope line="3220"/>
            </method>
            <javadoc line="3230">
                Transforms an array of floating point coordinates by this transform
                  and stores the results into an array of doubles.
                  The coordinates are stored in the arrays starting at the specified
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source point coordinates.
                      Each point is stored as a pair of x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed point coordinates
                      are returned.  Each point is stored as a pair of x,&amp;nbsp;y
                      coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first point to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of points to be transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="3249">
                <params>
                    <param name="srcPts" type="float[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="double[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3251">
                    For caching                    
                </comment>
                <comment line="3255">
                                        
                </comment>
                <comment line="3323">
                                        
                </comment>
                <declaration name="M00" type="double" line="3250"/>
                <scope line="3258">
                    <declaration name="x" type="double" line="3259"/>
                    <declaration name="y" type="double" line="3260"/>
                </scope>
                <scope line="3268">
                    <declaration name="x" type="double" line="3269"/>
                    <declaration name="y" type="double" line="3270"/>
                </scope>
                <scope line="3278">
                    <declaration name="x" type="double" line="3279"/>
                </scope>
                <scope line="3286">
                    <declaration name="x" type="double" line="3287"/>
                </scope>
                <scope line="3295"/>
                <scope line="3302"/>
                <scope line="3309"/>
                <scope line="3315"/>
            </method>
            <javadoc line="3325">
                Transforms an array of double precision coordinates by this transform
                  and stores the results into an array of floats.
                  The coordinates are stored in the arrays starting at the specified
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source point coordinates.
                      Each point is stored as a pair of x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed point
                      coordinates are returned.  Each point is stored as a pair of
                      x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first point to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of point objects to be transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="transform" type="void" line="3344">
                <params>
                    <param name="srcPts" type="double[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="float[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3346">
                    For caching                    
                </comment>
                <comment line="3350">
                                        
                </comment>
                <comment line="3418">
                                        
                </comment>
                <declaration name="M00" type="double" line="3345"/>
                <scope line="3353">
                    <declaration name="x" type="double" line="3354"/>
                    <declaration name="y" type="double" line="3355"/>
                </scope>
                <scope line="3363">
                    <declaration name="x" type="double" line="3364"/>
                    <declaration name="y" type="double" line="3365"/>
                </scope>
                <scope line="3373">
                    <declaration name="x" type="double" line="3374"/>
                </scope>
                <scope line="3381">
                    <declaration name="x" type="double" line="3382"/>
                </scope>
                <scope line="3390"/>
                <scope line="3397"/>
                <scope line="3404"/>
                <scope line="3410"/>
            </method>
            <javadoc line="3420">
                Inverse transforms the specified &lt;code&gt;ptSrc&lt;/code&gt; and stores the
                  result in &lt;code&gt;ptDst&lt;/code&gt;.
                  If &lt;code&gt;ptDst&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a new
                  &lt;code&gt;Point2D&lt;/code&gt; object is allocated and then the result of the
                  transform is stored in this object.
                  In either case, &lt;code&gt;ptDst&lt;/code&gt;, which contains the transformed
                  point, is returned for convenience.
                  If &lt;code&gt;ptSrc&lt;/code&gt; and &lt;code&gt;ptDst&lt;/code&gt; are the same
                  object, the input point is correctly overwritten with the
                  transformed point.                
                <param>
                    ptSrc the point to be inverse transformed                    
                </param>
                <param>
                    ptDst the resulting transformed point                    
                </param>
                <return>
                    &lt;code&gt;ptDst&lt;/code&gt;, which contains the result of the
                      inverse transform.                    
                </return>
                <exception>
                    NoninvertibleTransformException  if the matrix cannot be
                      inverted.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="inverseTransform" type="Point2D" line="3441">
                <params>
                    <param name="ptSrc" type="Point2D"/>
                    <param name="ptDst" type="Point2D"/>
                </params>
                <comment line="3450">
                    Copy source coords into local variables in case src == dst                    
                </comment>
                <comment line="3456">
                                        
                </comment>
                <comment line="3460">
                                        
                </comment>
                <comment line="3473">
                                        
                </comment>
                <comment line="3483">
                                        
                </comment>
                <comment line="3498">
                                        
                </comment>
                <scope line="3442">
                    <scope line="3443"/>
                    <scope line="3445"/>
                </scope>
                <declaration name="x" type="double" line="3450"/>
                <declaration name="y" type="double" line="3451"/>
                <declaration name="det" type="double" line="3461"/>
                <scope line="3462"/>
                <scope line="3474"/>
                <scope line="3484"/>
            </method>
            <javadoc line="3500">
                Inverse transforms an array of double precision coordinates by
                  this transform.
                  The two coordinate array sections can be exactly the same or
                  can be overlapping sections of the same array without affecting the
                  validity of the results.
                  This method ensures that no source coordinates are
                  overwritten by a previous operation before they can be transformed.
                  The coordinates are stored in the arrays starting at the specified
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source point coordinates.
                      Each point is stored as a pair of x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed point
                      coordinates are returned.  Each point is stored as a pair of
                      x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first point to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed point that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of point objects to be transformed                    
                </param>
                <exception>
                    NoninvertibleTransformException  if the matrix cannot be
                      inverted.                    
                </exception>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="inverseTransform" type="void" line="3528">
                <params>
                    <param name="srcPts" type="double[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="double[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3530">
                    For caching                    
                </comment>
                <comment line="3535">
                    If the arrays overlap partially with the destination higher
                     than the source and we transform the coordinates normally
                     we would overwrite some of the later source coordinates
                     with results of previous transformations.
                     To get around this we use arraycopy to copy the points
                     to their final destination with correct overwrite
                     handling and then transform them in place in the new
                     safer location.                    
                </comment>
                <comment line="3544">
                    srcPts = dstPts;         // They are known to be equal.                    
                </comment>
                <comment line="3550">
                                        
                </comment>
                <comment line="3640">
                                        
                </comment>
                <declaration name="M00" type="double" line="3529"/>
                <declaration name="det" type="double" line="3530"/>
                <scope line="3533"/>
                <scope line="3554"/>
                <scope line="3558">
                    <declaration name="x" type="double" line="3559"/>
                    <declaration name="y" type="double" line="3560"/>
                </scope>
                <scope line="3569"/>
                <scope line="3573">
                    <declaration name="x" type="double" line="3574"/>
                    <declaration name="y" type="double" line="3575"/>
                </scope>
                <scope line="3583"/>
                <scope line="3586">
                    <declaration name="x" type="double" line="3587"/>
                </scope>
                <scope line="3594"/>
                <scope line="3597">
                    <declaration name="x" type="double" line="3598"/>
                </scope>
                <scope line="3606"/>
                <scope line="3609"/>
                <scope line="3616"/>
                <scope line="3619"/>
                <scope line="3626"/>
                <scope line="3632"/>
            </method>
            <javadoc line="3642">
                Transforms the relative distance vector specified by
                  &lt;code&gt;ptSrc&lt;/code&gt; and stores the result in &lt;code&gt;ptDst&lt;/code&gt;.
                  A relative distance vector is transformed without applying the
                  translation components of the affine transformation matrix
                  using the following equations:
                  &lt;pre&gt;
                  [  x&apos; ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
                  [  y&apos; ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
                  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
                  &lt;/pre&gt;
                  If &lt;code&gt;ptDst&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a new
                  &lt;code&gt;Point2D&lt;/code&gt; object is allocated and then the result of the
                  transform is stored in this object.
                  In either case, &lt;code&gt;ptDst&lt;/code&gt;, which contains the
                  transformed point, is returned for convenience.
                  If &lt;code&gt;ptSrc&lt;/code&gt; and &lt;code&gt;ptDst&lt;/code&gt; are the same object,
                  the input point is correctly overwritten with the transformed
                  point.                
                <param>
                    ptSrc the distance vector to be delta transformed                    
                </param>
                <param>
                    ptDst the resulting transformed distance vector                    
                </param>
                <return>
                    &lt;code&gt;ptDst&lt;/code&gt;, which contains the result of the
                      transformation.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deltaTransform" type="Point2D" line="3667">
                <params>
                    <param name="ptSrc" type="Point2D"/>
                    <param name="ptDst" type="Point2D"/>
                </params>
                <comment line="3676">
                    Copy source coords into local variables in case src == dst                    
                </comment>
                <comment line="3682">
                                        
                </comment>
                <comment line="3701">
                                        
                </comment>
                <scope line="3668">
                    <scope line="3669"/>
                    <scope line="3671"/>
                </scope>
                <declaration name="x" type="double" line="3676"/>
                <declaration name="y" type="double" line="3677"/>
            </method>
            <javadoc line="3703">
                Transforms an array of relative distance vectors by this
                  transform.
                  A relative distance vector is transformed without applying the
                  translation components of the affine transformation matrix
                  using the following equations:
                  &lt;pre&gt;
                  [  x&apos; ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
                  [  y&apos; ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
                  [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
                  &lt;/pre&gt;
                  The two coordinate array sections can be exactly the same or
                  can be overlapping sections of the same array without affecting the
                  validity of the results.
                  This method ensures that no source coordinates are
                  overwritten by a previous operation before they can be transformed.
                  The coordinates are stored in the arrays starting at the indicated
                  offset in the order &lt;code&gt;[x0, y0, x1, y1, ..., xn, yn]&lt;/code&gt;.                
                <param>
                    srcPts the array containing the source distance vectors.
                      Each vector is stored as a pair of relative x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    dstPts the array into which the transformed distance vectors
                      are returned.  Each vector is stored as a pair of relative
                      x,&amp;nbsp;y coordinates.                    
                </param>
                <param>
                    srcOff the offset to the first vector to be transformed
                      in the source array                    
                </param>
                <param>
                    dstOff the offset to the location of the first
                      transformed vector that is stored in the destination array                    
                </param>
                <param>
                    numPts the number of vector coordinate pairs to be
                      transformed                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="deltaTransform" type="void" line="3736">
                <params>
                    <param name="srcPts" type="double[]"/>
                    <param name="srcOff" type="int"/>
                    <param name="dstPts" type="double[]"/>
                    <param name="dstOff" type="int"/>
                    <param name="numPts" type="int"/>
                </params>
                <comment line="3738">
                    For caching                    
                </comment>
                <comment line="3742">
                    If the arrays overlap partially with the destination higher
                     than the source and we transform the coordinates normally
                     we would overwrite some of the later source coordinates
                     with results of previous transformations.
                     To get around this we use arraycopy to copy the points
                     to their final destination with correct overwrite
                     handling and then transform them in place in the new
                     safer location.                    
                </comment>
                <comment line="3751">
                    srcPts = dstPts;         // They are known to be equal.                    
                </comment>
                <comment line="3757">
                                        
                </comment>
                <comment line="3795">
                                        
                </comment>
                <declaration name="M00" type="double" line="3737"/>
                <scope line="3740"/>
                <scope line="3761">
                    <declaration name="x" type="double" line="3762"/>
                    <declaration name="y" type="double" line="3763"/>
                </scope>
                <scope line="3771">
                    <declaration name="x" type="double" line="3772"/>
                </scope>
                <scope line="3780"/>
                <scope line="3787"/>
            </method>
            <javadoc line="3797">
                Returns a new {@link Shape} object defined by the geometry of the
                  specified &lt;code&gt;Shape&lt;/code&gt; after it has been transformed by
                  this transform.                
                <param>
                    pSrc the specified &lt;code&gt;Shape&lt;/code&gt; object to be
                      transformed by this transform.                    
                </param>
                <return>
                    a new &lt;code&gt;Shape&lt;/code&gt; object that defines the geometry
                      of the transformed &lt;code&gt;Shape&lt;/code&gt;, or null if {@code pSrc} is null.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="createTransformedShape" type="Shape" line="3807">
                <params>
                    <param name="pSrc" type="Shape"/>
                </params>
                <scope line="3808"/>
            </method>
            <method name="_matround" type="double" line="3816">
                <params>
                    <param name="matval" type="double"/>
                </params>
            </method>
            <javadoc line="3820">
                Returns a &lt;code&gt;String&lt;/code&gt; that represents the value of this{@link Object}.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the value of this
                      &lt;code&gt;Object&lt;/code&gt;.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="3827"/>
            <javadoc line="3837">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;AffineTransform&lt;/code&gt; is
                  an identity transform.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;AffineTransform&lt;/code&gt; is
                      an identity transform; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="isIdentity" type="boolean" line="3844"/>
            <javadoc line="3848">
                Returns a copy of this &lt;code&gt;AffineTransform&lt;/code&gt; object.                
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; that is a copy of this
                      &lt;code&gt;AffineTransform&lt;/code&gt; object.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="clone" type="Object" line="3854">
                <comment line="3859">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="3855"/>
                <scope line="3857"/>
            </method>
            <javadoc line="3863">
                Returns the hashcode for this transform.                
                <return>
                    a hash code for this transform.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="3868">
                <declaration name="bits" type="long" line="3869"/>
            </method>
            <javadoc line="3878">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;AffineTransform&lt;/code&gt;
                  represents the same affine coordinate transform as the specified
                  argument.                
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; to test for equality with this
                      &lt;code&gt;AffineTransform&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; equals this
                      &lt;code&gt;AffineTransform&lt;/code&gt; object; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="3888">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="3889"/>
                <declaration name="a" type="AffineTransform" line="3893"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="3909"/>
            <method name="writeObject" type="void" line="3913">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="3919">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>