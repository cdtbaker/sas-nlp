<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util.LinkedList"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="SequencedEvent" line="5">
            <extends class="AWTEvent"/>
            <implements interface="ActiveEvent"/>
            <javadoc line="5">
                A mechanism for ensuring that a series of AWTEvents are executed in a
                  precise order, even across multiple AppContexts. The nested events will be
                  dispatched in the order in which their wrapping SequencedEvents were
                  constructed. The only exception to this rule is if the peer of the target of
                  the nested event was destroyed (with a call to Component.removeNotify)
                  before the wrapping SequencedEvent was able to be dispatched. In this case,
                  the nested event is never dispatched.                
                <author>
                    David Mendenhall                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="16"/>
            <declaration name="ID" type="int" line="17"/>
            <declaration name="list" type="LinkedList" line="18"/>
            <declaration name="nested" type="AWTEvent" line="19"/>
            <declaration name="appContext" type="AppContext" line="20"/>
            <declaration name="disposed" type="boolean" line="21"/>
            <javadoc line="22">
                Constructs a new SequencedEvent which will dispatch the specified
                  nested event.                
                <param>
                    nested the AWTEvent which this SequencedEvent&apos;s dispatch()
                      method will dispatch                    
                </param>
            </javadoc>
            <method name="SequencedEvent" type="constructor" line="28">
                <params>
                    <param name="nested" type="AWTEvent"/>
                </params>
                <scope line="32"/>
            </method>
            <javadoc line="36">
                Dispatches the nested event after all previous nested events have been
                  dispatched or disposed. If this method is invoked before all previous nested events
                  have been dispatched, then this method blocks until such a point is
                  reached.
                  While waiting disposes nested events to disposed AppContext
                  NOTE: Locking protocol.  Since dispose() can get EventQueue lock,
                  dispatch() shall never call dispose() while holding the lock on the list,
                  as EventQueue lock is held during dispatching.  The locks should be acquired
                  in the same order.                
            </javadoc>
            <method name="dispatch" type="void" line="47">
                <scope line="48">
                    <scope line="50">
                        <scope line="51">
                            <declaration name="edt" type="EventDispatchThread" line="52"/>
                            <anonymous_class line="53">
                                <method name="evaluate" type="boolean" line="54"/>
                            </anonymous_class>
                        </scope>
                        <scope line="60">
                            <scope line="61">
                                <scope line="62">
                                    <scope line="63"/>
                                    <scope line="66"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="73"/>
                </scope>
                <scope line="78"/>
            </method>
            <javadoc line="82">
                true only if event exists and nested source appContext is disposed.                
            </javadoc>
            <method name="isOwnerAppContextDisposed" type="boolean" line="85">
                <params>
                    <param name="se" type="SequencedEvent"/>
                </params>
                <scope line="86">
                    <declaration name="target" type="Object" line="87"/>
                    <scope line="88"/>
                </scope>
            </method>
            <javadoc line="94">
                Sequenced events are dispatched in order, so we cannot dispatch
                  until we are the first sequenced event in the queue (i.e. it&apos;s our
                  turn).  But while we wait for our turn to dispatch, the event
                  could have been disposed for a number of reasons.                
            </javadoc>
            <method name="isFirstOrDisposed" type="boolean" line="100">
                <scope line="101"/>
            </method>
            <method name="getFirst" type="SequencedEvent" line="106"/>
            <method name="getFirstWithContext" type="SequencedEvent" line="109">
                <declaration name="first" type="SequencedEvent" line="110"/>
                <scope line="111"/>
            </method>
            <javadoc line="117">
                Disposes of this instance. This method is invoked once the nested event
                  has been dispatched and handled, or when the peer of the target of the
                  nested event has been disposed with a call to Component.removeNotify.
                  NOTE: Locking protocol.  Since SunToolkit.postEvent can get EventQueue lock,
                  it shall never be called while holding the lock on the list,
                  as EventQueue lock is held during dispatching and dispatch() will get
                  lock on the list. The locks should be acquired in the same order.                
            </javadoc>
            <method name="dispose" type="void" line="126">
                <scope line="127">
                    <scope line="128"/>
                    <scope line="131"/>
                </scope>
                <scope line="136"/>
                <declaration name="next" type="SequencedEvent" line="139"/>
                <scope line="140">
                    <scope line="142">
                        <scope line="144"/>
                    </scope>
                    <scope line="148"/>
                </scope>
                <scope line="152"/>
            </method>
        </class>
    </source>