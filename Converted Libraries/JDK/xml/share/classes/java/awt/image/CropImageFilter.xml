<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.util.Hashtable"/>
        <import package="java.awt.Rectangle"/>
        <class name="CropImageFilter" line="33">
            <extends class="ImageFilter"/>
            <comment line="184">
                check for potential overflow (see bug 4801285)                
            </comment>
            <javadoc line="33">
                An ImageFilter class for cropping images.
                  This class extends the basic ImageFilter Class to extract a given
                  rectangular region of an existing Image and provide a source for a
                  new image containing just the extracted region.  It is meant to
                  be used in conjunction with a FilteredImageSource object to produce
                  cropped versions of existing images.                
                <see>
                    FilteredImageSource                    
                </see>
                <see>
                    ImageFilter                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="cropX" type="int" line="47"/>
            <declaration name="cropY" type="int" line="48"/>
            <declaration name="cropW" type="int" line="49"/>
            <declaration name="cropH" type="int" line="50"/>
            <javadoc line="52">
                Constructs a CropImageFilter that extracts the absolute rectangular
                  region of pixels from its source Image as specified by the x, y,
                  w, and h parameters.                
                <param>
                    x the x location of the top of the rectangle to be extracted                    
                </param>
                <param>
                    y the y location of the top of the rectangle to be extracted                    
                </param>
                <param>
                    w the width of the rectangle to be extracted                    
                </param>
                <param>
                    h the height of the rectangle to be extracted                    
                </param>
            </javadoc>
            <method name="CropImageFilter" type="constructor" line="61">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="68">
                Passes along  the properties from the source object after adding a
                  property indicating the cropped region.
                  This method invokes &lt;code&gt;super.setProperties&lt;/code&gt;,
                  which might result in additional properties being added.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
            </javadoc>
            <method name="setProperties" type="void" line="81">
                <params>
                    <param name="props" type="Hashtable<?,?>"/>
                </params>
                <declaration name="p" type="Hashtable&lt;Object,Object&gt;" line="82"/>
            </method>
            <javadoc line="87">
                Override the source image&apos;s dimensions and pass the dimensions
                  of the rectangular cropped region to the ImageConsumer.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose
                  pixels are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="setDimensions" type="void" line="99">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Determine whether the delivered byte pixels intersect the region to
                  be extracted and passes through only that subset of pixels that
                  appear in the output region.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose
                  pixels are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
            </javadoc>
            <method name="setPixels" type="void" line="117">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="x1" type="int" line="118"/>
                <scope line="119"/>
                <declaration name="x2" type="int" line="122"/>
                <scope line="123"/>
                <declaration name="y1" type="int" line="126"/>
                <scope line="127"/>
                <declaration name="y2" type="int" line="131"/>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="143">
                Determine if the delivered int pixels intersect the region to
                  be extracted and pass through only that subset of pixels that
                  appear in the output region.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose
                  pixels are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
            </javadoc>
            <method name="setPixels" type="void" line="157">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="x1" type="int" line="158"/>
                <scope line="159"/>
                <declaration name="x2" type="int" line="162"/>
                <scope line="163"/>
                <declaration name="y1" type="int" line="166"/>
                <scope line="167"/>
                <declaration name="y2" type="int" line="171"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
            <method name="addWithoutOverflow" type="int" line="184">
                <params>
                    <param name="x" type="int"/>
                    <param name="w" type="int"/>
                </params>
                <declaration name="x2" type="int" line="185"/>
                <scope line="186"/>
                <scope line="188"/>
            </method>
        </class>
    </source>