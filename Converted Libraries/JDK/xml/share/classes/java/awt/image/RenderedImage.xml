<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Dictionary"/>
        <import package="java.util.Vector"/>
        <interface name="RenderedImage">
            <javadoc line="41">
                RenderedImage is a common interface for objects which contain
                  or can produce image data in the form of Rasters.  The image
                  data may be stored/produced as a single tile or a regular array
                  of tiles.                
            </javadoc>
            <method name="getSources" type="Vector<RenderedImage>" line="50"/>
            <javadoc line="50">
                Returns a vector of RenderedImages that are the immediate sources of
                  image data for this RenderedImage.  This method returns null if
                  the RenderedImage object has no information about its immediate
                  sources.  It returns an empty Vector if the RenderedImage object has
                  no immediate sources.                
                <return>
                    a Vector of <code>RenderedImage</code> objects.                    
                </return>
            </javadoc>
            <method name="getProperty" type="Object" line="60"/>
            <javadoc line="60">
                Gets a property from the property set of this image.  The set of
                  properties and whether it is immutable is determined by the
                  implementing class.  This method returns
                  java.awt.Image.UndefinedProperty if the specified property is
                  not defined for this RenderedImage.                
                <param>
                    name the name of the property                    
                </param>
                <return>
                    the property indicated by the specified name.                    
                </return>
                <see>
                    java.awt.Image#UndefinedProperty                    
                </see>
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="72"/>
            <javadoc line="72">
                Returns an array of names recognized by{@link #getProperty(String) getProperty(String)}or &lt;code&gt;null&lt;/code&gt;, if no property names are recognized.                
                <return>
                    a <code>String</code> array containing all of the
                      property names that <code>getProperty(String)</code> recognizes;
                      or <code>null</code> if no property names are recognized.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="82"/>
            <javadoc line="82">
                Returns the ColorModel associated with this image.  All Rasters
                  returned from this image will have this as their ColorModel.  This
                  can return null.                
                <return>
                    the <code>ColorModel</code> of this image.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="90"/>
            <javadoc line="90">
                Returns the SampleModel associated with this image.  All Rasters
                  returned from this image will have this as their SampleModel.                
                <return>
                    the <code>SampleModel</code> of this image.                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="97"/>
            <javadoc line="97">
                Returns the width of the RenderedImage.                
                <return>
                    the width of this <code>RenderedImage</code>.                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="103"/>
            <javadoc line="103">
                Returns the height of the RenderedImage.                
                <return>
                    the height of this <code>RenderedImage</code>.                    
                </return>
            </javadoc>
            <method name="getMinX" type="int" line="109"/>
            <javadoc line="109">
                Returns the minimum X coordinate (inclusive) of the RenderedImage.                
                <return>
                    the X coordinate of this <code>RenderedImage</code>.                    
                </return>
            </javadoc>
            <method name="getMinY" type="int" line="115"/>
            <javadoc line="115">
                Returns the minimum Y coordinate (inclusive) of the RenderedImage.                
                <return>
                    the Y coordinate of this <code>RenderedImage</code>.                    
                </return>
            </javadoc>
            <method name="getNumXTiles" type="int" line="121"/>
            <javadoc line="121">
                Returns the number of tiles in the X direction.                
                <return>
                    the number of tiles in the X direction.                    
                </return>
            </javadoc>
            <method name="getNumYTiles" type="int" line="127"/>
            <javadoc line="127">
                Returns the number of tiles in the Y direction.                
                <return>
                    the number of tiles in the Y direction.                    
                </return>
            </javadoc>
            <method name="getMinTileX" type="int" line="133"/>
            <javadoc line="133">
                Returns the minimum tile index in the X direction.                
                <return>
                    the minimum tile index in the X direction.                    
                </return>
            </javadoc>
            <method name="getMinTileY" type="int" line="139"/>
            <javadoc line="139">
                Returns the minimum tile index in the Y direction.                
                <return>
                    the minimum tile index in the X direction.                    
                </return>
            </javadoc>
            <method name="getTileWidth" type="int" line="145"/>
            <javadoc line="145">
                Returns the tile width in pixels.  All tiles must have the same
                  width.                
                <return>
                    the tile width in pixels.                    
                </return>
            </javadoc>
            <method name="getTileHeight" type="int" line="152"/>
            <javadoc line="152">
                Returns the tile height in pixels.  All tiles must have the same
                  height.                
                <return>
                    the tile height in pixels.                    
                </return>
            </javadoc>
            <method name="getTileGridXOffset" type="int" line="159"/>
            <javadoc line="159">
                Returns the X offset of the tile grid relative to the origin,
                  i.e., the X coordinate of the upper-left pixel of tile (0, 0).
                  (Note that tile (0, 0) may not actually exist.)                
                <return>
                    the X offset of the tile grid relative to the origin.                    
                </return>
            </javadoc>
            <method name="getTileGridYOffset" type="int" line="167"/>
            <javadoc line="167">
                Returns the Y offset of the tile grid relative to the origin,
                  i.e., the Y coordinate of the upper-left pixel of tile (0, 0).
                  (Note that tile (0, 0) may not actually exist.)                
                <return>
                    the Y offset of the tile grid relative to the origin.                    
                </return>
            </javadoc>
            <method name="getTile" type="Raster" line="175"/>
            <javadoc line="175">
                Returns tile (tileX, tileY).  Note that tileX and tileY are indices
                  into the tile array, not pixel locations.  The Raster that is returned
                  is live and will be updated if the image is changed.                
                <param>
                    tileX the X index of the requested tile in the tile array                    
                </param>
                <param>
                    tileY the Y index of the requested tile in the tile array                    
                </param>
                <return>
                    the tile given the specified indices.                    
                </return>
            </javadoc>
            <method name="getData" type="Raster" line="185"/>
            <javadoc line="185">
                Returns the image as one large tile (for tile based
                  images this will require fetching the whole image
                  and copying the image data over).  The Raster returned is
                  a copy of the image data and will not be updated if the image
                  is changed.                
                <return>
                    the image as one large tile.                    
                </return>
            </javadoc>
            <method name="getData" type="Raster" line="195"/>
            <javadoc line="195">
                Computes and returns an arbitrary region of the RenderedImage.
                  The Raster returned is a copy of the image data and will not
                  be updated if the image is changed.                
                <param>
                    rect the region of the RenderedImage to be returned.                    
                </param>
                <return>
                    the region of the <code>RenderedImage</code>
                      indicated by the specified <code>Rectangle</code>.                    
                </return>
            </javadoc>
            <method name="copyData" type="WritableRaster" line="205"/>
            <javadoc line="205">
                Computes an arbitrary rectangular region of the RenderedImage
                  and copies it into a caller-supplied WritableRaster.  The region
                  to be computed is determined from the bounds of the supplied
                  WritableRaster.  The supplied WritableRaster must have a
                  SampleModel that is compatible with this image.  If raster is null,
                  an appropriate WritableRaster is created.                
                <param>
                    raster a WritableRaster to hold the returned portion of the
                      image, or null.                    
                </param>
                <return>
                    a reference to the supplied or created WritableRaster.                    
                </return>
            </javadoc>
        </interface>
    </source>