<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Image"/>
        <import package="java.awt.image.ImageFilter"/>
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.util.Hashtable"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="FilteredImageSource" line="8">
            <implements interface="ImageProducer"/>
            <javadoc line="8">
                This class is an implementation of the ImageProducer interface which
                  takes an existing image and a filter object and uses them to produce
                  image data for a new filtered version of the original image.
                  Here is an example which filters an image by swapping the red and
                  blue compents:
                  &lt;pre&gt;
                  Image src = getImage(&quot;doc:///demo/images/duke/T1.gif&quot;);
                  ImageFilter colorfilter = new RedBlueSwapFilter();
                  Image img = createImage(new FilteredImageSource(src.getSource(),
                  colorfilter));
                  &lt;/pre&gt;                
                <see>
                    ImageProducer                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="src" type="ImageProducer" line="24"/>
            <declaration name="filter" type="ImageFilter" line="25"/>
            <javadoc line="26">
                Constructs an ImageProducer object from an existing ImageProducer
                  and a filter object.                
                <param>
                    orig the specified &lt;code&gt;ImageProducer&lt;/code&gt;                    
                </param>
                <param>
                    imgf the specified &lt;code&gt;ImageFilter&lt;/code&gt;                    
                </param>
                <see>
                    ImageFilter                    
                </see>
                <see>
                    java.awt.Component#createImage                    
                </see>
            </javadoc>
            <method name="FilteredImageSource" type="constructor" line="34">
                <params>
                    <param name="orig" type="ImageProducer"/>
                    <param name="imgf" type="ImageFilter"/>
                </params>
            </method>
            <declaration name="proxies" type="Hashtable" line="38"/>
            <javadoc line="39">
                Adds the specified &lt;code&gt;ImageConsumer&lt;/code&gt;
                  to the list of consumers interested in data for the filtered image.
                  An instance of the original &lt;code&gt;ImageFilter&lt;/code&gt;
                  is created
                  (using the filter&apos;s &lt;code&gt;getFilterInstance&lt;/code&gt; method)
                  to manipulate the image data
                  for the specified &lt;code&gt;ImageConsumer&lt;/code&gt;.
                  The newly created filter instance
                  is then passed to the &lt;code&gt;addConsumer&lt;/code&gt; method
                  of the original &lt;code&gt;ImageProducer&lt;/code&gt;.
                  &lt;p&gt;
                  This method is public as a side effect
                  of this class implementing
                  the &lt;code&gt;ImageProducer&lt;/code&gt; interface.
                  It should not be called from user code,
                  and its behavior if called from user code is unspecified.                
                <param>
                    ic  the consumer for the filtered image                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="addConsumer" type="void" line="59">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="60"/>
                <scope line="63">
                    <declaration name="imgf" type="ImageFilter" line="64"/>
                </scope>
            </method>
            <javadoc line="69">
                Determines whether an ImageConsumer is on the list of consumers
                  currently interested in data for this image.
                  &lt;p&gt;
                  This method is public as a side effect
                  of this class implementing
                  the &lt;code&gt;ImageProducer&lt;/code&gt; interface.
                  It should not be called from user code,
                  and its behavior if called from user code is unspecified.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;                    
                </param>
                <return>
                    true if the ImageConsumer is on the list; false otherwise                    
                </return>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="isConsumer" type="boolean" line="82">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="85">
                Removes an ImageConsumer from the list of consumers interested in
                  data for this image.
                  &lt;p&gt;
                  This method is public as a side effect
                  of this class implementing
                  the &lt;code&gt;ImageProducer&lt;/code&gt; interface.
                  It should not be called from user code,
                  and its behavior if called from user code is unspecified.                
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="removeConsumer" type="void" line="96">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="97">
                    <declaration name="imgf" type="ImageFilter" line="98"/>
                    <scope line="99">
                        <scope line="102"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="108">
                Starts production of the filtered image.
                  If the specified &lt;code&gt;ImageConsumer&lt;/code&gt;
                  isn&apos;t already a consumer of the filtered image,
                  an instance of the original &lt;code&gt;ImageFilter&lt;/code&gt;
                  is created
                  (using the filter&apos;s &lt;code&gt;getFilterInstance&lt;/code&gt; method)
                  to manipulate the image data
                  for the &lt;code&gt;ImageConsumer&lt;/code&gt;.
                  The filter instance for the &lt;code&gt;ImageConsumer&lt;/code&gt;
                  is then passed to the &lt;code&gt;startProduction&lt;/code&gt; method
                  of the original &lt;code&gt;ImageProducer&lt;/code&gt;.
                  &lt;p&gt;
                  This method is public as a side effect
                  of this class implementing
                  the &lt;code&gt;ImageProducer&lt;/code&gt; interface.
                  It should not be called from user code,
                  and its behavior if called from user code is unspecified.                
                <param>
                    ic  the consumer for the filtered image                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="startProduction" type="void" line="129">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="130"/>
                <declaration name="imgf" type="ImageFilter" line="133"/>
                <scope line="134"/>
            </method>
            <javadoc line="140">
                Requests that a given ImageConsumer have the image data delivered
                  one more time in top-down, left-right order.  The request is
                  handed to the ImageFilter for further processing, since the
                  ability to preserve the pixel ordering depends on the filter.
                  &lt;p&gt;
                  This method is public as a side effect
                  of this class implementing
                  the &lt;code&gt;ImageProducer&lt;/code&gt; interface.
                  It should not be called from user code,
                  and its behavior if called from user code is unspecified.                
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="requestTopDownLeftRightResend" type="void" line="153">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="154">
                    <declaration name="imgf" type="ImageFilter" line="155"/>
                    <scope line="156"/>
                </scope>
            </method>
        </class>
    </source>