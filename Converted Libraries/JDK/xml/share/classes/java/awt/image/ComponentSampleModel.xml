<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Arrays"/>
        <class name="ComponentSampleModel" line="40">
            <extends class="SampleModel"/>
            <comment line="1185">
                If we implement equals() we must also implement hashCode                
            </comment>
            <javadoc line="40">
                This class represents image data which is stored such that each sample
                  of a pixel occupies one data element of the DataBuffer.  It stores the
                  N samples which make up a pixel in N separate data array elements.
                  Different bands may be in different banks of the DataBuffer.
                  Accessor methods are provided so that image data can be manipulated
                  directly. This class can support different kinds of interleaving, e.g.
                  band interleaving, scanline interleaving, and pixel interleaving.
                  Pixel stride is the number of data array elements between two samples
                  for the same band on the same scanline. Scanline stride is the number
                  of data array elements between a given sample and the corresponding sample
                  in the same column of the next scanline.  Band offsets denote the number
                  of data array elements from the first data array element of the bank
                  of the DataBuffer holding each band to the first sample of the band.
                  The bands are numbered from 0 to N-1.  This class can represent image
                  data for which each sample is an unsigned integral number which can be
                  stored in 8, 16, or 32 bits (using &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;,
                  respectively), data for which each sample is a signed integral number
                  which can be stored in 16 bits (using &lt;code&gt;DataBuffer.TYPE_SHORT&lt;/code&gt;),
                  or data for which each sample is a signed float or double quantity
                  (using &lt;code&gt;DataBuffer.TYPE_FLOAT&lt;/code&gt; or
                  &lt;code&gt;DataBuffer.TYPE_DOUBLE&lt;/code&gt;, respectively).
                  All samples of a given ComponentSampleModel
                  are stored with the same precision.  All strides and offsets must be
                  non-negative.  This class supports{@link DataBuffer#TYPE_BYTE TYPE_BYTE},{@link DataBuffer#TYPE_USHORT TYPE_USHORT},{@link DataBuffer#TYPE_SHORT TYPE_SHORT},{@link DataBuffer#TYPE_INT TYPE_INT},{@link DataBuffer#TYPE_FLOAT TYPE_FLOAT},{@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE},                
                <see>
                    java.awt.image.PixelInterleavedSampleModel                    
                </see>
                <see>
                    java.awt.image.BandedSampleModel                    
                </see>
            </javadoc>
            <declaration name="bandOffsets" type="int" line="78"/>
            <javadoc line="78">
                Offsets for all bands in data array elements.                
            </javadoc>
            <declaration name="bankIndices" type="int[]" line="81"/>
            <javadoc line="81">
                Index for each bank storing a band of image data.                
            </javadoc>
            <declaration name="numBands" type="int" line="84"/>
            <javadoc line="84">
                The number of bands in this
                  &lt;code&gt;ComponentSampleModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="numBanks" type="int" line="90"/>
            <javadoc line="90">
                The number of banks in this
                  &lt;code&gt;ComponentSampleModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="scanlineStride" type="int" line="96"/>
            <javadoc line="96">
                Line stride (in data array elements) of the region of image
                  data described by this ComponentSampleModel.                
            </javadoc>
            <declaration name="pixelStride" type="int" line="102"/>
            <javadoc line="102">
                Pixel stride (in data array elements) of the region of image
                  data described by this ComponentSampleModel.                
            </javadoc>
            <method name="initIDs" type="void" line="107"/>
            <scope line="108"/>
            <javadoc line="113">
                Constructs a ComponentSampleModel with the specified parameters.
                  The number of bands will be given by the length of the bandOffsets array.
                  All bands will be stored in the first bank of the DataBuffer.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width (in pixels) of the region of
                      image data described                    
                </param>
                <param>
                    h         the height (in pixels) of the region of
                      image data described                    
                </param>
                <param>
                    pixelStride the pixel stride of the region of image
                      data described                    
                </param>
                <param>
                    scanlineStride the line stride of the region of image
                      data described                    
                </param>
                <param>
                    bandOffsets the offsets of all bands                    
                </param>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>pixelStride</code>
                      is less than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>scanlineStride</code>
                      is less than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>numBands</code>
                      is less than 1                    
                </throws>
                <throws>
                    IllegalArgumentException if the product of <code>w</code>
                      and <code>h</code> is greater than
                      <code>Integer.MAX_VALUE</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="ComponentSampleModel" type="constructor" line="145">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixelStride" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bandOffsets" type="int"/>
                </params>
                <comment line="155">
                    TODO - bug 4296691 - remove this check                    
                </comment>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="163"/>
                <scope line="167"/>
            </method>
            <javadoc line="173">
                Constructs a ComponentSampleModel with the specified parameters.
                  The number of bands will be given by the length of the bandOffsets array.
                  Different bands may be stored in different banks of the DataBuffer.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width (in pixels) of the region of
                      image data described                    
                </param>
                <param>
                    h         the height (in pixels) of the region of
                      image data described                    
                </param>
                <param>
                    pixelStride the pixel stride of the region of image
                      data described                    
                </param>
                <param>
                    scanlineStride The line stride of the region of image
                      data described                    
                </param>
                <param>
                    bankIndices the bank indices of all bands                    
                </param>
                <param>
                    bandOffsets the band offsets of all bands                    
                </param>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>pixelStride</code>
                      is less than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>scanlineStride</code>
                      is less than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if the length of
                      <code>bankIndices</code> does not equal the length of
                      <code>bankOffsets</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if any of the bank indices
                      of <code>bandIndices</code> is less than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="ComponentSampleModel" type="constructor" line="208">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixelStride" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bankIndices" type="int"/>
                    <param name="bandOffsets" type="int"/>
                </params>
                <comment line="218">
                    TODO - bug 4296691 - remove this check                    
                </comment>
                <scope line="215"/>
                <scope line="219"/>
                <scope line="223"/>
                <declaration name="maxBank" type="int" line="226"/>
                <scope line="227"/>
                <scope line="231">
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
                <scope line="243"/>
            </method>
            <javadoc line="249">
                Returns the size of the data buffer (in data elements) needed
                  for a data buffer that matches this ComponentSampleModel.                
            </javadoc>
            <method name="getBufferSize" type="long" line="253">
                <declaration name="maxBandOff" type="int" line="254"/>
                <declaration name="size" type="long" line="258"/>
            </method>
            <javadoc line="268">
                Preserves band ordering with new step factor...                
            </javadoc>
            <method name="orderBands" type="int[]" line="271">
                <params>
                    <param name="orig" type="int"/>
                    <param name="step" type="int"/>
                </params>
                <declaration name="map" type="int" line="272"/>
                <declaration name="ret" type="int" line="273"/>
                <scope line="277">
                    <declaration name="index" type="int" line="278"/>
                    <scope line="279">
                        <scope line="280"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="290">
                Creates a new &lt;code&gt;ComponentSampleModel&lt;/code&gt; with the specified
                  width and height.  The new &lt;code&gt;SampleModel&lt;/code&gt; will have the same
                  number of bands, storage data type, interleaving scheme, and
                  pixel stride as this &lt;code&gt;SampleModel&lt;/code&gt;.                
                <param>
                    w the width of the resulting <code>SampleModel</code>                    
                </param>
                <param>
                    h the height of the resulting <code>SampleModel</code>                    
                </param>
                <return>
                    a new <code>ComponentSampleModel</code> with the specified size                    
                </return>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="301">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="320">
                    pix &gt; line &gt; band                    
                </comment>
                <comment line="326">
                    pix &gt; band &gt; line                    
                </comment>
                <comment line="330">
                    band &gt; pix &gt; line                    
                </comment>
                <comment line="335">
                    line &gt; pix &gt; band                    
                </comment>
                <comment line="342">
                    line &gt; band &gt; pix                    
                </comment>
                <comment line="345">
                    band &gt; line &gt; pix                    
                </comment>
                <comment line="352">
                    make sure we make room for negative offsets...                    
                </comment>
                <declaration name="ret" type="SampleModel" line="302"/>
                <declaration name="size" type="long" line="303"/>
                <declaration name="minBandOff" type="int" line="304"/>
                <declaration name="maxBandOff" type="int" line="305"/>
                <scope line="306"/>
                <declaration name="bands" type="int" line="312"/>
                <declaration name="bandOff" type="int" line="313"/>
                <declaration name="pStride" type="int" line="314"/>
                <declaration name="lStride" type="int" line="315"/>
                <declaration name="bStride" type="int" line="316"/>
                <scope line="318">
                    <scope line="319">
                        <scope line="320"/>
                        <scope line="326"/>
                    </scope>
                    <scope line="330"/>
                </scope>
                <scope line="334">
                    <scope line="335"/>
                    <scope line="341">
                        <scope line="342"/>
                        <scope line="345"/>
                    </scope>
                </scope>
                <declaration name="base" type="int" line="353"/>
                <scope line="354"/>
                <scope line="358"/>
            </method>
            <javadoc line="369">
                Creates a new ComponentSampleModel with a subset of the bands
                  of this ComponentSampleModel.  The new ComponentSampleModel can be
                  used with any DataBuffer that the existing ComponentSampleModel
                  can be used with.  The new ComponentSampleModel/DataBuffer
                  combination will represent an image with a subset of the bands
                  of the original ComponentSampleModel/DataBuffer combination.                
                <param>
                    bands a subset of bands from this
                      <code>ComponentSampleModel</code>                    
                </param>
                <return>
                    a <code>ComponentSampleModel</code> created with a subset
                      of bands from this <code>ComponentSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="createSubsetSampleModel" type="SampleModel" line="381">
                <params>
                    <param name="bands" type="int"/>
                </params>
                <declaration name="newBankIndices" type="int" line="386"/>
                <declaration name="newBandOffsets" type="int" line="387"/>
                <scope line="389"/>
            </method>
            <javadoc line="400">
                Creates a &lt;code&gt;DataBuffer&lt;/code&gt; that corresponds to this
                  &lt;code&gt;ComponentSampleModel&lt;/code&gt;.
                  The &lt;code&gt;DataBuffer&lt;/code&gt; object&apos;s data type, number of banks,
                  and size are be consistent with this &lt;code&gt;ComponentSampleModel&lt;/code&gt;.                
                <return>
                    a <code>DataBuffer</code> whose data type, number of banks
                      and size are consistent with this
                      <code>ComponentSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="createDataBuffer" type="DataBuffer" line="409">
                <declaration name="dataBuffer" type="DataBuffer" line="410"/>
                <declaration name="size" type="int" line="412"/>
            </method>
            <javadoc line="438">
                Gets the offset for the first band of pixel (x,y).
                  A sample of the first band can be retrieved from a
                  &lt;code&gt;DataBuffer&lt;/code&gt;
                  &lt;code&gt;data&lt;/code&gt; with a &lt;code&gt;ComponentSampleModel&lt;/code&gt;
                  &lt;code&gt;csm&lt;/code&gt; as
                  &lt;pre&gt;
                  data.getElem(csm.getOffset(x, y));
                  &lt;/pre&gt;                
                <param>
                    x the X location of the pixel                    
                </param>
                <param>
                    y the Y location of the pixel                    
                </param>
                <return>
                    the offset for the first band of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="450">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="offset" type="int" line="451"/>
            </method>
            <javadoc line="455">
                Gets the offset for band b of pixel (x,y).
                  A sample of band &lt;code&gt;b&lt;/code&gt; can be retrieved from a
                  &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;
                  with a &lt;code&gt;ComponentSampleModel&lt;/code&gt; &lt;code&gt;csm&lt;/code&gt; as
                  &lt;pre&gt;
                  data.getElem(csm.getOffset(x, y, b));
                  &lt;/pre&gt;                
                <param>
                    x the X location of the specified pixel                    
                </param>
                <param>
                    y the Y location of the specified pixel                    
                </param>
                <param>
                    b the specified band                    
                </param>
                <return>
                    the offset for the specified band of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="467">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="offset" type="int" line="468"/>
            </method>
            <javadoc line="472">
                Returns the number of bits per sample for all bands.                
                <return>
                    an array containing the number of bits per sample
                      for all bands, where each element in the array
                      represents a band.                    
                </return>
            </javadoc>
            <method name="getSampleSize" type="int[]" line="477">
                <declaration name="sampleSize" type="int" line="478"/>
                <declaration name="sizeInBits" type="int" line="479"/>
            </method>
            <javadoc line="487">
                Returns the number of bits per sample for the specified band.                
                <param>
                    band the specified band                    
                </param>
                <return>
                    the number of bits per sample for the specified band.                    
                </return>
            </javadoc>
            <method name="getSampleSize" type="int" line="491">
                <params>
                    <param name="band" type="int"/>
                </params>
            </method>
            <javadoc line="495">
                Returns the bank indices for all bands.                
                <return>
                    the bank indices for all bands.                    
                </return>
            </javadoc>
            <method name="getBankIndices" type="int[]" line="498"/>
            <javadoc line="502">
                Returns the band offset for all bands.                
                <return>
                    the band offsets for all bands.                    
                </return>
            </javadoc>
            <method name="getBandOffsets" type="int[]" line="505"/>
            <javadoc line="509">
                Returns the scanline stride of this ComponentSampleModel.                
                <return>
                    the scanline stride of this <code>ComponentSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getScanlineStride" type="int" line="512"/>
            <javadoc line="516">
                Returns the pixel stride of this ComponentSampleModel.                
                <return>
                    the pixel stride of this <code>ComponentSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getPixelStride" type="int" line="519"/>
            <javadoc line="523">
                Returns the number of data elements needed to transfer a pixel
                  with the{@link #getDataElements(int,int,Object,DataBuffer) } and{@link #setDataElements(int,int,Object,DataBuffer) }methods.
                  For a &lt;code&gt;ComponentSampleModel&lt;/code&gt;, this is identical to the
                  number of bands.                
                <return>
                    the number of data elements needed to transfer a pixel with
                      the <code>getDataElements</code> and
                      <code>setDataElements</code> methods.                    
                </return>
                <see>
                    java.awt.image.SampleModel#getNumDataElements                    
                </see>
                <see>
                    #getNumBands                    
                </see>
            </javadoc>
            <method name="getNumDataElements" type="int" line="537"/>
            <javadoc line="541">
                Returns data for a single pixel in a primitive array of type
                  &lt;code&gt;TransferType&lt;/code&gt;.  For a &lt;code&gt;ComponentSampleModel&lt;/code&gt;,
                  this is the same as the data type, and samples are returned
                  one per array element.  Generally, &lt;code&gt;obj&lt;/code&gt; should
                  be passed in as &lt;code&gt;null&lt;/code&gt;, so that the &lt;code&gt;Object&lt;/code&gt;
                  is created automatically and is the right primitive data type.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db1&lt;/code&gt;, whose storage layout is
                  described by &lt;code&gt;ComponentSampleModel&lt;/code&gt; &lt;code&gt;csm1&lt;/code&gt;,
                  to &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db2&lt;/code&gt;, whose storage layout
                  is described by &lt;code&gt;ComponentSampleModel&lt;/code&gt; &lt;code&gt;csm2&lt;/code&gt;.
                  The transfer is usually more efficient than using
                  &lt;code&gt;getPixel&lt;/code&gt; and &lt;code&gt;setPixel&lt;/code&gt;.
                  &lt;pre&gt;
                  ComponentSampleModel csm1, csm2;
                  DataBufferInt db1, db2;
                  csm2.setDataElements(x, y,
                  csm1.getDataElements(x, y, null, db1), db2);
                  &lt;/pre&gt;
                  Using &lt;code&gt;getDataElements&lt;/code&gt; and &lt;code&gt;setDataElements&lt;/code&gt;
                  to transfer between two &lt;code&gt;DataBuffer/SampleModel&lt;/code&gt;
                  pairs is legitimate if the &lt;code&gt;SampleModel&lt;/code&gt; objects have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the &lt;code&gt;TransferType&lt;/code&gt;s are the same.
                  &lt;p&gt;
                  If &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should be a
                  primitive array of type &lt;code&gt;TransferType&lt;/code&gt;.
                  Otherwise, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the
                  coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not
                  &lt;code&gt;null&lt;/code&gt; and is not large enough to hold
                  the pixel data.                
                <param>
                    x         the X coordinate of the pixel location                    
                </param>
                <param>
                    y         the Y coordinate of the pixel location                    
                </param>
                <param>
                    obj       if non-<code>null</code>, a primitive array
                      in which to return the pixel data                    
                </param>
                <param>
                    data      the <code>DataBuffer</code> containing the image data                    
                </param>
                <return>
                    the data of the specified pixel                    
                </return>
                <see>
                    #setDataElements(int,int,Object,DataBuffer)                    
                </see>
                <throws>
                    NullPointerException if data is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are
                      not in bounds, or if obj is too small to hold the ouput.                    
                </throws>
            </javadoc>
            <method name="getDataElements" type="Object" line="589">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="590"/>
                <declaration name="type" type="int" line="595"/>
                <declaration name="numDataElems" type="int" line="596"/>
                <declaration name="pixelOffset" type="int" line="597"/>
                <declaration name="bdata" type="byte[]" line="603"/>
                <scope line="610"/>
                <declaration name="sdata" type="short[]" line="621"/>
                <scope line="628"/>
                <declaration name="idata" type="int[]" line="638"/>
                <scope line="645"/>
                <declaration name="fdata" type="float[]" line="655"/>
                <scope line="662"/>
                <declaration name="ddata" type="double[]" line="672"/>
                <scope line="679"/>
            </method>
            <javadoc line="691">
                Returns all samples for the specified pixel in an int array,
                  one sample per array element.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         the X coordinate of the pixel location                    
                </param>
                <param>
                    y         the Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the samples of the specified pixel.                    
                </return>
                <see>
                    #setPixel(int,int,int[],DataBuffer)                    
                </see>
                <throws>
                    NullPointerException if data is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are
                      not in bounds, or if iArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixel" type="int[]" line="707">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="708"/>
                <declaration name="pixels" type="int" line="712"/>
                <scope line="713"/>
                <scope line="715"/>
                <declaration name="pixelOffset" type="int" line="718"/>
                <scope line="719"/>
            </method>
            <javadoc line="726">
                Returns all samples for the specified rectangle of pixels in
                  an int array, one sample per array element.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the samples of the pixels within the specified region.                    
                </return>
                <see>
                    #setPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixels" type="int[]" line="741">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="742"/>
                <declaration name="y1" type="int" line="743"/>
                <scope line="747"/>
                <declaration name="pixels" type="int" line="751"/>
                <scope line="752"/>
                <scope line="754"/>
                <declaration name="lineOffset" type="int" line="757"/>
                <declaration name="srcOffset" type="int" line="758"/>
                <scope line="760">
                    <declaration name="pixelOffset" type="int" line="761"/>
                    <scope line="762">
                        <scope line="763"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="774">
                Returns as int the sample in a specified band for the pixel
                  located at (x,y).
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         the X coordinate of the pixel location                    
                </param>
                <param>
                    y         the Y coordinate of the pixel location                    
                </param>
                <param>
                    b         the band to return                    
                </param>
                <param>
                    data      the <code>DataBuffer</code> containing the image data                    
                </param>
                <return>
                    the sample in a specified band for the specified pixel                    
                </return>
                <see>
                    #setSample(int,int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSample" type="int" line="786">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="787">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="788"/>
                <declaration name="sample" type="int" line="792"/>
            </method>
            <javadoc line="798">
                Returns the sample in a specified band
                  for the pixel located at (x,y) as a float.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be
                  thrown if the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    a float value representing the sample in the specified
                      band for the specified pixel.                    
                </return>
            </javadoc>
            <method name="getSampleFloat" type="float" line="810">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="811">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="812"/>
                <declaration name="sample" type="float" line="817"/>
            </method>
            <javadoc line="823">
                Returns the sample in a specified band
                  for a pixel located at (x,y) as a double.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be
                  thrown if the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    a double value representing the sample in the specified
                      band for the specified pixel.                    
                </return>
            </javadoc>
            <method name="getSampleDouble" type="double" line="835">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="836">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="837"/>
                <declaration name="sample" type="double" line="842"/>
            </method>
            <javadoc line="848">
                Returns the samples in a specified band for the specified rectangle
                  of pixels in an int array, one sample per data array element.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         the width of the pixel rectangle                    
                </param>
                <param>
                    h         the height of the pixel rectangle                    
                </param>
                <param>
                    b         the band to return                    
                </param>
                <param>
                    iArray    if non-<code>null</code>, returns the samples
                      in this array                    
                </param>
                <param>
                    data      the <code>DataBuffer</code> containing the image data                    
                </param>
                <return>
                    the samples in the specified band of the specified pixel                    
                </return>
                <see>
                    #setSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSamples" type="int[]" line="865">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="866">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="867"/>
                <declaration name="samples" type="int" line="871"/>
                <scope line="872"/>
                <scope line="874"/>
                <declaration name="lineOffset" type="int" line="877"/>
                <declaration name="srcOffset" type="int" line="878"/>
                <scope line="880">
                    <declaration name="sampleOffset" type="int" line="881"/>
                    <scope line="882"/>
                </scope>
            </method>
            <javadoc line="892">
                Sets the data for a single pixel in the specified
                  &lt;code&gt;DataBuffer&lt;/code&gt; from a primitive array of type
                  &lt;code&gt;TransferType&lt;/code&gt;.  For a &lt;code&gt;ComponentSampleModel&lt;/code&gt;,
                  this is the same as the data type, and samples are transferred
                  one per array element.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db1&lt;/code&gt;, whose storage layout is
                  described by &lt;code&gt;ComponentSampleModel&lt;/code&gt; &lt;code&gt;csm1&lt;/code&gt;,
                  to &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db2&lt;/code&gt;, whose storage layout
                  is described by &lt;code&gt;ComponentSampleModel&lt;/code&gt; &lt;code&gt;csm2&lt;/code&gt;.
                  The transfer is usually more efficient than using
                  &lt;code&gt;getPixel&lt;/code&gt; and &lt;code&gt;setPixel&lt;/code&gt;.
                  &lt;pre&gt;
                  ComponentSampleModel csm1, csm2;
                  DataBufferInt db1, db2;
                  csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),
                  db2);
                  &lt;/pre&gt;
                  Using &lt;code&gt;getDataElements&lt;/code&gt; and &lt;code&gt;setDataElements&lt;/code&gt;
                  to transfer between two &lt;code&gt;DataBuffer/SampleModel&lt;/code&gt; pairs
                  is legitimate if the &lt;code&gt;SampleModel&lt;/code&gt; objects have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the &lt;code&gt;TransferType&lt;/code&gt;s are the same.
                  &lt;p&gt;
                  A &lt;code&gt;ClassCastException&lt;/code&gt; is thrown if &lt;code&gt;obj&lt;/code&gt; is not
                  a primitive array of type &lt;code&gt;TransferType&lt;/code&gt;.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not large
                  enough to hold the pixel data.                
                <param>
                    x         the X coordinate of the pixel location                    
                </param>
                <param>
                    y         the Y coordinate of the pixel location                    
                </param>
                <param>
                    obj       a primitive array containing pixel data                    
                </param>
                <param>
                    data      the DataBuffer containing the image data                    
                </param>
                <see>
                    #getDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setDataElements" type="void" line="929">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="930"/>
                <declaration name="type" type="int" line="935"/>
                <declaration name="numDataElems" type="int" line="936"/>
                <declaration name="pixelOffset" type="int" line="937"/>
                <declaration name="barray" type="byte[]" line="943"/>
                <scope line="945"/>
                <declaration name="sarray" type="short[]" line="954"/>
                <scope line="956"/>
                <declaration name="iarray" type="int[]" line="964"/>
                <scope line="966"/>
                <declaration name="farray" type="float[]" line="974"/>
                <scope line="976"/>
                <declaration name="darray" type="double[]" line="984"/>
                <scope line="986"/>
            </method>
            <javadoc line="995">
                Sets a pixel in the &lt;code&gt;DataBuffer&lt;/code&gt; using an int array of
                  samples for input.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  might be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray    The input samples in an int array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixel" type="void" line="1006">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="1007"/>
                <declaration name="pixelOffset" type="int" line="1011"/>
                <scope line="1012"/>
            </method>
            <javadoc line="1018">
                Sets all samples for a rectangle of pixels from an int array containing
                  one sample per array element.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the
                  coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    iArray    The input samples in an int array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="1032">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="1033"/>
                <declaration name="y1" type="int" line="1034"/>
                <scope line="1038"/>
                <declaration name="lineOffset" type="int" line="1043"/>
                <declaration name="srcOffset" type="int" line="1044"/>
                <scope line="1046">
                    <declaration name="pixelOffset" type="int" line="1047"/>
                    <scope line="1048">
                        <scope line="1049"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1059">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the &lt;code&gt;DataBuffer&lt;/code&gt; using an int for input.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the
                  coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         the band to set                    
                </param>
                <param>
                    s         the input sample as an int                    
                </param>
                <param>
                    data      the DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="1072">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="1073">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="1074"/>
            </method>
            <javadoc line="1082">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the &lt;code&gt;DataBuffer&lt;/code&gt; using a float for input.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    s         The input sample as a float                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="1096">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="float"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="1097">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="1098"/>
            </method>
            <javadoc line="1107">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the &lt;code&gt;DataBuffer&lt;/code&gt; using a double for input.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if
                  the coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    s         The input sample as a double                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="1121">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="double"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="1122">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="1123"/>
            </method>
            <javadoc line="1132">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from an int array containing one sample per data array element.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the
                  coordinates are not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    iArray    The input samples in an int array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSamples" type="void" line="1147">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <comment line="1148">
                    Bounds check for &apos;b&apos; will be performed automatically                    
                </comment>
                <scope line="1149"/>
                <declaration name="lineOffset" type="int" line="1153"/>
                <declaration name="srcOffset" type="int" line="1154"/>
                <scope line="1156">
                    <declaration name="sampleOffset" type="int" line="1157"/>
                    <scope line="1158"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="1166">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="1167"/>
                <declaration name="that" type="ComponentSampleModel" line="1171"/>
            </method>
            <method name="hashCode" type="int" line="1185">
                <declaration name="hash" type="int" line="1186"/>
                <scope line="1195"/>
                <scope line="1199"/>
            </method>
        </class>
    </source>