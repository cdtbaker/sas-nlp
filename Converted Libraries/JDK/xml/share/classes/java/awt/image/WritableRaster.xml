<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <class name="WritableRaster" line="4">
            <extends class="Raster"/>
            <javadoc line="4">
                This class extends Raster to provide pixel writing capabilities.
                  Refer to the class comment for Raster for descriptions of how
                  a Raster stores pixels.
                  &lt;p&gt; The constructors of this class are protected.  To instantiate
                  a WritableRaster, use one of the createWritableRaster factory methods
                  in the Raster class.                
            </javadoc>
            <javadoc line="13">
                Constructs a WritableRaster with the given SampleModel.  The
                  WritableRaster&apos;s upper left corner is origin and it is the
                  same size as the  SampleModel.  A DataBuffer large enough to
                  describe the WritableRaster is automatically created.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
                <throws>
                    RasterFormatException if computing either
                      &lt;code&gt;origin.x + sampleModel.getWidth()&lt;/code&gt; or
                      &lt;code&gt;origin.y + sampleModel.getHeight()&lt;/code&gt; results
                      in integer overflow                    
                </throws>
            </javadoc>
            <method name="WritableRaster" type="constructor" line="25">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="28">
                Constructs a WritableRaster with the given SampleModel and DataBuffer.
                  The WritableRaster&apos;s upper left corner is origin and it is the same
                  size as the SampleModel.  The DataBuffer is not initialized and must
                  be compatible with SampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBuffer that contains the image data.                    
                </param>
                <param>
                    origin          The Point that specifies the origin.                    
                </param>
                <throws>
                    RasterFormatException if computing either
                      &lt;code&gt;origin.x + sampleModel.getWidth()&lt;/code&gt; or
                      &lt;code&gt;origin.y + sampleModel.getHeight()&lt;/code&gt; results
                      in integer overflow                    
                </throws>
            </javadoc>
            <method name="WritableRaster" type="constructor" line="41">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="44">
                Constructs a WritableRaster with the given SampleModel, DataBuffer,
                  and parent.  aRegion specifies the bounding rectangle of the new
                  Raster.  When translated into the base Raster&apos;s coordinate
                  system, aRegion must be contained by the base Raster.
                  (The base Raster is the Raster&apos;s ancestor which has no parent.)
                  sampleModelTranslate specifies the sampleModelTranslateX and
                  sampleModelTranslateY values of the new Raster.
                  Note that this constructor should generally be called by other
                  constructors or create methods, it should not be used directly.                
                <param>
                    sampleModel     The SampleModel that specifies the layout.                    
                </param>
                <param>
                    dataBuffer      The DataBuffer that contains the image data.                    
                </param>
                <param>
                    aRegion         The Rectangle that specifies the image area.                    
                </param>
                <param>
                    sampleModelTranslate  The Point that specifies the translation
                      from SampleModel to Raster coordinates.                    
                </param>
                <param>
                    parent          The parent (if any) of this raster.                    
                </param>
                <throws>
                    RasterFormatException if &lt;code&gt;aRegion&lt;/code&gt; has width
                      or height less than or equal to zero, or computing either
                      &lt;code&gt;aRegion.x + aRegion.width&lt;/code&gt; or
                      &lt;code&gt;aRegion.y + aRegion.height&lt;/code&gt; results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="WritableRaster" type="constructor" line="66">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="aRegion" type="Rectangle"/>
                    <param name="sampleModelTranslate" type="Point"/>
                    <param name="parent" type="WritableRaster"/>
                </params>
            </method>
            <javadoc line="69">
                Returns the parent WritableRaster (if any) of this WritableRaster,
                  or else null.                
                <return>
                    the parent of this &lt;code&gt;WritableRaster&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getWritableParent" type="WritableRaster" line="75"/>
            <javadoc line="78">
                Create a WritableRaster with the same size, SampleModel and DataBuffer
                  as this one, but with a different location.  The new WritableRaster
                  will possess a reference to the current WritableRaster, accessible
                  through its getParent() and getWritableParent() methods.                
                <param>
                    childMinX X coord of the upper left corner of the new Raster.                    
                </param>
                <param>
                    childMinY Y coord of the upper left corner of the new Raster.                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; the same as this one except
                      for the specified location.                    
                </return>
                <throws>
                    RasterFormatException if  computing either
                      &lt;code&gt;childMinX + this.getWidth()&lt;/code&gt; or
                      &lt;code&gt;childMinY + this.getHeight()&lt;/code&gt; results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createWritableTranslatedChild" type="WritableRaster" line="92">
                <params>
                    <param name="childMinX" type="int"/>
                    <param name="childMinY" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Returns a new WritableRaster which shares all or part of this
                  WritableRaster&apos;s DataBuffer.  The new WritableRaster will
                  possess a reference to the current WritableRaster, accessible
                  through its getParent() and getWritableParent() methods.
                  &lt;p&gt; The parentX, parentY, width and height parameters form a
                  Rectangle in this WritableRaster&apos;s coordinate space, indicating
                  the area of pixels to be shared.  An error will be thrown if
                  this Rectangle is not contained with the bounds of the current
                  WritableRaster.
                  &lt;p&gt; The new WritableRaster may additionally be translated to a
                  different coordinate system for the plane than that used by the current
                  WritableRaster.  The childMinX and childMinY parameters give
                  the new (x, y) coordinate of the upper-left pixel of the
                  returned WritableRaster; the coordinate (childMinX, childMinY)
                  in the new WritableRaster will map to the same pixel as the
                  coordinate (parentX, parentY) in the current WritableRaster.
                  &lt;p&gt; The new WritableRaster may be defined to contain only a
                  subset of the bands of the current WritableRaster, possibly
                  reordered, by means of the bandList parameter.  If bandList is
                  null, it is taken to include all of the bands of the current
                  WritableRaster in their current order.
                  &lt;p&gt; To create a new WritableRaster that contains a subregion of
                  the current WritableRaster, but shares its coordinate system
                  and bands, this method should be called with childMinX equal to
                  parentX, childMinY equal to parentY, and bandList equal to
                  null.                
                <param>
                    parentX    X coordinate of the upper left corner in this
                      WritableRaster&apos;s coordinates.                    
                </param>
                <param>
                    parentY    Y coordinate of the upper left corner in this
                      WritableRaster&apos;s coordinates.                    
                </param>
                <param>
                    w          Width of the region starting at (parentX, parentY).                    
                </param>
                <param>
                    h          Height of the region starting at (parentX, parentY).                    
                </param>
                <param>
                    childMinX  X coordinate of the upper left corner of
                      the returned WritableRaster.                    
                </param>
                <param>
                    childMinY  Y coordinate of the upper left corner of
                      the returned WritableRaster.                    
                </param>
                <param>
                    bandList   Array of band indices, or null to use all bands.                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; sharing all or part of the
                      &lt;code&gt;DataBuffer&lt;/code&gt; of this &lt;code&gt;WritableRaster&lt;/code&gt;.                    
                </return>
                <exception>
                    RasterFormatException if the subregion is outside of the
                      raster bounds.                    
                </exception>
                <throws>
                    RasterFormatException if &lt;code&gt;w&lt;/code&gt; or
                      &lt;code&gt;h&lt;/code&gt;
                      is less than or equal to zero, or computing any of
                      &lt;code&gt;parentX + w&lt;/code&gt;, &lt;code&gt;parentY + h&lt;/code&gt;,
                      &lt;code&gt;childMinX + w&lt;/code&gt;, or
                      &lt;code&gt;childMinY + h&lt;/code&gt; results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createWritableChild" type="WritableRaster" line="145">
                <params>
                    <param name="parentX" type="int"/>
                    <param name="parentY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="childMinX" type="int"/>
                    <param name="childMinY" type="int"/>
                    <param name="bandList" type="int"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="155"/>
                <declaration name="sm" type="SampleModel" line="158"/>
                <scope line="159"/>
                <scope line="162"/>
                <declaration name="deltaX" type="int" line="165"/>
                <declaration name="deltaY" type="int" line="166"/>
            </method>
            <javadoc line="169">
                Sets the data for a single pixel from a
                  primitive array of type TransferType.  For image data supported by
                  the Java 2D(tm) API, this will be one of DataBuffer.TYPE_BYTE,
                  DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
                  DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
                  may be in a packed format, thus increasing efficiency for data
                  transfers.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if inData is not large enough to hold the pixel data.
                  However, explicit bounds checking is not guaranteed.
                  A ClassCastException will be thrown if the input object is not null
                  and references anything other than an array of TransferType.                
                <see>
                    java.awt.image.SampleModel#setDataElements(int,int,Object,DataBuffer)                    
                </see>
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements()
                      containing the pixel data to place at x,y.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if inData is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setDataElements" type="void" line="191">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="194">
                Sets the data for a rectangle of pixels from an input Raster.
                  The input Raster must be compatible with this WritableRaster
                  in that they must have the same number of bands, corresponding bands
                  must have the same number of bits per sample, the TransferTypes
                  and NumDataElements must be the same, and the packing used by
                  the getDataElements/setDataElements must be identical.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    inRaster Raster containing data to place at x,y.                    
                </param>
                <throws>
                    NullPointerException if inRaster is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds.                    
                </throws>
            </javadoc>
            <method name="setDataElements" type="void" line="211">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="inRaster" type="Raster"/>
                </params>
                <declaration name="dstOffX" type="int" line="212"/>
                <declaration name="dstOffY" type="int" line="213"/>
                <declaration name="width" type="int" line="214"/>
                <declaration name="height" type="int" line="215"/>
                <scope line="216"/>
                <declaration name="srcOffX" type="int" line="219"/>
                <declaration name="srcOffY" type="int" line="220"/>
                <declaration name="tdata" type="Object" line="221"/>
                <scope line="222"/>
            </method>
            <javadoc line="227">
                Sets the data for a rectangle of pixels from a
                  primitive array of type TransferType.  For image data supported by
                  the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
                  DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
                  DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
                  may be in a packed format, thus increasing efficiency for data
                  transfers.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if inData is not large enough to hold the pixel data.
                  However, explicit bounds checking is not guaranteed.
                  A ClassCastException will be thrown if the input object is not null
                  and references anything other than an array of TransferType.                
                <see>
                    java.awt.image.SampleModel#setDataElements(int,int,int,int,Object,DataBuffer)                    
                </see>
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    inData   An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements()
                      containing the pixel data to place between x,y and
                      x+w-1, y+h-1.                    
                </param>
                <throws>
                    NullPointerException if inData is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if inData is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setDataElements" type="void" line="253">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="256">
                Copies pixels from Raster srcRaster to this WritableRaster.  Each pixel
                  in srcRaster is copied to the same x,y address in this raster, unless
                  the address falls outside the bounds of this raster.  srcRaster
                  must have the same number of bands as this WritableRaster.  The
                  copy is a simple copy of source samples to the corresponding destination
                  samples.
                  &lt;p&gt;
                  If all samples of both source and destination Rasters are of
                  integral type and less than or equal to 32 bits in size, then calling
                  this method is equivalent to executing the following code for all
                  &lt;code&gt;x,y&lt;/code&gt; addresses valid in both Rasters.
                  &lt;pre&gt;
                  Raster srcRaster;
                  WritableRaster dstRaster;
                  for (int b = 0; b &lt; srcRaster.getNumBands(); b++) {
                  dstRaster.setSample(x, y, b, srcRaster.getSample(x, y, b));
                  }
                  &lt;/pre&gt;
                  Thus, when copying an integral type source to an integral type
                  destination, if the source sample size is greater than the destination
                  sample size for a particular band, the high order bits of the source
                  sample are truncated.  If the source sample size is less than the
                  destination size for a particular band, the high order bits of the
                  destination are zero-extended or sign-extended depending on whether
                  srcRaster&apos;s SampleModel treats the sample as a signed or unsigned
                  quantity.
                  &lt;p&gt;
                  When copying a float or double source to an integral type destination,
                  each source sample is cast to the destination type.  When copying an
                  integral type source to a float or double destination, the source
                  is first converted to a 32-bit int (if necessary), using the above
                  rules for integral types, and then the int is cast to float or
                  double.
                  &lt;p&gt;                
                <param>
                    srcRaster  The  Raster from which to copy pixels.                    
                </param>
                <throws>
                    NullPointerException if srcRaster is null.                    
                </throws>
            </javadoc>
            <method name="setRect" type="void" line="294">
                <params>
                    <param name="srcRaster" type="Raster"/>
                </params>
            </method>
            <javadoc line="297">
                Copies pixels from Raster srcRaster to this WritableRaster.
                  For each (x, y) address in srcRaster, the corresponding pixel
                  is copied to address (x+dx, y+dy) in this WritableRaster,
                  unless (x+dx, y+dy) falls outside the bounds of this raster.
                  srcRaster must have the same number of bands as this WritableRaster.
                  The copy is a simple copy of source samples to the corresponding
                  destination samples.  For details, see{@link WritableRaster#setRect(Raster)}.                
                <param>
                    dx        The X translation factor from src space to dst space
                      of the copy.                    
                </param>
                <param>
                    dy        The Y translation factor from src space to dst space
                      of the copy.                    
                </param>
                <param>
                    srcRaster The Raster from which to copy pixels.                    
                </param>
                <throws>
                    NullPointerException if srcRaster is null.                    
                </throws>
            </javadoc>
            <method name="setRect" type="void" line="312">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="srcRaster" type="Raster"/>
                </params>
                <declaration name="width" type="int" line="313"/>
                <declaration name="height" type="int" line="314"/>
                <declaration name="srcOffX" type="int" line="315"/>
                <declaration name="srcOffY" type="int" line="316"/>
                <declaration name="dstOffX" type="int" line="317"/>
                <declaration name="dstOffY" type="int" line="318"/>
                <scope line="319">
                    <declaration name="skipX" type="int" line="320"/>
                </scope>
                <scope line="325">
                    <declaration name="skipY" type="int" line="326"/>
                </scope>
                <scope line="331"/>
                <scope line="334"/>
                <scope line="337"/>
                <declaration name="iData" type="int[]" line="345"/>
                <scope line="346"/>
                <declaration name="fData" type="float[]" line="352"/>
                <scope line="353"/>
                <declaration name="dData" type="double[]" line="359"/>
                <scope line="360"/>
            </method>
            <javadoc line="367">
                Sets a pixel in the DataBuffer using an int array of samples for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x      The X coordinate of the pixel location.                    
                </param>
                <param>
                    y      The Y coordinate of the pixel location.                    
                </param>
                <param>
                    iArray The input samples in a int array.                    
                </param>
                <throws>
                    NullPointerException if iArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if iArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixel" type="void" line="379">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="382">
                Sets a pixel in the DataBuffer using a float array of samples for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x      The X coordinate of the pixel location.                    
                </param>
                <param>
                    y      The Y coordinate of the pixel location.                    
                </param>
                <param>
                    fArray The input samples in a float array.                    
                </param>
                <throws>
                    NullPointerException if fArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if fArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixel" type="void" line="394">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="397">
                Sets a pixel in the DataBuffer using a double array of samples for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x      The X coordinate of the pixel location.                    
                </param>
                <param>
                    y      The Y coordinate of the pixel location.                    
                </param>
                <param>
                    dArray The input samples in a double array.                    
                </param>
                <throws>
                    NullPointerException if dArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if dArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixel" type="void" line="409">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
            <javadoc line="412">
                Sets all samples for a rectangle of pixels from an int array containing
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    iArray   The input int pixel array.                    
                </param>
                <throws>
                    NullPointerException if iArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if iArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixels" type="void" line="427">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="430">
                Sets all samples for a rectangle of pixels from a float array containing
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    fArray   The input float pixel array.                    
                </param>
                <throws>
                    NullPointerException if fArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if fArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixels" type="void" line="445">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="448">
                Sets all samples for a rectangle of pixels from a double array containing
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    dArray   The input double pixel array.                    
                </param>
                <throws>
                    NullPointerException if dArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if dArray is too small to hold the input.                    
                </throws>
            </javadoc>
            <method name="setPixels" type="void" line="463">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
            <javadoc line="466">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using an int for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    s        The input sample.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="setSample" type="void" line="479">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="int"/>
                </params>
            </method>
            <javadoc line="482">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using a float for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    s        The input sample as a float.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="setSample" type="void" line="495">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="float"/>
                </params>
            </method>
            <javadoc line="498">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using a double for input.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    s        The input sample as a double.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="setSample" type="void" line="511">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="double"/>
                </params>
            </method>
            <javadoc line="514">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from an int array containing one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    iArray   The input int sample array.                    
                </param>
                <throws>
                    NullPointerException if iArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if iArray is too small to
                      hold the input.                    
                </throws>
            </javadoc>
            <method name="setSamples" type="void" line="531">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="534">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from a float array containing one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    fArray   The input float sample array.                    
                </param>
                <throws>
                    NullPointerException if fArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if fArray is too small to
                      hold the input.                    
                </throws>
            </javadoc>
            <method name="setSamples" type="void" line="551">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="554">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from a double array containing one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y        The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w        Width of the pixel rectangle.                    
                </param>
                <param>
                    h        Height of the pixel rectangle.                    
                </param>
                <param>
                    b        The band to set.                    
                </param>
                <param>
                    dArray   The input double sample array.                    
                </param>
                <throws>
                    NullPointerException if dArray is null.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if dArray is too small to
                      hold the input.                    
                </throws>
            </javadoc>
            <method name="setSamples" type="void" line="571">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
        </class>
    </source>