<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.Transparency"/>
        <class name="DirectColorModel" line="4">
            <extends class="PackedColorModel"/>
            <javadoc line="4">
                The &lt;code&gt;DirectColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt;
                  class that works with pixel values that represent RGB
                  color and alpha information as separate samples and that pack all
                  samples for a single pixel into a single int, short, or byte quantity.
                  This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB.
                  In addition, for each component of the ColorSpace, the minimum
                  normalized component value obtained via the &lt;code&gt;getMinValue()&lt;/code&gt;
                  method of ColorSpace must be 0.0, and the maximum value obtained via
                  the &lt;code&gt;getMaxValue()&lt;/code&gt; method must be 1.0 (these min/max
                  values are typical for RGB spaces).
                  There must be three color samples in the pixel values and there can
                  be a single alpha sample.  For those methods that use a primitive array
                  pixel representation of type &lt;code&gt;transferType&lt;/code&gt;, the array
                  length is always one.  The transfer
                  types supported are DataBuffer.TYPE_BYTE,
                  DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.
                  Color and alpha samples are stored in the single
                  element of the array in bits indicated by bit masks.  Each bit mask
                  must be contiguous and masks must not overlap.  The same masks apply to
                  the single int pixel representation used by other methods.  The
                  correspondence of masks and color/alpha samples is as follows:
                  &lt;ul&gt;
                  &lt;li&gt; Masks are identified by indices running from 0 through 2
                  if no alpha is present, or 3 if an alpha is present.
                  &lt;li&gt; The first three indices refer to color samples;
                  index 0 corresponds to red, index 1 to green, and index 2 to blue.
                  &lt;li&gt; Index 3 corresponds to the alpha sample, if present.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The translation from pixel values to color/alpha components for
                  display or processing purposes is a one-to-one correspondence of
                  samples to components.  A &lt;code&gt;DirectColorModel&lt;/code&gt; is
                  typically used with image data which uses masks to define packed
                  samples.  For example, a &lt;code&gt;DirectColorModel&lt;/code&gt; can be used in
                  conjunction with a &lt;code&gt;SinglePixelPackedSampleModel&lt;/code&gt; to
                  construct a {@link BufferedImage}.  Normally the masks used by the{@link SampleModel} and the &lt;code&gt;ColorModel&lt;/code&gt; would be the
                  same.  However, if they are different, the color interpretation
                  of pixel data will be done according to the masks of the
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt;
                  A single int pixel representation is valid for all objects of this
                  class, since it is always possible to represent pixel values used with
                  this class in a single int.  Therefore, methods which use this
                  representation will not throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  due to an invalid pixel value.
                  &lt;p&gt;
                  This color model is similar to an X11 TrueColor visual.
                  The default RGB ColorModel specified by the{@link ColorModel#getRGBdefault() getRGBdefault} method is a
                  &lt;code&gt;DirectColorModel&lt;/code&gt; with the following parameters:
                  &lt;pre&gt;
                  Number of bits:        32
                  Red mask:              0x00ff0000
                  Green mask:            0x0000ff00
                  Blue mask:             0x000000ff
                  Alpha mask:            0xff000000
                  Color space:           sRGB
                  isAlphaPremultiplied:  False
                  Transparency:          Transparency.TRANSLUCENT
                  transferType:          DataBuffer.TYPE_INT
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Many of the methods in this class are final. This is because the
                  underlying native graphics code makes assumptions about the layout
                  and operation of this class and those assumptions are reflected in
                  the implementations of the methods here that are marked final.  You
                  can subclass this class for other reasons, but you cannot override
                  or modify the behavior of those methods.                
                <see>
                    ColorModel                    
                </see>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    SinglePixelPackedSampleModel                    
                </see>
                <see>
                    BufferedImage                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <declaration name="red_mask" type="int" line="79"/>
            <declaration name="green_mask" type="int" line="80"/>
            <declaration name="blue_mask" type="int" line="81"/>
            <declaration name="alpha_mask" type="int" line="82"/>
            <declaration name="red_offset" type="int" line="83"/>
            <declaration name="green_offset" type="int" line="84"/>
            <declaration name="blue_offset" type="int" line="85"/>
            <declaration name="alpha_offset" type="int" line="86"/>
            <declaration name="red_scale" type="int" line="87"/>
            <declaration name="green_scale" type="int" line="88"/>
            <declaration name="blue_scale" type="int" line="89"/>
            <declaration name="alpha_scale" type="int" line="90"/>
            <declaration name="is_LinearRGB" type="boolean" line="91"/>
            <declaration name="lRGBprecision" type="int" line="92"/>
            <declaration name="tosRGB8LUT" type="byte[]" line="93"/>
            <declaration name="fromsRGB8LUT8" type="byte[]" line="94"/>
            <declaration name="fromsRGB8LUT16" type="short[]" line="95"/>
            <javadoc line="96">
                Constructs a &lt;code&gt;DirectColorModel&lt;/code&gt; from the specified masks
                  that indicate which bits in an &lt;code&gt;int&lt;/code&gt; pixel representation
                  contain the red, green and blue color samples.  As pixel values do not
                  contain alpha information, all pixels are treated as opaque, which
                  means that alpha&amp;nbsp;=&amp;nbsp;1.0.  All of the bits
                  in each mask must be contiguous and fit in the specified number
                  of least significant bits of an &lt;code&gt;int&lt;/code&gt; pixel representation.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space. The
                  transparency value is Transparency.OPAQUE.  The transfer type
                  is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  or DataBuffer.TYPE_INT that can hold a single pixel.                
                <param>
                    bits the number of bits in the pixel values; for example,
                      the sum of the number of bits in the masks.                    
                </param>
                <param>
                    rmask specifies a mask indicating which bits in an
                      integer pixel contain the red component                    
                </param>
                <param>
                    gmask specifies a mask indicating which bits in an
                      integer pixel contain the green component                    
                </param>
                <param>
                    bmask specifies a mask indicating which bits in an
                      integer pixel contain the blue component                    
                </param>
            </javadoc>
            <method name="DirectColorModel" type="constructor" line="117">
                <params>
                    <param name="bits" type="int"/>
                    <param name="rmask" type="int"/>
                    <param name="gmask" type="int"/>
                    <param name="bmask" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                Constructs a &lt;code&gt;DirectColorModel&lt;/code&gt; from the specified masks
                  that indicate which bits in an &lt;code&gt;int&lt;/code&gt; pixel representation
                  contain the red, green and blue color samples and the alpha sample,
                  if present.  If &lt;code&gt;amask&lt;/code&gt; is 0, pixel values do not contain
                  alpha information and all pixels are treated as opaque, which means
                  that alpha&amp;nbsp;=&amp;nbsp;1.0.  All of the bits in each mask must
                  be contiguous and fit in the specified number of least significant bits
                  of an &lt;code&gt;int&lt;/code&gt; pixel representation.  Alpha, if present, is not
                  premultiplied.  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value is Transparency.OPAQUE if no alpha is
                  present, or Transparency.TRANSLUCENT otherwise.  The transfer type
                  is the smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  or DataBuffer.TYPE_INT that can hold a single pixel.                
                <param>
                    bits the number of bits in the pixel values; for example,
                      the sum of the number of bits in the masks.                    
                </param>
                <param>
                    rmask specifies a mask indicating which bits in an
                      integer pixel contain the red component                    
                </param>
                <param>
                    gmask specifies a mask indicating which bits in an
                      integer pixel contain the green component                    
                </param>
                <param>
                    bmask specifies a mask indicating which bits in an
                      integer pixel contain the blue component                    
                </param>
                <param>
                    amask specifies a mask indicating which bits in an
                      integer pixel contain the alpha component                    
                </param>
            </javadoc>
            <method name="DirectColorModel" type="constructor" line="145">
                <params>
                    <param name="bits" type="int"/>
                    <param name="rmask" type="int"/>
                    <param name="gmask" type="int"/>
                    <param name="bmask" type="int"/>
                    <param name="amask" type="int"/>
                </params>
            </method>
            <javadoc line="149">
                Constructs a &lt;code&gt;DirectColorModel&lt;/code&gt; from the specified
                  parameters.  Color components are in the specified
                  &lt;code&gt;ColorSpace&lt;/code&gt;, which must be of type ColorSpace.TYPE_RGB
                  and have minimum normalized component values which are all 0.0
                  and maximum values which are all 1.0.
                  The masks specify which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the red, green and blue color samples and
                  the alpha sample, if present.  If &lt;code&gt;amask&lt;/code&gt; is 0, pixel
                  values do not contain alpha information and all pixels are treated
                  as opaque, which means that alpha&amp;nbsp;=&amp;nbsp;1.0.  All of the
                  bits in each mask must be contiguous and fit in the specified number
                  of least significant bits of an &lt;code&gt;int&lt;/code&gt; pixel
                  representation.  If there is alpha, the &lt;code&gt;boolean&lt;/code&gt;
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; specifies how to interpret
                  color and alpha samples in pixel values.  If the &lt;code&gt;boolean&lt;/code&gt;
                  is &lt;code&gt;true&lt;/code&gt;, color samples are assumed to have been
                  multiplied by the alpha sample.  The transparency value is
                  Transparency.OPAQUE, if no alpha is present, or
                  Transparency.TRANSLUCENT otherwise.  The transfer type
                  is the type of primitive array used to represent pixel values and
                  must be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or
                  DataBuffer.TYPE_INT.                
                <param>
                    space the specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    bits the number of bits in the pixel values; for example,
                      the sum of the number of bits in the masks.                    
                </param>
                <param>
                    rmask specifies a mask indicating which bits in an
                      integer pixel contain the red component                    
                </param>
                <param>
                    gmask specifies a mask indicating which bits in an
                      integer pixel contain the green component                    
                </param>
                <param>
                    bmask specifies a mask indicating which bits in an
                      integer pixel contain the blue component                    
                </param>
                <param>
                    amask specifies a mask indicating which bits in an
                      integer pixel contain the alpha component                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if color samples are
                      premultiplied by the alpha sample; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    transferType the type of array used to represent pixel values                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;space&lt;/code&gt; is not a
                      TYPE_RGB space or if the min/max normalized component
                      values are not 0.0/1.0.                    
                </throws>
            </javadoc>
            <method name="DirectColorModel" type="constructor" line="190">
                <params>
                    <param name="space" type="ColorSpace"/>
                    <param name="bits" type="int"/>
                    <param name="rmask" type="int"/>
                    <param name="gmask" type="int"/>
                    <param name="bmask" type="int"/>
                    <param name="amask" type="int"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="transferType" type="int"/>
                </params>
                <scope line="192">
                    <scope line="194"/>
                    <scope line="199"/>
                </scope>
                <scope line="205">
                    <scope line="206">
                        <scope line="207"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="214">
                Returns the mask indicating which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the red color component.                
                <return>
                    the mask, which indicates which bits of the &lt;code&gt;int&lt;/code&gt;
                      pixel representation contain the red color sample.                    
                </return>
            </javadoc>
            <method name="getRedMask" type="int" line="220"/>
            <javadoc line="223">
                Returns the mask indicating which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the green color component.                
                <return>
                    the mask, which indicates which bits of the &lt;code&gt;int&lt;/code&gt;
                      pixel representation contain the green color sample.                    
                </return>
            </javadoc>
            <method name="getGreenMask" type="int" line="229"/>
            <javadoc line="232">
                Returns the mask indicating which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the blue color component.                
                <return>
                    the mask, which indicates which bits of the &lt;code&gt;int&lt;/code&gt;
                      pixel representation contain the blue color sample.                    
                </return>
            </javadoc>
            <method name="getBlueMask" type="int" line="238"/>
            <javadoc line="241">
                Returns the mask indicating which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the alpha component.                
                <return>
                    the mask, which indicates which bits of the &lt;code&gt;int&lt;/code&gt;
                      pixel representation contain the alpha sample.                    
                </return>
            </javadoc>
            <method name="getAlphaMask" type="int" line="247">
                <scope line="248"/>
                <scope line="251"/>
            </method>
            <method name="getDefaultRGBComponents" type="float[]" line="255">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <declaration name="components" type="int" line="256"/>
                <declaration name="norm" type="float" line="257"/>
            </method>
            <method name="getsRGBComponentFromsRGB" type="int" line="260">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="idx" type="int"/>
                </params>
                <declaration name="c" type="int" line="261"/>
                <scope line="262">
                    <declaration name="a" type="int" line="263"/>
                </scope>
                <scope line="266"/>
            </method>
            <method name="getsRGBComponentFromLinearRGB" type="int" line="271">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="idx" type="int"/>
                </params>
                <declaration name="c" type="int" line="272"/>
                <scope line="273">
                    <declaration name="factor" type="float" line="274"/>
                    <declaration name="a" type="int" line="275"/>
                </scope>
                <scope line="278">
                    <scope line="279"/>
                    <scope line="282"/>
                </scope>
            </method>
            <javadoc line="288">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  as an &lt;code&gt;int&lt;/code&gt;.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the red value
                  is 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the red color component for the specified pixel, from
                      0 to 255 in the sRGB &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getRed" type="int" line="301">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
                <declaration name="rgb" type="float" line="308"/>
            </method>
            <javadoc line="311">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  as an &lt;code&gt;int&lt;/code&gt;.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the green value
                  is 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the green color component for the specified pixel, from
                      0 to 255 in the sRGB &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getGreen" type="int" line="324">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="325"/>
                <scope line="328"/>
                <declaration name="rgb" type="float" line="331"/>
            </method>
            <javadoc line="334">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  as an &lt;code&gt;int&lt;/code&gt;.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the blue value
                  is 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the blue color component for the specified pixel, from
                      0 to 255 in the sRGB &lt;code&gt;ColorSpace&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getBlue" type="int" line="347">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="348"/>
                <scope line="351"/>
                <declaration name="rgb" type="float" line="354"/>
            </method>
            <javadoc line="357">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.  The pixel value is specified as an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the alpha component of &lt;code&gt;pixel&lt;/code&gt;
                      from 0 to 255.                    
                </return>
            </javadoc>
            <method name="getAlpha" type="int" line="364">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <declaration name="a" type="int" line="366"/>
                <scope line="367"/>
            </method>
            <javadoc line="372">
                Returns the color/alpha components of the pixel in the default
                  RGB color model format.  A color conversion is done if necessary.
                  The pixel value is specified as an &lt;code&gt;int&lt;/code&gt;.
                  The returned value is in a non pre-multiplied format.  Thus, if
                  the alpha is premultiplied, this method divides it out of the
                  color components.  If the alpha value is 0, for example, the color
                  values are each 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the RGB value of the color/alpha components of the specified
                      pixel.                    
                </return>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="385">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="386"/>
                <declaration name="rgb" type="float" line="389"/>
            </method>
            <javadoc line="392">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  by an array of data elements of type &lt;code&gt;transferType&lt;/code&gt; passed
                  in as an object reference.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the red value
                  is 0.
                  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt; is
                  thrown.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a
                  pixel value for this &lt;code&gt;ColorModel&lt;/code&gt;.  Since
                  &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses inherit
                  the implementation of this method and if they don&apos;t override it
                  then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.
                  An &lt;code&gt;UnsupportedOperationException&lt;/code&gt; is thrown if this
                  &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    inData the array containing the pixel value                    
                </param>
                <return>
                    the value of the red component of the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;inData&lt;/code&gt; is not
                      large enough to hold a pixel value for this color model                    
                </throws>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt; is not a
                      primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this &lt;code&gt;transferType&lt;/code&gt;
                      is not supported by this color model                    
                </throws>
            </javadoc>
            <method name="getRed" type="int" line="423">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="424"/>
                <declaration name="bdata" type="byte" line="427"/>
                <declaration name="sdata" type="short" line="431"/>
                <declaration name="idata" type="int" line="435"/>
            </method>
            <javadoc line="443">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  by an array of data elements of type &lt;code&gt;transferType&lt;/code&gt; passed
                  in as an object reference.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the green value
                  is 0.  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.  Since
                  &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses inherit
                  the implementation of this method and if they don&apos;t override it
                  then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.
                  An &lt;code&gt;UnsupportedOperationException&lt;/code&gt; is
                  thrown if this &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    inData the array containing the pixel value                    
                </param>
                <return>
                    the value of the green component of the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;inData&lt;/code&gt; is not
                      large enough to hold a pixel value for this color model                    
                </throws>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt; is not a
                      primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this &lt;code&gt;transferType&lt;/code&gt;
                      is not supported by this color model                    
                </throws>
            </javadoc>
            <method name="getGreen" type="int" line="473">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="474"/>
                <declaration name="bdata" type="byte" line="477"/>
                <declaration name="sdata" type="short" line="481"/>
                <declaration name="idata" type="int" line="485"/>
            </method>
            <javadoc line="493">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is specified
                  by an array of data elements of type &lt;code&gt;transferType&lt;/code&gt; passed
                  in as an object reference.
                  The returned value is a non pre-multiplied value.  Thus, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, for example, the blue value
                  is 0.  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.  Since
                  &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses inherit
                  the implementation of this method and if they don&apos;t override it
                  then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.
                  An &lt;code&gt;UnsupportedOperationException&lt;/code&gt; is
                  thrown if this &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    inData the array containing the pixel value                    
                </param>
                <return>
                    the value of the blue component of the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;inData&lt;/code&gt; is not
                      large enough to hold a pixel value for this color model                    
                </throws>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt; is not a
                      primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this &lt;code&gt;transferType&lt;/code&gt;
                      is not supported by this color model                    
                </throws>
            </javadoc>
            <method name="getBlue" type="int" line="523">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="524"/>
                <declaration name="bdata" type="byte" line="527"/>
                <declaration name="sdata" type="short" line="531"/>
                <declaration name="idata" type="int" line="535"/>
            </method>
            <javadoc line="543">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.  The pixel value is specified by an array of data
                  elements of type &lt;code&gt;transferType&lt;/code&gt; passed in as an object
                  reference.
                  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt; is
                  thrown.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.  Since
                  &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses inherit
                  the implementation of this method and if they don&apos;t override it
                  then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; is thrown.                
                <param>
                    inData the specified pixel                    
                </param>
                <return>
                    the alpha component of the specified pixel, scaled from
                      0 to 255.                    
                </return>
                <exception>
                    &lt;code&gt;ClassCastException&lt;/code&gt; if &lt;code&gt;inData&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </exception>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if
                      &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </exception>
                <exception>
                    &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this
                      &lt;code&gt;tranferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="getAlpha" type="int" line="571">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="572"/>
                <declaration name="bdata" type="byte" line="575"/>
                <declaration name="sdata" type="short" line="579"/>
                <declaration name="idata" type="int" line="583"/>
            </method>
            <javadoc line="591">
                Returns the color/alpha components for the specified pixel in the
                  default RGB color model format.  A color conversion is done if
                  necessary.  The pixel value is specified by an array of data
                  elements of type &lt;code&gt;transferType&lt;/code&gt; passed in as an object
                  reference.  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt; is
                  thrown.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.
                  The returned value is in a non pre-multiplied format.  Thus, if
                  the alpha is premultiplied, this method divides it out of the
                  color components.  If the alpha value is 0, for example, the color
                  values is 0.  Since &lt;code&gt;DirectColorModel&lt;/code&gt; can be
                  subclassed, subclasses inherit the implementation of this method
                  and if they don&apos;t override it then
                  they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData the specified pixel                    
                </param>
                <return>
                    the color and alpha components of the specified pixel.                    
                </return>
                <exception>
                    UnsupportedOperationException if this
                      &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </exception>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="616">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="617"/>
                <declaration name="bdata" type="byte" line="620"/>
                <declaration name="sdata" type="short" line="624"/>
                <declaration name="idata" type="int" line="628"/>
            </method>
            <javadoc line="636">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an integer pixel representation in the
                  default RGB color model.
                  This array can then be passed to the &lt;code&gt;setDataElements&lt;/code&gt;
                  method of a &lt;code&gt;WritableRaster&lt;/code&gt; object.  If the pixel variable
                  is &lt;code&gt;null&lt;/code&gt;, a new array is allocated.  If &lt;code&gt;pixel&lt;/code&gt;
                  is not &lt;code&gt;null&lt;/code&gt;, it must be a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel array is returned.
                  Since &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    rgb the integer pixel representation in the default RGB
                      color model                    
                </param>
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    an array representation of the specified pixel in this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </exception>
                <exception>
                    UnsupportedOperationException if this
                      &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </exception>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="669">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="pixel" type="Object"/>
                </params>
                <declaration name="intpixel" type="int" line="670"/>
                <scope line="671"/>
                <scope line="675"/>
                <declaration name="defaultCM" type="ColorModel" line="678"/>
                <scope line="679"/>
                <declaration name="red" type="int" line="683"/>
                <scope line="687">
                    <declaration name="precision" type="int" line="688"/>
                    <declaration name="factor" type="float" line="689"/>
                    <scope line="690">
                        <scope line="691"/>
                        <scope line="698"/>
                    </scope>
                    <scope line="706"/>
                    <scope line="710">
                        <scope line="712"/>
                        <scope line="716">
                            <scope line="718"/>
                        </scope>
                    </scope>
                    <scope line="724"/>
                    <scope line="727"/>
                    <scope line="730"/>
                </scope>
                <scope line="734">
                    <declaration name="norm" type="float[]" line="735"/>
                    <declaration name="factor" type="float" line="736"/>
                    <scope line="741">
                        <scope line="743">
                            <scope line="745"/>
                        </scope>
                        <scope line="749">
                            <scope line="751"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="761">
                    <scope line="762"/>
                    <scope line="765"/>
                    <scope line="768"/>
                </scope>
                <scope line="775">
                    <declaration name="bdata" type="byte" line="776"/>
                    <scope line="777"/>
                    <scope line="780"/>
                </scope>
                <scope line="787">
                    <declaration name="sdata" type="short" line="788"/>
                    <scope line="789"/>
                    <scope line="792"/>
                </scope>
            </method>
            <javadoc line="803">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel value is specified as an
                  &lt;code&gt;int&lt;/code&gt;.  If the &lt;code&gt;components&lt;/code&gt; array is
                  &lt;code&gt;null&lt;/code&gt;, a new array is allocated.  The
                  &lt;code&gt;components&lt;/code&gt; array is returned.  Color/alpha components are
                  stored in the &lt;code&gt;components&lt;/code&gt; array starting at
                  &lt;code&gt;offset&lt;/code&gt;, even if the array is allocated by this method.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt; and is not large
                  enough to hold all the color and alpha components, starting at
                  &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components the array to receive the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start storing the color and alpha components                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
            </javadoc>
            <method name="getComponents" type="int[]" line="823">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="824"/>
                <scope line="827"/>
            </method>
            <javadoc line="832">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel value is specified by an
                  array of data elements of type &lt;code&gt;transferType&lt;/code&gt; passed in as
                  an object reference.  If &lt;code&gt;pixel&lt;/code&gt; is not a primitive array
                  of type &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt;
                  is thrown.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a
                  pixel value for this &lt;code&gt;ColorModel&lt;/code&gt;.  If the
                  &lt;code&gt;components&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new
                  array is allocated.  The &lt;code&gt;components&lt;/code&gt; array is returned.
                  Color/alpha components are stored in the &lt;code&gt;components&lt;/code&gt; array
                  starting at &lt;code&gt;offset&lt;/code&gt;, even if the array is allocated by
                  this method.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  is thrown if the &lt;code&gt;components&lt;/code&gt; array is not
                  &lt;code&gt;null&lt;/code&gt; and is not large enough to hold all the color and
                  alpha components, starting at &lt;code&gt;offset&lt;/code&gt;.
                  Since &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components the array to receive the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start storing the color and alpha components                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;, or if &lt;code&gt;components&lt;/code&gt;
                      is not &lt;code&gt;null&lt;/code&gt; and is not large enough to hold all the
                      color and alpha components, starting at &lt;code&gt;offset&lt;/code&gt;                    
                </exception>
                <exception>
                    UnsupportedOperationException if this
                      &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                      color model                    
                </exception>
            </javadoc>
            <method name="getComponents" type="int[]" line="871">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="intpixel" type="int" line="872"/>
                <declaration name="bdata" type="byte" line="875"/>
                <declaration name="sdata" type="short" line="879"/>
                <declaration name="idata" type="int" line="883"/>
            </method>
            <javadoc line="891">
                Creates a &lt;code&gt;WritableRaster&lt;/code&gt; with the specified width and
                  height that has a data layout (&lt;code&gt;SampleModel&lt;/code&gt;) compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    w the width to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <param>
                    h the height to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; object with the specified
                      width and height.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt;
                      is less than or equal to zero                    
                </throws>
                <see>
                    WritableRaster                    
                </see>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="904">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="905"/>
                <declaration name="bandmasks" type="int[]" line="908"/>
                <scope line="909"/>
                <scope line="913"/>
                <scope line="919"/>
                <scope line="922"/>
                <scope line="925"/>
            </method>
            <javadoc line="929">
                Returns a pixel value represented as an &lt;code&gt;int&lt;/code&gt; in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of unnormalized color/alpha
                  components.   An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if the &lt;code&gt;components&lt;/code&gt; array is
                  not large enough to hold all the color and alpha components, starting
                  at &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving the color and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; pixel value in this
                      &lt;code&gt;ColorModel&lt;/code&gt; corresponding to the specified components.                    
                </return>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if
                      the &lt;code&gt;components&lt;/code&gt; array is not large enough to
                      hold all of the color and alpha components starting at
                      &lt;code&gt;offset&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="getDataElement" type="int" line="947">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="pixel" type="int" line="948"/>
                <scope line="949"/>
            </method>
            <javadoc line="954">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of unnormalized color/alpha
                  components.
                  This array can then be passed to the &lt;code&gt;setDataElements&lt;/code&gt;
                  method of a &lt;code&gt;WritableRaster&lt;/code&gt; object.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array
                  is not large enough to hold all the color and alpha components,
                  starting at offset.  If the &lt;code&gt;obj&lt;/code&gt; variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array is allocated.  If &lt;code&gt;obj&lt;/code&gt; is
                  not &lt;code&gt;null&lt;/code&gt;, it must be a primitive array
                  of type &lt;code&gt;transferType&lt;/code&gt;; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;DirectColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving color and alpha components                    
                </param>
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; representing an array of color
                      and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; representing an array of color and
                      alpha components.                    
                </return>
                <exception>
                    &lt;code&gt;ClassCastException&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </exception>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if
                      &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt; or the &lt;code&gt;components&lt;/code&gt;
                      array is not large enough to hold all of the color and alpha
                      components starting at &lt;code&gt;offset&lt;/code&gt;                    
                </exception>
                <exception>
                    UnsupportedOperationException if this
                      &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                      color model                    
                </exception>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="996">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="997"/>
                <scope line="998"/>
                <scope line="1003">
                    <declaration name="bdata" type="byte" line="1004"/>
                </scope>
                <scope line="1008">
                    <declaration name="bdata" type="byte" line="1009"/>
                </scope>
                <scope line="1013">
                    <declaration name="sdata" type="short" line="1014"/>
                </scope>
                <scope line="1018">
                    <declaration name="sdata" type="short" line="1019"/>
                </scope>
                <scope line="1023">
                    <declaration name="idata" type="int" line="1024"/>
                </scope>
                <scope line="1028">
                    <declaration name="idata" type="int" line="1029"/>
                </scope>
            </method>
            <javadoc line="1036">
                Forces the raster data to match the state specified in the
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; variable, assuming the data is
                  currently correctly described by this &lt;code&gt;ColorModel&lt;/code&gt;.  It
                  may multiply or divide the color raster data by alpha, or do
                  nothing if the data is in the correct state.  If the data needs to
                  be coerced, this method will also return an instance of this
                  &lt;code&gt;ColorModel&lt;/code&gt; with the &lt;code&gt;isAlphaPremultiplied&lt;/code&gt;
                  flag set appropriately.  This method will throw a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this transferType is
                  not supported by this &lt;code&gt;ColorModel&lt;/code&gt;.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; can be subclassed, subclasses inherit the
                  implementation of this method and if they don&apos;t override it then
                  they throw an exception if they use an unsupported transferType.                
                <param>
                    raster the &lt;code&gt;WritableRaster&lt;/code&gt; data                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the alpha is
                      premultiplied; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <return>
                    a &lt;code&gt;ColorModel&lt;/code&gt; object that represents the
                      coerced data.                    
                </return>
                <exception>
                    UnsupportedOperationException if this
                      &lt;code&gt;transferType&lt;/code&gt; is not supported by this
                      color model                    
                </exception>
            </javadoc>
            <method name="coerceData" type="ColorModel" line="1059">
                <params>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <scope line="1060"/>
                <declaration name="w" type="int" line="1063"/>
                <declaration name="h" type="int" line="1064"/>
                <declaration name="aIdx" type="int" line="1065"/>
                <declaration name="normAlpha" type="float" line="1066"/>
                <declaration name="alphaScale" type="float" line="1067"/>
                <declaration name="rminX" type="int" line="1068"/>
                <declaration name="rY" type="int" line="1069"/>
                <declaration name="rX" type="int" line="1070"/>
                <declaration name="pixel" type="int" line="1071"/>
                <declaration name="zpixel" type="int" line="1072"/>
                <scope line="1073">
                    <scope line="1076">
                        <scope line="1077">
                            <scope line="1079">
                                <scope line="1082">
                                    <scope line="1083"/>
                                </scope>
                                <scope line="1088">
                                    <scope line="1089"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1100">
                        <scope line="1101">
                            <scope line="1103">
                                <scope line="1106">
                                    <scope line="1107"/>
                                </scope>
                                <scope line="1112">
                                    <scope line="1113"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1124">
                        <scope line="1125">
                            <scope line="1127">
                                <scope line="1130">
                                    <scope line="1131"/>
                                </scope>
                                <scope line="1136">
                                    <scope line="1137"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1151">
                    <scope line="1154">
                        <scope line="1155">
                            <scope line="1157">
                                <scope line="1160">
                                    <declaration name="invAlpha" type="float" line="1161"/>
                                    <scope line="1162"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1172">
                        <scope line="1173">
                            <scope line="1175">
                                <scope line="1178">
                                    <declaration name="invAlpha" type="float" line="1179"/>
                                    <scope line="1180"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1190">
                        <scope line="1191">
                            <scope line="1193">
                                <scope line="1196">
                                    <declaration name="invAlpha" type="float" line="1197"/>
                                    <scope line="1198"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1213">
                Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it is
                  not.                
                <param>
                    raster the {@link Raster} object to test for compatibility                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                      with this &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isCompatibleRaster" type="boolean" line="1221">
                <params>
                    <param name="raster" type="Raster"/>
                </params>
                <declaration name="sm" type="SampleModel" line="1222"/>
                <declaration name="spsm" type="SinglePixelPackedSampleModel" line="1223"/>
                <scope line="1224"/>
                <scope line="1227"/>
                <scope line="1230"/>
                <declaration name="bitMasks" type="int[]" line="1233"/>
                <scope line="1234">
                    <scope line="1235"/>
                </scope>
            </method>
            <method name="setFields" type="void" line="1241">
                <scope line="1248"/>
                <scope line="1251"/>
                <scope line="1254"/>
                <scope line="1257">
                    <scope line="1260"/>
                </scope>
            </method>
            <javadoc line="1265">
                Returns a &lt;code&gt;String&lt;/code&gt; that represents this
                  &lt;code&gt;DirectColorModel&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing this
                      &lt;code&gt;DirectColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1271"/>
        </class>
    </source>