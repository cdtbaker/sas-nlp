<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Hashtable"/>
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ImageFilter"/>
        <class name="BufferedImageFilter" line="32">
            <extends class="ImageFilter"/>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                The &lt;code&gt;BufferedImageFilter&lt;/code&gt; class subclasses an
                  &lt;code&gt;ImageFilter&lt;/code&gt; to provide a simple means of
                  using a single-source/single-destination image operator
                  ({@link BufferedImageOp}) to filter a &lt;code&gt;BufferedImage&lt;/code&gt;
                  in the Image Producer/Consumer/Observer
                  paradigm. Examples of these image operators are: {@link ConvolveOp},{@link AffineTransformOp} and {@link LookupOp}.                
                <see>
                    ImageFilter                    
                </see>
                <see>
                    BufferedImage                    
                </see>
                <see>
                    BufferedImageOp                    
                </see>
            </javadoc>
            <declaration name="bufferedImageOp" type="BufferedImageOp" line="47"/>
            <declaration name="model" type="ColorModel" line="48"/>
            <declaration name="width" type="int" line="49"/>
            <declaration name="height" type="int" line="50"/>
            <declaration name="bytePixels" type="byte[]" line="51"/>
            <declaration name="intPixels" type="int[]" line="52"/>
            <javadoc line="54">
                Constructs a &lt;code&gt;BufferedImageFilter&lt;/code&gt; with the
                  specified single-source/single-destination operator.                
                <param>
                    op the specified &lt;code&gt;BufferedImageOp&lt;/code&gt; to
                      use to filter a &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if op is null                    
                </throws>
            </javadoc>
            <method name="BufferedImageFilter" type="constructor" line="61">
                <params>
                    <param name="op" type="BufferedImageOp"/>
                </params>
                <scope line="63"/>
            </method>
            <javadoc line="69">
                Returns the &lt;code&gt;BufferedImageOp&lt;/code&gt;.                
                <return>
                    the operator of this &lt;code&gt;BufferedImageFilter&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getBufferedImageOp" type="BufferedImageOp" line="73"/>
            <javadoc line="77">
                Filters the information provided in the{@link ImageConsumer#setDimensions(int,int) setDimensions } method
                  of the {@link ImageConsumer} interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the{@link ImageProducer} of the &lt;code&gt;Image&lt;/code&gt; whose pixels are
                  being filtered. Developers using this class to retrieve pixels from
                  an image should avoid calling this method directly since that
                  operation could result in problems with retrieving the requested
                  pixels.
                  &lt;p&gt;                
                <param>
                    width the width to which to set the width of this
                      &lt;code&gt;BufferedImageFilter&lt;/code&gt;                    
                </param>
                <param>
                    height the height to which to set the height of this
                      &lt;code&gt;BufferedImageFilter&lt;/code&gt;                    
                </param>
                <see>
                    ImageConsumer#setDimensions                    
                </see>
            </javadoc>
            <method name="setDimensions" type="void" line="95">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Filters the information provided in the{@link ImageConsumer#setColorModel(ColorModel) setColorModel} method
                  of the &lt;code&gt;ImageConsumer&lt;/code&gt; interface.
                  &lt;p&gt;
                  If &lt;code&gt;model&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this
                  method clears the current &lt;code&gt;ColorModel&lt;/code&gt; of this
                  &lt;code&gt;BufferedImageFilter&lt;/code&gt;.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt;
                  whose pixels are being filtered.  Developers using this
                  class to retrieve pixels from an image
                  should avoid calling this method directly since that
                  operation could result in problems with retrieving the
                  requested pixels.                
                <param>
                    model the {@link ColorModel} to which to set the
                      &lt;code&gt;ColorModel&lt;/code&gt; of this &lt;code&gt;BufferedImageFilter&lt;/code&gt;                    
                </param>
                <see>
                    ImageConsumer#setColorModel                    
                </see>
            </javadoc>
            <method name="setColorModel" type="void" line="124">
                <params>
                    <param name="model" type="ColorModel"/>
                </params>
            </method>
            <method name="convertToRGB" type="void" line="128">
                <declaration name="size" type="int" line="129"/>
                <declaration name="newpixels" type="int" line="130"/>
                <scope line="131">
                    <scope line="132"/>
                </scope>
                <scope line="135">
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="145">
                Filters the information provided in the &lt;code&gt;setPixels&lt;/code&gt;
                  method of the &lt;code&gt;ImageConsumer&lt;/code&gt; interface which takes
                  an array of bytes.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <throws>
                    IllegalArgumentException if width or height are less than
                      zero.                    
                </throws>
                <see>
                    ImageConsumer#setPixels(int,int,int,int,ColorModel,byte[],int,int)                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="163">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <comment line="165">
                    Fix 4184230                    
                </comment>
                <comment line="171">
                    Nothing to do                    
                </comment>
                <scope line="165"/>
                <scope line="171"/>
                <scope line="174">
                    <declaration name="diff" type="int" line="175"/>
                    <scope line="176"/>
                </scope>
                <scope line="183">
                    <scope line="185"/>
                </scope>
                <scope line="189">
                    <declaration name="diff" type="int" line="190"/>
                    <scope line="191"/>
                </scope>
                <scope line="198">
                    <scope line="200"/>
                </scope>
                <declaration name="dstPtr" type="int" line="204"/>
                <scope line="205">
                    <scope line="206"/>
                    <scope line="209"/>
                    <scope line="212">
                        <scope line="213"/>
                    </scope>
                </scope>
                <scope line="220">
                    <declaration name="dstRem" type="int" line="221"/>
                    <declaration name="srcRem" type="int" line="222"/>
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="232">
                Filters the information provided in the &lt;code&gt;setPixels&lt;/code&gt;
                  method of the &lt;code&gt;ImageConsumer&lt;/code&gt; interface which takes
                  an array of integers.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose
                  pixels are being filtered.  Developers using this class to
                  retrieve pixels from an image should avoid calling this method
                  directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <throws>
                    IllegalArgumentException if width or height are less than
                      zero.                    
                </throws>
                <see>
                    ImageConsumer#setPixels(int,int,int,int,ColorModel,int[],int,int)                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="250">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <comment line="252">
                    Fix 4184230                    
                </comment>
                <comment line="258">
                    Nothing to do                    
                </comment>
                <scope line="252"/>
                <scope line="258"/>
                <scope line="261">
                    <declaration name="diff" type="int" line="262"/>
                    <scope line="263"/>
                </scope>
                <scope line="270">
                    <scope line="272"/>
                </scope>
                <scope line="276">
                    <declaration name="diff" type="int" line="277"/>
                    <scope line="278"/>
                </scope>
                <scope line="285">
                    <scope line="287"/>
                </scope>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                </scope>
                <declaration name="dstPtr" type="int" line="300"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
                <scope line="307">
                    <scope line="308"/>
                    <declaration name="dstRem" type="int" line="311"/>
                    <declaration name="srcRem" type="int" line="312"/>
                    <scope line="313">
                        <scope line="314"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="323">
                Filters the information provided in the &lt;code&gt;imageComplete&lt;/code&gt;
                  method of the &lt;code&gt;ImageConsumer&lt;/code&gt; interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    status the status of image loading                    
                </param>
                <throws>
                    ImagingOpException if there was a problem calling the filter
                      method of the &lt;code&gt;BufferedImageOp&lt;/code&gt; associated with this
                      instance.                    
                </throws>
                <see>
                    ImageConsumer#imageComplete                    
                </see>
            </javadoc>
            <method name="imageComplete" type="void" line="339">
                <params>
                    <param name="status" type="int"/>
                </params>
                <comment line="345">
                    reinitialize the params                    
                </comment>
                <declaration name="wr" type="WritableRaster" line="340"/>
                <scope line="355"/>
                <scope line="359">
                    <declaration name="bandOffsets" type="int[]" line="360"/>
                    <declaration name="db" type="DataBufferByte" line="362"/>
                </scope>
                <scope line="367"/>
                <declaration name="bi" type="BufferedImage" line="372"/>
                <declaration name="r" type="WritableRaster" line="376"/>
                <declaration name="cm" type="ColorModel" line="377"/>
                <declaration name="w" type="int" line="378"/>
                <declaration name="h" type="int" line="379"/>
                <scope line="382">
                    <declaration name="db" type="DataBufferInt" line="383"/>
                </scope>
                <scope line="387">
                    <declaration name="db" type="DataBufferByte" line="388"/>
                </scope>
                <scope line="392"/>
            </method>
            <method name="createDCMraster" type="WritableRaster" line="400">
                <declaration name="wr" type="WritableRaster" line="401"/>
                <declaration name="dcm" type="DirectColorModel" line="402"/>
                <declaration name="hasAlpha" type="boolean" line="403"/>
                <declaration name="bandMasks" type="int[]" line="404"/>
                <scope line="408"/>
                <declaration name="db" type="DataBufferInt" line="411"/>
            </method>
        </class>
    </source>