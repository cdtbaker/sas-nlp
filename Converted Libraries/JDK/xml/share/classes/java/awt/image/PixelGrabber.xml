<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Hashtable"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.Image"/>
        <class name="PixelGrabber" line="34">
            <implements interface="ImageConsumer"/>
            <javadoc line="34">
                The PixelGrabber class implements an ImageConsumer which can be attached
                  to an Image or ImageProducer object to retrieve a subset of the pixels
                  in that image.  Here is an example:
                  &lt;pre&gt;
                  public void handlesinglepixel(int x, int y, int pixel) {
                  int alpha = (pixel &gt;&gt; 24) &amp; 0xff;
                  int red   = (pixel &gt;&gt; 16) &amp; 0xff;
                  int green = (pixel &gt;&gt;  8) &amp; 0xff;
                  int blue  = (pixel      ) &amp; 0xff;
                  // Deal with the pixel as necessary...
                  }
                  public void handlepixels(Image img, int x, int y, int w, int h) {
                  int[] pixels = new int[w  h];
                  PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w);
                  try {
                  pg.grabPixels();
                  } catch (InterruptedException e) {
                  System.err.println(&quot;interrupted waiting for pixels!&quot;);
                  return;
                  }
                  if ((pg.getStatus() &amp; ImageObserver.ABORT) != 0) {
                  System.err.println(&quot;image fetch aborted or errored&quot;);
                  return;
                  }
                  for (int j = 0; j &lt; h; j++) {
                  for (int i = 0; i &lt; w; i++) {
                  handlesinglepixel(x+i, y+j, pixels[j  w + i]);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="producer" type="ImageProducer" line="75"/>
            <declaration name="dstX" type="int" line="77"/>
            <declaration name="dstY" type="int" line="78"/>
            <declaration name="dstW" type="int" line="79"/>
            <declaration name="dstH" type="int" line="80"/>
            <declaration name="imageModel" type="ColorModel" line="82"/>
            <declaration name="bytePixels" type="byte[]" line="83"/>
            <declaration name="intPixels" type="int[]" line="84"/>
            <declaration name="dstOff" type="int" line="85"/>
            <declaration name="dstScan" type="int" line="86"/>
            <declaration name="grabbing" type="boolean" line="88"/>
            <declaration name="flags" type="int" line="89"/>
            <declaration name="GRABBEDBITS" type="int" line="91"/>
            <declaration name="DONEBITS" type="int" line="93"/>
            <javadoc line="96">
                Create a PixelGrabber object to grab the (x, y, w, h) rectangular
                  section of pixels from the specified image into the given array.
                  The pixels are stored into the array in the default RGB ColorModel.
                  The RGB data for pixel (i, j) where (i, j) is inside the rectangle
                  (x, y, w, h) is stored in the array at
                  &lt;tt&gt;pix[(j - y)  scansize + (i - x) + off]&lt;/tt&gt;.                
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <param>
                    img the image to retrieve pixels from                    
                </param>
                <param>
                    x the x coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image, relative to the default
                      (unscaled) size of the image                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image                    
                </param>
                <param>
                    w the width of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    h the height of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    pix the array of integers which are to be used to hold the
                      RGB pixels retrieved from the image                    
                </param>
                <param>
                    off the offset into the array of where to store the first pixel                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the array                    
                </param>
            </javadoc>
            <method name="PixelGrabber" type="constructor" line="119">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pix" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Create a PixelGrabber object to grab the (x, y, w, h) rectangular
                  section of pixels from the image produced by the specified
                  ImageProducer into the given array.
                  The pixels are stored into the array in the default RGB ColorModel.
                  The RGB data for pixel (i, j) where (i, j) is inside the rectangle
                  (x, y, w, h) is stored in the array at
                  &lt;tt&gt;pix[(j - y)  scansize + (i - x) + off]&lt;/tt&gt;.                
                <param>
                    ip the &lt;code&gt;ImageProducer&lt;/code&gt; that produces the
                      image from which to retrieve pixels                    
                </param>
                <param>
                    x the x coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image, relative to the default
                      (unscaled) size of the image                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image                    
                </param>
                <param>
                    w the width of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    h the height of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    pix the array of integers which are to be used to hold the
                      RGB pixels retrieved from the image                    
                </param>
                <param>
                    off the offset into the array of where to store the first pixel                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="PixelGrabber" type="constructor" line="148">
                <params>
                    <param name="ip" type="ImageProducer"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pix" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <javadoc line="160">
                Create a PixelGrabber object to grab the (x, y, w, h) rectangular
                  section of pixels from the specified image.  The pixels are
                  accumulated in the original ColorModel if the same ColorModel
                  is used for every call to setPixels, otherwise the pixels are
                  accumulated in the default RGB ColorModel.  If the forceRGB
                  parameter is true, then the pixels will be accumulated in the
                  default RGB ColorModel anyway.  A buffer is allocated by the
                  PixelGrabber to hold the pixels in either case.  If (w &lt; 0) or
                  (h &lt; 0), then they will default to the remaining width and
                  height of the source data when that information is delivered.                
                <param>
                    img the image to retrieve the image data from                    
                </param>
                <param>
                    x the x coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image, relative to the default
                      (unscaled) size of the image                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the rectangle
                      of pixels to retrieve from the image                    
                </param>
                <param>
                    w the width of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    h the height of the rectangle of pixels to retrieve                    
                </param>
                <param>
                    forceRGB true if the pixels should always be converted to
                      the default RGB ColorModel                    
                </param>
            </javadoc>
            <method name="PixelGrabber" type="constructor" line="184">
                <params>
                    <param name="img" type="Image"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="forceRGB" type="boolean"/>
                </params>
                <scope line="190"/>
            </method>
            <javadoc line="195">
                Request the PixelGrabber to start fetching the pixels.                
            </javadoc>
            <method name="startGrabbing" type="void" line="198">
                <scope line="199"/>
                <scope line="202"/>
            </method>
            <javadoc line="209">
                Request the PixelGrabber to abort the image fetch.                
            </javadoc>
            <method name="abortGrabbing" type="void" line="212"/>
            <javadoc line="216">
                Request the Image or ImageProducer to start delivering pixels and
                  wait for all of the pixels in the rectangle of interest to be
                  delivered.                
                <return>
                    true if the pixels were successfully grabbed, false on
                      abort, error or timeout                    
                </return>
                <exception>
                    InterruptedExceptionAnother thread has interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="grabPixels" type="boolean" line="225"/>
            <javadoc line="229">
                Request the Image or ImageProducer to start delivering pixels and
                  wait for all of the pixels in the rectangle of interest to be
                  delivered or until the specified timeout has elapsed.  This method
                  behaves in the following ways, depending on the value of
                  &lt;code&gt;ms&lt;/code&gt;:
                  &lt;ul&gt;
                  &lt;li&gt; If &lt;code&gt;ms&lt;/code&gt; == 0, waits until all pixels are delivered
                  &lt;li&gt; If &lt;code&gt;ms&lt;/code&gt; &gt; 0, waits until all pixels are delivered
                  as timeout expires.
                  &lt;li&gt; If &lt;code&gt;ms&lt;/code&gt; &lt; 0, returns &lt;code&gt;true&lt;/code&gt; if all pixels
                  are grabbed, &lt;code&gt;false&lt;/code&gt; otherwise and does not wait.
                  &lt;/ul&gt;                
                <param>
                    ms the number of milliseconds to wait for the image pixels
                      to arrive before timing out                    
                </param>
                <return>
                    true if the pixels were successfully grabbed, false on
                      abort, error or timeout                    
                </return>
                <exception>
                    InterruptedExceptionAnother thread has interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="grabPixels" type="boolean" line="251">
                <params>
                    <param name="ms" type="long"/>
                </params>
                <scope line="252"/>
                <declaration name="end" type="long" line="255"/>
                <scope line="256"/>
                <scope line="261">
                    <declaration name="timeout" type="long" line="262"/>
                    <scope line="263"/>
                    <scope line="265">
                        <scope line="267"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="276">
                Return the status of the pixels.  The ImageObserver flags
                  representing the available pixel information are returned.                
                <return>
                    the bitwise OR of all relevant ImageObserver flags                    
                </return>
                <see>
                    ImageObserver                    
                </see>
            </javadoc>
            <method name="getStatus" type="int" line="282"/>
            <javadoc line="286">
                Get the width of the pixel buffer (after adjusting for image width).
                  If no width was specified for the rectangle of pixels to grab then
                  then this information will only be available after the image has
                  delivered the dimensions.                
                <return>
                    the final width used for the pixel buffer or -1 if the width
                      is not yet known                    
                </return>
                <see>
                    #getStatus                    
                </see>
            </javadoc>
            <method name="getWidth" type="int" line="295"/>
            <javadoc line="299">
                Get the height of the pixel buffer (after adjusting for image height).
                  If no width was specified for the rectangle of pixels to grab then
                  then this information will only be available after the image has
                  delivered the dimensions.                
                <return>
                    the final height used for the pixel buffer or -1 if the height
                      is not yet known                    
                </return>
                <see>
                    #getStatus                    
                </see>
            </javadoc>
            <method name="getHeight" type="int" line="308"/>
            <javadoc line="312">
                Get the pixel buffer.  If the PixelGrabber was not constructed
                  with an explicit pixel buffer to hold the pixels then this method
                  will return null until the size and format of the image data is
                  known.
                  Since the PixelGrabber may fall back on accumulating the data
                  in the default RGB ColorModel at any time if the source image
                  uses more than one ColorModel to deliver the data, the array
                  object returned by this method may change over time until the
                  image grab is complete.                
                <return>
                    either a byte array or an int array                    
                </return>
                <see>
                    #getStatus                    
                </see>
                <see>
                    #setPixels(int,int,int,int,ColorModel,byte[],int,int)                    
                </see>
                <see>
                    #setPixels(int,int,int,int,ColorModel,int[],int,int)                    
                </see>
            </javadoc>
            <method name="getPixels" type="Object" line="327"/>
            <javadoc line="333">
                Get the ColorModel for the pixels stored in the array.  If the
                  PixelGrabber was constructed with an explicit pixel buffer then
                  this method will always return the default RGB ColorModel,
                  otherwise it may return null until the ColorModel used by the
                  ImageProducer is known.
                  Since the PixelGrabber may fall back on accumulating the data
                  in the default RGB ColorModel at any time if the source image
                  uses more than one ColorModel to deliver the data, the ColorModel
                  object returned by this method may change over time until the
                  image grab is complete and may not reflect any of the ColorModel
                  objects that was used by the ImageProducer to deliver the pixels.                
                <return>
                    the ColorModel object used for storing the pixels                    
                </return>
                <see>
                    #getStatus                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <see>
                    #setColorModel(ColorModel)                    
                </see>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="350"/>
            <javadoc line="354">
                The setDimensions method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    width the width of the dimension                    
                </param>
                <param>
                    height the height of the dimension                    
                </param>
            </javadoc>
            <method name="setDimensions" type="void" line="366">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="367"/>
                <scope line="370"/>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="384">
                The setHints method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    hints a set of hints used to process the pixels                    
                </param>
            </javadoc>
            <method name="setHints" type="void" line="395">
                <params>
                    <param name="hints" type="int"/>
                </params>
            </method>
            <javadoc line="399">
                The setProperties method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    props the list of properties                    
                </param>
            </javadoc>
            <method name="setProperties" type="void" line="410">
                <params>
                    <param name="props" type="Hashtable<?,?>"/>
                </params>
            </method>
            <javadoc line="414">
                The setColorModel method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <see>
                    #getColorModel                    
                </see>
            </javadoc>
            <method name="setColorModel" type="void" line="426">
                <params>
                    <param name="model" type="ColorModel"/>
                </params>
            </method>
            <method name="convertToRGB" type="void" line="430">
                <declaration name="size" type="int" line="431"/>
                <declaration name="newpixels" type="int" line="432"/>
                <scope line="433">
                    <scope line="434"/>
                </scope>
                <scope line="437">
                    <scope line="438"/>
                </scope>
            </method>
            <javadoc line="449">
                The setPixels method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    srcX the X coordinate of the upper-left corner
                      of the area of pixels to be set                    
                </param>
                <param>
                    srcY the Y coordinate of the upper-left corner
                      of the area of pixels to be set                    
                </param>
                <param>
                    srcW the width of the area of pixels                    
                </param>
                <param>
                    srcH the height of the area of pixels                    
                </param>
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pixels the array of pixels                    
                </param>
                <param>
                    srcOff the offset into the pixels array                    
                </param>
                <param>
                    srcScan the distance from one row of pixels to the next
                      in the pixels array                    
                </param>
                <see>
                    #getPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="473">
                <params>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="srcW" type="int"/>
                    <param name="srcH" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="srcOff" type="int"/>
                    <param name="srcScan" type="int"/>
                </params>
                <scope line="474">
                    <declaration name="diff" type="int" line="475"/>
                    <scope line="476"/>
                </scope>
                <scope line="483">
                    <scope line="485"/>
                </scope>
                <scope line="489">
                    <declaration name="diff" type="int" line="490"/>
                    <scope line="491"/>
                </scope>
                <scope line="498">
                    <scope line="500"/>
                </scope>
                <declaration name="dstPtr" type="int" line="504"/>
                <scope line="505">
                    <scope line="506"/>
                    <scope line="511"/>
                    <scope line="514">
                        <scope line="515"/>
                    </scope>
                </scope>
                <scope line="522">
                    <declaration name="dstRem" type="int" line="523"/>
                    <declaration name="srcRem" type="int" line="524"/>
                    <scope line="525">
                        <scope line="526"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="536">
                The setPixels method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    srcX the X coordinate of the upper-left corner
                      of the area of pixels to be set                    
                </param>
                <param>
                    srcY the Y coordinate of the upper-left corner
                      of the area of pixels to be set                    
                </param>
                <param>
                    srcW the width of the area of pixels                    
                </param>
                <param>
                    srcH the height of the area of pixels                    
                </param>
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pixels the array of pixels                    
                </param>
                <param>
                    srcOff the offset into the pixels array                    
                </param>
                <param>
                    srcScan the distance from one row of pixels to the next
                      in the pixels array                    
                </param>
                <see>
                    #getPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="560">
                <params>
                    <param name="srcX" type="int"/>
                    <param name="srcY" type="int"/>
                    <param name="srcW" type="int"/>
                    <param name="srcH" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="srcOff" type="int"/>
                    <param name="srcScan" type="int"/>
                </params>
                <scope line="561">
                    <declaration name="diff" type="int" line="562"/>
                    <scope line="563"/>
                </scope>
                <scope line="570">
                    <scope line="572"/>
                </scope>
                <scope line="576">
                    <declaration name="diff" type="int" line="577"/>
                    <scope line="578"/>
                </scope>
                <scope line="585">
                    <scope line="587"/>
                </scope>
                <scope line="591">
                    <scope line="592"/>
                    <scope line="597"/>
                </scope>
                <declaration name="dstPtr" type="int" line="601"/>
                <scope line="602">
                    <scope line="603"/>
                </scope>
                <scope line="608">
                    <scope line="609"/>
                    <declaration name="dstRem" type="int" line="612"/>
                    <declaration name="srcRem" type="int" line="613"/>
                    <scope line="614">
                        <scope line="615"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="625">
                The imageComplete method is part of the ImageConsumer API which
                  this class must implement to retrieve the pixels.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being grabbed.  Developers using
                  this class to retrieve pixels from an image should avoid calling
                  this method directly since that operation could result in problems
                  with retrieving the requested pixels.                
                <param>
                    status the status of image loading                    
                </param>
            </javadoc>
            <method name="imageComplete" type="void" line="636">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <javadoc line="657">
                Returns the status of the pixels.  The ImageObserver flags
                  representing the available pixel information are returned.
                  This method and {@link #getStatus() getStatus} have the
                  same implementation, but &lt;code&gt;getStatus&lt;/code&gt; is the
                  preferred method because it conforms to the convention of
                  naming information-retrieval methods with the form
                  &quot;getXXX&quot;.                
                <return>
                    the bitwise OR of all relevant ImageObserver flags                    
                </return>
                <see>
                    ImageObserver                    
                </see>
                <see>
                    #getStatus()                    
                </see>
            </javadoc>
            <method name="status" type="int" line="669"/>
        </class>
    </source>