<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="sun.java2d.StateTrackable.State"/>
        <class name="DataBufferDouble" line="30">
            <extends class="DataBuffer"/>
            <javadoc line="30">
                This class extends &lt;code&gt;DataBuffer&lt;/code&gt; and stores data internally
                  in &lt;code&gt;double&lt;/code&gt; form.
                  &lt;p&gt;
                  &lt;a name=&quot;optimizations&quot;&gt;
                  Note that some implementations may function more efficiently
                  if they can maintain control over how the data for an image is
                  stored.
                  For example, optimizations such as caching an image in video
                  memory require that the implementation track all modifications
                  to that data.
                  Other implementations may operate better if they can store the
                  data in locations other than a Java array.
                  To maintain optimum compatibility with various optimizations
                  it is best to avoid constructors and methods which expose the
                  underlying storage as a Java array as noted below in the
                  documentation for those methods.
                  &lt;/a&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="bankdata" type="double" line="54"/>
            <javadoc line="54">
                The array of data banks.                
            </javadoc>
            <declaration name="data" type="double" line="57"/>
            <javadoc line="57">
                A reference to the default data bank.                
            </javadoc>
            <javadoc line="60">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with a specified size.                
                <param>
                    size The number of elements in the <code>DataBuffer</code>.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="66">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with a specified number of banks, all of which are of a
                  specified size.                
                <param>
                    size The number of elements in each bank of the
                      <code>DataBuffer</code>.                    
                </param>
                <param>
                    numBanks The number of banks in the <code>DataBuffer</code>.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="82">
                <params>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with the specified data array.  Only the first
                  &lt;code&gt;size&lt;/code&gt; elements are available for use by this
                  &lt;code&gt;DataBuffer&lt;/code&gt;.  The array must be large enough to
                  hold &lt;code&gt;size&lt;/code&gt; elements.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray An array of <code>double</code>s to be used as the
                      first and only bank of this <code>DataBuffer</code>.                    
                </param>
                <param>
                    size The number of elements of the array to be used.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="107">
                <params>
                    <param name="dataArray" type="double"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with the specified data array.  Only the elements between
                  &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;offset + size - 1&lt;/code&gt; are
                  available for use by this &lt;code&gt;DataBuffer&lt;/code&gt;.  The array
                  must be large enough to hold &lt;code&gt;offset + size&lt;/code&gt; elements.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray An array of <code>double</code>s to be used as the
                      first and only bank of this <code>DataBuffer</code>.                    
                </param>
                <param>
                    size The number of elements of the array to be used.                    
                </param>
                <param>
                    offset The offset of the first element of the array
                      that will be used.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="132">
                <params>
                    <param name="dataArray" type="double"/>
                    <param name="size" type="int"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with the specified data arrays.  Only the first
                  &lt;code&gt;size&lt;/code&gt; elements of each array are available for use
                  by this &lt;code&gt;DataBuffer&lt;/code&gt;.  The number of banks will be
                  equal &lt;code&gt;to dataArray.length&lt;/code&gt;.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray An array of arrays of <code>double</code>s to be
                      used as the banks of this <code>DataBuffer</code>.                    
                </param>
                <param>
                    size The number of elements of each array to be used.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="155">
                <params>
                    <param name="dataArray" type="double"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="161">
                Constructs a &lt;code&gt;double&lt;/code&gt;-based &lt;code&gt;DataBuffer&lt;/code&gt;
                  with the specified data arrays, size, and per-bank offsets.
                  The number of banks is equal to dataArray.length.  Each array
                  must be at least as large as &lt;code&gt;size&lt;/code&gt; plus the
                  corresponding offset.  There must be an entry in the
                  &lt;code&gt;offsets&lt;/code&gt; array for each data array.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray An array of arrays of <code>double</code>s to be
                      used as the banks of this <code>DataBuffer</code>.                    
                </param>
                <param>
                    size The number of elements of each array to be used.                    
                </param>
                <param>
                    offsets An array of integer offsets, one for each bank.                    
                </param>
            </javadoc>
            <method name="DataBufferDouble" type="constructor" line="179">
                <params>
                    <param name="dataArray" type="double"/>
                    <param name="size" type="int"/>
                    <param name="offsets" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Returns the default (first) &lt;code&gt;double&lt;/code&gt; data array.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <return>
                    the first double data array.                    
                </return>
            </javadoc>
            <method name="getData" type="double[]" line="195"/>
            <javadoc line="200">
                Returns the data array for the specified bank.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    bank the data array                    
                </param>
                <return>
                    the data array specified by <code>bank</code>.                    
                </return>
            </javadoc>
            <method name="getData" type="double[]" line="211">
                <params>
                    <param name="bank" type="int"/>
                </params>
            </method>
            <javadoc line="216">
                Returns the data array for all banks.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <return>
                    all data arrays from this data buffer.                    
                </return>
            </javadoc>
            <method name="getBankData" type="double[][]" line="226"/>
            <javadoc line="231">
                Returns the requested data array element from the first
                  (default) bank as an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as an <code>int</code>.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <method name="getElem" type="int" line="240">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="244">
                Returns the requested data array element from the specified
                  bank as an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as an <code>int</code>.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <method name="getElem" type="int" line="255">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="259">
                Sets the requested data array element in the first (default)
                  bank to the given &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <method name="setElem" type="void" line="268">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="273">
                Sets the requested data array element in the specified bank
                  to the given &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <method name="setElem" type="void" line="283">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="288">
                Returns the requested data array element from the first
                  (default) bank as a &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as a <code>float</code>.                    
                </return>
                <see>
                    #setElemFloat(int,float)                    
                </see>
                <see>
                    #setElemFloat(int,int,float)                    
                </see>
            </javadoc>
            <method name="getElemFloat" type="float" line="298">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="302">
                Returns the requested data array element from the specified
                  bank as a &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as a <code>float</code>.                    
                </return>
                <see>
                    #setElemFloat(int,float)                    
                </see>
                <see>
                    #setElemFloat(int,int,float)                    
                </see>
            </javadoc>
            <method name="getElemFloat" type="float" line="313">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="317">
                Sets the requested data array element in the first (default)
                  bank to the given &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElemFloat(int)                    
                </see>
                <see>
                    #getElemFloat(int,int)                    
                </see>
            </javadoc>
            <method name="setElemFloat" type="void" line="326">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="331">
                Sets the requested data array element in the specified bank to
                  the given &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElemFloat(int)                    
                </see>
                <see>
                    #getElemFloat(int,int)                    
                </see>
            </javadoc>
            <method name="setElemFloat" type="void" line="341">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="346">
                Returns the requested data array element from the first
                  (default) bank as a &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as a <code>double</code>.                    
                </return>
                <see>
                    #setElemDouble(int,double)                    
                </see>
                <see>
                    #setElemDouble(int,int,double)                    
                </see>
            </javadoc>
            <method name="getElemDouble" type="double" line="356">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="360">
                Returns the requested data array element from the specified
                  bank as a &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <return>
                    The data entry as a <code>double</code>.                    
                </return>
                <see>
                    #setElemDouble(int,double)                    
                </see>
                <see>
                    #setElemDouble(int,int,double)                    
                </see>
            </javadoc>
            <method name="getElemDouble" type="double" line="371">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="375">
                Sets the requested data array element in the first (default)
                  bank to the given &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElemDouble(int)                    
                </see>
                <see>
                    #getElemDouble(int,int)                    
                </see>
            </javadoc>
            <method name="setElemDouble" type="void" line="384">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="389">
                Sets the requested data array element in the specified bank to
                  the given &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    bank The bank number.                    
                </param>
                <param>
                    i The desired data array element.                    
                </param>
                <param>
                    val The value to be set.                    
                </param>
                <see>
                    #getElemDouble(int)                    
                </see>
                <see>
                    #getElemDouble(int,int)                    
                </see>
            </javadoc>
            <method name="setElemDouble" type="void" line="399">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
        </class>
    </source>