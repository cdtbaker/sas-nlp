<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <class name="MultiPixelPackedSampleModel" line="2">
            <extends class="SampleModel"/>
            <javadoc line="2">
                The &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; class represents
                  one-banded images and can pack multiple one-sample
                  pixels into one data element.  Pixels are not allowed to span data elements.
                  The data type can be DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  or DataBuffer.TYPE_INT.  Each pixel must be a power of 2 number of bits
                  and a power of 2 number of pixels must fit exactly in one data element.
                  Pixel bit stride is equal to the number of bits per pixel.  Scanline
                  stride is in data elements and the last several data elements might be
                  padded with unused pixels.  Data bit offset is the offset in bits from
                  the beginning of the {@link DataBuffer} to the first pixel and must be
                  a multiple of pixel bit stride.
                  &lt;p&gt;
                  The following code illustrates extracting the bits for pixel
                  &lt;code&gt;x,&amp;nbsp;y&lt;/code&gt; from &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;data&lt;/code&gt;
                  and storing the pixel data in data elements of type
                  &lt;code&gt;dataType&lt;/code&gt;:
                  &lt;pre&gt;
                  int dataElementSize = DataBuffer.getDataTypeSize(dataType);
                  int bitnum = dataBitOffset + xpixelBitStride;
                  int element = data.getElem(yscanlineStride + bitnum/dataElementSize);
                  int shift = dataElementSize - (bitnum &amp; (dataElementSize-1))
                  - pixelBitStride;
                  int pixel = (element &gt;&gt; shift) &amp; ((1 &lt;&lt; pixelBitStride) - 1);
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="pixelBitStride" type="int" line="29"/>
            <javadoc line="29">
                The number of bits from one pixel to the next.                
            </javadoc>
            <declaration name="bitMask" type="int" line="33"/>
            <javadoc line="33">
                Bitmask that extracts the rightmost pixel of a data element.                
            </javadoc>
            <declaration name="pixelsPerDataElement" type="int" line="37"/>
            <javadoc line="37">
                The number of pixels that fit in a data element.  Also used
                  as the number of bits per pixel.                
            </javadoc>
            <declaration name="dataElementSize" type="int" line="42"/>
            <javadoc line="42">
                The size of a data element in bits.                
            </javadoc>
            <declaration name="dataBitOffset" type="int" line="46"/>
            <javadoc line="46">
                The bit offset into the data array where the first pixel begins.                
            </javadoc>
            <declaration name="scanlineStride" type="int" line="50"/>
            <javadoc line="50">
                ScanlineStride of the data buffer described in data array elements.                
            </javadoc>
            <javadoc line="54">
                Constructs a &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; with the
                  specified data type, width, height and number of bits per pixel.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width, in pixels, of the region of
                      image data described                    
                </param>
                <param>
                    h         the height, in pixels, of the region of
                      image data described                    
                </param>
                <param>
                    numberOfBits the number of bits per pixel                    
                </param>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      either <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>, or
                      <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="MultiPixelPackedSampleModel" type="constructor" line="68">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="numberOfBits" type="int"/>
                </params>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Constructs a &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; with
                  specified data type, width, height, number of bits per pixel,
                  scanline stride and data bit offset.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width, in pixels, of the region of
                      image data described                    
                </param>
                <param>
                    h         the height, in pixels, of the region of
                      image data described                    
                </param>
                <param>
                    numberOfBits the number of bits per pixel                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    dataBitOffset the data bit offset for the region of image
                      data described                    
                </param>
                <exception>
                    RasterFormatException if the number of bits per pixel
                      is not a power of 2 or if a power of 2 number of
                      pixels do not fit in one data element.                    
                </exception>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      either <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>, or
                      <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="MultiPixelPackedSampleModel" type="constructor" line="97">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="numberOfBits" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="dataBitOffset" type="int"/>
                </params>
                <scope line="99"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Creates a new &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; with the
                  specified width and height.  The new
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; has the
                  same storage data type and number of bits per pixel as this
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;.                
                <param>
                    w the specified width                    
                </param>
                <param>
                    h the specified height                    
                </param>
                <return>
                    a {@link SampleModel} with the specified width and height
                      and with the same storage data type and number of bits per pixel
                      as this <code>MultiPixelPackedSampleModel</code>.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="127">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="sampleModel" type="SampleModel" line="128"/>
            </method>
            <javadoc line="131">
                Creates a &lt;code&gt;DataBuffer&lt;/code&gt; that corresponds to this
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;.  The
                  &lt;code&gt;DataBuffer&lt;/code&gt; object&apos;s data type and size
                  is consistent with this &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;.
                  The &lt;code&gt;DataBuffer&lt;/code&gt; has a single bank.                
                <return>
                    a <code>DataBuffer</code> with the same data type and
                      size as this <code>MultiPixelPackedSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="createDataBuffer" type="DataBuffer" line="140">
                <declaration name="dataBuffer" type="DataBuffer" line="141"/>
                <declaration name="size" type="int" line="142"/>
            </method>
            <javadoc line="156">
                Returns the number of data elements needed to transfer one pixel
                  via the {@link #getDataElements} and {@link #setDataElements}methods.  For a &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;, this is
                  one.                
                <return>
                    the number of data elements.                    
                </return>
            </javadoc>
            <method name="getNumDataElements" type="int" line="162"/>
            <javadoc line="165">
                Returns the number of bits per sample for all bands.                
                <return>
                    the number of bits per sample.                    
                </return>
            </javadoc>
            <method name="getSampleSize" type="int[]" line="169">
                <declaration name="sampleSize" type="int" line="170"/>
            </method>
            <javadoc line="173">
                Returns the number of bits per sample for the specified band.                
                <param>
                    band the specified band                    
                </param>
                <return>
                    the number of bits per sample for the specified band.                    
                </return>
            </javadoc>
            <method name="getSampleSize" type="int" line="178">
                <params>
                    <param name="band" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Returns the offset of pixel (x,&amp;nbsp;y) in data array elements.                
                <param>
                    x the X coordinate of the specified pixel                    
                </param>
                <param>
                    y the Y coordinate of the specified pixel                    
                </param>
                <return>
                    the offset of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="187">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="offset" type="int" line="188"/>
            </method>
            <javadoc line="192">
                Returns the offset, in bits, into the data element in which it is
                  stored for the &lt;code&gt;x&lt;/code&gt;th pixel of a scanline.
                  This offset is the same for all scanlines.                
                <param>
                    x the specified pixel                    
                </param>
                <return>
                    the bit offset of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getBitOffset" type="int" line="199">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="202">
                Returns the scanline stride.                
                <return>
                    the scanline stride of this
                      <code>MultiPixelPackedSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getScanlineStride" type="int" line="207"/>
            <javadoc line="210">
                Returns the pixel bit stride in bits.  This value is the same as
                  the number of bits per pixel.                
                <return>
                    the <code>pixelBitStride</code> of this
                      <code>MultiPixelPackedSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getPixelBitStride" type="int" line="216"/>
            <javadoc line="219">
                Returns the data bit offset in bits.                
                <return>
                    the <code>dataBitOffset</code> of this
                      <code>MultiPixelPackedSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getDataBitOffset" type="int" line="224"/>
            <javadoc line="227">
                Returns the TransferType used to transfer pixels by way of the
                  &lt;code&gt;getDataElements&lt;/code&gt; and &lt;code&gt;setDataElements&lt;/code&gt;
                  methods. The TransferType might or might not be the same as the
                  storage DataType.  The TransferType is one of
                  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  or DataBuffer.TYPE_INT.                
                <return>
                    the transfertype.                    
                </return>
            </javadoc>
            <method name="getTransferType" type="int" line="236"/>
            <javadoc line="241">
                Creates a new &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; with a
                  subset of the bands of this
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;.  Since a
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; only has one band, the
                  bands argument must have a length of one and indicate the zeroth
                  band.                
                <param>
                    bands the specified bands                    
                </param>
                <return>
                    a new <code>SampleModel</code> with a subset of bands of
                      this <code>MultiPixelPackedSampleModel</code>.                    
                </return>
                <exception>
                    RasterFormatException if the number of bands requested
                      is not one.                    
                </exception>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
            </javadoc>
            <method name="createSubsetSampleModel" type="SampleModel" line="256">
                <params>
                    <param name="bands" type="int"/>
                </params>
                <scope line="257"/>
                <declaration name="sm" type="SampleModel" line="260"/>
            </method>
            <javadoc line="263">
                Returns as &lt;code&gt;int&lt;/code&gt; the sample in a specified band for the
                  pixel located at (x,&amp;nbsp;y).  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  coordinates are not in bounds.                
                <param>
                    x         the X coordinate of the specified pixel                    
                </param>
                <param>
                    y         the Y coordinate of the specified pixel                    
                </param>
                <param>
                    b         the band to return, which is assumed to be 0                    
                </param>
                <param>
                    data      the <code>DataBuffer</code> containing the image
                      data                    
                </param>
                <return>
                    the specified band containing the sample of the specified
                      pixel.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundException if the specified
                      coordinates are not in bounds.                    
                </exception>
                <see>
                    #setSample(int,int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSample" type="int" line="279">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="280"/>
                <declaration name="bitnum" type="int" line="283"/>
                <declaration name="element" type="int" line="284"/>
                <declaration name="shift" type="int" line="285"/>
            </method>
            <javadoc line="288">
                Sets a sample in the specified band for the pixel located at
                  (x,&amp;nbsp;y) in the &lt;code&gt;DataBuffer&lt;/code&gt; using an
                  &lt;code&gt;int&lt;/code&gt; for input.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  coordinates are not in bounds.                
                <param>
                    x the X coordinate of the specified pixel                    
                </param>
                <param>
                    y the Y coordinate of the specified pixel                    
                </param>
                <param>
                    b the band to return, which is assumed to be 0                    
                </param>
                <param>
                    s the input sample as an <code>int</code>                    
                </param>
                <param>
                    data the <code>DataBuffer</code> where image data is stored                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException if the coordinates are
                      not in bounds.                    
                </exception>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="303">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="304"/>
                <declaration name="bitnum" type="int" line="307"/>
                <declaration name="index" type="int" line="308"/>
                <declaration name="shift" type="int" line="309"/>
                <declaration name="element" type="int" line="310"/>
            </method>
            <javadoc line="315">
                Returns data for a single pixel in a primitive array of type
                  TransferType.  For a &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;,
                  the array has one element, and the type is the smallest of
                  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
                  that can hold a single pixel.  Generally, &lt;code&gt;obj&lt;/code&gt;
                  should be passed in as &lt;code&gt;null&lt;/code&gt;, so that the
                  &lt;code&gt;Object&lt;/code&gt; is created automatically and is the
                  correct primitive data type.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db1&lt;/code&gt;, whose storage layout is
                  described by &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;
                  &lt;code&gt;mppsm1&lt;/code&gt;, to &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db2&lt;/code&gt;,
                  whose storage layout is described by
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; &lt;code&gt;mppsm2&lt;/code&gt;.
                  The transfer is generally more efficient than using
                  &lt;code&gt;getPixel&lt;/code&gt; or &lt;code&gt;setPixel&lt;/code&gt;.
                  &lt;pre&gt;
                  MultiPixelPackedSampleModel mppsm1, mppsm2;
                  DataBufferInt db1, db2;
                  mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                  db1), db2);
                  &lt;/pre&gt;
                  Using &lt;code&gt;getDataElements&lt;/code&gt; or &lt;code&gt;setDataElements&lt;/code&gt;
                  to transfer between two &lt;code&gt;DataBuffer/SampleModel&lt;/code&gt; pairs
                  is legitimate if the &lt;code&gt;SampleModels&lt;/code&gt; have the same number
                  of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  If &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it should be a
                  primitive array of type TransferType.  Otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not
                  &lt;code&gt;null&lt;/code&gt; and is not large enough to hold the pixel data.                
                <param>
                    x the X coordinate of the specified pixel                    
                </param>
                <param>
                    y the Y coordinate of the specified pixel                    
                </param>
                <param>
                    obj a primitive array in which to return the pixel data or
                      <code>null</code>.                    
                </param>
                <param>
                    data the <code>DataBuffer</code> containing the image data.                    
                </param>
                <return>
                    an <code>Object</code> containing data for the specified
                      pixel.                    
                </return>
                <exception>
                    ClassCastException if <code>obj</code> is not a
                      primitive array of type TransferType or is not <code>null</code>                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException if the coordinates are
                      not in bounds, or if <code>obj</code> is not <code>null</code> or
                      not large enough to hold the pixel data                    
                </exception>
                <see>
                    #setDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="365">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="366"/>
                <declaration name="type" type="int" line="369"/>
                <declaration name="bitnum" type="int" line="370"/>
                <declaration name="shift" type="int" line="371"/>
                <declaration name="element" type="int" line="372"/>
                <declaration name="bdata" type="byte[]" line="375"/>
                <declaration name="sdata" type="short[]" line="383"/>
                <declaration name="idata" type="int[]" line="391"/>
            </method>
            <javadoc line="401">
                Returns the specified single band pixel in the first element
                  of an &lt;code&gt;int&lt;/code&gt; array.
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  coordinates are not in bounds.                
                <param>
                    x the X coordinate of the specified pixel                    
                </param>
                <param>
                    y the Y coordinate of the specified pixel                    
                </param>
                <param>
                    iArray the array containing the pixel to be returned or
                      <code>null</code>                    
                </param>
                <param>
                    data the <code>DataBuffer</code> where image data is stored                    
                </param>
                <return>
                    an array containing the specified pixel.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException if the coordinates
                      are not in bounds                    
                </exception>
                <see>
                    #setPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixel" type="int[]" line="416">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="417"/>
                <declaration name="pixels" type="int" line="420"/>
                <scope line="421"/>
                <scope line="424"/>
                <declaration name="bitnum" type="int" line="427"/>
                <declaration name="element" type="int" line="428"/>
                <declaration name="shift" type="int" line="429"/>
            </method>
            <javadoc line="433">
                Sets the data for a single pixel in the specified
                  &lt;code&gt;DataBuffer&lt;/code&gt; from a primitive array of type
                  TransferType.  For a &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;,
                  only the first element of the array holds valid data,
                  and the type must be the smallest of
                  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
                  that can hold a single pixel.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db1&lt;/code&gt;, whose storage layout is
                  described by &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;
                  &lt;code&gt;mppsm1&lt;/code&gt;, to &lt;code&gt;DataBuffer&lt;/code&gt; &lt;code&gt;db2&lt;/code&gt;,
                  whose storage layout is described by
                  &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; &lt;code&gt;mppsm2&lt;/code&gt;.
                  The transfer is generally more efficient than using
                  &lt;code&gt;getPixel&lt;/code&gt; or &lt;code&gt;setPixel&lt;/code&gt;.
                  &lt;pre&gt;
                  MultiPixelPackedSampleModel mppsm1, mppsm2;
                  DataBufferInt db1, db2;
                  mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                  db1), db2);
                  &lt;/pre&gt;
                  Using &lt;code&gt;getDataElements&lt;/code&gt; or &lt;code&gt;setDataElements&lt;/code&gt; to
                  transfer between two &lt;code&gt;DataBuffer/SampleModel&lt;/code&gt; pairs is
                  legitimate if the &lt;code&gt;SampleModel&lt;/code&gt; objects have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  &lt;code&gt;obj&lt;/code&gt; must be a primitive array of type TransferType.
                  Otherwise, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not large
                  enough to hold the pixel data.                
                <param>
                    x the X coordinate of the pixel location                    
                </param>
                <param>
                    y the Y coordinate of the pixel location                    
                </param>
                <param>
                    obj a primitive array containing pixel data                    
                </param>
                <param>
                    data the <code>DataBuffer</code> containing the image data                    
                </param>
                <see>
                    #getDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setDataElements" type="void" line="473">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="474"/>
                <declaration name="type" type="int" line="477"/>
                <declaration name="bitnum" type="int" line="478"/>
                <declaration name="index" type="int" line="479"/>
                <declaration name="shift" type="int" line="480"/>
                <declaration name="element" type="int" line="481"/>
                <declaration name="barray" type="byte[]" line="485"/>
                <declaration name="sarray" type="short[]" line="490"/>
                <declaration name="iarray" type="int[]" line="495"/>
            </method>
            <javadoc line="501">
                Sets a pixel in the &lt;code&gt;DataBuffer&lt;/code&gt; using an
                  &lt;code&gt;int&lt;/code&gt; array for input.
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  the coordinates are not in bounds.                
                <param>
                    x the X coordinate of the pixel location                    
                </param>
                <param>
                    y the Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray the input pixel in an <code>int</code> array                    
                </param>
                <param>
                    data the <code>DataBuffer</code> containing the image data                    
                </param>
                <see>
                    #getPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixel" type="void" line="512">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int[]"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="513"/>
                <declaration name="bitnum" type="int" line="516"/>
                <declaration name="index" type="int" line="517"/>
                <declaration name="shift" type="int" line="518"/>
                <declaration name="element" type="int" line="519"/>
            </method>
            <method name="equals" type="boolean" line="524">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="525"/>
                <declaration name="that" type="MultiPixelPackedSampleModel" line="528"/>
            </method>
            <method name="hashCode" type="int" line="531">
                <declaration name="hash" type="int" line="532"/>
            </method>
        </class>
    </source>