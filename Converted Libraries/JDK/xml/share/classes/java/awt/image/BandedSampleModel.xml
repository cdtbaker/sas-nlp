<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <class name="BandedSampleModel" line="2">
            <extends class="ComponentSampleModel"/>
            <javadoc line="2">
                This class represents image data which is stored in a band interleaved
                  fashion and for
                  which each sample of a pixel occupies one data element of the DataBuffer.
                  It subclasses ComponentSampleModel but provides a more efficent
                  implementation for accessing band interleaved image data than is provided
                  by ComponentSampleModel.  This class should typically be used when working
                  with images which store sample data for each band in a different bank of the
                  DataBuffer. Accessor methods are provided so that image data can be
                  manipulated directly. Pixel stride is the number of
                  data array elements between two samples for the same band on the same
                  scanline. The pixel stride for a BandedSampleModel is one.
                  Scanline stride is the number of data array elements between
                  a given sample and the corresponding sample in the same column of the next
                  scanline.  Band offsets denote the number
                  of data array elements from the first data array element of the bank
                  of the DataBuffer holding each band to the first sample of the band.
                  The bands are numbered from 0 to N-1.
                  Bank indices denote the correspondence between a bank of the data buffer
                  and a band of image data.  This class supports{@link DataBuffer#TYPE_BYTE TYPE_BYTE},{@link DataBuffer#TYPE_USHORT TYPE_USHORT},{@link DataBuffer#TYPE_SHORT TYPE_SHORT},{@link DataBuffer#TYPE_INT TYPE_INT},{@link DataBuffer#TYPE_FLOAT TYPE_FLOAT}, and{@link DataBuffer#TYPE_DOUBLE TYPE_DOUBLE} datatypes                
            </javadoc>
            <javadoc line="24">
                Constructs a BandedSampleModel with the specified parameters.
                  The pixel stride will be one data element.  The scanline stride
                  will be the same as the width.  Each band will be stored in
                  a separate bank and all band offsets will be zero.                
                <param>
                    dataType  The data type for storing samples.                    
                </param>
                <param>
                    w         The width (in pixels) of the region of
                      image data described.                    
                </param>
                <param>
                    h         The height (in pixels) of the region of image
                      data described.                    
                </param>
                <param>
                    numBands  The number of bands for the image data.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="BandedSampleModel" type="constructor" line="38">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="numBands" type="int"/>
                </params>
            </method>
            <javadoc line="41">
                Constructs a BandedSampleModel with the specified parameters.
                  The number of bands will be inferred from the lengths of the
                  bandOffsets bankIndices arrays, which must be equal.  The pixel
                  stride will be one data element.                
                <param>
                    dataType  The data type for storing samples.                    
                </param>
                <param>
                    w         The width (in pixels) of the region of
                      image data described.                    
                </param>
                <param>
                    h         The height (in pixels) of the region of
                      image data described.                    
                </param>
                <param>
                    scanlineStride The line stride of the of the image data.                    
                </param>
                <param>
                    bankIndices The bank index for each band.                    
                </param>
                <param>
                    bandOffsets The band offset for each band.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="BandedSampleModel" type="constructor" line="57">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bankIndices" type="int"/>
                    <param name="bandOffsets" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Creates a new BandedSampleModel with the specified
                  width and height.  The new BandedSampleModel will have the same
                  number of bands, storage data type, and bank indices
                  as this BandedSampleModel.  The band offsets will be compressed
                  such that the offset between bands will be wpixelStride and
                  the minimum of all of the band offsets is zero.                
                <param>
                    w the width of the resulting &lt;code&gt;BandedSampleModel&lt;/code&gt;                    
                </param>
                <param>
                    h the height of the resulting &lt;code&gt;BandedSampleModel&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;BandedSampleModel&lt;/code&gt; with the specified
                      width and height.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;w&lt;/code&gt; or
                      &lt;code&gt;h&lt;/code&gt; equals either
                      &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; or
                      &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="78">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="bandOffs" type="int[]" line="79"/>
                <scope line="80"/>
                <scope line="83"/>
                <declaration name="sampleModel" type="SampleModel" line="86"/>
            </method>
            <javadoc line="89">
                Creates a new BandedSampleModel with a subset of the bands of this
                  BandedSampleModel.  The new BandedSampleModel can be
                  used with any DataBuffer that the existing BandedSampleModel
                  can be used with.  The new BandedSampleModel/DataBuffer
                  combination will represent an image with a subset of the bands
                  of the original BandedSampleModel/DataBuffer combination.                
                <throws>
                    RasterFormatException if the number of bands is greater than
                      the number of banks in this sample model.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is not
                      one of the supported data types                    
                </throws>
            </javadoc>
            <method name="createSubsetSampleModel" type="SampleModel" line="101">
                <params>
                    <param name="bands" type="int"/>
                </params>
                <declaration name="newBankIndices" type="int" line="103"/>
                <declaration name="newBandOffsets" type="int" line="104"/>
                <scope line="105"/>
            </method>
            <javadoc line="111">
                Creates a DataBuffer that corresponds to this BandedSampleModel,
                  The DataBuffer&apos;s data type, number of banks, and size
                  will be consistent with this BandedSampleModel.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;dataType&lt;/code&gt; is not
                      one of the supported types.                    
                </throws>
            </javadoc>
            <method name="createDataBuffer" type="DataBuffer" line="118">
                <declaration name="dataBuffer" type="DataBuffer" line="119"/>
                <declaration name="size" type="int" line="120"/>
            </method>
            <javadoc line="145">
                Returns data for a single pixel in a primitive array of type
                  TransferType.  For a BandedSampleModel, this will be the same
                  as the data type, and samples will be returned one per array
                  element.  Generally, obj
                  should be passed in as null, so that the Object will be created
                  automatically and will be of the right primitive data type.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by
                  BandedSampleModel &lt;code&gt;bsm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;,
                  whose storage layout is described by
                  BandedSampleModel &lt;code&gt;bsm2&lt;/code&gt;.
                  The transfer will generally be more efficient than using
                  getPixel/setPixel.
                  &lt;pre&gt;
                  BandedSampleModel bsm1, bsm2;
                  DataBufferInt db1, db2;
                  bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                  db2);
                  &lt;/pre&gt;
                  Using getDataElements/setDataElements to transfer between two
                  DataBuffer/SampleModel pairs is legitimate if the SampleModels have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  If obj is non-null, it should be a primitive array of type TransferType.
                  Otherwise, a ClassCastException is thrown.  An
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if obj is non-null and is not large enough to hold
                  the pixel data.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    obj       If non-null, a primitive array in which to return
                      the pixel data.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    the data for the specified pixel.                    
                </return>
                <see>
                    #setDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="184">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="185"/>
                <declaration name="type" type="int" line="188"/>
                <declaration name="numDataElems" type="int" line="189"/>
                <declaration name="pixelOffset" type="int" line="190"/>
                <declaration name="bdata" type="byte[]" line="193"/>
                <scope line="194"/>
                <scope line="197"/>
                <scope line="200"/>
                <declaration name="sdata" type="short[]" line="207"/>
                <scope line="208"/>
                <scope line="211"/>
                <scope line="214"/>
                <declaration name="idata" type="int[]" line="220"/>
                <scope line="221"/>
                <scope line="224"/>
                <scope line="227"/>
                <declaration name="fdata" type="float[]" line="233"/>
                <scope line="234"/>
                <scope line="237"/>
                <scope line="240"/>
                <declaration name="ddata" type="double[]" line="246"/>
                <scope line="247"/>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="261">
                Returns all samples for the specified pixel in an int array.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the samples for the specified pixel.                    
                </return>
                <see>
                    #setPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixel" type="int[]" line="272">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="273"/>
                <declaration name="pixels" type="int[]" line="276"/>
                <scope line="277"/>
                <scope line="280"/>
                <declaration name="pixelOffset" type="int" line="283"/>
                <scope line="284"/>
            </method>
            <javadoc line="289">
                Returns all samples for the specified rectangle of pixels in
                  an int array, one sample per data array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the samples for the pixels within the specified region.                    
                </return>
                <see>
                    #setPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixels" type="int[]" line="303">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="304"/>
                <declaration name="y1" type="int" line="305"/>
                <scope line="306"/>
                <declaration name="pixels" type="int[]" line="309"/>
                <scope line="310"/>
                <scope line="313"/>
                <scope line="316">
                    <declaration name="lineOffset" type="int" line="317"/>
                    <declaration name="srcOffset" type="int" line="318"/>
                    <declaration name="bank" type="int" line="319"/>
                    <scope line="320">
                        <declaration name="pixelOffset" type="int" line="321"/>
                        <scope line="322"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="331">
                Returns as int the sample in a specified band for the pixel
                  located at (x,y).
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the sample in the specified band for the specified pixel.                    
                </return>
                <see>
                    #setSample(int,int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSample" type="int" line="343">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="344"/>
                <declaration name="sample" type="int" line="347"/>
            </method>
            <javadoc line="350">
                Returns the sample in a specified band
                  for the pixel located at (x,y) as a float.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    a float value that represents the sample in the specified
                      band for the specified pixel.                    
                </return>
            </javadoc>
            <method name="getSampleFloat" type="float" line="362">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="363"/>
                <declaration name="sample" type="float" line="366"/>
            </method>
            <javadoc line="369">
                Returns the sample in a specified band
                  for a pixel located at (x,y) as a double.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    a double value that represents the sample in the specified
                      band for the specified pixel.                    
                </return>
            </javadoc>
            <method name="getSampleDouble" type="double" line="381">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="382"/>
                <declaration name="sample" type="double" line="385"/>
            </method>
            <javadoc line="388">
                Returns the samples in a specified band for the specified rectangle
                  of pixels in an int array, one sample per data array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    b         The band to return                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <return>
                    the samples in the specified band for the pixels within
                      the specified region.                    
                </return>
                <see>
                    #setSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSamples" type="int[]" line="404">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="405"/>
                <declaration name="samples" type="int" line="408"/>
                <scope line="409"/>
                <scope line="412"/>
                <declaration name="lineOffset" type="int" line="415"/>
                <declaration name="srcOffset" type="int" line="416"/>
                <declaration name="bank" type="int" line="417"/>
                <scope line="418">
                    <declaration name="sampleOffset" type="int" line="419"/>
                    <scope line="420"/>
                </scope>
            </method>
            <javadoc line="427">
                Sets the data for a single pixel in the specified DataBuffer from a
                  primitive array of type TransferType.  For a BandedSampleModel,
                  this will be the same as the data type, and samples are transferred
                  one per array element.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by
                  BandedSampleModel &lt;code&gt;bsm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;,
                  whose storage layout is described by
                  BandedSampleModel &lt;code&gt;bsm2&lt;/code&gt;.
                  The transfer will generally be more efficient than using
                  getPixel/setPixel.
                  &lt;pre&gt;
                  BandedSampleModel bsm1, bsm2;
                  DataBufferInt db1, db2;
                  bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                  db2);
                  &lt;/pre&gt;
                  Using getDataElements/setDataElements to transfer between two
                  DataBuffer/SampleModel pairs is legitimate if the SampleModels have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  obj must be a primitive array of type TransferType.  Otherwise,
                  a ClassCastException is thrown.  An
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if obj is not large enough to hold the pixel data.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    obj       If non-null, returns the primitive array in this
                      object                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setDataElements" type="void" line="462">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="463"/>
                <declaration name="type" type="int" line="466"/>
                <declaration name="numDataElems" type="int" line="467"/>
                <declaration name="pixelOffset" type="int" line="468"/>
                <declaration name="barray" type="byte[]" line="471"/>
                <scope line="472"/>
                <declaration name="sarray" type="short[]" line="478"/>
                <scope line="479"/>
                <declaration name="iarray" type="int[]" line="484"/>
                <scope line="485"/>
                <declaration name="farray" type="float[]" line="490"/>
                <scope line="491"/>
                <declaration name="darray" type="double[]" line="496"/>
                <scope line="497"/>
            </method>
            <javadoc line="503">
                Sets a pixel in the DataBuffer using an int array of samples for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray    The input samples in an int array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixel" type="void" line="513">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="514"/>
                <declaration name="pixelOffset" type="int" line="517"/>
                <scope line="518"/>
            </method>
            <javadoc line="522">
                Sets all samples for a rectangle of pixels from an int array containing
                  one sample per array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    iArray    The input samples in an int array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="535">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="536"/>
                <declaration name="y1" type="int" line="537"/>
                <scope line="538"/>
                <scope line="541">
                    <declaration name="lineOffset" type="int" line="542"/>
                    <declaration name="srcOffset" type="int" line="543"/>
                    <declaration name="bank" type="int" line="544"/>
                    <scope line="545">
                        <declaration name="pixelOffset" type="int" line="546"/>
                        <scope line="547"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="555">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using an int for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    s         The input sample as an int                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="567">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="568"/>
            </method>
            <javadoc line="573">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using a float for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    s         The input sample as a float                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="585">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="float"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="586"/>
            </method>
            <javadoc line="591">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using a double for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    s         The input sample as a double                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="603">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="double"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="604"/>
            </method>
            <javadoc line="609">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from an int array containing one sample per data array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location                    
                </param>
                <param>
                    w         The width of the pixel rectangle                    
                </param>
                <param>
                    h         The height of the pixel rectangle                    
                </param>
                <param>
                    b         The band to set                    
                </param>
                <param>
                    iArray    The input sample array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data                    
                </param>
                <see>
                    #getSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSamples" type="void" line="623">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="624"/>
                <declaration name="lineOffset" type="int" line="627"/>
                <declaration name="srcOffset" type="int" line="628"/>
                <declaration name="bank" type="int" line="629"/>
                <scope line="630">
                    <declaration name="sampleOffset" type="int" line="631"/>
                    <scope line="632"/>
                </scope>
            </method>
            <method name="createOffsetArray" type="int[]" line="638">
                <params>
                    <param name="numBands" type="int"/>
                </params>
                <declaration name="bandOffsets" type="int[]" line="639"/>
                <scope line="640"/>
            </method>
            <method name="createIndicesArray" type="int[]" line="645">
                <params>
                    <param name="numBands" type="int"/>
                </params>
                <declaration name="bankIndices" type="int[]" line="646"/>
                <scope line="647"/>
            </method>
            <method name="hashCode" type="int" line="652"/>
        </class>
    </source>