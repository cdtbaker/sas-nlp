<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="sun.awt.image.ImagingLib"/>
        <import package="java.util.Arrays"/>
        <class name="BandCombineOp" line="10">
            <implements interface="RasterOp"/>
            <javadoc line="10">
                This class performs an arbitrary linear combination of the bands
                  in a &lt;CODE&gt;Raster&lt;/CODE&gt;, using a specified matrix.
                  &lt;p&gt;
                  The width of the matrix must be equal to the number of bands in the
                  source &lt;CODE&gt;Raster&lt;/CODE&gt;, optionally plus one.  If there is one more
                  column in the matrix than the number of bands, there is an implied 1 at the
                  end of the vector of band samples representing a pixel.  The height
                  of the matrix must be equal to the number of bands in the destination.
                  &lt;p&gt;
                  For example, a 3-banded &lt;CODE&gt;Raster&lt;/CODE&gt; might have the following
                  transformation applied to each pixel in order to invert the second band of
                  the &lt;CODE&gt;Raster&lt;/CODE&gt;.
                  &lt;pre&gt;
                  [ 1.0   0.0   0.0    0.0  ]     [ b1 ]
                  [ 0.0  -1.0   0.0  255.0  ]  x  [ b2 ]
                  [ 0.0   0.0   1.0    0.0  ]     [ b3 ]
                  [ 1 ]
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Note that the source and destination can be the same object.                
            </javadoc>
            <declaration name="matrix" type="float[][]" line="33"/>
            <declaration name="nrows" type="int" line="34"/>
            <declaration name="ncols" type="int" line="35"/>
            <declaration name="hints" type="RenderingHints" line="36"/>
            <javadoc line="37">
                Constructs a &lt;CODE&gt;BandCombineOp&lt;/CODE&gt; with the specified matrix.
                  The width of the matrix must be equal to the number of bands in
                  the source &lt;CODE&gt;Raster&lt;/CODE&gt;, optionally plus one.  If there is one
                  more column in the matrix than the number of bands, there is an implied
                  1 at the end of the vector of band samples representing a pixel.  The
                  height of the matrix must be equal to the number of bands in the
                  destination.
                  &lt;p&gt;
                  The first subscript is the row index and the second
                  is the column index.  This operation uses none of the currently
                  defined rendering hints; the &lt;CODE&gt;RenderingHints&lt;/CODE&gt; argument can be
                  null.                
                <param>
                    matrix The matrix to use for the band combine operation.                    
                </param>
                <param>
                    hints The <CODE>RenderingHints</CODE> object for this operation.
                      Not currently used so it can be null.                    
                </param>
            </javadoc>
            <method name="BandCombineOp" type="constructor" line="54">
                <params>
                    <param name="matrix" type="float[][]"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="58">
                    <scope line="59"/>
                </scope>
            </method>
            <javadoc line="66">
                Returns a copy of the linear combination matrix.                
                <return>
                    The matrix associated with this band combine operation.                    
                </return>
            </javadoc>
            <method name="getMatrix" type="float[][]" line="70">
                <declaration name="ret" type="float[][]" line="71"/>
                <scope line="72"/>
            </method>
            <javadoc line="77">
                Transforms the &lt;CODE&gt;Raster&lt;/CODE&gt; using the matrix specified in the
                  constructor. An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if
                  the number of bands in the source or destination is incompatible with
                  the matrix.  See the class comments for more details.
                  &lt;p&gt;
                  If the destination is null, it will be created with a number of bands
                  equalling the number of rows in the matrix. No exception is thrown
                  if the operation causes a data overflow.                
                <param>
                    src The <CODE>Raster</CODE> to be filtered.                    
                </param>
                <param>
                    dst The <CODE>Raster</CODE> in which to store the results
                      of the filter operation.                    
                </param>
                <return>
                    The filtered <CODE>Raster</CODE>.                    
                </return>
                <throws>
                    IllegalArgumentException If the number of bands in the
                      source or destination is incompatible with the matrix.                    
                </throws>
            </javadoc>
            <method name="filter" type="WritableRaster" line="93">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <declaration name="nBands" type="int" line="94"/>
                <scope line="95"/>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="104"/>
                <declaration name="pixel" type="int[]" line="107"/>
                <declaration name="dstPixel" type="int[]" line="108"/>
                <declaration name="accum" type="float" line="109"/>
                <declaration name="sminX" type="int" line="110"/>
                <declaration name="sY" type="int" line="111"/>
                <declaration name="dminX" type="int" line="112"/>
                <declaration name="dY" type="int" line="113"/>
                <declaration name="sX" type="int" line="114"/>
                <declaration name="dX" type="int" line="115"/>
                <scope line="116">
                    <scope line="117">
                        <scope line="120">
                            <scope line="122">
                                <scope line="124"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="133">
                    <scope line="134">
                        <scope line="137">
                            <scope line="139">
                                <scope line="141"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Returns the bounding box of the transformed destination.  Since
                  this is not a geometric operation, the bounding box is the same for
                  the source and destination.
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the number of
                  bands in the source is incompatible with the matrix.  See
                  the class comments for more details.                
                <param>
                    src The <CODE>Raster</CODE> to be filtered.                    
                </param>
                <return>
                    The <CODE>Rectangle2D</CODE> representing the destination
                      image's bounding box.                    
                </return>
                <throws>
                    IllegalArgumentException If the number of bands in the source
                      is incompatible with the matrix.                    
                </throws>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="165">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="168">
                Creates a zeroed destination &lt;CODE&gt;Raster&lt;/CODE&gt; with the correct size
                  and number of bands.
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the number of
                  bands in the source is incompatible with the matrix.  See
                  the class comments for more details.                
                <param>
                    src The <CODE>Raster</CODE> to be filtered.                    
                </param>
                <return>
                    The zeroed destination <CODE>Raster</CODE>.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="177">
                <params>
                    <param name="src" type="Raster"/>
                </params>
                <declaration name="nBands" type="int" line="178"/>
                <scope line="179"/>
                <scope line="182"/>
                <scope line="185"/>
            </method>
            <javadoc line="189">
                Returns the location of the corresponding destination point given a
                  point in the source &lt;CODE&gt;Raster&lt;/CODE&gt;.  If &lt;CODE&gt;dstPt&lt;/CODE&gt; is
                  specified, it is used to hold the return value.
                  Since this is not a geometric operation, the point returned
                  is the same as the specified &lt;CODE&gt;srcPt&lt;/CODE&gt;.                
                <param>
                    srcPt The <code>Point2D</code> that represents the point in
                      the source <code>Raster</code>                    
                </param>
                <param>
                    dstPt The <CODE>Point2D</CODE> in which to store the result.                    
                </param>
                <return>
                    The <CODE>Point2D</CODE> in the destination image that
                      corresponds to the specified point in the source image.                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="201">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
                <scope line="202"/>
            </method>
            <javadoc line="208">
                Returns the rendering hints for this operation.                
                <return>
                    The <CODE>RenderingHints</CODE> object associated with this
                      operation.  Returns null if no hints have been set.                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="213"/>
        </class>
    </source>