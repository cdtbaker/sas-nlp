<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image.renderable">
        <import package="java.util"/>
        <import package="java.awt.geom"/>
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <class name="RenderContext" line="42">
            <comment line="73">
                Various constructors that allow different levels of
                 specificity. If the Shape is missing the whole renderable area
                 is assumed. If hints is missing no hints are assumed.                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="42">
                A RenderContext encapsulates the information needed to produce a
                  specific rendering from a RenderableImage.  It contains the area to
                  be rendered specified in rendering-independent terms, the
                  resolution at which the rendering is to be performed, and hints
                  used to control the rendering process.
                  &lt;p&gt; Users create RenderContexts and pass them to the
                  RenderableImage via the createRendering method.  Most of the methods of
                  RenderContexts are not meant to be used directly by applications,
                  but by the RenderableImage and operator classes to which it is
                  passed.
                  &lt;p&gt; The AffineTransform parameter passed into and out of this class
                  are cloned.  The RenderingHints and Shape parameters are not
                  necessarily cloneable and are therefore only reference copied.
                  Altering RenderingHints or Shape instances that are in use by
                  instances of RenderContext may have undesired side effects.                
            </javadoc>
            <declaration name="hints" type="RenderingHints" line="63"/>
            <javadoc line="63">
                Table of hints. May be null.                
            </javadoc>
            <declaration name="usr2dev" type="AffineTransform" line="66"/>
            <javadoc line="66">
                Transform to convert user coordinates to device coordinates.                
            </javadoc>
            <declaration name="aoi" type="Shape" line="69"/>
            <javadoc line="69">
                The area of interest.  May be null.                
            </javadoc>
            <javadoc line="76">
                Constructs a RenderContext with a given transform.
                  The area of interest is supplied as a Shape,
                  and the rendering hints are supplied as a RenderingHints object.                
                <param>
                    usr2dev an AffineTransform.                    
                </param>
                <param>
                    aoi a Shape representing the area of interest.                    
                </param>
                <param>
                    hints a RenderingHints object containing rendering hints.                    
                </param>
            </javadoc>
            <method name="RenderContext" type="constructor" line="87">
                <params>
                    <param name="usr2dev" type="AffineTransform"/>
                    <param name="aoi" type="Shape"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="93">
                Constructs a RenderContext with a given transform.
                  The area of interest is taken to be the entire renderable area.
                  No rendering hints are used.                
                <param>
                    usr2dev an AffineTransform.                    
                </param>
            </javadoc>
            <method name="RenderContext" type="constructor" line="100">
                <params>
                    <param name="usr2dev" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="104">
                Constructs a RenderContext with a given transform and rendering hints.
                  The area of interest is taken to be the entire renderable area.                
                <param>
                    usr2dev an AffineTransform.                    
                </param>
                <param>
                    hints a RenderingHints object containing rendering hints.                    
                </param>
            </javadoc>
            <method name="RenderContext" type="constructor" line="111">
                <params>
                    <param name="usr2dev" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="115">
                Constructs a RenderContext with a given transform and area of interest.
                  The area of interest is supplied as a Shape.
                  No rendering hints are used.                
                <param>
                    usr2dev an AffineTransform.                    
                </param>
                <param>
                    aoi a Shape representing the area of interest.                    
                </param>
            </javadoc>
            <method name="RenderContext" type="constructor" line="123">
                <params>
                    <param name="usr2dev" type="AffineTransform"/>
                    <param name="aoi" type="Shape"/>
                </params>
            </method>
            <javadoc line="127">
                Gets the rendering hints of this &lt;code&gt;RenderContext&lt;/code&gt;.                
                <return>
                    a <code>RenderingHints</code> object that represents
                      the rendering hints of this <code>RenderContext</code>.                    
                </return>
                <see>
                    #setRenderingHints(RenderingHints)                    
                </see>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="133"/>
            <javadoc line="137">
                Sets the rendering hints of this &lt;code&gt;RenderContext&lt;/code&gt;.                
                <param>
                    hints a <code>RenderingHints</code> object that represents
                      the rendering hints to assign to this <code>RenderContext</code>.                    
                </param>
                <see>
                    #getRenderingHints                    
                </see>
            </javadoc>
            <method name="setRenderingHints" type="void" line="143">
                <params>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="147">
                Sets the current user-to-device AffineTransform contained
                  in the RenderContext to a given transform.                
                <param>
                    newTransform the new AffineTransform.                    
                </param>
                <see>
                    #getTransform                    
                </see>
            </javadoc>
            <method name="setTransform" type="void" line="154">
                <params>
                    <param name="newTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="158">
                Modifies the current user-to-device transform by prepending another
                  transform.  In matrix notation the operation is:
                  &lt;pre&gt;
                  [this] = [modTransform] x [this]
                  &lt;/pre&gt;                
                <param>
                    modTransform the AffineTransform to prepend to the
                      current usr2dev transform.                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="preConcatenateTransform" type="void" line="169">
                <params>
                    <param name="modTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="173">
                Modifies the current user-to-device transform by prepending another
                  transform.  In matrix notation the operation is:
                  &lt;pre&gt;
                  [this] = [modTransform] x [this]
                  &lt;/pre&gt;
                  This method does the same thing as the preConcatenateTransform
                  method.  It is here for backward compatibility with previous releases
                  which misspelled the method name.                
                <param>
                    modTransform the AffineTransform to prepend to the
                      current usr2dev transform.                    
                </param>
                <deprecated>
                    replaced by
                      <code>preConcatenateTransform(AffineTransform)</code>.                    
                </deprecated>
            </javadoc>
            <method name="preConcetenateTransform" type="void" line="189">
                <params>
                    <param name="modTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="193">
                Modifies the current user-to-device transform by appending another
                  transform.  In matrix notation the operation is:
                  &lt;pre&gt;
                  [this] = [this] x [modTransform]
                  &lt;/pre&gt;                
                <param>
                    modTransform the AffineTransform to append to the
                      current usr2dev transform.                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="concatenateTransform" type="void" line="204">
                <params>
                    <param name="modTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="208">
                Modifies the current user-to-device transform by appending another
                  transform.  In matrix notation the operation is:
                  &lt;pre&gt;
                  [this] = [this] x [modTransform]
                  &lt;/pre&gt;
                  This method does the same thing as the concatenateTransform
                  method.  It is here for backward compatibility with previous releases
                  which misspelled the method name.                
                <param>
                    modTransform the AffineTransform to append to the
                      current usr2dev transform.                    
                </param>
                <deprecated>
                    replaced by
                      <code>concatenateTransform(AffineTransform)</code>.                    
                </deprecated>
            </javadoc>
            <method name="concetenateTransform" type="void" line="224">
                <params>
                    <param name="modTransform" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="228">
                Gets the current user-to-device AffineTransform.                
                <return>
                    a reference to the current AffineTransform.                    
                </return>
                <see>
                    #setTransform(AffineTransform)                    
                </see>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="234"/>
            <javadoc line="238">
                Sets the current area of interest.  The old area is discarded.                
                <param>
                    newAoi The new area of interest.                    
                </param>
                <see>
                    #getAreaOfInterest                    
                </see>
            </javadoc>
            <method name="setAreaOfInterest" type="void" line="244">
                <params>
                    <param name="newAoi" type="Shape"/>
                </params>
            </method>
            <javadoc line="248">
                Gets the ares of interest currently contained in the
                  RenderContext.                
                <return>
                    a reference to the area of interest of the RenderContext,
                      or null if none is specified.                    
                </return>
                <see>
                    #setAreaOfInterest(Shape)                    
                </see>
            </javadoc>
            <method name="getAreaOfInterest" type="Shape" line="256"/>
            <javadoc line="260">
                Makes a copy of a RenderContext. The area of interest is copied
                  by reference.  The usr2dev AffineTransform and hints are cloned,
                  while the area of interest is copied by reference.                
                <return>
                    the new cloned RenderContext.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="267">
                <declaration name="newRenderContext" type="RenderContext" line="268"/>
            </method>
        </class>
    </source>