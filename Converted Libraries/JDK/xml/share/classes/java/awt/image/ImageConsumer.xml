<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Hashtable"/>
        <interface name="ImageConsumer">
            <javadoc line="3">
                The interface for objects expressing interest in image data through
                  the ImageProducer interfaces.  When a consumer is added to an image
                  producer, the producer delivers all of the data about the image
                  using the method calls defined in this interface.                
                <see>
                    ImageProducer                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <method name="setDimensions" type="void" line="12"/>
            <javadoc line="12">
                The dimensions of the source image are reported using the
                  setDimensions method call.                
                <param>
                    width the width of the source image                    
                </param>
                <param>
                    height the height of the source image                    
                </param>
            </javadoc>
            <method name="setProperties" type="void" line="19"/>
            <javadoc line="19">
                Sets the extensible list of properties associated with this image.                
                <param>
                    props the list of properties to be associated with this
                      image                    
                </param>
            </javadoc>
            <method name="setColorModel" type="void" line="25"/>
            <javadoc line="25">
                Sets the ColorModel object used for the majority of
                  the pixels reported using the setPixels method
                  calls.  Note that each set of pixels delivered using setPixels
                  contains its own ColorModel object, so no assumption should
                  be made that this model will be the only one used in delivering
                  pixel values.  A notable case where multiple ColorModel objects
                  may be seen is a filtered image when for each set of pixels
                  that it filters, the filter
                  determines  whether the
                  pixels can be sent on untouched, using the original ColorModel,
                  or whether the pixels should be modified (filtered) and passed
                  on using a ColorModel more convenient for the filtering process.                
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <see>
                    ColorModel                    
                </see>
            </javadoc>
            <method name="setHints" type="void" line="42"/>
            <javadoc line="42">
                Sets the hints that the ImageConsumer uses to process the
                  pixels delivered by the ImageProducer.
                  The ImageProducer can deliver the pixels in any order, but
                  the ImageConsumer may be able to scale or convert the pixels
                  to the destination ColorModel more efficiently or with higher
                  quality if it knows some information about how the pixels will
                  be delivered up front.  The setHints method should be called
                  before any calls to any of the setPixels methods with a bit mask
                  of hints about the manner in which the pixels will be delivered.
                  If the ImageProducer does not follow the guidelines for the
                  indicated hint, the results are undefined.                
                <param>
                    hintflags a set of hints that the ImageConsumer uses to
                      process the pixels                    
                </param>
            </javadoc>
            <declaration name="RANDOMPIXELORDER" type="int" line="58"/>
            <javadoc line="58">
                The pixels will be delivered in a random order.  This tells the
                  ImageConsumer not to use any optimizations that depend on the
                  order of pixel delivery, which should be the default assumption
                  in the absence of any call to the setHints method.                
                <see>
                    #setHints                    
                </see>
            </javadoc>
            <declaration name="TOPDOWNLEFTRIGHT" type="int" line="66"/>
            <javadoc line="66">
                The pixels will be delivered in top-down, left-to-right order.                
                <see>
                    #setHints                    
                </see>
            </javadoc>
            <declaration name="COMPLETESCANLINES" type="int" line="71"/>
            <javadoc line="71">
                The pixels will be delivered in (multiples of) complete scanlines
                  at a time.                
                <see>
                    #setHints                    
                </see>
            </javadoc>
            <declaration name="SINGLEPASS" type="int" line="77"/>
            <javadoc line="77">
                The pixels will be delivered in a single pass.  Each pixel will
                  appear in only one call to any of the setPixels methods.  An
                  example of an image format which does not meet this criterion
                  is a progressive JPEG image which defines pixels in multiple
                  passes, each more refined than the previous.                
                <see>
                    #setHints                    
                </see>
            </javadoc>
            <declaration name="SINGLEFRAME" type="int" line="86"/>
            <javadoc line="86">
                The image contain a single static image.  The pixels will be defined
                  in calls to the setPixels methods and then the imageComplete method
                  will be called with the STATICIMAGEDONE flag after which no more
                  image data will be delivered.  An example of an image type which
                  would not meet these criteria would be the output of a video feed,
                  or the representation of a 3D rendering being manipulated
                  by the user.  The end of each frame in those types of images will
                  be indicated by calling imageComplete with the SINGLEFRAMEDONE flag.                
                <see>
                    #setHints                    
                </see>
                <see>
                    #imageComplete                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="99"/>
            <javadoc line="99">
                Delivers the pixels of the image with one or more calls
                  to this method.  Each call specifies the location and
                  size of the rectangle of source pixels that are contained in
                  the array of pixels.  The specified ColorModel object should
                  be used to convert the pixels into their corresponding color
                  and alpha components.  Pixel (m,n) is stored in the pixels array
                  at index (n  scansize + m + off).  The pixels delivered using
                  this method are all stored as bytes.                
                <param>
                    x the X coordinate of the upper-left corner of the
                      area of pixels to be set                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the
                      area of pixels to be set                    
                </param>
                <param>
                    w the width of the area of pixels                    
                </param>
                <param>
                    h the height of the area of pixels                    
                </param>
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pixels the array of pixels                    
                </param>
                <param>
                    off the offset into the &lt;code&gt;pixels&lt;/code&gt; array                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the &lt;code&gt;pixels&lt;/code&gt; array                    
                </param>
                <see>
                    ColorModel                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="122"/>
            <javadoc line="122">
                The pixels of the image are delivered using one or more calls
                  to the setPixels method.  Each call specifies the location and
                  size of the rectangle of source pixels that are contained in
                  the array of pixels.  The specified ColorModel object should
                  be used to convert the pixels into their corresponding color
                  and alpha components.  Pixel (m,n) is stored in the pixels array
                  at index (n  scansize + m + off).  The pixels delivered using
                  this method are all stored as ints.
                  this method are all stored as ints.                
                <param>
                    x the X coordinate of the upper-left corner of the
                      area of pixels to be set                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the
                      area of pixels to be set                    
                </param>
                <param>
                    w the width of the area of pixels                    
                </param>
                <param>
                    h the height of the area of pixels                    
                </param>
                <param>
                    model the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pixels the array of pixels                    
                </param>
                <param>
                    off the offset into the &lt;code&gt;pixels&lt;/code&gt; array                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the &lt;code&gt;pixels&lt;/code&gt; array                    
                </param>
                <see>
                    ColorModel                    
                </see>
            </javadoc>
            <method name="imageComplete" type="void" line="146"/>
            <javadoc line="146">
                The imageComplete method is called when the ImageProducer is
                  finished delivering all of the pixels that the source image
                  contains, or when a single frame of a multi-frame animation has
                  been completed, or when an error in loading or producing the
                  image has occured.  The ImageConsumer should remove itself from the
                  list of consumers registered with the ImageProducer at this time,
                  unless it is interested in successive frames.                
                <param>
                    status the status of image loading                    
                </param>
                <see>
                    ImageProducer#removeConsumer                    
                </see>
            </javadoc>
            <declaration name="IMAGEERROR" type="int" line="158"/>
            <javadoc line="158">
                An error was encountered while producing the image.                
                <see>
                    #imageComplete                    
                </see>
            </javadoc>
            <declaration name="SINGLEFRAMEDONE" type="int" line="163"/>
            <javadoc line="163">
                One frame of the image is complete but there are more frames
                  to be delivered.                
                <see>
                    #imageComplete                    
                </see>
            </javadoc>
            <declaration name="STATICIMAGEDONE" type="int" line="169"/>
            <javadoc line="169">
                The image is complete and there are no more pixels or frames
                  to be delivered.                
                <see>
                    #imageComplete                    
                </see>
            </javadoc>
            <declaration name="IMAGEABORTED" type="int" line="175"/>
            <javadoc line="175">
                The image creation process was deliberately aborted.                
                <see>
                    #imageComplete                    
                </see>
            </javadoc>
        </interface>
    </source>