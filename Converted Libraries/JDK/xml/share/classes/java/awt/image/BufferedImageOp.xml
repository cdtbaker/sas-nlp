<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.RenderingHints"/>
        <interface name="BufferedImageOp">
            <javadoc line="5">
                This interface describes single-input/single-output
                  operations performed on &lt;CODE&gt;BufferedImage&lt;/CODE&gt; objects.
                  It is implemented by &lt;CODE&gt;AffineTransformOp&lt;/CODE&gt;,
                  &lt;CODE&gt;ConvolveOp&lt;/CODE&gt;, &lt;CODE&gt;ColorConvertOp&lt;/CODE&gt;, &lt;CODE&gt;RescaleOp&lt;/CODE&gt;,
                  and &lt;CODE&gt;LookupOp&lt;/CODE&gt;.  These objects can be passed into
                  a &lt;CODE&gt;BufferedImageFilter&lt;/CODE&gt; to operate on a
                  &lt;CODE&gt;BufferedImage&lt;/CODE&gt; in the
                  ImageProducer-ImageFilter-ImageConsumer paradigm.
                  &lt;p&gt;
                  Classes that implement this
                  interface must specify whether or not they allow in-place filtering--
                  filter operations where the source object is equal to the destination
                  object.
                  &lt;p&gt;
                  This interface cannot be used to describe more sophisticated operations
                  such as those that take multiple sources. Note that this restriction also
                  means that the values of the destination pixels prior to the operation are
                  not used as input to the filter operation.                
                <see>
                    BufferedImage                    
                </see>
                <see>
                    BufferedImageFilter                    
                </see>
                <see>
                    AffineTransformOp                    
                </see>
                <see>
                    BandCombineOp                    
                </see>
                <see>
                    ColorConvertOp                    
                </see>
                <see>
                    ConvolveOp                    
                </see>
                <see>
                    LookupOp                    
                </see>
                <see>
                    RescaleOp                    
                </see>
            </javadoc>
            <method name="filter" type="BufferedImage" line="34"/>
            <javadoc line="34">
                Performs a single-input/single-output operation on a
                  &lt;CODE&gt;BufferedImage&lt;/CODE&gt;.
                  If the color models for the two images do not match, a color
                  conversion into the destination color model is performed.
                  If the destination image is null,
                  a &lt;CODE&gt;BufferedImage&lt;/CODE&gt; with an appropriate &lt;CODE&gt;ColorModel&lt;/CODE&gt;
                  is created.
                  &lt;p&gt;
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the source
                  and/or destination image is incompatible with the types of images       $
                  allowed by the class implementing this filter.                
                <param>
                    src The <CODE>BufferedImage</CODE> to be filtered                    
                </param>
                <param>
                    dest The <CODE>BufferedImage</CODE> in which to store the results$                    
                </param>
                <return>
                    The filtered <CODE>BufferedImage</CODE>.                    
                </return>
                <throws>
                    IllegalArgumentException If the source and/or destination
                      image is not compatible with the types of images allowed by the class
                      implementing this filter.                    
                </throws>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="54"/>
            <javadoc line="54">
                Returns the bounding box of the filtered destination image.
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the source
                  image is incompatible with the types of images allowed
                  by the class implementing this filter.                
                <param>
                    src The <CODE>BufferedImage</CODE> to be filtered                    
                </param>
                <return>
                    The <CODE>Rectangle2D</CODE> representing the destination
                      image's bounding box.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="64"/>
            <javadoc line="64">
                Creates a zeroed destination image with the correct size and number of
                  bands.
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the source
                  image is incompatible with the types of images allowed
                  by the class implementing this filter.                
                <param>
                    src The <CODE>BufferedImage</CODE> to be filtered                    
                </param>
                <param>
                    destCM <CODE>ColorModel</CODE> of the destination.  If null,
                      the <CODE>ColorModel</CODE> of the source is used.                    
                </param>
                <return>
                    The zeroed destination image.                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="76"/>
            <javadoc line="76">
                Returns the location of the corresponding destination point given a
                  point in the source image.  If &lt;CODE&gt;dstPt&lt;/CODE&gt; is specified, it
                  is used to hold the return value.                
                <param>
                    srcPt the <code>Point2D</code> that represents the point in
                      the source image                    
                </param>
                <param>
                    dstPt The <CODE>Point2D</CODE> in which to store the result                    
                </param>
                <return>
                    The <CODE>Point2D</CODE> in the destination image that
                      corresponds to the specified point in the source image.                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="87"/>
            <javadoc line="87">
                Returns the rendering hints for this operation.                
                <return>
                    The <CODE>RenderingHints</CODE> object for this
                      <CODE>BufferedImageOp</CODE>.  Returns
                      null if no hints have been set.                    
                </return>
            </javadoc>
        </interface>
    </source>