<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="sun.java2d.StateTrackable.State"/>
        <class name="DataBufferUShort" line="3">
            <extends class="DataBuffer"/>
            <javadoc line="3">
                This class extends &lt;CODE&gt;DataBuffer&lt;/CODE&gt; and stores data internally as
                  shorts.  Values stored in the short array(s) of this &lt;CODE&gt;DataBuffer&lt;/CODE&gt;
                  are treated as unsigned values.
                  &lt;p&gt;
                  &lt;a name=&quot;optimizations&quot;&gt;
                  Note that some implementations may function more efficiently
                  if they can maintain control over how the data for an image is
                  stored.
                  For example, optimizations such as caching an image in video
                  memory require that the implementation track all modifications
                  to that data.
                  Other implementations may operate better if they can store the
                  data in locations other than a Java array.
                  To maintain optimum compatibility with various optimizations
                  it is best to avoid constructors and methods which expose the
                  underlying storage as a Java array as noted below in the
                  documentation for those methods.
                  &lt;/a&gt;                
            </javadoc>
            <declaration name="data" type="short" line="24"/>
            <javadoc line="24">
                The default data bank.                
            </javadoc>
            <declaration name="bankdata" type="short" line="28"/>
            <javadoc line="28">
                All data banks                
            </javadoc>
            <javadoc line="32">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with a single bank and the
                  specified size.                
                <param>
                    size The size of the <CODE>DataBuffer</CODE>.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="37">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with the specified number of
                  banks, all of which are the specified size.                
                <param>
                    size The size of the banks in the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    numBanks The number of banks in the a<CODE>DataBuffer</CODE>.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="49">
                <params>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                </params>
                <scope line="52"/>
            </method>
            <javadoc line="57">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with a single bank
                  using the specified array.
                  Only the first &lt;CODE&gt;size&lt;/CODE&gt; elements should be used by accessors of
                  this &lt;CODE&gt;DataBuffer&lt;/CODE&gt;.  &lt;CODE&gt;dataArray&lt;/CODE&gt; must be large enough to
                  hold &lt;CODE&gt;size&lt;/CODE&gt; elements.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray The unsigned-short array for the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    size The size of the <CODE>DataBuffer</CODE> bank.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="71">
                <params>
                    <param name="dataArray" type="short"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="73"/>
            </method>
            <javadoc line="80">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with a single bank
                  using the specified array, size, and offset.  &lt;CODE&gt;dataArray&lt;/CODE&gt; must have at
                  least &lt;CODE&gt;offset&lt;/CODE&gt; + &lt;CODE&gt;size&lt;/CODE&gt; elements.  Only elements
                  &lt;CODE&gt;offset&lt;/CODE&gt; through &lt;CODE&gt;offset&lt;/CODE&gt; + &lt;CODE&gt;size&lt;/CODE&gt; - 1 should
                  be used by accessors of this &lt;CODE&gt;DataBuffer&lt;/CODE&gt;.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray The unsigned-short array for the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    size The size of the <CODE>DataBuffer</CODE> bank.                    
                </param>
                <param>
                    offset The offset into the <CODE>dataArray</CODE>.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="95">
                <params>
                    <param name="dataArray" type="short"/>
                    <param name="size" type="int"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="97"/>
                <scope line="100"/>
            </method>
            <javadoc line="107">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with the specified arrays.
                  The number of banks will be equal to &lt;CODE&gt;dataArray.length&lt;/CODE&gt;.
                  Only the first &lt;CODE&gt;size&lt;/CODE&gt; elements of each array should be used by
                  accessors of this &lt;CODE&gt;DataBuffer&lt;/CODE&gt;.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray The unsigned-short arrays for the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    size The size of the banks in the <CODE>DataBuffer</CODE>.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="120">
                <params>
                    <param name="dataArray" type="short"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="122"/>
                <scope line="125">
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="133">
                Constructs an unsigned-short based &lt;CODE&gt;DataBuffer&lt;/CODE&gt; with specified arrays,
                  size, and offsets.
                  The number of banks is equal to &lt;CODE&gt;dataArray.length&lt;/CODE&gt;.  Each array must
                  be at least as large as &lt;CODE&gt;size&lt;/CODE&gt; + the corresponding offset.   There must
                  be an entry in the offset array for each &lt;CODE&gt;dataArray&lt;/CODE&gt; entry.  For each
                  bank, only elements &lt;CODE&gt;offset&lt;/CODE&gt; through
                  &lt;CODE&gt;offset&lt;/CODE&gt; + &lt;CODE&gt;size&lt;/CODE&gt; - 1 should be
                  used by accessors of this &lt;CODE&gt;DataBuffer&lt;/CODE&gt;.
                  &lt;p&gt;
                  Note that {@code DataBuffer} objects created by this constructor
                  may be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    dataArray The unsigned-short arrays for the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    size The size of the banks in the <CODE>DataBuffer</CODE>.                    
                </param>
                <param>
                    offsets The offsets into each array.                    
                </param>
            </javadoc>
            <method name="DataBufferUShort" type="constructor" line="151">
                <params>
                    <param name="dataArray" type="short"/>
                    <param name="size" type="int"/>
                    <param name="offsets" type="int"/>
                </params>
                <scope line="153"/>
                <scope line="156">
                    <scope line="157"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="167">
                Returns the default (first) unsigned-short data array.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <return>
                    The first unsigned-short data array.                    
                </return>
            </javadoc>
            <method name="getData" type="short[]" line="175"/>
            <javadoc line="179">
                Returns the data array for the specified bank.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <param>
                    bank The bank whose data array you want to get.                    
                </param>
                <return>
                    The data array for the specified bank.                    
                </return>
            </javadoc>
            <method name="getData" type="short[]" line="188">
                <params>
                    <param name="bank" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Returns the data arrays for all banks.
                  &lt;p&gt;
                  Note that calling this method may cause this {@code DataBuffer}object to be incompatible with &lt;a href=&quot;#optimizations&quot;&gt;performance
                  optimizations&lt;/a&gt; used by some implementations (such as caching
                  an associated image in video memory).                
                <return>
                    All of the data arrays.                    
                </return>
            </javadoc>
            <method name="getBankData" type="short[][]" line="200"/>
            <javadoc line="204">
                Returns the requested data array element from the first (default) bank.                
                <param>
                    i The data array element you want to get.                    
                </param>
                <return>
                    The requested data array element as an integer.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <method name="getElem" type="int" line="211">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="214">
                Returns the requested data array element from the specified bank.                
                <param>
                    bank The bank from which you want to get a data array element.                    
                </param>
                <param>
                    i The data array element you want to get.                    
                </param>
                <return>
                    The requested data array element as an integer.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <method name="getElem" type="int" line="222">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="225">
                Sets the requested data array element in the first (default) bank
                  to the specified value.                
                <param>
                    i The data array element you want to set.                    
                </param>
                <param>
                    val The integer value to which you want to set the data array element.                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <method name="setElem" type="void" line="233">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="237">
                Sets the requested data array element in the specified bank
                  from the given integer.                
                <param>
                    bank The bank in which you want to set the data array element.                    
                </param>
                <param>
                    i The data array element you want to set.                    
                </param>
                <param>
                    val The integer value to which you want to set the specified data array element.                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <method name="setElem" type="void" line="246">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
        </class>
    </source>