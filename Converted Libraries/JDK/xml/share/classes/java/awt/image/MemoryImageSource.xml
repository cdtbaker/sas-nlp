<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <class name="MemoryImageSource" line="8">
            <implements interface="ImageProducer"/>
            <javadoc line="8">
                This class is an implementation of the ImageProducer interface which
                  uses an array to produce pixel values for an Image.  Here is an example
                  which calculates a 100x100 image representing a fade from black to blue
                  along the X axis and a fade from black to red along the Y axis:
                  &lt;pre&gt;
                  int w = 100;
                  int h = 100;
                  int pix[] = new int[w  h];
                  int index = 0;
                  for (int y = 0; y &lt; h; y++) {
                  int red = (y  255) / (h - 1);
                  for (int x = 0; x &lt; w; x++) {
                  int blue = (x  255) / (w - 1);
                  pix[index++] = (255 &lt;&lt; 24) | (red &lt;&lt; 16) | blue;
                  }
                  }
                  Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));
                  &lt;/pre&gt;
                  The MemoryImageSource is also capable of managing a memory image which
                  varies over time to allow animation or custom rendering.  Here is an
                  example showing how to set up the animation source and signal changes
                  in the data (adapted from the MemoryAnimationSourceDemo by Garth Dickie):
                  &lt;pre&gt;
                  int pixels[];
                  MemoryImageSource source;
                  public void init() {
                  int width = 50;
                  int height = 50;
                  int size = width  height;
                  pixels = new int[size];
                  int value = getBackground().getRGB();
                  for (int i = 0; i &lt; size; i++) {
                  pixels[i] = value;
                  }
                  source = new MemoryImageSource(width, height, pixels, 0, width);
                  source.setAnimated(true);
                  image = createImage(source);
                  }
                  public void run() {
                  Thread me = Thread.currentThread( );
                  me.setPriority(Thread.MIN_PRIORITY);
                  while (true) {
                  try {
                  Thread.sleep(10);
                  } catch( InterruptedException e ) {
                  return;
                  }
                  // Modify the values in the pixels array at (x, y, w, h)
                  // Send the new data to the interested ImageConsumers
                  source.newPixels(x, y, w, h);
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    ImageProducer                    
                </see>
                <author>
                    Jim Graham                    
                </author>
                <author>
                    Animation capabilities inspired by the
                      MemoryAnimationSource class written by Garth Dickie                    
                </author>
            </javadoc>
            <declaration name="width" type="int" line="68"/>
            <declaration name="height" type="int" line="69"/>
            <declaration name="model" type="ColorModel" line="70"/>
            <declaration name="pixels" type="Object" line="71"/>
            <declaration name="pixeloffset" type="int" line="72"/>
            <declaration name="pixelscan" type="int" line="73"/>
            <declaration name="properties" type="Hashtable" line="74"/>
            <declaration name="theConsumers" type="Vector" line="75"/>
            <declaration name="animating" type="boolean" line="76"/>
            <declaration name="fullbuffers" type="boolean" line="77"/>
            <javadoc line="78">
                Constructs an ImageProducer object which uses an array of bytes
                  to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    cm the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="91">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Constructs an ImageProducer object which uses an array of bytes
                  to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    cm the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <param>
                    props a list of properties that the &lt;code&gt;ImageProducer&lt;/code&gt;
                      uses to process an image                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="109">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                    <param name="props" type="Hashtable&lt;?,?&gt;"/>
                </params>
            </method>
            <javadoc line="112">
                Constructs an ImageProducer object which uses an array of integers
                  to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    cm the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="125">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                </params>
            </method>
            <javadoc line="128">
                Constructs an ImageProducer object which uses an array of integers
                  to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    cm the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <param>
                    props a list of properties that the &lt;code&gt;ImageProducer&lt;/code&gt;
                      uses to process an image                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="143">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="int[]"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                    <param name="props" type="Hashtable&lt;?,?&gt;"/>
                </params>
            </method>
            <method name="initialize" type="void" line="146">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="pix" type="Object"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                    <param name="props" type="Hashtable"/>
                </params>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Constructs an ImageProducer object which uses an array of integers
                  in the default RGB ColorModel to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="171">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pix" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                </params>
            </method>
            <javadoc line="174">
                Constructs an ImageProducer object which uses an array of integers
                  in the default RGB ColorModel to produce data for an Image object.                
                <param>
                    w the width of the rectangle of pixels                    
                </param>
                <param>
                    h the height of the rectangle of pixels                    
                </param>
                <param>
                    pix an array of pixels                    
                </param>
                <param>
                    off the offset into the array of where to store the
                      first pixel                    
                </param>
                <param>
                    scan the distance from one row of pixels to the next in
                      the array                    
                </param>
                <param>
                    props a list of properties that the &lt;code&gt;ImageProducer&lt;/code&gt;
                      uses to process an image                    
                </param>
                <see>
                    java.awt.Component#createImage                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="MemoryImageSource" type="constructor" line="189">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pix" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scan" type="int"/>
                    <param name="props" type="Hashtable&lt;?,?&gt;"/>
                </params>
            </method>
            <javadoc line="192">
                Adds an ImageConsumer to the list of consumers interested in
                  data for this image.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if the specified
                      &lt;code&gt;ImageConsumer&lt;/code&gt; is null                    
                </throws>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="addConsumer" type="void" line="200">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="201"/>
                <scope line="205">
                    <scope line="208">
                        <scope line="210"/>
                    </scope>
                </scope>
                <scope line="216">
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="222">
                Determines if an ImageConsumer is on the list of consumers currently
                  interested in data for this image.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;ImageConsumer&lt;/code&gt;
                      is on the list; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="isConsumer" type="boolean" line="230">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="233">
                Removes an ImageConsumer from the list of consumers interested in
                  data for this image.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="removeConsumer" type="void" line="239">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="242">
                Adds an ImageConsumer to the list of consumers interested in
                  data for this image and immediately starts delivery of the
                  image data through the ImageConsumer interface.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;
                      image data through the ImageConsumer interface.                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="startProduction" type="void" line="250">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="253">
                Requests that a given ImageConsumer have the image data delivered
                  one more time in top-down, left-right order.                
                <param>
                    ic the specified &lt;code&gt;ImageConsumer&lt;/code&gt;                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <method name="requestTopDownLeftRightResend" type="void" line="259">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="261">
                Changes this memory image into a multi-frame animation or a
                  single-frame static image depending on the animated parameter.
                  &lt;p&gt;This method should be called immediately after the
                  MemoryImageSource is constructed and before an image is
                  created with it to ensure that all ImageConsumers will
                  receive the correct multi-frame data.  If an ImageConsumer
                  is added to this ImageProducer before this flag is set then
                  that ImageConsumer will see only a snapshot of the pixel
                  data that was available when it connected.                
                <param>
                    animated &lt;code&gt;true&lt;/code&gt; if the image is a
                      multi-frame animation                    
                </param>
            </javadoc>
            <method name="setAnimated" type="void" line="274">
                <params>
                    <param name="animated" type="boolean"/>
                </params>
                <scope line="276">
                    <declaration name="enum_" type="Enumeration" line="277"/>
                    <scope line="278">
                        <declaration name="ic" type="ImageConsumer" line="279"/>
                        <scope line="281"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="288">
                Specifies whether this animated memory image should always be
                  updated by sending the complete buffer of pixels whenever
                  there is a change.
                  This flag is ignored if the animation flag is not turned on
                  through the setAnimated() method.
                  &lt;p&gt;This method should be called immediately after the
                  MemoryImageSource is constructed and before an image is
                  created with it to ensure that all ImageConsumers will
                  receive the correct pixel delivery hints.                
                <param>
                    fullbuffers &lt;code&gt;true&lt;/code&gt; if the complete pixel
                      buffer should always
                      be sent                    
                </param>
                <see>
                    #setAnimated                    
                </see>
            </javadoc>
            <method name="setFullBufferUpdates" type="void" line="303">
                <params>
                    <param name="fullbuffers" type="boolean"/>
                </params>
                <scope line="304"/>
                <scope line="308">
                    <declaration name="enum_" type="Enumeration" line="309"/>
                    <scope line="310">
                        <declaration name="ic" type="ImageConsumer" line="311"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="316">
                Sends a whole new buffer of pixels to any ImageConsumers that
                  are currently interested in the data for this image and notify
                  them that an animation frame is complete.
                  This method only has effect if the animation flag has been
                  turned on through the setAnimated() method.                
                <see>
                    #newPixels(int,int,int,int,boolean)                    
                </see>
                <see>
                    ImageConsumer                    
                </see>
                <see>
                    #setAnimated                    
                </see>
            </javadoc>
            <method name="newPixels" type="void" line="326"/>
            <javadoc line="329">
                Sends a rectangular region of the buffer of pixels to any
                  ImageConsumers that are currently interested in the data for
                  this image and notify them that an animation frame is complete.
                  This method only has effect if the animation flag has been
                  turned on through the setAnimated() method.
                  If the full buffer update flag was turned on with the
                  setFullBufferUpdates() method then the rectangle parameters
                  will be ignored and the entire buffer will always be sent.                
                <param>
                    x the x coordinate of the upper left corner of the rectangle
                      of pixels to be sent                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the rectangle
                      of pixels to be sent                    
                </param>
                <param>
                    w the width of the rectangle of pixels to be sent                    
                </param>
                <param>
                    h the height of the rectangle of pixels to be sent                    
                </param>
                <see>
                    #newPixels(int,int,int,int,boolean)                    
                </see>
                <see>
                    ImageConsumer                    
                </see>
                <see>
                    #setAnimated                    
                </see>
                <see>
                    #setFullBufferUpdates                    
                </see>
            </javadoc>
            <method name="newPixels" type="void" line="349">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="352">
                Sends a rectangular region of the buffer of pixels to any
                  ImageConsumers that are currently interested in the data for
                  this image.
                  If the framenotify parameter is true then the consumers are
                  also notified that an animation frame is complete.
                  This method only has effect if the animation flag has been
                  turned on through the setAnimated() method.
                  If the full buffer update flag was turned on with the
                  setFullBufferUpdates() method then the rectangle parameters
                  will be ignored and the entire buffer will always be sent.                
                <param>
                    x the x coordinate of the upper left corner of the rectangle
                      of pixels to be sent                    
                </param>
                <param>
                    y the y coordinate of the upper left corner of the rectangle
                      of pixels to be sent                    
                </param>
                <param>
                    w the width of the rectangle of pixels to be sent                    
                </param>
                <param>
                    h the height of the rectangle of pixels to be sent                    
                </param>
                <param>
                    framenotify &lt;code&gt;true&lt;/code&gt; if the consumers should be sent a{@link ImageConsumer#SINGLEFRAMEDONE SINGLEFRAMEDONE} notification                    
                </param>
                <see>
                    ImageConsumer                    
                </see>
                <see>
                    #setAnimated                    
                </see>
                <see>
                    #setFullBufferUpdates                    
                </see>
            </javadoc>
            <method name="newPixels" type="void" line="374">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="framenotify" type="boolean"/>
                </params>
                <scope line="375">
                    <scope line="376"/>
                    <scope line="381">
                        <scope line="382"/>
                        <scope line="386"/>
                        <scope line="389"/>
                        <scope line="393"/>
                    </scope>
                    <scope line="397"/>
                    <declaration name="enum_" type="Enumeration" line="400"/>
                    <scope line="401">
                        <declaration name="ic" type="ImageConsumer" line="402"/>
                        <scope line="403"/>
                        <scope line="406"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="412">
                Changes to a new byte array to hold the pixels for this image.
                  If the animation flag has been turned on through the setAnimated()
                  method, then the new pixels will be immediately delivered to any
                  ImageConsumers that are currently interested in the data for
                  this image.                
                <param>
                    newpix the new pixel array                    
                </param>
                <param>
                    newmodel the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    offset the offset into the array                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    #newPixels(int,int,int,int,boolean)                    
                </see>
                <see>
                    #setAnimated                    
                </see>
            </javadoc>
            <method name="newPixels" type="void" line="426">
                <params>
                    <param name="newpix" type="byte[]"/>
                    <param name="newmodel" type="ColorModel"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <javadoc line="433">
                Changes to a new int array to hold the pixels for this image.
                  If the animation flag has been turned on through the setAnimated()
                  method, then the new pixels will be immediately delivered to any
                  ImageConsumers that are currently interested in the data for
                  this image.                
                <param>
                    newpix the new pixel array                    
                </param>
                <param>
                    newmodel the specified &lt;code&gt;ColorModel&lt;/code&gt;                    
                </param>
                <param>
                    offset the offset into the array                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next in
                      the array                    
                </param>
                <see>
                    #newPixels(int,int,int,int,boolean)                    
                </see>
                <see>
                    #setAnimated                    
                </see>
            </javadoc>
            <method name="newPixels" type="void" line="447">
                <params>
                    <param name="newpix" type="int[]"/>
                    <param name="newmodel" type="ColorModel"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <method name="initConsumer" type="void" line="454">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="455"/>
                <scope line="458"/>
                <scope line="461"/>
                <scope line="464"/>
            </method>
            <method name="sendPixels" type="void" line="468">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="off" type="int" line="469"/>
                <scope line="470">
                    <scope line="471"/>
                    <scope line="474"/>
                </scope>
            </method>
        </class>
    </source>