<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.util.Hashtable"/>
        <import package="java.awt.Rectangle"/>
        <class name="AreaAveragingScaleFilter" line="6">
            <extends class="ReplicateScaleFilter"/>
            <javadoc line="6">
                An ImageFilter class for scaling images using a simple area averaging
                  algorithm that produces smoother results than the nearest neighbor
                  algorithm.
                  &lt;p&gt;This class extends the basic ImageFilter Class to scale an existing
                  image and provide a source for a new image containing the resampled
                  image.  The pixels in the source image are blended to produce pixels
                  for an image of the specified size.  The blending process is analogous
                  to scaling up the source image to a multiple of the destination size
                  using pixel replication and then scaling it back down to the destination
                  size by simply averaging all the pixels in the supersized image that
                  fall within a given pixel of the destination image.  If the data from
                  the source is not delivered in TopDownLeftRight order then the filter
                  will back off to a simple pixel replication behavior and utilize the
                  requestTopDownLeftRightResend() method to refilter the pixels in a
                  better way at the end.
                  &lt;p&gt;It is meant to be used in conjunction with a FilteredImageSource
                  object to produce scaled versions of existing images.  Due to
                  implementation dependencies, there may be differences in pixel values
                  of an image filtered on different platforms.                
                <see>
                    FilteredImageSource                    
                </see>
                <see>
                    ReplicateScaleFilter                    
                </see>
                <see>
                    ImageFilter                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="rgbmodel" type="ColorModel" line="32"/>
            <declaration name="neededHints" type="int" line="33"/>
            <declaration name="passthrough" type="boolean" line="34"/>
            <declaration name="reds" type="float" line="35"/>
            <declaration name="savedy" type="int" line="36"/>
            <declaration name="savedyrem" type="int" line="37"/>
            <javadoc line="38">
                Constructs an AreaAveragingScaleFilter that scales the pixels from
                  its source Image as specified by the width and height parameters.                
                <param>
                    width the target width to scale the image                    
                </param>
                <param>
                    height the target height to scale the image                    
                </param>
            </javadoc>
            <method name="AreaAveragingScaleFilter" type="constructor" line="44">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="47">
                Detect if the data is being delivered with the necessary hints
                  to allow the averaging algorithm to do its work.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose
                  pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setHints                    
                </see>
            </javadoc>
            <method name="setHints" type="void" line="59">
                <params>
                    <param name="hints" type="int"/>
                </params>
            </method>
            <method name="makeAccumBuffers" type="void" line="63"/>
            <method name="calcRow" type="int[]" line="69">
                <declaration name="origmult" type="float" line="70"/>
                <scope line="71"/>
                <declaration name="outpix" type="int[]" line="74"/>
                <scope line="75">
                    <declaration name="mult" type="float" line="76"/>
                    <declaration name="a" type="int" line="77"/>
                    <scope line="78"/>
                    <scope line="81"/>
                    <scope line="84"/>
                    <declaration name="r" type="int" line="87"/>
                    <declaration name="g" type="int" line="88"/>
                    <declaration name="b" type="int" line="89"/>
                    <scope line="90"/>
                    <scope line="93"/>
                    <scope line="96"/>
                    <scope line="99"/>
                    <scope line="102"/>
                    <scope line="105"/>
                </scope>
            </method>
            <method name="accumPixels" type="void" line="112">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="Object"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <scope line="113"/>
                <declaration name="sy" type="int" line="116"/>
                <declaration name="syrem" type="int" line="117"/>
                <declaration name="dy" type="int" line="118"/>
                <scope line="119"/>
                <scope line="123"/>
                <scope line="127">
                    <declaration name="amty" type="int" line="128"/>
                    <scope line="129">
                        <scope line="130"/>
                    </scope>
                    <scope line="135"/>
                    <scope line="138"/>
                    <declaration name="sx" type="int" line="141"/>
                    <declaration name="dx" type="int" line="142"/>
                    <declaration name="sxrem" type="int" line="143"/>
                    <declaration name="dxrem" type="int" line="144"/>
                    <declaration name="a" type="float" line="145"/>
                    <scope line="146">
                        <scope line="147">
                            <declaration name="rgb" type="int" line="149"/>
                            <scope line="150"/>
                            <scope line="153"/>
                            <scope line="161">
                                <declaration name="ascale" type="float" line="162"/>
                            </scope>
                        </scope>
                        <declaration name="amtx" type="int" line="168"/>
                        <scope line="169"/>
                        <scope line="172"/>
                        <declaration name="mult" type="float" line="175"/>
                        <scope line="180"/>
                        <scope line="183"/>
                    </scope>
                    <scope line="188">
                        <declaration name="outpix" type="int" line="189"/>
                        <scope line="190"/>
                    </scope>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="208">
                Combine the components for the delivered byte pixels into the
                  accumulation arrays and send on any averaged data for rows of
                  pixels that are complete.  If the correct hints were not
                  specified in the setHints call then relay the work to our
                  superclass which is capable of scaling pixels regardless of
                  the delivery hints.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt;
                  whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ReplicateScaleFilter                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="224">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <javadoc line="232">
                Combine the components for the delivered int pixels into the
                  accumulation arrays and send on any averaged data for rows of
                  pixels that are complete.  If the correct hints were not
                  specified in the setHints call then relay the work to our
                  superclass which is capable of scaling pixels regardless of
                  the delivery hints.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt;
                  whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ReplicateScaleFilter                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="248">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <scope line="249"/>
                <scope line="252"/>
            </method>
        </class>
    </source>