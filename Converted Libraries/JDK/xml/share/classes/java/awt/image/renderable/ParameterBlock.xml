<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image.renderable">
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <class name="ParameterBlock" line="31">
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                A &lt;code&gt;ParameterBlock&lt;/code&gt; encapsulates all the information about sources and
                  parameters (Objects) required by a RenderableImageOp, or other
                  classes that process images.
                  &lt;p&gt; Although it is possible to place arbitrary objects in the
                  source Vector, users of this class may impose semantic constraints
                  such as requiring all sources to be RenderedImages or
                  RenderableImage.  &lt;code&gt;ParameterBlock&lt;/code&gt; itself is merely a container and
                  performs no checking on source or parameter types.
                  &lt;p&gt; All parameters in a &lt;code&gt;ParameterBlock&lt;/code&gt; are objects; convenience
                  add and set methods are available that take arguments of base type and
                  construct the appropriate subclass of Number (such as
                  Integer or Float).  Corresponding get methods perform a
                  downward cast and have return values of base type; an exception
                  will be thrown if the stored values do not have the correct type.
                  There is no way to distinguish between the results of
                  &quot;short s; add(s)&quot; and &quot;add(new Short(s))&quot;.
                  &lt;p&gt; Note that the get and set methods operate on references.
                  Therefore, one must be careful not to share references between
                  &lt;code&gt;ParameterBlock&lt;/code&gt;s when this is inappropriate.  For example, to create
                  a new &lt;code&gt;ParameterBlock&lt;/code&gt; that is equal to an old one except for an
                  added source, one might be tempted to write:
                  &lt;pre&gt;
                  ParameterBlock addSource(ParameterBlock pb, RenderableImage im) {
                  ParameterBlock pb1 = new ParameterBlock(pb.getSources());
                  pb1.addSource(im);
                  return pb1;
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; This code will have the side effect of altering the original
                  &lt;code&gt;ParameterBlock&lt;/code&gt;, since the getSources operation returned a reference
                  to its source Vector.  Both pb and pb1 share their source Vector,
                  and a change in either is visible to both.
                  &lt;p&gt; A correct way to write the addSource function is to clone
                  the source Vector:
                  &lt;pre&gt;
                  ParameterBlock addSource (ParameterBlock pb, RenderableImage im) {
                  ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone());
                  pb1.addSource(im);
                  return pb1;
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; The clone method of &lt;code&gt;ParameterBlock&lt;/code&gt; has been defined to
                  perform a clone of both the source and parameter Vectors for
                  this reason.  A standard, shallow clone is available as
                  shallowClone.
                  &lt;p&gt; The addSource, setSource, add, and set methods are
                  defined to return &apos;this&apos; after adding their argument.  This allows
                  use of syntax like:
                  &lt;pre&gt;
                  ParameterBlock pb = new ParameterBlock();
                  op = new RenderableImageOp(&quot;operation&quot;, pb.add(arg1).add(arg2));
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="sources" type="Vector&lt;Object&gt;" line="96"/>
            <javadoc line="96">
                A Vector of sources, stored as arbitrary Objects.                
            </javadoc>
            <declaration name="parameters" type="Vector&lt;Object&gt;" line="99"/>
            <javadoc line="99">
                A Vector of non-source parameters, stored as arbitrary Objects.                
            </javadoc>
            <javadoc line="102">
                A dummy constructor.                
            </javadoc>
            <method name="ParameterBlock" type="constructor" line="103"/>
            <javadoc line="105">
                Constructs a &lt;code&gt;ParameterBlock&lt;/code&gt; with a given Vector
                  of sources.                
                <param>
                    sources a <code>Vector</code> of source images                    
                </param>
            </javadoc>
            <method name="ParameterBlock" type="constructor" line="110">
                <params>
                    <param name="sources" type="Vector<Object>"/>
                </params>
            </method>
            <javadoc line="114">
                Constructs a &lt;code&gt;ParameterBlock&lt;/code&gt; with a given Vector of sources and
                  Vector of parameters.                
                <param>
                    sources a <code>Vector</code> of source images                    
                </param>
                <param>
                    parameters a <code>Vector</code> of parameters to be used in the
                      rendering operation                    
                </param>
            </javadoc>
            <method name="ParameterBlock" type="constructor" line="123">
                <params>
                    <param name="sources" type="Vector<Object>"/>
                    <param name="parameters" type="Vector<Object>"/>
                </params>
            </method>
            <javadoc line="128">
                Creates a shallow copy of a &lt;code&gt;ParameterBlock&lt;/code&gt;.  The source and
                  parameter Vectors are copied by reference -- additions or
                  changes will be visible to both versions.                
                <return>
                    an Object clone of the <code>ParameterBlock</code>.                    
                </return>
            </javadoc>
            <method name="shallowClone" type="Object" line="135">
                <comment line="139">
                    We can&apos;t be here since we implement Cloneable.                    
                </comment>
                <scope line="136"/>
                <scope line="138"/>
            </method>
            <javadoc line="144">
                Creates a copy of a &lt;code&gt;ParameterBlock&lt;/code&gt;.  The source and parameter
                  Vectors are cloned, but the actual sources and parameters are
                  copied by reference.  This allows modifications to the order
                  and number of sources and parameters in the clone to be invisible
                  to the original &lt;code&gt;ParameterBlock&lt;/code&gt;.  Changes to the shared sources or
                  parameters themselves will still be visible.                
                <return>
                    an Object clone of the <code>ParameterBlock</code>.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="154">
                <comment line="160">
                    We can&apos;t be here since we implement Cloneable.                    
                </comment>
                <declaration name="theClone" type="ParameterBlock" line="155"/>
                <scope line="157"/>
                <scope line="159"/>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <javadoc line="173">
                Adds an image to end of the list of sources.  The image is
                  stored as an object in order to allow new node types in the
                  future.                
                <param>
                    source an image object to be stored in the source list.                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing the specified
                      <code>source</code>.                    
                </return>
            </javadoc>
            <method name="addSource" type="ParameterBlock" line="182">
                <params>
                    <param name="source" type="Object"/>
                </params>
            </method>
            <javadoc line="187">
                Returns a source as a general Object.  The caller must cast it into
                  an appropriate type.                
                <param>
                    index the index of the source to be returned.                    
                </param>
                <return>
                    an <code>Object</code> that represents the source located
                      at the specified index in the <code>sources</code>
                      <code>Vector</code>.                    
                </return>
                <see>
                    #setSource(Object,int)                    
                </see>
            </javadoc>
            <method name="getSource" type="Object" line="197">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Replaces an entry in the list of source with a new source.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    source the specified source image                    
                </param>
                <param>
                    index the index into the <code>sources</code>
                      <code>Vector</code> at which to
                      insert the specified <code>source</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> that contains the
                      specified <code>source</code> at the specified
                      <code>index</code>.                    
                </return>
                <see>
                    #getSource(int)                    
                </see>
            </javadoc>
            <method name="setSource" type="ParameterBlock" line="214">
                <params>
                    <param name="source" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="oldSize" type="int" line="215"/>
                <declaration name="newSize" type="int" line="216"/>
                <scope line="217"/>
            </method>
            <javadoc line="224">
                Returns a source as a &lt;code&gt;RenderedImage&lt;/code&gt;.  This method is
                  a convenience method.
                  An exception will be thrown if the source is not a RenderedImage.                
                <param>
                    index the index of the source to be returned                    
                </param>
                <return>
                    a <code>RenderedImage</code> that represents the source
                      image that is at the specified index in the
                      <code>sources</code> <code>Vector</code>.                    
                </return>
            </javadoc>
            <method name="getRenderedSource" type="RenderedImage" line="234">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="238">
                Returns a source as a RenderableImage.  This method is a
                  convenience method.
                  An exception will be thrown if the sources is not a RenderableImage.                
                <param>
                    index the index of the source to be returned                    
                </param>
                <return>
                    a <code>RenderableImage</code> that represents the source
                      image that is at the specified index in the
                      <code>sources</code> <code>Vector</code>.                    
                </return>
            </javadoc>
            <method name="getRenderableSource" type="RenderableImage" line="248">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Returns the number of source images.                
                <return>
                    the number of source images in the <code>sources</code>
                      <code>Vector</code>.                    
                </return>
            </javadoc>
            <method name="getNumSources" type="int" line="257"/>
            <javadoc line="261">
                Returns the entire Vector of sources.                
                <return>
                    the <code>sources</code> <code>Vector</code>.                    
                </return>
                <see>
                    #setSources(Vector)                    
                </see>
            </javadoc>
            <method name="getSources" type="Vector<Object>" line="266"/>
            <javadoc line="270">
                Sets the entire Vector of sources to a given Vector.                
                <param>
                    sources the <code>Vector</code> of source images                    
                </param>
                <see>
                    #getSources                    
                </see>
            </javadoc>
            <method name="setSources" type="void" line="275">
                <params>
                    <param name="sources" type="Vector<Object>"/>
                </params>
            </method>
            <javadoc line="279">
                Clears the list of source images.                
            </javadoc>
            <method name="removeSources" type="void" line="280"/>
            <javadoc line="284">
                Returns the number of parameters (not including source images).                
                <return>
                    the number of parameters in the <code>parameters</code>
                      <code>Vector</code>.                    
                </return>
            </javadoc>
            <method name="getNumParameters" type="int" line="289"/>
            <javadoc line="293">
                Returns the entire Vector of parameters.                
                <return>
                    the <code>parameters</code> <code>Vector</code>.                    
                </return>
                <see>
                    #setParameters(Vector)                    
                </see>
            </javadoc>
            <method name="getParameters" type="Vector<Object>" line="298"/>
            <javadoc line="302">
                Sets the entire Vector of parameters to a given Vector.                
                <param>
                    parameters the specified <code>Vector</code> of
                      parameters                    
                </param>
                <see>
                    #getParameters                    
                </see>
            </javadoc>
            <method name="setParameters" type="void" line="308">
                <params>
                    <param name="parameters" type="Vector<Object>"/>
                </params>
            </method>
            <javadoc line="312">
                Clears the list of parameters.                
            </javadoc>
            <method name="removeParameters" type="void" line="313"/>
            <javadoc line="317">
                Adds an object to the list of parameters.                
                <param>
                    obj the <code>Object</code> to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="324">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="329">
                Adds a Byte to the list of parameters.                
                <param>
                    b the byte to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="336">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="340">
                Adds a Character to the list of parameters.                
                <param>
                    c the char to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="347">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="351">
                Adds a Short to the list of parameters.                
                <param>
                    s the short to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="358">
                <params>
                    <param name="s" type="short"/>
                </params>
            </method>
            <javadoc line="362">
                Adds a Integer to the list of parameters.                
                <param>
                    i the int to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="369">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                Adds a Long to the list of parameters.                
                <param>
                    l the long to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="380">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <javadoc line="384">
                Adds a Float to the list of parameters.                
                <param>
                    f the float to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="391">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <javadoc line="395">
                Adds a Double to the list of parameters.                
                <param>
                    d the double to add to the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="add" type="ParameterBlock" line="402">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="406">
                Replaces an Object in the list of parameters.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    obj the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="418">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="oldSize" type="int" line="419"/>
                <declaration name="newSize" type="int" line="420"/>
                <scope line="421"/>
            </method>
            <javadoc line="428">
                Replaces an Object in the list of parameters with a Byte.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    b the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="440">
                <params>
                    <param name="b" type="byte"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="444">
                Replaces an Object in the list of parameters with a Character.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    c the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="456">
                <params>
                    <param name="c" type="char"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="460">
                Replaces an Object in the list of parameters with a Short.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    s the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="472">
                <params>
                    <param name="s" type="short"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="476">
                Replaces an Object in the list of parameters with an Integer.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    i the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="488">
                <params>
                    <param name="i" type="int"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="492">
                Replaces an Object in the list of parameters with a Long.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    l the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="504">
                <params>
                    <param name="l" type="long"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="508">
                Replaces an Object in the list of parameters with a Float.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    f the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="520">
                <params>
                    <param name="f" type="float"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="524">
                Replaces an Object in the list of parameters with a Double.
                  If the index lies beyond the current source list,
                  the list is extended with nulls as needed.                
                <param>
                    d the parameter that replaces the
                      parameter at the specified index in the
                      <code>parameters</code> <code>Vector</code>                    
                </param>
                <param>
                    index the index of the parameter to be
                      replaced with the specified parameter                    
                </param>
                <return>
                    a new <code>ParameterBlock</code> containing
                      the specified parameter.                    
                </return>
            </javadoc>
            <method name="set" type="ParameterBlock" line="536">
                <params>
                    <param name="d" type="double"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="540">
                Gets a parameter as an object.                
                <param>
                    index the index of the parameter to get                    
                </param>
                <return>
                    an <code>Object</code> representing the
                      the parameter at the specified index
                      into the <code>parameters</code>
                      <code>Vector</code>.                    
                </return>
            </javadoc>
            <method name="getObjectParameter" type="Object" line="548">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="552">
                A convenience method to return a parameter as a byte.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Byte&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>byte</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Byte</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getByteParameter" type="byte" line="568">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="572">
                A convenience method to return a parameter as a char.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Character&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>char</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Character</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getCharParameter" type="char" line="588">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="592">
                A convenience method to return a parameter as a short.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Short&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>short</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Short</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getShortParameter" type="short" line="608">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="612">
                A convenience method to return a parameter as an int.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not an &lt;code&gt;Integer&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>int</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Integer</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getIntParameter" type="int" line="628">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="632">
                A convenience method to return a parameter as a long.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Long&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>long</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Long</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getLongParameter" type="long" line="648">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="652">
                A convenience method to return a parameter as a float.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Float&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>float</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Float</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getFloatParameter" type="float" line="668">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="672">
                A convenience method to return a parameter as a double.  An
                  exception is thrown if the parameter is
                  &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Double&lt;/code&gt;.                
                <param>
                    index the index of the parameter to be returned.                    
                </param>
                <return>
                    the parameter at the specified index
                      as a <code>double</code> value.                    
                </return>
                <throws>
                    ClassCastException if the parameter at the
                      specified index is not a <code>Double</code>                    
                </throws>
                <throws>
                    NullPointerException if the parameter at the specified
                      index is <code>null</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>index</code>
                      is negative or not less than the current size of this
                      <code>ParameterBlock</code> object                    
                </throws>
            </javadoc>
            <method name="getDoubleParameter" type="double" line="688">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="692">
                Returns an array of Class objects describing the types
                  of the parameters.                
                <return>
                    an array of <code>Class</code> objects.                    
                </return>
            </javadoc>
            <method name="getParamClasses" type="Class[]" line="697">
                <declaration name="numParams" type="int" line="698"/>
                <declaration name="classes" type="Class[]" line="699"/>
                <declaration name="i" type="int" line="700"/>
                <scope line="702">
                    <declaration name="obj" type="Object" line="703"/>
                    <scope line="704"/>
                    <scope line="706"/>
                    <scope line="708"/>
                    <scope line="710"/>
                    <scope line="712"/>
                    <scope line="714"/>
                    <scope line="716"/>
                    <scope line="718"/>
                </scope>
            </method>
        </class>
    </source>