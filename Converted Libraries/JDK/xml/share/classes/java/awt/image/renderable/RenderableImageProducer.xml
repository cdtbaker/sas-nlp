<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image.renderable">
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <class name="RenderableImageProducer" line="49">
            <implements interface="ImageProducer"/>
            <implements interface="Runnable"/>
            <javadoc line="49">
                An adapter class that implements ImageProducer to allow the
                  asynchronous production of a RenderableImage.  The size of the
                  ImageConsumer is determined by the scale factor of the usr2dev
                  transform in the RenderContext.  If the RenderContext is null, the
                  default rendering of the RenderableImage is used.  This class
                  implements an asynchronous production that produces the image in
                  one thread at one resolution.  This class may be subclassed to
                  implement versions that will render the image using several
                  threads.  These threads could render either the same image at
                  progressively better quality, or different sections of the image at
                  a single resolution.                
            </javadoc>
            <declaration name="rdblImage" type="RenderableImage" line="64"/>
            <javadoc line="64">
                The RenderableImage source for the producer.                
            </javadoc>
            <declaration name="rc" type="RenderContext" line="67"/>
            <javadoc line="67">
                The RenderContext to use for producing the image.                
            </javadoc>
            <declaration name="ics" type="Vector" line="70"/>
            <javadoc line="70">
                A Vector of image consumers.                
            </javadoc>
            <javadoc line="73">
                Constructs a new RenderableImageProducer from a RenderableImage
                  and a RenderContext.                
                <param>
                    rdblImage the RenderableImage to be rendered.                    
                </param>
                <param>
                    rc the RenderContext to use for producing the pixels.                    
                </param>
            </javadoc>
            <method name="RenderableImageProducer" type="constructor" line="81">
                <params>
                    <param name="rdblImage" type="RenderableImage"/>
                    <param name="rc" type="RenderContext"/>
                </params>
            </method>
            <javadoc line="86">
                Sets a new RenderContext to use for the next startProduction() call.                
                <param>
                    rc the new RenderContext.                    
                </param>
            </javadoc>
            <method name="setRenderContext" type="void" line="91">
                <params>
                    <param name="rc" type="RenderContext"/>
                </params>
            </method>
            <javadoc line="95">
                Adds an ImageConsumer to the list of consumers interested in
                  data for this image.                
                <param>
                    ic an ImageConsumer to be added to the interest list.                    
                </param>
            </javadoc>
            <method name="addConsumer" type="void" line="101">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Determine if an ImageConsumer is on the list of consumers
                  currently interested in data for this image.                
                <param>
                    ic the ImageConsumer to be checked.                    
                </param>
                <return>
                    true if the ImageConsumer is on the list; false otherwise.                    
                </return>
            </javadoc>
            <method name="isConsumer" type="boolean" line="114">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="118">
                Remove an ImageConsumer from the list of consumers interested in
                  data for this image.                
                <param>
                    ic the ImageConsumer to be removed.                    
                </param>
            </javadoc>
            <method name="removeConsumer" type="void" line="124">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
            </method>
            <javadoc line="128">
                Adds an ImageConsumer to the list of consumers interested in
                  data for this image, and immediately starts delivery of the
                  image data through the ImageConsumer interface.                
                <param>
                    ic the ImageConsumer to be added to the list of consumers.                    
                </param>
            </javadoc>
            <method name="startProduction" type="void" line="135">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <comment line="138">
                    Need to build a runnable object for the Thread.                    
                </comment>
                <declaration name="thread" type="Thread" line="138"/>
            </method>
            <javadoc line="142">
                Requests that a given ImageConsumer have the image data delivered
                  one more time in top-down, left-right order.                
                <param>
                    ic the ImageConsumer requesting the resend.                    
                </param>
            </javadoc>
            <method name="requestTopDownLeftRightResend" type="void" line="148">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <comment line="150">
                    So far, all pixels are already sent in TDLR order                    
                </comment>
            </method>
            <javadoc line="152">
                The runnable method for this class. This will produce an image using
                  the current RenderableImage and RenderContext and send it to all the
                  ImageConsumer currently registered with this class.                
            </javadoc>
            <method name="run" type="void" line="157">
                <comment line="159">
                    First get the rendered image                    
                </comment>
                <comment line="167">
                    And its ColorModel                    
                </comment>
                <comment line="183">
                    Set up the ImageConsumers                    
                </comment>
                <comment line="194">
                    Get RGB pixels from the raster scanline by scanline and
                     send to consumers.                    
                </comment>
                <comment line="205">
                    Now send the scanline to the Consumers                    
                </comment>
                <comment line="213">
                    Now tell the consumers we&apos;re done.                    
                </comment>
                <declaration name="rdrdImage" type="RenderedImage" line="159"/>
                <scope line="160"/>
                <scope line="162"/>
                <declaration name="colorModel" type="ColorModel" line="167"/>
                <declaration name="raster" type="Raster" line="168"/>
                <declaration name="sampleModel" type="SampleModel" line="169"/>
                <declaration name="dataBuffer" type="DataBuffer" line="170"/>
                <scope line="172"/>
                <declaration name="minX" type="int" line="175"/>
                <declaration name="minY" type="int" line="176"/>
                <declaration name="width" type="int" line="177"/>
                <declaration name="height" type="int" line="178"/>
                <declaration name="icList" type="Enumeration" line="180"/>
                <declaration name="ic" type="ImageConsumer" line="181"/>
                <scope line="184"/>
                <declaration name="pix" type="int" line="195"/>
                <declaration name="i" type="int" line="196"/>
                <declaration name="numBands" type="int" line="197"/>
                <declaration name="tmpPixel" type="int" line="198"/>
                <scope line="199">
                    <scope line="200"/>
                    <scope line="206"/>
                </scope>
                <scope line="214"/>
            </method>
        </class>
    </source>