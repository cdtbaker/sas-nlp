<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="sun.awt.image.ImagingLib"/>
        <class name="LookupOp" line="8">
            <implements interface="BufferedImageOp"/>
            <implements interface="RasterOp"/>
            <javadoc line="8">
                This class implements a lookup operation from the source
                  to the destination.  The LookupTable object may contain a single array
                  or multiple arrays, subject to the restrictions below.
                  &lt;p&gt;
                  For Rasters, the lookup operates on bands.  The number of
                  lookup arrays may be one, in which case the same array is
                  applied to all bands, or it must equal the number of Source
                  Raster bands.
                  &lt;p&gt;
                  For BufferedImages, the lookup operates on color and alpha components.
                  The number of lookup arrays may be one, in which case the
                  same array is applied to all color (but not alpha) components.
                  Otherwise, the number of lookup arrays may
                  equal the number of Source color components, in which case no
                  lookup of the alpha component (if present) is performed.
                  If neither of these cases apply, the number of lookup arrays
                  must equal the number of Source color components plus alpha components,
                  in which case lookup is performed for all color and alpha components.
                  This allows non-uniform rescaling of multi-band BufferedImages.
                  &lt;p&gt;
                  BufferedImage sources with premultiplied alpha data are treated in the same
                  manner as non-premultiplied images for purposes of the lookup.  That is,
                  the lookup is done per band on the raw data of the BufferedImage source
                  without regard to whether the data is premultiplied.  If a color conversion
                  is required to the destination ColorModel, the premultiplied state of
                  both source and destination will be taken into account for this step.
                  &lt;p&gt;
                  Images with an IndexColorModel cannot be used.
                  &lt;p&gt;
                  If a RenderingHints object is specified in the constructor, the
                  color rendering hint and the dithering hint may be used when color
                  conversion is required.
                  &lt;p&gt;
                  This class allows the Source to be the same as the Destination.                
                <see>
                    LookupTable                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_COLOR_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_DITHERING                    
                </see>
            </javadoc>
            <declaration name="ltable" type="LookupTable" line="48"/>
            <declaration name="numComponents" type="int" line="49"/>
            <declaration name="hints" type="RenderingHints" line="50"/>
            <javadoc line="51">
                Constructs a &lt;code&gt;LookupOp&lt;/code&gt; object given the lookup
                  table and a &lt;code&gt;RenderingHints&lt;/code&gt; object, which might
                  be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    lookup the specified <code>LookupTable</code>                    
                </param>
                <param>
                    hints the specified <code>RenderingHints</code>,
                      or <code>null</code>                    
                </param>
            </javadoc>
            <method name="LookupOp" type="constructor" line="59">
                <params>
                    <param name="lookup" type="LookupTable"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="64">
                Returns the &lt;code&gt;LookupTable&lt;/code&gt;.                
                <return>
                    the <code>LookupTable</code> of this
                      <code>LookupOp</code>.                    
                </return>
            </javadoc>
            <method name="getTable" type="LookupTable" line="69"/>
            <javadoc line="72">
                Performs a lookup operation on a &lt;code&gt;BufferedImage&lt;/code&gt;.
                  If the color model in the source image is not the same as that
                  in the destination image, the pixels will be converted
                  in the destination.  If the destination image is &lt;code&gt;null&lt;/code&gt;,
                  a &lt;code&gt;BufferedImage&lt;/code&gt; will be created with an appropriate
                  &lt;code&gt;ColorModel&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  might be thrown if the number of arrays in the
                  &lt;code&gt;LookupTable&lt;/code&gt; does not meet the restrictions
                  stated in the class comment above, or if the source image
                  has an &lt;code&gt;IndexColorModel&lt;/code&gt;.                
                <param>
                    src the <code>BufferedImage</code> to be filtered                    
                </param>
                <param>
                    dst the <code>BufferedImage</code> in which to
                      store the results of the filter operation                    
                </param>
                <return>
                    the filtered <code>BufferedImage</code>.                    
                </return>
                <throws>
                    IllegalArgumentException if the number of arrays in the
                      <code>LookupTable</code> does not meet the restrictions
                      described in the class comments, or if the source image
                      has an <code>IndexColorModel</code>.                    
                </throws>
            </javadoc>
            <method name="filter" type="BufferedImage" line="92">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dst" type="BufferedImage"/>
                </params>
                <declaration name="srcCM" type="ColorModel" line="93"/>
                <declaration name="numBands" type="int" line="94"/>
                <declaration name="dstCM" type="ColorModel" line="95"/>
                <scope line="96"/>
                <declaration name="numComponents" type="int" line="99"/>
                <scope line="100"/>
                <declaration name="needToConvert" type="boolean" line="103"/>
                <declaration name="width" type="int" line="104"/>
                <declaration name="height" type="int" line="105"/>
                <scope line="106"/>
                <scope line="110">
                    <scope line="111"/>
                    <scope line="114"/>
                    <scope line="118"/>
                </scope>
                <declaration name="origDst" type="BufferedImage" line="123"/>
                <scope line="124">
                    <declaration name="srcRaster" type="WritableRaster" line="125"/>
                    <declaration name="dstRaster" type="WritableRaster" line="126"/>
                    <scope line="127">
                        <scope line="128">
                            <declaration name="minx" type="int" line="129"/>
                            <declaration name="miny" type="int" line="130"/>
                            <declaration name="bands" type="int[]" line="131"/>
                            <scope line="132"/>
                        </scope>
                    </scope>
                    <scope line="138">
                        <declaration name="dstNumBands" type="int" line="139"/>
                        <scope line="140">
                            <declaration name="minx" type="int" line="141"/>
                            <declaration name="miny" type="int" line="142"/>
                            <declaration name="bands" type="int[]" line="143"/>
                            <scope line="144"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="152">
                    <declaration name="ccop" type="ColorConvertOp" line="153"/>
                </scope>
            </method>
            <javadoc line="158">
                Performs a lookup operation on a &lt;code&gt;Raster&lt;/code&gt;.
                  If the destination &lt;code&gt;Raster&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  a new &lt;code&gt;Raster&lt;/code&gt; will be created.
                  The &lt;code&gt;IllegalArgumentException&lt;/code&gt; might be thrown
                  if the source &lt;code&gt;Raster&lt;/code&gt; and the destination
                  &lt;code&gt;Raster&lt;/code&gt; do not have the same
                  number of bands or if the number of arrays in the
                  &lt;code&gt;LookupTable&lt;/code&gt; does not meet the
                  restrictions stated in the class comment above.                
                <param>
                    src the source <code>Raster</code> to filter                    
                </param>
                <param>
                    dst the destination <code>WritableRaster</code> for the
                      filtered <code>src</code>                    
                </param>
                <return>
                    the filtered <code>WritableRaster</code>.                    
                </return>
                <throws>
                    IllegalArgumentException if the source and destinations
                      rasters do not have the same number of bands, or the
                      number of arrays in the <code>LookupTable</code> does
                      not meet the restrictions described in the class comments.                    
                </throws>
            </javadoc>
            <method name="filter" type="WritableRaster" line="177">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <declaration name="numBands" type="int" line="178"/>
                <declaration name="dstLength" type="int" line="179"/>
                <declaration name="height" type="int" line="180"/>
                <declaration name="width" type="int" line="181"/>
                <declaration name="srcPix" type="int" line="182"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="190"/>
                <declaration name="numComponents" type="int" line="193"/>
                <scope line="194"/>
                <scope line="197"/>
                <scope line="200"/>
                <scope line="203"/>
                <scope line="206">
                    <declaration name="sminX" type="int" line="207"/>
                    <declaration name="sY" type="int" line="208"/>
                    <declaration name="dminX" type="int" line="209"/>
                    <declaration name="dY" type="int" line="210"/>
                    <scope line="211">
                        <declaration name="sX" type="int" line="212"/>
                        <declaration name="dX" type="int" line="213"/>
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="223">
                Returns the bounding box of the filtered destination image.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
                <param>
                    src the <code>BufferedImage</code> to be filtered                    
                </param>
                <return>
                    the bounds of the filtered definition image.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="230">
                <params>
                    <param name="src" type="BufferedImage"/>
                </params>
            </method>
            <javadoc line="233">
                Returns the bounding box of the filtered destination Raster.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
                <param>
                    src the <code>Raster</code> to be filtered                    
                </param>
                <return>
                    the bounds of the filtered definition <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="240">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="243">
                Creates a zeroed destination image with the correct size and number of
                  bands.  If destCM is &lt;code&gt;null&lt;/code&gt;, an appropriate
                  &lt;code&gt;ColorModel&lt;/code&gt; will be used.                
                <param>
                    src       Source image for the filter operation.                    
                </param>
                <param>
                    destCM    the destination's <code>ColorModel</code>, which
                      can be <code>null</code>.                    
                </param>
                <return>
                    a filtered destination <code>BufferedImage</code>.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="252">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                </params>
                <declaration name="image" type="BufferedImage" line="253"/>
                <declaration name="w" type="int" line="254"/>
                <declaration name="h" type="int" line="255"/>
                <declaration name="transferType" type="int" line="256"/>
                <scope line="257">
                    <declaration name="cm" type="ColorModel" line="258"/>
                    <declaration name="raster" type="Raster" line="259"/>
                    <scope line="260">
                        <declaration name="db" type="DataBuffer" line="261"/>
                        <declaration name="hasAlpha" type="boolean" line="262"/>
                        <declaration name="isPre" type="boolean" line="263"/>
                        <declaration name="trans" type="int" line="264"/>
                        <declaration name="nbits" type="int[]" line="265"/>
                        <scope line="266">
                            <scope line="267">
                                <scope line="268">
                                    <scope line="270"/>
                                    <scope line="273"/>
                                </scope>
                                <scope line="277"/>
                            </scope>
                        </scope>
                        <scope line="283">
                            <scope line="285">
                                <scope line="286">
                                    <scope line="288"/>
                                    <scope line="291"/>
                                </scope>
                                <scope line="295"/>
                            </scope>
                        </scope>
                        <scope line="301"/>
                    </scope>
                </scope>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Creates a zeroed-destination &lt;code&gt;Raster&lt;/code&gt; with the
                  correct size and number of bands, given this source.                
                <param>
                    src the <code>Raster</code> to be transformed                    
                </param>
                <return>
                    the zeroed-destination <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="318">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="321">
                Returns the location of the destination point given a
                  point in the source.  If &lt;code&gt;dstPt&lt;/code&gt; is not
                  &lt;code&gt;null&lt;/code&gt;, it will be used to hold the return value.
                  Since this is not a geometric operation, the &lt;code&gt;srcPt&lt;/code&gt;
                  will equal the &lt;code&gt;dstPt&lt;/code&gt;.                
                <param>
                    srcPt a <code>Point2D</code> that represents a point
                      in the source image                    
                </param>
                <param>
                    dstPt a <code>Point2D</code>that represents the location
                      in the destination                    
                </param>
                <return>
                    the <code>Point2D</code> in the destination that
                      corresponds to the specified point in the source.                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="334">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
                <scope line="335"/>
            </method>
            <javadoc line="341">
                Returns the rendering hints for this op.                
                <return>
                    the <code>RenderingHints</code> object associated
                      with this op.                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="346"/>
            <method name="byteFilter" type="void" line="349">
                <params>
                    <param name="lookup" type="ByteLookupTable"/>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="numBands" type="int"/>
                </params>
                <declaration name="srcPix" type="int[]" line="350"/>
                <declaration name="table" type="byte[][]" line="351"/>
                <declaration name="offset" type="int" line="352"/>
                <declaration name="tidx" type="int" line="353"/>
                <declaration name="step" type="int" line="354"/>
                <scope line="355"/>
                <declaration name="x" type="int" line="358"/>
                <declaration name="y" type="int" line="359"/>
                <declaration name="band" type="int" line="360"/>
                <declaration name="len" type="int" line="361"/>
                <scope line="362">
                    <scope line="364">
                        <scope line="366">
                            <declaration name="index" type="int" line="367"/>
                            <scope line="368"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="shortFilter" type="void" line="377">
                <params>
                    <param name="lookup" type="ShortLookupTable"/>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="numBands" type="int"/>
                </params>
                <declaration name="band" type="int" line="378"/>
                <declaration name="srcPix" type="int[]" line="379"/>
                <declaration name="table" type="short[][]" line="380"/>
                <declaration name="offset" type="int" line="381"/>
                <declaration name="tidx" type="int" line="382"/>
                <declaration name="step" type="int" line="383"/>
                <scope line="384"/>
                <declaration name="x" type="int" line="387"/>
                <declaration name="y" type="int" line="388"/>
                <declaration name="index" type="int" line="389"/>
                <declaration name="maxShort" type="int" line="390"/>
                <scope line="391">
                    <scope line="393">
                        <scope line="395">
                            <scope line="397"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>