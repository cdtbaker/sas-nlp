<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Point"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.color"/>
        <import package="sun.java2d.cmm.ColorTransform"/>
        <import package="sun.java2d.cmm.CMSManager"/>
        <import package="sun.java2d.cmm.ProfileDeferralMgr"/>
        <import package="sun.java2d.cmm.PCMM"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.RenderingHints"/>
        <class name="ColorConvertOp" line="17">
            <implements interface="BufferedImageOp"/>
            <implements interface="RasterOp"/>
            <javadoc line="17">
                This class performs a pixel-by-pixel color conversion of the data in
                  the source image.  The resulting color values are scaled to the precision
                  of the destination image.  Color conversion can be specified
                  via an array of ColorSpace objects or an array of ICC_Profile objects.
                  &lt;p&gt;
                  If the source is a BufferedImage with premultiplied alpha, the
                  color components are divided by the alpha component before color conversion.
                  If the destination is a BufferedImage with premultiplied alpha, the
                  color components are multiplied by the alpha component after conversion.
                  Rasters are treated as having no alpha channel, i.e. all bands are
                  color bands.
                  &lt;p&gt;
                  If a RenderingHints object is specified in the constructor, the
                  color rendering hint and the dithering hint may be used to control
                  color conversion.
                  &lt;p&gt;
                  Note that Source and Destination may be the same object.
                  &lt;p&gt;                
                <see>
                    java.awt.RenderingHints#KEY_COLOR_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_DITHERING                    
                </see>
            </javadoc>
            <declaration name="profileList" type="ICC_Profile[]" line="40"/>
            <declaration name="CSList" type="ColorSpace[]" line="41"/>
            <declaration name="thisTransform" type="ColorTransform" line="42"/>
            <declaration name="thisSrcProfile" type="ICC_Profile" line="43"/>
            <declaration name="hints" type="RenderingHints" line="44"/>
            <declaration name="gotProfiles" type="boolean" line="45"/>
            <declaration name="srcMinVals" type="float[]" line="46"/>
            <scope line="47">
                <scope line="48"/>
            </scope>
            <javadoc line="52">
                Constructs a new ColorConvertOp which will convert
                  from a source color space to a destination color space.
                  The RenderingHints argument may be null.
                  This Op can be used only with BufferedImages, and will convert
                  directly from the ColorSpace of the source image to that of the
                  destination.  The destination argument of the filter method
                  cannot be specified as null.                
                <param>
                    hints the &lt;code&gt;RenderingHints&lt;/code&gt; object used to control
                      the color conversion, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="ColorConvertOp" type="constructor" line="63">
                <params>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="67">
                Constructs a new ColorConvertOp from a ColorSpace object.
                  The RenderingHints argument may be null.  This
                  Op can be used only with BufferedImages, and is primarily useful
                  when the {@link #filter(BufferedImage,BufferedImage) filter}method is invoked with a destination argument of null.
                  In that case, the ColorSpace defines the destination color space
                  for the destination created by the filter method.  Otherwise, the
                  ColorSpace defines an intermediate space to which the source is
                  converted before being converted to the destination space.                
                <param>
                    cspace defines the destination &lt;code&gt;ColorSpace&lt;/code&gt; or an
                      intermediate &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    hints the &lt;code&gt;RenderingHints&lt;/code&gt; object used to control
                      the color conversion, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if cspace is null                    
                </throws>
            </javadoc>
            <method name="ColorConvertOp" type="constructor" line="82">
                <params>
                    <param name="cspace" type="ColorSpace"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="83"/>
                <scope line="86"/>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Constructs a new ColorConvertOp from two ColorSpace objects.
                  The RenderingHints argument may be null.
                  This Op is primarily useful for calling the filter method on
                  Rasters, in which case the two ColorSpaces define the operation
                  to be performed on the Rasters.  In that case, the number of bands
                  in the source Raster must match the number of components in
                  srcCspace, and the number of bands in the destination Raster
                  must match the number of components in dstCspace.  For BufferedImages,
                  the two ColorSpaces define intermediate spaces through which the
                  source is converted before being converted to the destination space.                
                <param>
                    srcCspace the source &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    dstCspace the destination &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    hints the &lt;code&gt;RenderingHints&lt;/code&gt; object used to control
                      the color conversion, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if either srcCspace or dstCspace is null                    
                </throws>
            </javadoc>
            <method name="ColorConvertOp" type="constructor" line="113">
                <params>
                    <param name="srcCspace" type="ColorSpace"/>
                    <param name="dstCspace" type="ColorSpace"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="123"/>
            </method>
            <javadoc line="130">
                Constructs a new ColorConvertOp from an array of ICC_Profiles.
                  The RenderingHints argument may be null.
                  The sequence of profiles may include profiles that represent color
                  spaces, profiles that represent effects, etc.  If the whole sequence
                  does not represent a well-defined color conversion, an exception is
                  thrown.
                  &lt;p&gt;For BufferedImages, if the ColorSpace
                  of the source BufferedImage does not match the requirements of the
                  first profile in the array,
                  the first conversion is to an appropriate ColorSpace.
                  If the requirements of the last profile in the array are not met
                  by the ColorSpace of the destination BufferedImage,
                  the last conversion is to the destination&apos;s ColorSpace.
                  &lt;p&gt;For Rasters, the number of bands in the source Raster must match
                  the requirements of the first profile in the array, and the
                  number of bands in the destination Raster must match the requirements
                  of the last profile in the array.  The array must have at least two
                  elements or calling the filter method for Rasters will throw an
                  IllegalArgumentException.                
                <param>
                    profiles the array of &lt;code&gt;ICC_Profile&lt;/code&gt; objects                    
                </param>
                <param>
                    hints the &lt;code&gt;RenderingHints&lt;/code&gt; object used to control
                      the color conversion, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <exception>
                    IllegalArgumentException when the profile sequence does not
                      specify a well-defined color conversion                    
                </exception>
                <exception>
                    NullPointerException if profiles is null                    
                </exception>
            </javadoc>
            <method name="ColorConvertOp" type="constructor" line="157">
                <params>
                    <param name="profiles" type="ICC_Profile[]"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="158"/>
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Returns the array of ICC_Profiles used to construct this ColorConvertOp.
                  Returns null if the ColorConvertOp was not constructed from such an
                  array.                
                <return>
                    the array of &lt;code&gt;ICC_Profile&lt;/code&gt; objects of this
                      &lt;code&gt;ColorConvertOp&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if this
                      &lt;code&gt;ColorConvertOp&lt;/code&gt; was not constructed with an
                      array of &lt;code&gt;ICC_Profile&lt;/code&gt; objects.                    
                </return>
            </javadoc>
            <method name="getICC_Profiles" type="ICC_Profile[]" line="177">
                <scope line="178">
                    <declaration name="profiles" type="ICC_Profile[]" line="179"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="187">
                ColorConverts the source BufferedImage.
                  If the destination image is null,
                  a BufferedImage will be created with an appropriate ColorModel.                
                <param>
                    src the source &lt;code&gt;BufferedImage&lt;/code&gt; to be converted                    
                </param>
                <param>
                    dest the destination &lt;code&gt;BufferedImage&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;dest&lt;/code&gt; color converted from &lt;code&gt;src&lt;/code&gt;
                      or a new, converted &lt;code&gt;BufferedImage&lt;/code&gt;
                      if &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalArgumentException if dest is null and this op was
                      constructed using the constructor which takes only a
                      RenderingHints argument, since the operation is ill defined.                    
                </exception>
            </javadoc>
            <method name="filter" type="BufferedImage" line="201">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dest" type="BufferedImage"/>
                </params>
                <declaration name="srcColorSpace" type="ColorSpace" line="202"/>
                <declaration name="savdest" type="BufferedImage" line="203"/>
                <scope line="204">
                    <declaration name="icm" type="IndexColorModel" line="205"/>
                </scope>
                <scope line="209">
                    <scope line="210"/>
                    <scope line="215"/>
                </scope>
                <scope line="219"/>
                <scope line="222"/>
                <scope line="225"/>
                <scope line="228">
                    <declaration name="big" type="Graphics2D" line="229"/>
                    <scope line="230"/>
                    <scope line="233"/>
                </scope>
                <scope line="238"/>
            </method>
            <method name="ICCBIFilter" type="BufferedImage" line="242">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="srcColorSpace" type="ColorSpace"/>
                    <param name="dest" type="BufferedImage"/>
                    <param name="destColorSpace" type="ColorSpace"/>
                </params>
                <declaration name="nProfiles" type="int" line="243"/>
                <declaration name="srcProfile" type="ICC_Profile" line="244"/>
                <scope line="246">
                    <scope line="247"/>
                </scope>
                <scope line="253">
                    <scope line="254"/>
                </scope>
                <scope line="259">
                    <declaration name="noTrans" type="boolean" line="260"/>
                    <scope line="261">
                        <scope line="262"/>
                    </scope>
                    <scope line="267">
                        <declaration name="g" type="Graphics2D" line="268"/>
                        <scope line="269"/>
                        <scope line="272"/>
                    </scope>
                </scope>
                <scope line="278"/>
            </method>
            <method name="updateBITransform" type="void" line="284">
                <params>
                    <param name="srcProfile" type="ICC_Profile"/>
                    <param name="destProfile" type="ICC_Profile"/>
                </params>
                <declaration name="theProfiles" type="ICC_Profile[]" line="285"/>
                <declaration name="i1" type="int" line="286"/>
                <declaration name="theTransforms" type="ColorTransform[]" line="287"/>
                <declaration name="useSrc" type="boolean" line="288"/>
                <scope line="291"/>
                <scope line="295"/>
                <declaration name="idx" type="int" line="300"/>
                <scope line="301"/>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="311"/>
                <scope line="314"/>
                <declaration name="mdl" type="PCMM" line="318"/>
                <scope line="319">
                    <scope line="320"/>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="337">
                ColorConverts the image data in the source Raster.
                  If the destination Raster is null, a new Raster will be created.
                  The number of bands in the source and destination Rasters must
                  meet the requirements explained above.  The constructor used to
                  create this ColorConvertOp must have provided enough information
                  to define both source and destination color spaces.  See above.
                  Otherwise, an exception is thrown.                
                <param>
                    src the source &lt;code&gt;Raster&lt;/code&gt; to be converted                    
                </param>
                <param>
                    dest the destination &lt;code&gt;WritableRaster&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;dest&lt;/code&gt; color converted from &lt;code&gt;src&lt;/code&gt;
                      or a new, converted &lt;code&gt;WritableRaster&lt;/code&gt;
                      if &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalArgumentException if the number of source or
                      destination bands is incorrect, the source or destination
                      color spaces are undefined, or this op was constructed
                      with one of the constructors that applies only to
                      operations on BufferedImages.                    
                </exception>
            </javadoc>
            <method name="filter" type="WritableRaster" line="357">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dest" type="WritableRaster"/>
                </params>
                <scope line="358"/>
                <declaration name="nProfiles" type="int" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="371">
                    <scope line="372"/>
                    <scope line="375"/>
                </scope>
                <scope line="379">
                    <declaration name="i1" type="int" line="380"/>
                    <declaration name="theTransforms" type="ColorTransform[]" line="381"/>
                    <scope line="383"/>
                    <scope line="386"/>
                    <declaration name="mdl" type="PCMM" line="390"/>
                    <scope line="391">
                        <scope line="392"/>
                        <scope line="395">
                            <scope line="396"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="srcTransferType" type="int" line="407"/>
                <declaration name="dstTransferType" type="int" line="408"/>
                <scope line="409">
                    <scope line="410"/>
                </scope>
                <scope line="415"/>
            </method>
            <javadoc line="420">
                Returns the bounding box of the destination, given this source.
                  Note that this will be the same as the the bounding box of the
                  source.                
                <param>
                    src the source &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box
                      of the destination, given the specified &lt;code&gt;src&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="428">
                <params>
                    <param name="src" type="BufferedImage"/>
                </params>
            </method>
            <javadoc line="431">
                Returns the bounding box of the destination, given this source.
                  Note that this will be the same as the the bounding box of the
                  source.                
                <param>
                    src the source &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that is the bounding box
                      of the destination, given the specified &lt;code&gt;src&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="439">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="442">
                Creates a zeroed destination image with the correct size and number of
                  bands, given this source.                
                <param>
                    src       Source image for the filter operation.                    
                </param>
                <param>
                    destCM    ColorModel of the destination.  If null, an
                      appropriate ColorModel will be used.                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; with the correct size and
                      number of bands from the specified &lt;code&gt;src&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;destCM&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; and this &lt;code&gt;ColorConvertOp&lt;/code&gt; was
                      created without any &lt;code&gt;ICC_Profile&lt;/code&gt; or
                      &lt;code&gt;ColorSpace&lt;/code&gt; defined for the destination                    
                </throws>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="455">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                </params>
                <declaration name="cs" type="ColorSpace" line="456"/>
                <scope line="458">
                    <scope line="459">
                        <declaration name="nProfiles" type="int" line="460"/>
                        <scope line="461"/>
                        <declaration name="destProfile" type="ICC_Profile" line="464"/>
                    </scope>
                    <scope line="467">
                        <declaration name="nSpaces" type="int" line="468"/>
                    </scope>
                </scope>
            </method>
            <method name="createCompatibleDestImage" type="BufferedImage" line="474">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                    <param name="destCS" type="ColorSpace"/>
                </params>
                <declaration name="image" type="BufferedImage" line="475"/>
                <scope line="476">
                    <declaration name="srcCM" type="ColorModel" line="477"/>
                    <declaration name="nbands" type="int" line="478"/>
                    <declaration name="hasAlpha" type="boolean" line="479"/>
                    <scope line="480"/>
                    <declaration name="nbits" type="int[]" line="483"/>
                    <scope line="484"/>
                </scope>
                <declaration name="w" type="int" line="489"/>
                <declaration name="h" type="int" line="490"/>
            </method>
            <javadoc line="494">
                Creates a zeroed destination Raster with the correct size and number of
                  bands, given this source.                
                <param>
                    src the specified &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; with the correct size and number
                      of bands from the specified &lt;code&gt;src&lt;/code&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if this &lt;code&gt;ColorConvertOp&lt;/code&gt;
                      was created without sufficient information to define the
                      &lt;code&gt;dst&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; color spaces                    
                </throws>
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="504">
                <params>
                    <param name="src" type="Raster"/>
                </params>
                <declaration name="ncomponents" type="int" line="505"/>
                <scope line="506">
                    <scope line="507"/>
                </scope>
                <scope line="512">
                    <declaration name="nProfiles" type="int" line="513"/>
                    <scope line="514"/>
                </scope>
                <declaration name="dest" type="WritableRaster" line="519"/>
            </method>
            <javadoc line="522">
                Returns the location of the destination point given a
                  point in the source.  If &lt;code&gt;dstPt&lt;/code&gt; is non-null,
                  it will be used to hold the return value.  Note that
                  for this class, the destination point will be the same
                  as the source point.                
                <param>
                    srcPt the specified source &lt;code&gt;Point2D&lt;/code&gt;                    
                </param>
                <param>
                    dstPt the destination &lt;code&gt;Point2D&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;dstPt&lt;/code&gt; after setting its location to be
                      the same as &lt;code&gt;srcPt&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="533">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
                <scope line="534"/>
            </method>
            <javadoc line="540">
                Returns the RenderingIntent from the specified ICC Profile.                
            </javadoc>
            <method name="getRenderingIntent" type="int" line="543">
                <params>
                    <param name="profile" type="ICC_Profile"/>
                </params>
                <declaration name="header" type="byte[]" line="544"/>
                <declaration name="index" type="int" line="545"/>
            </method>
            <javadoc line="548">
                Returns the rendering hints used by this op.                
                <return>
                    the &lt;code&gt;RenderingHints&lt;/code&gt; object of this
                      &lt;code&gt;ColorConvertOp&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="553"/>
            <method name="nonICCBIFilter" type="BufferedImage" line="556">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="srcColorSpace" type="ColorSpace"/>
                    <param name="dst" type="BufferedImage"/>
                    <param name="dstColorSpace" type="ColorSpace"/>
                </params>
                <declaration name="w" type="int" line="557"/>
                <declaration name="h" type="int" line="558"/>
                <declaration name="ciespace" type="ICC_ColorSpace" line="559"/>
                <scope line="560"/>
                <scope line="564">
                    <scope line="565"/>
                </scope>
                <declaration name="srcRas" type="Raster" line="569"/>
                <declaration name="dstRas" type="WritableRaster" line="570"/>
                <declaration name="srcCM" type="ColorModel" line="571"/>
                <declaration name="dstCM" type="ColorModel" line="572"/>
                <declaration name="srcNumComp" type="int" line="573"/>
                <declaration name="dstNumComp" type="int" line="574"/>
                <declaration name="dstHasAlpha" type="boolean" line="575"/>
                <declaration name="needSrcAlpha" type="boolean" line="576"/>
                <declaration name="list" type="ColorSpace[]" line="577"/>
                <scope line="578">
                    <declaration name="nonICCSrc" type="boolean" line="579"/>
                    <declaration name="srcProfile" type="ICC_Profile" line="580"/>
                    <scope line="581"/>
                    <scope line="585"/>
                    <scope line="589"/>
                    <scope line="593"/>
                    <scope line="597"/>
                    <declaration name="maxNum" type="float" line="600"/>
                    <declaration name="cs" type="ColorSpace" line="601"/>
                    <declaration name="iccSrcNumComp" type="int" line="602"/>
                    <scope line="603"/>
                    <scope line="607"/>
                    <declaration name="srcMinVal" type="float[]" line="611"/>
                    <declaration name="srcInvDiffMinMax" type="float[]" line="612"/>
                    <scope line="613"/>
                    <declaration name="iccDstNumComp" type="int" line="617"/>
                    <scope line="618"/>
                    <scope line="622"/>
                    <declaration name="dstMinVal" type="float[]" line="626"/>
                    <declaration name="dstDiffMinMax" type="float[]" line="627"/>
                    <scope line="628"/>
                    <declaration name="dstColor" type="float[]" line="632"/>
                    <scope line="633">
                        <declaration name="size" type="int" line="634"/>
                    </scope>
                    <scope line="637">
                        <declaration name="size" type="int" line="638"/>
                    </scope>
                    <declaration name="srcLine" type="short[]" line="641"/>
                    <declaration name="dstLine" type="short[]" line="642"/>
                    <declaration name="pixel" type="Object" line="643"/>
                    <declaration name="color" type="float[]" line="644"/>
                    <declaration name="alpha" type="float[]" line="645"/>
                    <scope line="646"/>
                    <declaration name="idx" type="int" line="649"/>
                    <scope line="650">
                        <scope line="654">
                            <scope line="657"/>
                            <scope line="660"/>
                            <scope line="663"/>
                        </scope>
                        <scope line="670">
                            <scope line="671"/>
                            <scope line="674">
                                <scope line="676"/>
                            </scope>
                            <scope line="680"/>
                            <scope line="683"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="691">
                    <declaration name="numCS" type="int" line="692"/>
                    <scope line="693"/>
                    <scope line="696"/>
                    <declaration name="dstColor" type="float[]" line="699"/>
                    <scope line="700"/>
                    <scope line="703"/>
                    <declaration name="spixel" type="Object" line="706"/>
                    <declaration name="dpixel" type="Object" line="707"/>
                    <declaration name="color" type="float[]" line="708"/>
                    <declaration name="tmpColor" type="float[]" line="709"/>
                    <scope line="710">
                        <scope line="711">
                            <scope line="715"/>
                            <scope line="720"/>
                            <scope line="723"/>
                            <scope line="726"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="nonICCRasterFilter" type="WritableRaster" line="736">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <scope line="737"/>
                <scope line="740"/>
                <scope line="743"/>
                <scope line="746">
                    <scope line="747"/>
                    <scope line="750"/>
                </scope>
                <scope line="754"/>
                <declaration name="srcSM" type="SampleModel" line="757"/>
                <declaration name="dstSM" type="SampleModel" line="758"/>
                <declaration name="srcIsFloat" type="boolean" line="759"/>
                <declaration name="srcTransferType" type="int" line="760"/>
                <declaration name="dstTransferType" type="int" line="761"/>
                <scope line="762"/>
                <scope line="765"/>
                <scope line="768"/>
                <scope line="771"/>
                <declaration name="w" type="int" line="774"/>
                <declaration name="h" type="int" line="775"/>
                <declaration name="srcNumBands" type="int" line="776"/>
                <declaration name="dstNumBands" type="int" line="777"/>
                <declaration name="srcScaleFactor" type="float[]" line="778"/>
                <declaration name="dstScaleFactor" type="float[]" line="779"/>
                <scope line="780">
                    <scope line="782">
                        <scope line="783"/>
                        <scope line="786"/>
                    </scope>
                </scope>
                <scope line="791">
                    <scope line="793">
                        <scope line="794"/>
                        <scope line="797"/>
                    </scope>
                </scope>
                <declaration name="ys" type="int" line="802"/>
                <declaration name="yd" type="int" line="803"/>
                <declaration name="xs" type="int" line="804"/>
                <declaration name="sample" type="float" line="805"/>
                <declaration name="color" type="float[]" line="806"/>
                <declaration name="tmpColor" type="float[]" line="807"/>
                <declaration name="srcColorSpace" type="ColorSpace" line="808"/>
                <declaration name="dstColorSpace" type="ColorSpace" line="809"/>
                <scope line="810">
                    <scope line="813">
                        <scope line="814">
                            <scope line="816"/>
                        </scope>
                        <scope line="823">
                            <scope line="825"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getMinMaxValsFromProfiles" type="void" line="834">
                <params>
                    <param name="srcProfile" type="ICC_Profile"/>
                    <param name="dstProfile" type="ICC_Profile"/>
                </params>
                <declaration name="type" type="int" line="835"/>
                <declaration name="nc" type="int" line="836"/>
            </method>
            <method name="setMinMax" type="void" line="846">
                <params>
                    <param name="type" type="int"/>
                    <param name="nc" type="int"/>
                    <param name="minVals" type="float[]"/>
                    <param name="maxVals" type="float[]"/>
                </params>
                <scope line="847"/>
                <scope line="855"/>
                <scope line="859">
                    <scope line="860"/>
                </scope>
            </method>
            <method name="getMinMaxValsFromColorSpaces" type="void" line="866">
                <params>
                    <param name="srcCspace" type="ColorSpace"/>
                    <param name="dstCspace" type="ColorSpace"/>
                </params>
                <declaration name="nc" type="int" line="867"/>
                <scope line="870"/>
                <scope line="877"/>
            </method>
        </class>
    </source>