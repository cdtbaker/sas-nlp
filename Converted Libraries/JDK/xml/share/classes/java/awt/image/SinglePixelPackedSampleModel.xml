<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Arrays"/>
        <class name="SinglePixelPackedSampleModel" line="3">
            <extends class="SampleModel"/>
            <javadoc line="3">
                This class represents pixel data packed such that the N samples which make
                  up a single pixel are stored in a single data array element, and each data
                  data array element holds samples for only one pixel.
                  This class supports{@link DataBuffer#TYPE_BYTE TYPE_BYTE},{@link DataBuffer#TYPE_USHORT TYPE_USHORT},{@link DataBuffer#TYPE_INT TYPE_INT} data types.
                  All data array elements reside
                  in the first bank of a DataBuffer.  Accessor methods are provided so
                  that the image data can be manipulated directly. Scanline stride is the
                  number of data array elements between a given sample and the corresponding
                  sample in the same column of the next scanline. Bit masks are the masks
                  required to extract the samples representing the bands of the pixel.
                  Bit offsets are the offsets in bits into the data array
                  element of the samples representing the bands of the pixel.
                  &lt;p&gt;
                  The following code illustrates extracting the bits of the sample
                  representing band &lt;code&gt;b&lt;/code&gt; for pixel &lt;code&gt;x,y&lt;/code&gt;
                  from DataBuffer &lt;code&gt;data&lt;/code&gt;:
                  &lt;pre&gt;
                  int sample = data.getElem(y  scanlineStride + x);
                  sample = (sample &amp; bitMasks[b]) &gt;&gt;&gt; bitOffsets[b];
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="bitMasks" type="int" line="26"/>
            <javadoc line="26">
                Bit masks for all bands of the image data.                
            </javadoc>
            <declaration name="bitOffsets" type="int" line="30"/>
            <javadoc line="30">
                Bit Offsets for all bands of the image data.                
            </javadoc>
            <declaration name="bitSizes" type="int" line="34"/>
            <javadoc line="34">
                Bit sizes for all the bands of the image data.                
            </javadoc>
            <declaration name="maxBitSize" type="int" line="38"/>
            <javadoc line="38">
                Maximum bit size.                
            </javadoc>
            <declaration name="scanlineStride" type="int" line="42"/>
            <javadoc line="42">
                Line stride of the region of image data described by this
                  SinglePixelPackedSampleModel.                
            </javadoc>
            <method name="initIDs" type="void" line="47"/>
            <scope line="48"/>
            <javadoc line="52">
                Constructs a SinglePixelPackedSampleModel with bitMasks.length bands.
                  Each sample is stored in a data array element in the position of
                  its corresponding bit mask.  Each bit mask must be contiguous and
                  masks must not overlap. Bit masks exceeding data type capacity are
                  truncated.                
                <param>
                    dataType  The data type for storing samples.                    
                </param>
                <param>
                    w         The width (in pixels) of the region of the
                      image data described.                    
                </param>
                <param>
                    h         The height (in pixels) of the region of the
                      image data described.                    
                </param>
                <param>
                    bitMasks  The bit masks for all bands.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      either <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>, or
                      <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="SinglePixelPackedSampleModel" type="constructor" line="69">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bitMasks" type="int"/>
                </params>
                <scope line="71"/>
            </method>
            <javadoc line="75">
                Constructs a SinglePixelPackedSampleModel with bitMasks.length bands
                  and a scanline stride equal to scanlineStride data array elements.
                  Each sample is stored in a data array element in the position of
                  its corresponding bit mask.  Each bit mask must be contiguous and
                  masks must not overlap. Bit masks exceeding data type capacity are
                  truncated.                
                <param>
                    dataType  The data type for storing samples.                    
                </param>
                <param>
                    w         The width (in pixels) of the region of
                      image data described.                    
                </param>
                <param>
                    h         The height (in pixels) of the region of
                      image data described.                    
                </param>
                <param>
                    scanlineStride The line stride of the image data.                    
                </param>
                <param>
                    bitMasks The bit masks for all bands.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
                <throws>
                    IllegalArgumentException if any mask in
                      <code>bitMask</code> is not contiguous                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      either <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>, or
                      <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="SinglePixelPackedSampleModel" type="constructor" line="98">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bitMasks" type="int"/>
                </params>
                <scope line="100"/>
                <declaration name="maxMask" type="int" line="108"/>
                <scope line="110">
                    <declaration name="bitOffset" type="int" line="111"/>
                    <scope line="114">
                        <scope line="115"/>
                        <scope line="119"/>
                        <scope line="123"/>
                    </scope>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="134">
                Returns the number of data elements needed to transfer one pixel
                  via the getDataElements and setDataElements methods.
                  For a SinglePixelPackedSampleModel, this is one.                
            </javadoc>
            <method name="getNumDataElements" type="int" line="139"/>
            <javadoc line="142">
                Returns the size of the buffer (in data array elements)
                  needed for a data buffer that matches this
                  SinglePixelPackedSampleModel.                
            </javadoc>
            <method name="getBufferSize" type="long" line="147">
                <declaration name="size" type="long" line="148"/>
            </method>
            <javadoc line="151">
                Creates a new SinglePixelPackedSampleModel with the specified
                  width and height.  The new SinglePixelPackedSampleModel will have the
                  same storage data type and bit masks as this
                  SinglePixelPackedSampleModel.                
                <param>
                    w the width of the resulting <code>SampleModel</code>                    
                </param>
                <param>
                    h the height of the resulting <code>SampleModel</code>                    
                </param>
                <return>
                    a <code>SinglePixelPackedSampleModel</code> with the
                      specified width and height.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>w</code> or
                      <code>h</code> is not greater than 0                    
                </throws>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="163">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="sampleModel" type="SampleModel" line="164"/>
            </method>
            <javadoc line="167">
                Creates a DataBuffer that corresponds to this
                  SinglePixelPackedSampleModel.  The DataBuffer&apos;s data type and size
                  will be consistent with this SinglePixelPackedSampleModel.  The
                  DataBuffer will have a single bank.                
            </javadoc>
            <method name="createDataBuffer" type="DataBuffer" line="173">
                <declaration name="dataBuffer" type="DataBuffer" line="174"/>
                <declaration name="size" type="int" line="175"/>
            </method>
            <javadoc line="189">
                Returns the number of bits per sample for all bands.                
            </javadoc>
            <method name="getSampleSize" type="int[]" line="192"/>
            <javadoc line="195">
                Returns the number of bits per sample for the specified band.                
            </javadoc>
            <method name="getSampleSize" type="int" line="198">
                <params>
                    <param name="band" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Returns the offset (in data array elements) of pixel (x,y).
                  The data element containing pixel &lt;code&gt;x,y&lt;/code&gt;
                  can be retrieved from a DataBuffer &lt;code&gt;data&lt;/code&gt; with a
                  SinglePixelPackedSampleModel &lt;code&gt;sppsm&lt;/code&gt; as:
                  &lt;pre&gt;
                  data.getElem(sppsm.getOffset(x, y));
                  &lt;/pre&gt;                
                <param>
                    x the X coordinate of the specified pixel                    
                </param>
                <param>
                    y the Y coordinate of the specified pixel                    
                </param>
                <return>
                    the offset of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="213">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="offset" type="int" line="214"/>
            </method>
            <javadoc line="217">
                Returns the bit offsets into the data array element representing
                  a pixel for all bands.                
                <return>
                    the bit offsets representing a pixel for all bands.                    
                </return>
            </javadoc>
            <method name="getBitOffsets" type="int[]" line="222"/>
            <javadoc line="225">
                Returns the bit masks for all bands.                
                <return>
                    the bit masks for all bands.                    
                </return>
            </javadoc>
            <method name="getBitMasks" type="int[]" line="229"/>
            <javadoc line="232">
                Returns the scanline stride of this SinglePixelPackedSampleModel.                
                <return>
                    the scanline stride of this
                      <code>SinglePixelPackedSampleModel</code>.                    
                </return>
            </javadoc>
            <method name="getScanlineStride" type="int" line="237"/>
            <javadoc line="240">
                This creates a new SinglePixelPackedSampleModel with a subset of the
                  bands of this SinglePixelPackedSampleModel.  The new
                  SinglePixelPackedSampleModel can be used with any DataBuffer that the
                  existing SinglePixelPackedSampleModel can be used with.  The new
                  SinglePixelPackedSampleModel/DataBuffer combination will represent
                  an image with a subset of the bands of the original
                  SinglePixelPackedSampleModel/DataBuffer combination.                
                <exception>
                    RasterFormatException if the length of the bands argument is
                      greater than the number of bands in
                      the sample model.                    
                </exception>
            </javadoc>
            <method name="createSubsetSampleModel" type="SampleModel" line="252">
                <params>
                    <param name="bands" type="int"/>
                </params>
                <declaration name="newBitMasks" type="int" line="254"/>
            </method>
            <javadoc line="258">
                Returns data for a single pixel in a primitive array of type
                  TransferType.  For a SinglePixelPackedSampleModel, the array will
                  have one element, and the type will be the same as the storage
                  data type.  Generally, obj
                  should be passed in as null, so that the Object will be created
                  automatically and will be of the right primitive data type.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by
                  SinglePixelPackedSampleModel &lt;code&gt;sppsm1&lt;/code&gt;, to
                  DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by
                  SinglePixelPackedSampleModel &lt;code&gt;sppsm2&lt;/code&gt;.
                  The transfer will generally be more efficient than using
                  getPixel/setPixel.
                  &lt;pre&gt;
                  SinglePixelPackedSampleModel sppsm1, sppsm2;
                  DataBufferInt db1, db2;
                  sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                  db1), db2);
                  &lt;/pre&gt;
                  Using getDataElements/setDataElements to transfer between two
                  DataBuffer/SampleModel pairs is legitimate if the SampleModels have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  If obj is non-null, it should be a primitive array of type TransferType.
                  Otherwise, a ClassCastException is thrown.  An
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if obj is non-null and is not large enough to hold
                  the pixel data.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    obj       If non-null, a primitive array in which to return
                      the pixel data.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    the data for the specified pixel.                    
                </return>
                <see>
                    #setDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="297">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="298"/>
                <declaration name="type" type="int" line="301"/>
                <declaration name="bdata" type="byte[]" line="304"/>
                <declaration name="sdata" type="short[]" line="311"/>
                <declaration name="idata" type="int[]" line="318"/>
            </method>
            <javadoc line="327">
                Returns all samples in for the specified pixel in an int array.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    all samples for the specified pixel.                    
                </return>
                <see>
                    #setPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixel" type="int[]" line="338">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="339"/>
                <declaration name="pixels" type="int" line="342"/>
                <scope line="343"/>
                <scope line="346"/>
                <declaration name="value" type="int" line="349"/>
                <scope line="350"/>
            </method>
            <javadoc line="355">
                Returns all samples for the specified rectangle of pixels in
                  an int array, one sample per array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w         The width of the pixel rectangle.                    
                </param>
                <param>
                    h         The height of the pixel rectangle.                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    all samples for the specified region of pixels.                    
                </return>
                <see>
                    #setPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getPixels" type="int[]" line="369">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="370"/>
                <declaration name="y1" type="int" line="371"/>
                <scope line="372"/>
                <declaration name="pixels" type="int" line="375"/>
                <scope line="376"/>
                <scope line="379"/>
                <declaration name="lineOffset" type="int" line="382"/>
                <declaration name="dstOffset" type="int" line="383"/>
                <scope line="384">
                    <scope line="385">
                        <declaration name="value" type="int" line="386"/>
                        <scope line="387"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="395">
                Returns as int the sample in a specified band for the pixel
                  located at (x,y).
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    b         The band to return.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    the sample in a specified band for the specified
                      pixel.                    
                </return>
                <see>
                    #setSample(int,int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSample" type="int" line="408">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="409"/>
                <declaration name="sample" type="int" line="412"/>
            </method>
            <javadoc line="415">
                Returns the samples for a specified band for the specified rectangle
                  of pixels in an int array, one sample per array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w         The width of the pixel rectangle.                    
                </param>
                <param>
                    h         The height of the pixel rectangle.                    
                </param>
                <param>
                    b         The band to return.                    
                </param>
                <param>
                    iArray    If non-null, returns the samples in this array.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <return>
                    the samples for the specified band for the specified
                      region of pixels.                    
                </return>
                <see>
                    #setSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="getSamples" type="int[]" line="431">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="432"/>
                <declaration name="samples" type="int" line="435"/>
                <scope line="436"/>
                <scope line="439"/>
                <declaration name="lineOffset" type="int" line="442"/>
                <declaration name="dstOffset" type="int" line="443"/>
                <scope line="444">
                    <scope line="445">
                        <declaration name="value" type="int" line="446"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="453">
                Sets the data for a single pixel in the specified DataBuffer from a
                  primitive array of type TransferType.  For a
                  SinglePixelPackedSampleModel, only the first element of the array
                  will hold valid data, and the type of the array must be the same as
                  the storage data type of the SinglePixelPackedSampleModel.
                  &lt;p&gt;
                  The following code illustrates transferring data for one pixel from
                  DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by
                  SinglePixelPackedSampleModel &lt;code&gt;sppsm1&lt;/code&gt;,
                  to DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by
                  SinglePixelPackedSampleModel &lt;code&gt;sppsm2&lt;/code&gt;.
                  The transfer will generally be more efficient than using
                  getPixel/setPixel.
                  &lt;pre&gt;
                  SinglePixelPackedSampleModel sppsm1, sppsm2;
                  DataBufferInt db1, db2;
                  sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                  db1), db2);
                  &lt;/pre&gt;
                  Using getDataElements/setDataElements to transfer between two
                  DataBuffer/SampleModel pairs is legitimate if the SampleModels have
                  the same number of bands, corresponding bands have the same number of
                  bits per sample, and the TransferTypes are the same.
                  &lt;p&gt;
                  obj must be a primitive array of type TransferType.  Otherwise,
                  a ClassCastException is thrown.  An
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds, or if obj is not large enough to hold the pixel data.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    obj       A primitive array containing pixel data.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <see>
                    #getDataElements(int,int,Object,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setDataElements" type="void" line="488">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="489"/>
                <declaration name="type" type="int" line="492"/>
                <declaration name="barray" type="byte[]" line="495"/>
                <declaration name="sarray" type="short[]" line="499"/>
                <declaration name="iarray" type="int[]" line="503"/>
            </method>
            <javadoc line="508">
                Sets a pixel in the DataBuffer using an int array of samples for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    iArray    The input samples in an int array.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <see>
                    #getPixel(int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixel" type="void" line="518">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="519"/>
                <declaration name="lineOffset" type="int" line="522"/>
                <declaration name="value" type="int" line="523"/>
                <scope line="524"/>
            </method>
            <javadoc line="530">
                Sets all samples for a rectangle of pixels from an int array containing
                  one sample per array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w         The width of the pixel rectangle.                    
                </param>
                <param>
                    h         The height of the pixel rectangle.                    
                </param>
                <param>
                    iArray    The input samples in an int array.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <see>
                    #getPixels(int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="543">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <declaration name="x1" type="int" line="544"/>
                <declaration name="y1" type="int" line="545"/>
                <scope line="546"/>
                <declaration name="lineOffset" type="int" line="549"/>
                <declaration name="srcOffset" type="int" line="550"/>
                <scope line="551">
                    <scope line="552">
                        <declaration name="value" type="int" line="553"/>
                        <scope line="554">
                            <declaration name="srcValue" type="int" line="556"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="564">
                Sets a sample in the specified band for the pixel located at (x,y)
                  in the DataBuffer using an int for input.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the pixel location.                    
                </param>
                <param>
                    b         The band to set.                    
                </param>
                <param>
                    s         The input sample as an int.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <see>
                    #getSample(int,int,int,DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSample" type="void" line="576">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                    <param name="s" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="577"/>
                <declaration name="value" type="int" line="580"/>
            </method>
            <javadoc line="585">
                Sets the samples in the specified band for the specified rectangle
                  of pixels from an int array containing one sample per array element.
                  ArrayIndexOutOfBoundsException may be thrown if the coordinates are
                  not in bounds.                
                <param>
                    x         The X coordinate of the upper left pixel location.                    
                </param>
                <param>
                    y         The Y coordinate of the upper left pixel location.                    
                </param>
                <param>
                    w         The width of the pixel rectangle.                    
                </param>
                <param>
                    h         The height of the pixel rectangle.                    
                </param>
                <param>
                    b         The band to set.                    
                </param>
                <param>
                    iArray    The input samples in an int array.                    
                </param>
                <param>
                    data      The DataBuffer containing the image data.                    
                </param>
                <see>
                    #getSamples(int,int,int,int,int,int[],DataBuffer)                    
                </see>
            </javadoc>
            <method name="setSamples" type="void" line="599">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                    <param name="data" type="DataBuffer"/>
                </params>
                <scope line="600"/>
                <declaration name="lineOffset" type="int" line="603"/>
                <declaration name="srcOffset" type="int" line="604"/>
                <scope line="605">
                    <scope line="606">
                        <declaration name="value" type="int" line="607"/>
                        <declaration name="sample" type="int" line="609"/>
                    </scope>
                </scope>
            </method>
            <method name="equals" type="boolean" line="616">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="617"/>
                <declaration name="that" type="SinglePixelPackedSampleModel" line="620"/>
            </method>
            <method name="hashCode" type="int" line="623">
                <declaration name="hash" type="int" line="624"/>
                <scope line="633"/>
                <scope line="637"/>
                <scope line="641"/>
            </method>
        </class>
    </source>