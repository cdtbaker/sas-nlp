<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image.renderable">
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.RenderedImage"/>
        <interface name="ContextualRenderedImageFactory">
            <implements interface="RenderedImageFactory"/>
            <javadoc line="4">
                ContextualRenderedImageFactory provides an interface for the
                  functionality that may differ between instances of
                  RenderableImageOp.  Thus different operations on RenderableImages
                  may be performed by a single class such as RenderedImageOp through
                  the use of multiple instances of ContextualRenderedImageFactory.
                  The name ContextualRenderedImageFactory is commonly shortened to
                  &quot;CRIF.&quot;
                  &lt;p&gt; All operations that are to be used in a rendering-independent
                  chain must implement ContextualRenderedImageFactory.
                  &lt;p&gt; Classes that implement this interface must provide a
                  constructor with no arguments.                
            </javadoc>
            <method name="mapRenderContext" type="RenderContext" line="18"/>
            <javadoc line="18">
                Maps the operation&apos;s output RenderContext into a RenderContext
                  for each of the operation&apos;s sources.  This is useful for
                  operations that can be expressed in whole or in part simply as
                  alterations in the RenderContext, such as an affine mapping, or
                  operations that wish to obtain lower quality renderings of
                  their sources in order to save processing effort or
                  transmission bandwith.  Some operations, such as blur, can also
                  use this mechanism to avoid obtaining sources of higher quality
                  than necessary.                
                <param>
                    i the index of the source image.                    
                </param>
                <param>
                    renderContext the RenderContext being applied to the operation.                    
                </param>
                <param>
                    paramBlock a ParameterBlock containing the operation's
                      sources and parameters.                    
                </param>
                <param>
                    image the RenderableImage being rendered.                    
                </param>
                <return>
                    a <code>RenderContext</code> for
                      the source at the specified index of the parameters
                      Vector contained in the specified ParameterBlock.                    
                </return>
            </javadoc>
            <method name="create" type="RenderedImage" line="38"/>
            <javadoc line="38">
                Creates a rendering, given a RenderContext and a ParameterBlock
                  containing the operation&apos;s sources and parameters.  The output
                  is a RenderedImage that takes the RenderContext into account to
                  determine its dimensions and placement on the image plane.
                  This method houses the &quot;intelligence&quot; that allows a
                  rendering-independent operation to adapt to a specific
                  RenderContext.                
                <param>
                    renderContext The RenderContext specifying the rendering                    
                </param>
                <param>
                    paramBlock a ParameterBlock containing the operation's
                      sources and parameters                    
                </param>
                <return>
                    a <code>RenderedImage</code> from the sources and parameters
                      in the specified ParameterBlock and according to the
                      rendering instructions in the specified RenderContext.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="54"/>
            <javadoc line="54">
                Returns the bounding box for the output of the operation,
                  performed on a given set of sources, in rendering-independent
                  space.  The bounds are returned as a Rectangle2D, that is, an
                  axis-aligned rectangle with floating-point corner coordinates.                
                <param>
                    paramBlock a ParameterBlock containing the operation's
                      sources and parameters.                    
                </param>
                <return>
                    a Rectangle2D specifying the rendering-independent
                      bounding box of the output.                    
                </return>
            </javadoc>
            <method name="getProperty" type="Object" line="65"/>
            <javadoc line="65">
                Gets the appropriate instance of the property specified by the name
                  parameter.  This method must determine which instance of a property to
                  return when there are multiple sources that each specify the property.                
                <param>
                    paramBlock a ParameterBlock containing the operation's
                      sources and parameters.                    
                </param>
                <param>
                    name a String naming the desired property.                    
                </param>
                <return>
                    an object reference to the value of the property requested.                    
                </return>
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="75"/>
            <javadoc line="75">
                Returns a list of names recognized by getProperty.                
                <return>
                    the list of property names.                    
                </return>
            </javadoc>
            <method name="isDynamic" type="boolean" line="80"/>
            <javadoc line="80">
                Returns true if successive renderings (that is, calls to
                  create(RenderContext, ParameterBlock)) with the same arguments
                  may produce different results.  This method may be used to
                  determine whether an existing rendering may be cached and
                  reused.  It is always safe to return true.                
                <return>
                    <code>true</code> if successive renderings with the
                      same arguments might produce different results;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
        </interface>
    </source>