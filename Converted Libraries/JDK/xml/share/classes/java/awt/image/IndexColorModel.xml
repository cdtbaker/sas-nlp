<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.math.BigInteger"/>
        <class name="IndexColorModel" line="32">
            <extends class="ColorModel"/>
            <javadoc line="32">
                The &lt;code&gt;IndexColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt;
                  class that works with pixel values consisting of a
                  single sample that is an index into a fixed colormap in the default
                  sRGB color space.  The colormap specifies red, green, blue, and
                  optional alpha components corresponding to each index.  All components
                  are represented in the colormap as 8-bit unsigned integral values.
                  Some constructors allow the caller to specify &quot;holes&quot; in the colormap
                  by indicating which colormap entries are valid and which represent
                  unusable colors via the bits set in a &lt;code&gt;BigInteger&lt;/code&gt; object.
                  This color model is similar to an X11 PseudoColor visual.
                  &lt;p&gt;
                  Some constructors provide a means to specify an alpha component
                  for each pixel in the colormap, while others either provide no
                  such means or, in some cases, a flag to indicate whether the
                  colormap data contains alpha values.  If no alpha is supplied to
                  the constructor, an opaque alpha component (alpha = 1.0) is
                  assumed for each entry.
                  An optional transparent pixel value can be supplied that indicates a
                  pixel to be made completely transparent, regardless of any alpha
                  component supplied or assumed for that pixel value.
                  Note that the color components in the colormap of an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; objects are never pre-multiplied with
                  the alpha components.
                  &lt;p&gt;
                  &lt;a name=&quot;transparency&quot;&gt;
                  The transparency of an &lt;code&gt;IndexColorModel&lt;/code&gt; object is
                  determined by examining the alpha components of the colors in the
                  colormap and choosing the most specific value after considering
                  the optional alpha values and any transparent index specified.
                  The transparency value is &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;
                  only if all valid colors in
                  the colormap are opaque and there is no valid transparent pixel.
                  If all valid colors
                  in the colormap are either completely opaque (alpha = 1.0) or
                  completely transparent (alpha = 0.0), which typically occurs when
                  a valid transparent pixel is specified,
                  the value is &lt;code&gt;Transparency.BITMASK&lt;/code&gt;.
                  Otherwise, the value is &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;, indicating
                  that some valid color has an alpha component that is
                  neither completely transparent nor completely opaque
                  (0.0 &amp;lt; alpha &amp;lt; 1.0).
                  &lt;/a&gt;
                  &lt;p&gt;
                  If an &lt;code&gt;IndexColorModel&lt;/code&gt; object has
                  a transparency value of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  then the &lt;code&gt;hasAlpha&lt;/code&gt;
                  and &lt;code&gt;getNumComponents&lt;/code&gt; methods
                  (both inherited from &lt;code&gt;ColorModel&lt;/code&gt;)
                  return false and 3, respectively.
                  For any other transparency value,
                  &lt;code&gt;hasAlpha&lt;/code&gt; returns true
                  and &lt;code&gt;getNumComponents&lt;/code&gt; returns 4.
                  &lt;p&gt;
                  &lt;a name=&quot;index_values&quot;&gt;
                  The values used to index into the colormap are taken from the least
                  significant &lt;em&gt;n&lt;/em&gt; bits of pixel representations where
                  &lt;em&gt;n&lt;/em&gt; is based on the pixel size specified in the constructor.
                  For pixel sizes smaller than 8 bits, &lt;em&gt;n&lt;/em&gt; is rounded up to a
                  power of two (3 becomes 4 and 5,6,7 become 8).
                  For pixel sizes between 8 and 16 bits, &lt;em&gt;n&lt;/em&gt; is equal to the
                  pixel size.
                  Pixel sizes larger than 16 bits are not supported by this class.
                  Higher order bits beyond &lt;em&gt;n&lt;/em&gt; are ignored in pixel representations.
                  Index values greater than or equal to the map size, but less than
                  2&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;, are undefined and return 0 for all color and
                  alpha components.
                  &lt;p&gt;
                  For those methods that use a primitive array pixel representation of
                  type &lt;code&gt;transferType&lt;/code&gt;, the array length is always one.
                  The transfer types supported are &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; and
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.  A single int pixel
                  representation is valid for all objects of this class, since it is
                  always possible to represent pixel values used with this class in a
                  single int.  Therefore, methods that use this representation do
                  not throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; due to an invalid
                  pixel value.
                  &lt;p&gt;
                  Many of the methods in this class are final.  The reason for
                  this is that the underlying native graphics code makes assumptions
                  about the layout and operation of this class and those assumptions
                  are reflected in the implementations of the methods here that are
                  marked final.  You can subclass this class for other reasons, but
                  you cannot override or modify the behaviour of those methods.                
                <see>
                    ColorModel                    
                </see>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    DataBuffer                    
                </see>
            </javadoc>
            <declaration name="rgb" type="int" line="125"/>
            <declaration name="map_size" type="int" line="126"/>
            <declaration name="pixel_mask" type="int" line="127"/>
            <declaration name="transparent_index" type="int" line="128"/>
            <declaration name="allgrayopaque" type="boolean" line="129"/>
            <declaration name="validBits" type="BigInteger" line="130"/>
            <declaration name="colorData" type="sun.awt.image.BufImgSurfaceData.ICMColorData" line="132"/>
            <declaration name="opaqueBits" type="int[]" line="134"/>
            <declaration name="alphaBits" type="int[]" line="135"/>
            <method name="initIDs" type="void" line="137"/>
            <scope line="138"/>
            <javadoc line="142">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from the specified
                  arrays of red, green, and blue components.  Pixels described
                  by this color model all have alpha components of 255
                  unnormalized (1.0&amp;nbsp;normalized), which means they
                  are fully opaque.  All of the arrays specifying the color
                  components must have at least the specified number of entries.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  Since there is no alpha information in any of the arguments
                  to this constructor, the transparency value is always
                  &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;.
                  The transfer type is the smallest of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;
                  or &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt; that can hold a single pixel.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    r         the array of red color components                    
                </param>
                <param>
                    g         the array of green color components                    
                </param>
                <param>
                    b         the array of blue color components                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less
                      than 1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="166">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="r" type="byte"/>
                    <param name="g" type="byte"/>
                    <param name="b" type="byte"/>
                </params>
                <scope line="171"/>
            </method>
            <javadoc line="179">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from the given arrays
                  of red, green, and blue components.  Pixels described by this color
                  model all have alpha components of 255 unnormalized
                  (1.0&amp;nbsp;normalized), which means they are fully opaque, except
                  for the indicated pixel to be made transparent.  All of the arrays
                  specifying the color components must have at least the specified
                  number of entries.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be &lt;code&gt;Transparency.OPAQUE&lt;/code&gt; or
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt; depending on the arguments, as
                  specified in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.
                  The transfer type is the smallest of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;
                  or &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt; that can hold a
                  single pixel.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    r         the array of red color components                    
                </param>
                <param>
                    g         the array of green color components                    
                </param>
                <param>
                    b         the array of blue color components                    
                </param>
                <param>
                    trans     the index of the transparent pixel                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less than
                      1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less than
                      1                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="206">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="r" type="byte"/>
                    <param name="g" type="byte"/>
                    <param name="b" type="byte"/>
                    <param name="trans" type="int"/>
                </params>
                <scope line="211"/>
            </method>
            <javadoc line="220">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from the given
                  arrays of red, green, blue and alpha components.  All of the
                  arrays specifying the components must have at least the specified
                  number of entries.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be any of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt;,
                  or &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;
                  depending on the arguments, as specified
                  in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.
                  The transfer type is the smallest of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;
                  or &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt; that can hold a single pixel.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    r         the array of red color components                    
                </param>
                <param>
                    g         the array of green color components                    
                </param>
                <param>
                    b         the array of blue color components                    
                </param>
                <param>
                    a         the array of alpha value components                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less
                      than 1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="245">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="r" type="byte"/>
                    <param name="g" type="byte"/>
                    <param name="b" type="byte"/>
                    <param name="a" type="byte"/>
                </params>
                <scope line="250"/>
            </method>
            <javadoc line="258">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from a single
                  array of interleaved red, green, blue and optional alpha
                  components.  The array must have enough values in it to
                  fill all of the needed component arrays of the specified
                  size.  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be any of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt;,
                  or &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;
                  depending on the arguments, as specified
                  in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.
                  The transfer type is the smallest of
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; or &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;
                  that can hold a single pixel.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    cmap      the array of color components                    
                </param>
                <param>
                    start     the starting offset of the first color component                    
                </param>
                <param>
                    hasalpha  indicates whether alpha values are contained in
                      the &lt;code&gt;cmap&lt;/code&gt; array                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less
                      than 1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less
                      than 1                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="285">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="cmap" type="byte"/>
                    <param name="start" type="int"/>
                    <param name="hasalpha" type="boolean"/>
                </params>
                <scope line="287"/>
            </method>
            <javadoc line="293">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from a single array of
                  interleaved red, green, blue and optional alpha components.  The
                  specified transparent index represents a pixel that is made
                  entirely transparent regardless of any alpha value specified
                  for it.  The array must have enough values in it to fill all
                  of the needed component arrays of the specified size.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be any of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt;,
                  or &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;
                  depending on the arguments, as specified
                  in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.
                  The transfer type is the smallest of
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; or &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;
                  that can hold a single pixel.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    cmap      the array of color components                    
                </param>
                <param>
                    start     the starting offset of the first color component                    
                </param>
                <param>
                    hasalpha  indicates whether alpha values are contained in
                      the &lt;code&gt;cmap&lt;/code&gt; array                    
                </param>
                <param>
                    trans     the index of the fully transparent pixel                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less than
                      1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less than
                      1                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="322">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="cmap" type="byte"/>
                    <param name="start" type="int"/>
                    <param name="hasalpha" type="boolean"/>
                    <param name="trans" type="int"/>
                </params>
                <comment line="324">
                    REMIND: This assumes the ordering: RGB[A]                    
                </comment>
                <scope line="329"/>
                <scope line="333"/>
                <declaration name="j" type="int" line="339"/>
                <declaration name="alpha" type="int" line="340"/>
                <declaration name="allgray" type="boolean" line="341"/>
                <declaration name="transparency" type="int" line="342"/>
                <scope line="343">
                    <declaration name="r" type="int" line="344"/>
                    <declaration name="g" type="int" line="345"/>
                    <declaration name="b" type="int" line="346"/>
                    <scope line="348">
                        <scope line="350">
                            <scope line="351">
                                <scope line="352"/>
                                <scope line="355"/>
                            </scope>
                            <scope line="358"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="372">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from an array of
                  ints where each int is comprised of red, green, blue, and
                  optional alpha components in the default RGB color model format.
                  The specified transparent index represents a pixel that is made
                  entirely transparent regardless of any alpha value specified
                  for it.  The array must have enough values in it to fill all
                  of the needed component arrays of the specified size.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be any of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt;,
                  or &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;
                  depending on the arguments, as specified
                  in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.                
                <param>
                    bits      the number of bits each pixel occupies                    
                </param>
                <param>
                    size      the size of the color component arrays                    
                </param>
                <param>
                    cmap      the array of color components                    
                </param>
                <param>
                    start     the starting offset of the first color component                    
                </param>
                <param>
                    hasalpha  indicates whether alpha values are contained in
                      the &lt;code&gt;cmap&lt;/code&gt; array                    
                </param>
                <param>
                    trans     the index of the fully transparent pixel                    
                </param>
                <param>
                    transferType the data type of the array used to represent
                      pixel values.  The data type must be either
                      &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less
                      than 1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less
                      than 1                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;transferType&lt;/code&gt; is not
                      one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="407">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="cmap" type="int"/>
                    <param name="start" type="int"/>
                    <param name="hasalpha" type="boolean"/>
                    <param name="trans" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
                <comment line="409">
                    REMIND: This assumes the ordering: RGB[A]                    
                </comment>
                <scope line="414"/>
                <scope line="418"/>
                <scope line="423"/>
            </method>
            <javadoc line="433">
                Constructs an &lt;code&gt;IndexColorModel&lt;/code&gt; from an
                  &lt;code&gt;int&lt;/code&gt; array where each &lt;code&gt;int&lt;/code&gt; is
                  comprised of red, green, blue, and alpha
                  components in the default RGB color model format.
                  The array must have enough values in it to fill all
                  of the needed component arrays of the specified size.
                  The &lt;code&gt;ColorSpace&lt;/code&gt; is the default sRGB space.
                  The transparency value may be any of &lt;code&gt;Transparency.OPAQUE&lt;/code&gt;,
                  &lt;code&gt;Transparency.BITMASK&lt;/code&gt;,
                  or &lt;code&gt;Transparency.TRANSLUCENT&lt;/code&gt;
                  depending on the arguments, as specified
                  in the &lt;a href=&quot;#transparency&quot;&gt;class description&lt;/a&gt; above.
                  The transfer type must be one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;.
                  The &lt;code&gt;BigInteger&lt;/code&gt; object specifies the valid/invalid pixels
                  in the &lt;code&gt;cmap&lt;/code&gt; array.  A pixel is valid if the
                  &lt;code&gt;BigInteger&lt;/code&gt; value at that index is set, and is invalid
                  if the &lt;code&gt;BigInteger&lt;/code&gt; bit  at that index is not set.                
                <param>
                    bits the number of bits each pixel occupies                    
                </param>
                <param>
                    size the size of the color component array                    
                </param>
                <param>
                    cmap the array of color components                    
                </param>
                <param>
                    start the starting offset of the first color component                    
                </param>
                <param>
                    transferType the specified data type                    
                </param>
                <param>
                    validBits a &lt;code&gt;BigInteger&lt;/code&gt; object.  If a bit is
                      set in the BigInteger, the pixel at that index is valid.
                      If a bit is not set, the pixel at that index
                      is considered invalid.  If null, all pixels are valid.
                      Only bits from 0 to the map size are considered.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less
                      than 1 or greater than 16                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;size&lt;/code&gt; is less
                      than 1                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;transferType&lt;/code&gt; is not
                      one of &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt; or
                      &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="IndexColorModel" type="constructor" line="473">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                    <param name="cmap" type="int"/>
                    <param name="start" type="int"/>
                    <param name="transferType" type="int"/>
                    <param name="validBits" type="BigInteger"/>
                </params>
                <comment line="495">
                    Check to see if it is all valid                    
                </comment>
                <scope line="479"/>
                <scope line="483"/>
                <scope line="488"/>
                <scope line="493">
                    <scope line="495">
                        <scope line="496"/>
                    </scope>
                </scope>
            </method>
            <method name="setRGBs" type="void" line="507">
                <params>
                    <param name="size" type="int"/>
                    <param name="r" type="byte"/>
                    <param name="g" type="byte"/>
                    <param name="b" type="byte"/>
                    <param name="a" type="byte"/>
                </params>
                <scope line="508"/>
                <declaration name="alpha" type="int" line="514"/>
                <declaration name="transparency" type="int" line="515"/>
                <declaration name="allgray" type="boolean" line="516"/>
                <scope line="517">
                    <declaration name="rc" type="int" line="518"/>
                    <declaration name="gc" type="int" line="519"/>
                    <declaration name="bc" type="int" line="520"/>
                    <scope line="522">
                        <scope line="524">
                            <scope line="525">
                                <scope line="526"/>
                                <scope line="529"/>
                            </scope>
                            <scope line="532"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="setRGBs" type="void" line="544">
                <params>
                    <param name="size" type="int"/>
                    <param name="cmap" type="int"/>
                    <param name="start" type="int"/>
                    <param name="hasalpha" type="boolean"/>
                </params>
                <declaration name="j" type="int" line="547"/>
                <declaration name="transparency" type="int" line="548"/>
                <declaration name="allgray" type="boolean" line="549"/>
                <declaration name="validBits" type="BigInteger" line="550"/>
                <scope line="551">
                    <scope line="552"/>
                    <declaration name="cmaprgb" type="int" line="555"/>
                    <declaration name="r" type="int" line="556"/>
                    <declaration name="g" type="int" line="557"/>
                    <declaration name="b" type="int" line="558"/>
                    <scope line="560">
                        <declaration name="alpha" type="int" line="561"/>
                        <scope line="562">
                            <scope line="563">
                                <scope line="564"/>
                                <scope line="567"/>
                            </scope>
                            <scope line="570"/>
                        </scope>
                    </scope>
                    <scope line="575"/>
                </scope>
            </method>
            <method name="calcRealMapSize" type="int" line="584">
                <params>
                    <param name="bits" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <declaration name="newSize" type="int" line="585"/>
            </method>
            <method name="getAllValid" type="BigInteger" line="589">
                <declaration name="numbytes" type="int" line="590"/>
                <declaration name="valid" type="byte[]" line="591"/>
            </method>
            <javadoc line="598">
                Returns the transparency.  Returns either OPAQUE, BITMASK,
                  or TRANSLUCENT                
                <return>
                    the transparency of this &lt;code&gt;IndexColorModel&lt;/code&gt;                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="606"/>
            <javadoc line="610">
                Returns an array of the number of bits for each color/alpha component.
                  The array contains the color components in the order red, green,
                  blue, followed by the alpha component, if present.                
                <return>
                    an array containing the number of bits of each color
                      and alpha component of this &lt;code&gt;IndexColorModel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getComponentSize" type="int[]" line="617">
                <scope line="618">
                    <scope line="619"/>
                    <scope line="623"/>
                </scope>
            </method>
            <javadoc line="631">
                Returns the size of the color/alpha component arrays in this
                  &lt;code&gt;IndexColorModel&lt;/code&gt;.                
                <return>
                    the size of the color and alpha component arrays.                    
                </return>
            </javadoc>
            <method name="getMapSize" type="int" line="636"/>
            <javadoc line="640">
                Returns the index of a transparent pixel in this
                  &lt;code&gt;IndexColorModel&lt;/code&gt; or -1 if there is no pixel
                  with an alpha value of 0.  If a transparent pixel was
                  explicitly specified in one of the constructors by its
                  index, then that index will be preferred, otherwise,
                  the index of any pixel which happens to be fully transparent
                  may be returned.                
                <return>
                    the index of a transparent pixel in this
                      &lt;code&gt;IndexColorModel&lt;/code&gt; object, or -1 if there
                      is no such pixel                    
                </return>
            </javadoc>
            <method name="getTransparentPixel" type="int" line="652"/>
            <javadoc line="656">
                Copies the array of red color components into the specified array.
                  Only the initial entries of the array as specified by{@link #getMapSize() getMapSize} are written.                
                <param>
                    r the specified array into which the elements of the
                      array of red color components are copied                    
                </param>
            </javadoc>
            <method name="getReds" type="void" line="663">
                <params>
                    <param name="r" type="byte"/>
                </params>
                <scope line="664"/>
            </method>
            <javadoc line="669">
                Copies the array of green color components into the specified array.
                  Only the initial entries of the array as specified by
                  &lt;code&gt;getMapSize&lt;/code&gt; are written.                
                <param>
                    g the specified array into which the elements of the
                      array of green color components are copied                    
                </param>
            </javadoc>
            <method name="getGreens" type="void" line="676">
                <params>
                    <param name="g" type="byte"/>
                </params>
                <scope line="677"/>
            </method>
            <javadoc line="682">
                Copies the array of blue color components into the specified array.
                  Only the initial entries of the array as specified by
                  &lt;code&gt;getMapSize&lt;/code&gt; are written.                
                <param>
                    b the specified array into which the elements of the
                      array of blue color components are copied                    
                </param>
            </javadoc>
            <method name="getBlues" type="void" line="689">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="690"/>
            </method>
            <javadoc line="695">
                Copies the array of alpha transparency components into the
                  specified array.  Only the initial entries of the array as specified
                  by &lt;code&gt;getMapSize&lt;/code&gt; are written.                
                <param>
                    a the specified array into which the elements of the
                      array of alpha components are copied                    
                </param>
            </javadoc>
            <method name="getAlphas" type="void" line="702">
                <params>
                    <param name="a" type="byte"/>
                </params>
                <scope line="703"/>
            </method>
            <javadoc line="708">
                Converts data for each index from the color and alpha component
                  arrays to an int in the default RGB ColorModel format and copies
                  the resulting 32-bit ARGB values into the specified array.  Only
                  the initial entries of the array as specified by
                  &lt;code&gt;getMapSize&lt;/code&gt; are
                  written.                
                <param>
                    rgb the specified array into which the converted ARGB
                      values from this array of color and alpha components
                      are copied.                    
                </param>
            </javadoc>
            <method name="getRGBs" type="void" line="719">
                <params>
                    <param name="rgb" type="int"/>
                </params>
            </method>
            <method name="setTransparentPixel" type="void" line="723">
                <params>
                    <param name="trans" type="int"/>
                </params>
                <scope line="724">
                    <scope line="728"/>
                </scope>
            </method>
            <method name="setTransparency" type="void" line="734">
                <params>
                    <param name="transparency" type="int"/>
                </params>
                <scope line="735">
                    <scope line="737"/>
                    <scope line="741"/>
                </scope>
            </method>
            <javadoc line="749">
                This method is called from the constructors to set the pixel_mask
                  value, which is based on the value of pixel_bits.  The pixel_mask
                  value is used to mask off the pixel parameters for methods such
                  as getRed(), getGreen(), getBlue(), getAlpha(), and getRGB().                
            </javadoc>
            <method name="calculatePixelMask" type="void" line="755">
                <comment line="757">
                    Note that we adjust the mask so that our masking behavior here
                     is consistent with that of our native rendering loops.                    
                </comment>
                <declaration name="maskbits" type="int" line="758"/>
                <scope line="759"/>
                <scope line="761"/>
            </method>
            <javadoc line="767">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
                  is specified as an int.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of the pixel value, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  calculate the returned value.
                  The returned value is a non pre-multiplied value.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the red color component for the specified pixel                    
                </return>
            </javadoc>
            <method name="getRed" type="int" line="778">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="782">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
                  is specified as an int.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of the pixel value, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  calculate the returned value.
                  The returned value is a non pre-multiplied value.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the green color component for the specified pixel                    
                </return>
            </javadoc>
            <method name="getGreen" type="int" line="793">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="797">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
                  is specified as an int.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of the pixel value, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  calculate the returned value.
                  The returned value is a non pre-multiplied value.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the blue color component for the specified pixel                    
                </return>
            </javadoc>
            <method name="getBlue" type="int" line="808">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="812">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.  The pixel value is specified as an int.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of the pixel value, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  calculate the returned value.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the alpha component for the specified pixel                    
                </return>
            </javadoc>
            <method name="getAlpha" type="int" line="821">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="825">
                Returns the color/alpha components of the pixel in the default
                  RGB color model format.  The pixel value is specified as an int.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of the pixel value, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  calculate the returned value.
                  The returned value is in a non pre-multiplied format.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the color and alpha components of the specified pixel                    
                </return>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="836">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <declaration name="CACHESIZE" type="int" line="840"/>
            <declaration name="lookupcache" type="int" line="841"/>
            <javadoc line="843">
                Returns a data element array representation of a pixel in this
                  ColorModel, given an integer pixel representation in the
                  default RGB color model.  This array can then be passed to the{@link WritableRaster#setDataElements(int,int,java.lang.Object) setDataElements}method of a {@link WritableRaster} object.  If the pixel variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array is allocated.  If &lt;code&gt;pixel&lt;/code&gt;
                  is not &lt;code&gt;null&lt;/code&gt;, it must be
                  a primitive array of type &lt;code&gt;transferType&lt;/code&gt;; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel array is returned.
                  &lt;p&gt;
                  Since &lt;code&gt;IndexColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    rgb the integer pixel representation in the default RGB
                      color model                    
                </param>
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    an array representation of the specified pixel in this
                      &lt;code&gt;IndexColorModel&lt;/code&gt;.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if &lt;code&gt;transferType&lt;/code&gt;
                      is invalid                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="877">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="pixel" type="Object"/>
                </params>
                <comment line="885">
                    Note that pixels are stored at lookupcache[2*i]
                     and the rgb that was searched is stored at
                     lookupcache[2*i+1].  Also, the pixel is first
                     inverted using the unary complement operator
                     before storing in the cache so it can never be 0.                    
                </comment>
                <comment line="900">
                    IndexColorModel objects are all tagged as
                     non-premultiplied so ignore the alpha value
                     of the incoming color, convert the
                     non-premultiplied color components to a
                     grayscale value and search for the closest
                     gray value in the palette.  Since all colors
                     in the palette are gray, we only need compare
                     to one of the color components for a match
                     using a simple linear distance formula.                    
                </comment>
                <comment line="916">
                    For allgrayopaque colormaps, entries are 0
                     iff they are an invalid color and should be
                     ignored during color searches.                    
                </comment>
                <comment line="932">
                    IndexColorModel objects are all tagged as
                     non-premultiplied so ignore the alpha value
                     of the incoming color and search for closest
                     color match independently using a 3 component
                     Euclidean distance formula.
                     For opaque colormaps, palette entries are 0
                     iff they are an invalid color and should be
                     ignored during color searches.
                     As an optimization, exact color searches are
                     likely to be fairly common in opaque colormaps
                     so first we will do a quick search for an
                     exact match.                    
                </comment>
                <comment line="981">
                    Special case - transparent color maps to the
                     specified transparent pixel, if there is one                    
                </comment>
                <comment line="986">
                    IndexColorModel objects are all tagged as
                     non-premultiplied so use non-premultiplied
                     color components in the distance calculations.
                     Look for closest match using a 4 component
                     Euclidean distance formula.                    
                </comment>
                <declaration name="red" type="int" line="878"/>
                <declaration name="green" type="int" line="879"/>
                <declaration name="blue" type="int" line="880"/>
                <declaration name="alpha" type="int" line="881"/>
                <declaration name="pix" type="int" line="882"/>
                <scope line="889">
                    <scope line="890"/>
                    <scope line="893"/>
                </scope>
                <scope line="898">
                    <declaration name="minDist" type="int" line="909"/>
                    <declaration name="d" type="int" line="910"/>
                    <declaration name="gray" type="int" line="911"/>
                    <scope line="913">
                        <scope line="914"/>
                        <scope line="922">
                            <scope line="924"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="930">
                    <declaration name="smallestError" type="int" line="944"/>
                    <declaration name="lut" type="int" line="945"/>
                    <declaration name="lutrgb" type="int" line="946"/>
                    <scope line="947">
                        <scope line="949"/>
                    </scope>
                    <scope line="956">
                        <scope line="957">
                            <scope line="959"/>
                            <declaration name="tmp" type="int" line="963"/>
                            <declaration name="currentError" type="int" line="964"/>
                            <scope line="965">
                                <scope line="968">
                                    <scope line="971"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="979"/>
                <scope line="984">
                    <declaration name="smallestError" type="int" line="991"/>
                    <declaration name="lut" type="int" line="992"/>
                    <scope line="993">
                        <declaration name="lutrgb" type="int" line="994"/>
                        <scope line="995">
                            <scope line="996"/>
                        </scope>
                        <declaration name="tmp" type="int" line="1003"/>
                        <declaration name="currentError" type="int" line="1004"/>
                        <scope line="1005">
                            <scope line="1008">
                                <scope line="1011">
                                    <scope line="1016"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="installpixel" type="Object" line="1031">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="pix" type="int"/>
                </params>
                <declaration name="intObj" type="int[]" line="1034"/>
                <scope line="1035"/>
                <scope line="1037"/>
                <declaration name="byteObj" type="byte[]" line="1043"/>
                <scope line="1044"/>
                <scope line="1046"/>
                <declaration name="shortObj" type="short[]" line="1052"/>
                <scope line="1053"/>
                <scope line="1055"/>
            </method>
            <javadoc line="1067">
                Returns an array of unnormalized color/alpha components for a
                  specified pixel in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel value
                  is specified as an int.  If the &lt;code&gt;components&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;,
                  a new array is allocated that contains
                  &lt;code&gt;offset + getNumComponents()&lt;/code&gt; elements.
                  The &lt;code&gt;components&lt;/code&gt; array is returned,
                  with the alpha component included
                  only if &lt;code&gt;hasAlpha&lt;/code&gt; returns true.
                  Color/alpha components are stored in the &lt;code&gt;components&lt;/code&gt; array starting
                  at &lt;code&gt;offset&lt;/code&gt; even if the array is allocated by this method.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  is thrown if  the &lt;code&gt;components&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt; and is
                  not large enough to hold all the color and alpha components
                  starting at &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components the array to receive the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start storing the color and alpha components                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
                <see>
                    ColorModel#hasAlpha                    
                </see>
                <see>
                    ColorModel#getNumComponents                    
                </see>
            </javadoc>
            <method name="getComponents" type="int[]" line="1092">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="1098">
                    REMIND: Needs to change if different color space                    
                </comment>
                <scope line="1093"/>
                <scope line="1101"/>
            </method>
            <javadoc line="1108">
                Returns an array of unnormalized color/alpha components for
                  a specified pixel in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel
                  value is specified by an array of data elements of type
                  &lt;code&gt;transferType&lt;/code&gt; passed in as an object reference.
                  If &lt;code&gt;pixel&lt;/code&gt; is not a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;, a &lt;code&gt;ClassCastException&lt;/code&gt;
                  is thrown.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  is thrown if &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold
                  a pixel value for this &lt;code&gt;ColorModel&lt;/code&gt;.  If the
                  &lt;code&gt;components&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  is allocated that contains
                  &lt;code&gt;offset + getNumComponents()&lt;/code&gt; elements.
                  The &lt;code&gt;components&lt;/code&gt; array is returned,
                  with the alpha component included
                  only if &lt;code&gt;hasAlpha&lt;/code&gt; returns true.
                  Color/alpha components are stored in the &lt;code&gt;components&lt;/code&gt;
                  array starting at &lt;code&gt;offset&lt;/code&gt; even if the array is
                  allocated by this method.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is also
                  thrown if  the &lt;code&gt;components&lt;/code&gt; array is not
                  &lt;code&gt;null&lt;/code&gt; and is not large enough to hold all the color
                  and alpha components starting at &lt;code&gt;offset&lt;/code&gt;.
                  &lt;p&gt;
                  Since &lt;code&gt;IndexColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components an array that receives the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the index into the &lt;code&gt;components&lt;/code&gt; array at
                      which to begin storing the color and alpha components of the
                      specified pixel                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;pixel&lt;/code&gt;
                      is not large enough to hold a pixel value for this
                      &lt;code&gt;ColorModel&lt;/code&gt; or if the
                      &lt;code&gt;components&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt;
                      and is not large enough to hold all the color
                      and alpha components starting at &lt;code&gt;offset&lt;/code&gt;                    
                </throws>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt; is not a
                      primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if &lt;code&gt;transferType&lt;/code&gt;
                      is not one of the supported transer types                    
                </throws>
                <see>
                    ColorModel#hasAlpha                    
                </see>
                <see>
                    ColorModel#getNumComponents                    
                </see>
            </javadoc>
            <method name="getComponents" type="int[]" line="1158">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="intpixel" type="int" line="1159"/>
                <declaration name="bdata" type="byte" line="1162"/>
                <declaration name="sdata" type="short" line="1166"/>
                <declaration name="idata" type="int" line="1170"/>
            </method>
            <javadoc line="1180">
                Returns a pixel value represented as an int in this
                  &lt;code&gt;ColorModel&lt;/code&gt; given an array of unnormalized
                  color/alpha components.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  is thrown if the &lt;code&gt;components&lt;/code&gt; array is not large
                  enough to hold all of the color and alpha components starting
                  at &lt;code&gt;offset&lt;/code&gt;.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; can be subclassed, subclasses inherit the
                  implementation of this method and if they don&apos;t override it then
                  they throw an exception if they use an unsupported transferType.                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving the color and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; pixel value in this
                      &lt;code&gt;ColorModel&lt;/code&gt; corresponding to the specified components.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      the &lt;code&gt;components&lt;/code&gt; array is not large enough to
                      hold all of the color and alpha components starting at
                      &lt;code&gt;offset&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if &lt;code&gt;transferType&lt;/code&gt;
                      is invalid                    
                </throws>
            </javadoc>
            <method name="getDataElement" type="int" line="1204">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="rgb" type="int" line="1205"/>
                <scope line="1207"/>
                <scope line="1210"/>
                <declaration name="inData" type="Object" line="1213"/>
                <declaration name="pixel" type="int" line="1214"/>
                <declaration name="bdata" type="byte" line="1217"/>
                <declaration name="sdata" type="short" line="1221"/>
                <declaration name="idata" type="int" line="1225"/>
            </method>
            <javadoc line="1235">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt; given an array of unnormalized color/alpha
                  components.  This array can then be passed to the
                  &lt;code&gt;setDataElements&lt;/code&gt; method of a &lt;code&gt;WritableRaster&lt;/code&gt;
                  object.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not large enough to hold all of the
                  color and alpha components starting at &lt;code&gt;offset&lt;/code&gt;.
                  If the pixel variable is &lt;code&gt;null&lt;/code&gt;, a new array
                  is allocated.  If &lt;code&gt;pixel&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;,
                  it must be a primitive array of type &lt;code&gt;transferType&lt;/code&gt;;
                  otherwise, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if pixel
                  is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt;
                  Since &lt;code&gt;IndexColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving color and alpha components                    
                </param>
                <param>
                    pixel the &lt;code&gt;Object&lt;/code&gt; representing an array of color
                      and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; representing an array of color and
                      alpha components.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt; or the &lt;code&gt;components&lt;/code&gt;
                      array is not large enough to hold all of the color and alpha
                      components starting at &lt;code&gt;offset&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if &lt;code&gt;transferType&lt;/code&gt;
                      is not one of the supported transer types                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="1277">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="pixel" type="Object"/>
                </params>
                <declaration name="rgb" type="int" line="1278"/>
                <scope line="1280"/>
                <scope line="1283"/>
            </method>
            <javadoc line="1289">
                Creates a &lt;code&gt;WritableRaster&lt;/code&gt; with the specified width
                  and height that has a data layout (&lt;code&gt;SampleModel&lt;/code&gt;)
                  compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.  This method
                  only works for color models with 16 or fewer bits per pixel.
                  &lt;p&gt;
                  Since &lt;code&gt;IndexColorModel&lt;/code&gt; can be subclassed, any
                  subclass that supports greater than 16 bits per pixel must
                  override this method.                
                <param>
                    w the width to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <param>
                    h the height to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; object with the specified
                      width and height.                    
                </return>
                <throws>
                    UnsupportedOperationException if the number of bits in a
                      pixel is greater than 16                    
                </throws>
                <see>
                    WritableRaster                    
                </see>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1308">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="1313">
                    TYPE_BINARY                    
                </comment>
                <declaration name="raster" type="WritableRaster" line="1309"/>
                <scope line="1311"/>
                <scope line="1316"/>
                <scope line="1320"/>
                <scope line="1324"/>
            </method>
            <javadoc line="1332">
                Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; if it
                  is not compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    raster the {@link Raster} object to test for compatibility                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                      with this &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isCompatibleRaster" type="boolean" line="1341">
                <params>
                    <param name="raster" type="Raster"/>
                </params>
                <declaration name="size" type="int" line="1343"/>
            </method>
            <javadoc line="1348">
                Creates a &lt;code&gt;SampleModel&lt;/code&gt; with the specified
                  width and height that has a data layout compatible with
                  this &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    w the width to apply to the new &lt;code&gt;SampleModel&lt;/code&gt;                    
                </param>
                <param>
                    h the height to apply to the new &lt;code&gt;SampleModel&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; object with the specified
                      width and height.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;w&lt;/code&gt; or
                      &lt;code&gt;h&lt;/code&gt; is not greater than 0                    
                </throws>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="1360">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="off" type="int[]" line="1361"/>
                <scope line="1363"/>
                <scope line="1367"/>
            </method>
            <javadoc line="1373">
                Checks if the specified &lt;code&gt;SampleModel&lt;/code&gt; is compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt;.  If &lt;code&gt;sm&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, this method returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    sm the specified &lt;code&gt;SampleModel&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;SampleModel&lt;/code&gt;
                      is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="isCompatibleSampleModel" type="boolean" line="1384">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <comment line="1386">
                    fix 4238629                    
                </comment>
                <comment line="1392">
                    Transfer type must be the same                    
                </comment>
                <scope line="1387"/>
                <scope line="1392"/>
                <scope line="1396"/>
            </method>
            <javadoc line="1403">
                Returns a new &lt;code&gt;BufferedImage&lt;/code&gt; of TYPE_INT_ARGB or
                  TYPE_INT_RGB that has a &lt;code&gt;Raster&lt;/code&gt; with pixel data
                  computed by expanding the indices in the source &lt;code&gt;Raster&lt;/code&gt;
                  using the color/alpha component arrays of this &lt;code&gt;ColorModel&lt;/code&gt;.
                  Only the lower &lt;em&gt;n&lt;/em&gt; bits of each index value in the source
                  &lt;code&gt;Raster&lt;/code&gt;, as specified in the
                  &lt;a href=&quot;#index_values&quot;&gt;class description&lt;/a&gt; above, are used to
                  compute the color/alpha values in the returned image.
                  If &lt;code&gt;forceARGB&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, a TYPE_INT_ARGB image is
                  returned regardless of whether or not this &lt;code&gt;ColorModel&lt;/code&gt;
                  has an alpha component array or a transparent pixel.                
                <param>
                    raster the specified &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <param>
                    forceARGB if &lt;code&gt;true&lt;/code&gt;, the returned
                      &lt;code&gt;BufferedImage&lt;/code&gt; is TYPE_INT_ARGB; otherwise it is
                      TYPE_INT_RGB                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; created with the specified
                      &lt;code&gt;Raster&lt;/code&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if the raster argument is not
                      compatible with this IndexColorModel                    
                </throws>
            </javadoc>
            <method name="convertToIntDiscrete" type="BufferedImage" line="1425">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="forceARGB" type="boolean"/>
                </params>
                <declaration name="cm" type="ColorModel" line="1426"/>
                <scope line="1428"/>
                <scope line="1432"/>
                <scope line="1435"/>
                <scope line="1439"/>
                <declaration name="w" type="int" line="1443"/>
                <declaration name="h" type="int" line="1444"/>
                <declaration name="discreteRaster" type="WritableRaster" line="1445"/>
                <declaration name="obj" type="Object" line="1447"/>
                <declaration name="data" type="int[]" line="1448"/>
                <declaration name="rX" type="int" line="1450"/>
                <declaration name="rY" type="int" line="1451"/>
                <scope line="1453">
                    <scope line="1455"/>
                    <scope line="1457"/>
                    <scope line="1460"/>
                </scope>
            </method>
            <javadoc line="1469">
                Returns whether or not the pixel is valid.                
                <param>
                    pixel the specified pixel value                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;pixel&lt;/code&gt;
                      is valid; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isValid" type="boolean" line="1476">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="1481">
                Returns whether or not all of the pixels are valid.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if all pixels are valid;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isValid" type="boolean" line="1487"/>
            <javadoc line="1491">
                Returns a &lt;code&gt;BigInteger&lt;/code&gt; that indicates the valid/invalid
                  pixels in the colormap.  A bit is valid if the
                  &lt;code&gt;BigInteger&lt;/code&gt; value at that index is set, and is invalid
                  if the &lt;code&gt;BigInteger&lt;/code&gt; value at that index is not set.
                  The only valid ranges to query in the &lt;code&gt;BigInteger&lt;/code&gt; are
                  between 0 and the map size.                
                <return>
                    a &lt;code&gt;BigInteger&lt;/code&gt; indicating the valid/invalid pixels.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getValidPixels" type="BigInteger" line="1501">
                <scope line="1502"/>
                <scope line="1505"/>
            </method>
            <javadoc line="1510">
                Disposes of system resources associated with this
                  &lt;code&gt;ColorModel&lt;/code&gt; once this &lt;code&gt;ColorModel&lt;/code&gt; is no
                  longer referenced.                
            </javadoc>
            <method name="finalize" type="void" line="1515"/>
            <javadoc line="1518">
                Returns the &lt;code&gt;String&lt;/code&gt; representation of the contents of
                  this &lt;code&gt;ColorModel&lt;/code&gt;object.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the contents of this
                      &lt;code&gt;ColorModel&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1524"/>
        </class>
    </source>