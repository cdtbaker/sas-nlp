<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <class name="PackedColorModel" line="31">
            <extends class="ColorModel"/>
            <comment line="259">
                A utility function to compute the mask offset and scalefactor,
                 store these and the mask in instance arrays, and verify that
                 the mask fits in the specified pixel size.                
            </comment>
            <javadoc line="31">
                The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract{@link ColorModel} class that works with pixel values which represent
                  color and alpha information as separate samples and which pack all
                  samples for a single pixel into a single int, short, or byte quantity.
                  This class can be used with an arbitrary {@link ColorSpace}.  The number of
                  color samples in the pixel values must be the same as the number of color
                  components in the &lt;code&gt;ColorSpace&lt;/code&gt;.  There can be a single alpha
                  sample.  The array length is always 1 for those methods that use a
                  primitive array pixel representation of type &lt;code&gt;transferType&lt;/code&gt;.
                  The transfer types supported are DataBuffer.TYPE_BYTE,
                  DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.
                  Color and alpha samples are stored in the single element of the array
                  in bits indicated by bit masks.  Each bit mask must be contiguous and
                  masks must not overlap.  The same masks apply to the single int
                  pixel representation used by other methods.  The correspondence of
                  masks and color/alpha samples is as follows:
                  &lt;ul&gt;
                  &lt;li&gt; Masks are identified by indices running from 0 through{@link ColorModel#getNumComponents() getNumComponents}&amp;nbsp;-&amp;nbsp;1.
                  &lt;li&gt; The first{@link ColorModel#getNumColorComponents() getNumColorComponents}indices refer to color samples.
                  &lt;li&gt; If an alpha sample is present, it corresponds the last index.
                  &lt;li&gt; The order of the color indices is specified
                  by the &lt;code&gt;ColorSpace&lt;/code&gt;.  Typically, this reflects the name of
                  the color space type (for example, TYPE_RGB), index 0
                  corresponds to red, index 1 to green, and index 2 to blue.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The translation from pixel values to color/alpha components for
                  display or processing purposes is a one-to-one correspondence of
                  samples to components.
                  A &lt;code&gt;PackedColorModel&lt;/code&gt; is typically used with image data
                  that uses masks to define packed samples.  For example, a
                  &lt;code&gt;PackedColorModel&lt;/code&gt; can be used in conjunction with a{@link SinglePixelPackedSampleModel} to construct a{@link BufferedImage}.  Normally the masks used by the{@link SampleModel} and the &lt;code&gt;ColorModel&lt;/code&gt; would be the same.
                  However, if they are different, the color interpretation of pixel data is
                  done according to the masks of the &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt;
                  A single &lt;code&gt;int&lt;/code&gt; pixel representation is valid for all objects
                  of this class since it is always possible to represent pixel values
                  used with this class in a single &lt;code&gt;int&lt;/code&gt;.  Therefore, methods
                  that use this representation do not throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; due to an invalid pixel value.
                  &lt;p&gt;
                  A subclass of &lt;code&gt;PackedColorModel&lt;/code&gt; is {@link DirectColorModel},
                  which is similar to an X11 TrueColor visual.                
                <see>
                    DirectColorModel                    
                </see>
                <see>
                    SinglePixelPackedSampleModel                    
                </see>
                <see>
                    BufferedImage                    
                </see>
            </javadoc>
            <declaration name="maskArray" type="int[]" line="88"/>
            <declaration name="maskOffsets" type="int[]" line="89"/>
            <declaration name="scaleFactors" type="float[]" line="90"/>
            <javadoc line="92">
                Constructs a &lt;code&gt;PackedColorModel&lt;/code&gt; from a color mask array,
                  which specifies which bits in an &lt;code&gt;int&lt;/code&gt; pixel representation
                  contain each of the color samples, and an alpha mask.  Color
                  components are in the specified &lt;code&gt;ColorSpace&lt;/code&gt;.  The length of
                  &lt;code&gt;colorMaskArray&lt;/code&gt; should be the number of components in
                  the &lt;code&gt;ColorSpace&lt;/code&gt;.  All of the bits in each mask
                  must be contiguous and fit in the specified number of least significant
                  bits of an &lt;code&gt;int&lt;/code&gt; pixel representation.  If the
                  &lt;code&gt;alphaMask&lt;/code&gt; is 0, there is no alpha.  If there is alpha,
                  the &lt;code&gt;boolean&lt;/code&gt; &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; specifies
                  how to interpret color and alpha samples in pixel values.  If the
                  &lt;code&gt;boolean&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, color samples are assumed
                  to have been multiplied by the alpha sample.  The transparency,
                  &lt;code&gt;trans&lt;/code&gt;, specifies what alpha values can be represented
                  by this color model.  The transfer type is the type of primitive
                  array used to represent pixel values.                
                <param>
                    space the specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    bits the number of bits in the pixel values                    
                </param>
                <param>
                    colorMaskArray array that specifies the masks representing
                      the bits of the pixel values that represent the color
                      components                    
                </param>
                <param>
                    alphaMask specifies the mask representing
                      the bits of the pixel values that represent the alpha
                      component                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if color samples are
                      premultiplied by the alpha sample; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    trans specifies the alpha value that can be represented by
                      this color model                    
                </param>
                <param>
                    transferType the type of array used to represent pixel values                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;bits&lt;/code&gt; is less than
                      1 or greater than 32                    
                </throws>
            </javadoc>
            <method name="PackedColorModel" type="constructor" line="128">
                <params>
                    <param name="space" type="ColorSpace"/>
                    <param name="bits" type="int"/>
                    <param name="colorMaskArray" type="int[]"/>
                    <param name="alphaMask" type="int"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="trans" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
                <comment line="143">
                    Get the mask offset and #bits                    
                </comment>
                <scope line="133"/>
                <scope line="141"/>
                <scope line="145">
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="153">
                Constructs a &lt;code&gt;PackedColorModel&lt;/code&gt; from the specified
                  masks which indicate which bits in an &lt;code&gt;int&lt;/code&gt; pixel
                  representation contain the alpha, red, green and blue color samples.
                  Color components are in the specified &lt;code&gt;ColorSpace&lt;/code&gt;, which
                  must be of type ColorSpace.TYPE_RGB.  All of the bits in each
                  mask must be contiguous and fit in the specified number of
                  least significant bits of an &lt;code&gt;int&lt;/code&gt; pixel representation.  If
                  &lt;code&gt;amask&lt;/code&gt; is 0, there is no alpha.  If there is alpha,
                  the &lt;code&gt;boolean&lt;/code&gt; &lt;code&gt;isAlphaPremultiplied&lt;/code&gt;
                  specifies how to interpret color and alpha samples
                  in pixel values.  If the &lt;code&gt;boolean&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,
                  color samples are assumed to have been multiplied by the alpha sample.
                  The transparency, &lt;code&gt;trans&lt;/code&gt;, specifies what alpha values
                  can be represented by this color model.
                  The transfer type is the type of primitive array used to represent
                  pixel values.                
                <param>
                    space the specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    bits the number of bits in the pixel values                    
                </param>
                <param>
                    rmask specifies the mask representing
                      the bits of the pixel values that represent the red
                      color component                    
                </param>
                <param>
                    gmask specifies the mask representing
                      the bits of the pixel values that represent the green
                      color component                    
                </param>
                <param>
                    bmask specifies the mask representing
                      the bits of the pixel values that represent
                      the blue color component                    
                </param>
                <param>
                    amask specifies the mask representing
                      the bits of the pixel values that represent
                      the alpha component                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if color samples are
                      premultiplied by the alpha sample; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    trans specifies the alpha value that can be represented by
                      this color model                    
                </param>
                <param>
                    transferType the type of array used to represent pixel values                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;space&lt;/code&gt; is not a
                      TYPE_RGB space                    
                </throws>
                <see>
                    ColorSpace                    
                </see>
            </javadoc>
            <method name="PackedColorModel" type="constructor" line="196">
                <params>
                    <param name="space" type="ColorSpace"/>
                    <param name="bits" type="int"/>
                    <param name="rmask" type="int"/>
                    <param name="gmask" type="int"/>
                    <param name="bmask" type="int"/>
                    <param name="amask" type="int"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="trans" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
                <scope line="202"/>
                <scope line="215">
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="223">
                Returns the mask indicating which bits in a pixel
                  contain the specified color/alpha sample.  For color
                  samples, &lt;code&gt;index&lt;/code&gt; corresponds to the placement of color
                  sample names in the color space.  Thus, an &lt;code&gt;index&lt;/code&gt;
                  equal to 0 for a CMYK ColorSpace would correspond to
                  Cyan and an &lt;code&gt;index&lt;/code&gt; equal to 1 would correspond to
                  Magenta.  If there is alpha, the alpha &lt;code&gt;index&lt;/code&gt; would be:
                  &lt;pre&gt;
                  alphaIndex = numComponents() - 1;
                  &lt;/pre&gt;                
                <param>
                    index the specified color or alpha sample                    
                </param>
                <return>
                    the mask, which indicates which bits of the &lt;code&gt;int&lt;/code&gt;
                      pixel representation contain the color or alpha sample specified
                      by &lt;code&gt;index&lt;/code&gt;.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is
                      greater than the number of components minus 1 in this
                      &lt;code&gt;PackedColorModel&lt;/code&gt; or if &lt;code&gt;index&lt;/code&gt; is
                      less than zero                    
                </throws>
            </javadoc>
            <method name="getMask" type="int" line="243">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="247">
                Returns a mask array indicating which bits in a pixel
                  contain the color and alpha samples.                
                <return>
                    the mask array , which indicates which bits of the
                      &lt;code&gt;int&lt;/code&gt; pixel
                      representation contain the color or alpha samples.                    
                </return>
            </javadoc>
            <method name="getMasks" type="int[]" line="254"/>
            <method name="DecomposeMask" type="void" line="263">
                <params>
                    <param name="mask" type="int"/>
                    <param name="idx" type="int"/>
                    <param name="componentName" type="String"/>
                </params>
                <comment line="268">
                    Store the mask                    
                </comment>
                <comment line="271">
                    Now find the shift                    
                </comment>
                <comment line="288">
                    High enough to scale any 0-ff value down to 0.0, but not
                     high enough to get Infinity when scaling back to pixel bits                    
                </comment>
                <declaration name="off" type="int" line="264"/>
                <declaration name="count" type="int" line="265"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
                <scope line="278"/>
                <scope line="286"/>
                <scope line="290"/>
            </method>
            <javadoc line="296">
                Creates a &lt;code&gt;SampleModel&lt;/code&gt; with the specified width and
                  height that has a data layout compatible with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    w the width (in pixels) of the region of the image data
                      described                    
                </param>
                <param>
                    h the height (in pixels) of the region of the image data
                      described                    
                </param>
                <return>
                    the newly created &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;w&lt;/code&gt; or
                      &lt;code&gt;h&lt;/code&gt; is not greater than 0                    
                </throws>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="309">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="314">
                Checks if the specified &lt;code&gt;SampleModel&lt;/code&gt; is compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt;.  If &lt;code&gt;sm&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, this method returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    sm the specified &lt;code&gt;SampleModel&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;SampleModel&lt;/code&gt;
                      is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="isCompatibleSampleModel" type="boolean" line="325">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <comment line="331">
                    Must have the same number of components                    
                </comment>
                <comment line="336">
                    Transfer type must be the same                    
                </comment>
                <comment line="342">
                    Now compare the specific masks                    
                </comment>
                <comment line="348">
                    compare &apos;effective&apos; masks only, i.e. only part of the mask
                     which fits the capacity of the transfer type.                    
                </comment>
                <scope line="326"/>
                <scope line="331"/>
                <scope line="336"/>
                <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="340"/>
                <declaration name="bitMasks" type="int[]" line="342"/>
                <scope line="343"/>
                <declaration name="maxMask" type="int" line="350"/>
                <scope line="351">
                    <scope line="352"/>
                </scope>
            </method>
            <javadoc line="360">
                Returns a {@link WritableRaster} representing the alpha channel of
                  an image, extracted from the input &lt;code&gt;WritableRaster&lt;/code&gt;.
                  This method assumes that &lt;code&gt;WritableRaster&lt;/code&gt; objects
                  associated with this &lt;code&gt;ColorModel&lt;/code&gt; store the alpha band,
                  if present, as the last band of image data.  Returns &lt;code&gt;null&lt;/code&gt;
                  if there is no separate spatial alpha channel associated with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  This method creates a new
                  &lt;code&gt;WritableRaster&lt;/code&gt;, but shares the data array.                
                <param>
                    raster a &lt;code&gt;WritableRaster&lt;/code&gt; containing an image                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; that represents the alpha
                      channel of the image contained in &lt;code&gt;raster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAlphaRaster" type="WritableRaster" line="373">
                <params>
                    <param name="raster" type="WritableRaster"/>
                </params>
                <scope line="374"/>
                <declaration name="x" type="int" line="378"/>
                <declaration name="y" type="int" line="379"/>
                <declaration name="band" type="int[]" line="380"/>
            </method>
            <javadoc line="387">
                Tests if the specified &lt;code&gt;Object&lt;/code&gt; is an instance
                  of &lt;code&gt;PackedColorModel&lt;/code&gt; and equals this
                  &lt;code&gt;PackedColorModel&lt;/code&gt;.                
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; to test for equality                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Object&lt;/code&gt;
                      is an instance of &lt;code&gt;PackedColorModel&lt;/code&gt; and equals this
                      &lt;code&gt;PackedColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="396">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="397"/>
                <scope line="401"/>
                <declaration name="cm" type="PackedColorModel" line="405"/>
                <declaration name="numC" type="int" line="406"/>
                <scope line="407"/>
                <scope line="410">
                    <scope line="411"/>
                </scope>
            </method>
            <method name="createBitsArray" type="int[]" line="419">
                <params>
                    <param name="colorMaskArray" type="int[]"/>
                    <param name="alphaMask" type="int"/>
                </params>
                <declaration name="numColors" type="int" line="420"/>
                <declaration name="numAlpha" type="int" line="421"/>
                <declaration name="arr" type="int[]" line="422"/>
                <scope line="423">
                    <scope line="425"/>
                </scope>
                <scope line="431">
                    <scope line="433"/>
                </scope>
            </method>
            <method name="createBitsArray" type="int[]" line="442">
                <params>
                    <param name="rmask" type="int"/>
                    <param name="gmask" type="int"/>
                    <param name="bmask" type="int"/>
                    <param name="amask" type="int"/>
                </params>
                <declaration name="arr" type="int[]" line="443"/>
                <scope line="447"/>
                <scope line="451"/>
                <scope line="455"/>
                <scope line="459">
                    <scope line="461"/>
                </scope>
            </method>
            <method name="countBits" type="int" line="469">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="count" type="int" line="470"/>
                <scope line="471">
                    <scope line="472"/>
                    <scope line="475"/>
                </scope>
                <scope line="480"/>
            </method>
        </class>
    </source>