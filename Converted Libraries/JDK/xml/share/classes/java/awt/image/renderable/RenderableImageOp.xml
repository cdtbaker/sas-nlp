<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image.renderable">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <class name="RenderableImageOp" line="44">
            <implements interface="RenderableImage"/>
            <javadoc line="44">
                This class handles the renderable aspects of an operation with help
                  from its associated instance of a ContextualRenderedImageFactory.                
            </javadoc>
            <declaration name="paramBlock" type="ParameterBlock" line="50"/>
            <javadoc line="50">
                A ParameterBlock containing source and parameters.                
            </javadoc>
            <declaration name="myCRIF" type="ContextualRenderedImageFactory" line="53"/>
            <javadoc line="53">
                The associated ContextualRenderedImageFactory.                
            </javadoc>
            <declaration name="boundingBox" type="Rectangle2D" line="56"/>
            <javadoc line="56">
                The bounding box of the results of this RenderableImageOp.                
            </javadoc>
            <javadoc line="60">
                Constructs a RenderedImageOp given a
                  ContextualRenderedImageFactory object, and
                  a ParameterBlock containing RenderableImage sources and other
                  parameters.  Any RenderedImage sources referenced by the
                  ParameterBlock will be ignored.                
                <param>
                    CRIF a ContextualRenderedImageFactory object                    
                </param>
                <param>
                    paramBlock a ParameterBlock containing this operation's source
                      images and other parameters necessary for the operation
                      to run.                    
                </param>
            </javadoc>
            <method name="RenderableImageOp" type="constructor" line="73">
                <params>
                    <param name="CRIF" type="ContextualRenderedImageFactory"/>
                    <param name="paramBlock" type="ParameterBlock"/>
                </params>
            </method>
            <javadoc line="78">
                Returns a vector of RenderableImages that are the sources of
                  image data for this RenderableImage. Note that this method may
                  return an empty vector, to indicate that the image has no sources,
                  or null, to indicate that no information is available.                
                <return>
                    a (possibly empty) Vector of RenderableImages, or null.                    
                </return>
            </javadoc>
            <method name="getSources" type="Vector<RenderableImage>" line="86"/>
            <method name="getRenderableSources" type="Vector" line="90">
                <declaration name="sources" type="Vector" line="91"/>
                <scope line="93">
                    <declaration name="i" type="int" line="95"/>
                    <scope line="96">
                        <declaration name="o" type="Object" line="97"/>
                        <scope line="98"/>
                        <scope line="101"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="109">
                Gets a property from the property set of this image.
                  If the property name is not recognized, java.awt.Image.UndefinedProperty
                  will be returned.                
                <param>
                    name the name of the property to get, as a String.                    
                </param>
                <return>
                    a reference to the property Object, or the value
                      java.awt.Image.UndefinedProperty.                    
                </return>
            </javadoc>
            <method name="getProperty" type="Object" line="118">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="122">
                Return a list of names recognized by getProperty.                
                <return>
                    a list of property names.                    
                </return>
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="126"/>
            <javadoc line="130">
                Returns true if successive renderings (that is, calls to
                  createRendering() or createScaledRendering()) with the same arguments
                  may produce different results.  This method may be used to
                  determine whether an existing rendering may be cached and
                  reused.  The CRIF&apos;s isDynamic method will be called.                
                <return>
                    <code>true</code> if successive renderings with the
                      same arguments might produce different results;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isDynamic" type="boolean" line="140"/>
            <javadoc line="144">
                Gets the width in user coordinate space.  By convention, the
                  usual width of a RenderableImage is equal to the image&apos;s aspect
                  ratio (width divided by height).                
                <return>
                    the width of the image in user coordinates.                    
                </return>
            </javadoc>
            <method name="getWidth" type="float" line="151">
                <scope line="152"/>
            </method>
            <javadoc line="158">
                Gets the height in user coordinate space.  By convention, the
                  usual height of a RenderedImage is equal to 1.0F.                
                <return>
                    the height of the image in user coordinates.                    
                </return>
            </javadoc>
            <method name="getHeight" type="float" line="164">
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Gets the minimum X coordinate of the rendering-independent image data.                
            </javadoc>
            <method name="getMinX" type="float" line="174">
                <scope line="175"/>
            </method>
            <javadoc line="181">
                Gets the minimum Y coordinate of the rendering-independent image data.                
            </javadoc>
            <method name="getMinY" type="float" line="184">
                <scope line="185"/>
            </method>
            <javadoc line="191">
                Change the current ParameterBlock of the operation, allowing
                  editing of image rendering chains.  The effects of such a
                  change will be visible when a new rendering is created from
                  this RenderableImageOp or any dependent RenderableImageOp.                
                <param>
                    paramBlock the new ParameterBlock.                    
                </param>
                <return>
                    the old ParameterBlock.                    
                </return>
                <see>
                    #getParameterBlock                    
                </see>
            </javadoc>
            <method name="setParameterBlock" type="ParameterBlock" line="201">
                <params>
                    <param name="paramBlock" type="ParameterBlock"/>
                </params>
                <declaration name="oldParamBlock" type="ParameterBlock" line="202"/>
            </method>
            <javadoc line="207">
                Returns a reference to the current parameter block.                
                <return>
                    the <code>ParameterBlock</code> of this
                      <code>RenderableImageOp</code>.                    
                </return>
                <see>
                    #setParameterBlock(ParameterBlock)                    
                </see>
            </javadoc>
            <method name="getParameterBlock" type="ParameterBlock" line="213"/>
            <javadoc line="217">
                Creates a RenderedImage instance of this image with width w, and
                  height h in pixels.  The RenderContext is built automatically
                  with an appropriate usr2dev transform and an area of interest
                  of the full image.  All the rendering hints come from hints
                  passed in.
                  &lt;p&gt; If w == 0, it will be taken to equal
                  Math.round(h(getWidth()/getHeight())).
                  Similarly, if h == 0, it will be taken to equal
                  Math.round(w(getHeight()/getWidth())).  One of
                  w or h must be non-zero or else an IllegalArgumentException
                  will be thrown.
                  &lt;p&gt; The created RenderedImage may have a property identified
                  by the String HINTS_OBSERVED to indicate which RenderingHints
                  were used to create the image.  In addition any RenderedImages
                  that are obtained via the getSources() method on the created
                  RenderedImage may have such a property.                
                <param>
                    w the width of rendered image in pixels, or 0.                    
                </param>
                <param>
                    h the height of rendered image in pixels, or 0.                    
                </param>
                <param>
                    hints a RenderingHints object containg hints.                    
                </param>
                <return>
                    a RenderedImage containing the rendered data.                    
                </return>
            </javadoc>
            <method name="createScaledRendering" type="RenderedImage" line="243">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <comment line="245">
                    DSR -- code to try to get a unit scale                    
                </comment>
                <declaration name="sx" type="double" line="245"/>
                <declaration name="sy" type="double" line="246"/>
                <scope line="247"/>
                <declaration name="usr2dev" type="AffineTransform" line="250"/>
                <declaration name="newRC" type="RenderContext" line="251"/>
            </method>
            <javadoc line="255">
                Gets a RenderedImage instance of this image with a default
                  width and height in pixels.  The RenderContext is built
                  automatically with an appropriate usr2dev transform and an area
                  of interest of the full image.  All the rendering hints come
                  from hints passed in.  Implementors of this interface must be
                  sure that there is a defined default width and height.                
                <return>
                    a RenderedImage containing the rendered data.                    
                </return>
            </javadoc>
            <method name="createDefaultRendering" type="RenderedImage" line="265">
                <comment line="267">
                    Identity                    
                </comment>
                <declaration name="usr2dev" type="AffineTransform" line="266"/>
                <declaration name="newRC" type="RenderContext" line="267"/>
            </method>
            <javadoc line="271">
                Creates a RenderedImage which represents this
                  RenderableImageOp (including its Renderable sources) rendered
                  according to the given RenderContext.
                  &lt;p&gt; This method supports chaining of either Renderable or
                  RenderedImage operations.  If sources in
                  the ParameterBlock used to construct the RenderableImageOp are
                  RenderableImages, then a three step process is followed:
                  &lt;ol&gt;
                  &lt;li&gt; mapRenderContext() is called on the associated CRIF for
                  each RenderableImage source;
                  &lt;li&gt; createRendering() is called on each of the RenderableImage sources
                  using the backwards-mapped RenderContexts obtained in step 1,
                  resulting in a rendering of each source;
                  &lt;li&gt; ContextualRenderedImageFactory.create() is called
                  with a new ParameterBlock containing the parameters of
                  the RenderableImageOp and the RenderedImages that were created by the
                  createRendering() calls.
                  &lt;/ol&gt;
                  &lt;p&gt; If the elements of the source Vector of
                  the ParameterBlock used to construct the RenderableImageOp are
                  instances of RenderedImage, then the CRIF.create() method is
                  called immediately using the original ParameterBlock.
                  This provides a basis case for the recursion.
                  &lt;p&gt; The created RenderedImage may have a property identified
                  by the String HINTS_OBSERVED to indicate which RenderingHints
                  (from the RenderContext) were used to create the image.
                  In addition any RenderedImages
                  that are obtained via the getSources() method on the created
                  RenderedImage may have such a property.                
                <param>
                    renderContext The RenderContext to use to perform the rendering.                    
                </param>
                <return>
                    a RenderedImage containing the desired output image.                    
                </return>
            </javadoc>
            <method name="createRendering" type="RenderedImage" line="309">
                <params>
                    <param name="renderContext" type="RenderContext"/>
                </params>
                <comment line="314">
                    Clone the original ParameterBlock; if the ParameterBlock
                     contains RenderableImage sources, they will be replaced by
                     RenderedImages.                    
                </comment>
                <comment line="321">
                    This assumes that if there is no renderable source, that there
                     is a rendered source in paramBlock                    
                </comment>
                <comment line="335">
                    Add this rendered image to the ParameterBlock&apos;s
                     list of RenderedImages.                    
                </comment>
                <comment line="347">
                    This should never happen                    
                </comment>
                <declaration name="image" type="RenderedImage" line="310"/>
                <declaration name="rcOut" type="RenderContext" line="311"/>
                <declaration name="renderedParamBlock" type="ParameterBlock" line="316"/>
                <declaration name="sources" type="Vector" line="317"/>
                <scope line="319">
                    <scope line="323">
                        <declaration name="renderedSources" type="Vector" line="324"/>
                        <scope line="325">
                            <declaration name="rdrdImage" type="RenderedImage" line="328"/>
                            <scope line="330"/>
                        </scope>
                        <scope line="339"/>
                    </scope>
                </scope>
                <scope line="345"/>
            </method>
        </class>
    </source>