<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.image.ImageConsumer"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="RGBImageFilter" line="4">
            <extends class="ImageFilter"/>
            <javadoc line="4">
                This class provides an easy way to create an ImageFilter which modifies
                  the pixels of an image in the default RGB ColorModel.  It is meant to
                  be used in conjunction with a FilteredImageSource object to produce
                  filtered versions of existing images.  It is an abstract class that
                  provides the calls needed to channel all of the pixel data through a
                  single method which converts pixels one at a time in the default RGB
                  ColorModel regardless of the ColorModel being used by the ImageProducer.
                  The only method which needs to be defined to create a useable image
                  filter is the filterRGB method.  Here is an example of a definition
                  of a filter which swaps the red and blue components of an image:
                  &lt;pre&gt;
                  class RedBlueSwapFilter extends RGBImageFilter {
                  public RedBlueSwapFilter() {
                  // The filter&apos;s operation does not depend on the
                  // pixel&apos;s location, so IndexColorModels can be
                  // filtered directly.
                  canFilterIndexColorModel = true;
                  }
                  public int filterRGB(int x, int y, int rgb) {
                  return ((rgb &amp; 0xff00ff00)
                  | ((rgb &amp; 0xff0000) &gt;&gt; 16)
                  | ((rgb &amp; 0xff) &lt;&lt; 16));
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    FilteredImageSource                    
                </see>
                <see>
                    ImageFilter                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="origmodel" type="ColorModel" line="36"/>
            <javadoc line="36">
                The &lt;code&gt;ColorModel&lt;/code&gt; to be replaced by
                  &lt;code&gt;newmodel&lt;/code&gt; when the user calls{@link #substituteColorModel(ColorModel,ColorModel) substituteColorModel}.                
            </javadoc>
            <declaration name="newmodel" type="ColorModel" line="41"/>
            <javadoc line="41">
                The &lt;code&gt;ColorModel&lt;/code&gt; with which to
                  replace &lt;code&gt;origmodel&lt;/code&gt; when the user calls
                  &lt;code&gt;substituteColorModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="canFilterIndexColorModel" type="boolean" line="47"/>
            <javadoc line="47">
                This boolean indicates whether or not it is acceptable to apply
                  the color filtering of the filterRGB method to the color table
                  entries of an IndexColorModel object in lieu of pixel by pixel
                  filtering.  Subclasses should set this variable to true in their
                  constructor if their filterRGB method does not depend on the
                  coordinate of the pixel being filtered.                
                <see>
                    #substituteColorModel                    
                </see>
                <see>
                    #filterRGB                    
                </see>
                <see>
                    IndexColorModel                    
                </see>
            </javadoc>
            <javadoc line="59">
                If the ColorModel is an IndexColorModel and the subclass has
                  set the canFilterIndexColorModel flag to true, we substitute
                  a filtered version of the color model here and wherever
                  that original ColorModel object appears in the setPixels methods.
                  If the ColorModel is not an IndexColorModel or is null, this method
                  overrides the default ColorModel used by the ImageProducer and
                  specifies the default RGB ColorModel instead.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer                    
                </see>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="setColorModel" type="void" line="77">
                <params>
                    <param name="model" type="ColorModel"/>
                </params>
                <scope line="78">
                    <declaration name="newcm" type="ColorModel" line="79"/>
                </scope>
                <scope line="83"/>
            </method>
            <javadoc line="87">
                Registers two ColorModel objects for substitution.  If the oldcm
                  is encountered during any of the setPixels methods, the newcm
                  is substituted and the pixels passed through
                  untouched (but with the new ColorModel object).                
                <param>
                    oldcm the ColorModel object to be replaced on the fly                    
                </param>
                <param>
                    newcm the ColorModel object to replace oldcm on the fly                    
                </param>
            </javadoc>
            <method name="substituteColorModel" type="void" line="95">
                <params>
                    <param name="oldcm" type="ColorModel"/>
                    <param name="newcm" type="ColorModel"/>
                </params>
            </method>
            <javadoc line="99">
                Filters an IndexColorModel object by running each entry in its
                  color tables through the filterRGB function that RGBImageFilter
                  subclasses must provide.  Uses coordinates of -1 to indicate that
                  a color table entry is being filtered rather than an actual
                  pixel value.                
                <param>
                    icm the IndexColorModel object to be filtered                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;icm&lt;/code&gt; is null                    
                </exception>
                <return>
                    a new IndexColorModel representing the filtered colors                    
                </return>
            </javadoc>
            <method name="filterIndexColorModel" type="IndexColorModel" line="109">
                <params>
                    <param name="icm" type="IndexColorModel"/>
                </params>
                <declaration name="mapsize" type="int" line="110"/>
                <declaration name="r" type="byte" line="111"/>
                <declaration name="g" type="byte" line="112"/>
                <declaration name="b" type="byte" line="113"/>
                <declaration name="a" type="byte" line="114"/>
                <declaration name="trans" type="int" line="119"/>
                <declaration name="needalpha" type="boolean" line="120"/>
                <scope line="121">
                    <declaration name="rgb" type="int" line="122"/>
                    <scope line="124"/>
                </scope>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Filters a buffer of pixels in the default RGB ColorModel by passing
                  them one by one through the filterRGB method.                
                <param>
                    x the X coordinate of the upper-left corner of the region
                      of pixels                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the region
                      of pixels                    
                </param>
                <param>
                    w the width of the region of pixels                    
                </param>
                <param>
                    h the height of the region of pixels                    
                </param>
                <param>
                    pixels the array of pixels                    
                </param>
                <param>
                    off the offset into the &lt;code&gt;pixels&lt;/code&gt; array                    
                </param>
                <param>
                    scansize the distance from one row of pixels to the next
                      in the array                    
                </param>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <see>
                    #filterRGB                    
                </see>
            </javadoc>
            <method name="filterRGBPixels" type="void" line="154">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="index" type="int" line="155"/>
                <scope line="156">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="165">
                If the ColorModel object is the same one that has already
                  been converted, then simply passes the pixels through with the
                  converted ColorModel. Otherwise converts the buffer of byte
                  pixels to the default RGB ColorModel and passes the converted
                  buffer to the filterRGBPixels method to be converted one by one.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <see>
                    #filterRGBPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="181">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <scope line="182"/>
                <scope line="185">
                    <declaration name="filteredpixels" type="int" line="186"/>
                    <declaration name="index" type="int" line="187"/>
                    <scope line="188">
                        <scope line="189"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="198">
                If the ColorModel object is the same one that has already
                  been converted, then simply passes the pixels through with the
                  converted ColorModel, otherwise converts the buffer of integer
                  pixels to the default RGB ColorModel and passes the converted
                  buffer to the filterRGBPixels method to be converted one by one.
                  Converts a buffer of integer pixels to the default RGB ColorModel
                  and passes the converted buffer to the filterRGBPixels method.
                  &lt;p&gt;
                  Note: This method is intended to be called by the
                  &lt;code&gt;ImageProducer&lt;/code&gt; of the &lt;code&gt;Image&lt;/code&gt; whose pixels
                  are being filtered. Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <see>
                    #filterRGBPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="216">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <scope line="217"/>
                <scope line="220">
                    <declaration name="filteredpixels" type="int" line="221"/>
                    <declaration name="index" type="int" line="222"/>
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                </scope>
            </method>
            <method name="filterRGB" type="int" line="233"/>
            <javadoc line="233">
                Subclasses must specify a method to convert a single input pixel
                  in the default RGB ColorModel to a single output pixel.                
                <param>
                    x the X coordinate of the pixel                    
                </param>
                <param>
                    y the Y coordinate of the pixel                    
                </param>
                <param>
                    rgb the integer pixel representation in the default RGB
                      color model                    
                </param>
                <return>
                    a filtered pixel in the default RGB color model.                    
                </return>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
                <see>
                    #filterRGBPixels                    
                </see>
            </javadoc>
        </class>
    </source>