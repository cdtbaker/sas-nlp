<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="sun.java2d.StateTrackable.State"/>
        <import package="sun.java2d.StateTrackable.State"/>
        <import package="sun.java2d.StateTrackableDelegate"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <class name="DataBuffer" line="6">
            <javadoc line="6">
                This class exists to wrap one or more data arrays.  Each data array in
                  the DataBuffer is referred to as a bank.  Accessor methods for getting
                  and setting elements of the DataBuffer&apos;s banks exist with and without
                  a bank specifier.  The methods without a bank specifier use the default 0th
                  bank.  The DataBuffer can optionally take an offset per bank, so that
                  data in an existing array can be used even if the interesting data
                  doesn&apos;t start at array location zero.  Getting or setting the 0th
                  element of a bank, uses the (0+offset)th element of the array.  The
                  size field specifies how much of the data array is available for
                  use.  Size + offset for a given bank should never be greater
                  than the length of the associated data array.  The data type of
                  a data buffer indicates the type of the data array(s) and may also
                  indicate additional semantics, e.g. storing unsigned 8-bit data
                  in elements of a byte array.  The data type may be TYPE_UNDEFINED
                  or one of the types defined below.  Other types may be added in
                  the future.  Generally, an object of class DataBuffer will be cast down
                  to one of its data type specific subclasses to access data type specific
                  methods for improved performance.  Currently, the Java 2D(tm) API
                  image classes use TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT,
                  TYPE_FLOAT, and TYPE_DOUBLE DataBuffers to store image data.                
                <see>
                    java.awt.image.Raster                    
                </see>
                <see>
                    java.awt.image.SampleModel                    
                </see>
            </javadoc>
            <declaration name="TYPE_BYTE" type="int" line="31"/>
            <javadoc line="31">
                Tag for unsigned byte data.                
            </javadoc>
            <declaration name="TYPE_USHORT" type="int" line="35"/>
            <javadoc line="35">
                Tag for unsigned short data.                
            </javadoc>
            <declaration name="TYPE_SHORT" type="int" line="39"/>
            <javadoc line="39">
                Tag for signed short data.  Placeholder for future use.                
            </javadoc>
            <declaration name="TYPE_INT" type="int" line="43"/>
            <javadoc line="43">
                Tag for int data.                
            </javadoc>
            <declaration name="TYPE_FLOAT" type="int" line="47"/>
            <javadoc line="47">
                Tag for float data.  Placeholder for future use.                
            </javadoc>
            <declaration name="TYPE_DOUBLE" type="int" line="51"/>
            <javadoc line="51">
                Tag for double data.  Placeholder for future use.                
            </javadoc>
            <declaration name="TYPE_UNDEFINED" type="int" line="55"/>
            <javadoc line="55">
                Tag for undefined data.                
            </javadoc>
            <declaration name="dataType" type="int" line="59"/>
            <javadoc line="59">
                The data type of this DataBuffer.                
            </javadoc>
            <declaration name="banks" type="int" line="63"/>
            <javadoc line="63">
                The number of banks in this DataBuffer.                
            </javadoc>
            <declaration name="offset" type="int" line="67"/>
            <javadoc line="67">
                Offset into default (first) bank from which to get the first element.                
            </javadoc>
            <declaration name="size" type="int" line="71"/>
            <javadoc line="71">
                Usable size of all banks.                
            </javadoc>
            <declaration name="offsets" type="int" line="75"/>
            <javadoc line="75">
                Offsets into all banks.                
            </javadoc>
            <declaration name="theTrackable" type="StateTrackableDelegate" line="79"/>
            <declaration name="dataTypeSize" type="int" line="80"/>
            <javadoc line="80">
                Size of the data types indexed by DataType tags defined above.                
            </javadoc>
            <javadoc line="84">
                Returns the size (in bits) of the data type, given a datatype tag.                
                <param>
                    type the value of one of the defined datatype tags                    
                </param>
                <return>
                    the size of the data type                    
                </return>
                <throws>
                    IllegalArgumentException if <code>type</code> is less than
                      zero or greater than {@link #TYPE_DOUBLE}                    
                </throws>
            </javadoc>
            <method name="getDataTypeSize" type="int" line="91">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Constructs a DataBuffer containing one bank of the specified
                  data type and size.                
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="103">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Constructs a DataBuffer containing one bank of the specified
                  data type and size with the indicated initial {@link State State}.                
                <param>
                    initialState the initial {@link State State} state of the data                    
                </param>
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="114">
                <params>
                    <param name="initialState" type="State"/>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                Constructs a DataBuffer containing the specified number of
                  banks.  Each bank has the specified size and an offset of 0.                
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="130">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                </params>
            </method>
            <javadoc line="133">
                Constructs a DataBuffer containing the specified number of
                  banks with the indicated initial {@link State State}.
                  Each bank has the specified size and an offset of 0.                
                <param>
                    initialState the initial {@link State State} state of the data                    
                </param>
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="144">
                <params>
                    <param name="initialState" type="State"/>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                </params>
            </method>
            <javadoc line="152">
                Constructs a DataBuffer that contains the specified number
                  of banks.  Each bank has the specified datatype, size and offset.                
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
                <param>
                    offset the offset for each bank                    
                </param>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="161">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="164">
                Constructs a DataBuffer that contains the specified number
                  of banks with the indicated initial {@link State State}.
                  Each bank has the specified datatype, size and offset.                
                <param>
                    initialState the initial {@link State State} state of the data                    
                </param>
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
                <param>
                    offset the offset for each bank                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="176">
                <params>
                    <param name="initialState" type="State"/>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="183"/>
            </method>
            <javadoc line="187">
                Constructs a DataBuffer which contains the specified number
                  of banks.  Each bank has the specified datatype and size.  The
                  offset for each bank is specified by its respective entry in
                  the offsets array.                
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
                <param>
                    offsets an array containing an offset for each bank.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>numBanks</code>
                      does not equal the length of <code>offsets</code>                    
                </throws>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="200">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                    <param name="offsets" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                Constructs a DataBuffer which contains the specified number
                  of banks with the indicated initial {@link State State}.
                  Each bank has the specified datatype and size.  The
                  offset for each bank is specified by its respective entry in
                  the offsets array.                
                <param>
                    initialState the initial {@link State State} state of the data                    
                </param>
                <param>
                    dataType the data type of this <code>DataBuffer</code>                    
                </param>
                <param>
                    size the size of the banks                    
                </param>
                <param>
                    numBanks the number of banks in this
                      <code>DataBuffer</code>                    
                </param>
                <param>
                    offsets an array containing an offset for each bank.                    
                </param>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>numBanks</code>
                      does not equal the length of <code>offsets</code>                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="DataBuffer" type="constructor" line="219">
                <params>
                    <param name="initialState" type="State"/>
                    <param name="dataType" type="int"/>
                    <param name="size" type="int"/>
                    <param name="numBanks" type="int"/>
                    <param name="offsets" type="int"/>
                </params>
                <scope line="220"/>
            </method>
            <javadoc line="230">
                Returns the data type of this DataBuffer.                
                <return>
                    the data type of this <code>DataBuffer</code>.                    
                </return>
            </javadoc>
            <method name="getDataType" type="int" line="234"/>
            <javadoc line="237">
                Returns the size (in array elements) of all banks.                
                <return>
                    the size of all banks.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="241"/>
            <javadoc line="244">
                Returns the offset of the default bank in array elements.                
                <return>
                    the offset of the default bank.                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="248"/>
            <javadoc line="251">
                Returns the offsets (in array elements) of all the banks.                
                <return>
                    the offsets of all banks.                    
                </return>
            </javadoc>
            <method name="getOffsets" type="int[]" line="255"/>
            <javadoc line="258">
                Returns the number of banks in this DataBuffer.                
                <return>
                    the number of banks.                    
                </return>
            </javadoc>
            <method name="getNumBanks" type="int" line="262"/>
            <javadoc line="265">
                Returns the requested data array element from the first (default) bank
                  as an integer.                
                <param>
                    i the index of the requested data array element                    
                </param>
                <return>
                    the data array element at the specified index.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <method name="getElem" type="int" line="273">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getElem" type="int" line="276"/>
            <javadoc line="276">
                Returns the requested data array element from the specified bank
                  as an integer.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the index of the requested data array element                    
                </param>
                <return>
                    the data array element at the specified index from the
                      specified bank at the specified index.                    
                </return>
                <see>
                    #setElem(int,int)                    
                </see>
                <see>
                    #setElem(int,int,int)                    
                </see>
            </javadoc>
            <javadoc line="287">
                Sets the requested data array element in the first (default) bank
                  from the given integer.                
                <param>
                    i the specified index into the data array                    
                </param>
                <param>
                    val the data to set the element at the specified index in
                      the data array                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <method name="setElem" type="void" line="296">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <method name="setElem" type="void" line="299"/>
            <javadoc line="299">
                Sets the requested data array element in the specified bank
                  from the given integer.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the specified index into the data array                    
                </param>
                <param>
                    val  the data to set the element in the specified bank
                      at the specified index in the data array                    
                </param>
                <see>
                    #getElem(int)                    
                </see>
                <see>
                    #getElem(int,int)                    
                </see>
            </javadoc>
            <javadoc line="310">
                Returns the requested data array element from the first (default) bank
                  as a float.  The implementation in this class is to cast getElem(i)
                  to a float.  Subclasses may override this method if another
                  implementation is needed.                
                <param>
                    i the index of the requested data array element                    
                </param>
                <return>
                    a float value representing the data array element at the
                      specified index.                    
                </return>
                <see>
                    #setElemFloat(int,float)                    
                </see>
                <see>
                    #setElemFloat(int,int,float)                    
                </see>
            </javadoc>
            <method name="getElemFloat" type="float" line="321">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="324">
                Returns the requested data array element from the specified bank
                  as a float.  The implementation in this class is to cast{@link #getElem(int,int)}to a float.  Subclasses can override this method if another
                  implementation is needed.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the index of the requested data array element                    
                </param>
                <return>
                    a float value representing the data array element from the
                      specified bank at the specified index.                    
                </return>
                <see>
                    #setElemFloat(int,float)                    
                </see>
                <see>
                    #setElemFloat(int,int,float)                    
                </see>
            </javadoc>
            <method name="getElemFloat" type="float" line="335">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="338">
                Sets the requested data array element in the first (default) bank
                  from the given float.  The implementation in this class is to cast
                  val to an int and call {@link #setElem(int,int)}.  Subclasses
                  can override this method if another implementation is needed.                
                <param>
                    i the specified index                    
                </param>
                <param>
                    val the value to set the element at the specified index in
                      the data array                    
                </param>
                <see>
                    #getElemFloat(int)                    
                </see>
                <see>
                    #getElemFloat(int,int)                    
                </see>
            </javadoc>
            <method name="setElemFloat" type="void" line="349">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="352">
                Sets the requested data array element in the specified bank
                  from the given float.  The implementation in this class is to cast
                  val to an int and call {@link #setElem(int,int)}.  Subclasses can
                  override this method if another implementation is needed.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the specified index                    
                </param>
                <param>
                    val the value to set the element in the specified bank at
                      the specified index in the data array                    
                </param>
                <see>
                    #getElemFloat(int)                    
                </see>
                <see>
                    #getElemFloat(int,int)                    
                </see>
            </javadoc>
            <method name="setElemFloat" type="void" line="364">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <javadoc line="367">
                Returns the requested data array element from the first (default) bank
                  as a double.  The implementation in this class is to cast{@link #getElem(int)}to a double.  Subclasses can override this method if another
                  implementation is needed.                
                <param>
                    i the specified index                    
                </param>
                <return>
                    a double value representing the element at the specified
                      index in the data array.                    
                </return>
                <see>
                    #setElemDouble(int,double)                    
                </see>
                <see>
                    #setElemDouble(int,int,double)                    
                </see>
            </javadoc>
            <method name="getElemDouble" type="double" line="377">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="380">
                Returns the requested data array element from the specified bank as
                  a double.  The implementation in this class is to cast getElem(bank, i)
                  to a double.  Subclasses may override this method if another
                  implementation is needed.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the specified index                    
                </param>
                <return>
                    a double value representing the element from the specified
                      bank at the specified index in the data array.                    
                </return>
                <see>
                    #setElemDouble(int,double)                    
                </see>
                <see>
                    #setElemDouble(int,int,double)                    
                </see>
            </javadoc>
            <method name="getElemDouble" type="double" line="392">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="395">
                Sets the requested data array element in the first (default) bank
                  from the given double.  The implementation in this class is to cast
                  val to an int and call {@link #setElem(int,int)}.  Subclasses can
                  override this method if another implementation is needed.                
                <param>
                    i the specified index                    
                </param>
                <param>
                    val the value to set the element at the specified index
                      in the data array                    
                </param>
                <see>
                    #getElemDouble(int)                    
                </see>
                <see>
                    #getElemDouble(int,int)                    
                </see>
            </javadoc>
            <method name="setElemDouble" type="void" line="406">
                <params>
                    <param name="i" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="409">
                Sets the requested data array element in the specified bank
                  from the given double.  The implementation in this class is to cast
                  val to an int and call {@link #setElem(int,int)}.  Subclasses can
                  override this method if another implementation is needed.                
                <param>
                    bank the specified bank                    
                </param>
                <param>
                    i the specified index                    
                </param>
                <param>
                    val the value to set the element in the specified bank
                      at the specified index of the data array                    
                </param>
                <see>
                    #getElemDouble(int)                    
                </see>
                <see>
                    #getElemDouble(int,int)                    
                </see>
            </javadoc>
            <method name="setElemDouble" type="void" line="421">
                <params>
                    <param name="bank" type="int"/>
                    <param name="i" type="int"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <method name="toIntArray" type="int[]" line="424">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="425"/>
                <scope line="428"/>
                <scope line="431">
                    <declaration name="sdata" type="short" line="432"/>
                    <declaration name="idata" type="int" line="433"/>
                    <scope line="434"/>
                </scope>
                <scope line="439">
                    <declaration name="bdata" type="byte" line="440"/>
                    <declaration name="idata" type="int" line="441"/>
                    <scope line="442"/>
                </scope>
            </method>
            <scope line="449">
                <anonymous_class line="450">
                    <method name="getData" type="byte[]" line="451">
                        <params>
                            <param name="dbb" type="DataBufferByte"/>
                            <param name="bank" type="int"/>
                        </params>
                    </method>
                    <method name="getData" type="short[]" line="454">
                        <params>
                            <param name="dbus" type="DataBufferUShort"/>
                            <param name="bank" type="int"/>
                        </params>
                    </method>
                    <method name="getData" type="int[]" line="457">
                        <params>
                            <param name="dbi" type="DataBufferInt"/>
                            <param name="bank" type="int"/>
                        </params>
                    </method>
                    <method name="getTrackable" type="StateTrackableDelegate" line="460">
                        <params>
                            <param name="db" type="DataBuffer"/>
                        </params>
                    </method>
                    <method name="setTrackable" type="void" line="463">
                        <params>
                            <param name="db" type="DataBuffer"/>
                            <param name="trackable" type="StateTrackableDelegate"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
        </class>
    </source>