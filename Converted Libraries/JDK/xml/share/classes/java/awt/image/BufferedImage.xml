<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="sun.awt.image.BytePackedRaster"/>
        <import package="sun.awt.image.ShortComponentRaster"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <import package="sun.awt.image.IntegerComponentRaster"/>
        <import package="sun.awt.image.OffScreenImageSource"/>
        <class name="BufferedImage" line="19">
            <extends class="java.awt.Image"/>
            <implements interface="WritableRenderedImage"/>
            <implements interface="Transparency"/>
            <javadoc line="19">
                The &lt;code&gt;BufferedImage&lt;/code&gt; subclass describes an {@link java.awt.Image Image} with an accessible buffer of image data.
                  A &lt;code&gt;BufferedImage&lt;/code&gt; is comprised of a {@link ColorModel} and a{@link Raster} of image data.
                  The number and types of bands in the {@link SampleModel} of the
                  &lt;code&gt;Raster&lt;/code&gt; must match the number and types required by the
                  &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha components.
                  All &lt;code&gt;BufferedImage&lt;/code&gt; objects have an upper left corner
                  coordinate of (0,&amp;nbsp;0).  Any &lt;code&gt;Raster&lt;/code&gt; used to construct a
                  &lt;code&gt;BufferedImage&lt;/code&gt; must therefore have minX=0 and minY=0.
                  &lt;p&gt;
                  This class relies on the data fetching and setting methods
                  of &lt;code&gt;Raster&lt;/code&gt;,
                  and on the color characterization methods of &lt;code&gt;ColorModel&lt;/code&gt;.                
                <see>
                    ColorModel                    
                </see>
                <see>
                    Raster                    
                </see>
                <see>
                    WritableRaster                    
                </see>
            </javadoc>
            <declaration name="imageType" type="int" line="37"/>
            <declaration name="colorModel" type="ColorModel" line="38"/>
            <declaration name="raster" type="WritableRaster" line="39"/>
            <declaration name="osis" type="OffScreenImageSource" line="40"/>
            <declaration name="properties" type="Hashtable" line="41"/>
            <declaration name="isAlphaPremultiplied" type="boolean" line="42"/>
            <declaration name="TYPE_CUSTOM" type="int" line="43"/>
            <javadoc line="43">
                Image type is not recognized so it must be a customized
                  image.  This type is only used as a return value for the getType()
                  method.                
            </javadoc>
            <declaration name="TYPE_INT_RGB" type="int" line="49"/>
            <javadoc line="49">
                Represents an image with 8-bit RGB color components packed into
                  integer pixels.  The image has a {@link DirectColorModel} without
                  alpha.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_INT_ARGB" type="int" line="60"/>
            <javadoc line="60">
                Represents an image with 8-bit RGBA color components packed into
                  integer pixels.  The image has a &lt;code&gt;DirectColorModel&lt;/code&gt;
                  with alpha. The color data in this image is considered not to be
                  premultiplied with alpha.  When this type is used as the
                  &lt;code&gt;imageType&lt;/code&gt; argument to a &lt;code&gt;BufferedImage&lt;/code&gt;
                  constructor, the created image is consistent with images
                  created in the JDK1.1 and earlier releases.                
            </javadoc>
            <declaration name="TYPE_INT_ARGB_PRE" type="int" line="70"/>
            <javadoc line="70">
                Represents an image with 8-bit RGBA color components packed into
                  integer pixels.  The image has a &lt;code&gt;DirectColorModel&lt;/code&gt;
                  with alpha.  The color data in this image is considered to be
                  premultiplied with alpha.                
            </javadoc>
            <declaration name="TYPE_INT_BGR" type="int" line="77"/>
            <javadoc line="77">
                Represents an image with 8-bit RGB color components, corresponding
                  to a Windows- or Solaris- style BGR color model, with the colors
                  Blue, Green, and Red packed into integer pixels.  There is no alpha.
                  The image has a {@link DirectColorModel}.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_3BYTE_BGR" type="int" line="89"/>
            <javadoc line="89">
                Represents an image with 8-bit RGB color components, corresponding
                  to a Windows-style BGR color model) with the colors Blue, Green,
                  and Red stored in 3 bytes.  There is no alpha.  The image has a
                  &lt;code&gt;ComponentColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_4BYTE_ABGR" type="int" line="101"/>
            <javadoc line="101">
                Represents an image with 8-bit RGBA color components with the colors
                  Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with alpha.  The
                  color data in this image is considered not to be premultiplied with
                  alpha.  The byte data is interleaved in a single
                  byte array in the order A, B, G, R
                  from lower to higher byte addresses within each pixel.                
            </javadoc>
            <declaration name="TYPE_4BYTE_ABGR_PRE" type="int" line="111"/>
            <javadoc line="111">
                Represents an image with 8-bit RGBA color components with the colors
                  Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with alpha. The color
                  data in this image is considered to be premultiplied with alpha.
                  The byte data is interleaved in a single byte array in the order
                  A, B, G, R from lower to higher byte addresses within each pixel.                
            </javadoc>
            <declaration name="TYPE_USHORT_565_RGB" type="int" line="120"/>
            <javadoc line="120">
                Represents an image with 5-6-5 RGB color components (5-bits red,
                  6-bits green, 5-bits blue) with no alpha.  This image has
                  a &lt;code&gt;DirectColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_USHORT_555_RGB" type="int" line="131"/>
            <javadoc line="131">
                Represents an image with 5-5-5 RGB color components (5-bits red,
                  5-bits green, 5-bits blue) with no alpha.  This image has
                  a &lt;code&gt;DirectColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_BYTE_GRAY" type="int" line="142"/>
            <javadoc line="142">
                Represents a unsigned byte grayscale image, non-indexed.  This
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with a CS_GRAY{@link ColorSpace}.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_USHORT_GRAY" type="int" line="152"/>
            <javadoc line="152">
                Represents an unsigned short grayscale image, non-indexed).  This
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with a CS_GRAY
                  &lt;code&gt;ColorSpace&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_BYTE_BINARY" type="int" line="163"/>
            <javadoc line="163">
                Represents an opaque byte-packed 1, 2, or 4 bit image.  The
                  image has an {@link IndexColorModel} without alpha.  When this
                  type is used as the &lt;code&gt;imageType&lt;/code&gt; argument to the
                  &lt;code&gt;BufferedImage&lt;/code&gt; constructor that takes an
                  &lt;code&gt;imageType&lt;/code&gt; argument but no &lt;code&gt;ColorModel&lt;/code&gt;
                  argument, a 1-bit image is created with an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; with two colors in the default
                  sRGB &lt;code&gt;ColorSpace&lt;/code&gt;: {0,&amp;nbsp;0,&amp;nbsp;0} and
                  {255,&amp;nbsp;255,&amp;nbsp;255}.
                  &lt;p&gt; Images with 2 or 4 bits per pixel may be constructed via
                  the &lt;code&gt;BufferedImage&lt;/code&gt; constructor that takes a
                  &lt;code&gt;ColorModel&lt;/code&gt; argument by supplying a
                  &lt;code&gt;ColorModel&lt;/code&gt; with an appropriate map size.
                  &lt;p&gt; Images with 8 bits per pixel should use the image types
                  &lt;code&gt;TYPE_BYTE_INDEXED&lt;/code&gt; or &lt;code&gt;TYPE_BYTE_GRAY&lt;/code&gt;
                  depending on their &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt; When color data is stored in an image of this type,
                  the closest color in the colormap is determined
                  by the &lt;code&gt;IndexColorModel&lt;/code&gt; and the resulting index is stored.
                  Approximation and loss of alpha or color components
                  can result, depending on the colors in the
                  &lt;code&gt;IndexColorModel&lt;/code&gt; colormap.                
            </javadoc>
            <declaration name="TYPE_BYTE_INDEXED" type="int" line="188"/>
            <javadoc line="188">
                Represents an indexed byte image.  When this type is used as the
                  &lt;code&gt;imageType&lt;/code&gt; argument to the &lt;code&gt;BufferedImage&lt;/code&gt;
                  constructor that takes an &lt;code&gt;imageType&lt;/code&gt; argument
                  but no &lt;code&gt;ColorModel&lt;/code&gt; argument, an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; is created with
                  a 256-color 6/6/6 color cube palette with the rest of the colors
                  from 216-255 populated by grayscale values in the
                  default sRGB ColorSpace.
                  &lt;p&gt; When color data is stored in an image of this type,
                  the closest color in the colormap is determined
                  by the &lt;code&gt;IndexColorModel&lt;/code&gt; and the resulting index is stored.
                  Approximation and loss of alpha or color components
                  can result, depending on the colors in the
                  &lt;code&gt;IndexColorModel&lt;/code&gt; colormap.                
            </javadoc>
            <declaration name="DCM_RED_MASK" type="int" line="205"/>
            <declaration name="DCM_GREEN_MASK" type="int" line="206"/>
            <declaration name="DCM_BLUE_MASK" type="int" line="207"/>
            <declaration name="DCM_ALPHA_MASK" type="int" line="208"/>
            <declaration name="DCM_565_RED_MASK" type="int" line="209"/>
            <declaration name="DCM_565_GRN_MASK" type="int" line="210"/>
            <declaration name="DCM_565_BLU_MASK" type="int" line="211"/>
            <declaration name="DCM_555_RED_MASK" type="int" line="212"/>
            <declaration name="DCM_555_GRN_MASK" type="int" line="213"/>
            <declaration name="DCM_555_BLU_MASK" type="int" line="214"/>
            <declaration name="DCM_BGR_RED_MASK" type="int" line="215"/>
            <declaration name="DCM_BGR_GRN_MASK" type="int" line="216"/>
            <declaration name="DCM_BGR_BLU_MASK" type="int" line="217"/>
            <method name="initIDs" type="void" line="218"/>
            <scope line="219"/>
            <javadoc line="223">
                Constructs a &lt;code&gt;BufferedImage&lt;/code&gt; of one of the predefined
                  image types.  The &lt;code&gt;ColorSpace&lt;/code&gt; for the image is the
                  default sRGB space.                
                <param>
                    width     width of the created image                    
                </param>
                <param>
                    height    height of the created image                    
                </param>
                <param>
                    imageType type of the created image                    
                </param>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    #TYPE_INT_RGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    #TYPE_INT_BGR                    
                </see>
                <see>
                    #TYPE_3BYTE_BGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    #TYPE_BYTE_GRAY                    
                </see>
                <see>
                    #TYPE_USHORT_GRAY                    
                </see>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
                <see>
                    #TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    #TYPE_USHORT_555_RGB                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="245">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageType" type="int"/>
                </params>
                <scope line="248"/>
                <scope line="254"/>
                <scope line="260"/>
                <scope line="266"/>
                <scope line="272">
                    <declaration name="cs" type="ColorSpace" line="273"/>
                    <declaration name="nBits" type="int[]" line="274"/>
                    <declaration name="bOffs" type="int[]" line="275"/>
                </scope>
                <scope line="281">
                    <declaration name="cs" type="ColorSpace" line="282"/>
                    <declaration name="nBits" type="int[]" line="283"/>
                    <declaration name="bOffs" type="int[]" line="284"/>
                </scope>
                <scope line="290">
                    <declaration name="cs" type="ColorSpace" line="291"/>
                    <declaration name="nBits" type="int[]" line="292"/>
                    <declaration name="bOffs" type="int[]" line="293"/>
                </scope>
                <scope line="299">
                    <declaration name="cs" type="ColorSpace" line="300"/>
                    <declaration name="nBits" type="int[]" line="301"/>
                </scope>
                <scope line="307">
                    <declaration name="cs" type="ColorSpace" line="308"/>
                    <declaration name="nBits" type="int[]" line="309"/>
                </scope>
                <scope line="315">
                    <declaration name="arr" type="byte[]" line="316"/>
                </scope>
                <scope line="322">
                    <declaration name="cmap" type="int[]" line="323"/>
                    <declaration name="i" type="int" line="324"/>
                    <scope line="325">
                        <scope line="326">
                            <scope line="327"/>
                        </scope>
                    </scope>
                    <declaration name="grayIncr" type="int" line="332"/>
                    <declaration name="gray" type="int" line="333"/>
                    <scope line="334"/>
                </scope>
                <scope line="343"/>
                <scope line="349"/>
            </method>
            <javadoc line="359">
                Constructs a &lt;code&gt;BufferedImage&lt;/code&gt; of one of the predefined
                  image types:
                  TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.
                  &lt;p&gt; If the image type is TYPE_BYTE_BINARY, the number of
                  entries in the color model is used to determine whether the
                  image should have 1, 2, or 4 bits per pixel.  If the color model
                  has 1 or 2 entries, the image will have 1 bit per pixel.  If it
                  has 3 or 4 entries, the image with have 2 bits per pixel.  If
                  it has between 5 and 16 entries, the image will have 4 bits per
                  pixel.  Otherwise, an IllegalArgumentException will be thrown.                
                <param>
                    width     width of the created image                    
                </param>
                <param>
                    height    height of the created image                    
                </param>
                <param>
                    imageType type of the created image                    
                </param>
                <param>
                    cm        &lt;code&gt;IndexColorModel&lt;/code&gt; of the created image                    
                </param>
                <throws>
                    IllegalArgumentException   if the imageType is not
                      TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED or if the imageType is
                      TYPE_BYTE_BINARY and the color map has more than 16 entries.                    
                </throws>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="380">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageType" type="int"/>
                    <param name="cm" type="IndexColorModel"/>
                </params>
                <scope line="381"/>
                <declaration name="bits" type="int" line="386"/>
                <declaration name="mapSize" type="int" line="387"/>
                <scope line="388"/>
                <scope line="391"/>
                <scope line="394"/>
                <scope line="397"/>
                <scope line="408"/>
            </method>
            <javadoc line="414">
                Constructs a new &lt;code&gt;BufferedImage&lt;/code&gt; with a specified
                  &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;Raster&lt;/code&gt;.  If the number and
                  types of bands in the &lt;code&gt;SampleModel&lt;/code&gt; of the
                  &lt;code&gt;Raster&lt;/code&gt; do not match the number and types required by
                  the &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha
                  components, a {@link RasterFormatException} is thrown.  This
                  method can multiply or divide the color &lt;code&gt;Raster&lt;/code&gt; data by
                  alpha to match the &lt;code&gt;alphaPremultiplied&lt;/code&gt; state
                  in the &lt;code&gt;ColorModel&lt;/code&gt;.  Properties for this
                  &lt;code&gt;BufferedImage&lt;/code&gt; can be established by passing
                  in a {@link Hashtable} of &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt;
                  pairs.                
                <param>
                    cm &lt;code&gt;ColorModel&lt;/code&gt; for the new image                    
                </param>
                <param>
                    raster     &lt;code&gt;Raster&lt;/code&gt; for the image data                    
                </param>
                <param>
                    isRasterPremultiplied   if &lt;code&gt;true&lt;/code&gt;, the data in
                      the raster has been premultiplied with alpha.                    
                </param>
                <param>
                    properties &lt;code&gt;Hashtable&lt;/code&gt; of
                      &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt; pairs.                    
                </param>
                <exception>
                    &lt;code&gt;RasterFormatException&lt;/code&gt; if the number and
                      types of bands in the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      &lt;code&gt;Raster&lt;/code&gt; do not match the number and types required by
                      the &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha
                      components.                    
                </exception>
                <exception>
                    &lt;code&gt;IllegalArgumentException&lt;/code&gt; if
                      &lt;code&gt;raster&lt;/code&gt; is incompatible with &lt;code&gt;cm&lt;/code&gt;                    
                </exception>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Raster                    
                </see>
                <see>
                    WritableRaster                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="444">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isRasterPremultiplied" type="boolean"/>
                    <param name="properties" type="Hashtable&lt;?,?&gt;"/>
                </params>
                <scope line="445"/>
                <scope line="448"/>
                <declaration name="numBands" type="int" line="454"/>
                <declaration name="isAlphaPre" type="boolean" line="455"/>
                <declaration name="cs" type="ColorSpace" line="456"/>
                <declaration name="sm" type="SampleModel" line="458"/>
                <declaration name="csType" type="int" line="460"/>
                <scope line="461">
                    <scope line="462">
                        <scope line="463"/>
                        <scope line="466"/>
                        <scope line="469"/>
                    </scope>
                    <scope line="473"/>
                </scope>
                <scope line="478">
                    <declaration name="iraster" type="IntegerComponentRaster" line="479"/>
                    <declaration name="pixSize" type="int" line="480"/>
                    <scope line="481">
                        <declaration name="dcm" type="DirectColorModel" line="482"/>
                        <declaration name="rmask" type="int" line="483"/>
                        <declaration name="gmask" type="int" line="484"/>
                        <declaration name="bmask" type="int" line="485"/>
                        <scope line="486">
                            <scope line="487"/>
                            <scope line="490">
                                <scope line="491"/>
                            </scope>
                        </scope>
                        <scope line="496">
                            <scope line="497"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="503">
                    <declaration name="icm" type="IndexColorModel" line="504"/>
                    <declaration name="pixSize" type="int" line="505"/>
                    <scope line="506"/>
                    <scope line="509">
                        <declaration name="braster" type="ByteComponentRaster" line="510"/>
                        <scope line="511"/>
                    </scope>
                </scope>
                <scope line="516">
                    <declaration name="dcm" type="DirectColorModel" line="517"/>
                    <scope line="518">
                        <scope line="519"/>
                    </scope>
                    <scope line="523">
                        <scope line="524"/>
                    </scope>
                </scope>
                <scope line="529">
                    <declaration name="ccm" type="ComponentColorModel" line="530"/>
                    <declaration name="csm" type="PixelInterleavedSampleModel" line="531"/>
                    <declaration name="braster" type="ByteComponentRaster" line="532"/>
                    <declaration name="offs" type="int[]" line="533"/>
                    <scope line="534"/>
                    <declaration name="nBits" type="int[]" line="537"/>
                    <declaration name="is8bit" type="boolean" line="538"/>
                    <scope line="539">
                        <scope line="540"/>
                    </scope>
                    <scope line="545">
                        <scope line="546"/>
                        <scope line="549"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="555">
                Returns the image type.  If it is not one of the known types,
                  TYPE_CUSTOM is returned.                
                <return>
                    the image type of this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <see>
                    #TYPE_INT_RGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    #TYPE_INT_BGR                    
                </see>
                <see>
                    #TYPE_3BYTE_BGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    #TYPE_BYTE_GRAY                    
                </see>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
                <see>
                    #TYPE_USHORT_GRAY                    
                </see>
                <see>
                    #TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    #TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    #TYPE_CUSTOM                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="574"/>
            <javadoc line="577">
                Returns the &lt;code&gt;ColorModel&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;ColorModel&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="582"/>
            <javadoc line="585">
                Returns the {@link WritableRaster}.                
                <return>
                    the &lt;code&gt;WriteableRaster&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getRaster" type="WritableRaster" line="590"/>
            <javadoc line="593">
                Returns a &lt;code&gt;WritableRaster&lt;/code&gt; representing the alpha
                  channel for &lt;code&gt;BufferedImage&lt;/code&gt; objects
                  with &lt;code&gt;ColorModel&lt;/code&gt; objects that support a separate
                  spatial alpha channel, such as &lt;code&gt;ComponentColorModel&lt;/code&gt; and
                  &lt;code&gt;DirectColorModel&lt;/code&gt;.  Returns &lt;code&gt;null&lt;/code&gt; if there
                  is no alpha channel associated with the &lt;code&gt;ColorModel&lt;/code&gt; in
                  this image.  This method assumes that for all
                  &lt;code&gt;ColorModel&lt;/code&gt; objects other than
                  &lt;code&gt;IndexColorModel&lt;/code&gt;, if the &lt;code&gt;ColorModel&lt;/code&gt;
                  supports alpha, there is a separate alpha channel
                  which is stored as the last band of image data.
                  If the image uses an &lt;code&gt;IndexColorModel&lt;/code&gt; that
                  has alpha in the lookup table, this method returns
                  &lt;code&gt;null&lt;/code&gt; since there is no spatially discrete alpha
                  channel.  This method creates a new
                  &lt;code&gt;WritableRaster&lt;/code&gt;, but shares the data array.                
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if this
                      &lt;code&gt;BufferedImage&lt;/code&gt; has no alpha channel associated
                      with its &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAlphaRaster" type="WritableRaster" line="614"/>
            <javadoc line="617">
                Returns an integer pixel in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB colorspace.  Color
                  conversion takes place if this default model does not match
                  the image &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of
                  precision for each color component in the returned data when using
                  this method.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the coordinates are not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x the X coordinate of the pixel from which to get
                      the pixel in the default RGB color model and sRGB
                      color space                    
                </param>
                <param>
                    y the Y coordinate of the pixel from which to get
                      the pixel in the default RGB color model and sRGB
                      color space                    
                </param>
                <return>
                    an integer pixel in the default RGB color model and
                      default sRGB colorspace.                    
                </return>
                <see>
                    #setRGB(int,int,int)                    
                </see>
                <see>
                    #setRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="639">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="642">
                Returns an array of integer pixels in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB color space,
                  from a portion of the image data.  Color conversion takes
                  place if the default model does not match the image
                  &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of precision for
                  each color component in the returned data when
                  using this method.  With a specified coordinate (x,&amp;nbsp;y) in the
                  image, the ARGB pixel can be accessed in this way:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  pixel   = rgbArray[offset + (y-startY)scansize + (x-startX)]; &lt;/pre&gt;
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the region is not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    startX      the starting X coordinate                    
                </param>
                <param>
                    startY      the starting Y coordinate                    
                </param>
                <param>
                    w           width of region                    
                </param>
                <param>
                    h           height of region                    
                </param>
                <param>
                    rgbArray    if not &lt;code&gt;null&lt;/code&gt;, the rgb pixels are
                      written here                    
                </param>
                <param>
                    offset      offset into the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <param>
                    scansize    scanline stride for the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <return>
                    array of RGB pixels.                    
                </return>
                <see>
                    #setRGB(int,int,int)                    
                </see>
                <see>
                    #setRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="getRGB" type="int[]" line="670">
                <params>
                    <param name="startX" type="int"/>
                    <param name="startY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rgbArray" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="yoff" type="int" line="671"/>
                <declaration name="off" type="int" line="672"/>
                <declaration name="data" type="Object" line="673"/>
                <declaration name="nbands" type="int" line="674"/>
                <declaration name="dataType" type="int" line="675"/>
                <scope line="695"/>
                <scope line="698">
                    <scope line="700"/>
                </scope>
            </method>
            <javadoc line="706">
                Sets a pixel in this &lt;code&gt;BufferedImage&lt;/code&gt; to the specified
                  RGB value. The pixel is assumed to be in the default RGB color
                  model, TYPE_INT_ARGB, and default sRGB color space.  For images
                  with an &lt;code&gt;IndexColorModel&lt;/code&gt;, the index with the nearest
                  color is chosen.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the coordinates are not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x the X coordinate of the pixel to set                    
                </param>
                <param>
                    y the Y coordinate of the pixel to set                    
                </param>
                <param>
                    rgb the RGB value                    
                </param>
                <see>
                    #getRGB(int,int)                    
                </see>
                <see>
                    #getRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="setRGB" type="void" line="722">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="rgb" type="int"/>
                </params>
            </method>
            <javadoc line="725">
                Sets an array of integer pixels in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB color space,
                  into a portion of the image data.  Color conversion takes place
                  if the default model does not match the image
                  &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of precision for
                  each color component in the returned data when
                  using this method.  With a specified coordinate (x,&amp;nbsp;y) in the
                  this image, the ARGB pixel can be accessed in this way:
                  &lt;pre&gt;
                  pixel   = rgbArray[offset + (y-startY)scansize + (x-startX)];
                  &lt;/pre&gt;
                  WARNING: No dithering takes place.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the region is not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    startX      the starting X coordinate                    
                </param>
                <param>
                    startY      the starting Y coordinate                    
                </param>
                <param>
                    w           width of the region                    
                </param>
                <param>
                    h           height of the region                    
                </param>
                <param>
                    rgbArray    the rgb pixels                    
                </param>
                <param>
                    offset      offset into the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <param>
                    scansize    scanline stride for the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <see>
                    #getRGB(int,int)                    
                </see>
                <see>
                    #getRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="setRGB" type="void" line="752">
                <params>
                    <param name="startX" type="int"/>
                    <param name="startY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rgbArray" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="yoff" type="int" line="753"/>
                <declaration name="off" type="int" line="754"/>
                <declaration name="pixel" type="Object" line="755"/>
                <scope line="756">
                    <scope line="758"/>
                </scope>
            </method>
            <javadoc line="764">
                Returns the width of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the width of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="768"/>
            <javadoc line="771">
                Returns the height of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the height of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="775"/>
            <javadoc line="778">
                Returns the width of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    observer ignored                    
                </param>
                <return>
                    the width of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="783">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="786">
                Returns the height of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    observer ignored                    
                </param>
                <return>
                    the height of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="791">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="794">
                Returns the object that produces the pixels for the image.                
                <return>
                    the {@link ImageProducer} that is used to produce the
                      pixels for this image.                    
                </return>
                <see>
                    ImageProducer                    
                </see>
            </javadoc>
            <method name="getSource" type="ImageProducer" line="800">
                <scope line="801">
                    <scope line="802"/>
                </scope>
            </method>
            <javadoc line="809">
                Returns a property of the image by name.  Individual property names
                  are defined by the various image formats.  If a property is not
                  defined for a particular image, this method returns the
                  &lt;code&gt;UndefinedProperty&lt;/code&gt; field.  If the properties
                  for this image are not yet known, then this method returns
                  &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;ImageObserver&lt;/code&gt; object is
                  notified later.  The property name &quot;comment&quot; should be used to
                  store an optional comment that can be presented to the user as a
                  description of the image, its source, or its author.                
                <param>
                    name the property name                    
                </param>
                <param>
                    observer the &lt;code&gt;ImageObserver&lt;/code&gt; that receives
                      notification regarding image information                    
                </param>
                <return>
                    an {@link Object} that is the property referred to by the
                      specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if the
                      properties of this image are not yet known.                    
                </return>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt; if the property name is null.                    
                </throws>
                <see>
                    ImageObserver                    
                </see>
                <see>
                    java.awt.Image#UndefinedProperty                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="829">
                <params>
                    <param name="name" type="String"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="832">
                Returns a property of the image by name.                
                <param>
                    name the property name                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; that is the property referred to by
                      the specified &lt;code&gt;name&lt;/code&gt;.                    
                </return>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt; if the property name is null.                    
                </throws>
            </javadoc>
            <method name="getProperty" type="Object" line="839">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="840"/>
                <scope line="843"/>
                <declaration name="o" type="Object" line="846"/>
                <scope line="847"/>
            </method>
            <javadoc line="852">
                This method returns a {@link Graphics2D}, but is here
                  for backwards compatibility.  {@link #createGraphics() createGraphics} is more
                  convenient, since it is declared to return a
                  &lt;code&gt;Graphics2D&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Graphics2D&lt;/code&gt;, which can be used to draw into
                      this image.                    
                </return>
            </javadoc>
            <method name="getGraphics" type="java.awt.Graphics" line="860"/>
            <javadoc line="863">
                Creates a &lt;code&gt;Graphics2D&lt;/code&gt;, which can be used to draw into
                  this &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Graphics2D&lt;/code&gt;, used for drawing into this
                      image.                    
                </return>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="869">
                <declaration name="env" type="GraphicsEnvironment" line="870"/>
            </method>
            <javadoc line="873">
                Returns a subimage defined by a specified rectangular region.
                  The returned &lt;code&gt;BufferedImage&lt;/code&gt; shares the same
                  data array as the original image.                
                <param>
                    x the X coordinate of the upper-left corner of the
                      specified rectangular region                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the
                      specified rectangular region                    
                </param>
                <param>
                    w the width of the specified rectangular region                    
                </param>
                <param>
                    h the height of the specified rectangular region                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; that is the subimage of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    &lt;code&gt;RasterFormatException&lt;/code&gt; if the specified
                      area is not contained within this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getSubimage" type="BufferedImage" line="888">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="891">
                Returns whether or not the alpha has been premultiplied.  It
                  returns &lt;code&gt;false&lt;/code&gt; if there is no alpha.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the alpha has been premultiplied;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isAlphaPremultiplied" type="boolean" line="897"/>
            <javadoc line="900">
                Forces the data to match the state specified in the
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; variable.  It may multiply or
                  divide the color raster data by alpha, or do nothing if the data is
                  in the correct state.                
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the alpha has been
                      premultiplied; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </param>
            </javadoc>
            <method name="coerceData" type="void" line="908">
                <params>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <scope line="909"/>
            </method>
            <javadoc line="913">
                Returns a &lt;code&gt;String&lt;/code&gt; representation of this
                  &lt;code&gt;BufferedImage&lt;/code&gt; object and its values.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="919"/>
            <javadoc line="922">
                Returns a {@link Vector} of {@link RenderedImage} objects that are
                  the immediate sources, not the sources of these immediate sources,
                  of image data for this &lt;code&gt;BufferedImage&lt;/code&gt;.  This
                  method returns &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;BufferedImage&lt;/code&gt;
                  has no information about its immediate sources.  It returns an
                  empty &lt;code&gt;Vector&lt;/code&gt; if the &lt;code&gt;BufferedImage&lt;/code&gt; has no
                  immediate sources.                
                <return>
                    a &lt;code&gt;Vector&lt;/code&gt; containing immediate sources of
                      this &lt;code&gt;BufferedImage&lt;/code&gt; object&apos;s image date, or
                      &lt;code&gt;null&lt;/code&gt; if this &lt;code&gt;BufferedImage&lt;/code&gt; has
                      no information about its immediate sources, or an empty
                      &lt;code&gt;Vector&lt;/code&gt; if this &lt;code&gt;BufferedImage&lt;/code&gt;
                      has no immediate sources.                    
                </return>
            </javadoc>
            <method name="getSources" type="Vector&lt;RenderedImage&gt;" line="937"/>
            <javadoc line="940">
                Returns an array of names recognized by{@link #getProperty(String) getProperty(String)}or &lt;code&gt;null&lt;/code&gt;, if no property names are recognized.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; array containing all of the property
                      names that &lt;code&gt;getProperty(String)&lt;/code&gt; recognizes;
                      or &lt;code&gt;null&lt;/code&gt; if no property names are recognized.                    
                </return>
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="946"/>
            <javadoc line="949">
                Returns the minimum x coordinate of this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  This is always zero.                
                <return>
                    the minimum x coordinate of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getMinX" type="int" line="955"/>
            <javadoc line="958">
                Returns the minimum y coordinate of this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  This is always zero.                
                <return>
                    the minimum y coordinate of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getMinY" type="int" line="964"/>
            <javadoc line="967">
                Returns the &lt;code&gt;SampleModel&lt;/code&gt; associated with this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;SampleModel&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="973"/>
            <javadoc line="976">
                Returns the number of tiles in the x direction.
                  This is always one.                
                <return>
                    the number of tiles in the x direction.                    
                </return>
            </javadoc>
            <method name="getNumXTiles" type="int" line="981"/>
            <javadoc line="984">
                Returns the number of tiles in the y direction.
                  This is always one.                
                <return>
                    the number of tiles in the y direction.                    
                </return>
            </javadoc>
            <method name="getNumYTiles" type="int" line="989"/>
            <javadoc line="992">
                Returns the minimum tile index in the x direction.
                  This is always zero.                
                <return>
                    the minimum tile index in the x direction.                    
                </return>
            </javadoc>
            <method name="getMinTileX" type="int" line="997"/>
            <javadoc line="1000">
                Returns the minimum tile index in the y direction.
                  This is always zero.                
                <return>
                    the mininum tile index in the y direction.                    
                </return>
            </javadoc>
            <method name="getMinTileY" type="int" line="1005"/>
            <javadoc line="1008">
                Returns the tile width in pixels.                
                <return>
                    the tile width in pixels.                    
                </return>
            </javadoc>
            <method name="getTileWidth" type="int" line="1012"/>
            <javadoc line="1015">
                Returns the tile height in pixels.                
                <return>
                    the tile height in pixels.                    
                </return>
            </javadoc>
            <method name="getTileHeight" type="int" line="1019"/>
            <javadoc line="1022">
                Returns the x offset of the tile grid relative to the origin,
                  For example, the x coordinate of the location of tile
                  (0,&amp;nbsp;0).  This is always zero.                
                <return>
                    the x offset of the tile grid.                    
                </return>
            </javadoc>
            <method name="getTileGridXOffset" type="int" line="1028"/>
            <javadoc line="1031">
                Returns the y offset of the tile grid relative to the origin,
                  For example, the y coordinate of the location of tile
                  (0,&amp;nbsp;0).  This is always zero.                
                <return>
                    the y offset of the tile grid.                    
                </return>
            </javadoc>
            <method name="getTileGridYOffset" type="int" line="1037"/>
            <javadoc line="1040">
                Returns tile (&lt;code&gt;tileX&lt;/code&gt;,&amp;nbsp;&lt;code&gt;tileY&lt;/code&gt;).  Note
                  that &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are indices
                  into the tile array, not pixel locations.  The &lt;code&gt;Raster&lt;/code&gt;
                  that is returned is live, which means that it is updated if the
                  image is changed.                
                <param>
                    tileX the x index of the requested tile in the tile array                    
                </param>
                <param>
                    tileY the y index of the requested tile in the tile array                    
                </param>
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is the tile defined by the
                      arguments &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt;.                    
                </return>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if both
                      &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are not
                      equal to 0                    
                </exception>
            </javadoc>
            <method name="getTile" type="Raster" line="1054">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1055"/>
            </method>
            <javadoc line="1060">
                Returns the image as one large tile.  The &lt;code&gt;Raster&lt;/code&gt;
                  returned is a copy of the image data is not updated if the
                  image is changed.                
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is a copy of the image data.                    
                </return>
                <see>
                    #setData(Raster)                    
                </see>
            </javadoc>
            <method name="getData" type="Raster" line="1067">
                <declaration name="width" type="int" line="1068"/>
                <declaration name="height" type="int" line="1069"/>
                <declaration name="startX" type="int" line="1070"/>
                <declaration name="startY" type="int" line="1071"/>
                <declaration name="wr" type="WritableRaster" line="1072"/>
                <declaration name="tdata" type="Object" line="1073"/>
                <scope line="1074"/>
            </method>
            <javadoc line="1080">
                Computes and returns an arbitrary region of the
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  The &lt;code&gt;Raster&lt;/code&gt; returned is a
                  copy of the image data and is not updated if the image is
                  changed.                
                <param>
                    rect the region of the &lt;code&gt;BufferedImage&lt;/code&gt; to be
                      returned.                    
                </param>
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is a copy of the image data of
                      the specified region of the &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
                <see>
                    #setData(Raster)                    
                </see>
            </javadoc>
            <method name="getData" type="Raster" line="1091">
                <params>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="1092"/>
                <declaration name="nsm" type="SampleModel" line="1093"/>
                <declaration name="wr" type="WritableRaster" line="1094"/>
                <declaration name="width" type="int" line="1095"/>
                <declaration name="height" type="int" line="1096"/>
                <declaration name="startX" type="int" line="1097"/>
                <declaration name="startY" type="int" line="1098"/>
                <declaration name="tdata" type="Object" line="1099"/>
                <scope line="1100"/>
            </method>
            <javadoc line="1106">
                Computes an arbitrary rectangular region of the
                  &lt;code&gt;BufferedImage&lt;/code&gt; and copies it into a specified
                  &lt;code&gt;WritableRaster&lt;/code&gt;.  The region to be computed is
                  determined from the bounds of the specified
                  &lt;code&gt;WritableRaster&lt;/code&gt;.  The specified
                  &lt;code&gt;WritableRaster&lt;/code&gt; must have a
                  &lt;code&gt;SampleModel&lt;/code&gt; that is compatible with this image.  If
                  &lt;code&gt;outRaster&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  an appropriate &lt;code&gt;WritableRaster&lt;/code&gt; is created.                
                <param>
                    outRaster a &lt;code&gt;WritableRaster&lt;/code&gt; to hold the returned
                      part of the image, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    a reference to the supplied or created
                      &lt;code&gt;WritableRaster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="copyData" type="WritableRaster" line="1121">
                <params>
                    <param name="outRaster" type="WritableRaster"/>
                </params>
                <scope line="1122"/>
                <declaration name="width" type="int" line="1125"/>
                <declaration name="height" type="int" line="1126"/>
                <declaration name="startX" type="int" line="1127"/>
                <declaration name="startY" type="int" line="1128"/>
                <declaration name="tdata" type="Object" line="1129"/>
                <scope line="1130"/>
            </method>
            <javadoc line="1136">
                Sets a rectangular region of the image to the contents of the
                  specified &lt;code&gt;Raster&lt;/code&gt; &lt;code&gt;r&lt;/code&gt;, which is
                  assumed to be in the same coordinate space as the
                  &lt;code&gt;BufferedImage&lt;/code&gt;. The operation is clipped to the bounds
                  of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    r the specified &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <see>
                    #getData                    
                </see>
                <see>
                    #getData(Rectangle)                    
                </see>
            </javadoc>
            <method name="setData" type="void" line="1146">
                <params>
                    <param name="r" type="Raster"/>
                </params>
                <declaration name="width" type="int" line="1147"/>
                <declaration name="height" type="int" line="1148"/>
                <declaration name="startX" type="int" line="1149"/>
                <declaration name="startY" type="int" line="1150"/>
                <declaration name="tdata" type="int[]" line="1151"/>
                <declaration name="rclip" type="Rectangle" line="1152"/>
                <declaration name="bclip" type="Rectangle" line="1153"/>
                <declaration name="intersect" type="Rectangle" line="1154"/>
                <scope line="1155"/>
                <scope line="1162"/>
            </method>
            <javadoc line="1167">
                Adds a tile observer.  If the observer is already present,
                  it receives multiple notifications.                
                <param>
                    to the specified {@link TileObserver}                    
                </param>
            </javadoc>
            <method name="addTileObserver" type="void" line="1172">
                <params>
                    <param name="to" type="TileObserver"/>
                </params>
            </method>
            <javadoc line="1174">
                Removes a tile observer.  If the observer was not registered,
                  nothing happens.  If the observer was registered for multiple
                  notifications, it is now registered for one fewer notification.                
                <param>
                    to the specified &lt;code&gt;TileObserver&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="removeTileObserver" type="void" line="1180">
                <params>
                    <param name="to" type="TileObserver"/>
                </params>
            </method>
            <javadoc line="1182">
                Returns whether or not a tile is currently checked out for writing.                
                <param>
                    tileX the x index of the tile.                    
                </param>
                <param>
                    tileY the y index of the tile.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the tile specified by the specified
                      indices is checked out for writing; &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if both
                      &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are not equal
                      to 0                    
                </exception>
            </javadoc>
            <method name="isTileWritable" type="boolean" line="1193">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1194"/>
            </method>
            <javadoc line="1199">
                Returns an array of {@link Point} objects indicating which tiles
                  are checked out for writing.  Returns &lt;code&gt;null&lt;/code&gt; if none are
                  checked out.                
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; array that indicates the tiles that
                      are checked out for writing, or &lt;code&gt;null&lt;/code&gt; if no
                      tiles are checked out for writing.                    
                </return>
            </javadoc>
            <method name="getWritableTileIndices" type="Point[]" line="1207">
                <declaration name="p" type="Point[]" line="1208"/>
            </method>
            <javadoc line="1212">
                Returns whether or not any tile is checked out for writing.
                  Semantically equivalent to
                  &lt;pre&gt;
                  (getWritableTileIndices() != null).
                  &lt;/pre&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if any tile is checked out for writing;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="hasTileWriters" type="boolean" line="1221"/>
            <javadoc line="1224">
                Checks out a tile for writing.  All registered
                  &lt;code&gt;TileObservers&lt;/code&gt; are notified when a tile goes from having
                  no writers to having one writer.                
                <param>
                    tileX the x index of the tile                    
                </param>
                <param>
                    tileY the y index of the tile                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; that is the tile, indicated by
                      the specified indices, to be checked out for writing.                    
                </return>
            </javadoc>
            <method name="getWritableTile" type="WritableRaster" line="1233">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
            </method>
            <javadoc line="1236">
                Relinquishes permission to write to a tile.  If the caller
                  continues to write to the tile, the results are undefined.
                  Calls to this method should only appear in matching pairs
                  with calls to {@link #getWritableTile(int,int) getWritableTile(int, int)}.  Any other leads
                  to undefined results.  All registered &lt;code&gt;TileObservers&lt;/code&gt;
                  are notified when a tile goes from having one writer to having no
                  writers.                
                <param>
                    tileX the x index of the tile                    
                </param>
                <param>
                    tileY the y index of the tile                    
                </param>
            </javadoc>
            <method name="releaseWritableTile" type="void" line="1247">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
            </method>
            <javadoc line="1249">
                Returns the transparency.  Returns either OPAQUE, BITMASK,
                  or TRANSLUCENT.                
                <return>
                    the transparency of this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTransparency" type="int" line="1258"/>
        </class>
    </source>