<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.ImageCapabilities"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="sun.awt.image.BytePackedRaster"/>
        <import package="sun.awt.image.ShortComponentRaster"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <import package="sun.awt.image.IntegerComponentRaster"/>
        <import package="sun.awt.image.OffScreenImageSource"/>
        <class name="BufferedImage" line="47">
            <extends class="java.awt.Image"/>
            <comment line="81">
                color channels                
            </comment>
            <comment line="83">
                Image Type Constants                
            </comment>
            <implements interface="WritableRenderedImage"/>
            <implements interface="Transparency"/>
            <javadoc line="47">
                The &lt;code&gt;BufferedImage&lt;/code&gt; subclass describes an {@link java.awt.Image Image} with an accessible buffer of image data.
                  A &lt;code&gt;BufferedImage&lt;/code&gt; is comprised of a {@link ColorModel} and a{@link Raster} of image data.
                  The number and types of bands in the {@link SampleModel} of the
                  &lt;code&gt;Raster&lt;/code&gt; must match the number and types required by the
                  &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha components.
                  All &lt;code&gt;BufferedImage&lt;/code&gt; objects have an upper left corner
                  coordinate of (0,&amp;nbsp;0).  Any &lt;code&gt;Raster&lt;/code&gt; used to construct a
                  &lt;code&gt;BufferedImage&lt;/code&gt; must therefore have minX=0 and minY=0.
                  &lt;p&gt;
                  This class relies on the data fetching and setting methods
                  of &lt;code&gt;Raster&lt;/code&gt;,
                  and on the color characterization methods of &lt;code&gt;ColorModel&lt;/code&gt;.                
                <see>
                    ColorModel                    
                </see>
                <see>
                    Raster                    
                </see>
                <see>
                    WritableRaster                    
                </see>
            </javadoc>
            <declaration name="imageType" type="int" line="73"/>
            <declaration name="colorModel" type="ColorModel" line="74"/>
            <declaration name="raster" type="WritableRaster" line="75"/>
            <declaration name="osis" type="OffScreenImageSource" line="76"/>
            <declaration name="properties" type="Hashtable" line="77"/>
            <declaration name="isAlphaPremultiplied" type="boolean" line="79"/>
            <declaration name="TYPE_CUSTOM" type="int" line="86"/>
            <javadoc line="86">
                Image type is not recognized so it must be a customized
                  image.  This type is only used as a return value for the getType()
                  method.                
            </javadoc>
            <declaration name="TYPE_INT_RGB" type="int" line="93"/>
            <javadoc line="93">
                Represents an image with 8-bit RGB color components packed into
                  integer pixels.  The image has a {@link DirectColorModel} without
                  alpha.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_INT_ARGB" type="int" line="106"/>
            <javadoc line="106">
                Represents an image with 8-bit RGBA color components packed into
                  integer pixels.  The image has a &lt;code&gt;DirectColorModel&lt;/code&gt;
                  with alpha. The color data in this image is considered not to be
                  premultiplied with alpha.  When this type is used as the
                  &lt;code&gt;imageType&lt;/code&gt; argument to a &lt;code&gt;BufferedImage&lt;/code&gt;
                  constructor, the created image is consistent with images
                  created in the JDK1.1 and earlier releases.                
            </javadoc>
            <declaration name="TYPE_INT_ARGB_PRE" type="int" line="117"/>
            <javadoc line="117">
                Represents an image with 8-bit RGBA color components packed into
                  integer pixels.  The image has a &lt;code&gt;DirectColorModel&lt;/code&gt;
                  with alpha.  The color data in this image is considered to be
                  premultiplied with alpha.                
            </javadoc>
            <declaration name="TYPE_INT_BGR" type="int" line="125"/>
            <javadoc line="125">
                Represents an image with 8-bit RGB color components, corresponding
                  to a Windows- or Solaris- style BGR color model, with the colors
                  Blue, Green, and Red packed into integer pixels.  There is no alpha.
                  The image has a {@link DirectColorModel}.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_3BYTE_BGR" type="int" line="139"/>
            <javadoc line="139">
                Represents an image with 8-bit RGB color components, corresponding
                  to a Windows-style BGR color model) with the colors Blue, Green,
                  and Red stored in 3 bytes.  There is no alpha.  The image has a
                  &lt;code&gt;ComponentColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_4BYTE_ABGR" type="int" line="153"/>
            <javadoc line="153">
                Represents an image with 8-bit RGBA color components with the colors
                  Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with alpha.  The
                  color data in this image is considered not to be premultiplied with
                  alpha.  The byte data is interleaved in a single
                  byte array in the order A, B, G, R
                  from lower to higher byte addresses within each pixel.                
            </javadoc>
            <declaration name="TYPE_4BYTE_ABGR_PRE" type="int" line="164"/>
            <javadoc line="164">
                Represents an image with 8-bit RGBA color components with the colors
                  Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with alpha. The color
                  data in this image is considered to be premultiplied with alpha.
                  The byte data is interleaved in a single byte array in the order
                  A, B, G, R from lower to higher byte addresses within each pixel.                
            </javadoc>
            <declaration name="TYPE_USHORT_565_RGB" type="int" line="174"/>
            <javadoc line="174">
                Represents an image with 5-6-5 RGB color components (5-bits red,
                  6-bits green, 5-bits blue) with no alpha.  This image has
                  a &lt;code&gt;DirectColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_USHORT_555_RGB" type="int" line="187"/>
            <javadoc line="187">
                Represents an image with 5-5-5 RGB color components (5-bits red,
                  5-bits green, 5-bits blue) with no alpha.  This image has
                  a &lt;code&gt;DirectColorModel&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_BYTE_GRAY" type="int" line="200"/>
            <javadoc line="200">
                Represents a unsigned byte grayscale image, non-indexed.  This
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with a CS_GRAY{@link ColorSpace}.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_USHORT_GRAY" type="int" line="213"/>
            <javadoc line="213">
                Represents an unsigned short grayscale image, non-indexed).  This
                  image has a &lt;code&gt;ComponentColorModel&lt;/code&gt; with a CS_GRAY
                  &lt;code&gt;ColorSpace&lt;/code&gt;.
                  When data with non-opaque alpha is stored
                  in an image of this type,
                  the color data must be adjusted to a non-premultiplied form
                  and the alpha discarded,
                  as described in the{@link java.awt.AlphaComposite} documentation.                
            </javadoc>
            <declaration name="TYPE_BYTE_BINARY" type="int" line="226"/>
            <javadoc line="226">
                Represents an opaque byte-packed 1, 2, or 4 bit image.  The
                  image has an {@link IndexColorModel} without alpha.  When this
                  type is used as the &lt;code&gt;imageType&lt;/code&gt; argument to the
                  &lt;code&gt;BufferedImage&lt;/code&gt; constructor that takes an
                  &lt;code&gt;imageType&lt;/code&gt; argument but no &lt;code&gt;ColorModel&lt;/code&gt;
                  argument, a 1-bit image is created with an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; with two colors in the default
                  sRGB &lt;code&gt;ColorSpace&lt;/code&gt;: {0,&amp;nbsp;0,&amp;nbsp;0} and
                  {255,&amp;nbsp;255,&amp;nbsp;255}.
                  &lt;p&gt; Images with 2 or 4 bits per pixel may be constructed via
                  the &lt;code&gt;BufferedImage&lt;/code&gt; constructor that takes a
                  &lt;code&gt;ColorModel&lt;/code&gt; argument by supplying a
                  &lt;code&gt;ColorModel&lt;/code&gt; with an appropriate map size.
                  &lt;p&gt; Images with 8 bits per pixel should use the image types
                  &lt;code&gt;TYPE_BYTE_INDEXED&lt;/code&gt; or &lt;code&gt;TYPE_BYTE_GRAY&lt;/code&gt;
                  depending on their &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt; When color data is stored in an image of this type,
                  the closest color in the colormap is determined
                  by the &lt;code&gt;IndexColorModel&lt;/code&gt; and the resulting index is stored.
                  Approximation and loss of alpha or color components
                  can result, depending on the colors in the
                  &lt;code&gt;IndexColorModel&lt;/code&gt; colormap.                
            </javadoc>
            <declaration name="TYPE_BYTE_INDEXED" type="int" line="255"/>
            <javadoc line="255">
                Represents an indexed byte image.  When this type is used as the
                  &lt;code&gt;imageType&lt;/code&gt; argument to the &lt;code&gt;BufferedImage&lt;/code&gt;
                  constructor that takes an &lt;code&gt;imageType&lt;/code&gt; argument
                  but no &lt;code&gt;ColorModel&lt;/code&gt; argument, an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; is created with
                  a 256-color 6/6/6 color cube palette with the rest of the colors
                  from 216-255 populated by grayscale values in the
                  default sRGB ColorSpace.
                  &lt;p&gt; When color data is stored in an image of this type,
                  the closest color in the colormap is determined
                  by the &lt;code&gt;IndexColorModel&lt;/code&gt; and the resulting index is stored.
                  Approximation and loss of alpha or color components
                  can result, depending on the colors in the
                  &lt;code&gt;IndexColorModel&lt;/code&gt; colormap.                
            </javadoc>
            <declaration name="DCM_RED_MASK" type="int" line="274"/>
            <declaration name="DCM_GREEN_MASK" type="int" line="275"/>
            <declaration name="DCM_BLUE_MASK" type="int" line="276"/>
            <declaration name="DCM_ALPHA_MASK" type="int" line="277"/>
            <declaration name="DCM_565_RED_MASK" type="int" line="278"/>
            <declaration name="DCM_565_GRN_MASK" type="int" line="279"/>
            <declaration name="DCM_565_BLU_MASK" type="int" line="280"/>
            <declaration name="DCM_555_RED_MASK" type="int" line="281"/>
            <declaration name="DCM_555_GRN_MASK" type="int" line="282"/>
            <declaration name="DCM_555_BLU_MASK" type="int" line="283"/>
            <declaration name="DCM_BGR_RED_MASK" type="int" line="284"/>
            <declaration name="DCM_BGR_GRN_MASK" type="int" line="285"/>
            <declaration name="DCM_BGR_BLU_MASK" type="int" line="286"/>
            <method name="initIDs" type="void" line="289"/>
            <scope line="290"/>
            <javadoc line="295">
                Constructs a &lt;code&gt;BufferedImage&lt;/code&gt; of one of the predefined
                  image types.  The &lt;code&gt;ColorSpace&lt;/code&gt; for the image is the
                  default sRGB space.                
                <param>
                    width     width of the created image                    
                </param>
                <param>
                    height    height of the created image                    
                </param>
                <param>
                    imageType type of the created image                    
                </param>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    #TYPE_INT_RGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    #TYPE_INT_BGR                    
                </see>
                <see>
                    #TYPE_3BYTE_BGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    #TYPE_BYTE_GRAY                    
                </see>
                <see>
                    #TYPE_USHORT_GRAY                    
                </see>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
                <see>
                    #TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    #TYPE_USHORT_555_RGB                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="319">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageType" type="int"/>
                </params>
                <comment line="325">
                    Red                    
                </comment>
                <comment line="326">
                    Green                    
                </comment>
                <comment line="327">
                    Blue                    
                </comment>
                <comment line="328">
                    Alpha                    
                </comment>
                <comment line="350">
                    Red                    
                </comment>
                <comment line="351">
                    Green                    
                </comment>
                <comment line="352">
                    Blue                    
                </comment>
                <comment line="353">
                    Alpha                    
                </comment>
                <comment line="354">
                    Alpha Premultiplied                    
                </comment>
                <comment line="366">
                    Red                    
                </comment>
                <comment line="367">
                    Green                    
                </comment>
                <comment line="368">
                    Blue                    
                </comment>
                <comment line="456">
                    Create a 6x6x6 color cube                    
                </comment>
                <comment line="466">
                    And populate the rest of the cmap with gray values                    
                </comment>
                <comment line="469">
                    The gray ramp will be between 18 and 252                    
                </comment>
                <scope line="322"/>
                <scope line="335"/>
                <scope line="344"/>
                <scope line="363"/>
                <scope line="375">
                    <declaration name="cs" type="ColorSpace" line="376"/>
                    <declaration name="nBits" type="int[]" line="377"/>
                    <declaration name="bOffs" type="int[]" line="378"/>
                </scope>
                <scope line="390">
                    <declaration name="cs" type="ColorSpace" line="391"/>
                    <declaration name="nBits" type="int[]" line="392"/>
                    <declaration name="bOffs" type="int[]" line="393"/>
                </scope>
                <scope line="405">
                    <declaration name="cs" type="ColorSpace" line="406"/>
                    <declaration name="nBits" type="int[]" line="407"/>
                    <declaration name="bOffs" type="int[]" line="408"/>
                </scope>
                <scope line="420">
                    <declaration name="cs" type="ColorSpace" line="421"/>
                    <declaration name="nBits" type="int[]" line="422"/>
                </scope>
                <scope line="432">
                    <declaration name="cs" type="ColorSpace" line="433"/>
                    <declaration name="nBits" type="int[]" line="434"/>
                </scope>
                <scope line="444">
                    <declaration name="arr" type="byte[]" line="445"/>
                </scope>
                <scope line="454">
                    <declaration name="cmap" type="int[]" line="456"/>
                    <declaration name="i" type="int" line="457"/>
                    <scope line="458">
                        <scope line="459">
                            <scope line="460"/>
                        </scope>
                    </scope>
                    <declaration name="grayIncr" type="int" line="466"/>
                    <declaration name="gray" type="int" line="469"/>
                    <scope line="470"/>
                </scope>
                <scope line="483"/>
                <scope line="495"/>
            </method>
            <javadoc line="514">
                Constructs a &lt;code&gt;BufferedImage&lt;/code&gt; of one of the predefined
                  image types:
                  TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.
                  &lt;p&gt; If the image type is TYPE_BYTE_BINARY, the number of
                  entries in the color model is used to determine whether the
                  image should have 1, 2, or 4 bits per pixel.  If the color model
                  has 1 or 2 entries, the image will have 1 bit per pixel.  If it
                  has 3 or 4 entries, the image with have 2 bits per pixel.  If
                  it has between 5 and 16 entries, the image will have 4 bits per
                  pixel.  Otherwise, an IllegalArgumentException will be thrown.                
                <param>
                    width     width of the created image                    
                </param>
                <param>
                    height    height of the created image                    
                </param>
                <param>
                    imageType type of the created image                    
                </param>
                <param>
                    cm        &lt;code&gt;IndexColorModel&lt;/code&gt; of the created image                    
                </param>
                <throws>
                    IllegalArgumentException   if the imageType is not
                      TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED or if the imageType is
                      TYPE_BYTE_BINARY and the color map has more than 16 entries.                    
                </throws>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="540">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="imageType" type="int"/>
                    <param name="cm" type="IndexColorModel"/>
                </params>
                <comment line="549">
                    Will be set below                    
                </comment>
                <scope line="541"/>
                <declaration name="bits" type="int" line="548"/>
                <declaration name="mapSize" type="int" line="549"/>
                <scope line="550"/>
                <scope line="552"/>
                <scope line="554"/>
                <scope line="556"/>
                <scope line="576"/>
            </method>
            <javadoc line="584">
                Constructs a new &lt;code&gt;BufferedImage&lt;/code&gt; with a specified
                  &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;Raster&lt;/code&gt;.  If the number and
                  types of bands in the &lt;code&gt;SampleModel&lt;/code&gt; of the
                  &lt;code&gt;Raster&lt;/code&gt; do not match the number and types required by
                  the &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha
                  components, a {@link RasterFormatException} is thrown.  This
                  method can multiply or divide the color &lt;code&gt;Raster&lt;/code&gt; data by
                  alpha to match the &lt;code&gt;alphaPremultiplied&lt;/code&gt; state
                  in the &lt;code&gt;ColorModel&lt;/code&gt;.  Properties for this
                  &lt;code&gt;BufferedImage&lt;/code&gt; can be established by passing
                  in a {@link Hashtable} of &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt;
                  pairs.                
                <param>
                    cm &lt;code&gt;ColorModel&lt;/code&gt; for the new image                    
                </param>
                <param>
                    raster     &lt;code&gt;Raster&lt;/code&gt; for the image data                    
                </param>
                <param>
                    isRasterPremultiplied   if &lt;code&gt;true&lt;/code&gt;, the data in
                      the raster has been premultiplied with alpha.                    
                </param>
                <param>
                    properties &lt;code&gt;Hashtable&lt;/code&gt; of
                      &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt; pairs.                    
                </param>
                <exception>
                    &lt;code&gt;RasterFormatException&lt;/code&gt; if the number and
                      types of bands in the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      &lt;code&gt;Raster&lt;/code&gt; do not match the number and types required by
                      the &lt;code&gt;ColorModel&lt;/code&gt; to represent its color and alpha
                      components.                    
                </exception>
                <exception>
                    &lt;code&gt;IllegalArgumentException&lt;/code&gt; if
                      &lt;code&gt;raster&lt;/code&gt; is incompatible with &lt;code&gt;cm&lt;/code&gt;                    
                </exception>
                <see>
                    ColorModel                    
                </see>
                <see>
                    Raster                    
                </see>
                <see>
                    WritableRaster                    
                </see>
            </javadoc>
            <method name="BufferedImage" type="constructor" line="625">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isRasterPremultiplied" type="boolean"/>
                    <param name="properties" type="Hashtable<?,?>"/>
                </params>
                <comment line="617">
                    FOR NOW THE CODE WHICH DEFINES THE RASTER TYPE IS DUPLICATED BY DVF
                      SEE THE METHOD DEFINERASTERTYPE @ RASTEROUTPUTMANAGER                    
                </comment>
                <comment line="649">
                    Force the raster data alpha state to match the premultiplied
                     state in the color model                    
                </comment>
                <comment line="659">
                    Check if this might be a child raster (fix for bug 4240596)                    
                </comment>
                <comment line="684">
                    Check if the raster params and the color model
                     are correct                    
                </comment>
                <comment line="691">
                    Now check on the DirectColorModel params                    
                </comment>
                <comment line="705">
                    No Alpha                    
                </comment>
                <comment line="710">
                    if (dcm.getRedMask() == DCM_RED_MASK &amp;&amp;                    
                </comment>
                <comment line="716">
                    if (rmask == DCM_BGR_RED_MASK &amp;&amp;                    
                </comment>
                <comment line="717">
                    if (iraster.getPixelStride() == 1                    
                </comment>
                <comment line="718">
                    ((raster instanceof IntegerComponentRaster) &amp;&amp;                    
                </comment>
                <comment line="727">
                    if (raster instanceof BytePackedRaster)                    
                </comment>
                <comment line="734">
                    else if (cm instanceof IndexColorModel) &amp;&amp; (numBands == 1))                    
                </comment>
                <comment line="753">
                    else if ((cm instanceof IndexColorModel) &amp;&amp; (numBands == 1))                    
                </comment>
                <comment line="793">
                    else if ((raster instanceof ByteComponentRaster) &amp;&amp;                    
                </comment>
                <scope line="627"/>
                <scope line="634"/>
                <declaration name="numBands" type="int" line="644"/>
                <declaration name="isAlphaPre" type="boolean" line="645"/>
                <declaration name="cs" type="ColorSpace" line="646"/>
                <declaration name="sm" type="SampleModel" line="652"/>
                <declaration name="csType" type="int" line="654"/>
                <scope line="655">
                    <scope line="657">
                        <scope line="660"/>
                        <scope line="665"/>
                        <scope line="670"/>
                    </scope>
                    <scope line="673"/>
                </scope>
                <scope line="680">
                    <declaration name="iraster" type="IntegerComponentRaster" line="681"/>
                    <declaration name="pixSize" type="int" line="685"/>
                    <scope line="689">
                        <declaration name="dcm" type="DirectColorModel" line="691"/>
                        <declaration name="rmask" type="int" line="692"/>
                        <declaration name="gmask" type="int" line="693"/>
                        <declaration name="bmask" type="int" line="694"/>
                        <scope line="697">
                            <scope line="698"/>
                            <scope line="703">
                                <scope line="705"/>
                            </scope>
                        </scope>
                        <scope line="711">
                            <scope line="712"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="720">
                    <declaration name="icm" type="IndexColorModel" line="721"/>
                    <declaration name="pixSize" type="int" line="722"/>
                    <scope line="724"/>
                    <scope line="727">
                        <declaration name="braster" type="ByteComponentRaster" line="728"/>
                        <scope line="729"/>
                    </scope>
                </scope>
                <scope line="738">
                    <declaration name="dcm" type="DirectColorModel" line="739"/>
                    <scope line="740">
                        <scope line="742"/>
                    </scope>
                    <scope line="746">
                        <scope line="748"/>
                    </scope>
                </scope>
                <scope line="757">
                    <declaration name="ccm" type="ComponentColorModel" line="758"/>
                    <declaration name="csm" type="PixelInterleavedSampleModel" line="759"/>
                    <declaration name="braster" type="ByteComponentRaster" line="761"/>
                    <declaration name="offs" type="int[]" line="762"/>
                    <scope line="763"/>
                    <declaration name="nBits" type="int[]" line="770"/>
                    <declaration name="is8bit" type="boolean" line="771"/>
                    <scope line="772">
                        <scope line="773"/>
                    </scope>
                    <scope line="782">
                        <scope line="783"/>
                        <scope line="786"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="795">
                Returns the image type.  If it is not one of the known types,
                  TYPE_CUSTOM is returned.                
                <return>
                    the image type of this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <see>
                    #TYPE_INT_RGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB                    
                </see>
                <see>
                    #TYPE_INT_ARGB_PRE                    
                </see>
                <see>
                    #TYPE_INT_BGR                    
                </see>
                <see>
                    #TYPE_3BYTE_BGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR                    
                </see>
                <see>
                    #TYPE_4BYTE_ABGR_PRE                    
                </see>
                <see>
                    #TYPE_BYTE_GRAY                    
                </see>
                <see>
                    #TYPE_BYTE_BINARY                    
                </see>
                <see>
                    #TYPE_BYTE_INDEXED                    
                </see>
                <see>
                    #TYPE_USHORT_GRAY                    
                </see>
                <see>
                    #TYPE_USHORT_565_RGB                    
                </see>
                <see>
                    #TYPE_USHORT_555_RGB                    
                </see>
                <see>
                    #TYPE_CUSTOM                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="814"/>
            <javadoc line="818">
                Returns the &lt;code&gt;ColorModel&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;ColorModel&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="823"/>
            <javadoc line="827">
                Returns the {@link WritableRaster}.                
                <return>
                    the &lt;code&gt;WriteableRaster&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getRaster" type="WritableRaster" line="832"/>
            <javadoc line="837">
                Returns a &lt;code&gt;WritableRaster&lt;/code&gt; representing the alpha
                  channel for &lt;code&gt;BufferedImage&lt;/code&gt; objects
                  with &lt;code&gt;ColorModel&lt;/code&gt; objects that support a separate
                  spatial alpha channel, such as &lt;code&gt;ComponentColorModel&lt;/code&gt; and
                  &lt;code&gt;DirectColorModel&lt;/code&gt;.  Returns &lt;code&gt;null&lt;/code&gt; if there
                  is no alpha channel associated with the &lt;code&gt;ColorModel&lt;/code&gt; in
                  this image.  This method assumes that for all
                  &lt;code&gt;ColorModel&lt;/code&gt; objects other than
                  &lt;code&gt;IndexColorModel&lt;/code&gt;, if the &lt;code&gt;ColorModel&lt;/code&gt;
                  supports alpha, there is a separate alpha channel
                  which is stored as the last band of image data.
                  If the image uses an &lt;code&gt;IndexColorModel&lt;/code&gt; that
                  has alpha in the lookup table, this method returns
                  &lt;code&gt;null&lt;/code&gt; since there is no spatially discrete alpha
                  channel.  This method creates a new
                  &lt;code&gt;WritableRaster&lt;/code&gt;, but shares the data array.                
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if this
                      &lt;code&gt;BufferedImage&lt;/code&gt; has no alpha channel associated
                      with its &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAlphaRaster" type="WritableRaster" line="858"/>
            <javadoc line="862">
                Returns an integer pixel in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB colorspace.  Color
                  conversion takes place if this default model does not match
                  the image &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of
                  precision for each color component in the returned data when using
                  this method.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the coordinates are not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x the X coordinate of the pixel from which to get
                      the pixel in the default RGB color model and sRGB
                      color space                    
                </param>
                <param>
                    y the Y coordinate of the pixel from which to get
                      the pixel in the default RGB color model and sRGB
                      color space                    
                </param>
                <return>
                    an integer pixel in the default RGB color model and
                      default sRGB colorspace.                    
                </return>
                <see>
                    #setRGB(int,int,int)                    
                </see>
                <see>
                    #setRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="887">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="891">
                Returns an array of integer pixels in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB color space,
                  from a portion of the image data.  Color conversion takes
                  place if the default model does not match the image
                  &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of precision for
                  each color component in the returned data when
                  using this method.  With a specified coordinate (x,&amp;nbsp;y) in the
                  image, the ARGB pixel can be accessed in this way:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  pixel   = rgbArray[offset + (y-startY)scansize + (x-startX)]; &lt;/pre&gt;
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the region is not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    startX      the starting X coordinate                    
                </param>
                <param>
                    startY      the starting Y coordinate                    
                </param>
                <param>
                    w           width of region                    
                </param>
                <param>
                    h           height of region                    
                </param>
                <param>
                    rgbArray    if not &lt;code&gt;null&lt;/code&gt;, the rgb pixels are
                      written here                    
                </param>
                <param>
                    offset      offset into the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <param>
                    scansize    scanline stride for the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <return>
                    array of RGB pixels.                    
                </return>
                <see>
                    #setRGB(int,int,int)                    
                </see>
                <see>
                    #setRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="getRGB" type="int[]" line="924">
                <params>
                    <param name="startX" type="int"/>
                    <param name="startY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rgbArray" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="yoff" type="int" line="925"/>
                <declaration name="off" type="int" line="926"/>
                <declaration name="data" type="Object" line="927"/>
                <declaration name="nbands" type="int" line="928"/>
                <declaration name="dataType" type="int" line="929"/>
                <scope line="951"/>
                <scope line="955">
                    <scope line="957"/>
                </scope>
            </method>
            <javadoc line="968">
                Sets a pixel in this &lt;code&gt;BufferedImage&lt;/code&gt; to the specified
                  RGB value. The pixel is assumed to be in the default RGB color
                  model, TYPE_INT_ARGB, and default sRGB color space.  For images
                  with an &lt;code&gt;IndexColorModel&lt;/code&gt;, the index with the nearest
                  color is chosen.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the coordinates are not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    x the X coordinate of the pixel to set                    
                </param>
                <param>
                    y the Y coordinate of the pixel to set                    
                </param>
                <param>
                    rgb the RGB value                    
                </param>
                <see>
                    #getRGB(int,int)                    
                </see>
                <see>
                    #getRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="setRGB" type="void" line="987">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="rgb" type="int"/>
                </params>
            </method>
            <javadoc line="991">
                Sets an array of integer pixels in the default RGB color model
                  (TYPE_INT_ARGB) and default sRGB color space,
                  into a portion of the image data.  Color conversion takes place
                  if the default model does not match the image
                  &lt;code&gt;ColorModel&lt;/code&gt;.  There are only 8-bits of precision for
                  each color component in the returned data when
                  using this method.  With a specified coordinate (x,&amp;nbsp;y) in the
                  this image, the ARGB pixel can be accessed in this way:
                  &lt;pre&gt;
                  pixel   = rgbArray[offset + (y-startY)scansize + (x-startX)];
                  &lt;/pre&gt;
                  WARNING: No dithering takes place.
                  &lt;p&gt;
                  An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown
                  if the region is not in bounds.
                  However, explicit bounds checking is not guaranteed.                
                <param>
                    startX      the starting X coordinate                    
                </param>
                <param>
                    startY      the starting Y coordinate                    
                </param>
                <param>
                    w           width of the region                    
                </param>
                <param>
                    h           height of the region                    
                </param>
                <param>
                    rgbArray    the rgb pixels                    
                </param>
                <param>
                    offset      offset into the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <param>
                    scansize    scanline stride for the &lt;code&gt;rgbArray&lt;/code&gt;                    
                </param>
                <see>
                    #getRGB(int,int)                    
                </see>
                <see>
                    #getRGB(int,int,int,int,int[],int,int)                    
                </see>
            </javadoc>
            <method name="setRGB" type="void" line="1022">
                <params>
                    <param name="startX" type="int"/>
                    <param name="startY" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="rgbArray" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
                <declaration name="yoff" type="int" line="1023"/>
                <declaration name="off" type="int" line="1024"/>
                <declaration name="pixel" type="Object" line="1025"/>
                <scope line="1027">
                    <scope line="1029"/>
                </scope>
            </method>
            <javadoc line="1037">
                Returns the width of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the width of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="1041"/>
            <javadoc line="1045">
                Returns the height of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the height of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="1049"/>
            <javadoc line="1053">
                Returns the width of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    observer ignored                    
                </param>
                <return>
                    the width of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="1058">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1062">
                Returns the height of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    observer ignored                    
                </param>
                <return>
                    the height of this &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="1067">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1071">
                Returns the object that produces the pixels for the image.                
                <return>
                    the {@link ImageProducer} that is used to produce the
                      pixels for this image.                    
                </return>
                <see>
                    ImageProducer                    
                </see>
            </javadoc>
            <method name="getSource" type="ImageProducer" line="1077">
                <scope line="1078">
                    <scope line="1079"/>
                </scope>
            </method>
            <javadoc line="1088">
                Returns a property of the image by name.  Individual property names
                  are defined by the various image formats.  If a property is not
                  defined for a particular image, this method returns the
                  &lt;code&gt;UndefinedProperty&lt;/code&gt; field.  If the properties
                  for this image are not yet known, then this method returns
                  &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;ImageObserver&lt;/code&gt; object is
                  notified later.  The property name &quot;comment&quot; should be used to
                  store an optional comment that can be presented to the user as a
                  description of the image, its source, or its author.                
                <param>
                    name the property name                    
                </param>
                <param>
                    observer the &lt;code&gt;ImageObserver&lt;/code&gt; that receives
                      notification regarding image information                    
                </param>
                <return>
                    an {@link Object} that is the property referred to by the
                      specified &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if the
                      properties of this image are not yet known.                    
                </return>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt; if the property name is null.                    
                </throws>
                <see>
                    ImageObserver                    
                </see>
                <see>
                    java.awt.Image#UndefinedProperty                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="1108">
                <params>
                    <param name="name" type="String"/>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="1112">
                Returns a property of the image by name.                
                <param>
                    name the property name                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; that is the property referred to by
                      the specified &lt;code&gt;name&lt;/code&gt;.                    
                </return>
                <throws>
                    &lt;code&gt;NullPointerException&lt;/code&gt; if the property name is null.                    
                </throws>
            </javadoc>
            <method name="getProperty" type="Object" line="1119">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="1120"/>
                <scope line="1123"/>
                <declaration name="o" type="Object" line="1126"/>
                <scope line="1127"/>
            </method>
            <javadoc line="1133">
                This method returns a {@link Graphics2D}, but is here
                  for backwards compatibility.  {@link #createGraphics() createGraphics} is more
                  convenient, since it is declared to return a
                  &lt;code&gt;Graphics2D&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Graphics2D&lt;/code&gt;, which can be used to draw into
                      this image.                    
                </return>
            </javadoc>
            <method name="getGraphics" type="java.awt.Graphics" line="1141"/>
            <javadoc line="1145">
                Creates a &lt;code&gt;Graphics2D&lt;/code&gt;, which can be used to draw into
                  this &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Graphics2D&lt;/code&gt;, used for drawing into this
                      image.                    
                </return>
            </javadoc>
            <method name="createGraphics" type="Graphics2D" line="1151">
                <declaration name="env" type="GraphicsEnvironment" line="1152"/>
            </method>
            <javadoc line="1157">
                Returns a subimage defined by a specified rectangular region.
                  The returned &lt;code&gt;BufferedImage&lt;/code&gt; shares the same
                  data array as the original image.                
                <param>
                    x the X coordinate of the upper-left corner of the
                      specified rectangular region                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of the
                      specified rectangular region                    
                </param>
                <param>
                    w the width of the specified rectangular region                    
                </param>
                <param>
                    h the height of the specified rectangular region                    
                </param>
                <return>
                    a &lt;code&gt;BufferedImage&lt;/code&gt; that is the subimage of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <exception>
                    &lt;code&gt;RasterFormatException&lt;/code&gt; if the specified
                      area is not contained within this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getSubimage" type="BufferedImage" line="1172">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="1180">
                Returns whether or not the alpha has been premultiplied.  It
                  returns &lt;code&gt;false&lt;/code&gt; if there is no alpha.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the alpha has been premultiplied;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isAlphaPremultiplied" type="boolean" line="1186"/>
            <javadoc line="1190">
                Forces the data to match the state specified in the
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; variable.  It may multiply or
                  divide the color raster data by alpha, or do nothing if the data is
                  in the correct state.                
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the alpha has been
                      premultiplied; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </param>
            </javadoc>
            <method name="coerceData" type="void" line="1198">
                <params>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <comment line="1202">
                    Make the color model do the conversion                    
                </comment>
                <scope line="1200"/>
            </method>
            <javadoc line="1206">
                Returns a &lt;code&gt;String&lt;/code&gt; representation of this
                  &lt;code&gt;BufferedImage&lt;/code&gt; object and its values.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1212"/>
            <javadoc line="1218">
                Returns a {@link Vector} of {@link RenderedImage} objects that are
                  the immediate sources, not the sources of these immediate sources,
                  of image data for this &lt;code&gt;BufferedImage&lt;/code&gt;.  This
                  method returns &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;BufferedImage&lt;/code&gt;
                  has no information about its immediate sources.  It returns an
                  empty &lt;code&gt;Vector&lt;/code&gt; if the &lt;code&gt;BufferedImage&lt;/code&gt; has no
                  immediate sources.                
                <return>
                    a &lt;code&gt;Vector&lt;/code&gt; containing immediate sources of
                      this &lt;code&gt;BufferedImage&lt;/code&gt; object&apos;s image date, or
                      &lt;code&gt;null&lt;/code&gt; if this &lt;code&gt;BufferedImage&lt;/code&gt; has
                      no information about its immediate sources, or an empty
                      &lt;code&gt;Vector&lt;/code&gt; if this &lt;code&gt;BufferedImage&lt;/code&gt;
                      has no immediate sources.                    
                </return>
            </javadoc>
            <method name="getSources" type="Vector<RenderedImage>" line="1233"/>
            <javadoc line="1237">
                Returns an array of names recognized by{@link #getProperty(String) getProperty(String)}or &lt;code&gt;null&lt;/code&gt;, if no property names are recognized.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; array containing all of the property
                      names that &lt;code&gt;getProperty(String)&lt;/code&gt; recognizes;
                      or &lt;code&gt;null&lt;/code&gt; if no property names are recognized.                    
                </return>
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="1245"/>
            <javadoc line="1249">
                Returns the minimum x coordinate of this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  This is always zero.                
                <return>
                    the minimum x coordinate of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getMinX" type="int" line="1255"/>
            <javadoc line="1259">
                Returns the minimum y coordinate of this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  This is always zero.                
                <return>
                    the minimum y coordinate of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getMinY" type="int" line="1265"/>
            <javadoc line="1269">
                Returns the &lt;code&gt;SampleModel&lt;/code&gt; associated with this
                  &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;SampleModel&lt;/code&gt; of this
                      &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="1275"/>
            <javadoc line="1279">
                Returns the number of tiles in the x direction.
                  This is always one.                
                <return>
                    the number of tiles in the x direction.                    
                </return>
            </javadoc>
            <method name="getNumXTiles" type="int" line="1284"/>
            <javadoc line="1288">
                Returns the number of tiles in the y direction.
                  This is always one.                
                <return>
                    the number of tiles in the y direction.                    
                </return>
            </javadoc>
            <method name="getNumYTiles" type="int" line="1293"/>
            <javadoc line="1297">
                Returns the minimum tile index in the x direction.
                  This is always zero.                
                <return>
                    the minimum tile index in the x direction.                    
                </return>
            </javadoc>
            <method name="getMinTileX" type="int" line="1302"/>
            <javadoc line="1306">
                Returns the minimum tile index in the y direction.
                  This is always zero.                
                <return>
                    the mininum tile index in the y direction.                    
                </return>
            </javadoc>
            <method name="getMinTileY" type="int" line="1311"/>
            <javadoc line="1315">
                Returns the tile width in pixels.                
                <return>
                    the tile width in pixels.                    
                </return>
            </javadoc>
            <method name="getTileWidth" type="int" line="1319"/>
            <javadoc line="1323">
                Returns the tile height in pixels.                
                <return>
                    the tile height in pixels.                    
                </return>
            </javadoc>
            <method name="getTileHeight" type="int" line="1327"/>
            <javadoc line="1331">
                Returns the x offset of the tile grid relative to the origin,
                  For example, the x coordinate of the location of tile
                  (0,&amp;nbsp;0).  This is always zero.                
                <return>
                    the x offset of the tile grid.                    
                </return>
            </javadoc>
            <method name="getTileGridXOffset" type="int" line="1337"/>
            <javadoc line="1341">
                Returns the y offset of the tile grid relative to the origin,
                  For example, the y coordinate of the location of tile
                  (0,&amp;nbsp;0).  This is always zero.                
                <return>
                    the y offset of the tile grid.                    
                </return>
            </javadoc>
            <method name="getTileGridYOffset" type="int" line="1347"/>
            <javadoc line="1351">
                Returns tile (&lt;code&gt;tileX&lt;/code&gt;,&amp;nbsp;&lt;code&gt;tileY&lt;/code&gt;).  Note
                  that &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are indices
                  into the tile array, not pixel locations.  The &lt;code&gt;Raster&lt;/code&gt;
                  that is returned is live, which means that it is updated if the
                  image is changed.                
                <param>
                    tileX the x index of the requested tile in the tile array                    
                </param>
                <param>
                    tileY the y index of the requested tile in the tile array                    
                </param>
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is the tile defined by the
                      arguments &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt;.                    
                </return>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if both
                      &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are not
                      equal to 0                    
                </exception>
            </javadoc>
            <method name="getTile" type="Raster" line="1365">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1366"/>
            </method>
            <javadoc line="1373">
                Returns the image as one large tile.  The &lt;code&gt;Raster&lt;/code&gt;
                  returned is a copy of the image data is not updated if the
                  image is changed.                
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is a copy of the image data.                    
                </return>
                <see>
                    #setData(Raster)                    
                </see>
            </javadoc>
            <method name="getData" type="Raster" line="1380">
                <comment line="1383">
                    REMIND : this allocates a whole new tile if raster is a
                     subtile.  (It only copies in the requested area)
                     We should do something smarter.                    
                </comment>
                <declaration name="width" type="int" line="1385"/>
                <declaration name="height" type="int" line="1386"/>
                <declaration name="startX" type="int" line="1387"/>
                <declaration name="startY" type="int" line="1388"/>
                <declaration name="wr" type="WritableRaster" line="1389"/>
                <declaration name="tdata" type="Object" line="1394"/>
                <scope line="1396"/>
            </method>
            <javadoc line="1403">
                Computes and returns an arbitrary region of the
                  &lt;code&gt;BufferedImage&lt;/code&gt;.  The &lt;code&gt;Raster&lt;/code&gt; returned is a
                  copy of the image data and is not updated if the image is
                  changed.                
                <param>
                    rect the region of the &lt;code&gt;BufferedImage&lt;/code&gt; to be
                      returned.                    
                </param>
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; that is a copy of the image data of
                      the specified region of the &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
                <see>
                    #setData(Raster)                    
                </see>
            </javadoc>
            <method name="getData" type="Raster" line="1414">
                <params>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="1415"/>
                <declaration name="nsm" type="SampleModel" line="1416"/>
                <declaration name="wr" type="WritableRaster" line="1418"/>
                <declaration name="width" type="int" line="1420"/>
                <declaration name="height" type="int" line="1421"/>
                <declaration name="startX" type="int" line="1422"/>
                <declaration name="startY" type="int" line="1423"/>
                <declaration name="tdata" type="Object" line="1425"/>
                <scope line="1427"/>
            </method>
            <javadoc line="1434">
                Computes an arbitrary rectangular region of the
                  &lt;code&gt;BufferedImage&lt;/code&gt; and copies it into a specified
                  &lt;code&gt;WritableRaster&lt;/code&gt;.  The region to be computed is
                  determined from the bounds of the specified
                  &lt;code&gt;WritableRaster&lt;/code&gt;.  The specified
                  &lt;code&gt;WritableRaster&lt;/code&gt; must have a
                  &lt;code&gt;SampleModel&lt;/code&gt; that is compatible with this image.  If
                  &lt;code&gt;outRaster&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  an appropriate &lt;code&gt;WritableRaster&lt;/code&gt; is created.                
                <param>
                    outRaster a &lt;code&gt;WritableRaster&lt;/code&gt; to hold the returned
                      part of the image, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    a reference to the supplied or created
                      &lt;code&gt;WritableRaster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="copyData" type="WritableRaster" line="1449">
                <params>
                    <param name="outRaster" type="WritableRaster"/>
                </params>
                <scope line="1450"/>
                <declaration name="width" type="int" line="1453"/>
                <declaration name="height" type="int" line="1454"/>
                <declaration name="startX" type="int" line="1455"/>
                <declaration name="startY" type="int" line="1456"/>
                <declaration name="tdata" type="Object" line="1458"/>
                <scope line="1460"/>
            </method>
            <javadoc line="1468">
                Sets a rectangular region of the image to the contents of the
                  specified &lt;code&gt;Raster&lt;/code&gt; &lt;code&gt;r&lt;/code&gt;, which is
                  assumed to be in the same coordinate space as the
                  &lt;code&gt;BufferedImage&lt;/code&gt;. The operation is clipped to the bounds
                  of the &lt;code&gt;BufferedImage&lt;/code&gt;.                
                <param>
                    r the specified &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <see>
                    #getData                    
                </see>
                <see>
                    #getData(Rectangle)                    
                </see>
            </javadoc>
            <method name="setData" type="void" line="1478">
                <params>
                    <param name="r" type="Raster"/>
                </params>
                <comment line="1487">
                    Clip to the current Raster                    
                </comment>
                <comment line="1499">
                    remind use get/setDataElements for speed if Rasters are
                     compatible                    
                </comment>
                <declaration name="width" type="int" line="1479"/>
                <declaration name="height" type="int" line="1480"/>
                <declaration name="startX" type="int" line="1481"/>
                <declaration name="startY" type="int" line="1482"/>
                <declaration name="tdata" type="int[]" line="1484"/>
                <declaration name="rclip" type="Rectangle" line="1487"/>
                <declaration name="bclip" type="Rectangle" line="1488"/>
                <declaration name="intersect" type="Rectangle" line="1489"/>
                <scope line="1490"/>
                <scope line="1500"/>
            </method>
            <javadoc line="1507">
                Adds a tile observer.  If the observer is already present,
                  it receives multiple notifications.                
                <param>
                    to the specified {@link TileObserver}                    
                </param>
            </javadoc>
            <method name="addTileObserver" type="void" line="1512">
                <params>
                    <param name="to" type="TileObserver"/>
                </params>
            </method>
            <javadoc line="1515">
                Removes a tile observer.  If the observer was not registered,
                  nothing happens.  If the observer was registered for multiple
                  notifications, it is now registered for one fewer notification.                
                <param>
                    to the specified &lt;code&gt;TileObserver&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="removeTileObserver" type="void" line="1521">
                <params>
                    <param name="to" type="TileObserver"/>
                </params>
            </method>
            <javadoc line="1524">
                Returns whether or not a tile is currently checked out for writing.                
                <param>
                    tileX the x index of the tile.                    
                </param>
                <param>
                    tileY the y index of the tile.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the tile specified by the specified
                      indices is checked out for writing; &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <exception>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if both
                      &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt; are not equal
                      to 0                    
                </exception>
            </javadoc>
            <method name="isTileWritable" type="boolean" line="1535">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
                <scope line="1536"/>
            </method>
            <javadoc line="1542">
                Returns an array of {@link Point} objects indicating which tiles
                  are checked out for writing.  Returns &lt;code&gt;null&lt;/code&gt; if none are
                  checked out.                
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; array that indicates the tiles that
                      are checked out for writing, or &lt;code&gt;null&lt;/code&gt; if no
                      tiles are checked out for writing.                    
                </return>
            </javadoc>
            <method name="getWritableTileIndices" type="Point[]" line="1550">
                <declaration name="p" type="Point[]" line="1551"/>
            </method>
            <javadoc line="1557">
                Returns whether or not any tile is checked out for writing.
                  Semantically equivalent to
                  &lt;pre&gt;
                  (getWritableTileIndices() != null).
                  &lt;/pre&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if any tile is checked out for writing;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="hasTileWriters" type="boolean" line="1566"/>
            <javadoc line="1570">
                Checks out a tile for writing.  All registered
                  &lt;code&gt;TileObservers&lt;/code&gt; are notified when a tile goes from having
                  no writers to having one writer.                
                <param>
                    tileX the x index of the tile                    
                </param>
                <param>
                    tileY the y index of the tile                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; that is the tile, indicated by
                      the specified indices, to be checked out for writing.                    
                </return>
            </javadoc>
            <method name="getWritableTile" type="WritableRaster" line="1579">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
            </method>
            <javadoc line="1583">
                Relinquishes permission to write to a tile.  If the caller
                  continues to write to the tile, the results are undefined.
                  Calls to this method should only appear in matching pairs
                  with calls to {@link #getWritableTile(int,int) getWritableTile(int, int)}.  Any other leads
                  to undefined results.  All registered &lt;code&gt;TileObservers&lt;/code&gt;
                  are notified when a tile goes from having one writer to having no
                  writers.                
                <param>
                    tileX the x index of the tile                    
                </param>
                <param>
                    tileY the y index of the tile                    
                </param>
            </javadoc>
            <method name="releaseWritableTile" type="void" line="1594">
                <params>
                    <param name="tileX" type="int"/>
                    <param name="tileY" type="int"/>
                </params>
            </method>
            <javadoc line="1597">
                Returns the transparency.  Returns either OPAQUE, BITMASK,
                  or TRANSLUCENT.                
                <return>
                    the transparency of this &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTransparency" type="int" line="1606"/>
        </class>
    </source>