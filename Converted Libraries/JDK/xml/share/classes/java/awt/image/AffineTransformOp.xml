<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Transparency"/>
        <import package="sun.awt.image.ImagingLib"/>
        <class name="AffineTransformOp" line="12">
            <implements interface="BufferedImageOp"/>
            <implements interface="RasterOp"/>
            <javadoc line="12">
                This class uses an affine transform to perform a linear mapping from
                  2D coordinates in the source image or &lt;CODE&gt;Raster&lt;/CODE&gt; to 2D coordinates
                  in the destination image or &lt;CODE&gt;Raster&lt;/CODE&gt;.
                  The type of interpolation that is used is specified through a constructor,
                  either by a &lt;CODE&gt;RenderingHints&lt;/CODE&gt; object or by one of the integer
                  interpolation types defined in this class.
                  &lt;p&gt;
                  If a &lt;CODE&gt;RenderingHints&lt;/CODE&gt; object is specified in the constructor, the
                  interpolation hint and the rendering quality hint are used to set
                  the interpolation type for this operation.  The color rendering hint
                  and the dithering hint can be used when color conversion is required.
                  &lt;p&gt;
                  Note that the following constraints have to be met:
                  &lt;ul&gt;
                  &lt;li&gt;The source and destination must be different.
                  &lt;li&gt;For &lt;CODE&gt;Raster&lt;/CODE&gt; objects, the number of bands in the source must
                  be equal to the number of bands in the destination.
                  &lt;/ul&gt;                
                <see>
                    AffineTransform                    
                </see>
                <see>
                    BufferedImageFilter                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_INTERPOLATION                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_COLOR_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_DITHERING                    
                </see>
            </javadoc>
            <declaration name="xform" type="AffineTransform" line="39"/>
            <declaration name="hints" type="RenderingHints" line="40"/>
            <declaration name="TYPE_NEAREST_NEIGHBOR" type="int" line="41"/>
            <javadoc line="41">
                Nearest-neighbor interpolation type.                
            </javadoc>
            <declaration name="TYPE_BILINEAR" type="int" line="45"/>
            <javadoc line="45">
                Bilinear interpolation type.                
            </javadoc>
            <declaration name="TYPE_BICUBIC" type="int" line="49"/>
            <javadoc line="49">
                Bicubic interpolation type.                
            </javadoc>
            <declaration name="interpolationType" type="int" line="53"/>
            <javadoc line="54">
                Constructs an &lt;CODE&gt;AffineTransformOp&lt;/CODE&gt; given an affine transform.
                  The interpolation type is determined from the
                  &lt;CODE&gt;RenderingHints&lt;/CODE&gt; object.  If the interpolation hint is
                  defined, it will be used. Otherwise, if the rendering quality hint is
                  defined, the interpolation type is determined from its value.  If no
                  hints are specified (&lt;CODE&gt;hints&lt;/CODE&gt; is null),
                  the interpolation type is {@link #TYPE_NEAREST_NEIGHBORTYPE_NEAREST_NEIGHBOR}.                
                <param>
                    xform The <CODE>AffineTransform</CODE> to use for the
                      operation.                    
                </param>
                <param>
                    hints The <CODE>RenderingHints</CODE> object used to specify
                      the interpolation type for the operation.                    
                </param>
                <throws>
                    ImagingOpException if the transform is non-invertible.                    
                </throws>
                <see>
                    java.awt.RenderingHints#KEY_INTERPOLATION                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_RENDERING                    
                </see>
            </javadoc>
            <method name="AffineTransformOp" type="constructor" line="70">
                <params>
                    <param name="xform" type="AffineTransform"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="74">
                    <declaration name="value" type="Object" line="75"/>
                    <scope line="76">
                        <scope line="78"/>
                        <scope line="81"/>
                    </scope>
                    <scope line="85"/>
                    <scope line="88"/>
                    <scope line="91"/>
                </scope>
                <scope line="95"/>
            </method>
            <javadoc line="99">
                Constructs an &lt;CODE&gt;AffineTransformOp&lt;/CODE&gt; given an affine transform
                  and the interpolation type.                
                <param>
                    xform The <CODE>AffineTransform</CODE> to use for the operation.                    
                </param>
                <param>
                    interpolationType One of the integer
                      interpolation type constants defined by this class:{@link #TYPE_NEAREST_NEIGHBOR TYPE_NEAREST_NEIGHBOR},{@link #TYPE_BILINEAR TYPE_BILINEAR},{@link #TYPE_BICUBIC TYPE_BICUBIC}.                    
                </param>
                <throws>
                    ImagingOpException if the transform is non-invertible.                    
                </throws>
            </javadoc>
            <method name="AffineTransformOp" type="constructor" line="107">
                <params>
                    <param name="xform" type="AffineTransform"/>
                    <param name="interpolationType" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                Returns the interpolation type used by this op.                
                <return>
                    the interpolation type.                    
                </return>
                <see>
                    #TYPE_NEAREST_NEIGHBOR                    
                </see>
                <see>
                    #TYPE_BILINEAR                    
                </see>
                <see>
                    #TYPE_BICUBIC                    
                </see>
            </javadoc>
            <method name="getInterpolationType" type="int" line="127"/>
            <javadoc line="130">
                Transforms the source &lt;CODE&gt;BufferedImage&lt;/CODE&gt; and stores the results
                  in the destination &lt;CODE&gt;BufferedImage&lt;/CODE&gt;.
                  If the color models for the two images do not match, a color
                  conversion into the destination color model is performed.
                  If the destination image is null,
                  a &lt;CODE&gt;BufferedImage&lt;/CODE&gt; is created with the source
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt;.
                  &lt;p&gt;
                  The coordinates of the rectangle returned by
                  &lt;code&gt;getBounds2D(BufferedImage)&lt;/code&gt;
                  are not necessarily the same as the coordinates of the
                  &lt;code&gt;BufferedImage&lt;/code&gt; returned by this method.  If the
                  upper-left corner coordinates of the rectangle are
                  negative then this part of the rectangle is not drawn.  If the
                  upper-left corner coordinates of the  rectangle are positive
                  then the filtered image is drawn at that position in the
                  destination &lt;code&gt;BufferedImage&lt;/code&gt;.
                  &lt;p&gt;
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; is thrown if the source is
                  the same as the destination.                
                <param>
                    src The <CODE>BufferedImage</CODE> to transform.                    
                </param>
                <param>
                    dst The <CODE>BufferedImage</CODE> in which to store the results
                      of the transformation.                    
                </param>
                <return>
                    The filtered <CODE>BufferedImage</CODE>.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>src</code> and
                      <code>dst</code> are the same                    
                </throws>
                <throws>
                    ImagingOpException if the image cannot be transformed
                      because of a data-processing error that might be
                      caused by an invalid image format, tile format, or
                      image-processing operation, or any other unsupported
                      operation.                    
                </throws>
            </javadoc>
            <method name="filter" type="BufferedImage" line="163">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dst" type="BufferedImage"/>
                </params>
                <scope line="164"/>
                <scope line="167"/>
                <declaration name="needToConvert" type="boolean" line="170"/>
                <declaration name="srcCM" type="ColorModel" line="171"/>
                <declaration name="dstCM" type="ColorModel" line="172"/>
                <declaration name="origDst" type="BufferedImage" line="173"/>
                <scope line="174"/>
                <scope line="179">
                    <scope line="181">
                        <declaration name="type" type="int" line="182"/>
                        <declaration name="needTrans" type="boolean" line="183"/>
                        <scope line="184">
                            <declaration name="mtx" type="double[]" line="185"/>
                        </scope>
                        <scope line="189">
                            <declaration name="ccop" type="ColorConvertOp" line="190"/>
                            <declaration name="tmpSrc" type="BufferedImage" line="191"/>
                            <declaration name="sw" type="int" line="192"/>
                            <declaration name="sh" type="int" line="193"/>
                            <scope line="194"/>
                            <scope line="197">
                                <declaration name="r" type="WritableRaster" line="198"/>
                            </scope>
                        </scope>
                        <scope line="203"/>
                    </scope>
                </scope>
                <scope line="209"/>
                <scope line="212"/>
                <scope line="215">
                    <declaration name="ccop" type="ColorConvertOp" line="216"/>
                </scope>
                <scope line="219">
                    <declaration name="g" type="java.awt.Graphics2D" line="220"/>
                    <scope line="221"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="231">
                Transforms the source &lt;CODE&gt;Raster&lt;/CODE&gt; and stores the results in
                  the destination &lt;CODE&gt;Raster&lt;/CODE&gt;.  This operation performs the
                  transform band by band.
                  &lt;p&gt;
                  If the destination &lt;CODE&gt;Raster&lt;/CODE&gt; is null, a new
                  &lt;CODE&gt;Raster&lt;/CODE&gt; is created.
                  An &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt; may be thrown if the source is
                  the same as the destination or if the number of bands in
                  the source is not equal to the number of bands in the
                  destination.
                  &lt;p&gt;
                  The coordinates of the rectangle returned by
                  &lt;code&gt;getBounds2D(Raster)&lt;/code&gt;
                  are not necessarily the same as the coordinates of the
                  &lt;code&gt;WritableRaster&lt;/code&gt; returned by this method.  If the
                  upper-left corner coordinates of rectangle are negative then
                  this part of the rectangle is not drawn.  If the coordinates
                  of the rectangle are positive then the filtered image is drawn at
                  that position in the destination &lt;code&gt;Raster&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    src The <CODE>Raster</CODE> to transform.                    
                </param>
                <param>
                    dst The <CODE>Raster</CODE> in which to store the results of the
                      transformation.                    
                </param>
                <return>
                    The transformed <CODE>Raster</CODE>.                    
                </return>
                <throws>
                    ImagingOpException if the raster cannot be transformed
                      because of a data-processing error that might be
                      caused by an invalid image format, tile format, or
                      image-processing operation, or any other unsupported
                      operation.                    
                </throws>
            </javadoc>
            <method name="filter" type="WritableRaster" line="262">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <scope line="263"/>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Returns the bounding box of the transformed destination.  The
                  rectangle returned is the actual bounding box of the
                  transformed points.  The coordinates of the upper-left corner
                  of the returned rectangle might not be (0,&amp;nbsp;0).                
                <param>
                    src The <CODE>BufferedImage</CODE> to be transformed.                    
                </param>
                <return>
                    The <CODE>Rectangle2D</CODE> representing the destination's
                      bounding box.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="289">
                <params>
                    <param name="src" type="BufferedImage"/>
                </params>
            </method>
            <javadoc line="292">
                Returns the bounding box of the transformed destination.  The
                  rectangle returned will be the actual bounding box of the
                  transformed points.  The coordinates of the upper-left corner
                  of the returned rectangle might not be (0,&amp;nbsp;0).                
                <param>
                    src The <CODE>Raster</CODE> to be transformed.                    
                </param>
                <return>
                    The <CODE>Rectangle2D</CODE> representing the destination's
                      bounding box.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="301">
                <params>
                    <param name="src" type="Raster"/>
                </params>
                <declaration name="w" type="int" line="302"/>
                <declaration name="h" type="int" line="303"/>
                <declaration name="pts" type="float[]" line="304"/>
                <declaration name="fmaxX" type="float" line="306"/>
                <declaration name="fmaxY" type="float" line="307"/>
                <declaration name="fminX" type="float" line="308"/>
                <declaration name="fminY" type="float" line="309"/>
                <scope line="310">
                    <scope line="311"/>
                    <scope line="314"/>
                    <scope line="317"/>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="326">
                Creates a zeroed destination image with the correct size and number of
                  bands.  A &lt;CODE&gt;RasterFormatException&lt;/CODE&gt; may be thrown if the
                  transformed width or height is equal to 0.
                  &lt;p&gt;
                  If &lt;CODE&gt;destCM&lt;/CODE&gt; is null,
                  an appropriate &lt;CODE&gt;ColorModel&lt;/CODE&gt; is used; this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt; may have
                  an alpha channel even if the source &lt;CODE&gt;ColorModel&lt;/CODE&gt; is opaque.                
                <param>
                    src  The <CODE>BufferedImage</CODE> to be transformed.                    
                </param>
                <param>
                    destCM  <CODE>ColorModel</CODE> of the destination.  If null,
                      an appropriate <CODE>ColorModel</CODE> is used.                    
                </param>
                <return>
                    The zeroed destination image.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="340">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                </params>
                <declaration name="image" type="BufferedImage" line="341"/>
                <declaration name="r" type="Rectangle" line="342"/>
                <declaration name="w" type="int" line="343"/>
                <declaration name="h" type="int" line="344"/>
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351">
                    <declaration name="cm" type="ColorModel" line="352"/>
                    <scope line="353"/>
                    <scope line="356"/>
                </scope>
                <scope line="360"/>
            </method>
            <javadoc line="365">
                Creates a zeroed destination &lt;CODE&gt;Raster&lt;/CODE&gt; with the correct size
                  and number of bands.  A &lt;CODE&gt;RasterFormatException&lt;/CODE&gt; may be thrown
                  if the transformed width or height is equal to 0.                
                <param>
                    src The <CODE>Raster</CODE> to be transformed.                    
                </param>
                <return>
                    The zeroed destination <CODE>Raster</CODE>.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="372">
                <params>
                    <param name="src" type="Raster"/>
                </params>
                <declaration name="r" type="Rectangle2D" line="373"/>
            </method>
            <javadoc line="376">
                Returns the location of the corresponding destination point given a
                  point in the source.  If &lt;CODE&gt;dstPt&lt;/CODE&gt; is specified, it
                  is used to hold the return value.                
                <param>
                    srcPt The <code>Point2D</code> that represents the source
                      point.                    
                </param>
                <param>
                    dstPt The <CODE>Point2D</CODE> in which to store the result.                    
                </param>
                <return>
                    The <CODE>Point2D</CODE> in the destination that corresponds to
                      the specified point in the source.                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="386">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
            </method>
            <javadoc line="389">
                Returns the affine transform used by this transform operation.                
                <return>
                    The <CODE>AffineTransform</CODE> associated with this op.                    
                </return>
            </javadoc>
            <method name="getTransform" type="AffineTransform" line="393"/>
            <javadoc line="396">
                Returns the rendering hints used by this transform operation.                
                <return>
                    The <CODE>RenderingHints</CODE> object associated with this op.                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="400">
                <scope line="401">
                    <declaration name="val" type="Object" line="402"/>
                </scope>
            </method>
            <method name="validateTransform" type="void" line="420">
                <params>
                    <param name="xform" type="AffineTransform"/>
                </params>
                <scope line="421"/>
            </method>
        </class>
    </source>