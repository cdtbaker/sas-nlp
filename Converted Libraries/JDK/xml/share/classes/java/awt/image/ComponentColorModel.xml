<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <class name="ComponentColorModel" line="4">
            <extends class="ColorModel"/>
            <javadoc line="4">
                A &lt;CODE&gt;ColorModel&lt;/CODE&gt; class that works with pixel values that
                  represent color and alpha information as separate samples and that
                  store each sample in a separate data element.  This class can be
                  used with an arbitrary &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.  The number of
                  color samples in the pixel values must be same as the number of
                  color components in the &lt;CODE&gt;ColorSpace&lt;/CODE&gt;. There may be a
                  single alpha sample.
                  &lt;p&gt;
                  For those methods that use
                  a primitive array pixel representation of type &lt;CODE&gt;transferType&lt;/CODE&gt;,
                  the array length is the same as the number of color and alpha samples.
                  Color samples are stored first in the array followed by the alpha
                  sample, if present.  The order of the color samples is specified
                  by the &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.  Typically, this order reflects the
                  name of the color space type. For example, for &lt;CODE&gt;TYPE_RGB&lt;/CODE&gt;,
                  index 0 corresponds to red, index 1 to green, and index 2 to blue.
                  &lt;p&gt;
                  The translation from pixel sample values to color/alpha components for
                  display or processing purposes is based on a one-to-one correspondence of
                  samples to components.
                  Depending on the transfer type used to create an instance of
                  &lt;code&gt;ComponentColorModel&lt;/code&gt;, the pixel sample values
                  represented by that instance may be signed or unsigned and may
                  be of integral type or float or double (see below for details).
                  The translation from sample values to normalized color/alpha components
                  must follow certain rules.  For float and double samples, the translation
                  is an identity, i.e. normalized component values are equal to the
                  corresponding sample values.  For integral samples, the translation
                  should be only a simple scale and offset, where the scale and offset
                  constants may be different for each component.  The result of
                  applying the scale and offset constants is a set of color/alpha
                  component values, which are guaranteed to fall within a certain
                  range.  Typically, the range for a color component will be the range
                  defined by the &lt;code&gt;getMinValue&lt;/code&gt; and &lt;code&gt;getMaxValue&lt;/code&gt;
                  methods of the &lt;code&gt;ColorSpace&lt;/code&gt; class.  The range for an
                  alpha component should be 0.0 to 1.0.
                  &lt;p&gt;
                  Instances of &lt;code&gt;ComponentColorModel&lt;/code&gt; created with transfer types
                  &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                  and &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt; have pixel sample values which
                  are treated as unsigned integral values.
                  The number of bits in a color or alpha sample of a pixel value might not
                  be the same as the number of bits for the corresponding color or alpha
                  sample passed to the
                  &lt;code&gt;ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)&lt;/code&gt;
                  constructor.  In
                  that case, this class assumes that the least significant n bits of a sample
                  value hold the component value, where n is the number of significant bits
                  for the component passed to the constructor.  It also assumes that
                  any higher-order bits in a sample value are zero.  Thus, sample values
                  range from 0 to 2&lt;sup&gt;n&lt;/sup&gt; - 1.  This class maps these sample values
                  to normalized color component values such that 0 maps to the value
                  obtained from the &lt;code&gt;ColorSpace&apos;s&lt;/code&gt; &lt;code&gt;getMinValue&lt;/code&gt;
                  method for each component and 2&lt;sup&gt;n&lt;/sup&gt; - 1 maps to the value
                  obtained from &lt;code&gt;getMaxValue&lt;/code&gt;.  To create a
                  &lt;code&gt;ComponentColorModel&lt;/code&gt; with a different color sample mapping
                  requires subclassing this class and overriding the
                  &lt;code&gt;getNormalizedComponents(Object, float[], int)&lt;/code&gt; method.
                  The mapping for an alpha sample always maps 0 to 0.0 and
                  2&lt;sup&gt;n&lt;/sup&gt; - 1 to 1.0.
                  &lt;p&gt;
                  For instances with unsigned sample values,
                  the unnormalized color/alpha component representation is only
                  supported if two conditions hold.  First, sample value value 0 must
                  map to normalized component value 0.0 and sample value 2&lt;sup&gt;n&lt;/sup&gt; - 1
                  to 1.0.  Second the min/max range of all color components of the
                  &lt;code&gt;ColorSpace&lt;/code&gt; must be 0.0 to 1.0.  In this case, the
                  component representation is the n least
                  significant bits of the corresponding sample.  Thus each component is
                  an unsigned integral value between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where
                  n is the number of significant bits for a particular component.
                  If these conditions are not met, any method taking an unnormalized
                  component argument will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.
                  &lt;p&gt;
                  Instances of &lt;code&gt;ComponentColorModel&lt;/code&gt; created with transfer types
                  &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, and
                  &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt; have pixel sample values which
                  are treated as signed short, float, or double values.
                  Such instances do not support the unnormalized color/alpha component
                  representation, so any methods taking such a representation as an argument
                  will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; when called on one
                  of these instances.  The normalized component values of instances
                  of this class have a range which depends on the transfer
                  type as follows: for float samples, the full range of the float data
                  type; for double samples, the full range of the float data type
                  (resulting from casting double to float); for short samples,
                  from approximately -maxVal to +maxVal, where maxVal is the per
                  component maximum value for the &lt;code&gt;ColorSpace&lt;/code&gt;
                  (-32767 maps to -maxVal, 0 maps to 0.0, and 32767 maps
                  to +maxVal).  A subclass may override the scaling for short sample
                  values to normalized component values by overriding the
                  &lt;code&gt;getNormalizedComponents(Object, float[], int)&lt;/code&gt; method.
                  For float and double samples, the normalized component values are
                  taken to be equal to the corresponding sample values, and subclasses
                  should not attempt to add any non-identity scaling for these transfer
                  types.
                  &lt;p&gt;
                  Instances of &lt;code&gt;ComponentColorModel&lt;/code&gt; created with transfer types
                  &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, and
                  &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;
                  use all the bits of all sample values.  Thus all color/alpha components
                  have 16 bits when using &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, 32 bits when
                  using &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, and 64 bits when using
                  &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.  When the
                  &lt;code&gt;ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)&lt;/code&gt;
                  form of constructor is used with one of these transfer types, the
                  bits array argument is ignored.
                  &lt;p&gt;
                  It is possible to have color/alpha sample values
                  which cannot be reasonably interpreted as component values for rendering.
                  This can happen when &lt;code&gt;ComponentColorModel&lt;/code&gt; is subclassed to
                  override the mapping of unsigned sample values to normalized color
                  component values or when signed sample values outside a certain range
                  are used.  (As an example, specifying an alpha component as a signed
                  short value outside the range 0 to 32767, normalized range 0.0 to 1.0, can
                  lead to unexpected results.) It is the
                  responsibility of applications to appropriately scale pixel data before
                  rendering such that color components fall within the normalized range
                  of the &lt;code&gt;ColorSpace&lt;/code&gt; (obtained using the &lt;code&gt;getMinValue&lt;/code&gt;
                  and &lt;code&gt;getMaxValue&lt;/code&gt; methods of the &lt;code&gt;ColorSpace&lt;/code&gt; class)
                  and the alpha component is between 0.0 and 1.0.  If color or alpha
                  component values fall outside these ranges, rendering results are
                  indeterminate.
                  &lt;p&gt;
                  Methods that use a single int pixel representation throw
                  an &lt;CODE&gt;IllegalArgumentException&lt;/CODE&gt;, unless the number of components
                  for the &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; is one and the component
                  value is unsigned -- in other words,  a single color component using
                  a transfer type of &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;,
                  &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;
                  and no alpha.
                  &lt;p&gt;
                  A &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; can be used in conjunction with a
                  &lt;CODE&gt;ComponentSampleModel&lt;/CODE&gt;, a &lt;CODE&gt;BandedSampleModel&lt;/CODE&gt;,
                  or a &lt;CODE&gt;PixelInterleavedSampleModel&lt;/CODE&gt; to construct a
                  &lt;CODE&gt;BufferedImage&lt;/CODE&gt;.                
                <see>
                    ColorModel                    
                </see>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    ComponentSampleModel                    
                </see>
                <see>
                    BandedSampleModel                    
                </see>
                <see>
                    PixelInterleavedSampleModel                    
                </see>
                <see>
                    BufferedImage                    
                </see>
            </javadoc>
            <declaration name="signed" type="boolean" line="149"/>
            <javadoc line="149">
                &lt;code&gt;signed&lt;/code&gt;  is &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;short&lt;/code&gt;,
                  &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;double&lt;/code&gt; transfer types; it
                  is &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;,
                  and &lt;code&gt;int&lt;/code&gt; transfer types.                
            </javadoc>
            <declaration name="is_sRGB_stdScale" type="boolean" line="156"/>
            <declaration name="is_LinearRGB_stdScale" type="boolean" line="157"/>
            <declaration name="is_LinearGray_stdScale" type="boolean" line="158"/>
            <declaration name="is_ICCGray_stdScale" type="boolean" line="159"/>
            <declaration name="tosRGB8LUT" type="byte[]" line="160"/>
            <declaration name="fromsRGB8LUT8" type="byte[]" line="161"/>
            <declaration name="fromsRGB8LUT16" type="short[]" line="162"/>
            <declaration name="fromLinearGray16ToOtherGray8LUT" type="byte[]" line="163"/>
            <declaration name="fromLinearGray16ToOtherGray16LUT" type="short[]" line="164"/>
            <declaration name="needScaleInit" type="boolean" line="165"/>
            <declaration name="noUnnorm" type="boolean" line="166"/>
            <declaration name="nonStdScale" type="boolean" line="167"/>
            <declaration name="min" type="float[]" line="168"/>
            <declaration name="diffMinMax" type="float[]" line="169"/>
            <declaration name="compOffset" type="float[]" line="170"/>
            <declaration name="compScale" type="float[]" line="171"/>
            <javadoc line="172">
                Constructs a &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; from the specified
                  parameters. Color components will be in the specified
                  &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.  The supported transfer types are
                  &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                  &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;,
                  &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;,
                  and &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.
                  If not null, the &lt;CODE&gt;bits&lt;/CODE&gt; array specifies the
                  number of significant bits per color and alpha component and its
                  length should be at least the number of components in the
                  &lt;CODE&gt;ColorSpace&lt;/CODE&gt; if there is no alpha
                  information in the pixel values, or one more than this number if
                  there is alpha information.  When the &lt;CODE&gt;transferType&lt;/CODE&gt; is
                  &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;,
                  or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt; the &lt;CODE&gt;bits&lt;/CODE&gt; array
                  argument is ignored.  &lt;CODE&gt;hasAlpha&lt;/CODE&gt; indicates whether alpha
                  information is present.  If &lt;CODE&gt;hasAlpha&lt;/CODE&gt; is true, then
                  the boolean &lt;CODE&gt;isAlphaPremultiplied&lt;/CODE&gt;
                  specifies how to interpret color and alpha samples in pixel values.
                  If the boolean is true, color samples are assumed to have been
                  multiplied by the alpha sample. The &lt;CODE&gt;transparency&lt;/CODE&gt;
                  specifies what alpha values can be represented by this color model.
                  The acceptable &lt;code&gt;transparency&lt;/code&gt; values are
                  &lt;CODE&gt;OPAQUE&lt;/CODE&gt;, &lt;CODE&gt;BITMASK&lt;/CODE&gt; or &lt;CODE&gt;TRANSLUCENT&lt;/CODE&gt;.
                  The &lt;CODE&gt;transferType&lt;/CODE&gt; is the type of primitive array used
                  to represent pixel values.                
                <param>
                    colorSpace       The &lt;CODE&gt;ColorSpace&lt;/CODE&gt; associated
                      with this color model.                    
                </param>
                <param>
                    bits             The number of significant bits per component.
                      May be null, in which case all bits of all
                      component samples will be significant.
                      Ignored if transferType is one of
                      &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or
                      &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;,
                      in which case all bits of all component
                      samples will be significant.                    
                </param>
                <param>
                    hasAlpha         If true, this color model supports alpha.                    
                </param>
                <param>
                    isAlphaPremultiplied If true, alpha is premultiplied.                    
                </param>
                <param>
                    transparency     Specifies what alpha values can be represented
                      by this color model.                    
                </param>
                <param>
                    transferType     Specifies the type of primitive array used to
                      represent pixel values.                    
                </param>
                <throws>
                    IllegalArgumentException If the &lt;CODE&gt;bits&lt;/CODE&gt; array
                      argument is not null, its length is less than the number of
                      color and alpha components, and transferType is one of
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;, or
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If transferType is not one of
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or
                      &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    java.awt.Transparency                    
                </see>
            </javadoc>
            <method name="ComponentColorModel" type="constructor" line="232">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="bits" type="int[]"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="transparency" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
            </method>
            <javadoc line="257">
                Constructs a &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; from the specified
                  parameters. Color components will be in the specified
                  &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.  The supported transfer types are
                  &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                  &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;,
                  &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;,
                  and &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.  The number of significant
                  bits per color and alpha component will be 8, 16, 32, 16, 32,  or 64,
                  respectively.  The number of color components will be the
                  number of components in the &lt;CODE&gt;ColorSpace&lt;/CODE&gt;.  There will be
                  an alpha component if &lt;CODE&gt;hasAlpha&lt;/CODE&gt; is &lt;CODE&gt;true&lt;/CODE&gt;.
                  If &lt;CODE&gt;hasAlpha&lt;/CODE&gt; is true, then
                  the boolean &lt;CODE&gt;isAlphaPremultiplied&lt;/CODE&gt;
                  specifies how to interpret color and alpha samples in pixel values.
                  If the boolean is true, color samples are assumed to have been
                  multiplied by the alpha sample. The &lt;CODE&gt;transparency&lt;/CODE&gt;
                  specifies what alpha values can be represented by this color model.
                  The acceptable &lt;code&gt;transparency&lt;/code&gt; values are
                  &lt;CODE&gt;OPAQUE&lt;/CODE&gt;, &lt;CODE&gt;BITMASK&lt;/CODE&gt; or &lt;CODE&gt;TRANSLUCENT&lt;/CODE&gt;.
                  The &lt;CODE&gt;transferType&lt;/CODE&gt; is the type of primitive array used
                  to represent pixel values.                
                <param>
                    colorSpace       The &lt;CODE&gt;ColorSpace&lt;/CODE&gt; associated
                      with this color model.                    
                </param>
                <param>
                    hasAlpha         If true, this color model supports alpha.                    
                </param>
                <param>
                    isAlphaPremultiplied If true, alpha is premultiplied.                    
                </param>
                <param>
                    transparency     Specifies what alpha values can be represented
                      by this color model.                    
                </param>
                <param>
                    transferType     Specifies the type of primitive array used to
                      represent pixel values.                    
                </param>
                <throws>
                    IllegalArgumentException If transferType is not one of
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or
                      &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
                <see>
                    ColorSpace                    
                </see>
                <see>
                    java.awt.Transparency                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="ComponentColorModel" type="constructor" line="298">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="transparency" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
            </method>
            <method name="bitsHelper" type="int" line="301">
                <params>
                    <param name="transferType" type="int"/>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="hasAlpha" type="boolean"/>
                </params>
                <declaration name="numBits" type="int" line="302"/>
                <declaration name="numComponents" type="int" line="303"/>
                <scope line="304"/>
            </method>
            <method name="bitsArrayHelper" type="int[]" line="309">
                <params>
                    <param name="origBits" type="int[]"/>
                    <param name="transferType" type="int"/>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="hasAlpha" type="boolean"/>
                </params>
                <scope line="314"/>
                <declaration name="numBits" type="int" line="321"/>
                <declaration name="numComponents" type="int" line="322"/>
                <scope line="323"/>
                <declaration name="bits" type="int[]" line="326"/>
                <scope line="327"/>
            </method>
            <method name="setupLUTs" type="void" line="332">
                <scope line="333"/>
                <scope line="337">
                    <scope line="340"/>
                    <scope line="344"/>
                </scope>
                <scope line="349">
                    <declaration name="ics" type="ICC_ColorSpace" line="350"/>
                    <scope line="354">
                        <scope line="356"/>
                        <scope line="359"/>
                    </scope>
                    <scope line="363">
                        <scope line="364"/>
                        <scope line="368"/>
                    </scope>
                </scope>
                <scope line="374">
                    <scope line="376">
                        <scope line="377"/>
                    </scope>
                    <scope line="382">
                        <scope line="385"/>
                    </scope>
                </scope>
            </method>
            <method name="initScale" type="void" line="392">
                <scope line="394"/>
                <scope line="397"/>
                <declaration name="lowVal" type="float[]" line="400"/>
                <scope line="403">
                    <declaration name="bpixel" type="byte[]" line="404"/>
                    <scope line="405"/>
                    <scope line="408"/>
                    <scope line="412"/>
                </scope>
                <scope line="419">
                    <declaration name="uspixel" type="short[]" line="420"/>
                    <scope line="421"/>
                    <scope line="424"/>
                    <scope line="428"/>
                </scope>
                <scope line="435">
                    <declaration name="ipixel" type="int[]" line="436"/>
                    <scope line="437"/>
                    <scope line="440"/>
                    <scope line="444"/>
                </scope>
                <scope line="451">
                    <declaration name="spixel" type="short[]" line="452"/>
                    <scope line="453"/>
                    <scope line="456"/>
                    <scope line="460"/>
                </scope>
                <scope line="471">
                    <scope line="472"/>
                </scope>
                <scope line="477">
                    <scope line="485"/>
                </scope>
            </method>
            <method name="getRGBComponent" type="int" line="491">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="idx" type="int"/>
                </params>
                <scope line="492"/>
                <scope line="495"/>
                <scope line="498"/>
                <declaration name="opixel" type="Object" line="501"/>
                <scope line="504">
                    <declaration name="bpixel" type="byte[]" line="505"/>
                </scope>
                <scope line="510">
                    <declaration name="spixel" type="short[]" line="511"/>
                </scope>
                <scope line="516">
                    <declaration name="ipixel" type="int[]" line="517"/>
                </scope>
                <declaration name="norm" type="float[]" line="522"/>
                <declaration name="rgb" type="float[]" line="523"/>
            </method>
            <javadoc line="526">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  The returned value will be a non pre-multiplied value.
                  If the alpha is premultiplied, this method divides
                  it out before returning the value (if the alpha value is 0,
                  the red value will be 0).                
                <param>
                    pixel The pixel from which you want to get the red color component.                    
                </param>
                <return>
                    The red color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than
                      one component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the component value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; is signed                    
                </throws>
            </javadoc>
            <method name="getRed" type="int" line="541">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="544">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  The returned value will be a non
                  pre-multiplied value. If the alpha is premultiplied, this method
                  divides it out before returning the value (if the alpha value is 0,
                  the green value will be 0).                
                <param>
                    pixel The pixel from which you want to get the green color component.                    
                </param>
                <return>
                    The green color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than
                      one component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the component value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; is signed                    
                </throws>
            </javadoc>
            <method name="getGreen" type="int" line="559">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="562">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  The returned value will be a non
                  pre-multiplied value. If the alpha is premultiplied, this method
                  divides it out before returning the value (if the alpha value is 0,
                  the blue value will be 0).                
                <param>
                    pixel The pixel from which you want to get the blue color component.                    
                </param>
                <return>
                    The blue color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than
                      one component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the component value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; is signed                    
                </throws>
            </javadoc>
            <method name="getBlue" type="int" line="577">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="580">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.   The pixel value is specified as an int.                
                <param>
                    pixel The pixel from which you want to get the alpha component.                    
                </param>
                <return>
                    The alpha component for the specified pixel, as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than
                      one component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the component value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; is signed                    
                </throws>
            </javadoc>
            <method name="getAlpha" type="int" line="590">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="591"/>
                <scope line="594"/>
                <scope line="597"/>
            </method>
            <javadoc line="602">
                Returns the color/alpha components of the pixel in the default
                  RGB color model format.  A color conversion is done if necessary.
                  The returned value will be in a non pre-multiplied format. If
                  the alpha is premultiplied, this method divides it out of the
                  color components (if the alpha value is 0, the color values will be 0).                
                <param>
                    pixel The pixel from which you want to get the color/alpha components.                    
                </param>
                <return>
                    The color/alpha components for the specified pixel, as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than
                      one component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the component value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; is signed                    
                </throws>
            </javadoc>
            <method name="getRGB" type="int" line="615">
                <params>
                    <param name="pixel" type="int"/>
                </params>
                <scope line="616"/>
                <scope line="619"/>
            </method>
            <method name="extractComponent" type="int" line="624">
                <params>
                    <param name="inData" type="Object"/>
                    <param name="idx" type="int"/>
                    <param name="precision" type="int"/>
                </params>
                <declaration name="needAlpha" type="boolean" line="625"/>
                <declaration name="alp" type="int" line="626"/>
                <declaration name="comp" type="int" line="627"/>
                <declaration name="mask" type="int" line="628"/>
                <scope line="631">
                    <declaration name="sdata" type="short" line="632"/>
                    <declaration name="scalefactor" type="float" line="633"/>
                    <scope line="634">
                        <declaration name="s" type="short" line="635"/>
                        <scope line="636"/>
                        <scope line="639"/>
                    </scope>
                    <scope line="643"/>
                </scope>
                <scope line="648">
                    <declaration name="fdata" type="float" line="649"/>
                    <declaration name="scalefactor" type="float" line="650"/>
                    <scope line="651">
                        <declaration name="f" type="float" line="652"/>
                        <scope line="653"/>
                        <scope line="656"/>
                    </scope>
                    <scope line="660"/>
                </scope>
                <scope line="665">
                    <declaration name="ddata" type="double" line="666"/>
                    <declaration name="scalefactor" type="double" line="667"/>
                    <scope line="668">
                        <declaration name="d" type="double" line="669"/>
                        <scope line="670"/>
                        <scope line="673"/>
                    </scope>
                    <scope line="677"/>
                </scope>
                <declaration name="bdata" type="byte" line="682"/>
                <scope line="685"/>
                <declaration name="usdata" type="short" line="690"/>
                <scope line="692"/>
                <declaration name="idata" type="int" line="697"/>
                <scope line="699"/>
                <scope line="706">
                    <scope line="707">
                        <declaration name="scalefactor" type="float" line="708"/>
                        <declaration name="fcomp" type="float" line="709"/>
                        <declaration name="invalp" type="float" line="710"/>
                    </scope>
                    <scope line="713"/>
                </scope>
                <scope line="717">
                    <scope line="718">
                        <declaration name="scalefactor" type="float" line="719"/>
                        <declaration name="fcomp" type="float" line="720"/>
                    </scope>
                </scope>
            </method>
            <method name="getRGBComponent" type="int" line="726">
                <params>
                    <param name="inData" type="Object"/>
                    <param name="idx" type="int"/>
                </params>
                <scope line="727"/>
                <scope line="730"/>
                <scope line="733">
                    <declaration name="lutidx" type="int" line="734"/>
                </scope>
                <scope line="737">
                    <declaration name="lutidx" type="int" line="738"/>
                </scope>
                <declaration name="norm" type="float[]" line="741"/>
                <declaration name="rgb" type="float[]" line="742"/>
            </method>
            <javadoc line="745">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The &lt;CODE&gt;pixel&lt;/CODE&gt; value is specified by an array
                  of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt; passed in as an object
                  reference. The returned value will be a non pre-multiplied value. If the
                  alpha is premultiplied, this method divides it out before returning
                  the value (if the alpha value is 0, the red value will be 0). Since
                  &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t override
                  it then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData The pixel from which you want to get the red color component,
                      specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <return>
                    The red color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;inData&lt;/CODE&gt; is not a primitive array
                      of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;CODE&gt;inData&lt;/CODE&gt; is not
                      large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
            </javadoc>
            <method name="getRed" type="int" line="772">
                <params>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="775">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;CODE&gt;ColorSpace&lt;/CODE&gt;, sRGB.
                  A color conversion is done if necessary.  The &lt;CODE&gt;pixel&lt;/CODE&gt; value
                  is specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;
                  passed in as an object reference. The returned value is a non pre-multiplied
                  value. If the alpha is premultiplied, this method divides it out before
                  returning the value (if the alpha value is 0, the green value will be 0).
                  Since &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed,
                  subclasses inherit the implementation of this method and if they
                  don&apos;t override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData The pixel from which you want to get the green color component,
                      specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <return>
                    The green color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;inData&lt;/CODE&gt; is not a primitive array
                      of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;CODE&gt;inData&lt;/CODE&gt; is not
                      large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
            </javadoc>
            <method name="getGreen" type="int" line="802">
                <params>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="805">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;CODE&gt;ColorSpace&lt;/CODE&gt;, sRGB.
                  A color conversion is done if necessary.  The &lt;CODE&gt;pixel&lt;/CODE&gt; value is
                  specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;
                  passed in as an object reference. The returned value is a non pre-multiplied
                  value. If the alpha is premultiplied, this method divides it out before
                  returning the value (if the alpha value is 0, the blue value will be 0).
                  Since &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed,
                  subclasses inherit the implementation of this method and if they
                  don&apos;t override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData The pixel from which you want to get the blue color component,
                      specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <return>
                    The blue color component for the specified pixel, as an int.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;inData&lt;/CODE&gt; is not a primitive array
                      of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;CODE&gt;inData&lt;/CODE&gt; is not
                      large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
            </javadoc>
            <method name="getBlue" type="int" line="832">
                <params>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="835">
                Returns the alpha component for the specified pixel, scaled from
                  0 to 255.  The pixel value is specified by an array of data
                  elements of type &lt;CODE&gt;transferType&lt;/CODE&gt; passed in as an
                  object reference.  Since &lt;code&gt;ComponentColorModel&lt;/code&gt; can be
                  subclassed, subclasses inherit the
                  implementation of this method and if they don&apos;t override it then
                  they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData The pixel from which you want to get the alpha component,
                      specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <return>
                    The alpha component for the specified pixel, as an int.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;inData&lt;/CODE&gt; is not a primitive array
                      of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;CODE&gt;inData&lt;/CODE&gt; is not
                      large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
            </javadoc>
            <method name="getAlpha" type="int" line="859">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <scope line="860"/>
                <declaration name="alpha" type="int" line="863"/>
                <declaration name="aIdx" type="int" line="864"/>
                <declaration name="mask" type="int" line="865"/>
                <declaration name="sdata" type="short" line="868"/>
                <declaration name="fdata" type="float" line="872"/>
                <declaration name="ddata" type="double" line="876"/>
                <declaration name="bdata" type="byte" line="880"/>
                <declaration name="usdata" type="short" line="884"/>
                <declaration name="idata" type="int" line="888"/>
                <scope line="894"/>
                <scope line="897"/>
            </method>
            <javadoc line="901">
                Returns the color/alpha components for the specified pixel in the
                  default RGB color model format.  A color conversion is done if
                  necessary.  The pixel value is specified by an
                  array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt; passed
                  in as an object reference.
                  The returned value is in a non pre-multiplied format. If
                  the alpha is premultiplied, this method divides it out of the
                  color components (if the alpha value is 0, the color values will be 0).
                  Since &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed,
                  subclasses inherit the implementation of this method and if they
                  don&apos;t override it then they throw an exception if they use an
                  unsupported &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    inData The pixel from which you want to get the color/alpha components,
                      specified by an array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <return>
                    The color/alpha components for the specified pixel, as an int.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;inData&lt;/CODE&gt; is not a primitive array
                      of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;CODE&gt;inData&lt;/CODE&gt; is not
                      large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="930">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <scope line="931"/>
                <scope line="934"/>
                <scope line="937">
                    <declaration name="gray" type="int" line="938"/>
                </scope>
                <declaration name="norm" type="float[]" line="941"/>
                <declaration name="rgb" type="float[]" line="942"/>
            </method>
            <javadoc line="945">
                Returns a data element array representation of a pixel in this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt;, given an integer pixel representation
                  in the default RGB color model.
                  This array can then be passed to the &lt;CODE&gt;setDataElements&lt;/CODE&gt;
                  method of a &lt;CODE&gt;WritableRaster&lt;/CODE&gt; object.  If the
                  &lt;CODE&gt;pixel&lt;/CODE&gt;
                  parameter is null, a new array is allocated.  Since
                  &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed, subclasses
                  inherit the implementation of this method and if they don&apos;t
                  override it then
                  they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    rgb the integer representation of the pixel in the RGB
                      color model                    
                </param>
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    The data element array representation of a pixel
                      in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </return>
                <throws>
                    ClassCastException If &lt;CODE&gt;pixel&lt;/CODE&gt; is not null and
                      is not a primitive array of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException If &lt;CODE&gt;pixel&lt;/CODE&gt; is
                      not large enough to hold a pixel value for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="977">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="pixel" type="Object"/>
                </params>
                <declaration name="red" type="int" line="978"/>
                <scope line="982"/>
                <scope line="985">
                    <scope line="988">
                        <declaration name="sdata" type="short" line="989"/>
                        <scope line="990"/>
                        <scope line="993"/>
                        <declaration name="factor" type="float" line="996"/>
                        <scope line="997">
                            <scope line="999"/>
                            <scope line="1005">
                                <scope line="1008"/>
                            </scope>
                        </scope>
                        <scope line="1016">
                            <declaration name="gray" type="float" line="1020"/>
                            <scope line="1022">
                                <scope line="1025"/>
                            </scope>
                        </scope>
                        <scope line="1031">
                            <declaration name="gray" type="int" line="1035"/>
                            <scope line="1038">
                                <scope line="1041"/>
                            </scope>
                        </scope>
                        <scope line="1047">
                            <declaration name="norm" type="float" line="1049"/>
                            <scope line="1054">
                                <scope line="1055">
                                    <scope line="1057"/>
                                    <scope line="1060"/>
                                </scope>
                            </scope>
                            <scope line="1066">
                                <scope line="1069"/>
                            </scope>
                            <scope line="1073"/>
                        </scope>
                    </scope>
                    <scope line="1080">
                        <declaration name="fdata" type="float" line="1081"/>
                        <scope line="1082"/>
                        <scope line="1085"/>
                        <declaration name="factor" type="float" line="1088"/>
                        <scope line="1089">
                            <scope line="1090"/>
                            <scope line="1096"/>
                            <scope line="1099">
                                <scope line="1102"/>
                            </scope>
                        </scope>
                        <scope line="1110">
                            <scope line="1115">
                                <scope line="1118"/>
                            </scope>
                        </scope>
                        <scope line="1123">
                            <declaration name="gray" type="int" line="1127"/>
                            <scope line="1129">
                                <scope line="1132"/>
                            </scope>
                        </scope>
                        <scope line="1137">
                            <declaration name="norm" type="float" line="1138"/>
                            <scope line="1144">
                                <scope line="1147">
                                    <scope line="1149"/>
                                </scope>
                            </scope>
                            <scope line="1154"/>
                        </scope>
                    </scope>
                    <scope line="1161">
                        <declaration name="ddata" type="double" line="1162"/>
                        <scope line="1163"/>
                        <scope line="1166"/>
                        <scope line="1169">
                            <declaration name="factor" type="double" line="1170"/>
                            <scope line="1171"/>
                            <scope line="1177"/>
                            <scope line="1180">
                                <scope line="1183"/>
                            </scope>
                        </scope>
                        <scope line="1191">
                            <scope line="1196">
                                <scope line="1199"/>
                            </scope>
                        </scope>
                        <scope line="1204">
                            <declaration name="gray" type="int" line="1208"/>
                            <scope line="1210">
                                <scope line="1213"/>
                            </scope>
                        </scope>
                        <scope line="1218">
                            <declaration name="factor" type="float" line="1219"/>
                            <declaration name="norm" type="float" line="1220"/>
                            <scope line="1225">
                                <scope line="1228">
                                    <scope line="1230"/>
                                </scope>
                            </scope>
                            <scope line="1235"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="intpixel" type="int" line="1243"/>
                <scope line="1244"/>
                <scope line="1247"/>
                <scope line="1250">
                    <declaration name="precision" type="int" line="1251"/>
                    <declaration name="factor" type="float" line="1252"/>
                    <scope line="1253">
                        <scope line="1254"/>
                        <scope line="1261"/>
                    </scope>
                    <scope line="1269"/>
                    <scope line="1273">
                        <scope line="1275"/>
                        <scope line="1278"/>
                        <scope line="1281"/>
                    </scope>
                    <scope line="1286"/>
                    <scope line="1289"/>
                    <scope line="1292"/>
                    <scope line="1295"/>
                    <scope line="1298"/>
                    <scope line="1301"/>
                </scope>
                <scope line="1305">
                    <declaration name="gray" type="float" line="1309"/>
                    <scope line="1310">
                        <scope line="1312"/>
                        <scope line="1315"/>
                        <scope line="1318"/>
                    </scope>
                </scope>
                <scope line="1324">
                    <declaration name="gray16" type="int" line="1328"/>
                    <declaration name="gray" type="float" line="1329"/>
                    <scope line="1330">
                        <scope line="1332"/>
                        <scope line="1335"/>
                        <scope line="1338"/>
                    </scope>
                </scope>
                <scope line="1344">
                    <declaration name="norm" type="float[]" line="1345"/>
                    <declaration name="factor" type="float" line="1346"/>
                    <scope line="1351">
                        <scope line="1352">
                            <scope line="1354"/>
                            <scope line="1357"/>
                        </scope>
                    </scope>
                    <scope line="1362">
                        <scope line="1364"/>
                        <scope line="1367"/>
                        <scope line="1370">
                            <scope line="1372"/>
                        </scope>
                    </scope>
                    <scope line="1377"/>
                </scope>
                <scope line="1383">
                    <declaration name="bdata" type="byte" line="1384"/>
                    <scope line="1385"/>
                    <scope line="1388"/>
                    <scope line="1391"/>
                </scope>
                <scope line="1397">
                    <declaration name="sdata" type="short" line="1398"/>
                    <scope line="1399"/>
                    <scope line="1402"/>
                    <scope line="1405"/>
                </scope>
                <scope line="1411">
                    <scope line="1412">
                        <scope line="1413"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1422">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.
                  An IllegalArgumentException is thrown if the component value for this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt; is not conveniently representable in the
                  unnormalized form.  Color/alpha components are stored
                  in the &lt;CODE&gt;components&lt;/CODE&gt; array starting at &lt;CODE&gt;offset&lt;/CODE&gt;
                  (even if the array is allocated by this method).                
                <param>
                    pixel The pixel value specified as an integer.                    
                </param>
                <param>
                    components An integer array in which to store the unnormalized
                      color/alpha components. If the &lt;CODE&gt;components&lt;/CODE&gt; array is null,
                      a new array is allocated.                    
                </param>
                <param>
                    offset An offset into the &lt;CODE&gt;components&lt;/CODE&gt; array.                    
                </param>
                <return>
                    The components array.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than one
                      component in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException If the &lt;CODE&gt;components&lt;/CODE&gt;
                      array is not null and is not large enough to hold all the color and
                      alpha components (starting at offset).                    
                </throws>
            </javadoc>
            <method name="getComponents" type="int[]" line="1444">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="1445"/>
                <scope line="1448"/>
                <scope line="1451"/>
                <scope line="1454"/>
            </method>
            <javadoc line="1460">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.  The pixel value is specified by an
                  array of data elements of type &lt;CODE&gt;transferType&lt;/CODE&gt; passed in as
                  an object reference.
                  An IllegalArgumentException is thrown if the component values for this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt; are not conveniently representable in the
                  unnormalized form.
                  Color/alpha components are stored in the &lt;CODE&gt;components&lt;/CODE&gt; array
                  starting at  &lt;CODE&gt;offset&lt;/CODE&gt; (even if the array is allocated by
                  this method).  Since &lt;code&gt;ComponentColorModel&lt;/code&gt; can be
                  subclassed, subclasses inherit the
                  implementation of this method and if they don&apos;t override it then
                  this method might throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <param>
                    pixel A pixel value specified by an array of data elements of
                      type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </param>
                <param>
                    components An integer array in which to store the unnormalized
                      color/alpha components. If the &lt;CODE&gt;components&lt;/CODE&gt; array is null,
                      a new array is allocated.                    
                </param>
                <param>
                    offset An offset into the &lt;CODE&gt;components&lt;/CODE&gt; array.                    
                </param>
                <return>
                    The &lt;CODE&gt;components&lt;/CODE&gt; array.                    
                </return>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
                <throws>
                    UnsupportedOperationException in some cases iff the
                      transfer type of this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the following transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      or &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ClassCastException If &lt;CODE&gt;pixel&lt;/CODE&gt; is not a primitive
                      array of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If the &lt;CODE&gt;components&lt;/CODE&gt; array is
                      not null and is not large enough to hold all the color and alpha
                      components (starting at offset), or if &lt;CODE&gt;pixel&lt;/CODE&gt; is not large
                      enough to hold a pixel value for this ColorModel.                    
                </throws>
            </javadoc>
            <method name="getComponents" type="int[]" line="1496">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="intpixel" type="int" line="1497"/>
                <scope line="1498"/>
                <scope line="1501"/>
                <scope line="1504"/>
                <scope line="1507">
                    <scope line="1509"/>
                </scope>
                <scope line="1513"/>
                <scope line="1516"/>
                <scope line="1519"/>
            </method>
            <javadoc line="1525">
                Returns an array of all of the color/alpha components in unnormalized
                  form, given a normalized component array.  Unnormalized components
                  are unsigned integral values between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where
                  n is the number of bits for a particular component.  Normalized
                  components are float values between a per component minimum and
                  maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  will be thrown if color component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable in the
                  unnormalized form.  If the
                  &lt;code&gt;components&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;components&lt;/code&gt; array will
                  be returned.  Color/alpha components are stored in the
                  &lt;code&gt;components&lt;/code&gt; array starting at &lt;code&gt;offset&lt;/code&gt; (even
                  if the array is allocated by this method). An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt; and is not
                  large enough to hold all the color and alpha
                  components (starting at &lt;code&gt;offset&lt;/code&gt;).  An
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the
                  &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold
                  all the color and alpha components starting at
                  &lt;code&gt;normOffset&lt;/code&gt;.                
                <param>
                    normComponents an array containing normalized components                    
                </param>
                <param>
                    normOffset the offset into the &lt;code&gt;normComponents&lt;/code&gt;
                      array at which to start retrieving normalized components                    
                </param>
                <param>
                    components an array that receives the components from
                      &lt;code&gt;normComponents&lt;/code&gt;                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin storing normalized components from
                      &lt;code&gt;normComponents&lt;/code&gt;                    
                </param>
                <return>
                    an array containing unnormalized color and alpha
                      components.                    
                </return>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
                <throws>
                    IllegalArgumentException if the length of
                      &lt;code&gt;normComponents&lt;/code&gt; minus &lt;code&gt;normOffset&lt;/code&gt;
                      is less than &lt;code&gt;numComponents&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getUnnormalizedComponents" type="int[]" line="1565">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="1566"/>
                <scope line="1569"/>
            </method>
            <javadoc line="1574">
                Returns an array of all of the color/alpha components in normalized
                  form, given an unnormalized component array.  Unnormalized components
                  are unsigned integral values between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where
                  n is the number of bits for a particular component.  Normalized
                  components are float values between a per component minimum and
                  maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  will be thrown if color component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable in the
                  unnormalized form.  If the
                  &lt;code&gt;normComponents&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;normComponents&lt;/code&gt; array
                  will be returned.  Color/alpha components are stored in the
                  &lt;code&gt;normComponents&lt;/code&gt; array starting at
                  &lt;code&gt;normOffset&lt;/code&gt; (even if the array is allocated by this
                  method).  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt;
                  and is not large enough to hold all the color and alpha components
                  (starting at &lt;code&gt;normOffset&lt;/code&gt;).  An
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not large enough to hold all the
                  color and alpha components starting at &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    components an array containing unnormalized components                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start retrieving unnormalized components                    
                </param>
                <param>
                    normComponents an array that receives the normalized components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at
                      which to begin storing normalized components                    
                </param>
                <return>
                    an array containing normalized color and alpha
                      components.                    
                </return>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
            </javadoc>
            <method name="getNormalizedComponents" type="float[]" line="1608">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <scope line="1609"/>
                <scope line="1612"/>
            </method>
            <javadoc line="1617">
                Returns a pixel value represented as an int in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;,
                  given an array of unnormalized color/alpha components.                
                <param>
                    components An array of unnormalized color/alpha components.                    
                </param>
                <param>
                    offset An offset into the &lt;CODE&gt;components&lt;/CODE&gt; array.                    
                </param>
                <return>
                    A pixel value represented as an int.                    
                </return>
                <throws>
                    IllegalArgumentException If there is more than one component
                      in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
            </javadoc>
            <method name="getDataElement" type="int" line="1628">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="1629"/>
                <scope line="1632">
                    <scope line="1633"/>
                </scope>
            </method>
            <javadoc line="1640">
                Returns a data element array representation of a pixel in this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt;, given an array of unnormalized color/alpha
                  components. This array can then be passed to the &lt;CODE&gt;setDataElements&lt;/CODE&gt;
                  method of a &lt;CODE&gt;WritableRaster&lt;/CODE&gt; object.                
                <param>
                    components An array of unnormalized color/alpha components.                    
                </param>
                <param>
                    offset The integer offset into the &lt;CODE&gt;components&lt;/CODE&gt; array.                    
                </param>
                <param>
                    obj The object in which to store the data element array
                      representation of the pixel. If &lt;CODE&gt;obj&lt;/CODE&gt; variable is null,
                      a new array is allocated.  If &lt;CODE&gt;obj&lt;/CODE&gt; is not null, it must
                      be a primitive array of type &lt;CODE&gt;transferType&lt;/CODE&gt;. An
                      &lt;CODE&gt;ArrayIndexOutOfBoundsException&lt;/CODE&gt; is thrown if
                      &lt;CODE&gt;obj&lt;/CODE&gt; is not large enough to hold a pixel value
                      for this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.  Since
                      &lt;code&gt;ComponentColorModel&lt;/code&gt; can be subclassed, subclasses
                      inherit the implementation of this method and if they don&apos;t
                      override it then they throw an exception if they use an
                      unsupported &lt;code&gt;transferType&lt;/code&gt;.                    
                </param>
                <return>
                    The data element array representation of a pixel
                      in this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException If the components array
                      is not large enough to hold all the color and alpha components
                      (starting at offset).                    
                </throws>
                <throws>
                    ClassCastException If &lt;CODE&gt;obj&lt;/CODE&gt; is not null and is not a
                      primitive  array of type &lt;CODE&gt;transferType&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException If &lt;CODE&gt;obj&lt;/CODE&gt; is not large
                      enough to hold a pixel value for this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException If this
                      &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt; does not support the unnormalized form                    
                </throws>
                <throws>
                    UnsupportedOperationException If the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the following transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      or &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;.                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="1677">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="1678"/>
                <scope line="1681"/>
                <scope line="1684"/>
                <scope line="1689">
                    <declaration name="pixel" type="int[]" line="1690"/>
                    <scope line="1691"/>
                    <scope line="1694"/>
                </scope>
                <scope line="1701">
                    <declaration name="pixel" type="byte[]" line="1702"/>
                    <scope line="1703"/>
                    <scope line="1706"/>
                    <scope line="1709"/>
                </scope>
                <scope line="1715">
                    <declaration name="pixel" type="short[]" line="1716"/>
                    <scope line="1717"/>
                    <scope line="1720"/>
                    <scope line="1723"/>
                </scope>
            </method>
            <javadoc line="1732">
                Returns a pixel value represented as an &lt;code&gt;int&lt;/code&gt; in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of normalized color/alpha
                  components.  This method will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if pixel values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable as a
                  single &lt;code&gt;int&lt;/code&gt;.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if  the
                  &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold all the
                  color and alpha components (starting at &lt;code&gt;normOffset&lt;/code&gt;).                
                <param>
                    normComponents an array of normalized color and alpha
                      components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at which to
                      begin retrieving the color and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; pixel value in this
                      &lt;code&gt;ColorModel&lt;/code&gt; corresponding to the specified components.                    
                </return>
                <throws>
                    IllegalArgumentException if
                      pixel values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                      conveniently representable as a single &lt;code&gt;int&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      the &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to
                      hold all of the color and alpha components starting at
                      &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDataElement" type="int" line="1757">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <scope line="1758"/>
                <scope line="1761"/>
                <scope line="1764"/>
                <declaration name="pixel" type="Object" line="1767"/>
                <scope line="1770">
                    <declaration name="bpixel" type="byte" line="1771"/>
                </scope>
                <scope line="1775">
                    <declaration name="uspixel" type="short[]" line="1776"/>
                </scope>
                <scope line="1780">
                    <declaration name="ipixel" type="int[]" line="1781"/>
                </scope>
            </method>
            <javadoc line="1788">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of normalized color/alpha
                  components.  This array can then be passed to the
                  &lt;code&gt;setDataElements&lt;/code&gt; method of a &lt;code&gt;WritableRaster&lt;/code&gt;
                  object.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold
                  all the color and alpha components (starting at
                  &lt;code&gt;normOffset&lt;/code&gt;).  If the &lt;code&gt;obj&lt;/code&gt; variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  If
                  &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it must be a primitive
                  array of type transferType; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    normComponents an array of normalized color and alpha
                      components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at which to
                      begin retrieving color and alpha components                    
                </param>
                <param>
                    obj a primitive data array to hold the returned pixel                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; which is a primitive data array
                      representation of a pixel                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;obj&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt; or the &lt;code&gt;normComponents&lt;/code&gt;
                      array is not large enough to hold all of the color and alpha
                      components starting at &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDataElements" type="Object" line="1822">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="needAlpha" type="boolean" line="1823"/>
                <declaration name="stdNormComponents" type="float[]" line="1824"/>
                <scope line="1825"/>
                <scope line="1828">
                    <scope line="1830">
                        <scope line="1832"/>
                        <scope line="1835"/>
                    </scope>
                    <scope line="1839"/>
                </scope>
                <scope line="1844"/>
                <declaration name="bpixel" type="byte[]" line="1849"/>
                <scope line="1850"/>
                <scope line="1853"/>
                <scope line="1856">
                    <declaration name="alpha" type="float" line="1857"/>
                    <scope line="1858"/>
                </scope>
                <scope line="1863">
                    <scope line="1864"/>
                </scope>
                <declaration name="uspixel" type="short[]" line="1870"/>
                <scope line="1871"/>
                <scope line="1874"/>
                <scope line="1877">
                    <declaration name="alpha" type="float" line="1878"/>
                    <scope line="1879"/>
                </scope>
                <scope line="1884">
                    <scope line="1885"/>
                </scope>
                <declaration name="ipixel" type="int[]" line="1891"/>
                <scope line="1892"/>
                <scope line="1895"/>
                <scope line="1898">
                    <declaration name="alpha" type="float" line="1899"/>
                    <scope line="1900"/>
                </scope>
                <scope line="1905">
                    <scope line="1906"/>
                </scope>
                <declaration name="spixel" type="short[]" line="1912"/>
                <scope line="1913"/>
                <scope line="1916"/>
                <scope line="1919">
                    <declaration name="alpha" type="float" line="1920"/>
                    <scope line="1921"/>
                </scope>
                <scope line="1926">
                    <scope line="1927"/>
                </scope>
                <declaration name="fpixel" type="float[]" line="1933"/>
                <scope line="1934"/>
                <scope line="1937"/>
                <scope line="1940">
                    <declaration name="alpha" type="float" line="1941"/>
                    <scope line="1942"/>
                </scope>
                <scope line="1947">
                    <scope line="1948"/>
                </scope>
                <declaration name="dpixel" type="double[]" line="1954"/>
                <scope line="1955"/>
                <scope line="1958"/>
                <scope line="1961">
                    <declaration name="alpha" type="double" line="1962"/>
                    <scope line="1963"/>
                </scope>
                <scope line="1968">
                    <scope line="1969"/>
                </scope>
            </method>
            <javadoc line="1978">
                Returns an array of all of the color/alpha components in normalized
                  form, given a pixel in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel
                  value is specified by an array of data elements of type transferType
                  passed in as an object reference.  If pixel is not a primitive array
                  of type transferType, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Normalized components are float values between a per component minimum
                  and maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  If the
                  &lt;code&gt;normComponents&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;normComponents&lt;/code&gt; array
                  will be returned.  Color/alpha components are stored in the
                  &lt;code&gt;normComponents&lt;/code&gt; array starting at
                  &lt;code&gt;normOffset&lt;/code&gt; (even if the array is allocated by this
                  method).  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt;
                  and is not large enough to hold all the color and alpha components
                  (starting at &lt;code&gt;normOffset&lt;/code&gt;).
                  &lt;p&gt;
                  This method must be overrridden by a subclass if that subclass
                  is designed to translate pixel sample values to color component values
                  in a non-default way.  The default translations implemented by this
                  class is described in the class comments.  Any subclass implementing
                  a non-default translation must follow the constraints on allowable
                  translations defined there.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    normComponents an array to receive the normalized components                    
                </param>
                <param>
                    normOffset the offset into the &lt;code&gt;normComponents&lt;/code&gt;
                      array at which to start storing normalized components                    
                </param>
                <return>
                    an array containing normalized color and alpha
                      components.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt; is not a primitive
                      array of type transferType                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;normComponents&lt;/code&gt; is not large enough to hold all
                      color and alpha components starting at &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel
                      value for this &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNormalizedComponents" type="float[]" line="2022">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <scope line="2023"/>
                <declaration name="bpixel" type="byte[]" line="2028"/>
                <scope line="2029"/>
                <declaration name="uspixel" type="short[]" line="2034"/>
                <scope line="2035"/>
                <declaration name="ipixel" type="int[]" line="2040"/>
                <scope line="2041"/>
                <declaration name="spixel" type="short[]" line="2046"/>
                <scope line="2047"/>
                <declaration name="fpixel" type="float[]" line="2052"/>
                <scope line="2053"/>
                <declaration name="dpixel" type="double[]" line="2058"/>
                <scope line="2059"/>
                <scope line="2066">
                    <declaration name="alpha" type="float" line="2067"/>
                    <scope line="2068">
                        <declaration name="invAlpha" type="float" line="2069"/>
                        <scope line="2070"/>
                    </scope>
                </scope>
                <scope line="2075">
                    <scope line="2076"/>
                </scope>
            </method>
            <javadoc line="2082">
                Forces the raster data to match the state specified in the
                  &lt;CODE&gt;isAlphaPremultiplied&lt;/CODE&gt; variable, assuming the data
                  is currently correctly described by this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.
                  It may multiply or divide the color raster data by alpha, or
                  do nothing if the data is in the correct state.  If the data needs
                  to be coerced, this method also returns an instance of
                  this &lt;CODE&gt;ColorModel&lt;/CODE&gt; with
                  the &lt;CODE&gt;isAlphaPremultiplied&lt;/CODE&gt; flag set appropriately.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; can be subclassed, subclasses inherit
                  the implementation of this method and if they don&apos;t override it
                  then they throw an exception if they use an unsupported
                  &lt;code&gt;transferType&lt;/code&gt;.                
                <throws>
                    NullPointerException if &lt;code&gt;raster&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; and data coercion is required.                    
                </throws>
                <throws>
                    UnsupportedOperationException if the transfer type of
                      this &lt;CODE&gt;ComponentColorModel&lt;/CODE&gt;
                      is not one of the supported transfer types:
                      &lt;CODE&gt;DataBuffer.TYPE_BYTE&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_USHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_INT&lt;/CODE&gt;, &lt;CODE&gt;DataBuffer.TYPE_SHORT&lt;/CODE&gt;,
                      &lt;CODE&gt;DataBuffer.TYPE_FLOAT&lt;/CODE&gt;, or &lt;CODE&gt;DataBuffer.TYPE_DOUBLE&lt;/CODE&gt;.                    
                </throws>
            </javadoc>
            <method name="coerceData" type="ColorModel" line="2104">
                <params>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
                <scope line="2105"/>
                <declaration name="w" type="int" line="2108"/>
                <declaration name="h" type="int" line="2109"/>
                <declaration name="aIdx" type="int" line="2110"/>
                <declaration name="normAlpha" type="float" line="2111"/>
                <declaration name="rminX" type="int" line="2112"/>
                <declaration name="rY" type="int" line="2113"/>
                <declaration name="rX" type="int" line="2114"/>
                <scope line="2115">
                    <scope line="2118">
                        <declaration name="pixel" type="byte" line="2119"/>
                        <declaration name="zpixel" type="byte" line="2120"/>
                        <declaration name="alphaScale" type="float" line="2121"/>
                        <scope line="2122">
                            <scope line="2124">
                                <scope line="2127">
                                    <scope line="2128"/>
                                </scope>
                                <scope line="2133">
                                    <scope line="2134"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2145">
                        <declaration name="pixel" type="short" line="2146"/>
                        <declaration name="zpixel" type="short" line="2147"/>
                        <declaration name="alphaScale" type="float" line="2148"/>
                        <scope line="2149">
                            <scope line="2151">
                                <scope line="2154">
                                    <scope line="2155"/>
                                </scope>
                                <scope line="2160">
                                    <scope line="2161"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2172">
                        <declaration name="pixel" type="int" line="2173"/>
                        <declaration name="zpixel" type="int" line="2174"/>
                        <declaration name="alphaScale" type="float" line="2175"/>
                        <scope line="2176">
                            <scope line="2178">
                                <scope line="2181">
                                    <scope line="2182"/>
                                </scope>
                                <scope line="2187">
                                    <scope line="2188"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2199">
                        <declaration name="pixel" type="short" line="2200"/>
                        <declaration name="zpixel" type="short" line="2201"/>
                        <declaration name="alphaScale" type="float" line="2202"/>
                        <scope line="2203">
                            <scope line="2205">
                                <scope line="2208">
                                    <scope line="2209"/>
                                </scope>
                                <scope line="2214">
                                    <scope line="2215"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2226">
                        <declaration name="pixel" type="float" line="2227"/>
                        <declaration name="zpixel" type="float" line="2228"/>
                        <scope line="2229">
                            <scope line="2231">
                                <scope line="2234">
                                    <scope line="2235"/>
                                </scope>
                                <scope line="2240">
                                    <scope line="2241"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2252">
                        <declaration name="pixel" type="double" line="2253"/>
                        <declaration name="zpixel" type="double" line="2254"/>
                        <scope line="2255">
                            <scope line="2257">
                                <declaration name="dnormAlpha" type="double" line="2259"/>
                                <scope line="2260">
                                    <scope line="2261"/>
                                </scope>
                                <scope line="2266">
                                    <scope line="2267"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2281">
                    <scope line="2284">
                        <declaration name="pixel" type="byte" line="2285"/>
                        <declaration name="alphaScale" type="float" line="2286"/>
                        <scope line="2287">
                            <scope line="2289">
                                <scope line="2292">
                                    <declaration name="invAlpha" type="float" line="2293"/>
                                    <scope line="2294"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2304">
                        <declaration name="pixel" type="short" line="2305"/>
                        <declaration name="alphaScale" type="float" line="2306"/>
                        <scope line="2307">
                            <scope line="2309">
                                <scope line="2312">
                                    <declaration name="invAlpha" type="float" line="2313"/>
                                    <scope line="2314"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2324">
                        <declaration name="pixel" type="int" line="2325"/>
                        <declaration name="alphaScale" type="float" line="2326"/>
                        <scope line="2327">
                            <scope line="2329">
                                <scope line="2332">
                                    <declaration name="invAlpha" type="float" line="2333"/>
                                    <scope line="2334"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2344">
                        <declaration name="pixel" type="short" line="2345"/>
                        <declaration name="alphaScale" type="float" line="2346"/>
                        <scope line="2347">
                            <scope line="2349">
                                <scope line="2352">
                                    <declaration name="invAlpha" type="float" line="2353"/>
                                    <scope line="2354"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2364">
                        <declaration name="pixel" type="float" line="2365"/>
                        <scope line="2366">
                            <scope line="2368">
                                <scope line="2371">
                                    <declaration name="invAlpha" type="float" line="2372"/>
                                    <scope line="2373"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2383">
                        <declaration name="pixel" type="double" line="2384"/>
                        <scope line="2385">
                            <scope line="2387">
                                <declaration name="dnormAlpha" type="double" line="2389"/>
                                <scope line="2390">
                                    <declaration name="invAlpha" type="double" line="2391"/>
                                    <scope line="2392"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2405"/>
                <scope line="2408"/>
            </method>
            <javadoc line="2412">
                Returns true if &lt;CODE&gt;raster&lt;/CODE&gt; is compatible with this
                  &lt;CODE&gt;ColorModel&lt;/CODE&gt;; false if it is not.                
                <param>
                    raster The &lt;CODE&gt;Raster&lt;/CODE&gt; object to test for compatibility.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if &lt;CODE&gt;raster&lt;/CODE&gt; is compatible with this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;, &lt;CODE&gt;false&lt;/CODE&gt; if it is not.                    
                </return>
            </javadoc>
            <method name="isCompatibleRaster" type="boolean" line="2419">
                <params>
                    <param name="raster" type="Raster"/>
                </params>
                <declaration name="sm" type="SampleModel" line="2420"/>
                <scope line="2421">
                    <scope line="2422"/>
                    <scope line="2425">
                        <scope line="2426"/>
                    </scope>
                </scope>
                <scope line="2432"/>
            </method>
            <javadoc line="2436">
                Creates a &lt;CODE&gt;WritableRaster&lt;/CODE&gt; with the specified width and height,
                  that  has a data layout (&lt;CODE&gt;SampleModel&lt;/CODE&gt;) compatible with
                  this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                
                <param>
                    w The width of the &lt;CODE&gt;WritableRaster&lt;/CODE&gt; you want to create.                    
                </param>
                <param>
                    h The height of the &lt;CODE&gt;WritableRaster&lt;/CODE&gt; you want to create.                    
                </param>
                <return>
                    A &lt;CODE&gt;WritableRaster&lt;/CODE&gt; that is compatible with
                      this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </return>
                <see>
                    WritableRaster                    
                </see>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="2447">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="dataSize" type="int" line="2448"/>
                <declaration name="raster" type="WritableRaster" line="2449"/>
                <declaration name="sm" type="SampleModel" line="2456"/>
                <declaration name="db" type="DataBuffer" line="2457"/>
            </method>
            <javadoc line="2462">
                Creates a &lt;CODE&gt;SampleModel&lt;/CODE&gt; with the specified width and height,
                  that  has a data layout compatible with this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                
                <param>
                    w The width of the &lt;CODE&gt;SampleModel&lt;/CODE&gt; you want to create.                    
                </param>
                <param>
                    h The height of the &lt;CODE&gt;SampleModel&lt;/CODE&gt; you want to create.                    
                </param>
                <return>
                    A &lt;CODE&gt;SampleModel&lt;/CODE&gt; that is compatible with this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                    
                </return>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="2471">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="bandOffsets" type="int[]" line="2472"/>
                <scope line="2473"/>
            </method>
            <javadoc line="2484">
                Checks whether or not the specified &lt;CODE&gt;SampleModel&lt;/CODE&gt;
                  is compatible with this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.                
                <param>
                    sm The &lt;CODE&gt;SampleModel&lt;/CODE&gt; to test for compatibility.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the &lt;CODE&gt;SampleModel&lt;/CODE&gt; is
                      compatible with this &lt;CODE&gt;ColorModel&lt;/CODE&gt;, &lt;CODE&gt;false&lt;/CODE&gt;
                      if it is not.                    
                </return>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="isCompatibleSampleModel" type="boolean" line="2493">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <scope line="2494"/>
                <scope line="2497"/>
                <scope line="2500"/>
            </method>
            <javadoc line="2505">
                Returns a &lt;CODE&gt;Raster&lt;/CODE&gt; representing the alpha channel of an image,
                  extracted from the input &lt;CODE&gt;Raster&lt;/CODE&gt;.
                  This method assumes that &lt;CODE&gt;Raster&lt;/CODE&gt; objects associated with
                  this &lt;CODE&gt;ColorModel&lt;/CODE&gt; store the alpha band, if present, as
                  the last band of image data. Returns null if there is no separate spatial
                  alpha channel associated with this &lt;CODE&gt;ColorModel&lt;/CODE&gt;.
                  This method creates a new &lt;CODE&gt;Raster&lt;/CODE&gt;, but will share the data
                  array.                
                <param>
                    raster The &lt;CODE&gt;WritableRaster&lt;/CODE&gt; from which to extract the
                      alpha  channel.                    
                </param>
                <return>
                    A &lt;CODE&gt;WritableRaster&lt;/CODE&gt; containing the image&apos;s alpha channel.                    
                </return>
            </javadoc>
            <method name="getAlphaRaster" type="WritableRaster" line="2518">
                <params>
                    <param name="raster" type="WritableRaster"/>
                </params>
                <scope line="2519"/>
                <declaration name="x" type="int" line="2522"/>
                <declaration name="y" type="int" line="2523"/>
                <declaration name="band" type="int[]" line="2524"/>
            </method>
            <javadoc line="2528">
                Compares this color model with another for equality.                
                <param>
                    obj The object to compare with this color model.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the color model objects are equal,
                      &lt;CODE&gt;false&lt;/CODE&gt; if they are not.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="2534">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="2535"/>
                <scope line="2538"/>
            </method>
        </class>
    </source>