<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="sun.java2d.cmm.CMSManager"/>
        <import package="sun.java2d.cmm.ColorTransform"/>
        <import package="sun.java2d.cmm.PCMM"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <class name="ColorModel" line="39">
            <comment line="158">
                Placeholder for data for native functions                
            </comment>
            <comment line="1690">
                8-bit linear to 8-bit non-linear sRGB LUT                
            </comment>
            <comment line="1691">
                8-bit non-linear sRGB to 8-bit linear LUT                
            </comment>
            <comment line="1692">
                16-bit linear to 8-bit non-linear sRGB LUT                
            </comment>
            <comment line="1693">
                8-bit non-linear sRGB to 16-bit linear LUT                
            </comment>
            <comment line="1695">
                Maps to hold LUTs for grayscale conversions                
            </comment>
            <comment line="1696">
                8-bit gray values to 8-bit sRGB values                
            </comment>
            <comment line="1697">
                16-bit linear to 8-bit &quot;other&quot; gray                
            </comment>
            <comment line="1698">
                16-bit gray values to 8-bit sRGB values                
            </comment>
            <comment line="1699">
                16-bit linear to 16-bit &quot;other&quot; gray                
            </comment>
            <comment line="1791">
                Return a byte LUT that converts 8-bit gray values in the grayCS
                 ColorSpace to the appropriate 8-bit sRGB value.  I.e., if lut
                 is the byte array returned by this method and sval = lut[gval],
                 then the sRGB triple (sval,sval,sval) is the best match to gval.
                 Cache references to any computed LUT in a Map.                
            </comment>
            <comment line="1837">
                Return a byte LUT that converts 16-bit gray values in the CS_GRAY
                 linear gray ColorSpace to the appropriate 8-bit value in the
                 grayCS ColorSpace.  Cache references to any computed LUT in a Map.                
            </comment>
            <comment line="1876">
                Return a byte LUT that converts 16-bit gray values in the grayCS
                 ColorSpace to the appropriate 8-bit sRGB value.  I.e., if lut
                 is the byte array returned by this method and sval = lut[gval],
                 then the sRGB triple (sval,sval,sval) is the best match to gval.
                 Cache references to any computed LUT in a Map.                
            </comment>
            <comment line="1926">
                Return a short LUT that converts 16-bit gray values in the CS_GRAY
                 linear gray ColorSpace to the appropriate 16-bit value in the
                 grayCS ColorSpace.  Cache references to any computed LUT in a Map.                
            </comment>
            <implements interface="Transparency"/>
            <javadoc line="39">
                The &lt;code&gt;ColorModel&lt;/code&gt; abstract class encapsulates the
                  methods for translating a pixel value to color components
                  (for example, red, green, and blue) and an alpha component.
                  In order to render an image to the screen, a printer, or another
                  image, pixel values must be converted to color and alpha components.
                  As arguments to or return values from methods of this class,
                  pixels are represented as 32-bit ints or as arrays of primitive types.
                  The number, order, and interpretation of color components for a
                  &lt;code&gt;ColorModel&lt;/code&gt; is specified by its &lt;code&gt;ColorSpace&lt;/code&gt;.
                  A &lt;code&gt;ColorModel&lt;/code&gt; used with pixel data that does not include
                  alpha information treats all pixels as opaque, which is an alpha
                  value of 1.0.
                  &lt;p&gt;
                  This &lt;code&gt;ColorModel&lt;/code&gt; class supports two representations of
                  pixel values.  A pixel value can be a single 32-bit int or an
                  array of primitive types.  The Java(tm) Platform 1.0 and 1.1 APIs
                  represented pixels as single &lt;code&gt;byte&lt;/code&gt; or single
                  &lt;code&gt;int&lt;/code&gt; values.  For purposes of the &lt;code&gt;ColorModel&lt;/code&gt;
                  class, pixel value arguments were passed as ints.  The Java(tm) 2
                  Platform API introduced additional classes for representing images.
                  With {@link BufferedImage} or {@link RenderedImage}objects, based on {@link Raster} and {@link SampleModel} classes, pixel
                  values might not be conveniently representable as a single int.
                  Consequently, &lt;code&gt;ColorModel&lt;/code&gt; now has methods that accept
                  pixel values represented as arrays of primitive types.  The primitive
                  type used by a particular &lt;code&gt;ColorModel&lt;/code&gt; object is called its
                  transfer type.
                  &lt;p&gt;
                  &lt;code&gt;ColorModel&lt;/code&gt; objects used with images for which pixel values
                  are not conveniently representable as a single int throw an{@link IllegalArgumentException} when methods taking a single int pixel
                  argument are called.  Subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must
                  specify the conditions under which this occurs.  This does not
                  occur with {@link DirectColorModel} or {@link IndexColorModel} objects.
                  &lt;p&gt;
                  Currently, the transfer types supported by the Java 2D(tm) API are
                  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT,
                  DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, and DataBuffer.TYPE_DOUBLE.
                  Most rendering operations will perform much faster when using ColorModels
                  and images based on the first three of these types.  In addition, some
                  image filtering operations are not supported for ColorModels and
                  images based on the latter three types.
                  The transfer type for a particular &lt;code&gt;ColorModel&lt;/code&gt; object is
                  specified when the object is created, either explicitly or by default.
                  All subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must specify what the
                  possible transfer types are and how the number of elements in the
                  primitive arrays representing pixels is determined.
                  &lt;p&gt;
                  For &lt;code&gt;BufferedImages&lt;/code&gt;, the transfer type of its
                  &lt;code&gt;Raster&lt;/code&gt; and of the &lt;code&gt;Raster&lt;/code&gt; object&apos;s
                  &lt;code&gt;SampleModel&lt;/code&gt; (available from the
                  &lt;code&gt;getTransferType&lt;/code&gt; methods of these classes) must match that
                  of the &lt;code&gt;ColorModel&lt;/code&gt;.  The number of elements in an array
                  representing a pixel for the &lt;code&gt;Raster&lt;/code&gt; and
                  &lt;code&gt;SampleModel&lt;/code&gt; (available from the
                  &lt;code&gt;getNumDataElements&lt;/code&gt; methods of these classes) must match
                  that of the &lt;code&gt;ColorModel&lt;/code&gt;.
                  &lt;p&gt;
                  The algorithm used to convert from pixel values to color and alpha
                  components varies by subclass.  For example, there is not necessarily
                  a one-to-one correspondence between samples obtained from the
                  &lt;code&gt;SampleModel&lt;/code&gt; of a &lt;code&gt;BufferedImage&lt;/code&gt; object&apos;s
                  &lt;code&gt;Raster&lt;/code&gt; and color/alpha components.  Even when
                  there is such a correspondence, the number of bits in a sample is not
                  necessarily the same as the number of bits in the corresponding color/alpha
                  component.  Each subclass must specify how the translation from
                  pixel values to color/alpha components is done.
                  &lt;p&gt;
                  Methods in the &lt;code&gt;ColorModel&lt;/code&gt; class use two different
                  representations of color and alpha components - a normalized form
                  and an unnormalized form.  In the normalized form, each component is a
                  &lt;code&gt;float&lt;/code&gt; value between some minimum and maximum values.  For
                  the alpha component, the minimum is 0.0 and the maximum is 1.0.  For
                  color components the minimum and maximum values for each component can
                  be obtained from the &lt;code&gt;ColorSpace&lt;/code&gt; object.  These values
                  will often be 0.0 and 1.0 (e.g. normalized component values for the
                  default sRGB color space range from 0.0 to 1.0), but some color spaces
                  have component values with different upper and lower limits.  These
                  limits can be obtained using the &lt;code&gt;getMinValue&lt;/code&gt; and
                  &lt;code&gt;getMaxValue&lt;/code&gt; methods of the &lt;code&gt;ColorSpace&lt;/code&gt;
                  class.  Normalized color component values are not premultiplied.
                  All &lt;code&gt;ColorModels&lt;/code&gt; must support the normalized form.
                  &lt;p&gt;
                  In the unnormalized
                  form, each component is an unsigned integral value between 0 and
                  2&lt;sup&gt;n&lt;/sup&gt; - 1, where n is the number of significant bits for a
                  particular component.  If pixel values for a particular
                  &lt;code&gt;ColorModel&lt;/code&gt; represent color samples premultiplied by
                  the alpha sample, unnormalized color component values are
                  also premultiplied.  The unnormalized form is used only with instances
                  of &lt;code&gt;ColorModel&lt;/code&gt; whose &lt;code&gt;ColorSpace&lt;/code&gt; has minimum
                  component values of 0.0 for all components and maximum values of
                  1.0 for all components.
                  The unnormalized form for color and alpha components can be a convenient
                  representation for &lt;code&gt;ColorModels&lt;/code&gt; whose normalized component
                  values all lie
                  between 0.0 and 1.0.  In such cases the integral value 0 maps to 0.0 and
                  the value 2&lt;sup&gt;n&lt;/sup&gt; - 1 maps to 1.0.  In other cases, such as
                  when the normalized component values can be either negative or positive,
                  the unnormalized form is not convenient.  Such &lt;code&gt;ColorModel&lt;/code&gt;
                  objects throw an {@link IllegalArgumentException} when methods involving
                  an unnormalized argument are called.  Subclasses of &lt;code&gt;ColorModel&lt;/code&gt;
                  must specify the conditions under which this occurs.                
                <see>
                    IndexColorModel                    
                </see>
                <see>
                    ComponentColorModel                    
                </see>
                <see>
                    PackedColorModel                    
                </see>
                <see>
                    DirectColorModel                    
                </see>
                <see>
                    java.awt.Image                    
                </see>
                <see>
                    BufferedImage                    
                </see>
                <see>
                    RenderedImage                    
                </see>
                <see>
                    java.awt.color.ColorSpace                    
                </see>
                <see>
                    SampleModel                    
                </see>
                <see>
                    Raster                    
                </see>
                <see>
                    DataBuffer                    
                </see>
            </javadoc>
            <declaration name="pData" type="long" line="157"/>
            <declaration name="pixel_bits" type="int" line="159"/>
            <javadoc line="159">
                The total number of bits in the pixel.                
            </javadoc>
            <declaration name="nBits" type="int" line="163"/>
            <declaration name="transparency" type="int" line="164"/>
            <declaration name="supportsAlpha" type="boolean" line="165"/>
            <declaration name="isAlphaPremultiplied" type="boolean" line="166"/>
            <declaration name="numComponents" type="int" line="167"/>
            <declaration name="numColorComponents" type="int" line="168"/>
            <declaration name="colorSpace" type="ColorSpace" line="169"/>
            <declaration name="colorSpaceType" type="int" line="170"/>
            <declaration name="maxBits" type="int" line="171"/>
            <declaration name="is_sRGB" type="boolean" line="172"/>
            <declaration name="transferType" type="int" line="174"/>
            <javadoc line="174">
                Data type of the array used to represent pixel values.                
            </javadoc>
            <declaration name="loaded" type="boolean" line="179"/>
            <javadoc line="179">
                This is copied from java.awt.Toolkit since we need the library
                  loaded in java.awt.image also:
                  WARNING: This is a temporary workaround for a problem in the
                  way the AWT loads native libraries. A number of classes in the
                  AWT package have a native method, initIDs(), which initializes
                  the JNI field and method ids used in the native portion of
                  their implementation.
                  Since the use and storage of these ids is done by the
                  implementation libraries, the implementation of these method is
                  provided by the particular AWT implementations (for example,
                  &quot;Toolkit&quot;s/Peer), such as Motif, Microsoft Windows, or Tiny. The
                  problem is that this means that the native libraries must be
                  loaded by the java. classes, which do not necessarily know the
                  names of the libraries to load. A better way of doing this
                  would be to provide a separate library which defines java.awt.
                  initIDs, and exports the relevant symbols out to the
                  implementation libraries.
                  For now, we know it&apos;s done by the implementation, and we assume
                  that the name of the library is &quot;awt&quot;.  -br.                
            </javadoc>
            <method name="loadLibraries" type="void" line="204">
                <scope line="205"/>
            </method>
            <method name="initIDs" type="void" line="211"/>
            <scope line="212"/>
            <declaration name="RGBdefault" type="ColorModel" line="217"/>
            <javadoc line="219">
                Returns a &lt;code&gt;DirectColorModel&lt;/code&gt; that describes the default
                  format for integer RGB values used in many of the methods in the
                  AWT image interfaces for the convenience of the programmer.
                  The color space is the default {@link ColorSpace}, sRGB.
                  The format for the RGB values is an integer with 8 bits
                  each of alpha, red, green, and blue color components ordered
                  correspondingly from the most significant byte to the least
                  significant byte, as in:  0xAARRGGBB.  Color components are
                  not premultiplied by the alpha component.  This format does not
                  necessarily represent the native or the most efficient
                  &lt;code&gt;ColorModel&lt;/code&gt; for a particular device or for all images.
                  It is merely used as a common color model format.                
                <return>
                    a &lt;code&gt;DirectColorModel&lt;/code&gt;object describing default
                      RGB values.                    
                </return>
            </javadoc>
            <method name="getRGBdefault" type="ColorModel" line="235">
                <comment line="239">
                    Red                    
                </comment>
                <comment line="240">
                    Green                    
                </comment>
                <comment line="241">
                    Blue                    
                </comment>
                <comment line="242">
                    Alpha                    
                </comment>
                <scope line="236"/>
            </method>
            <javadoc line="247">
                Constructs a &lt;code&gt;ColorModel&lt;/code&gt; that translates pixels of the
                  specified number of bits to color/alpha components.  The color
                  space is the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, which is sRGB.
                  Pixel values are assumed to include alpha information.  If color
                  and alpha information are represented in the pixel value as
                  separate spatial bands, the color bands are assumed not to be
                  premultiplied with the alpha value. The transparency type is
                  java.awt.Transparency.TRANSLUCENT.  The transfer type will be the
                  smallest of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  or DataBuffer.TYPE_INT that can hold a single pixel
                  (or DataBuffer.TYPE_UNDEFINED if bits is greater
                  than 32).  Since this constructor has no information about the
                  number of bits per color and alpha component, any subclass calling
                  this constructor should override any method that requires this
                  information.                
                <param>
                    bits the number of bits of a pixel                    
                </param>
                <throws>
                    IllegalArgumentException if the number
                      of bits in &lt;code&gt;bits&lt;/code&gt; is less than 1                    
                </throws>
            </javadoc>
            <method name="ColorModel" type="constructor" line="267">
                <params>
                    <param name="bits" type="int"/>
                </params>
                <comment line="276">
                    REMIND: make sure transferType is set correctly                    
                </comment>
                <scope line="269"/>
            </method>
            <javadoc line="279">
                Constructs a &lt;code&gt;ColorModel&lt;/code&gt; that translates pixel values
                  to color/alpha components.  Color components will be in the
                  specified &lt;code&gt;ColorSpace&lt;/code&gt;. &lt;code&gt;pixel_bits&lt;/code&gt; is the
                  number of bits in the pixel values.  The bits array
                  specifies the number of significant bits per color and alpha component.
                  Its length should be the number of components in the
                  &lt;code&gt;ColorSpace&lt;/code&gt; if there is no alpha information in the
                  pixel values, or one more than this number if there is alpha
                  information.  &lt;code&gt;hasAlpha&lt;/code&gt; indicates whether or not alpha
                  information is present.  The &lt;code&gt;boolean&lt;/code&gt;
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; specifies how to interpret pixel
                  values in which color and alpha information are represented as
                  separate spatial bands.  If the &lt;code&gt;boolean&lt;/code&gt;
                  is &lt;code&gt;true&lt;/code&gt;, color samples are assumed to have been
                  multiplied by the alpha sample.  The &lt;code&gt;transparency&lt;/code&gt;
                  specifies what alpha values can be represented by this color model.
                  The transfer type is the type of primitive array used to represent
                  pixel values.  Note that the bits array contains the number of
                  significant bits per color/alpha component after the translation
                  from pixel values.  For example, for an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; with &lt;code&gt;pixel_bits&lt;/code&gt; equal to
                  16, the bits array might have four elements with each element set
                  to 8.                
                <param>
                    pixel_bits the number of bits in the pixel values                    
                </param>
                <param>
                    bits array that specifies the number of significant bits
                      per color and alpha component                    
                </param>
                <param>
                    cspace the specified &lt;code&gt;ColorSpace&lt;/code&gt;                    
                </param>
                <param>
                    hasAlpha &lt;code&gt;true&lt;/code&gt; if alpha information is present;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if color samples are
                      assumed to be premultiplied by the alpha samples;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <param>
                    transparency what alpha values can be represented by this
                      color model                    
                </param>
                <param>
                    transferType the type of the array used to represent pixel
                      values                    
                </param>
                <throws>
                    IllegalArgumentException if the length of
                      the bit array is less than the number of color or alpha
                      components in this &lt;code&gt;ColorModel&lt;/code&gt;, or if the
                      transparency is not a valid value.                    
                </throws>
                <throws>
                    IllegalArgumentException if the sum of the number
                      of bits in &lt;code&gt;bits&lt;/code&gt; is less than 1 or if
                      any of the elements in &lt;code&gt;bits&lt;/code&gt; is less than 0.                    
                </throws>
                <see>
                    java.awt.Transparency                    
                </see>
            </javadoc>
            <method name="ColorModel" type="constructor" line="329">
                <params>
                    <param name="pixel_bits" type="int"/>
                    <param name="bits" type="int[]"/>
                    <param name="cspace" type="ColorSpace"/>
                    <param name="hasAlpha" type="boolean"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                    <param name="transparency" type="int"/>
                    <param name="transferType" type="int"/>
                </params>
                <comment line="344">
                    4186669                    
                </comment>
                <comment line="367">
                    Check for bits &lt; 0                    
                </comment>
                <comment line="370">
                    bug 4304697                    
                </comment>
                <comment line="380">
                    Make sure that we don&apos;t have all 0-bit components                    
                </comment>
                <comment line="387">
                    Save this since we always need to check if it is the default CS                    
                </comment>
                <comment line="392">
                    Save the transfer type                    
                </comment>
                <scope line="335"/>
                <scope line="346"/>
                <scope line="351"/>
                <scope line="355"/>
                <scope line="362"/>
                <scope line="368">
                    <scope line="370"/>
                    <scope line="374"/>
                </scope>
                <scope line="380"/>
                <scope line="387"/>
            </method>
            <javadoc line="395">
                Returns whether or not alpha is supported in this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if alpha is supported in this
                      &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="hasAlpha" type="boolean" line="401"/>
            <javadoc line="405">
                Returns whether or not the alpha has been premultiplied in the
                  pixel values to be translated by this &lt;code&gt;ColorModel&lt;/code&gt;.
                  If the boolean is &lt;code&gt;true&lt;/code&gt;, this &lt;code&gt;ColorModel&lt;/code&gt;
                  is to be used to interpret pixel values in which color and alpha
                  information are represented as separate spatial bands, and color
                  samples are assumed to have been multiplied by the
                  alpha sample.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the alpha values are premultiplied
                      in the pixel values to be translated by this
                      &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isAlphaPremultiplied" type="boolean" line="417"/>
            <javadoc line="421">
                Returns the transfer type of this &lt;code&gt;ColorModel&lt;/code&gt;.
                  The transfer type is the type of primitive array used to represent
                  pixel values as arrays.                
                <return>
                    the transfer type.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getTransferType" type="int" line="428"/>
            <javadoc line="432">
                Returns the number of bits per pixel described by this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <return>
                    the number of bits per pixel.                    
                </return>
            </javadoc>
            <method name="getPixelSize" type="int" line="437"/>
            <javadoc line="441">
                Returns the number of bits for the specified color/alpha component.
                  Color components are indexed in the order specified by the
                  &lt;code&gt;ColorSpace&lt;/code&gt;.  Typically, this order reflects the name
                  of the color space type. For example, for TYPE_RGB, index 0
                  corresponds to red, index 1 to green, and index 2
                  to blue.  If this &lt;code&gt;ColorModel&lt;/code&gt; supports alpha, the alpha
                  component corresponds to the index following the last color
                  component.                
                <param>
                    componentIdx the index of the color/alpha component                    
                </param>
                <return>
                    the number of bits for the color/alpha component at the
                      specified index.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if &lt;code&gt;componentIdx&lt;/code&gt;
                      is greater than the number of components or
                      less than zero                    
                </throws>
                <throws>
                    NullPointerException if the number of bits array is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getComponentSize" type="int" line="459">
                <params>
                    <param name="componentIdx" type="int"/>
                </params>
                <comment line="461">
                    REMIND:                    
                </comment>
                <scope line="461"/>
            </method>
            <javadoc line="468">
                Returns an array of the number of bits per color/alpha component.
                  The array contains the color components in the order specified by the
                  &lt;code&gt;ColorSpace&lt;/code&gt;, followed by the alpha component, if
                  present.                
                <return>
                    an array of the number of bits per color/alpha component                    
                </return>
            </javadoc>
            <method name="getComponentSize" type="int[]" line="475">
                <scope line="476"/>
            </method>
            <javadoc line="483">
                Returns the transparency.  Returns either OPAQUE, BITMASK,
                  or TRANSLUCENT.                
                <return>
                    the transparency of this &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
                <see>
                    Transparency#OPAQUE                    
                </see>
                <see>
                    Transparency#BITMASK                    
                </see>
                <see>
                    Transparency#TRANSLUCENT                    
                </see>
            </javadoc>
            <method name="getTransparency" type="int" line="491"/>
            <javadoc line="495">
                Returns the number of components, including alpha, in this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  This is equal to the number of color
                  components, optionally plus one, if there is an alpha component.                
                <return>
                    the number of components in this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getNumComponents" type="int" line="501"/>
            <javadoc line="505">
                Returns the number of color components in this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  This is the number of components returned by{@link ColorSpace#getNumComponents}.                
                <return>
                    the number of color components in this
                      &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
                <see>
                    ColorSpace#getNumComponents                    
                </see>
            </javadoc>
            <method name="getNumColorComponents" type="int" line="514"/>
            <method name="getRed" type="int" line="518"/>
            <javadoc line="518">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if pixel
                  values for this &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently
                  representable as a single int.  The returned value is not a
                  pre-multiplied value.  For example, if the
                  alpha is premultiplied, this method divides it out before returning
                  the value.  If the alpha value is 0, the red value is 0.                
                <param>
                    pixel a specified pixel                    
                </param>
                <return>
                    the value of the red component of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getGreen" type="int" line="533"/>
            <javadoc line="533">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if pixel
                  values for this &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently
                  representable as a single int.  The returned value is a non
                  pre-multiplied value.  For example, if the alpha is premultiplied,
                  this method divides it out before returning
                  the value.  If the alpha value is 0, the green value is 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the green component of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getBlue" type="int" line="548"/>
            <javadoc line="548">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
                  is done if necessary.  The pixel value is specified as an int.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if pixel values
                  for this &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable
                  as a single int.  The returned value is a non pre-multiplied
                  value, for example, if the alpha is premultiplied, this method
                  divides it out before returning the value.  If the alpha value is
                  0, the blue value is 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of the blue component of the specified pixel.                    
                </return>
            </javadoc>
            <method name="getAlpha" type="int" line="563"/>
            <javadoc line="563">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.  The pixel value is specified as an int.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if pixel
                  values for this &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently
                  representable as a single int.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the value of alpha component of the specified pixel.                    
                </return>
            </javadoc>
            <javadoc line="574">
                Returns the color/alpha components of the pixel in the default
                  RGB color model format.  A color conversion is done if necessary.
                  The pixel value is specified as an int.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; thrown if pixel values
                  for this &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable
                  as a single int.  The returned value is in a non
                  pre-multiplied format. For example, if the alpha is premultiplied,
                  this method divides it out of the color components.  If the alpha
                  value is 0, the color values are 0.                
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    the RGB value of the color/alpha components of the
                      specified pixel.                    
                </return>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="589">
                <params>
                    <param name="pixel" type="int"/>
                </params>
            </method>
            <javadoc line="596">
                Returns the red color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is
                  specified by an array of data elements of type transferType passed
                  in as an object reference.  The returned value is a non
                  pre-multiplied value.  For example, if alpha is premultiplied,
                  this method divides it out before returning
                  the value.  If the alpha value is 0, the red value is 0.
                  If &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type
                  transferType, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value for
                  this &lt;code&gt;ColorModel&lt;/code&gt;.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be
                  thrown.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class, any instance
                  must be an instance of a subclass.  Subclasses inherit the
                  implementation of this method and if they don&apos;t override it, this
                  method throws an exception if the subclass uses a
                  &lt;code&gt;transferType&lt;/code&gt; other than
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                
                <param>
                    inData an array of pixel values                    
                </param>
                <return>
                    the value of the red component of the specified pixel.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      &lt;code&gt;tranferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getRed" type="int" line="632">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="633"/>
                <declaration name="bdata" type="byte" line="636"/>
                <declaration name="sdata" type="short" line="641"/>
                <declaration name="idata" type="int" line="646"/>
                <scope line="654"/>
                <scope line="657"/>
            </method>
            <javadoc line="663">
                Returns the green color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is
                  specified by an array of data elements of type transferType passed
                  in as an object reference.  The returned value will be a non
                  pre-multiplied value.  For example, if the alpha is premultiplied,
                  this method divides it out before returning the value.  If the
                  alpha value is 0, the green value is 0.  If &lt;code&gt;inData&lt;/code&gt; is
                  not a primitive array of type transferType, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value for
                  this &lt;code&gt;ColorModel&lt;/code&gt;.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be
                  thrown.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class, any instance
                  must be an instance of a subclass.  Subclasses inherit the
                  implementation of this method and if they don&apos;t override it, this
                  method throws an exception if the subclass uses a
                  &lt;code&gt;transferType&lt;/code&gt; other than
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                
                <param>
                    inData an array of pixel values                    
                </param>
                <return>
                    the value of the green component of the specified pixel.                    
                </return>
                <throws>
                    &lt;code&gt;ClassCastException&lt;/code&gt; if &lt;code&gt;inData&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if
                      &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if this
                      &lt;code&gt;tranferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getGreen" type="int" line="699">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="700"/>
                <declaration name="bdata" type="byte" line="703"/>
                <declaration name="sdata" type="short" line="708"/>
                <declaration name="idata" type="int" line="713"/>
                <scope line="721"/>
                <scope line="724"/>
            </method>
            <javadoc line="730">
                Returns the blue color component for the specified pixel, scaled
                  from 0 to 255 in the default RGB &lt;code&gt;ColorSpace&lt;/code&gt;, sRGB.  A
                  color conversion is done if necessary.  The pixel value is
                  specified by an array of data elements of type transferType passed
                  in as an object reference.  The returned value is a non
                  pre-multiplied value.  For example, if the alpha is premultiplied,
                  this method divides it out before returning the value.  If the
                  alpha value is 0, the blue value will be 0.  If
                  &lt;code&gt;inData&lt;/code&gt; is not a primitive array of type transferType,
                  a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be
                  thrown.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class, any instance
                  must be an instance of a subclass.  Subclasses inherit the
                  implementation of this method and if they don&apos;t override it, this
                  method throws an exception if the subclass uses a
                  &lt;code&gt;transferType&lt;/code&gt; other than
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                
                <param>
                    inData an array of pixel values                    
                </param>
                <return>
                    the value of the blue component of the specified pixel.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      &lt;code&gt;tranferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getBlue" type="int" line="766">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="767"/>
                <declaration name="bdata" type="byte" line="770"/>
                <declaration name="sdata" type="short" line="775"/>
                <declaration name="idata" type="int" line="780"/>
                <scope line="788"/>
                <scope line="791"/>
            </method>
            <javadoc line="797">
                Returns the alpha component for the specified pixel, scaled
                  from 0 to 255.  The pixel value is specified by an array of data
                  elements of type transferType passed in as an object reference.
                  If inData is not a primitive array of type transferType, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value for
                  this &lt;code&gt;ColorModel&lt;/code&gt;.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be
                  thrown.  Since
                  &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class, any instance
                  must be an instance of a subclass.  Subclasses inherit the
                  implementation of this method and if they don&apos;t override it, this
                  method throws an exception if the subclass uses a
                  &lt;code&gt;transferType&lt;/code&gt; other than
                  &lt;code&gt;DataBuffer.TYPE_BYTE&lt;/code&gt;,
                  &lt;code&gt;DataBuffer.TYPE_USHORT&lt;/code&gt;, or
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;.                
                <param>
                    inData the specified pixel                    
                </param>
                <return>
                    the alpha component of the specified pixel, scaled from
                      0 to 255.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;inData&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      &lt;code&gt;tranferType&lt;/code&gt; is not supported by this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getAlpha" type="int" line="829">
                <params>
                    <param name="inData" type="Object"/>
                </params>
                <declaration name="pixel" type="int" line="830"/>
                <declaration name="bdata" type="byte" line="833"/>
                <declaration name="sdata" type="short" line="838"/>
                <declaration name="idata" type="int" line="843"/>
                <scope line="851"/>
                <scope line="854"/>
            </method>
            <javadoc line="860">
                Returns the color/alpha components for the specified pixel in the
                  default RGB color model format.  A color conversion is done if
                  necessary.  The pixel value is specified by an array of data
                  elements of type transferType passed in as an object reference.
                  If inData is not a primitive array of type transferType, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;inData&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.
                  The returned value will be in a non pre-multiplied format, i.e. if
                  the alpha is premultiplied, this method will divide it out of the
                  color components (if the alpha value is 0, the color values will be 0).                
                <param>
                    inData the specified pixel                    
                </param>
                <return>
                    the color and alpha components of the specified pixel.                    
                </return>
                <see>
                    ColorModel#getRGBdefault                    
                </see>
            </javadoc>
            <method name="getRGB" type="int" line="877">
                <params>
                    <param name="inData" type="Object"/>
                </params>
            </method>
            <javadoc line="884">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an integer pixel representation in
                  the default RGB color model.
                  This array can then be passed to the{@link WritableRaster#setDataElements} method of
                  a {@link WritableRaster} object.  If the pixel variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  If
                  &lt;code&gt;pixel&lt;/code&gt; is not
                  &lt;code&gt;null&lt;/code&gt;, it must be a primitive array of type
                  &lt;code&gt;transferType&lt;/code&gt;; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;pixel&lt;/code&gt; is
                  not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;. The pixel array is returned.
                  If this &lt;code&gt;transferType&lt;/code&gt; is not supported, a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be
                  thrown.  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    rgb the integer pixel representation in the default RGB
                      color model                    
                </param>
                <param>
                    pixel the specified pixel                    
                </param>
                <return>
                    an array representation of the specified pixel in this
                      &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="921">
                <params>
                    <param name="rgb" type="int"/>
                    <param name="pixel" type="Object"/>
                </params>
            </method>
            <javadoc line="926">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel value is specified as
                  an &lt;code&gt;int&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  will be thrown if pixel values for this &lt;code&gt;ColorModel&lt;/code&gt; are
                  not conveniently representable as a single &lt;code&gt;int&lt;/code&gt; or if
                  color component values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                  conveniently representable in the unnormalized form.
                  For example, this method can be used to retrieve the
                  components for a specific pixel value in a
                  &lt;code&gt;DirectColorModel&lt;/code&gt;.  If the components array is
                  &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  The
                  components array will be returned.  Color/alpha components are
                  stored in the components array starting at &lt;code&gt;offset&lt;/code&gt;
                  (even if the array is allocated by this method).  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if  the
                  components array is not &lt;code&gt;null&lt;/code&gt; and is not large
                  enough to hold all the color and alpha components (starting at offset).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components the array to receive the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start storing the color and alpha components                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getComponents" type="int[]" line="958">
                <params>
                    <param name="pixel" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="963">
                Returns an array of unnormalized color/alpha components given a pixel
                  in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel value is specified by
                  an array of data elements of type transferType passed in as an
                  object reference.  If &lt;code&gt;pixel&lt;/code&gt; is not a primitive array
                  of type transferType, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown if color
                  component values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                  conveniently representable in the unnormalized form.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is
                  thrown if &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel
                  value for this &lt;code&gt;ColorModel&lt;/code&gt;.
                  This method can be used to retrieve the components for a specific
                  pixel value in any &lt;code&gt;ColorModel&lt;/code&gt;.  If the components
                  array is &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  The
                  components array will be returned.  Color/alpha components are
                  stored in the &lt;code&gt;components&lt;/code&gt; array starting at
                  &lt;code&gt;offset&lt;/code&gt; (even if the array is allocated by this
                  method).  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  is thrown if  the components array is not &lt;code&gt;null&lt;/code&gt; and is
                  not large enough to hold all the color and alpha components
                  (starting at &lt;code&gt;offset&lt;/code&gt;).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    components an array that receives the color and alpha
                      components of the specified pixel                    
                </param>
                <param>
                    offset the index into the &lt;code&gt;components&lt;/code&gt; array at
                      which to begin storing the color and alpha components of the
                      specified pixel                    
                </param>
                <return>
                    an array containing the color and alpha components of the
                      specified pixel starting at the specified offset.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getComponents" type="int[]" line="1000">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="1005">
                Returns an array of all of the color/alpha components in unnormalized
                  form, given a normalized component array.  Unnormalized components
                  are unsigned integral values between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where
                  n is the number of bits for a particular component.  Normalized
                  components are float values between a per component minimum and
                  maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  will be thrown if color component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable in the
                  unnormalized form.  If the
                  &lt;code&gt;components&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;components&lt;/code&gt; array will
                  be returned.  Color/alpha components are stored in the
                  &lt;code&gt;components&lt;/code&gt; array starting at &lt;code&gt;offset&lt;/code&gt; (even
                  if the array is allocated by this method). An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt; and is not
                  large enough to hold all the color and alpha
                  components (starting at &lt;code&gt;offset&lt;/code&gt;).  An
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the
                  &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold
                  all the color and alpha components starting at
                  &lt;code&gt;normOffset&lt;/code&gt;.                
                <param>
                    normComponents an array containing normalized components                    
                </param>
                <param>
                    normOffset the offset into the &lt;code&gt;normComponents&lt;/code&gt;
                      array at which to start retrieving normalized components                    
                </param>
                <param>
                    components an array that receives the components from
                      &lt;code&gt;normComponents&lt;/code&gt;                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin storing normalized components from
                      &lt;code&gt;normComponents&lt;/code&gt;                    
                </param>
                <return>
                    an array containing unnormalized color and alpha
                      components.                    
                </return>
                <throws>
                    IllegalArgumentException If the component values for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; are not conveniently representable in the
                      unnormalized form.                    
                </throws>
                <throws>
                    IllegalArgumentException if the length of
                      &lt;code&gt;normComponents&lt;/code&gt; minus &lt;code&gt;normOffset&lt;/code&gt;
                      is less than &lt;code&gt;numComponents&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if the
                      constructor of this &lt;code&gt;ColorModel&lt;/code&gt; called the
                      &lt;code&gt;super(bits)&lt;/code&gt; constructor, but did not
                      override this method.  See the constructor,{@link #ColorModel(int)}.                    
                </throws>
            </javadoc>
            <method name="getUnnormalizedComponents" type="int[]" line="1053">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="1055">
                    Make sure that someone isn&apos;t using a custom color model
                     that called the super(bits) constructor.                    
                </comment>
                <scope line="1056"/>
                <scope line="1061"/>
                <scope line="1066"/>
                <scope line="1073"/>
                <scope line="1077">
                    <declaration name="normAlpha" type="float" line="1078"/>
                    <scope line="1079"/>
                </scope>
                <scope line="1087">
                    <scope line="1088"/>
                </scope>
            </method>
            <javadoc line="1097">
                Returns an array of all of the color/alpha components in normalized
                  form, given an unnormalized component array.  Unnormalized components
                  are unsigned integral values between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where
                  n is the number of bits for a particular component.  Normalized
                  components are float values between a per component minimum and
                  maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  will be thrown if color component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable in the
                  unnormalized form.  If the
                  &lt;code&gt;normComponents&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;normComponents&lt;/code&gt; array
                  will be returned.  Color/alpha components are stored in the
                  &lt;code&gt;normComponents&lt;/code&gt; array starting at
                  &lt;code&gt;normOffset&lt;/code&gt; (even if the array is allocated by this
                  method).  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt;
                  and is not large enough to hold all the color and alpha components
                  (starting at &lt;code&gt;normOffset&lt;/code&gt;).  An
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the
                  &lt;code&gt;components&lt;/code&gt; array is not large enough to hold all the
                  color and alpha components starting at &lt;code&gt;offset&lt;/code&gt;.
                  &lt;p&gt;
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  The default implementation
                  of this method in this abstract class assumes that component values
                  for this class are conveniently representable in the unnormalized
                  form.  Therefore, subclasses which may
                  have instances which do not support the unnormalized form must
                  override this method.                
                <param>
                    components an array containing unnormalized components                    
                </param>
                <param>
                    offset the offset into the &lt;code&gt;components&lt;/code&gt; array at
                      which to start retrieving unnormalized components                    
                </param>
                <param>
                    normComponents an array that receives the normalized components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at
                      which to begin storing normalized components                    
                </param>
                <return>
                    an array containing normalized color and alpha
                      components.                    
                </return>
                <throws>
                    IllegalArgumentException If the component values for this
                      &lt;CODE&gt;ColorModel&lt;/CODE&gt; are not conveniently representable in the
                      unnormalized form.                    
                </throws>
                <throws>
                    UnsupportedOperationException if the
                      constructor of this &lt;code&gt;ColorModel&lt;/code&gt; called the
                      &lt;code&gt;super(bits)&lt;/code&gt; constructor, but did not
                      override this method.  See the constructor,{@link #ColorModel(int)}.                    
                </throws>
                <throws>
                    UnsupportedOperationException if this method is unable
                      to determine the number of bits per component                    
                </throws>
            </javadoc>
            <method name="getNormalizedComponents" type="float[]" line="1149">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <comment line="1151">
                    Make sure that someone isn&apos;t using a custom color model
                     that called the super(bits) constructor.                    
                </comment>
                <comment line="1175">
                    Normalized coordinates are non premultiplied                    
                </comment>
                <scope line="1152"/>
                <scope line="1156"/>
                <scope line="1162"/>
                <scope line="1169"/>
                <scope line="1173">
                    <declaration name="normAlpha" type="float" line="1175"/>
                    <scope line="1177">
                        <scope line="1178"/>
                    </scope>
                    <scope line="1183">
                        <scope line="1184"/>
                    </scope>
                </scope>
                <scope line="1190">
                    <scope line="1191"/>
                </scope>
            </method>
            <javadoc line="1200">
                Returns a pixel value represented as an &lt;code&gt;int&lt;/code&gt; in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of unnormalized color/alpha
                  components.  This method will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable as a
                  single &lt;code&gt;int&lt;/code&gt; or if color component values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable in the
                  unnormalized form.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if  the
                  &lt;code&gt;components&lt;/code&gt; array is not large enough to hold all the
                  color and alpha components (starting at &lt;code&gt;offset&lt;/code&gt;).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving the color and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; pixel value in this
                      &lt;code&gt;ColorModel&lt;/code&gt; corresponding to the specified components.                    
                </return>
                <throws>
                    IllegalArgumentException if
                      pixel values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                      conveniently representable as a single &lt;code&gt;int&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if
                      component values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                      conveniently representable in the unnormalized form                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      the &lt;code&gt;components&lt;/code&gt; array is not large enough to
                      hold all of the color and alpha components starting at
                      &lt;code&gt;offset&lt;/code&gt;                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getDataElement" type="int" line="1235">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="1240">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of unnormalized color/alpha
                  components.  This array can then be passed to the
                  &lt;code&gt;setDataElements&lt;/code&gt; method of a &lt;code&gt;WritableRaster&lt;/code&gt;
                  object.  This method will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  if color component values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                  conveniently representable in the unnormalized form.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;components&lt;/code&gt; array is not large enough to hold
                  all the color and alpha components (starting at
                  &lt;code&gt;offset&lt;/code&gt;).  If the &lt;code&gt;obj&lt;/code&gt; variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  If
                  &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it must be a primitive
                  array of type transferType; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    components an array of unnormalized color and alpha
                      components                    
                </param>
                <param>
                    offset the index into &lt;code&gt;components&lt;/code&gt; at which to
                      begin retrieving color and alpha components                    
                </param>
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; representing an array of color
                      and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; representing an array of color and
                      alpha components.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;obj&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt; or the &lt;code&gt;components&lt;/code&gt;
                      array is not large enough to hold all of the color and alpha
                      components starting at &lt;code&gt;offset&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if
                      component values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                      conveniently representable in the unnormalized form                    
                </throws>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
            </javadoc>
            <method name="getDataElements" type="Object" line="1286">
                <params>
                    <param name="components" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="1291">
                Returns a pixel value represented as an &lt;code&gt;int&lt;/code&gt; in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of normalized color/alpha
                  components.  This method will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if pixel values for this
                  &lt;code&gt;ColorModel&lt;/code&gt; are not conveniently representable as a
                  single &lt;code&gt;int&lt;/code&gt;.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if  the
                  &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold all the
                  color and alpha components (starting at &lt;code&gt;normOffset&lt;/code&gt;).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  The default implementation
                  of this method in this abstract class first converts from the
                  normalized form to the unnormalized form and then calls
                  &lt;code&gt;getDataElement(int[], int)&lt;/code&gt;.  Subclasses which may
                  have instances which do not support the unnormalized form must
                  override this method.                
                <param>
                    normComponents an array of normalized color and alpha
                      components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at which to
                      begin retrieving the color and alpha components                    
                </param>
                <return>
                    an &lt;code&gt;int&lt;/code&gt; pixel value in this
                      &lt;code&gt;ColorModel&lt;/code&gt; corresponding to the specified components.                    
                </return>
                <throws>
                    IllegalArgumentException if
                      pixel values for this &lt;code&gt;ColorModel&lt;/code&gt; are not
                      conveniently representable as a single &lt;code&gt;int&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      the &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to
                      hold all of the color and alpha components starting at
                      &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDataElement" type="int" line="1323">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <declaration name="components" type="int" line="1324"/>
            </method>
            <javadoc line="1329">
                Returns a data element array representation of a pixel in this
                  &lt;code&gt;ColorModel&lt;/code&gt;, given an array of normalized color/alpha
                  components.  This array can then be passed to the
                  &lt;code&gt;setDataElements&lt;/code&gt; method of a &lt;code&gt;WritableRaster&lt;/code&gt;
                  object.  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not large enough to hold
                  all the color and alpha components (starting at
                  &lt;code&gt;normOffset&lt;/code&gt;).  If the &lt;code&gt;obj&lt;/code&gt; variable is
                  &lt;code&gt;null&lt;/code&gt;, a new array will be allocated.  If
                  &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it must be a primitive
                  array of type transferType; otherwise, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.  An
                  &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  The default implementation
                  of this method in this abstract class first converts from the
                  normalized form to the unnormalized form and then calls
                  &lt;code&gt;getDataElement(int[], int, Object)&lt;/code&gt;.  Subclasses which may
                  have instances which do not support the unnormalized form must
                  override this method.                
                <param>
                    normComponents an array of normalized color and alpha
                      components                    
                </param>
                <param>
                    normOffset the index into &lt;code&gt;normComponents&lt;/code&gt; at which to
                      begin retrieving color and alpha components                    
                </param>
                <param>
                    obj a primitive data array to hold the returned pixel                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; which is a primitive data array
                      representation of a pixel                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;obj&lt;/code&gt;
                      is not a primitive array of type &lt;code&gt;transferType&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;obj&lt;/code&gt; is not large enough to hold a pixel value
                      for this &lt;code&gt;ColorModel&lt;/code&gt; or the &lt;code&gt;normComponents&lt;/code&gt;
                      array is not large enough to hold all of the color and alpha
                      components starting at &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <see>
                    WritableRaster#setDataElements                    
                </see>
                <see>
                    SampleModel#setDataElements                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDataElements" type="Object" line="1371">
                <params>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="components" type="int" line="1372"/>
            </method>
            <javadoc line="1377">
                Returns an array of all of the color/alpha components in normalized
                  form, given a pixel in this &lt;code&gt;ColorModel&lt;/code&gt;.  The pixel
                  value is specified by an array of data elements of type transferType
                  passed in as an object reference.  If pixel is not a primitive array
                  of type transferType, a &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
                  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown if
                  &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel value for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Normalized components are float values between a per component minimum
                  and maximum specified by the &lt;code&gt;ColorSpace&lt;/code&gt; object for this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  If the
                  &lt;code&gt;normComponents&lt;/code&gt; array is &lt;code&gt;null&lt;/code&gt;, a new array
                  will be allocated.  The &lt;code&gt;normComponents&lt;/code&gt; array
                  will be returned.  Color/alpha components are stored in the
                  &lt;code&gt;normComponents&lt;/code&gt; array starting at
                  &lt;code&gt;normOffset&lt;/code&gt; (even if the array is allocated by this
                  method).  An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is thrown
                  if the &lt;code&gt;normComponents&lt;/code&gt; array is not &lt;code&gt;null&lt;/code&gt;
                  and is not large enough to hold all the color and alpha components
                  (starting at &lt;code&gt;normOffset&lt;/code&gt;).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  The default implementation
                  of this method in this abstract class first retrieves color and alpha
                  components in the unnormalized form using
                  &lt;code&gt;getComponents(Object, int[], int)&lt;/code&gt; and then calls
                  &lt;code&gt;getNormalizedComponents(int[], int, float[], int)&lt;/code&gt;.
                  Subclasses which may
                  have instances which do not support the unnormalized form must
                  override this method.                
                <param>
                    pixel the specified pixel                    
                </param>
                <param>
                    normComponents an array to receive the normalized components                    
                </param>
                <param>
                    normOffset the offset into the &lt;code&gt;normComponents&lt;/code&gt;
                      array at which to start storing normalized components                    
                </param>
                <return>
                    an array containing normalized color and alpha
                      components.                    
                </return>
                <throws>
                    ClassCastException if &lt;code&gt;pixel&lt;/code&gt; is not a primitive
                      array of type transferType                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;normComponents&lt;/code&gt; is not large enough to hold all
                      color and alpha components starting at &lt;code&gt;normOffset&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if
                      &lt;code&gt;pixel&lt;/code&gt; is not large enough to hold a pixel
                      value for this &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </throws>
                <throws>
                    UnsupportedOperationException if the
                      constructor of this &lt;code&gt;ColorModel&lt;/code&gt; called the
                      &lt;code&gt;super(bits)&lt;/code&gt; constructor, but did not
                      override this method.  See the constructor,{@link #ColorModel(int)}.                    
                </throws>
                <throws>
                    UnsupportedOperationException if this method is unable
                      to determine the number of bits per component                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNormalizedComponents" type="float[]" line="1432">
                <params>
                    <param name="pixel" type="Object"/>
                    <param name="normComponents" type="float[]"/>
                    <param name="normOffset" type="int"/>
                </params>
                <declaration name="components" type="int" line="1433"/>
            </method>
            <javadoc line="1438">
                Tests if the specified &lt;code&gt;Object&lt;/code&gt; is an instance of
                  &lt;code&gt;ColorModel&lt;/code&gt; and if it equals this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <param>
                    obj the &lt;code&gt;Object&lt;/code&gt; to test for equality                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Object&lt;/code&gt;
                      is an instance of &lt;code&gt;ColorModel&lt;/code&gt; and equals this
                      &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1447">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="1448"/>
                <declaration name="cm" type="ColorModel" line="1451"/>
                <scope line="1453"/>
                <scope line="1461"/>
                <declaration name="nb" type="int[]" line="1465"/>
                <scope line="1467">
                    <scope line="1468">
                        <scope line="1469"/>
                    </scope>
                </scope>
                <scope line="1473"/>
            </method>
            <javadoc line="1480">
                Returns the hash code for this ColorModel.                
                <return>
                    a hash code for this ColorModel.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1485">
                <declaration name="result" type="int" line="1487"/>
                <scope line="1495">
                    <scope line="1496"/>
                </scope>
            </method>
            <javadoc line="1504">
                Returns the &lt;code&gt;ColorSpace&lt;/code&gt; associated with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;ColorSpace&lt;/code&gt; of this
                      &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getColorSpace" type="ColorSpace" line="1510"/>
            <javadoc line="1514">
                Forces the raster data to match the state specified in the
                  &lt;code&gt;isAlphaPremultiplied&lt;/code&gt; variable, assuming the data is
                  currently correctly described by this &lt;code&gt;ColorModel&lt;/code&gt;.  It
                  may multiply or divide the color raster data by alpha, or do
                  nothing if the data is in the correct state.  If the data needs to
                  be coerced, this method will also return an instance of this
                  &lt;code&gt;ColorModel&lt;/code&gt; with the &lt;code&gt;isAlphaPremultiplied&lt;/code&gt;
                  flag set appropriately.  This method will throw a
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if it is not supported
                  by this &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    raster the &lt;code&gt;WritableRaster&lt;/code&gt; data                    
                </param>
                <param>
                    isAlphaPremultiplied &lt;code&gt;true&lt;/code&gt; if the alpha is
                      premultiplied; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <return>
                    a &lt;code&gt;ColorModel&lt;/code&gt; object that represents the
                      coerced data.                    
                </return>
            </javadoc>
            <method name="coerceData" type="ColorModel" line="1536">
                <params>
                    <param name="raster" type="WritableRaster"/>
                    <param name="isAlphaPremultiplied" type="boolean"/>
                </params>
            </method>
            <javadoc line="1541">
                Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it is
                  not.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    raster the {@link Raster} object to test for compatibility                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;raster&lt;/code&gt; is compatible
                      with this &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method has not been implemented for this
                      &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="isCompatibleRaster" type="boolean" line="1556">
                <params>
                    <param name="raster" type="Raster"/>
                </params>
            </method>
            <javadoc line="1561">
                Creates a &lt;code&gt;WritableRaster&lt;/code&gt; with the specified width and
                  height that has a data layout (&lt;code&gt;SampleModel&lt;/code&gt;) compatible
                  with this &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    w the width to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <param>
                    h the height to apply to the new &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;WritableRaster&lt;/code&gt; object with the specified
                      width and height.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <see>
                    WritableRaster                    
                </see>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1578">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="1583">
                Creates a &lt;code&gt;SampleModel&lt;/code&gt; with the specified width and
                  height that has a data layout compatible with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    w the width to apply to the new &lt;code&gt;SampleModel&lt;/code&gt;                    
                </param>
                <param>
                    h the height to apply to the new &lt;code&gt;SampleModel&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;SampleModel&lt;/code&gt; object with the specified
                      width and height.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="createCompatibleSampleModel" type="SampleModel" line="1599">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="1604">
                Checks if the &lt;code&gt;SampleModel&lt;/code&gt; is compatible with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class,
                  any instance is an instance of a subclass.  Subclasses must
                  override this method since the implementation in this abstract
                  class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.                
                <param>
                    sm the specified &lt;code&gt;SampleModel&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;SampleModel&lt;/code&gt;
                      is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <throws>
                    UnsupportedOperationException if this
                      method is not supported by this &lt;code&gt;ColorModel&lt;/code&gt;                    
                </throws>
                <see>
                    SampleModel                    
                </see>
            </javadoc>
            <method name="isCompatibleSampleModel" type="boolean" line="1618">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
            </method>
            <javadoc line="1623">
                Disposes of system resources associated with this
                  &lt;code&gt;ColorModel&lt;/code&gt; once this &lt;code&gt;ColorModel&lt;/code&gt; is no
                  longer referenced.                
            </javadoc>
            <method name="finalize" type="void" line="1628"/>
            <javadoc line="1632">
                Returns a &lt;code&gt;Raster&lt;/code&gt; representing the alpha channel of an
                  image, extracted from the input &lt;code&gt;Raster&lt;/code&gt;, provided that
                  pixel values of this &lt;code&gt;ColorModel&lt;/code&gt; represent color and
                  alpha information as separate spatial bands (e.g.{@link ComponentColorModel} and &lt;code&gt;DirectColorModel&lt;/code&gt;).
                  This method assumes that &lt;code&gt;Raster&lt;/code&gt; objects associated
                  with such a &lt;code&gt;ColorModel&lt;/code&gt; store the alpha band, if
                  present, as the last band of image data.  Returns &lt;code&gt;null&lt;/code&gt;
                  if there is no separate spatial alpha channel associated with this
                  &lt;code&gt;ColorModel&lt;/code&gt;.  If this is an
                  &lt;code&gt;IndexColorModel&lt;/code&gt; which has alpha in the lookup table,
                  this method will return &lt;code&gt;null&lt;/code&gt; since
                  there is no spatially discrete alpha channel.
                  This method will create a new &lt;code&gt;Raster&lt;/code&gt; (but will share
                  the data array).
                  Since &lt;code&gt;ColorModel&lt;/code&gt; is an abstract class, any instance
                  is an instance of a subclass.  Subclasses must override this
                  method to get any behavior other than returning &lt;code&gt;null&lt;/code&gt;
                  because the implementation in this abstract class returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    raster the specified &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Raster&lt;/code&gt; representing the alpha channel of
                      an image, obtained from the specified &lt;code&gt;Raster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAlphaRaster" type="WritableRaster" line="1657">
                <params>
                    <param name="raster" type="WritableRaster"/>
                </params>
            </method>
            <javadoc line="1661">
                Returns the &lt;code&gt;String&lt;/code&gt; representation of the contents of
                  this &lt;code&gt;ColorModel&lt;/code&gt;object.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; representing the contents of this
                      &lt;code&gt;ColorModel&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1667"/>
            <method name="getDefaultTransferType" type="int" line="1677">
                <params>
                    <param name="pixel_bits" type="int"/>
                </params>
                <scope line="1678"/>
                <scope line="1680"/>
                <scope line="1682"/>
                <scope line="1684"/>
            </method>
            <declaration name="l8Tos8" type="byte[]" line="1689"/>
            <declaration name="s8Tol8" type="byte[]" line="1690"/>
            <declaration name="l16Tos8" type="byte[]" line="1691"/>
            <declaration name="s8Tol16" type="short[]" line="1692"/>
            <declaration name="g8Tos8Map" type="Map" line="1695"/>
            <declaration name="lg16Toog8Map" type="Map" line="1696"/>
            <declaration name="g16Tos8Map" type="Map" line="1697"/>
            <declaration name="lg16Toog16Map" type="Map" line="1698"/>
            <method name="isLinearRGBspace" type="boolean" line="1700">
                <params>
                    <param name="cs" type="ColorSpace"/>
                </params>
                <comment line="1702">
                    Note: CMM.LINEAR_RGBspace will be null if the linear
                     RGB space has not been created yet.                    
                </comment>
            </method>
            <method name="isLinearGRAYspace" type="boolean" line="1706">
                <params>
                    <param name="cs" type="ColorSpace"/>
                </params>
                <comment line="1708">
                    Note: CMM.GRAYspace will be null if the linear
                     gray space has not been created yet.                    
                </comment>
            </method>
            <method name="getLinearRGB8TosRGB8LUT" type="byte[]" line="1712">
                <comment line="1717">
                    algorithm for linear RGB to nonlinear sRGB conversion
                     is from the IEC 61966-2-1 International Standard,
                     Colour Management - Default RGB colour space - sRGB,
                     First Edition, 1999-10,
                     avaiable for order at http:www.iec.ch                    
                </comment>
                <scope line="1713">
                    <declaration name="input" type="float" line="1715"/>
                    <scope line="1721">
                        <scope line="1723"/>
                        <scope line="1725"/>
                    </scope>
                </scope>
            </method>
            <method name="getsRGB8ToLinearRGB8LUT" type="byte[]" line="1735">
                <comment line="1740">
                    algorithm from IEC 61966-2-1 International Standard                    
                </comment>
                <scope line="1736">
                    <declaration name="input" type="float" line="1738"/>
                    <scope line="1740">
                        <scope line="1742"/>
                        <scope line="1744"/>
                    </scope>
                </scope>
            </method>
            <method name="getLinearRGB16TosRGB8LUT" type="byte[]" line="1753">
                <comment line="1758">
                    algorithm from IEC 61966-2-1 International Standard                    
                </comment>
                <scope line="1754">
                    <declaration name="input" type="float" line="1756"/>
                    <scope line="1758">
                        <scope line="1760"/>
                        <scope line="1762"/>
                    </scope>
                </scope>
            </method>
            <method name="getsRGB8ToLinearRGB16LUT" type="short[]" line="1772">
                <comment line="1777">
                    algorithm from IEC 61966-2-1 International Standard                    
                </comment>
                <scope line="1773">
                    <declaration name="input" type="float" line="1775"/>
                    <scope line="1777">
                        <scope line="1779"/>
                        <scope line="1781"/>
                    </scope>
                </scope>
            </method>
            <method name="getGray8TosRGB8LUT" type="byte[]" line="1797">
                <params>
                    <param name="grayCS" type="ICC_ColorSpace"/>
                </params>
                <comment line="1823">
                    All three components of tmp should be equal, since
                     the input color space to colorConvert is a gray scale
                     space.  However, there are slight anomalies in the results.
                     Copy tmp starting at index 2, since colorConvert seems
                     to be slightly more accurate for the third component!                    
                </comment>
                <scope line="1798"/>
                <scope line="1801">
                    <declaration name="g8Tos8LUT" type="byte[]" line="1802"/>
                    <scope line="1803"/>
                </scope>
                <declaration name="g8Tos8LUT" type="byte[]" line="1807"/>
                <scope line="1808"/>
                <declaration name="transformList" type="ColorTransform[]" line="1811"/>
                <declaration name="mdl" type="PCMM" line="1812"/>
                <declaration name="srgbCS" type="ICC_ColorSpace" line="1813"/>
                <declaration name="t" type="ColorTransform" line="1819"/>
                <declaration name="tmp" type="byte[]" line="1820"/>
                <scope line="1821"/>
                <scope line="1829"/>
            </method>
            <method name="getLinearGray16ToOtherGray8LUT" type="byte[]" line="1841">
                <params>
                    <param name="grayCS" type="ICC_ColorSpace"/>
                </params>
                <comment line="1865">
                    scale unsigned short (0 - 65535) to unsigned byte (0 - 255)                    
                </comment>
                <scope line="1842">
                    <declaration name="lg16Toog8LUT" type="byte[]" line="1843"/>
                    <scope line="1844"/>
                </scope>
                <declaration name="tmp" type="short[]" line="1848"/>
                <scope line="1849"/>
                <declaration name="transformList" type="ColorTransform[]" line="1852"/>
                <declaration name="mdl" type="PCMM" line="1853"/>
                <declaration name="lgCS" type="ICC_ColorSpace" line="1854"/>
                <declaration name="t" type="ColorTransform" line="1860"/>
                <declaration name="lg16Toog8LUT" type="byte[]" line="1862"/>
                <scope line="1863"/>
                <scope line="1868"/>
            </method>
            <method name="getGray16TosRGB8LUT" type="byte[]" line="1882">
                <params>
                    <param name="grayCS" type="ICC_ColorSpace"/>
                </params>
                <comment line="1909">
                    All three components of tmp should be equal, since
                     the input color space to colorConvert is a gray scale
                     space.  However, there are slight anomalies in the results.
                     Copy tmp starting at index 2, since colorConvert seems
                     to be slightly more accurate for the third component!                    
                </comment>
                <comment line="1915">
                    scale unsigned short (0 - 65535) to unsigned byte (0 - 255)                    
                </comment>
                <scope line="1883"/>
                <scope line="1886">
                    <declaration name="g16Tos8LUT" type="byte[]" line="1887"/>
                    <scope line="1888"/>
                </scope>
                <declaration name="tmp" type="short[]" line="1892"/>
                <scope line="1893"/>
                <declaration name="transformList" type="ColorTransform[]" line="1896"/>
                <declaration name="mdl" type="PCMM" line="1897"/>
                <declaration name="srgbCS" type="ICC_ColorSpace" line="1898"/>
                <declaration name="t" type="ColorTransform" line="1904"/>
                <declaration name="g16Tos8LUT" type="byte[]" line="1906"/>
                <scope line="1907"/>
                <scope line="1918"/>
            </method>
            <method name="getLinearGray16ToOtherGray16LUT" type="short[]" line="1930">
                <params>
                    <param name="grayCS" type="ICC_ColorSpace"/>
                </params>
                <scope line="1931">
                    <declaration name="lg16Toog16LUT" type="short[]" line="1932"/>
                    <scope line="1933"/>
                </scope>
                <declaration name="tmp" type="short[]" line="1937"/>
                <scope line="1938"/>
                <declaration name="transformList" type="ColorTransform[]" line="1941"/>
                <declaration name="mdl" type="PCMM" line="1942"/>
                <declaration name="lgCS" type="ICC_ColorSpace" line="1943"/>
                <declaration name="t" type="ColorTransform" line="1949"/>
                <declaration name="lg16Toog16LUT" type="short[]" line="1951"/>
                <scope line="1952"/>
            </method>
        </class>
    </source>