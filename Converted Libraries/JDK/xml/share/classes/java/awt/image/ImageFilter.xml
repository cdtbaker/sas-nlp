<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.util.Hashtable"/>
        <class name="ImageFilter" line="30">
            <implements interface="ImageConsumer"/>
            <implements interface="Cloneable"/>
            <javadoc line="30">
                This class implements a filter for the set of interface methods that
                  are used to deliver data from an ImageProducer to an ImageConsumer.
                  It is meant to be used in conjunction with a FilteredImageSource
                  object to produce filtered versions of existing images.  It is a
                  base class that provides the calls needed to implement a &quot;Null filter&quot;
                  which has no effect on the data being passed through.  Filters should
                  subclass this class and override the methods which deal with the
                  data that needs to be filtered and modify it as necessary.                
                <see>
                    FilteredImageSource                    
                </see>
                <see>
                    ImageConsumer                    
                </see>
                <author>
                    Jim Graham                    
                </author>
            </javadoc>
            <declaration name="consumer" type="ImageConsumer" line="46"/>
            <javadoc line="46">
                The consumer of the particular image data stream for which this
                  instance of the ImageFilter is filtering data.  It is not
                  initialized during the constructor, but rather during the
                  getFilterInstance() method call when the FilteredImageSource
                  is creating a unique instance of this object for a particular
                  image data stream.                
                <see>
                    #getFilterInstance                    
                </see>
                <see>
                    ImageConsumer                    
                </see>
            </javadoc>
            <javadoc line="58">
                Returns a unique instance of an ImageFilter object which will
                  actually perform the filtering for the specified ImageConsumer.
                  The default implementation just clones this object.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <param>
                    ic the specified <code>ImageConsumer</code>                    
                </param>
                <return>
                    an <code>ImageFilter</code> used to perform the
                      filtering for the specified <code>ImageConsumer</code>.                    
                </return>
            </javadoc>
            <method name="getFilterInstance" type="ImageFilter" line="72">
                <params>
                    <param name="ic" type="ImageConsumer"/>
                </params>
                <declaration name="instance" type="ImageFilter" line="73"/>
            </method>
            <javadoc line="78">
                Filters the information provided in the setDimensions method
                  of the ImageConsumer interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setDimensions                    
                </see>
            </javadoc>
            <method name="setDimensions" type="void" line="89">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Passes the properties from the source object along after adding a
                  property indicating the stream of filters it has been run through.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <param>
                    props the properties from the source object                    
                </param>
                <exception>
                    NullPointerException if <code>props</code> is null                    
                </exception>
            </javadoc>
            <method name="setProperties" type="void" line="106">
                <params>
                    <param name="props" type="Hashtable<?,?>"/>
                </params>
                <declaration name="p" type="Hashtable&lt;Object,Object&gt;" line="107"/>
                <declaration name="o" type="Object" line="108"/>
                <scope line="109"/>
                <scope line="111"/>
            </method>
            <javadoc line="117">
                Filter the information provided in the setColorModel method
                  of the ImageConsumer interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setColorModel                    
                </see>
            </javadoc>
            <method name="setColorModel" type="void" line="128">
                <params>
                    <param name="model" type="ColorModel"/>
                </params>
            </method>
            <javadoc line="132">
                Filters the information provided in the setHints method
                  of the ImageConsumer interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setHints                    
                </see>
            </javadoc>
            <method name="setHints" type="void" line="143">
                <params>
                    <param name="hints" type="int"/>
                </params>
            </method>
            <javadoc line="147">
                Filters the information provided in the setPixels method of the
                  ImageConsumer interface which takes an array of bytes.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="160">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="byte"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <javadoc line="164">
                Filters the information provided in the setPixels method of the
                  ImageConsumer interface which takes an array of integers.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#setPixels                    
                </see>
            </javadoc>
            <method name="setPixels" type="void" line="177">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="model" type="ColorModel"/>
                    <param name="pixels" type="int"/>
                    <param name="off" type="int"/>
                    <param name="scansize" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Filters the information provided in the imageComplete method of
                  the ImageConsumer interface.
                  &lt;p&gt;
                  Note: This method is intended to be called by the ImageProducer
                  of the Image whose pixels are being filtered.  Developers using
                  this class to filter pixels from an image should avoid calling
                  this method directly since that operation could interfere
                  with the filtering operation.                
                <see>
                    ImageConsumer#imageComplete                    
                </see>
            </javadoc>
            <method name="imageComplete" type="void" line="192">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Responds to a request for a TopDownLeftRight (TDLR) ordered resend
                  of the pixel data from an &lt;code&gt;ImageConsumer&lt;/code&gt;.
                  When an &lt;code&gt;ImageConsumer&lt;/code&gt; being fed
                  by an instance of this &lt;code&gt;ImageFilter&lt;/code&gt;
                  requests a resend of the data in TDLR order,
                  the &lt;code&gt;FilteredImageSource&lt;/code&gt;
                  invokes this method of the &lt;code&gt;ImageFilter&lt;/code&gt;.
                  &lt;p&gt;
                  An &lt;code&gt;ImageFilter&lt;/code&gt; subclass might override this method or not,
                  depending on if and how it can send data in TDLR order.
                  Three possibilities exist:
                  &lt;ul&gt;
                  &lt;li&gt;
                  Do not override this method.
                  This makes the subclass use the default implementation,
                  which is to
                  forward the request
                  to the indicated &lt;code&gt;ImageProducer&lt;/code&gt;
                  using this filter as the requesting &lt;code&gt;ImageConsumer&lt;/code&gt;.
                  This behavior
                  is appropriate if the filter can determine
                  that it will forward the pixels
                  in TDLR order if its upstream producer object
                  sends them in TDLR order.
                  &lt;li&gt;
                  Override the method to simply send the data.
                  This is appropriate if the filter can handle the request itself &amp;#151;
                  for example,
                  if the generated pixels have been saved in some sort of buffer.
                  &lt;li&gt;
                  Override the method to do nothing.
                  This is appropriate
                  if the filter cannot produce filtered data in TDLR order.
                  &lt;/ul&gt;                
                <see>
                    ImageProducer#requestTopDownLeftRightResend                    
                </see>
                <param>
                    ip the ImageProducer that is feeding this instance of
                      the filter - also the ImageProducer that the request should be
                      forwarded to if necessary                    
                </param>
                <exception>
                    NullPointerException if <code>ip</code> is null                    
                </exception>
            </javadoc>
            <method name="resendTopDownLeftRight" type="void" line="243">
                <params>
                    <param name="ip" type="ImageProducer"/>
                </params>
            </method>
            <javadoc line="247">
                Clones this object.                
            </javadoc>
            <method name="clone" type="Object" line="250">
                <comment line="254">
                    this shouldn&apos;t happen, since we are Cloneable                    
                </comment>
                <scope line="251"/>
                <scope line="253"/>
            </method>
        </class>
    </source>