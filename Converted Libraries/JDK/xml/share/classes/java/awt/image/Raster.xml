<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <import package="sun.awt.image.ByteInterleavedRaster"/>
        <import package="sun.awt.image.ShortInterleavedRaster"/>
        <import package="sun.awt.image.IntegerInterleavedRaster"/>
        <import package="sun.awt.image.ByteBandedRaster"/>
        <import package="sun.awt.image.ShortBandedRaster"/>
        <import package="sun.awt.image.BytePackedRaster"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <class name="Raster" line="49">
            <javadoc line="49">
                A class representing a rectangular array of pixels.  A Raster
                  encapsulates a DataBuffer that stores the sample values and a
                  SampleModel that describes how to locate a given sample value in a
                  DataBuffer.
                  &lt;p&gt;
                  A Raster defines values for pixels occupying a particular
                  rectangular area of the plane, not necessarily including (0, 0).
                  The rectangle, known as the Raster&apos;s bounding rectangle and
                  available by means of the getBounds method, is defined by minX,
                  minY, width, and height values.  The minX and minY values define
                  the coordinate of the upper left corner of the Raster.  References
                  to pixels outside of the bounding rectangle may result in an
                  exception being thrown, or may result in references to unintended
                  elements of the Raster&apos;s associated DataBuffer.  It is the user&apos;s
                  responsibility to avoid accessing such pixels.
                  &lt;p&gt;
                  A SampleModel describes how samples of a Raster
                  are stored in the primitive array elements of a DataBuffer.
                  Samples may be stored one per data element, as in a
                  PixelInterleavedSampleModel or BandedSampleModel, or packed several to
                  an element, as in a SinglePixelPackedSampleModel or
                  MultiPixelPackedSampleModel.  The SampleModel is also
                  controls whether samples are sign extended, allowing unsigned
                  data to be stored in signed Java data types such as byte, short, and
                  int.
                  &lt;p&gt;
                  Although a Raster may live anywhere in the plane, a SampleModel
                  makes use of a simple coordinate system that starts at (0, 0).  A
                  Raster therefore contains a translation factor that allows pixel
                  locations to be mapped between the Raster&apos;s coordinate system and
                  that of the SampleModel.  The translation from the SampleModel
                  coordinate system to that of the Raster may be obtained by the
                  getSampleModelTranslateX and getSampleModelTranslateY methods.
                  &lt;p&gt;
                  A Raster may share a DataBuffer with another Raster either by
                  explicit construction or by the use of the createChild and
                  createTranslatedChild methods.  Rasters created by these methods
                  can return a reference to the Raster they were created from by
                  means of the getParent method.  For a Raster that was not
                  constructed by means of a call to createTranslatedChild or
                  createChild, getParent will return null.
                  &lt;p&gt;
                  The createTranslatedChild method returns a new Raster that
                  shares all of the data of the current Raster, but occupies a
                  bounding rectangle of the same width and height but with a
                  different starting point.  For example, if the parent Raster
                  occupied the region (10, 10) to (100, 100), and the translated
                  Raster was defined to start at (50, 50), then pixel (20, 20) of the
                  parent and pixel (60, 60) of the child occupy the same location in
                  the DataBuffer shared by the two Rasters.  In the first case, (-10,
                  -10) should be added to a pixel coordinate to obtain the
                  corresponding SampleModel coordinate, and in the second case (-50,
                  -50) should be added.
                  &lt;p&gt;
                  The translation between a parent and child Raster may be
                  determined by subtracting the child&apos;s sampleModelTranslateX and
                  sampleModelTranslateY values from those of the parent.
                  &lt;p&gt;
                  The createChild method may be used to create a new Raster
                  occupying only a subset of its parent&apos;s bounding rectangle
                  (with the same or a translated coordinate system) or
                  with a subset of the bands of its parent.
                  &lt;p&gt;
                  All constructors are protected.  The correct way to create a
                  Raster is to use one of the static create methods defined in this
                  class.  These methods create instances of Raster that use the
                  standard Interleaved, Banded, and Packed SampleModels and that may
                  be processed more efficiently than a Raster created by combining
                  an externally generated SampleModel and DataBuffer.                
                <see>
                    java.awt.image.DataBuffer                    
                </see>
                <see>
                    java.awt.image.SampleModel                    
                </see>
                <see>
                    java.awt.image.PixelInterleavedSampleModel                    
                </see>
                <see>
                    java.awt.image.BandedSampleModel                    
                </see>
                <see>
                    java.awt.image.SinglePixelPackedSampleModel                    
                </see>
                <see>
                    java.awt.image.MultiPixelPackedSampleModel                    
                </see>
            </javadoc>
            <declaration name="sampleModel" type="SampleModel" line="128"/>
            <javadoc line="128">
                The SampleModel that describes how pixels from this Raster
                  are stored in the DataBuffer.                
            </javadoc>
            <declaration name="dataBuffer" type="DataBuffer" line="134"/>
            <javadoc line="134">
                The DataBuffer that stores the image data.                
            </javadoc>
            <declaration name="minX" type="int" line="137"/>
            <javadoc line="137">
                The X coordinate of the upper-left pixel of this Raster.                
            </javadoc>
            <declaration name="minY" type="int" line="140"/>
            <javadoc line="140">
                The Y coordinate of the upper-left pixel of this Raster.                
            </javadoc>
            <declaration name="width" type="int" line="143"/>
            <javadoc line="143">
                The width of this Raster.                
            </javadoc>
            <declaration name="height" type="int" line="146"/>
            <javadoc line="146">
                The height of this Raster.                
            </javadoc>
            <declaration name="sampleModelTranslateX" type="int" line="149"/>
            <javadoc line="149">
                The X translation from the coordinate space of the
                  Raster&apos;s SampleModel to that of the Raster.                
            </javadoc>
            <declaration name="sampleModelTranslateY" type="int" line="155"/>
            <javadoc line="155">
                The Y translation from the coordinate space of the
                  Raster&apos;s SampleModel to that of the Raster.                
            </javadoc>
            <declaration name="numBands" type="int" line="161"/>
            <javadoc line="161">
                The number of bands in the Raster.                
            </javadoc>
            <declaration name="numDataElements" type="int" line="164"/>
            <javadoc line="164">
                The number of DataBuffer data elements per pixel.                
            </javadoc>
            <declaration name="parent" type="Raster" line="167"/>
            <javadoc line="167">
                The parent of this Raster, or null.                
            </javadoc>
            <method name="initIDs" type="void" line="170"/>
            <scope line="171"/>
            <javadoc line="176">
                Creates a Raster based on a PixelInterleavedSampleModel with the
                  specified data type, width, height, and number of bands.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.
                  The dataType parameter should be one of the enumerated values
                  defined in the DataBuffer class.
                  &lt;p&gt; Note that interleaved &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;
                  Rasters are not supported.  To create a 1-band Raster of type
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;, use
                  Raster.createPackedRaster().
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE
                  and TYPE_USHORT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    bands     the number of bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height and number of bands.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createInterleavedRaster" type="WritableRaster" line="207">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bands" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <declaration name="bandOffsets" type="int[]" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="216">
                Creates a Raster based on a PixelInterleavedSampleModel with the
                  specified data type, width, height, scanline stride, pixel
                  stride, and band offsets.  The number of bands is inferred from
                  bandOffsets.length.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.
                  The dataType parameter should be one of the enumerated values
                  defined in the DataBuffer class.
                  &lt;p&gt; Note that interleaved &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;
                  Rasters are not supported.  To create a 1-band Raster of type
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;, use
                  Raster.createPackedRaster().
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE
                  and TYPE_USHORT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    pixelStride the pixel stride of the image data                    
                </param>
                <param>
                    bandOffsets the offsets of all bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height, scanline stride, pixel stride and band
                      offsets.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>, or
                      <code>DataBuffer.TYPE_USHORT</code>.                    
                </throws>
            </javadoc>
            <method name="createInterleavedRaster" type="WritableRaster" line="258">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="pixelStride" type="int"/>
                    <param name="bandOffsets" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <declaration name="d" type="DataBuffer" line="259"/>
                <declaration name="bands" type="int" line="260"/>
                <declaration name="maxBandOff" type="int" line="262"/>
                <scope line="263">
                    <scope line="264"/>
                </scope>
                <declaration name="size" type="int" line="268"/>
            </method>
            <javadoc line="287">
                Creates a Raster based on a BandedSampleModel with the
                  specified data type, width, height, and number of bands.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.
                  The dataType parameter should be one of the enumerated values
                  defined in the DataBuffer class.
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
                  and TYPE_INT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    bands     the number of bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height and number of bands.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>bands</code>
                      is less than 1                    
                </throws>
            </javadoc>
            <method name="createBandedRaster" type="WritableRaster" line="316">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bands" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="317"/>
                <declaration name="bankIndices" type="int[]" line="322"/>
                <declaration name="bandOffsets" type="int[]" line="323"/>
                <scope line="324"/>
            </method>
            <javadoc line="334">
                Creates a Raster based on a BandedSampleModel with the
                  specified data type, width, height, scanline stride, bank
                  indices and band offsets.  The number of bands is inferred from
                  bankIndices.length and bandOffsets.length, which must be the
                  same.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  The dataType parameter should be one of the
                  enumerated values defined in the DataBuffer class.
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
                  and TYPE_INT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    bankIndices the bank indices for each band                    
                </param>
                <param>
                    bandOffsets the offsets of all bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height, scanline stride, bank indices and band
                      offsets.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if <code>bankIndices</code>
                      or <code>bandOffsets</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="createBandedRaster" type="WritableRaster" line="375">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bankIndices" type="int"/>
                    <param name="bandOffsets" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <comment line="388">
                    Figure out the #banks and the largest band offset                    
                </comment>
                <declaration name="d" type="DataBuffer" line="376"/>
                <declaration name="bands" type="int" line="377"/>
                <scope line="379"/>
                <scope line="383"/>
                <declaration name="maxBank" type="int" line="389"/>
                <declaration name="maxBandOff" type="int" line="390"/>
                <scope line="391">
                    <scope line="392"/>
                    <scope line="395"/>
                </scope>
                <declaration name="banks" type="int" line="399"/>
                <declaration name="size" type="int" line="400"/>
            </method>
            <javadoc line="424">
                Creates a Raster based on a SinglePixelPackedSampleModel with
                  the specified data type, width, height, and band masks.
                  The number of bands is inferred from bandMasks.length.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.
                  The dataType parameter should be one of the enumerated values
                  defined in the DataBuffer class.
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
                  and TYPE_INT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    bandMasks an array containing an entry for each band                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height, and band masks.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="createPackedRaster" type="WritableRaster" line="457">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bandMasks" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <declaration name="d" type="DataBuffer" line="458"/>
            </method>
            <javadoc line="481">
                Creates a Raster based on a packed SampleModel with the
                  specified data type, width, height, number of bands, and bits
                  per band.  If the number of bands is one, the SampleModel will
                  be a MultiPixelPackedSampleModel.
                  &lt;p&gt; If the number of bands is more than one, the SampleModel
                  will be a SinglePixelPackedSampleModel, with each band having
                  bitsPerBand bits.  In either case, the requirements on dataType
                  and bitsPerBand imposed by the corresponding SampleModel must
                  be met.
                  &lt;p&gt; The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.
                  The dataType parameter should be one of the enumerated values
                  defined in the DataBuffer class.
                  &lt;p&gt; The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
                  and TYPE_INT.                
                <param>
                    dataType  the data type for storing samples                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    bands     the number of bands                    
                </param>
                <param>
                    bitsPerBand the number of bits per band                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified data type,
                      width, height, number of bands, and bits per band.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if the product of
                      <code>bitsPerBand</code> and <code>bands</code> is
                      greater than the number of bits held by
                      <code>dataType</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>bitsPerBand</code> or
                      <code>bands</code> is not greater than zero                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
            </javadoc>
            <method name="createPackedRaster" type="WritableRaster" line="529">
                <params>
                    <param name="dataType" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bands" type="int"/>
                    <param name="bitsPerBand" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <comment line="547">
                                        
                </comment>
                <declaration name="d" type="DataBuffer" line="530"/>
                <scope line="532"/>
                <scope line="537"/>
                <scope line="542">
                    <declaration name="masks" type="int[]" line="543"/>
                    <declaration name="mask" type="int" line="544"/>
                    <declaration name="shift" type="int" line="545"/>
                    <scope line="548"/>
                    <scope line="564"/>
                </scope>
                <scope line="571">
                    <declaration name="fw" type="double" line="572"/>
                </scope>
            </method>
            <javadoc line="595">
                Creates a Raster based on a PixelInterleavedSampleModel with the
                  specified DataBuffer, width, height, scanline stride, pixel
                  stride, and band offsets.  The number of bands is inferred from
                  bandOffsets.length.  The upper left corner of the Raster
                  is given by the location argument.  If location is null, (0, 0)
                  will be used.
                  &lt;p&gt; Note that interleaved &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;
                  Rasters are not supported.  To create a 1-band Raster of type
                  &lt;code&gt;DataBuffer.TYPE_INT&lt;/code&gt;, use
                  Raster.createPackedRaster().                
                <param>
                    dataBuffer the <code>DataBuffer</code> that contains the
                      image data                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    pixelStride the pixel stride of the image data                    
                </param>
                <param>
                    bandOffsets the offsets of all bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified
                      <code>DataBuffer</code>, width, height, scanline stride,
                      pixel stride and band offsets.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>                    
                </throws>
                <throws>
                    RasterFormatException if <code>dataBuffer</code> has more
                      than one bank.                    
                </throws>
                <throws>
                    NullPointerException if <code>dataBuffer</code> is null                    
                </throws>
            </javadoc>
            <method name="createInterleavedRaster" type="WritableRaster" line="635">
                <params>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="pixelStride" type="int"/>
                    <param name="bandOffsets" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="636"/>
                <scope line="639"/>
                <declaration name="dataType" type="int" line="642"/>
                <declaration name="csm" type="PixelInterleavedSampleModel" line="644"/>
            </method>
            <javadoc line="662">
                Creates a Raster based on a BandedSampleModel with the
                  specified DataBuffer, width, height, scanline stride, bank
                  indices, and band offsets.  The number of bands is inferred
                  from bankIndices.length and bandOffsets.length, which must be
                  the same.  The upper left corner of the Raster is given by the
                  location argument.  If location is null, (0, 0) will be used.                
                <param>
                    dataBuffer the <code>DataBuffer</code> that contains the
                      image data                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    bankIndices the bank indices for each band                    
                </param>
                <param>
                    bandOffsets the offsets of all bands                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified
                      <code>DataBuffer</code>, width, height, scanline stride,
                      bank indices and band offsets.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
                <throws>
                    NullPointerException if <code>dataBuffer</code> is null                    
                </throws>
            </javadoc>
            <method name="createBandedRaster" type="WritableRaster" line="697">
                <params>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bankIndices" type="int"/>
                    <param name="bandOffsets" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="698"/>
                <scope line="701"/>
                <declaration name="dataType" type="int" line="704"/>
                <declaration name="bands" type="int" line="706"/>
                <scope line="707"/>
                <declaration name="bsm" type="BandedSampleModel" line="712"/>
            </method>
            <javadoc line="733">
                Creates a Raster based on a SinglePixelPackedSampleModel with
                  the specified DataBuffer, width, height, scanline stride, and
                  band masks.  The number of bands is inferred from bandMasks.length.
                  The upper left corner of the Raster is given by
                  the location argument.  If location is null, (0, 0) will be used.                
                <param>
                    dataBuffer the <code>DataBuffer</code> that contains the
                      image data                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    scanlineStride the line stride of the image data                    
                </param>
                <param>
                    bandMasks an array containing an entry for each band                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified
                      <code>DataBuffer</code>, width, height, scanline stride,
                      and band masks.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
                <throws>
                    RasterFormatException if <code>dataBuffer</code> has more
                      than one bank.                    
                </throws>
                <throws>
                    NullPointerException if <code>dataBuffer</code> is null                    
                </throws>
            </javadoc>
            <method name="createPackedRaster" type="WritableRaster" line="767">
                <params>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="scanlineStride" type="int"/>
                    <param name="bandMasks" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="768"/>
                <scope line="771"/>
                <declaration name="dataType" type="int" line="774"/>
                <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="776"/>
            </method>
            <javadoc line="796">
                Creates a Raster based on a MultiPixelPackedSampleModel with the
                  specified DataBuffer, width, height, and bits per pixel.  The upper
                  left corner of the Raster is given by the location argument.  If
                  location is null, (0, 0) will be used.                
                <param>
                    dataBuffer the <code>DataBuffer</code> that contains the
                      image data                    
                </param>
                <param>
                    w         the width in pixels of the image data                    
                </param>
                <param>
                    h         the height in pixels of the image data                    
                </param>
                <param>
                    bitsPerPixel the number of bits for each pixel                    
                </param>
                <param>
                    location  the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a WritableRaster object with the specified
                      <code>DataBuffer</code>, width, height, and
                      bits per pixel.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>location.x + w</code> or
                      <code>location.y + h</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>dataType</code> is not
                      one of the supported data types, which are
                      <code>DataBuffer.TYPE_BYTE</code>,
                      <code>DataBuffer.TYPE_USHORT</code>
                      or <code>DataBuffer.TYPE_INT</code>                    
                </throws>
                <throws>
                    RasterFormatException if <code>dataBuffer</code> has more
                      than one bank.                    
                </throws>
                <throws>
                    NullPointerException if <code>dataBuffer</code> is null                    
                </throws>
            </javadoc>
            <method name="createPackedRaster" type="WritableRaster" line="827">
                <params>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="bitsPerPixel" type="int"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="828"/>
                <scope line="831"/>
                <declaration name="dataType" type="int" line="834"/>
                <scope line="838"/>
                <scope line="843"/>
                <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="849"/>
                <scope line="853"/>
                <scope line="855"/>
            </method>
            <javadoc line="861">
                Creates a Raster with the specified SampleModel and DataBuffer.
                  The upper left corner of the Raster is given by the location argument.
                  If location is null, (0, 0) will be used.                
                <param>
                    sm the specified <code>SampleModel</code>                    
                </param>
                <param>
                    db the specified <code>DataBuffer</code>                    
                </param>
                <param>
                    location the upper-left corner of the <code>Raster</code>                    
                </param>
                <return>
                    a <code>Raster</code> with the specified
                      <code>SampleModel</code>, <code>DataBuffer</code>, and
                      location.                    
                </return>
                <throws>
                    RasterFormatException if computing either
                      <code>location.x + sm.getWidth()</code> or
                      <code>location.y + sm.getHeight()</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    RasterFormatException if <code>db</code> has more
                      than one bank and <code>sm</code> is a
                      PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
                      or MultiPixelPackedSampleModel.                    
                </throws>
                <throws>
                    NullPointerException if either SampleModel or DataBuffer is
                      null                    
                </throws>
            </javadoc>
            <method name="createRaster" type="Raster" line="884">
                <params>
                    <param name="sm" type="SampleModel"/>
                    <param name="db" type="DataBuffer"/>
                    <param name="location" type="Point"/>
                </params>
                <comment line="919">
                    we couldn&apos;t do anything special - do the generic thing                    
                </comment>
                <scope line="885"/>
                <scope line="889"/>
                <declaration name="dataType" type="int" line="892"/>
                <scope line="894"/>
                <scope line="902"/>
                <scope line="915"/>
            </method>
            <javadoc line="924">
                Creates a WritableRaster with the specified SampleModel.
                  The upper left corner of the Raster is given by the location argument.
                  If location is null, (0, 0) will be used.                
                <param>
                    sm the specified <code>SampleModel</code>                    
                </param>
                <param>
                    location the upper-left corner of the
                      <code>WritableRaster</code>                    
                </param>
                <return>
                    a <code>WritableRaster</code> with the specified
                      <code>SampleModel</code> and location.                    
                </return>
                <throws>
                    RasterFormatException if computing either
                      <code>location.x + sm.getWidth()</code> or
                      <code>location.y + sm.getHeight()</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createWritableRaster" type="WritableRaster" line="939">
                <params>
                    <param name="sm" type="SampleModel"/>
                    <param name="location" type="Point"/>
                </params>
                <scope line="940"/>
            </method>
            <javadoc line="947">
                Creates a WritableRaster with the specified SampleModel and DataBuffer.
                  The upper left corner of the Raster is given by the location argument.
                  If location is null, (0, 0) will be used.                
                <param>
                    sm the specified <code>SampleModel</code>                    
                </param>
                <param>
                    db the specified <code>DataBuffer</code>                    
                </param>
                <param>
                    location the upper-left corner of the
                      <code>WritableRaster</code>                    
                </param>
                <return>
                    a <code>WritableRaster</code> with the specified
                      <code>SampleModel</code>, <code>DataBuffer</code>, and
                      location.                    
                </return>
                <throws>
                    RasterFormatException if computing either
                      <code>location.x + sm.getWidth()</code> or
                      <code>location.y + sm.getHeight()</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    RasterFormatException if <code>db</code> has more
                      than one bank and <code>sm</code> is a
                      PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
                      or MultiPixelPackedSampleModel.                    
                </throws>
                <throws>
                    NullPointerException if either SampleModel or DataBuffer is null                    
                </throws>
            </javadoc>
            <method name="createWritableRaster" type="WritableRaster" line="970">
                <params>
                    <param name="sm" type="SampleModel"/>
                    <param name="db" type="DataBuffer"/>
                    <param name="location" type="Point"/>
                </params>
                <comment line="1005">
                    we couldn&apos;t do anything special - do the generic thing                    
                </comment>
                <scope line="971"/>
                <scope line="974"/>
                <declaration name="dataType" type="int" line="978"/>
                <scope line="980"/>
                <scope line="988"/>
                <scope line="1001"/>
            </method>
            <javadoc line="1010">
                Constructs a Raster with the given SampleModel.  The Raster&apos;s
                  upper left corner is origin and it is the same size as the
                  SampleModel.  A DataBuffer large enough to describe the
                  Raster is automatically created.                
                <param>
                    sampleModel     The SampleModel that specifies the layout                    
                </param>
                <param>
                    origin          The Point that specified the origin                    
                </param>
                <throws>
                    RasterFormatException if computing either
                      <code>origin.x + sampleModel.getWidth()</code> or
                      <code>origin.y + sampleModel.getHeight()</code> results in
                      integer overflow                    
                </throws>
                <throws>
                    NullPointerException either <code>sampleModel</code> or
                      <code>origin</code> is null                    
                </throws>
            </javadoc>
            <method name="Raster" type="constructor" line="1025">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="1036">
                Constructs a Raster with the given SampleModel and DataBuffer.
                  The Raster&apos;s upper left corner is origin and it is the same size
                  as the SampleModel.  The DataBuffer is not initialized and must
                  be compatible with SampleModel.                
                <param>
                    sampleModel     The SampleModel that specifies the layout                    
                </param>
                <param>
                    dataBuffer      The DataBuffer that contains the image data                    
                </param>
                <param>
                    origin          The Point that specifies the origin                    
                </param>
                <throws>
                    RasterFormatException if computing either
                      <code>origin.x + sampleModel.getWidth()</code> or
                      <code>origin.y + sampleModel.getHeight()</code> results in
                      integer overflow                    
                </throws>
                <throws>
                    NullPointerException either <code>sampleModel</code> or
                      <code>origin</code> is null                    
                </throws>
            </javadoc>
            <method name="Raster" type="constructor" line="1053">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="origin" type="Point"/>
                </params>
            </method>
            <javadoc line="1064">
                Constructs a Raster with the given SampleModel, DataBuffer, and
                  parent.  aRegion specifies the bounding rectangle of the new
                  Raster.  When translated into the base Raster&apos;s coordinate
                  system, aRegion must be contained by the base Raster.
                  (The base Raster is the Raster&apos;s ancestor which has no parent.)
                  sampleModelTranslate specifies the sampleModelTranslateX and
                  sampleModelTranslateY values of the new Raster.
                  Note that this constructor should generally be called by other
                  constructors or create methods, it should not be used directly.                
                <param>
                    sampleModel     The SampleModel that specifies the layout                    
                </param>
                <param>
                    dataBuffer      The DataBuffer that contains the image data                    
                </param>
                <param>
                    aRegion         The Rectangle that specifies the image area                    
                </param>
                <param>
                    sampleModelTranslate  The Point that specifies the translation
                      from SampleModel to Raster coordinates                    
                </param>
                <param>
                    parent          The parent (if any) of this raster                    
                </param>
                <throws>
                    NullPointerException if any of <code>sampleModel</code>,
                      <code>dataBuffer</code>, <code>aRegion</code> or
                      <code>sampleModelTranslate</code> is null                    
                </throws>
                <throws>
                    RasterFormatException if <code>aRegion</code> has width
                      or height less than or equal to zero, or computing either
                      <code>aRegion.x + aRegion.width</code> or
                      <code>aRegion.y + aRegion.height</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="Raster" type="constructor" line="1094">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                    <param name="dataBuffer" type="DataBuffer"/>
                    <param name="aRegion" type="Rectangle"/>
                    <param name="sampleModelTranslate" type="Point"/>
                    <param name="parent" type="Raster"/>
                </params>
                <scope line="1097"/>
                <scope line="1107"/>
                <scope line="1111"/>
                <scope line="1115"/>
            </method>
            <javadoc line="1129">
                Returns the parent Raster (if any) of this Raster or null.                
                <return>
                    the parent Raster or <code>null</code>.                    
                </return>
            </javadoc>
            <method name="getParent" type="Raster" line="1133"/>
            <javadoc line="1137">
                Returns the X translation from the coordinate system of the
                  SampleModel to that of the Raster.  To convert a pixel&apos;s X
                  coordinate from the Raster coordinate system to the SampleModel
                  coordinate system, this value must be subtracted.                
                <return>
                    the X translation from the coordinate space of the
                      Raster's SampleModel to that of the Raster.                    
                </return>
            </javadoc>
            <method name="getSampleModelTranslateX" type="int" line="1145"/>
            <javadoc line="1149">
                Returns the Y translation from the coordinate system of the
                  SampleModel to that of the Raster.  To convert a pixel&apos;s Y
                  coordinate from the Raster coordinate system to the SampleModel
                  coordinate system, this value must be subtracted.                
                <return>
                    the Y translation from the coordinate space of the
                      Raster's SampleModel to that of the Raster.                    
                </return>
            </javadoc>
            <method name="getSampleModelTranslateY" type="int" line="1157"/>
            <javadoc line="1161">
                Create a compatible WritableRaster the same size as this Raster with
                  the same SampleModel and a new initialized DataBuffer.                
                <return>
                    a compatible <code>WritableRaster</code> with the same sample
                      model and a new data buffer.                    
                </return>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1167"/>
            <javadoc line="1171">
                Create a compatible WritableRaster with the specified size, a new
                  SampleModel, and a new initialized DataBuffer.                
                <param>
                    w the specified width of the new <code>WritableRaster</code>                    
                </param>
                <param>
                    h the specified height of the new <code>WritableRaster</code>                    
                </param>
                <return>
                    a compatible <code>WritableRaster</code> with the specified
                      size and a new sample model and data buffer.                    
                </return>
                <exception>
                    RasterFormatException if the width or height is less than
                      or equal to zero.                    
                </exception>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1181">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="1182"/>
                <declaration name="sm" type="SampleModel" line="1187"/>
            </method>
            <javadoc line="1192">
                Create a compatible WritableRaster with location (minX, minY)
                  and size (width, height) specified by rect, a
                  new SampleModel, and a new initialized DataBuffer.                
                <param>
                    rect a <code>Rectangle</code> that specifies the size and
                      location of the <code>WritableRaster</code>                    
                </param>
                <return>
                    a compatible <code>WritableRaster</code> with the specified
                      size and location and a new sample model and data buffer.                    
                </return>
                <throws>
                    RasterFormatException if <code>rect</code> has width
                      or height less than or equal to zero, or computing either
                      <code>rect.x + rect.width</code> or
                      <code>rect.y + rect.height</code> results in integer
                      overflow                    
                </throws>
                <throws>
                    NullPointerException if <code>rect</code> is null                    
                </throws>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1207">
                <params>
                    <param name="rect" type="Rectangle"/>
                </params>
                <scope line="1208"/>
            </method>
            <javadoc line="1215">
                Create a compatible WritableRaster with the specified
                  location (minX, minY) and size (width, height), a
                  new SampleModel, and a new initialized DataBuffer.                
                <param>
                    x the X coordinate of the upper-left corner of
                      the <code>WritableRaster</code>                    
                </param>
                <param>
                    y the Y coordinate of the upper-left corner of
                      the <code>WritableRaster</code>                    
                </param>
                <param>
                    w the specified width of the <code>WritableRaster</code>                    
                </param>
                <param>
                    h the specified height of the <code>WritableRaster</code>                    
                </param>
                <return>
                    a compatible <code>WritableRaster</code> with the specified
                      size and location and a new sample model and data buffer.                    
                </return>
                <throws>
                    RasterFormatException if <code>w</code> or <code>h</code>
                      is less than or equal to zero, or computing either
                      <code>x + w</code> or
                      <code>y + h</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createCompatibleWritableRaster" type="WritableRaster" line="1234">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="ret" type="WritableRaster" line="1235"/>
            </method>
            <javadoc line="1239">
                Create a Raster with the same size, SampleModel and DataBuffer
                  as this one, but with a different location.  The new Raster
                  will possess a reference to the current Raster, accessible
                  through its getParent() method.                
                <param>
                    childMinX the X coordinate of the upper-left
                      corner of the new <code>Raster</code>                    
                </param>
                <param>
                    childMinY the Y coordinate of the upper-left
                      corner of the new <code>Raster</code>                    
                </param>
                <return>
                    a new <code>Raster</code> with the same size, SampleModel,
                      and DataBuffer as this <code>Raster</code>, but with the
                      specified location.                    
                </return>
                <throws>
                    RasterFormatException if  computing either
                      <code>childMinX + this.getWidth()</code> or
                      <code>childMinY + this.getHeight()</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createTranslatedChild" type="Raster" line="1257">
                <params>
                    <param name="childMinX" type="int"/>
                    <param name="childMinY" type="int"/>
                </params>
            </method>
            <javadoc line="1262">
                Returns a new Raster which shares all or part of this Raster&apos;s
                  DataBuffer.  The new Raster will possess a reference to the
                  current Raster, accessible through its getParent() method.
                  &lt;p&gt; The parentX, parentY, width and height parameters
                  form a Rectangle in this Raster&apos;s coordinate space,
                  indicating the area of pixels to be shared.  An error will
                  be thrown if this Rectangle is not contained with the bounds
                  of the current Raster.
                  &lt;p&gt; The new Raster may additionally be translated to a
                  different coordinate system for the plane than that used by the current
                  Raster.  The childMinX and childMinY parameters give the new
                  (x, y) coordinate of the upper-left pixel of the returned
                  Raster; the coordinate (childMinX, childMinY) in the new Raster
                  will map to the same pixel as the coordinate (parentX, parentY)
                  in the current Raster.
                  &lt;p&gt; The new Raster may be defined to contain only a subset of
                  the bands of the current Raster, possibly reordered, by means
                  of the bandList parameter.  If bandList is null, it is taken to
                  include all of the bands of the current Raster in their current
                  order.
                  &lt;p&gt; To create a new Raster that contains a subregion of the current
                  Raster, but shares its coordinate system and bands,
                  this method should be called with childMinX equal to parentX,
                  childMinY equal to parentY, and bandList equal to null.                
                <param>
                    parentX The X coordinate of the upper-left corner
                      in this Raster's coordinates                    
                </param>
                <param>
                    parentY The Y coordinate of the upper-left corner
                      in this Raster's coordinates                    
                </param>
                <param>
                    width      Width of the region starting at (parentX, parentY)                    
                </param>
                <param>
                    height     Height of the region starting at (parentX, parentY).                    
                </param>
                <param>
                    childMinX The X coordinate of the upper-left corner
                      of the returned Raster                    
                </param>
                <param>
                    childMinY The Y coordinate of the upper-left corner
                      of the returned Raster                    
                </param>
                <param>
                    bandList   Array of band indices, or null to use all bands                    
                </param>
                <return>
                    a new <code>Raster</code>.                    
                </return>
                <exception>
                    RasterFormatException if the specified subregion is outside
                      of the raster bounds.                    
                </exception>
                <throws>
                    RasterFormatException if <code>width</code> or
                      <code>height</code>
                      is less than or equal to zero, or computing any of
                      <code>parentX + width</code>, <code>parentY + height</code>,
                      <code>childMinX + width</code>, or
                      <code>childMinY + height</code> results in integer
                      overflow                    
                </throws>
            </javadoc>
            <method name="createChild" type="Raster" line="1317">
                <params>
                    <param name="parentX" type="int"/>
                    <param name="parentY" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="childMinX" type="int"/>
                    <param name="childMinY" type="int"/>
                    <param name="bandList" type="int"/>
                </params>
                <comment line="1334">
                    Note: the SampleModel for the child Raster should have the same                    
                </comment>
                <comment line="1335">
                    width and height as that for the parent, since it represents                    
                </comment>
                <comment line="1336">
                    the physical layout of the pixel data.  The child Raster&apos;s width                    
                </comment>
                <comment line="1337">
                    and height represent a &quot;virtual&quot; view of the pixel data, so                    
                </comment>
                <comment line="1338">
                    they may be different than those of the SampleModel.                    
                </comment>
                <scope line="1318"/>
                <scope line="1321"/>
                <scope line="1325"/>
                <scope line="1329"/>
                <declaration name="subSampleModel" type="SampleModel" line="1333"/>
                <scope line="1339"/>
                <scope line="1341"/>
                <declaration name="deltaX" type="int" line="1345"/>
                <declaration name="deltaY" type="int" line="1346"/>
            </method>
            <javadoc line="1354">
                Returns the bounding Rectangle of this Raster. This function returns
                  the same information as getMinX/MinY/Width/Height.                
                <return>
                    the bounding box of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="1359"/>
            <javadoc line="1363">
                Returns the minimum valid X coordinate of the Raster.                
                <return>
                    the minimum x coordinate of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getMinX" type="int" line="1366"/>
            <javadoc line="1370">
                Returns the minimum valid Y coordinate of the Raster.                
                <return>
                    the minimum y coordinate of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getMinY" type="int" line="1373"/>
            <javadoc line="1377">
                Returns the width in pixels of the Raster.                
                <return>
                    the width of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="1380"/>
            <javadoc line="1384">
                Returns the height in pixels of the Raster.                
                <return>
                    the height of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="1387"/>
            <javadoc line="1391">
                Returns the number of bands (samples per pixel) in this Raster.                
                <return>
                    the number of bands of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getNumBands" type="int" line="1394"/>
            <javadoc line="1398">
                Returns the number of data elements needed to transfer one pixel
                  via the getDataElements and setDataElements methods.  When pixels
                  are transferred via these methods, they may be transferred in a
                  packed or unpacked format, depending on the implementation of the
                  underlying SampleModel.  Using these methods, pixels are transferred
                  as an array of getNumDataElements() elements of a primitive type given
                  by getTransferType().  The TransferType may or may not be the same
                  as the storage data type of the DataBuffer.                
                <return>
                    the number of data elements.                    
                </return>
            </javadoc>
            <method name="getNumDataElements" type="int" line="1409"/>
            <javadoc line="1413">
                Returns the TransferType used to transfer pixels via the
                  getDataElements and setDataElements methods.  When pixels
                  are transferred via these methods, they may be transferred in a
                  packed or unpacked format, depending on the implementation of the
                  underlying SampleModel.  Using these methods, pixels are transferred
                  as an array of getNumDataElements() elements of a primitive type given
                  by getTransferType().  The TransferType may or may not be the same
                  as the storage data type of the DataBuffer.  The TransferType will
                  be one of the types defined in DataBuffer.                
                <return>
                    this transfer type.                    
                </return>
            </javadoc>
            <method name="getTransferType" type="int" line="1425"/>
            <javadoc line="1429">
                Returns the DataBuffer associated with this Raster.                
                <return>
                    the <code>DataBuffer</code> of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getDataBuffer" type="DataBuffer" line="1432"/>
            <javadoc line="1436">
                Returns the SampleModel that describes the layout of the image data.                
                <return>
                    the <code>SampleModel</code> of this <code>Raster</code>.                    
                </return>
            </javadoc>
            <method name="getSampleModel" type="SampleModel" line="1439"/>
            <javadoc line="1443">
                Returns data for a single pixel in a primitive array of type
                  TransferType.  For image data supported by the Java 2D(tm) API,
                  this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
                  or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
                  thus increasing efficiency for data transfers.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of TransferType.                
                <see>
                    java.awt.image.SampleModel#getDataElements(int,int,Object,DataBuffer)                    
                </see>
                <param>
                    x        The X coordinate of the pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length getNumDataElements().
                      If null, an array of appropriate type and size will be
                      allocated                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the requested pixel data.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if outData is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getDataElements" type="Object" line="1468">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="outData" type="Object"/>
                </params>
            </method>
            <javadoc line="1474">
                Returns the pixel data for the specified rectangle of pixels in a
                  primitive array of type TransferType.
                  For image data supported by the Java 2D API, this
                  will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
                  DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
                  or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
                  thus increasing efficiency for data transfers.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.
                  A ClassCastException will be thrown if the input object is non null
                  and references anything other than an array of TransferType.                
                <see>
                    java.awt.image.SampleModel#getDataElements(int,int,int,int,Object,DataBuffer)                    
                </see>
                <param>
                    x    The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y    The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w    Width of the pixel rectangle                    
                </param>
                <param>
                    h   Height of the pixel rectangle                    
                </param>
                <param>
                    outData  An object reference to an array of type defined by
                      getTransferType() and length whgetNumDataElements().
                      If null, an array of appropriate type and size will be
                      allocated.                    
                </param>
                <return>
                    An object reference to an array of type defined by
                      getTransferType() with the requested pixel data.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if outData is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getDataElements" type="Object" line="1502">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="outData" type="Object"/>
                </params>
            </method>
            <javadoc line="1508">
                Returns the samples in an array of int for the specified pixel.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x The X coordinate of the pixel location                    
                </param>
                <param>
                    y The Y coordinate of the pixel location                    
                </param>
                <param>
                    iArray An optionally preallocated int array                    
                </param>
                <return>
                    the samples for the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if iArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixel" type="int[]" line="1521">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="1527">
                Returns the samples in an array of float for the
                  specified pixel.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x The X coordinate of the pixel location                    
                </param>
                <param>
                    y The Y coordinate of the pixel location                    
                </param>
                <param>
                    fArray An optionally preallocated float array                    
                </param>
                <return>
                    the samples for the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if fArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixel" type="float[]" line="1541">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="1547">
                Returns the samples in an array of double for the specified pixel.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x The X coordinate of the pixel location                    
                </param>
                <param>
                    y The Y coordinate of the pixel location                    
                </param>
                <param>
                    dArray An optionally preallocated double array                    
                </param>
                <return>
                    the samples for the specified pixel.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if dArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixel" type="double[]" line="1560">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
            <javadoc line="1566">
                Returns an int array containing all samples for a rectangle of pixels,
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x      The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y      The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w      Width of the pixel rectangle                    
                </param>
                <param>
                    h      Height of the pixel rectangle                    
                </param>
                <param>
                    iArray An optionally pre-allocated int array                    
                </param>
                <return>
                    the samples for the specified rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if iArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixels" type="int[]" line="1582">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="1588">
                Returns a float array containing all samples for a rectangle of pixels,
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location                    
                </param>
                <param>
                    w        Width of the pixel rectangle                    
                </param>
                <param>
                    h        Height of the pixel rectangle                    
                </param>
                <param>
                    fArray   An optionally pre-allocated float array                    
                </param>
                <return>
                    the samples for the specified rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if fArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixels" type="float[]" line="1605">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="1611">
                Returns a double array containing all samples for a rectangle of pixels,
                  one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w        Width of the pixel rectangle                    
                </param>
                <param>
                    h        Height of the pixel rectangle                    
                </param>
                <param>
                    dArray   An optionally pre-allocated double array                    
                </param>
                <return>
                    the samples for the specified rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates are not
                      in bounds, or if dArray is too small to hold the output.                    
                </throws>
            </javadoc>
            <method name="getPixels" type="double[]" line="1628">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
            <javadoc line="1635">
                Returns the sample in a specified band for the pixel located
                  at (x,y) as an int.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <return>
                    the sample in the specified band for the pixel at the
                      specified coordinate.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="getSample" type="int" line="1650">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="1656">
                Returns the sample in a specified band
                  for the pixel located at (x,y) as a float.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <return>
                    the sample in the specified band for the pixel at the
                      specified coordinate.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="getSampleFloat" type="float" line="1671">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="1677">
                Returns the sample in a specified band
                  for a pixel located at (x,y) as a double.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the pixel location                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <return>
                    the sample in the specified band for the pixel at the
                      specified coordinate.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds.                    
                </throws>
            </javadoc>
            <method name="getSampleDouble" type="double" line="1692">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="1698">
                Returns the samples for a specified band for the specified rectangle
                  of pixels in an int array, one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w        Width of the pixel rectangle                    
                </param>
                <param>
                    h        Height of the pixel rectangle                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <param>
                    iArray   An optionally pre-allocated int array                    
                </param>
                <return>
                    the samples for the specified band for the specified
                      rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if iArray is too small to
                      hold the output.                    
                </throws>
            </javadoc>
            <method name="getSamples" type="int[]" line="1718">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="iArray" type="int"/>
                </params>
            </method>
            <javadoc line="1725">
                Returns the samples for a specified band for the specified rectangle
                  of pixels in a float array, one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w        Width of the pixel rectangle                    
                </param>
                <param>
                    h        Height of the pixel rectangle                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <param>
                    fArray   An optionally pre-allocated float array                    
                </param>
                <return>
                    the samples for the specified band for the specified
                      rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if fArray is too small to
                      hold the output.                    
                </throws>
            </javadoc>
            <method name="getSamples" type="float[]" line="1745">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="fArray" type="float"/>
                </params>
            </method>
            <javadoc line="1751">
                Returns the samples for a specified band for a specified rectangle
                  of pixels in a double array, one sample per array element.
                  An ArrayIndexOutOfBoundsException may be thrown
                  if the coordinates are not in bounds.  However, explicit bounds
                  checking is not guaranteed.                
                <param>
                    x        The X coordinate of the upper-left pixel location                    
                </param>
                <param>
                    y        The Y coordinate of the upper-left pixel location                    
                </param>
                <param>
                    w        Width of the pixel rectangle                    
                </param>
                <param>
                    h        Height of the pixel rectangle                    
                </param>
                <param>
                    b        The band to return                    
                </param>
                <param>
                    dArray   An optionally pre-allocated double array                    
                </param>
                <return>
                    the samples for the specified band for the specified
                      rectangle of pixels.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsException if the coordinates or
                      the band index are not in bounds, or if dArray is too small to
                      hold the output.                    
                </throws>
            </javadoc>
            <method name="getSamples" type="double[]" line="1771">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="b" type="int"/>
                    <param name="dArray" type="double"/>
                </params>
            </method>
        </class>
    </source>