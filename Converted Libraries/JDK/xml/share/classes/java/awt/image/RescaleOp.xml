<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="sun.awt.image.ImagingLib"/>
        <class name="RescaleOp" line="8">
            <implements interface="BufferedImageOp"/>
            <implements interface="RasterOp"/>
            <javadoc line="8">
                This class performs a pixel-by-pixel rescaling of the data in the
                  source image by multiplying the sample values for each pixel by a scale
                  factor and then adding an offset. The scaled sample values are clipped
                  to the minimum/maximum representable in the destination image.
                  &lt;p&gt;
                  The pseudo code for the rescaling operation is as follows:
                  &lt;pre&gt;
                  for each pixel from Source object {
                  for each band/component of the pixel {
                  dstElement = (srcElementscaleFactor) + offset
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For Rasters, rescaling operates on bands.  The number of
                  sets of scaling constants may be one, in which case the same constants
                  are applied to all bands, or it must equal the number of Source
                  Raster bands.
                  &lt;p&gt;
                  For BufferedImages, rescaling operates on color and alpha components.
                  The number of sets of scaling constants may be one, in which case the
                  same constants are applied to all color (but not alpha) components.
                  Otherwise, the  number of sets of scaling constants may
                  equal the number of Source color components, in which case no
                  rescaling of the alpha component (if present) is performed.
                  If neither of these cases apply, the number of sets of scaling constants
                  must equal the number of Source color components plus alpha components,
                  in which case all color and alpha components are rescaled.
                  &lt;p&gt;
                  BufferedImage sources with premultiplied alpha data are treated in the same
                  manner as non-premultiplied images for purposes of rescaling.  That is,
                  the rescaling is done per band on the raw data of the BufferedImage source
                  without regard to whether the data is premultiplied.  If a color conversion
                  is required to the destination ColorModel, the premultiplied state of
                  both source and destination will be taken into account for this step.
                  &lt;p&gt;
                  Images with an IndexColorModel cannot be rescaled.
                  &lt;p&gt;
                  If a RenderingHints object is specified in the constructor, the
                  color rendering hint and the dithering hint may be used when color
                  conversion is required.
                  &lt;p&gt;
                  Note that in-place operation is allowed (i.e. the source and destination can
                  be the same object).                
                <see>
                    java.awt.RenderingHints#KEY_COLOR_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_DITHERING                    
                </see>
            </javadoc>
            <declaration name="scaleFactors" type="float[]" line="57"/>
            <declaration name="offsets" type="float[]" line="58"/>
            <declaration name="length" type="int" line="59"/>
            <declaration name="hints" type="RenderingHints" line="60"/>
            <declaration name="srcNbits" type="int" line="61"/>
            <declaration name="dstNbits" type="int" line="62"/>
            <javadoc line="63">
                Constructs a new RescaleOp with the desired scale factors
                  and offsets.  The length of the scaleFactor and offset arrays
                  must meet the restrictions stated in the class comments above.
                  The RenderingHints argument may be null.                
                <param>
                    scaleFactors the specified scale factors                    
                </param>
                <param>
                    offsets the specified offsets                    
                </param>
                <param>
                    hints the specified &lt;code&gt;RenderingHints&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="RescaleOp" type="constructor" line="73">
                <params>
                    <param name="scaleFactors" type="float[]"/>
                    <param name="offsets" type="float[]"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
                <scope line="78"/>
            </method>
            <javadoc line="84">
                Constructs a new RescaleOp with the desired scale factor
                  and offset.  The scaleFactor and offset will be applied to
                  all bands in a source Raster and to all color (but not alpha)
                  components in a BufferedImage.
                  The RenderingHints argument may be null.                
                <param>
                    scaleFactor the specified scale factor                    
                </param>
                <param>
                    offset the specified offset                    
                </param>
                <param>
                    hints the specified &lt;code&gt;RenderingHints&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="RescaleOp" type="constructor" line="95">
                <params>
                    <param name="scaleFactor" type="float"/>
                    <param name="offset" type="float"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the scale factors in the given array. The array is also
                  returned for convenience.  If scaleFactors is null, a new array
                  will be allocated.                
                <param>
                    scaleFactors the array to contain the scale factors of
                      this &lt;code&gt;RescaleOp&lt;/code&gt;                    
                </param>
                <return>
                    the scale factors of this &lt;code&gt;RescaleOp&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getScaleFactors" type="float[]" line="111">
                <params>
                    <param name="scaleFactors" type="float"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Returns the offsets in the given array. The array is also returned
                  for convenience.  If offsets is null, a new array
                  will be allocated.                
                <param>
                    offsets the array to contain the offsets of
                      this &lt;code&gt;RescaleOp&lt;/code&gt;                    
                </param>
                <return>
                    the offsets of this &lt;code&gt;RescaleOp&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getOffsets" type="float[]" line="126">
                <params>
                    <param name="offsets" type="float"/>
                </params>
                <scope line="127"/>
            </method>
            <javadoc line="133">
                Returns the number of scaling factors and offsets used in this
                  RescaleOp.                
                <return>
                    the number of scaling factors and offsets of this
                      &lt;code&gt;RescaleOp&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getNumFactors" type="int" line="139"/>
            <javadoc line="142">
                Creates a ByteLookupTable to implement the rescale.
                  The table may have either a SHORT or BYTE input.                
                <param>
                    nElems    Number of elements the table is to have.
                      This will generally be 256 for byte and
                      65536 for short.                    
                </param>
            </javadoc>
            <method name="createByteLut" type="ByteLookupTable" line="149">
                <params>
                    <param name="scale" type="float"/>
                    <param name="off" type="float"/>
                    <param name="nBands" type="int"/>
                    <param name="nElems" type="int"/>
                </params>
                <declaration name="lutData" type="byte[][]" line="150"/>
                <scope line="151">
                    <declaration name="bandScale" type="float" line="152"/>
                    <declaration name="bandOff" type="float" line="153"/>
                    <declaration name="bandLutData" type="byte[]" line="154"/>
                    <scope line="155">
                        <declaration name="val" type="int" line="156"/>
                        <scope line="157">
                            <scope line="158"/>
                            <scope line="161"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="170">
                Creates a ShortLookupTable to implement the rescale.
                  The table may have either a SHORT or BYTE input.                
                <param>
                    nElems    Number of elements the table is to have.
                      This will generally be 256 for byte and
                      65536 for short.                    
                </param>
            </javadoc>
            <method name="createShortLut" type="ShortLookupTable" line="177">
                <params>
                    <param name="scale" type="float"/>
                    <param name="off" type="float"/>
                    <param name="nBands" type="int"/>
                    <param name="nElems" type="int"/>
                </params>
                <declaration name="lutData" type="short[][]" line="178"/>
                <scope line="179">
                    <declaration name="bandScale" type="float" line="180"/>
                    <declaration name="bandOff" type="float" line="181"/>
                    <declaration name="bandLutData" type="short[]" line="182"/>
                    <scope line="183">
                        <declaration name="val" type="int" line="184"/>
                        <scope line="185">
                            <scope line="186"/>
                            <scope line="189"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="198">
                Determines if the rescale can be performed as a lookup.
                  The dst must be a byte or short type.
                  The src must be less than 16 bits.
                  All source band sizes must be the same and all dst band sizes
                  must be the same.                
            </javadoc>
            <method name="canUseLookup" type="boolean" line="205">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="Raster"/>
                </params>
                <declaration name="datatype" type="int" line="206"/>
                <scope line="207"/>
                <declaration name="dstSM" type="SampleModel" line="210"/>
                <scope line="212"/>
                <scope line="215">
                    <declaration name="bandSize" type="int" line="216"/>
                    <scope line="217"/>
                </scope>
                <declaration name="srcSM" type="SampleModel" line="221"/>
                <scope line="223"/>
                <scope line="226">
                    <declaration name="bandSize" type="int" line="227"/>
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="234">
                Rescales the source BufferedImage.
                  If the color model in the source image is not the same as that
                  in the destination image, the pixels will be converted
                  in the destination.  If the destination image is null,
                  a BufferedImage will be created with the source ColorModel.
                  An IllegalArgumentException may be thrown if the number of
                  scaling factors/offsets in this object does not meet the
                  restrictions stated in the class comments above, or if the
                  source image has an IndexColorModel.                
                <param>
                    src the &lt;code&gt;BufferedImage&lt;/code&gt; to be filtered                    
                </param>
                <param>
                    dst the destination for the filtering operation
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the filtered &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;ColorModel&lt;/code&gt;
                      of &lt;code&gt;src&lt;/code&gt; is an &lt;code&gt;IndexColorModel&lt;/code&gt;,
                      or if the number of scaling factors and offsets in this
                      &lt;code&gt;RescaleOp&lt;/code&gt; do not meet the requirements
                      stated in the class comments.                    
                </throws>
            </javadoc>
            <method name="filter" type="BufferedImage" line="254">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dst" type="BufferedImage"/>
                </params>
                <declaration name="srcCM" type="ColorModel" line="255"/>
                <declaration name="dstCM" type="ColorModel" line="256"/>
                <declaration name="numBands" type="int" line="257"/>
                <scope line="258"/>
                <scope line="261"/>
                <declaration name="needToConvert" type="boolean" line="264"/>
                <scope line="265"/>
                <declaration name="width" type="int" line="268"/>
                <declaration name="height" type="int" line="269"/>
                <scope line="270"/>
                <scope line="274">
                    <scope line="275"/>
                    <scope line="278"/>
                    <scope line="282"/>
                </scope>
                <declaration name="origDst" type="BufferedImage" line="287"/>
                <scope line="288">
                    <declaration name="srcRaster" type="WritableRaster" line="289"/>
                    <declaration name="dstRaster" type="WritableRaster" line="290"/>
                    <scope line="291">
                        <scope line="292">
                            <declaration name="minx" type="int" line="293"/>
                            <declaration name="miny" type="int" line="294"/>
                            <declaration name="bands" type="int[]" line="295"/>
                            <scope line="296"/>
                        </scope>
                    </scope>
                    <scope line="302">
                        <declaration name="dstNumBands" type="int" line="303"/>
                        <scope line="304">
                            <declaration name="minx" type="int" line="305"/>
                            <declaration name="miny" type="int" line="306"/>
                            <declaration name="bands" type="int[]" line="307"/>
                            <scope line="308"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="316">
                    <declaration name="ccop" type="ColorConvertOp" line="317"/>
                </scope>
            </method>
            <javadoc line="322">
                Rescales the pixel data in the source Raster.
                  If the destination Raster is null, a new Raster will be created.
                  The source and destination must have the same number of bands.
                  Otherwise, an IllegalArgumentException is thrown.
                  Note that the number of scaling factors/offsets in this object must
                  meet the restrictions stated in the class comments above.
                  Otherwise, an IllegalArgumentException is thrown.                
                <param>
                    src the &lt;code&gt;Raster&lt;/code&gt; to be filtered                    
                </param>
                <param>
                    dst the destination for the filtering operation
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the filtered &lt;code&gt;WritableRaster&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;src&lt;/code&gt; and
                      &lt;code&gt;dst&lt;/code&gt; do not have the same number of bands,
                      or if the number of scaling factors and offsets in this
                      &lt;code&gt;RescaleOp&lt;/code&gt; do not meet the requirements
                      stated in the class comments.                    
                </throws>
            </javadoc>
            <method name="filter" type="WritableRaster" line="340">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <declaration name="numBands" type="int" line="341"/>
                <declaration name="width" type="int" line="342"/>
                <declaration name="height" type="int" line="343"/>
                <declaration name="srcPix" type="int[]" line="344"/>
                <declaration name="step" type="int" line="345"/>
                <declaration name="tidx" type="int" line="346"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362">
                    <declaration name="srcNgray" type="int" line="363"/>
                    <declaration name="dstNgray" type="int" line="364"/>
                    <scope line="365">
                        <declaration name="lut" type="ByteLookupTable" line="366"/>
                        <declaration name="op" type="LookupOp" line="367"/>
                    </scope>
                    <scope line="370">
                        <declaration name="lut" type="ShortLookupTable" line="371"/>
                        <declaration name="op" type="LookupOp" line="372"/>
                    </scope>
                </scope>
                <scope line="376">
                    <scope line="377"/>
                    <declaration name="sminX" type="int" line="380"/>
                    <declaration name="sY" type="int" line="381"/>
                    <declaration name="dminX" type="int" line="382"/>
                    <declaration name="dY" type="int" line="383"/>
                    <declaration name="sX" type="int" line="384"/>
                    <declaration name="dX" type="int" line="385"/>
                    <declaration name="nbits" type="int" line="386"/>
                    <declaration name="dstMax" type="int" line="387"/>
                    <declaration name="dstMask" type="int" line="388"/>
                    <declaration name="dstSM" type="SampleModel" line="389"/>
                    <scope line="390"/>
                    <declaration name="val" type="int" line="395"/>
                    <scope line="396">
                        <scope line="399">
                            <scope line="402">
                                <scope line="404">
                                    <scope line="405"/>
                                    <scope line="408"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="420">
                Returns the bounding box of the rescaled destination image.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="425">
                <params>
                    <param name="src" type="BufferedImage"/>
                </params>
            </method>
            <javadoc line="428">
                Returns the bounding box of the rescaled destination Raster.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
                <param>
                    src the rescaled destination &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <return>
                    the bounds of the specified &lt;code&gt;Raster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="435">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="438">
                Creates a zeroed destination image with the correct size and number of
                  bands.                
                <param>
                    src       Source image for the filter operation.                    
                </param>
                <param>
                    destCM    ColorModel of the destination.  If null, the
                      ColorModel of the source will be used.                    
                </param>
                <return>
                    the zeroed-destination image.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="446">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                </params>
                <declaration name="image" type="BufferedImage" line="447"/>
                <scope line="448">
                    <declaration name="cm" type="ColorModel" line="449"/>
                </scope>
                <scope line="452">
                    <declaration name="w" type="int" line="453"/>
                    <declaration name="h" type="int" line="454"/>
                </scope>
            </method>
            <javadoc line="459">
                Creates a zeroed-destination &lt;code&gt;Raster&lt;/code&gt; with the correct
                  size and number of bands, given this source.                
                <param>
                    src       the source &lt;code&gt;Raster&lt;/code&gt;                    
                </param>
                <return>
                    the zeroed-destination &lt;code&gt;Raster&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="465">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="468">
                Returns the location of the destination point given a
                  point in the source.  If dstPt is non-null, it will
                  be used to hold the return value.  Since this is not a geometric
                  operation, the srcPt will equal the dstPt.                
                <param>
                    srcPt a point in the source image                    
                </param>
                <param>
                    dstPt the destination point or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the location of the destination point.                    
                </return>
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="477">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
                <scope line="478"/>
            </method>
            <javadoc line="484">
                Returns the rendering hints for this op.                
                <return>
                    the rendering hints of this &lt;code&gt;RescaleOp&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="488"/>
        </class>
    </source>