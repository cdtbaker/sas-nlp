<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.image">
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="sun.awt.image.ImagingLib"/>
        <class name="ConvolveOp" line="8">
            <implements interface="BufferedImageOp"/>
            <implements interface="RasterOp"/>
            <javadoc line="8">
                This class implements a convolution from the source
                  to the destination.
                  Convolution using a convolution kernel is a spatial operation that
                  computes the output pixel from an input pixel by multiplying the kernel
                  with the surround of the input pixel.
                  This allows the output pixel to be affected by the immediate neighborhood
                  in a way that can be mathematically specified with a kernel.
                  &lt;p&gt;
                  This class operates with BufferedImage data in which color components are
                  premultiplied with the alpha component.  If the Source BufferedImage has
                  an alpha component, and the color components are not premultiplied with
                  the alpha component, then the data are premultiplied before being
                  convolved.  If the Destination has color components which are not
                  premultiplied, then alpha is divided out before storing into the
                  Destination (if alpha is 0, the color components are set to 0).  If the
                  Destination has no alpha component, then the resulting alpha is discarded
                  after first dividing it out of the color components.
                  &lt;p&gt;
                  Rasters are treated as having no alpha channel.  If the above treatment
                  of the alpha channel in BufferedImages is not desired, it may be avoided
                  by getting the Raster of a source BufferedImage and using the filter method
                  of this class which works with Rasters.
                  &lt;p&gt;
                  If a RenderingHints object is specified in the constructor, the
                  color rendering hint and the dithering hint may be used when color
                  conversion is required.
                  &lt;p&gt;
                  Note that the Source and the Destination may not be the same object.                
                <see>
                    Kernel                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_COLOR_RENDERING                    
                </see>
                <see>
                    java.awt.RenderingHints#KEY_DITHERING                    
                </see>
            </javadoc>
            <declaration name="kernel" type="Kernel" line="42"/>
            <declaration name="edgeHint" type="int" line="43"/>
            <declaration name="hints" type="RenderingHints" line="44"/>
            <declaration name="EDGE_ZERO_FILL" type="int" line="45"/>
            <javadoc line="45">
                Pixels at the edge of the destination image are set to zero.  This
                  is the default.                
            </javadoc>
            <declaration name="EDGE_NO_OP" type="int" line="50"/>
            <javadoc line="50">
                Pixels at the edge of the source image are copied to
                  the corresponding pixels in the destination without modification.                
            </javadoc>
            <javadoc line="55">
                Constructs a ConvolveOp given a Kernel, an edge condition, and a
                  RenderingHints object (which may be null).                
                <param>
                    kernel the specified &lt;code&gt;Kernel&lt;/code&gt;                    
                </param>
                <param>
                    edgeCondition the specified edge condition                    
                </param>
                <param>
                    hints the specified &lt;code&gt;RenderingHints&lt;/code&gt; object                    
                </param>
                <see>
                    Kernel                    
                </see>
                <see>
                    #EDGE_NO_OP                    
                </see>
                <see>
                    #EDGE_ZERO_FILL                    
                </see>
                <see>
                    java.awt.RenderingHints                    
                </see>
            </javadoc>
            <method name="ConvolveOp" type="constructor" line="66">
                <params>
                    <param name="kernel" type="Kernel"/>
                    <param name="edgeCondition" type="int"/>
                    <param name="hints" type="RenderingHints"/>
                </params>
            </method>
            <javadoc line="71">
                Constructs a ConvolveOp given a Kernel.  The edge condition
                  will be EDGE_ZERO_FILL.                
                <param>
                    kernel the specified &lt;code&gt;Kernel&lt;/code&gt;                    
                </param>
                <see>
                    Kernel                    
                </see>
                <see>
                    #EDGE_ZERO_FILL                    
                </see>
            </javadoc>
            <method name="ConvolveOp" type="constructor" line="78">
                <params>
                    <param name="kernel" type="Kernel"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the edge condition.                
                <return>
                    the edge condition of this &lt;code&gt;ConvolveOp&lt;/code&gt;.                    
                </return>
                <see>
                    #EDGE_NO_OP                    
                </see>
                <see>
                    #EDGE_ZERO_FILL                    
                </see>
            </javadoc>
            <method name="getEdgeCondition" type="int" line="88"/>
            <javadoc line="91">
                Returns the Kernel.                
                <return>
                    the &lt;code&gt;Kernel&lt;/code&gt; of this &lt;code&gt;ConvolveOp&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getKernel" type="Kernel" line="95"/>
            <javadoc line="98">
                Performs a convolution on BufferedImages.  Each component of the
                  source image will be convolved (including the alpha component, if
                  present).
                  If the color model in the source image is not the same as that
                  in the destination image, the pixels will be converted
                  in the destination.  If the destination image is null,
                  a BufferedImage will be created with the source ColorModel.
                  The IllegalArgumentException may be thrown if the source is the
                  same as the destination.                
                <param>
                    src the source &lt;code&gt;BufferedImage&lt;/code&gt; to filter                    
                </param>
                <param>
                    dst the destination &lt;code&gt;BufferedImage&lt;/code&gt; for the
                      filtered &lt;code&gt;src&lt;/code&gt;                    
                </param>
                <return>
                    the filtered &lt;code&gt;BufferedImage&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;src&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;src&lt;/code&gt; equals
                      &lt;code&gt;dst&lt;/code&gt;                    
                </throws>
                <throws>
                    ImagingOpException if &lt;code&gt;src&lt;/code&gt; cannot be filtered                    
                </throws>
            </javadoc>
            <method name="filter" type="BufferedImage" line="117">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dst" type="BufferedImage"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <declaration name="needToConvert" type="boolean" line="124"/>
                <declaration name="srcCM" type="ColorModel" line="125"/>
                <declaration name="dstCM" type="ColorModel" line="126"/>
                <declaration name="origDst" type="BufferedImage" line="127"/>
                <scope line="128">
                    <declaration name="icm" type="IndexColorModel" line="129"/>
                </scope>
                <scope line="133"/>
                <scope line="138">
                    <scope line="140"/>
                    <scope line="145"/>
                </scope>
                <scope line="150"/>
                <scope line="153">
                    <declaration name="ccop" type="ColorConvertOp" line="154"/>
                </scope>
                <scope line="157">
                    <declaration name="g" type="java.awt.Graphics2D" line="158"/>
                    <scope line="159"/>
                    <scope line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Performs a convolution on Rasters.  Each band of the source Raster
                  will be convolved.
                  The source and destination must have the same number of bands.
                  If the destination Raster is null, a new Raster will be created.
                  The IllegalArgumentException may be thrown if the source is
                  the same as the destination.                
                <param>
                    src the source &lt;code&gt;Raster&lt;/code&gt; to filter                    
                </param>
                <param>
                    dst the destination &lt;code&gt;WritableRaster&lt;/code&gt; for the
                      filtered &lt;code&gt;src&lt;/code&gt;                    
                </param>
                <return>
                    the filtered &lt;code&gt;WritableRaster&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;src&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    ImagingOpException if &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt;
                      do not have the same number of bands                    
                </throws>
                <throws>
                    ImagingOpException if &lt;code&gt;src&lt;/code&gt; cannot be filtered                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;src&lt;/code&gt; equals
                      &lt;code&gt;dst&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="filter" type="WritableRaster" line="186">
                <params>
                    <param name="src" type="Raster"/>
                    <param name="dst" type="WritableRaster"/>
                </params>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Creates a zeroed destination image with the correct size and number
                  of bands.  If destCM is null, an appropriate ColorModel will be used.                
                <param>
                    src       Source image for the filter operation.                    
                </param>
                <param>
                    destCM    ColorModel of the destination.  Can be null.                    
                </param>
                <return>
                    a destination &lt;code&gt;BufferedImage&lt;/code&gt; with the correct
                      size and number of bands.                    
                </return>
            </javadoc>
            <method name="createCompatibleDestImage" type="BufferedImage" line="209">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="destCM" type="ColorModel"/>
                </params>
                <declaration name="image" type="BufferedImage" line="210"/>
                <declaration name="w" type="int" line="211"/>
                <declaration name="h" type="int" line="212"/>
                <declaration name="wr" type="WritableRaster" line="213"/>
                <scope line="214">
                    <scope line="216"/>
                    <scope line="219"/>
                </scope>
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Creates a zeroed destination Raster with the correct size and number
                  of bands, given this source.                
            </javadoc>
            <method name="createCompatibleDestRaster" type="WritableRaster" line="233">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="236">
                Returns the bounding box of the filtered destination image.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="241">
                <params>
                    <param name="src" type="BufferedImage"/>
                </params>
            </method>
            <javadoc line="244">
                Returns the bounding box of the filtered destination Raster.  Since
                  this is not a geometric operation, the bounding box does not
                  change.                
            </javadoc>
            <method name="getBounds2D" type="Rectangle2D" line="249">
                <params>
                    <param name="src" type="Raster"/>
                </params>
            </method>
            <javadoc line="252">
                Returns the location of the destination point given a
                  point in the source.  If dstPt is non-null, it will
                  be used to hold the return value.  Since this is not a geometric
                  operation, the srcPt will equal the dstPt.                
            </javadoc>
            <method name="getPoint2D" type="Point2D" line="258">
                <params>
                    <param name="srcPt" type="Point2D"/>
                    <param name="dstPt" type="Point2D"/>
                </params>
                <scope line="259"/>
            </method>
            <javadoc line="265">
                Returns the rendering hints for this op.                
            </javadoc>
            <method name="getRenderingHints" type="RenderingHints" line="268"/>
        </class>
    </source>