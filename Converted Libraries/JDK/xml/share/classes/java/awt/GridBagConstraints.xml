<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <class name="GridBagConstraints" line="2">
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                The &lt;code&gt;GridBagConstraints&lt;/code&gt; class specifies constraints
                  for components that are laid out using the
                  &lt;code&gt;GridBagLayout&lt;/code&gt; class.                
                <author>
                    Doug Stein                    
                </author>
                <author>
                    Bill Spitzak (orignial NeWS & OLIT implementation)                    
                </author>
                <see>
                    java.awt.GridBagLayout                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="RELATIVE" type="int" line="12"/>
            <javadoc line="12">
                Specifies that this component is the next-to-last component in its
                  column or row (&lt;code&gt;gridwidth&lt;/code&gt;, &lt;code&gt;gridheight&lt;/code&gt;),
                  or that this component be placed next to the previously added
                  component (&lt;code&gt;gridx&lt;/code&gt;, &lt;code&gt;gridy&lt;/code&gt;).                
                <see>
                    java.awt.GridBagConstraints#gridwidth                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridheight                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridx                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridy                    
                </see>
            </javadoc>
            <declaration name="REMAINDER" type="int" line="23"/>
            <javadoc line="23">
                Specifies that this component is the
                  last component in its column or row.                
            </javadoc>
            <declaration name="NONE" type="int" line="28"/>
            <javadoc line="28">
                Do not resize the component.                
            </javadoc>
            <declaration name="BOTH" type="int" line="32"/>
            <javadoc line="32">
                Resize the component both horizontally and vertically.                
            </javadoc>
            <declaration name="HORIZONTAL" type="int" line="36"/>
            <javadoc line="36">
                Resize the component horizontally but not vertically.                
            </javadoc>
            <declaration name="VERTICAL" type="int" line="40"/>
            <javadoc line="40">
                Resize the component vertically but not horizontally.                
            </javadoc>
            <declaration name="CENTER" type="int" line="44"/>
            <javadoc line="44">
                Put the component in the center of its display area.                
            </javadoc>
            <declaration name="NORTH" type="int" line="48"/>
            <javadoc line="48">
                Put the component at the top of its display area,
                  centered horizontally.                
            </javadoc>
            <declaration name="NORTHEAST" type="int" line="53"/>
            <javadoc line="53">
                Put the component at the top-right corner of its display area.                
            </javadoc>
            <declaration name="EAST" type="int" line="57"/>
            <javadoc line="57">
                Put the component on the right side of its display area,
                  centered vertically.                
            </javadoc>
            <declaration name="SOUTHEAST" type="int" line="62"/>
            <javadoc line="62">
                Put the component at the bottom-right corner of its display area.                
            </javadoc>
            <declaration name="SOUTH" type="int" line="66"/>
            <javadoc line="66">
                Put the component at the bottom of its display area, centered
                  horizontally.                
            </javadoc>
            <declaration name="SOUTHWEST" type="int" line="71"/>
            <javadoc line="71">
                Put the component at the bottom-left corner of its display area.                
            </javadoc>
            <declaration name="WEST" type="int" line="75"/>
            <javadoc line="75">
                Put the component on the left side of its display area,
                  centered vertically.                
            </javadoc>
            <declaration name="NORTHWEST" type="int" line="80"/>
            <javadoc line="80">
                Put the component at the top-left corner of its display area.                
            </javadoc>
            <declaration name="PAGE_START" type="int" line="84"/>
            <javadoc line="84">
                Place the component centered along the edge of its display area
                  associated with the start of a page for the current{@code ComponentOrientation}.  Equal to NORTH for horizontal
                  orientations.                
            </javadoc>
            <declaration name="PAGE_END" type="int" line="90"/>
            <javadoc line="90">
                Place the component centered along the edge of its display area
                  associated with the end of a page for the current{@code ComponentOrientation}.  Equal to SOUTH for horizontal
                  orientations.                
            </javadoc>
            <declaration name="LINE_START" type="int" line="96"/>
            <javadoc line="96">
                Place the component centered along the edge of its display area where
                  lines of text would normally begin for the current{@code ComponentOrientation}.  Equal to WEST for horizontal,
                  left-to-right orientations and EAST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="LINE_END" type="int" line="103"/>
            <javadoc line="103">
                Place the component centered along the edge of its display area where
                  lines of text would normally end for the current{@code ComponentOrientation}.  Equal to EAST for horizontal,
                  left-to-right orientations and WEST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="FIRST_LINE_START" type="int" line="110"/>
            <javadoc line="110">
                Place the component in the corner of its display area where
                  the first line of text on a page would normally begin for the current{@code ComponentOrientation}.  Equal to NORTHWEST for horizontal,
                  left-to-right orientations and NORTHEAST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="FIRST_LINE_END" type="int" line="117"/>
            <javadoc line="117">
                Place the component in the corner of its display area where
                  the first line of text on a page would normally end for the current{@code ComponentOrientation}.  Equal to NORTHEAST for horizontal,
                  left-to-right orientations and NORTHWEST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="LAST_LINE_START" type="int" line="124"/>
            <javadoc line="124">
                Place the component in the corner of its display area where
                  the last line of text on a page would normally start for the current{@code ComponentOrientation}.  Equal to SOUTHWEST for horizontal,
                  left-to-right orientations and SOUTHEAST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="LAST_LINE_END" type="int" line="131"/>
            <javadoc line="131">
                Place the component in the corner of its display area where
                  the last line of text on a page would normally end for the current{@code ComponentOrientation}.  Equal to SOUTHEAST for horizontal,
                  left-to-right orientations and SOUTHWEST for horizontal, right-to-left
                  orientations.                
            </javadoc>
            <declaration name="BASELINE" type="int" line="138"/>
            <javadoc line="138">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally centered and
                  vertically aligned along the baseline of the prevailing row.
                  If the component does not have a baseline it will be vertically
                  centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BASELINE_LEADING" type="int" line="147"/>
            <javadoc line="147">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  leading edge.  For components with a left-to-right orientation,
                  the leading edge is the left edge.  Vertically the component is
                  aligned along the baseline of the prevailing row.  If the
                  component does not have a baseline it will be vertically
                  centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BASELINE_TRAILING" type="int" line="158"/>
            <javadoc line="158">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  trailing edge.  For components with a left-to-right
                  orientation, the trailing edge is the right edge.  Vertically
                  the component is aligned along the baseline of the prevailing
                  row.  If the component does not have a baseline it will be
                  vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ABOVE_BASELINE" type="int" line="169"/>
            <javadoc line="169">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally centered.  Vertically
                  the component is positioned so that its bottom edge touches
                  the baseline of the starting row.  If the starting row does not
                  have a baseline it will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ABOVE_BASELINE_LEADING" type="int" line="178"/>
            <javadoc line="178">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  leading edge.  For components with a left-to-right orientation,
                  the leading edge is the left edge.  Vertically the component is
                  positioned so that its bottom edge touches the baseline of the
                  starting row.  If the starting row does not have a baseline it
                  will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ABOVE_BASELINE_TRAILING" type="int" line="189"/>
            <javadoc line="189">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  trailing edge.  For components with a left-to-right
                  orientation, the trailing edge is the right edge.  Vertically
                  the component is positioned so that its bottom edge touches
                  the baseline of the starting row.  If the starting row does not
                  have a baseline it will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BELOW_BASELINE" type="int" line="200"/>
            <javadoc line="200">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally centered.  Vertically
                  the component is positioned so that its top edge touches the
                  baseline of the starting row.  If the starting row does not
                  have a baseline it will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BELOW_BASELINE_LEADING" type="int" line="209"/>
            <javadoc line="209">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  leading edge.  For components with a left-to-right orientation,
                  the leading edge is the left edge.  Vertically the component is
                  positioned so that its top edge touches the baseline of the
                  starting row.  If the starting row does not have a baseline it
                  will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BELOW_BASELINE_TRAILING" type="int" line="220"/>
            <javadoc line="220">
                Possible value for the &lt;code&gt;anchor&lt;/code&gt; field.  Specifies
                  that the component should be horizontally placed along the
                  trailing edge.  For components with a left-to-right
                  orientation, the trailing edge is the right edge.  Vertically
                  the component is positioned so that its top edge touches the
                  baseline of the starting row.  If the starting row does not
                  have a baseline it will be vertically centered.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="gridx" type="int" line="231"/>
            <javadoc line="231">
                Specifies the cell containing the leading edge of the component&apos;s
                  display area, where the first cell in a row has &lt;code&gt;gridx=0&lt;/code&gt;.
                  The leading edge of a component&apos;s display area is its left edge for
                  a horizontal, left-to-right container and its right edge for a
                  horizontal, right-to-left container.
                  The value
                  &lt;code&gt;RELATIVE&lt;/code&gt; specifies that the component be placed
                  immediately following the component that was added to the container
                  just before this component was added.
                  &lt;p&gt;
                  The default value is &lt;code&gt;RELATIVE&lt;/code&gt;.
                  &lt;code&gt;gridx&lt;/code&gt; should be a non-negative value.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridy                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
            </javadoc>
            <declaration name="gridy" type="int" line="250"/>
            <javadoc line="250">
                Specifies the cell at the top of the component&apos;s display area,
                  where the topmost cell has &lt;code&gt;gridy=0&lt;/code&gt;. The value
                  &lt;code&gt;RELATIVE&lt;/code&gt; specifies that the component be placed just
                  below the component that was added to the container just before
                  this component was added.
                  &lt;p&gt;
                  The default value is &lt;code&gt;RELATIVE&lt;/code&gt;.
                  &lt;code&gt;gridy&lt;/code&gt; should be a non-negative value.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridx                    
                </see>
            </javadoc>
            <declaration name="gridwidth" type="int" line="264"/>
            <javadoc line="264">
                Specifies the number of cells in a row for the component&apos;s
                  display area.
                  &lt;p&gt;
                  Use &lt;code&gt;REMAINDER&lt;/code&gt; to specify that the component&apos;s
                  display area will be from &lt;code&gt;gridx&lt;/code&gt; to the last
                  cell in the row.
                  Use &lt;code&gt;RELATIVE&lt;/code&gt; to specify that the component&apos;s
                  display area will be from &lt;code&gt;gridx&lt;/code&gt; to the next
                  to the last one in its row.
                  &lt;p&gt;
                  &lt;code&gt;gridwidth&lt;/code&gt; should be non-negative and the default
                  value is 1.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridheight                    
                </see>
            </javadoc>
            <declaration name="gridheight" type="int" line="282"/>
            <javadoc line="282">
                Specifies the number of cells in a column for the component&apos;s
                  display area.
                  &lt;p&gt;
                  Use &lt;code&gt;REMAINDER&lt;/code&gt; to specify that the component&apos;s
                  display area will be from &lt;code&gt;gridy&lt;/code&gt; to the last
                  cell in the column.
                  Use &lt;code&gt;RELATIVE&lt;/code&gt; to specify that the component&apos;s
                  display area will be from &lt;code&gt;gridy&lt;/code&gt; to the next
                  to the last one in its column.
                  &lt;p&gt;
                  &lt;code&gt;gridheight&lt;/code&gt; should be a non-negative value and the
                  default value is 1.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridwidth                    
                </see>
            </javadoc>
            <declaration name="weightx" type="double" line="300"/>
            <javadoc line="300">
                Specifies how to distribute extra horizontal space.
                  &lt;p&gt;
                  The grid bag layout manager calculates the weight of a column to
                  be the maximum &lt;code&gt;weightx&lt;/code&gt; of all the components in a
                  column. If the resulting layout is smaller horizontally than the area
                  it needs to fill, the extra space is distributed to each column in
                  proportion to its weight. A column that has a weight of zero receives
                  no extra space.
                  &lt;p&gt;
                  If all the weights are zero, all the extra space appears between
                  the grids of the cell and the left and right edges.
                  &lt;p&gt;
                  The default value of this field is &lt;code&gt;0&lt;/code&gt;.
                  &lt;code&gt;weightx&lt;/code&gt; should be a non-negative value.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#weighty                    
                </see>
            </javadoc>
            <declaration name="weighty" type="double" line="320"/>
            <javadoc line="320">
                Specifies how to distribute extra vertical space.
                  &lt;p&gt;
                  The grid bag layout manager calculates the weight of a row to be
                  the maximum &lt;code&gt;weighty&lt;/code&gt; of all the components in a row.
                  If the resulting layout is smaller vertically than the area it
                  needs to fill, the extra space is distributed to each row in
                  proportion to its weight. A row that has a weight of zero receives no
                  extra space.
                  &lt;p&gt;
                  If all the weights are zero, all the extra space appears between
                  the grids of the cell and the top and bottom edges.
                  &lt;p&gt;
                  The default value of this field is &lt;code&gt;0&lt;/code&gt;.
                  &lt;code&gt;weighty&lt;/code&gt; should be a non-negative value.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#weightx                    
                </see>
            </javadoc>
            <declaration name="anchor" type="int" line="340"/>
            <javadoc line="340">
                This field is used when the component is smaller than its
                  display area. It determines where, within the display area, to
                  place the component.
                  &lt;p&gt; There are three kinds of possible values: orientation
                  relative, baseline relative and absolute.  Orientation relative
                  values are interpreted relative to the container&apos;s component
                  orientation property, baseline relative values are interpreted
                  relative to the baseline and absolute values are not.  The
                  absolute values are:
                  &lt;code&gt;CENTER&lt;/code&gt;, &lt;code&gt;NORTH&lt;/code&gt;, &lt;code&gt;NORTHEAST&lt;/code&gt;,
                  &lt;code&gt;EAST&lt;/code&gt;, &lt;code&gt;SOUTHEAST&lt;/code&gt;, &lt;code&gt;SOUTH&lt;/code&gt;,
                  &lt;code&gt;SOUTHWEST&lt;/code&gt;, &lt;code&gt;WEST&lt;/code&gt;, and &lt;code&gt;NORTHWEST&lt;/code&gt;.
                  The orientation relative values are: &lt;code&gt;PAGE_START&lt;/code&gt;,
                  &lt;code&gt;PAGE_END&lt;/code&gt;,
                  &lt;code&gt;LINE_START&lt;/code&gt;, &lt;code&gt;LINE_END&lt;/code&gt;,
                  &lt;code&gt;FIRST_LINE_START&lt;/code&gt;, &lt;code&gt;FIRST_LINE_END&lt;/code&gt;,
                  &lt;code&gt;LAST_LINE_START&lt;/code&gt; and &lt;code&gt;LAST_LINE_END&lt;/code&gt;.  The
                  baseline relative values are:
                  &lt;code&gt;BASELINE&lt;/code&gt;, &lt;code&gt;BASELINE_LEADING&lt;/code&gt;,
                  &lt;code&gt;BASELINE_TRAILING&lt;/code&gt;,
                  &lt;code&gt;ABOVE_BASELINE&lt;/code&gt;, &lt;code&gt;ABOVE_BASELINE_LEADING&lt;/code&gt;,
                  &lt;code&gt;ABOVE_BASELINE_TRAILING&lt;/code&gt;,
                  &lt;code&gt;BELOW_BASELINE&lt;/code&gt;, &lt;code&gt;BELOW_BASELINE_LEADING&lt;/code&gt;,
                  and &lt;code&gt;BELOW_BASELINE_TRAILING&lt;/code&gt;.
                  The default value is &lt;code&gt;CENTER&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
            </javadoc>
            <declaration name="fill" type="int" line="371"/>
            <javadoc line="371">
                This field is used when the component&apos;s display area is larger
                  than the component&apos;s requested size. It determines whether to
                  resize the component, and if so, how.
                  &lt;p&gt;
                  The following values are valid for &lt;code&gt;fill&lt;/code&gt;:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;code&gt;NONE&lt;/code&gt;: Do not resize the component.
                  &lt;li&gt;
                  &lt;code&gt;HORIZONTAL&lt;/code&gt;: Make the component wide enough to fill
                  its display area horizontally, but do not change its height.
                  &lt;li&gt;
                  &lt;code&gt;VERTICAL&lt;/code&gt;: Make the component tall enough to fill its
                  display area vertically, but do not change its width.
                  &lt;li&gt;
                  &lt;code&gt;BOTH&lt;/code&gt;: Make the component fill its display area
                  entirely.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The default value is &lt;code&gt;NONE&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
            </javadoc>
            <declaration name="insets" type="Insets" line="397"/>
            <javadoc line="397">
                This field specifies the external padding of the component, the
                  minimum amount of space between the component and the edges of its
                  display area.
                  &lt;p&gt;
                  The default value is &lt;code&gt;new Insets(0, 0, 0, 0)&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
            </javadoc>
            <declaration name="ipadx" type="int" line="407"/>
            <javadoc line="407">
                This field specifies the internal padding of the component, how much
                  space to add to the minimum width of the component. The width of
                  the component is at least its minimum width plus
                  &lt;code&gt;ipadx&lt;/code&gt; pixels.
                  &lt;p&gt;
                  The default value is &lt;code&gt;0&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#ipady                    
                </see>
            </javadoc>
            <declaration name="ipady" type="int" line="419"/>
            <javadoc line="419">
                This field specifies the internal padding, that is, how much
                  space to add to the minimum height of the component. The height of
                  the component is at least its minimum height plus
                  &lt;code&gt;ipady&lt;/code&gt; pixels.
                  &lt;p&gt;
                  The default value is 0.                
                <serial>
                                        
                </serial>
                <see>
                    #clone()                    
                </see>
                <see>
                    java.awt.GridBagConstraints#ipadx                    
                </see>
            </javadoc>
            <declaration name="tempX" type="int" line="431"/>
            <javadoc line="431">
                Temporary place holder for the x coordinate.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="tempY" type="int" line="436"/>
            <javadoc line="436">
                Temporary place holder for the y coordinate.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="tempWidth" type="int" line="441"/>
            <javadoc line="441">
                Temporary place holder for the Width of the component.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="tempHeight" type="int" line="446"/>
            <javadoc line="446">
                Temporary place holder for the Height of the component.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="minWidth" type="int" line="451"/>
            <javadoc line="451">
                The minimum width of the component.  It is used to calculate
                  &lt;code&gt;ipady&lt;/code&gt;, where the default will be 0.                
                <serial>
                                        
                </serial>
                <see>
                    #ipady                    
                </see>
            </javadoc>
            <declaration name="minHeight" type="int" line="458"/>
            <javadoc line="458">
                The minimum height of the component. It is used to calculate
                  &lt;code&gt;ipadx&lt;/code&gt;, where the default will be 0.                
                <serial>
                                        
                </serial>
                <see>
                    #ipadx                    
                </see>
            </javadoc>
            <declaration name="ascent" type="int" line="465"/>
            <declaration name="descent" type="int" line="466"/>
            <declaration name="baselineResizeBehavior" type="Component.BaselineResizeBehavior" line="467"/>
            <declaration name="centerPadding" type="int" line="468"/>
            <declaration name="centerOffset" type="int" line="469"/>
            <declaration name="serialVersionUID" type="long" line="470"/>
            <javadoc line="471">
                Creates a &lt;code&gt;GridBagConstraint&lt;/code&gt; object with
                  all of its fields set to their default value.                
            </javadoc>
            <method name="GridBagConstraints" type="constructor" line="475"/>
            <javadoc line="488">
                Creates a &lt;code&gt;GridBagConstraints&lt;/code&gt; object with
                  all of its fields set to the passed-in arguments.
                  Note: Because the use of this constructor hinders readability
                  of source code, this constructor should only be used by
                  automatic source code generation tools.                
                <param>
                    gridx     The initial gridx value.                    
                </param>
                <param>
                    gridy     The initial gridy value.                    
                </param>
                <param>
                    gridwidth The initial gridwidth value.                    
                </param>
                <param>
                    gridheight        The initial gridheight value.                    
                </param>
                <param>
                    weightx   The initial weightx value.                    
                </param>
                <param>
                    weighty   The initial weighty value.                    
                </param>
                <param>
                    anchor    The initial anchor value.                    
                </param>
                <param>
                    fill      The initial fill value.                    
                </param>
                <param>
                    insets    The initial insets value.                    
                </param>
                <param>
                    ipadx     The initial ipadx value.                    
                </param>
                <param>
                    ipady     The initial ipady value.                    
                </param>
                <see>
                    java.awt.GridBagConstraints#gridx                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridy                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridwidth                    
                </see>
                <see>
                    java.awt.GridBagConstraints#gridheight                    
                </see>
                <see>
                    java.awt.GridBagConstraints#weightx                    
                </see>
                <see>
                    java.awt.GridBagConstraints#weighty                    
                </see>
                <see>
                    java.awt.GridBagConstraints#anchor                    
                </see>
                <see>
                    java.awt.GridBagConstraints#fill                    
                </see>
                <see>
                    java.awt.GridBagConstraints#insets                    
                </see>
                <see>
                    java.awt.GridBagConstraints#ipadx                    
                </see>
                <see>
                    java.awt.GridBagConstraints#ipady                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="GridBagConstraints" type="constructor" line="518">
                <params>
                    <param name="gridx" type="int"/>
                    <param name="gridy" type="int"/>
                    <param name="gridwidth" type="int"/>
                    <param name="gridheight" type="int"/>
                    <param name="weightx" type="double"/>
                    <param name="weighty" type="double"/>
                    <param name="anchor" type="int"/>
                    <param name="fill" type="int"/>
                    <param name="insets" type="Insets"/>
                    <param name="ipadx" type="int"/>
                    <param name="ipady" type="int"/>
                </params>
            </method>
            <javadoc line="531">
                Creates a copy of this grid bag constraint.                
                <return>
                    a copy of this grid bag constraint                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="535">
                <scope line="536">
                    <declaration name="c" type="GridBagConstraints" line="537"/>
                </scope>
                <scope line="541"/>
            </method>
            <method name="isVerticallyResizable" type="boolean" line="545"/>
        </class>
    </source>