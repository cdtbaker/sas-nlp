<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <class name="GridLayout" line="2">
            <implements interface="LayoutManager"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="2">
                The &lt;code&gt;GridLayout&lt;/code&gt; class is a layout manager that
                  lays out a container&apos;s components in a rectangular grid.
                  The container is divided into equal-sized rectangles,
                  and one component is placed in each rectangle.
                  For example, the following is an applet that lays out six buttons
                  into three rows and two columns:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;
                  &lt;pre&gt;
                  import java.awt.;
                  import java.applet.Applet;
                  public class ButtonGrid extends Applet {
                  public void init() {
                  setLayout(new GridLayout(3,2));
                  add(new Button(&quot;1&quot;));
                  add(new Button(&quot;2&quot;));
                  add(new Button(&quot;3&quot;));
                  add(new Button(&quot;4&quot;));
                  add(new Button(&quot;5&quot;));
                  add(new Button(&quot;6&quot;));
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  If the container&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt; property is horizontal
                  and left-to-right, the above example produces the output shown in Figure 1.
                  If the container&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt; property is horizontal
                  and right-to-left, the example produces the output shown in Figure 2.
                  &lt;p&gt;
                  &lt;center&gt;&lt;table COLS=2 WIDTH=600 summary=&quot;layout&quot;&gt;
                  &lt;tr ALIGN=CENTER&gt;
                  &lt;td&gt;&lt;img SRC=&quot;doc-files/GridLayout-1.gif&quot;
                  alt=&quot;Shows 6 buttons in rows of 2. Row 1 shows buttons 1 then 2.
                  Row 2 shows buttons 3 then 4. Row 3 shows buttons 5 then 6.&quot;&gt;
                  &lt;/td&gt;
                  &lt;td ALIGN=CENTER&gt;&lt;img SRC=&quot;doc-files/GridLayout-2.gif&quot;
                  alt=&quot;Shows 6 buttons in rows of 2. Row 1 shows buttons 2 then 1.
                  Row 2 shows buttons 4 then 3. Row 3 shows buttons 6 then 5.&quot;&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr ALIGN=CENTER&gt;
                  &lt;td&gt;Figure 1: Horizontal, Left-to-Right&lt;/td&gt;
                  &lt;td&gt;Figure 2: Horizontal, Right-to-Left&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;&lt;/center&gt;
                  &lt;p&gt;
                  When both the number of rows and the number of columns have
                  been set to non-zero values, either by a constructor or
                  by the &lt;tt&gt;setRows&lt;/tt&gt; and &lt;tt&gt;setColumns&lt;/tt&gt; methods, the number of
                  columns specified is ignored.  Instead, the number of
                  columns is determined from the specified number of rows
                  and the total number of components in the layout. So, for
                  example, if three rows and two columns have been specified
                  and nine components are added to the layout, they will
                  be displayed as three rows of three columns.  Specifying
                  the number of columns affects the layout only when the
                  number of rows is set to zero.                
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="64"/>
            <declaration name="hgap" type="int" line="65"/>
            <javadoc line="65">
                This is the horizontal gap (in pixels) which specifies the space
                  between columns.  They can be changed at any time.
                  This should be a non-negative integer.                
                <serial>
                                        
                </serial>
                <see>
                    #getHgap()                    
                </see>
                <see>
                    #setHgap(int)                    
                </see>
            </javadoc>
            <declaration name="vgap" type="int" line="74"/>
            <javadoc line="74">
                This is the vertical gap (in pixels) which specifies the space
                  between rows.  They can be changed at any time.
                  This should be a non negative integer.                
                <serial>
                                        
                </serial>
                <see>
                    #getVgap()                    
                </see>
                <see>
                    #setVgap(int)                    
                </see>
            </javadoc>
            <declaration name="rows" type="int" line="83"/>
            <javadoc line="83">
                This is the number of rows specified for the grid.  The number
                  of rows can be changed at any time.
                  This should be a non negative integer, where &apos;0&apos; means
                  &apos;any number&apos; meaning that the number of Rows in that
                  dimension depends on the other dimension.                
                <serial>
                                        
                </serial>
                <see>
                    #getRows()                    
                </see>
                <see>
                    #setRows(int)                    
                </see>
            </javadoc>
            <declaration name="cols" type="int" line="94"/>
            <javadoc line="94">
                This is the number of columns specified for the grid.  The number
                  of columns can be changed at any time.
                  This should be a non negative integer, where &apos;0&apos; means
                  &apos;any number&apos; meaning that the number of Columns in that
                  dimension depends on the other dimension.                
                <serial>
                                        
                </serial>
                <see>
                    #getColumns()                    
                </see>
                <see>
                    #setColumns(int)                    
                </see>
            </javadoc>
            <javadoc line="105">
                Creates a grid layout with a default of one column per component,
                  in a single row.                
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="GridLayout" type="constructor" line="110"/>
            <javadoc line="113">
                Creates a grid layout with the specified number of rows and
                  columns. All components in the layout are given equal size.
                  &lt;p&gt;
                  One, but not both, of &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;cols&lt;/code&gt; can
                  be zero, which means that any number of objects can be placed in a
                  row or in a column.                
                <param>
                    rows   the rows, with the value zero meaning
                      any number of rows.                    
                </param>
                <param>
                    cols   the columns, with the value zero meaning
                      any number of columns.                    
                </param>
            </javadoc>
            <method name="GridLayout" type="constructor" line="125">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                </params>
            </method>
            <javadoc line="128">
                Creates a grid layout with the specified number of rows and
                  columns. All components in the layout are given equal size.
                  &lt;p&gt;
                  In addition, the horizontal and vertical gaps are set to the
                  specified values. Horizontal gaps are placed between each
                  of the columns. Vertical gaps are placed between each of
                  the rows.
                  &lt;p&gt;
                  One, but not both, of &lt;code&gt;rows&lt;/code&gt; and &lt;code&gt;cols&lt;/code&gt; can
                  be zero, which means that any number of objects can be placed in a
                  row or in a column.
                  &lt;p&gt;
                  All &lt;code&gt;GridLayout&lt;/code&gt; constructors defer to this one.                
                <param>
                    rows   the rows, with the value zero meaning
                      any number of rows                    
                </param>
                <param>
                    cols   the columns, with the value zero meaning
                      any number of columns                    
                </param>
                <param>
                    hgap   the horizontal gap                    
                </param>
                <param>
                    vgap   the vertical gap                    
                </param>
                <exception>
                    IllegalArgumentException  if the value of both
                      <code>rows</code> and <code>cols</code> is
                      set to zero                    
                </exception>
            </javadoc>
            <method name="GridLayout" type="constructor" line="152">
                <params>
                    <param name="rows" type="int"/>
                    <param name="cols" type="int"/>
                    <param name="hgap" type="int"/>
                    <param name="vgap" type="int"/>
                </params>
                <scope line="153"/>
            </method>
            <javadoc line="161">
                Gets the number of rows in this layout.                
                <return>
                    the number of rows in this layout                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getRows" type="int" line="166"/>
            <javadoc line="169">
                Sets the number of rows in this layout to the specified value.                
                <param>
                    rows   the number of rows in this layout                    
                </param>
                <exception>
                    IllegalArgumentException  if the value of both
                      <code>rows</code> and <code>cols</code> is set to zero                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setRows" type="void" line="176">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <scope line="177"/>
            </method>
            <javadoc line="182">
                Gets the number of columns in this layout.                
                <return>
                    the number of columns in this layout                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getColumns" type="int" line="187"/>
            <javadoc line="190">
                Sets the number of columns in this layout to the specified value.
                  Setting the number of columns has no affect on the layout
                  if the number of rows specified by a constructor or by
                  the &lt;tt&gt;setRows&lt;/tt&gt; method is non-zero. In that case, the number
                  of columns displayed in the layout is determined by the total
                  number of components and the number of rows specified.                
                <param>
                    cols   the number of columns in this layout                    
                </param>
                <exception>
                    IllegalArgumentException  if the value of both
                      <code>rows</code> and <code>cols</code> is set to zero                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setColumns" type="void" line="202">
                <params>
                    <param name="cols" type="int"/>
                </params>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Gets the horizontal gap between components.                
                <return>
                    the horizontal gap between components                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getHgap" type="int" line="213"/>
            <javadoc line="216">
                Sets the horizontal gap between components to the specified value.                
                <param>
                    hgap   the horizontal gap between components                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setHgap" type="void" line="221">
                <params>
                    <param name="hgap" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Gets the vertical gap between components.                
                <return>
                    the vertical gap between components                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getVgap" type="int" line="229"/>
            <javadoc line="232">
                Sets the vertical gap between components to the specified value.                
                <param>
                    vgap  the vertical gap between components                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setVgap" type="void" line="237">
                <params>
                    <param name="vgap" type="int"/>
                </params>
            </method>
            <javadoc line="240">
                Adds the specified component with the specified name to the layout.                
                <param>
                    name the name of the component                    
                </param>
                <param>
                    comp the component to be added                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="245">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="247">
                Removes the specified component from the layout.                
                <param>
                    comp the component to be removed                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="251">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="253">
                Determines the preferred size of the container argument using
                  this grid layout.
                  &lt;p&gt;
                  The preferred width of a grid layout is the largest preferred
                  width of all of the components in the container times the number of
                  columns, plus the horizontal padding times the number of columns
                  minus one, plus the left and right insets of the target container.
                  &lt;p&gt;
                  The preferred height of a grid layout is the largest preferred
                  height of all of the components in the container times the number of
                  rows, plus the vertical padding times the number of rows minus one,
                  plus the top and bottom insets of the target container.                
                <param>
                    parent   the container in which to do the layout                    
                </param>
                <return>
                    the preferred dimensions to lay out the
                      subcomponents of the specified container                    
                </return>
                <see>
                    java.awt.GridLayout#minimumLayoutSize                    
                </see>
                <see>
                    java.awt.Container#getPreferredSize()                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="272">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="273">
                    <declaration name="insets" type="Insets" line="274"/>
                    <declaration name="ncomponents" type="int" line="275"/>
                    <declaration name="nrows" type="int" line="276"/>
                    <declaration name="ncols" type="int" line="277"/>
                    <scope line="278"/>
                    <scope line="281"/>
                    <declaration name="w" type="int" line="284"/>
                    <declaration name="h" type="int" line="285"/>
                    <scope line="286">
                        <declaration name="comp" type="Component" line="287"/>
                        <declaration name="d" type="Dimension" line="288"/>
                        <scope line="289"/>
                        <scope line="292"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="299">
                Determines the minimum size of the container argument using this
                  grid layout.
                  &lt;p&gt;
                  The minimum width of a grid layout is the largest minimum width
                  of all of the components in the container times the number of columns,
                  plus the horizontal padding times the number of columns minus one,
                  plus the left and right insets of the target container.
                  &lt;p&gt;
                  The minimum height of a grid layout is the largest minimum height
                  of all of the components in the container times the number of rows,
                  plus the vertical padding times the number of rows minus one, plus
                  the top and bottom insets of the target container.                
                <param>
                    parent   the container in which to do the layout                    
                </param>
                <return>
                    the minimum dimensions needed to lay out the
                      subcomponents of the specified container                    
                </return>
                <see>
                    java.awt.GridLayout#preferredLayoutSize                    
                </see>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="318">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="319">
                    <declaration name="insets" type="Insets" line="320"/>
                    <declaration name="ncomponents" type="int" line="321"/>
                    <declaration name="nrows" type="int" line="322"/>
                    <declaration name="ncols" type="int" line="323"/>
                    <scope line="324"/>
                    <scope line="327"/>
                    <declaration name="w" type="int" line="330"/>
                    <declaration name="h" type="int" line="331"/>
                    <scope line="332">
                        <declaration name="comp" type="Component" line="333"/>
                        <declaration name="d" type="Dimension" line="334"/>
                        <scope line="335"/>
                        <scope line="338"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="345">
                Lays out the specified container using this layout.
                  &lt;p&gt;
                  This method reshapes the components in the specified target
                  container in order to satisfy the constraints of the
                  &lt;code&gt;GridLayout&lt;/code&gt; object.
                  &lt;p&gt;
                  The grid layout manager determines the size of individual
                  components by dividing the free space in the container into
                  equal-sized portions according to the number of rows and columns
                  in the layout. The container&apos;s free space equals the container&apos;s
                  size minus any insets and any specified horizontal or vertical
                  gap. All components in a grid layout are given the same size.                
                <param>
                    parent   the container in which to do the layout                    
                </param>
                <see>
                    java.awt.Container                    
                </see>
                <see>
                    java.awt.Container#doLayout                    
                </see>
            </javadoc>
            <method name="layoutContainer" type="void" line="362">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="363">
                    <declaration name="insets" type="Insets" line="364"/>
                    <declaration name="ncomponents" type="int" line="365"/>
                    <declaration name="nrows" type="int" line="366"/>
                    <declaration name="ncols" type="int" line="367"/>
                    <declaration name="ltr" type="boolean" line="368"/>
                    <scope line="369"/>
                    <scope line="372"/>
                    <scope line="375"/>
                    <declaration name="totalGapsWidth" type="int" line="378"/>
                    <declaration name="widthWOInsets" type="int" line="379"/>
                    <declaration name="widthOnComponent" type="int" line="380"/>
                    <declaration name="extraWidthAvailable" type="int" line="381"/>
                    <declaration name="totalGapsHeight" type="int" line="382"/>
                    <declaration name="heightWOInsets" type="int" line="383"/>
                    <declaration name="heightOnComponent" type="int" line="384"/>
                    <declaration name="extraHeightAvailable" type="int" line="385"/>
                    <scope line="386">
                        <scope line="387">
                            <scope line="388">
                                <declaration name="i" type="int" line="389"/>
                                <scope line="390"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="396">
                        <scope line="397">
                            <scope line="398">
                                <declaration name="i" type="int" line="399"/>
                                <scope line="400"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="408">
                Returns the string representation of this grid layout&apos;s values.                
                <return>
                    a string representation of this grid layout                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="412"/>
        </class>
    </source>