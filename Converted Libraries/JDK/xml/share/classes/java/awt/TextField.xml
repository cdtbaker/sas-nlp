<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.awt.peer.TextFieldPeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="TextField" line="9">
            <extends class="TextComponent"/>
            <javadoc line="9">
                A &lt;code&gt;TextField&lt;/code&gt; object is a text component
                  that allows for the editing of a single line of text.
                  &lt;p&gt;
                  For example, the following image depicts a frame with four
                  text fields of varying widths. Two of these text fields
                  display the predefined text &lt;code&gt;&quot;Hello&quot;&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/TextField-1.gif&quot; alt=&quot;The preceding text describes this image.&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  Here is the code that produces these four text fields:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  TextField tf1, tf2, tf3, tf4;
                  // a blank text field
                  tf1 = new TextField();
                  // blank field of 20 columns
                  tf2 = new TextField(&quot;&quot;, 20);
                  // predefined text displayed
                  tf3 = new TextField(&quot;Hello!&quot;);
                  // predefined text in 30 columns
                  tf4 = new TextField(&quot;Hello&quot;, 30);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  Every time the user types a key in the text field, one or
                  more key events are sent to the text field.  A &lt;code&gt;KeyEvent&lt;/code&gt;
                  may be one of three types: keyPressed, keyReleased, or keyTyped.
                  The properties of a key event indicate which of these types
                  it is, as well as additional information about the event,
                  such as what modifiers are applied to the key event and the
                  time at which the event occurred.
                  &lt;p&gt;
                  The key event is passed to every &lt;code&gt;KeyListener&lt;/code&gt;
                  or &lt;code&gt;KeyAdapter&lt;/code&gt; object which registered to receive such
                  events using the component&apos;s &lt;code&gt;addKeyListener&lt;/code&gt; method.
                  (&lt;code&gt;KeyAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;KeyListener&lt;/code&gt; interface.)
                  &lt;p&gt;
                  It is also possible to fire an &lt;code&gt;ActionEvent&lt;/code&gt;.
                  If action events are enabled for the text field, they may
                  be fired by pressing the &lt;code&gt;Return&lt;/code&gt; key.
                  &lt;p&gt;
                  The &lt;code&gt;TextField&lt;/code&gt; class&apos;s &lt;code&gt;processEvent&lt;/code&gt;
                  method examines the action event and passes it along to
                  &lt;code&gt;processActionEvent&lt;/code&gt;. The latter method redirects the
                  event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have
                  registered to receive action events generated by this
                  text field.                
                <author>
                    Sami Shaio                    
                </author>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.KeyAdapter                    
                </see>
                <see>
                    java.awt.event.KeyListener                    
                </see>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.Component#addKeyListener                    
                </see>
                <see>
                    java.awt.TextField#processEvent                    
                </see>
                <see>
                    java.awt.TextField#processActionEvent                    
                </see>
                <see>
                    java.awt.TextField#addActionListener                    
                </see>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="columns" type="int" line="70"/>
            <javadoc line="70">
                The number of columns in the text field.
                  A column is an approximate average character
                  width that is platform-dependent.
                  Guaranteed to be non-negative.                
                <serial>
                                        
                </serial>
                <see>
                    #setColumns(int)                    
                </see>
                <see>
                    #getColumns()                    
                </see>
            </javadoc>
            <declaration name="echoChar" type="char" line="80"/>
            <javadoc line="80">
                The echo character, which is used when
                  the user wishes to disguise the characters
                  typed into the text field.
                  The disguises are removed if echoChar = &lt;code&gt;0&lt;/code&gt;.                
                <serial>
                                        
                </serial>
                <see>
                    #getEchoChar()                    
                </see>
                <see>
                    #setEchoChar(char)                    
                </see>
                <see>
                    #echoCharIsSet()                    
                </see>
            </javadoc>
            <declaration name="actionListener" type="ActionListener" line="91"/>
            <declaration name="base" type="String" line="92"/>
            <declaration name="nameCounter" type="int" line="93"/>
            <declaration name="serialVersionUID" type="long" line="94"/>
            <method name="initIDs" type="void" line="95"/>
            <javadoc line="95">
                Initialize JNI field and method ids                
            </javadoc>
            <scope line="99">
                <scope line="101"/>
            </scope>
            <javadoc line="105">
                Constructs a new text field.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="TextField" type="constructor" line="111"/>
            <javadoc line="114">
                Constructs a new text field initialized with the specified text.                
                <param>
                    text       the text to be displayed. If
                      <code>text</code> is <code>null</code>, the empty
                      string <code>""</code> will be displayed.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="TextField" type="constructor" line="123">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="126">
                Constructs a new empty text field with the specified number
                  of columns.  A column is an approximate average character
                  width that is platform-dependent.                
                <param>
                    columns     the number of columns.  If
                      <code>columns</code> is less than <code>0</code>,
                      <code>columns</code> is set to <code>0</code>.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="TextField" type="constructor" line="137">
                <params>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Constructs a new text field initialized with the specified text
                  to be displayed, and wide enough to hold the specified
                  number of columns. A column is an approximate average character
                  width that is platform-dependent.                
                <param>
                    text       the text to be displayed. If
                      <code>text</code> is <code>null</code>, the empty
                      string <code>""</code> will be displayed.                    
                </param>
                <param>
                    columns     the number of columns.  If
                      <code>columns</code> is less than <code>0</code>,
                      <code>columns</code> is set to <code>0</code>.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="TextField" type="constructor" line="155">
                <params>
                    <param name="text" type="String"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Construct a name for this component.  Called by getName() when the
                  name is null.                
            </javadoc>
            <method name="constructComponentName" type="String" line="163">
                <scope line="164"/>
            </method>
            <javadoc line="168">
                Creates the TextField&apos;s peer.  The peer allows us to modify the
                  appearance of the TextField without changing its functionality.                
            </javadoc>
            <method name="addNotify" type="void" line="172">
                <scope line="173"/>
            </method>
            <javadoc line="178">
                Gets the character that is to be used for echoing.
                  &lt;p&gt;
                  An echo character is useful for text fields where
                  user input should not be echoed to the screen, as in
                  the case of a text field for entering a password.
                  If &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;, user
                  input is echoed to the screen unchanged.
                  &lt;p&gt;
                  A Java platform implementation may support only a limited,
                  non-empty set of echo characters. This function returns the
                  echo character originally requested via setEchoChar(). The echo
                  character actually used by the TextField implementation might be
                  different.                
                <return>
                    the echo character for this text field.                    
                </return>
                <see>
                    java.awt.TextField#echoCharIsSet                    
                </see>
                <see>
                    java.awt.TextField#setEchoChar                    
                </see>
            </javadoc>
            <method name="getEchoChar" type="char" line="196"/>
            <javadoc line="199">
                Sets the echo character for this text field.
                  &lt;p&gt;
                  An echo character is useful for text fields where
                  user input should not be echoed to the screen, as in
                  the case of a text field for entering a password.
                  Setting &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; allows
                  user input to be echoed to the screen again.
                  &lt;p&gt;
                  A Java platform implementation may support only a limited,
                  non-empty set of echo characters. Attempts to set an
                  unsupported echo character will cause the default echo
                  character to be used instead. Subsequent calls to getEchoChar()
                  will return the echo character originally requested. This might
                  or might not be identical to the echo character actually
                  used by the TextField implementation.                
                <param>
                    c   the echo character for this text field.                    
                </param>
                <see>
                    java.awt.TextField#echoCharIsSet                    
                </see>
                <see>
                    java.awt.TextField#getEchoChar                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setEchoChar" type="void" line="220">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="223">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;setEchoChar(char)&lt;/code&gt;.                
            </javadoc>
            <method name="setEchoCharacter" type="void" line="227">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="228">
                    <declaration name="peer" type="TextFieldPeer" line="230"/>
                    <scope line="231"/>
                </scope>
            </method>
            <javadoc line="236">
                Sets the text that is presented by this
                  text component to be the specified text.                
                <param>
                    t   the new text.                    
                </param>
                <see>
                    java.awt.TextComponent#getText                    
                </see>
            </javadoc>
            <method name="setText" type="void" line="242">
                <params>
                    <param name="t" type="String"/>
                </params>
            </method>
            <javadoc line="246">
                Indicates whether or not this text field has a
                  character set for echoing.
                  &lt;p&gt;
                  An echo character is useful for text fields where
                  user input should not be echoed to the screen, as in
                  the case of a text field for entering a password.                
                <return>
                    <code>true</code> if this text field has
                      a character set for echoing;
                      <code>false</code> otherwise.                    
                </return>
                <see>
                    java.awt.TextField#setEchoChar                    
                </see>
                <see>
                    java.awt.TextField#getEchoChar                    
                </see>
            </javadoc>
            <method name="echoCharIsSet" type="boolean" line="259"/>
            <javadoc line="262">
                Gets the number of columns in this text field. A column is an
                  approximate average character width that is platform-dependent.                
                <return>
                    the number of columns.                    
                </return>
                <see>
                    java.awt.TextField#setColumns                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getColumns" type="int" line="269"/>
            <javadoc line="272">
                Sets the number of columns in this text field. A column is an
                  approximate average character width that is platform-dependent.                
                <param>
                    columns   the number of columns.                    
                </param>
                <see>
                    java.awt.TextField#getColumns                    
                </see>
                <exception>
                    IllegalArgumentException   if the value
                      supplied for <code>columns</code>
                      is less than <code>0</code>.                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="setColumns" type="void" line="282">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="283"/>
                <scope line="284">
                    <scope line="286"/>
                    <scope line="289"/>
                </scope>
                <scope line="293"/>
            </method>
            <javadoc line="297">
                Gets the preferred size of this text field
                  with the specified number of columns.                
                <param>
                    columns the number of columns
                      in this text field.                    
                </param>
                <return>
                    the preferred dimensions for
                      displaying this text field.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="306">
                <params>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="309">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize(int)&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="313">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <scope line="314">
                    <declaration name="peer" type="TextFieldPeer" line="315"/>
                </scope>
            </method>
            <javadoc line="319">
                Gets the preferred size of this text field.                
                <return>
                    the preferred dimensions for
                      displaying this text field.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="325"/>
            <javadoc line="328">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getPreferredSize()&lt;/code&gt;.                
            </javadoc>
            <method name="preferredSize" type="Dimension" line="332">
                <scope line="333"/>
            </method>
            <javadoc line="337">
                Gets the minumum dimensions for a text field with
                  the specified number of columns.                
                <param>
                    columns   the number of columns in
                      this text field.                    
                </param>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="344">
                <params>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="347">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize(int)&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="351">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <scope line="352">
                    <declaration name="peer" type="TextFieldPeer" line="353"/>
                </scope>
            </method>
            <javadoc line="357">
                Gets the minumum dimensions for this text field.                
                <return>
                    the minimum dimensions for
                      displaying this text field.                    
                </return>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="363"/>
            <javadoc line="366">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getMinimumSize()&lt;/code&gt;.                
            </javadoc>
            <method name="minimumSize" type="Dimension" line="370">
                <scope line="371"/>
            </method>
            <javadoc line="375">
                Adds the specified action listener to receive
                  action events from this text field.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener.                    
                </param>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addActionListener" type="void" line="387">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="388"/>
            </method>
            <javadoc line="394">
                Removes the specified action listener so that it no longer
                  receives action events from this text field.
                  If l is null, no exception is thrown and no action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l the action listener.                    
                </param>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeActionListener" type="void" line="406">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="407"/>
            </method>
            <javadoc line="412">
                Returns an array of all the action listeners
                  registered on this textfield.                
                <return>
                    all of this textfield's <code>ActionListener</code>s
                      or an empty array if no action
                      listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <see>
                    java.awt.event#ActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="423"/>
            <javadoc line="426">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;TextField&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;TextField&lt;/code&gt; &lt;code&gt;t&lt;/code&gt;
                  for its action listeners with the following code:
                  &lt;pre&gt;ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this textfield,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getActionListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="454">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="455"/>
                <scope line="456"/>
                <scope line="459"/>
            </method>
            <method name="eventEnabled" type="boolean" line="464">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="465">
                    <scope line="466"/>
                </scope>
            </method>
            <javadoc line="473">
                Processes events on this text field. If the event
                  is an instance of &lt;code&gt;ActionEvent&lt;/code&gt;,
                  it invokes the &lt;code&gt;processActionEvent&lt;/code&gt;
                  method. Otherwise, it invokes &lt;code&gt;processEvent&lt;/code&gt;
                  on the superclass.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ActionEvent                    
                </see>
                <see>
                    java.awt.TextField#processActionEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="487">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="488"/>
            </method>
            <javadoc line="494">
                Processes action events occurring on this text field by
                  dispatching them to any registered
                  &lt;code&gt;ActionListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless action events are
                  enabled for this component. Action events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ActionListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addActionListener&lt;/code&gt;.
                  &lt;li&gt;Action events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the action event                    
                </param>
                <see>
                    java.awt.event.ActionListener                    
                </see>
                <see>
                    java.awt.TextField#addActionListener                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processActionEvent" type="void" line="516">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="listener" type="ActionListener" line="517"/>
                <scope line="518"/>
            </method>
            <javadoc line="522">
                Returns a string representing the state of this &lt;code&gt;TextField&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this text field                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="530">
                <declaration name="str" type="String" line="531"/>
                <scope line="532"/>
            </method>
            <declaration name="textFieldSerializedDataVersion" type="int" line="537"/>
            <javadoc line="537">
                The textField Serialized Data Version.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="542">
                Writes default serializable fields to stream.  Writes
                  a list of serializable ActionListener(s) as optional data.
                  The non-serializable ActionListener(s) are detected and
                  no attempt is made to serialize them.                
                <serialData>
                    Null terminated sequence of zero or more pairs.
                      A pair consists of a String and Object.
                      The String indicates the type of object and
                      is one of the following :
                      ActionListenerK indicating and ActionListener object.                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#actionListenerK                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="555">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="560">
                Read the ObjectInputStream and if it isn&apos;t null,
                  add a listener to receive action events fired by the
                  TextField.  Unrecognized keys or values will be
                  ignored.                
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless()</code> returns
                      <code>true</code>                    
                </exception>
                <see>
                    #removeActionListener(ActionListener)                    
                </see>
                <see>
                    #addActionListener(ActionListener)                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="572">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="574"/>
                <declaration name="keyOrNull" type="Object" line="577"/>
                <scope line="578">
                    <declaration name="key" type="String" line="579"/>
                    <scope line="580"/>
                    <scope line="583"/>
                </scope>
            </method>
            <javadoc line="588">
                Gets the AccessibleContext associated with this TextField.
                  For text fields, the AccessibleContext takes the form of an
                  AccessibleAWTTextField.
                  A new AccessibleAWTTextField instance is created if necessary.                
                <return>
                    an AccessibleAWTTextField that serves as the
                      AccessibleContext of this TextField                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="597">
                <scope line="598"/>
            </method>
            <class name="AccessibleAWTTextField" line="603">
                <extends class="AccessibleAWTTextComponent"/>
                <javadoc line="603">
                    This class implements accessibility support for the
                      &lt;code&gt;TextField&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to text field user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="610"/>
                <javadoc line="611">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="617">
                    <declaration name="states" type="AccessibleStateSet" line="618"/>
                </method>
            </class>
        </class>
    </source>