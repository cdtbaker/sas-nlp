<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.peer">
        <import package="java.awt"/>
        <import package="java.awt.event.PaintEvent"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="sun.awt.CausedFocusEvent"/>
        <import package="sun.java2d.pipe.Region"/>
        <interface name="ComponentPeer">
            <javadoc line="39">
                The peer interface for {@link Component}. This is the top level peer
                  interface for widgets and defines the bulk of methods for AWT component
                  peers. Most component peers have to implement this interface (via one
                  of the subinterfaces), except menu components, which implement{@link MenuComponentPeer}.
                  The peer interfaces are intended only for use in porting
                  the AWT. They are not intended for use by application
                  developers, and developers should not implement peers
                  nor invoke any of the peer methods directly on the peer
                  instances.                
            </javadoc>
            <declaration name="SET_LOCATION" type="int" line="54"/>
            <javadoc line="54">
                Operation for {@link #setBounds(int,int,int,int,int)}, indicating
                  a change in the component location only.                
                <see>
                    #setBounds(int,int,int,int,int)                    
                </see>
            </javadoc>
            <declaration name="SET_SIZE" type="int" line="62"/>
            <javadoc line="62">
                Operation for {@link #setBounds(int,int,int,int,int)}, indicating
                  a change in the component size only.                
                <see>
                    #setBounds(int,int,int,int,int)                    
                </see>
            </javadoc>
            <declaration name="SET_BOUNDS" type="int" line="70"/>
            <javadoc line="70">
                Operation for {@link #setBounds(int,int,int,int,int)}, indicating
                  a change in the component size and location.                
                <see>
                    #setBounds(int,int,int,int,int)                    
                </see>
            </javadoc>
            <declaration name="SET_CLIENT_SIZE" type="int" line="78"/>
            <javadoc line="78">
                Operation for {@link #setBounds(int,int,int,int,int)}, indicating
                  a change in the component client size. This is used for setting
                  the &apos;inside&apos; size of windows, without the border insets.                
                <see>
                    #setBounds(int,int,int,int,int)                    
                </see>
            </javadoc>
            <declaration name="RESET_OPERATION" type="int" line="87"/>
            <javadoc line="87">
                Resets the setBounds() operation to DEFAULT_OPERATION. This is not
                  passed into {@link #setBounds(int,int,int,int,int)}.
                  TODO: This is only used internally and should probably be moved outside
                  the peer interface.                
                <see>
                    Component#setBoundsOp                    
                </see>
            </javadoc>
            <declaration name="NO_EMBEDDED_CHECK" type="int" line="98"/>
            <javadoc line="98">
                A flag that is used to suppress checks for embedded frames.
                  TODO: This is only used internally and should probably be moved outside
                  the peer interface.                
            </javadoc>
            <declaration name="DEFAULT_OPERATION" type="int" line="106"/>
            <javadoc line="106">
                The default operation, which is to set size and location.
                  TODO: This is only used internally and should probably be moved outside
                  the peer interface.                
                <see>
                    Component#setBoundsOp                    
                </see>
            </javadoc>
            <method name="isObscured" type="boolean" line="116"/>
            <javadoc line="116">
                Determines if a component has been obscured, i.e. by an overlapping
                  window or similar. This is used by JViewport for optimizing performance.
                  This doesn&apos;t have to be implemented, when{@link #canDetermineObscurity()} returns {@code false}.                
                <return>
                    {@code true} when the component has been obscured,{@code false} otherwise                    
                </return>
                <see>
                    #canDetermineObscurity()                    
                </see>
                <see>
                    javax.swing.JViewport#needsRepaintAfterBlit                    
                </see>
            </javadoc>
            <method name="canDetermineObscurity" type="boolean" line="130"/>
            <javadoc line="130">
                Returns {@code true} when the peer can determine if a component
                  has been obscured, {@code false} false otherwise.                
                <return>
                    {@code true} when the peer can determine if a component
                      has been obscured, {@code false} false otherwise                    
                </return>
                <see>
                    #isObscured()                    
                </see>
                <see>
                    javax.swing.JViewport#needsRepaintAfterBlit                    
                </see>
            </javadoc>
            <method name="setVisible" type="void" line="142"/>
            <javadoc line="142">
                Makes a component visible or invisible.                
                <param>
                    v {@code true} to make a component visible,{@code false} to make it invisible                    
                </param>
                <see>
                    Component#setVisible(boolean)                    
                </see>
            </javadoc>
            <method name="setEnabled" type="void" line="152"/>
            <javadoc line="152">
                Enables or disables a component. Disabled components are usually grayed
                  out and cannot be activated.                
                <param>
                    e {@code true} to enable the component, {@code false}to disable it                    
                </param>
                <see>
                    Component#setEnabled(boolean)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="163"/>
            <javadoc line="163">
                Paints the component to the specified graphics context. This is called
                  by {@link Component#paintAll(Graphics)} to paint the component.                
                <param>
                    g the graphics context to paint to                    
                </param>
                <see>
                    Component#paintAll(Graphics)                    
                </see>
            </javadoc>
            <method name="print" type="void" line="173"/>
            <javadoc line="173">
                Prints the component to the specified graphics context. This is called
                  by {@link Component#printAll(Graphics)} to print the component.                
                <param>
                    g the graphics context to print to                    
                </param>
                <see>
                    Component#printAll(Graphics)                    
                </see>
            </javadoc>
            <method name="setBounds" type="void" line="183"/>
            <javadoc line="183">
                Sets the location or size or both of the component. The location is
                  specified relative to the component&apos;s parent. The {@code op}parameter specifies which properties change. If it is{@link #SET_LOCATION}, then only the location changes (and the size
                  parameters can be ignored). If {@code op} is {@link #SET_SIZE},
                  then only the size changes (and the location can be ignored). If{@code op} is {@link #SET_BOUNDS}, then both change. There is a
                  special value {@link #SET_CLIENT_SIZE}, which is used only for
                  window-like components to set the size of the client (i.e. the &apos;inner&apos;
                  size, without the insets of the window borders).                
                <param>
                    x the X location of the component                    
                </param>
                <param>
                    y the Y location of the component                    
                </param>
                <param>
                    width the width of the component                    
                </param>
                <param>
                    height the height of the component                    
                </param>
                <param>
                    op the operation flag                    
                </param>
                <see>
                    #SET_BOUNDS                    
                </see>
                <see>
                    #SET_LOCATION                    
                </see>
                <see>
                    #SET_SIZE                    
                </see>
                <see>
                    #SET_CLIENT_SIZE                    
                </see>
            </javadoc>
            <method name="handleEvent" type="void" line="208"/>
            <javadoc line="208">
                Called to let the component peer handle events.                
                <param>
                    e the AWT event to handle                    
                </param>
                <see>
                    Component#dispatchEvent(AWTEvent)                    
                </see>
            </javadoc>
            <method name="coalescePaintEvent" type="void" line="217"/>
            <javadoc line="217">
                Called to coalesce paint events.                
                <param>
                    e the paint event to consider to coalesce                    
                </param>
                <see>
                    EventQueue#coalescePaintEvent                    
                </see>
            </javadoc>
            <method name="getLocationOnScreen" type="Point" line="226"/>
            <javadoc line="226">
                Determines the location of the component on the screen.                
                <return>
                    the location of the component on the screen                    
                </return>
                <see>
                    Component#getLocationOnScreen()                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="235"/>
            <javadoc line="235">
                Determines the preferred size of the component.                
                <return>
                    the preferred size of the component                    
                </return>
                <see>
                    Component#getPreferredSize()                    
                </see>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="244"/>
            <javadoc line="244">
                Determines the minimum size of the component.                
                <return>
                    the minimum size of the component                    
                </return>
                <see>
                    Component#getMinimumSize()                    
                </see>
            </javadoc>
            <method name="getColorModel" type="ColorModel" line="253"/>
            <javadoc line="253">
                Returns the color model used by the component.                
                <return>
                    the color model used by the component                    
                </return>
                <see>
                    Component#getColorModel()                    
                </see>
            </javadoc>
            <method name="getToolkit" type="Toolkit" line="262"/>
            <javadoc line="262">
                Returns the toolkit that is responsible for the component.                
                <return>
                    the toolkit that is responsible for the component                    
                </return>
                <see>
                    Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="271"/>
            <javadoc line="271">
                Returns a graphics object to paint on the component.                
                <return>
                    a graphics object to paint on the component                    
                </return>
                <see>
                    Component#getGraphics()                    
                </see>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="282"/>
            <javadoc line="282">
                Returns a font metrics object to determine the metrics properties of
                  the specified font.                
                <param>
                    font the font to determine the metrics for                    
                </param>
                <return>
                    a font metrics object to determine the metrics properties of
                      the specified font                    
                </return>
                <see>
                    Component#getFontMetrics(Font)                    
                </see>
            </javadoc>
            <method name="dispose" type="void" line="295"/>
            <javadoc line="295">
                Disposes all resources held by the component peer. This is called
                  when the component has been disconnected from the component hierarchy
                  and is about to be garbage collected.                
                <see>
                    Component#removeNotify()                    
                </see>
            </javadoc>
            <method name="setForeground" type="void" line="304"/>
            <javadoc line="304">
                Sets the foreground color of this component.                
                <param>
                    c the foreground color to set                    
                </param>
                <see>
                    Component#setForeground(Color)                    
                </see>
            </javadoc>
            <method name="setBackground" type="void" line="313"/>
            <javadoc line="313">
                Sets the background color of this component.                
                <param>
                    c the background color to set                    
                </param>
                <see>
                    Component#setBackground(Color)                    
                </see>
            </javadoc>
            <method name="setFont" type="void" line="322"/>
            <javadoc line="322">
                Sets the font of this component.                
                <param>
                    f the font of this component                    
                </param>
                <see>
                    Component#setFont(Font)                    
                </see>
            </javadoc>
            <method name="updateCursorImmediately" type="void" line="331"/>
            <javadoc line="331">
                Updates the cursor of the component.                
                <see>
                    Component#updateCursorImmediately                    
                </see>
            </javadoc>
            <method name="requestFocus" type="boolean" line="338"/>
            <javadoc line="338">
                Requests focus on this component.                
                <param>
                    lightweightChild the actual lightweight child that requests the
                      focus                    
                </param>
                <param>
                    temporary {@code true} if the focus change is temporary,{@code false} otherwise                    
                </param>
                <param>
                    focusedWindowChangeAllowed {@code true} if changing the
                      focus of the containing window is allowed or not                    
                </param>
                <param>
                    time the time of the focus change request                    
                </param>
                <param>
                    cause the cause of the focus change request                    
                </param>
                <return>
                    {@code true} if the focus change is guaranteed to be
                      granted, {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isFocusable" type="boolean" line="357"/>
            <javadoc line="357">
                Returns {@code true} when the component takes part in the focus
                  traversal, {@code false} otherwise.                
                <return>
                    {@code true} when the component takes part in the focus
                      traversal, {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="createImage" type="Image" line="366"/>
            <javadoc line="366">
                Creates an image using the specified image producer.                
                <param>
                    producer the image producer from which the image pixels will be
                      produced                    
                </param>
                <return>
                    the created image                    
                </return>
                <see>
                    Component#createImage(ImageProducer)                    
                </see>
            </javadoc>
            <method name="createImage" type="Image" line="378"/>
            <javadoc line="378">
                Creates an empty image with the specified width and height. This is
                  generally used as a non-accelerated backbuffer for drawing onto the
                  component (e.g. by Swing).                
                <param>
                    width the width of the image                    
                </param>
                <param>
                    height the height of the image                    
                </param>
                <return>
                    the created image                    
                </return>
                <see>
                    Component#createImage(int,int)                    
                </see>
            </javadoc>
            <method name="createVolatileImage" type="VolatileImage" line="394"/>
            <javadoc line="394">
                Creates an empty volatile image with the specified width and height.
                  This is generally used as an accelerated backbuffer for drawing onto
                  the component (e.g. by Swing).                
                <param>
                    width the width of the image                    
                </param>
                <param>
                    height the height of the image                    
                </param>
                <return>
                    the created volatile image                    
                </return>
                <see>
                    Component#createVolatileImage(int,int)                    
                </see>
            </javadoc>
            <method name="prepareImage" type="boolean" line="409"/>
            <javadoc line="409">
                Prepare the specified image for rendering on this component. This should
                  start loading the image (if not already loaded) and create an
                  appropriate screen representation.                
                <param>
                    img the image to prepare                    
                </param>
                <param>
                    w the width of the screen representation                    
                </param>
                <param>
                    h the height of the screen representation                    
                </param>
                <param>
                    o an image observer to observe the progress                    
                </param>
                <return>
                    {@code true} if the image is already fully prepared,{@code false} otherwise                    
                </return>
                <see>
                    Component#prepareImage(Image,int,int,ImageObserver)                    
                </see>
            </javadoc>
            <method name="checkImage" type="int" line="426"/>
            <javadoc line="426">
                Determines the status of the construction of the screen representaion
                  of the specified image.                
                <param>
                    img the image to check                    
                </param>
                <param>
                    w the target width                    
                </param>
                <param>
                    h the target height                    
                </param>
                <param>
                    o the image observer to notify                    
                </param>
                <return>
                    the status as bitwise ORed ImageObserver flags                    
                </return>
                <see>
                    Component#checkImage(Image,int,int,ImageObserver)                    
                </see>
            </javadoc>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="441"/>
            <javadoc line="441">
                Returns the graphics configuration that corresponds to this component.                
                <return>
                    the graphics configuration that corresponds to this component                    
                </return>
                <see>
                    Component#getGraphicsConfiguration()                    
                </see>
            </javadoc>
            <method name="handlesWheelScrolling" type="boolean" line="450"/>
            <javadoc line="450">
                Determines if the component handles wheel scrolling itself. Otherwise
                  it is delegated to the component&apos;s parent.                
                <return>
                    {@code true} if the component handles wheel scrolling,{@code false} otherwise                    
                </return>
                <see>
                    Component#dispatchEventImpl(AWTEvent)                    
                </see>
            </javadoc>
            <method name="createBuffers" type="void" line="461"/>
            <javadoc line="461">
                Create {@code numBuffers} flipping buffers with the specified
                  buffer capabilities.                
                <param>
                    numBuffers the number of buffers to create                    
                </param>
                <param>
                    caps the buffer capabilities                    
                </param>
                <throws>
                    AWTException if flip buffering is not supported                    
                </throws>
                <see>
                    Component.FlipBufferStrategy#createBuffers                    
                </see>
            </javadoc>
            <method name="getBackBuffer" type="Image" line="475"/>
            <javadoc line="475">
                Returns the back buffer as image.                
                <return>
                    the back buffer as image                    
                </return>
                <see>
                    Component.FlipBufferStrategy#getBackBuffer                    
                </see>
            </javadoc>
            <method name="flip" type="void" line="484"/>
            <javadoc line="484">
                Move the back buffer to the front buffer.                
                <param>
                    x1 the area to be flipped, upper left X coordinate                    
                </param>
                <param>
                    y1 the area to be flipped, upper left Y coordinate                    
                </param>
                <param>
                    x2 the area to be flipped, lower right X coordinate                    
                </param>
                <param>
                    y2 the area to be flipped, lower right Y coordinate                    
                </param>
                <param>
                    flipAction the flip action to perform                    
                </param>
                <see>
                    Component.FlipBufferStrategy#flip                    
                </see>
            </javadoc>
            <method name="destroyBuffers" type="void" line="497"/>
            <javadoc line="497">
                Destroys all created buffers.                
                <see>
                    Component.FlipBufferStrategy#destroyBuffers                    
                </see>
            </javadoc>
            <method name="reparent" type="void" line="504"/>
            <javadoc line="504">
                Reparents this peer to the new parent referenced by{@code newContainer} peer. Implementation depends on toolkit and
                  container.                
                <param>
                    newContainer peer of the new parent container                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isReparentSupported" type="boolean" line="515"/>
            <javadoc line="515">
                Returns whether this peer supports reparenting to another parent without
                  destroying the peer.                
                <return>
                    true if appropriate reparent is supported, false otherwise                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="layout" type="void" line="525"/>
            <javadoc line="525">
                Used by lightweight implementations to tell a ComponentPeer to layout
                  its sub-elements.  For instance, a lightweight Checkbox needs to layout
                  the box, as well as the text label.                
                <see>
                    Component#validate()                    
                </see>
            </javadoc>
            <method name="applyShape" type="void" line="534"/>
            <javadoc line="534">
                Applies the shape to the native component window.                
                <since>
                    1.7                    
                </since>
                <see>
                    Component#applyCompoundShape                    
                </see>
            </javadoc>
            <method name="setZOrder" type="void" line="542"/>
            <javadoc line="542">
                Lowers this component at the bottom of the above HW peer. If the above parameter
                  is null then the method places this component at the top of the Z-order.                
            </javadoc>
            <method name="updateGraphicsData" type="boolean" line="548"/>
            <javadoc line="548">
                Updates internal data structures related to the component&apos;s GC.                
                <return>
                    if the peer needs to be recreated for the changes to take effect                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>