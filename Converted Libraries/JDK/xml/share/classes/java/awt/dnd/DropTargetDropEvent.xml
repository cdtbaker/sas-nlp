<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Point"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.util.List"/>
        <class name="DropTargetDropEvent" line="6">
            <extends class="DropTargetEvent"/>
            <javadoc line="6">
                The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; is delivered
                  via the &lt;code&gt;DropTargetListener&lt;/code&gt; drop() method.
                  &lt;p&gt;
                  The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; reports the &lt;i&gt;source drop actions&lt;/i&gt;
                  and the &lt;i&gt;user drop action&lt;/i&gt; that reflect the current state of the
                  drag-and-drop operation.
                  &lt;p&gt;
                  &lt;i&gt;Source drop actions&lt;/i&gt; is a bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt;
                  that represents the set of drop actions supported by the drag source for
                  this drag-and-drop operation.
                  &lt;p&gt;
                  &lt;i&gt;User drop action&lt;/i&gt; depends on the drop actions supported by the drag
                  source and the drop action selected by the user. The user can select a drop
                  action by pressing modifier keys during the drag operation:
                  &lt;pre&gt;
                  Ctrl + Shift -&gt; ACTION_LINK
                  Ctrl         -&gt; ACTION_COPY
                  Shift        -&gt; ACTION_MOVE
                  &lt;/pre&gt;
                  If the user selects a drop action, the &lt;i&gt;user drop action&lt;/i&gt; is one of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the selected drop action if this
                  drop action is supported by the drag source or
                  &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt; if this drop action is not supported
                  by the drag source.
                  &lt;p&gt;
                  If the user doesn&apos;t select a drop action, the set of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the set of drop actions supported
                  by the drag source is searched for &lt;code&gt;DnDConstants.ACTION_MOVE&lt;/code&gt;,
                  then for &lt;code&gt;DnDConstants.ACTION_COPY&lt;/code&gt;, then for
                  &lt;code&gt;DnDConstants.ACTION_LINK&lt;/code&gt; and the &lt;i&gt;user drop action&lt;/i&gt; is the
                  first constant found. If no constant is found the &lt;i&gt;user drop action&lt;/i&gt;
                  is &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="43">
                Construct a &lt;code&gt;DropTargetDropEvent&lt;/code&gt; given
                  the &lt;code&gt;DropTargetContext&lt;/code&gt; for this operation,
                  the location of the drag &lt;code&gt;Cursor&lt;/code&gt;&apos;s
                  hotspot in the &lt;code&gt;Component&lt;/code&gt;&apos;s coordinates,
                  the currently
                  selected user drop action, and the current set of
                  actions supported by the source.
                  By default, this constructor
                  assumes that the target is not in the same virtual machine as
                  the source; that is, {@link #isLocalTransfer()} will
                  return &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    dtc        The <code>DropTargetContext</code> for this operation                    
                </param>
                <param>
                    cursorLocn The location of the "Drag" Cursor's
                      hotspot in <code>Component</code> coordinates                    
                </param>
                <param>
                    dropAction the user drop action.                    
                </param>
                <param>
                    srcActions the source drop actions.                    
                </param>
                <throws>
                    <code>NullPointerException</code>
                      if cursorLocn is <code>null</code>                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if dropAction is not one of
                      <code>DnDConstants</code>.                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if srcActions is not
                      a bitwise mask of <code>DnDConstants</code>.                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if dtc is <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="DropTargetDropEvent" type="constructor" line="69">
                <params>
                    <param name="dtc" type="DropTargetContext"/>
                    <param name="cursorLocn" type="Point"/>
                    <param name="dropAction" type="int"/>
                    <param name="srcActions" type="int"/>
                </params>
            </method>
            <javadoc line="78">
                Construct a &lt;code&gt;DropTargetEvent&lt;/code&gt; given the
                  &lt;code&gt;DropTargetContext&lt;/code&gt; for this operation,
                  the location of the drag &lt;code&gt;Cursor&lt;/code&gt;&apos;s hotspot
                  in the &lt;code&gt;Component&lt;/code&gt;&apos;s
                  coordinates, the currently selected user drop action,
                  the current set of actions supported by the source,
                  and a &lt;code&gt;boolean&lt;/code&gt; indicating if the source is in the same JVM
                  as the target.
                  &lt;P&gt;                
                <param>
                    dtc        The DropTargetContext for this operation                    
                </param>
                <param>
                    cursorLocn The location of the "Drag" Cursor's
                      hotspot in Component's coordinates                    
                </param>
                <param>
                    dropAction the user drop action.                    
                </param>
                <param>
                    srcActions the source drop actions.                    
                </param>
                <param>
                    isLocal  True if the source is in the same JVM as the target                    
                </param>
                <throws>
                    <code>NullPointerException</code> if cursorLocn is
                      <code>null</code>                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if dropAction is not one of
                      <code>DnDConstants</code>.                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if srcActions is not
                      a bitwise mask of <code>DnDConstants</code>.                    
                </throws>
                <throws>
                    <code>IllegalArgumentException</code> if dtc is <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="DropTargetDropEvent" type="constructor" line="102">
                <params>
                    <param name="dtc" type="DropTargetContext"/>
                    <param name="cursorLocn" type="Point"/>
                    <param name="dropAction" type="int"/>
                    <param name="srcActions" type="int"/>
                    <param name="isLocal" type="boolean"/>
                </params>
            </method>
            <javadoc line="106">
                This method returns a &lt;code&gt;Point&lt;/code&gt;
                  indicating the &lt;code&gt;Cursor&lt;/code&gt;&apos;s current
                  location in the &lt;code&gt;Component&lt;/code&gt;&apos;s coordinates.
                  &lt;P&gt;                
                <return>
                    the current <code>Cursor</code> location in Component's coords.                    
                </return>
            </javadoc>
            <method name="getLocation" type="Point" line="113"/>
            <javadoc line="116">
                This method returns the current DataFlavors.
                  &lt;P&gt;                
                <return>
                    current DataFlavors                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavors" type="DataFlavor[]" line="121"/>
            <javadoc line="124">
                This method returns the currently available
                  &lt;code&gt;DataFlavor&lt;/code&gt;s as a &lt;code&gt;java.util.List&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the currently available DataFlavors as a java.util.List                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavorsAsList" type="List<DataFlavor>" line="130"/>
            <javadoc line="133">
                This method returns a &lt;code&gt;boolean&lt;/code&gt; indicating if the
                  specified &lt;code&gt;DataFlavor&lt;/code&gt; is available
                  from the source.
                  &lt;P&gt;                
                <param>
                    df the <code>DataFlavor</code> to test
                      <P>                    
                </param>
                <return>
                    if the DataFlavor specified is available from the source                    
                </return>
            </javadoc>
            <method name="isDataFlavorSupported" type="boolean" line="142">
                <params>
                    <param name="df" type="DataFlavor"/>
                </params>
            </method>
            <javadoc line="145">
                This method returns the source drop actions.                
                <return>
                    the source drop actions.                    
                </return>
            </javadoc>
            <method name="getSourceActions" type="int" line="149"/>
            <javadoc line="152">
                This method returns the user drop action.                
                <return>
                    the user drop actions.                    
                </return>
            </javadoc>
            <method name="getDropAction" type="int" line="156"/>
            <javadoc line="159">
                This method returns the &lt;code&gt;Transferable&lt;/code&gt; object
                  associated with the drop.
                  &lt;P&gt;                
                <return>
                    the <code>Transferable</code> associated with the drop                    
                </return>
            </javadoc>
            <method name="getTransferable" type="Transferable" line="165"/>
            <javadoc line="168">
                accept the drop, using the specified action.
                  &lt;P&gt;                
                <param>
                    dropAction the specified action                    
                </param>
            </javadoc>
            <method name="acceptDrop" type="void" line="173">
                <params>
                    <param name="dropAction" type="int"/>
                </params>
            </method>
            <javadoc line="176">
                reject the Drop.                
            </javadoc>
            <method name="rejectDrop" type="void" line="179"/>
            <javadoc line="182">
                This method notifies the &lt;code&gt;DragSource&lt;/code&gt;
                  that the drop transfer(s) are completed.
                  &lt;P&gt;                
                <param>
                    success a <code>boolean</code> indicating that the drop transfer(s) are completed.                    
                </param>
            </javadoc>
            <method name="dropComplete" type="void" line="188">
                <params>
                    <param name="success" type="boolean"/>
                </params>
            </method>
            <javadoc line="191">
                This method returns an &lt;code&gt;int&lt;/code&gt; indicating if
                  the source is in the same JVM as the target.
                  &lt;P&gt;                
                <return>
                    if the Source is in the same JVM                    
                </return>
            </javadoc>
            <method name="isLocalTransfer" type="boolean" line="197"/>
            <declaration name="zero" type="Point" line="200"/>
            <declaration name="location" type="Point" line="201"/>
            <javadoc line="201">
                The location of the drag cursor&apos;s hotspot in Component coordinates.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="actions" type="int" line="206"/>
            <javadoc line="206">
                The source drop actions.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dropAction" type="int" line="211"/>
            <javadoc line="211">
                The user drop action.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="isLocalTx" type="boolean" line="216"/>
            <javadoc line="216">
                &lt;code&gt;true&lt;/code&gt; if the source is in the same JVM as the target.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>