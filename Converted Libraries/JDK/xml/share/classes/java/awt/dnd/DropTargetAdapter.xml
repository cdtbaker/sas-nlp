<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <class name="DropTargetAdapter" line="28">
            <implements interface="DropTargetListener"/>
            <javadoc line="28">
                An abstract adapter class for receiving drop target events. The methods in
                  this class are empty. This class exists only as a convenience for creating
                  listener objects.
                  &lt;p&gt;
                  Extend this class to create a &lt;code&gt;DropTargetEvent&lt;/code&gt; listener
                  and override the methods for the events of interest. (If you implement the
                  &lt;code&gt;DropTargetListener&lt;/code&gt; interface, you have to define all of
                  the methods in it. This abstract class defines a null implementation for
                  every method except &lt;code&gt;drop(DropTargetDropEvent)&lt;/code&gt;, so you only have
                  to define methods for events you care about.) You must provide an
                  implementation for at least &lt;code&gt;drop(DropTargetDropEvent)&lt;/code&gt;. This
                  method cannot have a null implementation because its specification requires
                  that you either accept or reject the drop, and, if accepted, indicate
                  whether the drop was successful.
                  &lt;p&gt;
                  Create a listener object using the extended class and then register it with
                  a &lt;code&gt;DropTarget&lt;/code&gt;. When the drag enters, moves over, or exits
                  the operable part of the drop site for that &lt;code&gt;DropTarget&lt;/code&gt;, when
                  the drop action changes, and when the drop occurs, the relevant method in
                  the listener object is invoked, and the &lt;code&gt;DropTargetEvent&lt;/code&gt; is
                  passed to it.
                  &lt;p&gt;
                  The operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt; is
                  the part of the associated &lt;code&gt;Component&lt;/code&gt;&apos;s geometry that is not
                  obscured by an overlapping top-level window or by another
                  &lt;code&gt;Component&lt;/code&gt; higher in the Z-order that has an associated active
                  &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;p&gt;
                  During the drag, the data associated with the current drag operation can be
                  retrieved by calling &lt;code&gt;getTransferable()&lt;/code&gt; on
                  &lt;code&gt;DropTargetDragEvent&lt;/code&gt; instances passed to the listener&apos;s
                  methods.
                  &lt;p&gt;
                  Note that &lt;code&gt;getTransferable()&lt;/code&gt; on the
                  &lt;code&gt;DropTargetDragEvent&lt;/code&gt; instance should only be called within the
                  respective listener&apos;s method and all the necessary data should be retrieved
                  from the returned &lt;code&gt;Transferable&lt;/code&gt; before that method returns.                
                <see>
                    DropTargetEvent                    
                </see>
                <see>
                    DropTargetListener                    
                </see>
                <author>
                    David Mendenhall                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="75">
                Called while a drag operation is ongoing, when the mouse pointer enters
                  the operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt;
                  registered with this listener.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="dragEnter" type="void" line="82">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="84">
                Called when a drag operation is ongoing, while the mouse pointer is still
                  over the operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt;
                  registered with this listener.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="dragOver" type="void" line="91">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="93">
                Called if the user has modified
                  the current drop gesture.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="dropActionChanged" type="void" line="99">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="101">
                Called while a drag operation is ongoing, when the mouse pointer has
                  exited the operable part of the drop site for the
                  &lt;code&gt;DropTarget&lt;/code&gt; registered with this listener.                
                <param>
                    dte the &lt;code&gt;DropTargetEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="dragExit" type="void" line="108">
                <params>
                    <param name="dte" type="DropTargetEvent"/>
                </params>
            </method>
        </class>
    </source>