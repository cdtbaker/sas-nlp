<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Component"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.awt.dnd.peer.DropTargetContextPeer"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <class name="DropTargetContext" line="11">
            <implements interface="Serializable"/>
            <javadoc line="11">
                A &lt;code&gt;DropTargetContext&lt;/code&gt; is created
                  whenever the logical cursor associated
                  with a Drag and Drop operation coincides with the visible geometry of
                  a &lt;code&gt;Component&lt;/code&gt; associated with a &lt;code&gt;DropTarget&lt;/code&gt;.
                  The &lt;code&gt;DropTargetContext&lt;/code&gt; provides
                  the mechanism for a potential receiver
                  of a drop operation to both provide the end user with the appropriate
                  drag under feedback, but also to effect the subsequent data transfer
                  if appropriate.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <javadoc line="25">
                Construct a &lt;code&gt;DropTargetContext&lt;/code&gt;
                  given a specified &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    dt the DropTarget to associate with                    
                </param>
            </javadoc>
            <method name="DropTargetContext" type="constructor" line="31">
                <params>
                    <param name="dt" type="DropTarget"/>
                </params>
            </method>
            <javadoc line="35">
                This method returns the &lt;code&gt;DropTarget&lt;/code&gt; associated with this
                  &lt;code&gt;DropTargetContext&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the <code>DropTarget</code> associated with this <code>DropTargetContext</code>                    
                </return>
            </javadoc>
            <method name="getDropTarget" type="DropTarget" line="41"/>
            <javadoc line="44">
                This method returns the &lt;code&gt;Component&lt;/code&gt; associated with
                  this &lt;code&gt;DropTargetContext&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the Component associated with this Context                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="50"/>
            <javadoc line="53">
                Called when associated with the &lt;code&gt;DropTargetContextPeer&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    dtcp the <code>DropTargetContextPeer</code>                    
                </param>
            </javadoc>
            <method name="addNotify" type="void" line="58">
                <params>
                    <param name="dtcp" type="DropTargetContextPeer"/>
                </params>
            </method>
            <javadoc line="61">
                Called when disassociated with the &lt;code&gt;DropTargetContextPeer&lt;/code&gt;.                
            </javadoc>
            <method name="removeNotify" type="void" line="64"/>
            <javadoc line="68">
                This method sets the current actions acceptable to
                  this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    actions an <code>int</code> representing the supported action(s)                    
                </param>
            </javadoc>
            <method name="setTargetActions" type="void" line="74">
                <params>
                    <param name="actions" type="int"/>
                </params>
                <declaration name="peer" type="DropTargetContextPeer" line="75"/>
                <scope line="76">
                    <scope line="77"/>
                </scope>
                <scope line="82"/>
            </method>
            <javadoc line="86">
                This method returns an &lt;code&gt;int&lt;/code&gt; representing the
                  current actions this &lt;code&gt;DropTarget&lt;/code&gt; will accept.
                  &lt;P&gt;                
                <return>
                    the current actions acceptable to this <code>DropTarget</code>                    
                </return>
            </javadoc>
            <method name="getTargetActions" type="int" line="92">
                <declaration name="peer" type="DropTargetContextPeer" line="93"/>
            </method>
            <javadoc line="96">
                This method signals that the drop is completed and
                  if it was successful or not.
                  &lt;P&gt;                
                <param>
                    success true for success, false if not
                      <P>                    
                </param>
                <throws>
                    InvalidDnDOperationException if a drop is not outstanding/extant                    
                </throws>
            </javadoc>
            <method name="dropComplete" type="void" line="104">
                <params>
                    <param name="success" type="boolean"/>
                </params>
                <declaration name="peer" type="DropTargetContextPeer" line="105"/>
                <scope line="106"/>
            </method>
            <javadoc line="110">
                accept the Drag.
                  &lt;P&gt;                
                <param>
                    dragOperation the supported action(s)                    
                </param>
            </javadoc>
            <method name="acceptDrag" type="void" line="115">
                <params>
                    <param name="dragOperation" type="int"/>
                </params>
                <declaration name="peer" type="DropTargetContextPeer" line="116"/>
                <scope line="117"/>
            </method>
            <javadoc line="121">
                reject the Drag.                
            </javadoc>
            <method name="rejectDrag" type="void" line="124">
                <declaration name="peer" type="DropTargetContextPeer" line="125"/>
                <scope line="126"/>
            </method>
            <javadoc line="130">
                called to signal that the drop is acceptable
                  using the specified operation.
                  must be called during DropTargetListener.drop method invocation.
                  &lt;P&gt;                
                <param>
                    dropOperation the supported action(s)                    
                </param>
            </javadoc>
            <method name="acceptDrop" type="void" line="137">
                <params>
                    <param name="dropOperation" type="int"/>
                </params>
                <declaration name="peer" type="DropTargetContextPeer" line="138"/>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                called to signal that the drop is unacceptable.
                  must be called during DropTargetListener.drop method invocation.                
            </javadoc>
            <method name="rejectDrop" type="void" line="147">
                <declaration name="peer" type="DropTargetContextPeer" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                get the available DataFlavors of the
                  &lt;code&gt;Transferable&lt;/code&gt; operand of this operation.
                  &lt;P&gt;                
                <return>
                    a <code>DataFlavor[]</code> containing the
                      supported <code>DataFlavor</code>s of the
                      <code>Transferable</code> operand.                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavors" type="DataFlavor[]" line="161">
                <declaration name="peer" type="DropTargetContextPeer" line="162"/>
            </method>
            <javadoc line="165">
                This method returns a the currently available DataFlavors
                  of the &lt;code&gt;Transferable&lt;/code&gt; operand
                  as a &lt;code&gt;java.util.List&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the currently available
                      DataFlavors as a <code>java.util.List</code>                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavorsAsList" type="List<DataFlavor>" line="173"/>
            <javadoc line="176">
                This method returns a &lt;code&gt;boolean&lt;/code&gt;
                  indicating if the given &lt;code&gt;DataFlavor&lt;/code&gt; is
                  supported by this &lt;code&gt;DropTargetContext&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    df the <code>DataFlavor</code>
                      <P>                    
                </param>
                <return>
                    if the <code>DataFlavor</code> specified is supported                    
                </return>
            </javadoc>
            <method name="isDataFlavorSupported" type="boolean" line="185">
                <params>
                    <param name="df" type="DataFlavor"/>
                </params>
            </method>
            <javadoc line="188">
                get the Transferable (proxy) operand of this operation
                  &lt;P&gt;                
                <throws>
                    InvalidDnDOperationException if a drag is not outstanding/extant
                      <P>                    
                </throws>
                <return>
                    the <code>Transferable</code>                    
                </return>
            </javadoc>
            <method name="getTransferable" type="Transferable" line="195">
                <declaration name="peer" type="DropTargetContextPeer" line="196"/>
                <scope line="197"/>
                <scope line="200">
                    <scope line="201">
                        <declaration name="t" type="Transferable" line="202"/>
                        <declaration name="isLocal" type="boolean" line="203"/>
                        <scope line="204">
                            <scope line="205"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="213">
                Get the &lt;code&gt;DropTargetContextPeer&lt;/code&gt;
                  &lt;P&gt;                
                <return>
                    the platform peer                    
                </return>
            </javadoc>
            <method name="getDropTargetContextPeer" type="DropTargetContextPeer" line="218"/>
            <javadoc line="221">
                Creates a TransferableProxy to proxy for the specified
                  Transferable.                
                <param>
                    t the <tt>Transferable</tt> to be proxied                    
                </param>
                <param>
                    local <tt>true</tt> if <tt>t</tt> represents
                      the result of a local drag-n-drop operation.                    
                </param>
                <return>
                    the new <tt>TransferableProxy</tt> instance.                    
                </return>
            </javadoc>
            <method name="createTransferableProxy" type="Transferable" line="229">
                <params>
                    <param name="t" type="Transferable"/>
                    <param name="local" type="boolean"/>
                </params>
            </method>
            <class name="TransferableProxy" line="232">
                <implements interface="Transferable"/>
                <javadoc line="232">
                    &lt;code&gt;TransferableProxy&lt;/code&gt; is a helper inner class that implements
                      &lt;code&gt;Transferable&lt;/code&gt; interface and serves as a proxy for another
                      &lt;code&gt;Transferable&lt;/code&gt; object which represents data transfer for
                      a particular drag-n-drop operation.
                      &lt;p&gt;
                      The proxy forwards all requests to the encapsulated transferable
                      and automatically performs additional conversion on the data
                      returned by the encapsulated transferable in case of local transfer.                    
                </javadoc>
                <javadoc line="243">
                    Constructs a &lt;code&gt;TransferableProxy&lt;/code&gt; given
                      a specified &lt;code&gt;Transferable&lt;/code&gt; object representing
                      data transfer for a particular drag-n-drop operation and
                      a &lt;code&gt;boolean&lt;/code&gt; which indicates whether the
                      drag-n-drop operation is local (within the same JVM).
                      &lt;p&gt;                    
                    <param>
                        t the <code>Transferable</code> object                        
                    </param>
                    <param>
                        local <code>true</code>, if <code>t</code> represents
                          the result of local drag-n-drop operation                        
                    </param>
                </javadoc>
                <method name="TransferableProxy" type="constructor" line="254">
                    <params>
                        <param name="t" type="Transferable"/>
                        <param name="local" type="boolean"/>
                    </params>
                </method>
                <javadoc line="259">
                    Returns an array of DataFlavor objects indicating the flavors
                      the data can be provided in by the encapsulated transferable.
                      &lt;p&gt;                    
                    <return>
                        an array of data flavors in which the data can be
                          provided by the encapsulated transferable                        
                    </return>
                </javadoc>
                <method name="getTransferDataFlavors" type="DataFlavor[]" line="266"/>
                <javadoc line="269">
                    Returns whether or not the specified data flavor is supported by
                      the encapsulated transferable.                    
                    <param>
                        flavor the requested flavor for the data                        
                    </param>
                    <return>
                        <code>true</code> if the data flavor is supported,
                          <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="isDataFlavorSupported" type="boolean" line="276">
                    <params>
                        <param name="flavor" type="DataFlavor"/>
                    </params>
                </method>
                <javadoc line="279">
                    Returns an object which represents the data provided by
                      the encapsulated transferable for the requested data flavor.
                      &lt;p&gt;
                      In case of local transfer a serialized copy of the object
                      returned by the encapsulated transferable is provided when
                      the data is requested in application/x-java-serialized-object
                      data flavor.                    
                    <param>
                        df the requested flavor for the data                        
                    </param>
                    <throws>
                        IOException if the data is no longer available
                          in the requested flavor.                        
                    </throws>
                    <throws>
                        UnsupportedFlavorException if the requested data flavor is
                          not supported.                        
                    </throws>
                </javadoc>
                <method name="getTransferData" type="Object" line="293">
                    <params>
                        <param name="df" type="DataFlavor"/>
                    </params>
                </method>
                <declaration name="transferable" type="Transferable" line="296"/>
                <javadoc line="296">
                    The encapsulated &lt;code&gt;Transferable&lt;/code&gt; object.                    
                </javadoc>
                <declaration name="isLocal" type="boolean" line="300"/>
                <javadoc line="300">
                    A &lt;code&gt;boolean&lt;/code&gt; indicating if the encapsulated
                      &lt;code&gt;Transferable&lt;/code&gt; object represents the result
                      of local drag-n-drop operation (within the same JVM).                    
                </javadoc>
                <declaration name="proxy" type="sun.awt.datatransfer.TransferableProxy" line="306"/>
            </class>
            <declaration name="dropTarget" type="DropTarget" line="308"/>
            <javadoc line="308">
                The DropTarget associated with this DropTargetContext.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dropTargetContextPeer" type="DropTargetContextPeer" line="313"/>
            <declaration name="transferable" type="Transferable" line="314"/>
        </class>
    </source>