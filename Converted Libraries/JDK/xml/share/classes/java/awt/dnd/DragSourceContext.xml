<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.datatransfer.UnsupportedFlavorException"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.TooManyListenersException"/>
        <class name="DragSourceContext" line="46">
            <comment line="96">
                used by updateCurrentCursor                
            </comment>
            <comment line="595">
                fields                
            </comment>
            <implements interface="DragSourceListener"/>
            <implements interface="DragSourceMotionListener"/>
            <implements interface="Serializable"/>
            <javadoc line="46">
                The &lt;code&gt;DragSourceContext&lt;/code&gt; class is responsible for managing the
                  initiator side of the Drag and Drop protocol. In particular, it is responsible
                  for managing drag event notifications to the{@linkplain DragSourceListener DragSourceListeners}and {@linkplain DragSourceMotionListener DragSourceMotionListeners}, and providing the{@link Transferable} representing the source data for the drag operation.
                  &lt;p&gt;
                  Note that the &lt;code&gt;DragSourceContext&lt;/code&gt; itself
                  implements the &lt;code&gt;DragSourceListener&lt;/code&gt; and
                  &lt;code&gt;DragSourceMotionListener&lt;/code&gt; interfaces.
                  This is to allow the platform peer
                  (the {@link DragSourceContextPeer} instance)
                  created by the {@link DragSource} to notify
                  the &lt;code&gt;DragSourceContext&lt;/code&gt; of
                  state changes in the ongoing operation. This allows the
                  &lt;code&gt;DragSourceContext&lt;/code&gt; object to interpose
                  itself between the platform and the
                  listeners provided by the initiator of the drag operation.
                  &lt;p&gt;
                  &lt;a name=&quot;defaultCursor&quot; /&gt;
                  By default, {@code DragSourceContext} sets the cursor as appropriate
                  for the current state of the drag and drop operation. For example, if
                  the user has chosen {@linkplain DnDConstants#ACTION_MOVE the move action},
                  and the pointer is over a target that accepts
                  the move action, the default move cursor is shown. When
                  the pointer is over an area that does not accept the transfer,
                  the default &quot;no drop&quot; cursor is shown.
                  &lt;p&gt;
                  This default handling mechanism is disabled when a custom cursor is set
                  by the {@link #setCursor} method. When the default handling is disabled,
                  it becomes the responsibility
                  of the developer to keep the cursor up to date, by listening
                  to the {@code DragSource} events and calling the {@code setCursor()} method.
                  Alternatively, you can provide custom cursor behavior by providing
                  custom implementations of the {@code DragSource}and the {@code DragSourceContext} classes.                
                <see>
                    DragSourceListener                    
                </see>
                <see>
                    DragSourceMotionListener                    
                </see>
                <see>
                    DnDConstants                    
                </see>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="93"/>
            <declaration name="DEFAULT" type="int" line="97"/>
            <javadoc line="97">
                An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor()
                  indicating that the &lt;code&gt;Cursor&lt;/code&gt; should change
                  to the default (no drop) &lt;code&gt;Cursor&lt;/code&gt;.                
            </javadoc>
            <declaration name="ENTER" type="int" line="104"/>
            <javadoc line="104">
                An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor()
                  indicating that the &lt;code&gt;Cursor&lt;/code&gt;
                  has entered a &lt;code&gt;DropTarget&lt;/code&gt;.                
            </javadoc>
            <declaration name="OVER" type="int" line="111"/>
            <javadoc line="111">
                An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor()
                  indicating that the &lt;code&gt;Cursor&lt;/code&gt; is
                  over a &lt;code&gt;DropTarget&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHANGED" type="int" line="118"/>
            <javadoc line="118">
                An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor()
                  indicating that the user operation has changed.                
            </javadoc>
            <javadoc line="125">
                Called from &lt;code&gt;DragSource&lt;/code&gt;, this constructor creates a new
                  &lt;code&gt;DragSourceContext&lt;/code&gt; given the
                  &lt;code&gt;DragSourceContextPeer&lt;/code&gt; for this Drag, the
                  &lt;code&gt;DragGestureEvent&lt;/code&gt; that triggered the Drag, the initial
                  &lt;code&gt;Cursor&lt;/code&gt; to use for the Drag, an (optional)
                  &lt;code&gt;Image&lt;/code&gt; to display while the Drag is taking place, the offset
                  of the &lt;code&gt;Image&lt;/code&gt; origin from the hotspot at the instant of the
                  triggering event, the &lt;code&gt;Transferable&lt;/code&gt; subject data, and the
                  &lt;code&gt;DragSourceListener&lt;/code&gt; to use during the Drag and Drop
                  operation.
                  &lt;br&gt;
                  If &lt;code&gt;DragSourceContextPeer&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;br&gt;
                  If &lt;code&gt;DragGestureEvent&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;br&gt;
                  If &lt;code&gt;Cursor&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; no exception is thrown and
                  the default drag cursor behavior is activated for this drag operation.
                  &lt;br&gt;
                  If &lt;code&gt;Image&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; no exception is thrown.
                  &lt;br&gt;
                  If &lt;code&gt;Image&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; and the offset is
                  &lt;code&gt;null&lt;/code&gt; &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;br&gt;
                  If &lt;code&gt;Transferable&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                  &lt;br&gt;
                  If &lt;code&gt;DragSourceListener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; no exception
                  is thrown.                
                <param>
                    dscp       the <code>DragSourceContextPeer</code> for this drag                    
                </param>
                <param>
                    trigger    the triggering event                    
                </param>
                <param>
                    dragCursor     the initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see <a href="DragSourceContext.html#defaultCursor">class level documentation</a>
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    dragImage  the <code>Image</code> to drag (or <code>null</code>)                    
                </param>
                <param>
                    offset     the offset of the image origin from the hotspot at the
                      instant of the triggering event                    
                </param>
                <param>
                    t          the <code>Transferable</code>                    
                </param>
                <param>
                    dsl        the <code>DragSourceListener</code>                    
                </param>
                <throws>
                    IllegalArgumentException if the <code>Component</code> associated
                      with the trigger event is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if the <code>DragSource</code> for the
                      trigger event is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if the drag action for the
                      trigger event is <code>DnDConstants.ACTION_NONE</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if the source actions for the
                      <code>DragGestureRecognizer</code> associated with the trigger
                      event are equal to <code>DnDConstants.ACTION_NONE</code>.                    
                </throws>
                <throws>
                    NullPointerException if dscp, trigger, or t are null, or
                      if dragImage is non-null and offset is null                    
                </throws>
            </javadoc>
            <method name="DragSourceContext" type="constructor" line="184">
                <params>
                    <param name="dscp" type="DragSourceContextPeer"/>
                    <param name="trigger" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="dragImage" type="Image"/>
                    <param name="offset" type="Point"/>
                    <param name="t" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
                <scope line="185"/>
                <scope line="189"/>
                <scope line="193"/>
                <scope line="197"/>
                <scope line="202"/>
                <scope line="206"/>
                <scope line="210"/>
                <scope line="214"/>
            </method>
            <javadoc line="231">
                Returns the &lt;code&gt;DragSource&lt;/code&gt;
                  that instantiated this &lt;code&gt;DragSourceContext&lt;/code&gt;.                
                <return>
                    the <code>DragSource</code> that
                      instantiated this <code>DragSourceContext</code>                    
                </return>
            </javadoc>
            <method name="getDragSource" type="DragSource" line="239"/>
            <javadoc line="241">
                Returns the &lt;code&gt;Component&lt;/code&gt; associated with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt;.                
                <return>
                    the <code>Component</code> that started the drag                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="248"/>
            <javadoc line="250">
                Returns the &lt;code&gt;DragGestureEvent&lt;/code&gt;
                  that initially triggered the drag.                
                <return>
                    the Event that triggered the drag                    
                </return>
            </javadoc>
            <method name="getTrigger" type="DragGestureEvent" line="257"/>
            <javadoc line="259">
                Returns a bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt; that
                  represent the set of drop actions supported by the drag source for the
                  drag operation associated with this &lt;code&gt;DragSourceContext&lt;/code&gt;.                
                <return>
                    the drop actions supported by the drag source                    
                </return>
            </javadoc>
            <method name="getSourceActions" type="int" line="266"/>
            <javadoc line="270">
                Sets the cursor for this drag operation to the specified
                  &lt;code&gt;Cursor&lt;/code&gt;.  If the specified &lt;code&gt;Cursor&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, the default drag cursor behavior is
                  activated for this drag operation, otherwise it is deactivated.                
                <param>
                    c     the initial {@code Cursor} for this drag operation,
                      or {@code null} for the default cursor handling;
                      see {@linkplain Cursor class
                      level documentation} for more details
                      on the cursor handling during drag and drop                    
                </param>
            </javadoc>
            <method name="setCursor" type="void" line="284">
                <params>
                    <param name="c" type="Cursor"/>
                </params>
            </method>
            <javadoc line="289">
                Returns the current drag &lt;code&gt;Cursor&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the current drag <code>Cursor</code>                    
                </return>
            </javadoc>
            <method name="getCursor" type="Cursor" line="295"/>
            <javadoc line="297">
                Add a &lt;code&gt;DragSourceListener&lt;/code&gt; to this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; if one has not already been added.
                  If a &lt;code&gt;DragSourceListener&lt;/code&gt; already exists,
                  this method throws a &lt;code&gt;TooManyListenersException&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    dsl the <code>DragSourceListener</code> to add.
                      Note that while <code>null</code> is not prohibited,
                      it is not acceptable as a parameter.
                      <P>                    
                </param>
                <throws>
                    TooManyListenersException if
                      a <code>DragSourceListener</code> has already been added                    
                </throws>
            </javadoc>
            <method name="addDragSourceListener" type="void" line="311">
                <params>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="322">
                Removes the specified &lt;code&gt;DragSourceListener&lt;/code&gt;
                  from  this &lt;code&gt;DragSourceContext&lt;/code&gt;.                
                <param>
                    dsl the <code>DragSourceListener</code> to remove;
                      note that while <code>null</code> is not prohibited,
                      it is not acceptable as a parameter                    
                </param>
            </javadoc>
            <method name="removeDragSourceListener" type="void" line="331">
                <params>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
                <scope line="332"/>
            </method>
            <javadoc line="338">
                Notifies the peer that the &lt;code&gt;Transferable&lt;/code&gt;&apos;s
                  &lt;code&gt;DataFlavor&lt;/code&gt;s have changed.                
            </javadoc>
            <method name="transferablesFlavorsChanged" type="void" line="343"/>
            <javadoc line="347">
                Calls &lt;code&gt;dragEnter&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; and with the associated
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the <code>DragSourceDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dragEnter" type="void" line="356">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="357"/>
                <scope line="358"/>
            </method>
            <javadoc line="366">
                Calls &lt;code&gt;dragOver&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; and with the associated
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the <code>DragSourceDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dragOver" type="void" line="375">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="376"/>
                <scope line="377"/>
            </method>
            <javadoc line="385">
                Calls &lt;code&gt;dragExit&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; and with the associated
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceEvent&lt;/code&gt;.                
                <param>
                    dse the <code>DragSourceEvent</code>                    
                </param>
            </javadoc>
            <method name="dragExit" type="void" line="394">
                <params>
                    <param name="dse" type="DragSourceEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="395"/>
                <scope line="396"/>
            </method>
            <javadoc line="404">
                Calls &lt;code&gt;dropActionChanged&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; and with the associated
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the <code>DragSourceDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dropActionChanged" type="void" line="413">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="414"/>
                <scope line="415"/>
            </method>
            <javadoc line="423">
                Calls &lt;code&gt;dragDropEnd&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt; and with the associated
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDropEvent&lt;/code&gt;.                
                <param>
                    dsde the <code>DragSourceDropEvent</code>                    
                </param>
            </javadoc>
            <method name="dragDropEnd" type="void" line="432">
                <params>
                    <param name="dsde" type="DragSourceDropEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="433"/>
                <scope line="434"/>
            </method>
            <javadoc line="440">
                Calls &lt;code&gt;dragMouseMoved&lt;/code&gt; on the
                  &lt;code&gt;DragSourceMotionListener&lt;/code&gt;s registered with the
                  &lt;code&gt;DragSource&lt;/code&gt; associated with this
                  &lt;code&gt;DragSourceContext&lt;/code&gt;, and them passes the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the <code>DragSourceDragEvent</code>                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="dragMouseMoved" type="void" line="450">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
            </method>
            <javadoc line="454">
                Returns the &lt;code&gt;Transferable&lt;/code&gt; associated with
                  this &lt;code&gt;DragSourceContext&lt;/code&gt;.                
                <return>
                    the <code>Transferable</code>                    
                </return>
            </javadoc>
            <method name="getTransferable" type="Transferable" line="460"/>
            <javadoc line="462">
                If the default drag cursor behavior is active, this method
                  sets the default drag cursor for the specified actions
                  supported by the drag source, the drop target action,
                  and status, otherwise this method does nothing.                
                <param>
                    sourceAct the actions supported by the drag source                    
                </param>
                <param>
                    targetAct the drop target action                    
                </param>
                <param>
                    status one of the fields <code>DEFAULT</code>,
                      <code>ENTER</code>, <code>OVER</code>,
                      <code>CHANGED</code>                    
                </param>
            </javadoc>
            <method name="updateCurrentCursor" type="void" line="475">
                <params>
                    <param name="sourceAct" type="int"/>
                    <param name="targetAct" type="int"/>
                    <param name="status" type="int"/>
                </params>
                <comment line="478">
                    if the cursor has been previously set then dont do any defaults
                     processing.                    
                </comment>
                <comment line="485">
                    do defaults processing                    
                </comment>
                <comment line="497">
                    no drop possible                    
                </comment>
                <comment line="504">
                    drop possible                    
                </comment>
                <scope line="480"/>
                <declaration name="c" type="Cursor" line="486"/>
                <declaration name="ra" type="int" line="494"/>
                <scope line="496"/>
                <scope line="503"/>
            </method>
            <method name="setCursorImpl" type="void" line="516">
                <params>
                    <param name="c" type="Cursor"/>
                </params>
                <scope line="517"/>
            </method>
            <javadoc line="523">
                Serializes this &lt;code&gt;DragSourceContext&lt;/code&gt;. This method first
                  performs default serialization. Next, this object&apos;s
                  &lt;code&gt;Transferable&lt;/code&gt; is written out if and only if it can be
                  serialized. If not, &lt;code&gt;null&lt;/code&gt; is written instead. In this case,
                  a &lt;code&gt;DragSourceContext&lt;/code&gt; created from the resulting deserialized
                  stream will contain a dummy &lt;code&gt;Transferable&lt;/code&gt; which supports no
                  &lt;code&gt;DataFlavor&lt;/code&gt;s. Finally, this object&apos;s
                  &lt;code&gt;DragSourceListener&lt;/code&gt; is written out if and only if it can be
                  serialized. If not, &lt;code&gt;null&lt;/code&gt; is written instead.                
                <serialData>
                    The default serializable fields, in alphabetical order,
                      followed by either a <code>Transferable</code> instance, or
                      <code>null</code>, followed by either a
                      <code>DragSourceListener</code> instance, or
                      <code>null</code>.                    
                </serialData>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="541">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="550">
                Deserializes this &lt;code&gt;DragSourceContext&lt;/code&gt;. This method first
                  performs default deserialization for all non-&lt;code&gt;transient&lt;/code&gt;
                  fields. This object&apos;s &lt;code&gt;Transferable&lt;/code&gt; and
                  &lt;code&gt;DragSourceListener&lt;/code&gt; are then deserialized as well by using
                  the next two objects in the stream. If the resulting
                  &lt;code&gt;Transferable&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this object&apos;s
                  &lt;code&gt;Transferable&lt;/code&gt; is set to a dummy &lt;code&gt;Transferable&lt;/code&gt;
                  which supports no &lt;code&gt;DataFlavor&lt;/code&gt;s.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="564">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="571">
                    Implementation assumes &apos;transferable&apos; is never null.                    
                </comment>
                <scope line="571">
                    <scope line="572">
                        <anonymous_class line="573">
                            <method name="getTransferDataFlavors" type="DataFlavor[]" line="574"/>
                            <method name="isDataFlavorSupported" type="boolean" line="578">
                                <params>
                                    <param name="flavor" type="DataFlavor"/>
                                </params>
                            </method>
                            <method name="getTransferData" type="Object" line="583">
                                <params>
                                    <param name="flavor" type="DataFlavor"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <declaration name="emptyTransferable" type="Transferable" line="592"/>
            <declaration name="peer" type="DragSourceContextPeer" line="598"/>
            <declaration name="trigger" type="DragGestureEvent" line="600"/>
            <javadoc line="600">
                The event which triggered the start of the drag.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="cursor" type="Cursor" line="607"/>
            <javadoc line="607">
                The current drag cursor.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="transferable" type="Transferable" line="614"/>
            <declaration name="listener" type="DragSourceListener" line="616"/>
            <declaration name="useCustomCursor" type="boolean" line="618"/>
            <javadoc line="618">
                &lt;code&gt;true&lt;/code&gt; if the custom drag cursor is used instead of the
                  default one.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="sourceActions" type="int" line="626"/>
            <javadoc line="626">
                A bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt; that represents the set of
                  drop actions supported by the drag source for the drag operation associated
                  with this &lt;code&gt;DragSourceContext.&lt;/code&gt;                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>