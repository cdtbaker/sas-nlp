<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.util.EventListener"/>
        <import package="java.awt.dnd.DropTargetDragEvent"/>
        <import package="java.awt.dnd.DropTargetDropEvent"/>
        <interface name="DropTargetListener">
            <implements interface="EventListener"/>
            <javadoc line="5">
                The &lt;code&gt;DropTargetListener&lt;/code&gt; interface
                  is the callback interface used by the
                  &lt;code&gt;DropTarget&lt;/code&gt; class to provide
                  notification of DnD operations that involve
                  the subject &lt;code&gt;DropTarget&lt;/code&gt;. Methods of
                  this interface may be implemented to provide
                  &quot;drag under&quot; visual feedback to the user throughout
                  the Drag and Drop operation.
                  &lt;p&gt;
                  Create a listener object by implementing the interface and then register it
                  with a &lt;code&gt;DropTarget&lt;/code&gt;. When the drag enters, moves over, or exits
                  the operable part of the drop site for that &lt;code&gt;DropTarget&lt;/code&gt;, when
                  the drop action changes, and when the drop occurs, the relevant method in
                  the listener object is invoked, and the &lt;code&gt;DropTargetEvent&lt;/code&gt; is
                  passed to it.
                  &lt;p&gt;
                  The operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt; is
                  the part of the associated &lt;code&gt;Component&lt;/code&gt;&apos;s geometry that is not
                  obscured by an overlapping top-level window or by another
                  &lt;code&gt;Component&lt;/code&gt; higher in the Z-order that has an associated active
                  &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;p&gt;
                  During the drag, the data associated with the current drag operation can be
                  retrieved by calling &lt;code&gt;getTransferable()&lt;/code&gt; on
                  &lt;code&gt;DropTargetDragEvent&lt;/code&gt; instances passed to the listener&apos;s
                  methods.
                  &lt;p&gt;
                  Note that &lt;code&gt;getTransferable()&lt;/code&gt; on the
                  &lt;code&gt;DropTargetDragEvent&lt;/code&gt; instance should only be called within the
                  respective listener&apos;s method and all the necessary data should be retrieved
                  from the returned &lt;code&gt;Transferable&lt;/code&gt; before that method returns.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="dragEnter" type="void" line="40"/>
            <javadoc line="40">
                Called while a drag operation is ongoing, when the mouse pointer enters
                  the operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt;
                  registered with this listener.                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dragOver" type="void" line="47"/>
            <javadoc line="47">
                Called when a drag operation is ongoing, while the mouse pointer is still
                  over the operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt;
                  registered with this listener.                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dropActionChanged" type="void" line="54"/>
            <javadoc line="54">
                Called if the user has modified
                  the current drop gesture.
                  &lt;P&gt;                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
            </javadoc>
            <method name="dragExit" type="void" line="61"/>
            <javadoc line="61">
                Called while a drag operation is ongoing, when the mouse pointer has
                  exited the operable part of the drop site for the
                  &lt;code&gt;DropTarget&lt;/code&gt; registered with this listener.                
                <param>
                    dte the <code>DropTargetEvent</code>                    
                </param>
            </javadoc>
            <method name="drop" type="void" line="68"/>
            <javadoc line="68">
                Called when the drag operation has terminated with a drop on
                  the operable part of the drop site for the &lt;code&gt;DropTarget&lt;/code&gt;
                  registered with this listener.
                  &lt;p&gt;
                  This method is responsible for undertaking
                  the transfer of the data associated with the
                  gesture. The &lt;code&gt;DropTargetDropEvent&lt;/code&gt;
                  provides a means to obtain a &lt;code&gt;Transferable&lt;/code&gt;
                  object that represents the data object(s) to
                  be transfered.&lt;P&gt;
                  From this method, the &lt;code&gt;DropTargetListener&lt;/code&gt;
                  shall accept or reject the drop via the
                  acceptDrop(int dropAction) or rejectDrop() methods of the
                  &lt;code&gt;DropTargetDropEvent&lt;/code&gt; parameter.
                  &lt;P&gt;
                  Subsequent to acceptDrop(), but not before,
                  &lt;code&gt;DropTargetDropEvent&lt;/code&gt;&apos;s getTransferable()
                  method may be invoked, and data transfer may be
                  performed via the returned &lt;code&gt;Transferable&lt;/code&gt;&apos;s
                  getTransferData() method.
                  &lt;P&gt;
                  At the completion of a drop, an implementation
                  of this method is required to signal the success/failure
                  of the drop by passing an appropriate
                  &lt;code&gt;boolean&lt;/code&gt; to the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;&apos;s
                  dropComplete(boolean success) method.
                  &lt;P&gt;
                  Note: The data transfer should be completed before the call  to the
                  &lt;code&gt;DropTargetDropEvent&lt;/code&gt;&apos;s dropComplete(boolean success) method.
                  After that, a call to the getTransferData() method of the
                  &lt;code&gt;Transferable&lt;/code&gt; returned by
                  &lt;code&gt;DropTargetDropEvent.getTransferable()&lt;/code&gt; is guaranteed to
                  succeed only if the data transfer is local; that is, only if
                  &lt;code&gt;DropTargetDropEvent.isLocalTransfer()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;. Otherwise, the behavior of the call is
                  implementation-dependent.
                  &lt;P&gt;                
                <param>
                    dtde the <code>DropTargetDropEvent</code>                    
                </param>
            </javadoc>
        </interface>
    </source>