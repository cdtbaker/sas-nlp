<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.datatransfer.FlavorMap"/>
        <import package="java.awt.datatransfer.SystemFlavorMap"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.dnd.peer.DragSourceContextPeer"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.EventListener"/>
        <import package="sun.awt.dnd.SunDragSourceContextPeer"/>
        <import package="sun.security.action.GetIntegerAction"/>
        <class name="DragSource" line="21">
            <implements interface="Serializable"/>
            <javadoc line="21">
                The &lt;code&gt;DragSource&lt;/code&gt; is the entity responsible
                  for the initiation of the Drag
                  and Drop operation, and may be used in a number of scenarios:
                  &lt;UL&gt;
                  &lt;LI&gt;1 default instance per JVM for the lifetime of that JVM.
                  &lt;LI&gt;1 instance per class of potential Drag Initiator object (e.g
                  TextField). [implementation dependent]
                  &lt;LI&gt;1 per instance of a particular
                  &lt;code&gt;Component&lt;/code&gt;, or application specific
                  object associated with a &lt;code&gt;Component&lt;/code&gt;
                  instance in the GUI. [implementation dependent]
                  &lt;LI&gt;Some other arbitrary association. [implementation dependent]
                  &lt;/UL&gt;
                  Once the &lt;code&gt;DragSource&lt;/code&gt; is
                  obtained, a &lt;code&gt;DragGestureRecognizer&lt;/code&gt; should
                  also be obtained to associate the &lt;code&gt;DragSource&lt;/code&gt;
                  with a particular
                  &lt;code&gt;Component&lt;/code&gt;.
                  &lt;P&gt;
                  The initial interpretation of the user&apos;s gesture,
                  and the subsequent starting of the drag operation
                  are the responsibility of the implementing
                  &lt;code&gt;Component&lt;/code&gt;, which is usually
                  implemented by a &lt;code&gt;DragGestureRecognizer&lt;/code&gt;.
                  &lt;P&gt;
                  When a drag gesture occurs, the
                  &lt;code&gt;DragSource&lt;/code&gt;&apos;s
                  startDrag() method shall be
                  invoked in order to cause processing
                  of the user&apos;s navigational
                  gestures and delivery of Drag and Drop
                  protocol notifications. A
                  &lt;code&gt;DragSource&lt;/code&gt; shall only
                  permit a single Drag and Drop operation to be
                  current at any one time, and shall
                  reject any further startDrag() requests
                  by throwing an &lt;code&gt;IllegalDnDOperationException&lt;/code&gt;
                  until such time as the extant operation is complete.
                  &lt;P&gt;
                  The startDrag() method invokes the
                  createDragSourceContext() method to
                  instantiate an appropriate
                  &lt;code&gt;DragSourceContext&lt;/code&gt;
                  and associate the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;
                  with that.
                  &lt;P&gt;
                  If the Drag and Drop System is
                  unable to initiate a drag operation for
                  some reason, the startDrag() method throws
                  a &lt;code&gt;java.awt.dnd.InvalidDnDOperationException&lt;/code&gt;
                  to signal such a condition. Typically this
                  exception is thrown when the underlying platform
                  system is either not in a state to
                  initiate a drag, or the parameters specified are invalid.
                  &lt;P&gt;
                  Note that during the drag, the
                  set of operations exposed by the source
                  at the start of the drag operation may not change
                  until the operation is complete.
                  The operation(s) are constant for the
                  duration of the operation with respect to the
                  &lt;code&gt;DragSource&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="87"/>
            <method name="load" type="Cursor" line="88">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="89"/>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <declaration name="DefaultCopyDrop" type="Cursor" line="100"/>
            <javadoc line="100">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a copy operation indicating
                  that a drop is currently allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="DefaultMoveDrop" type="Cursor" line="107"/>
            <javadoc line="107">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a move operation indicating
                  that a drop is currently allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="DefaultLinkDrop" type="Cursor" line="114"/>
            <javadoc line="114">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a link operation indicating
                  that a drop is currently allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="DefaultCopyNoDrop" type="Cursor" line="121"/>
            <javadoc line="121">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a copy operation indicating
                  that a drop is currently not allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="DefaultMoveNoDrop" type="Cursor" line="128"/>
            <javadoc line="128">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a move operation indicating
                  that a drop is currently not allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="DefaultLinkNoDrop" type="Cursor" line="135"/>
            <javadoc line="135">
                The default &lt;code&gt;Cursor&lt;/code&gt; to use with a link operation indicating
                  that a drop is currently not allowed. &lt;code&gt;null&lt;/code&gt; if
                  &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <declaration name="dflt" type="DragSource" line="142"/>
            <declaration name="dragSourceListenerK" type="String" line="143"/>
            <javadoc line="143">
                Internal constants for serialization.                
            </javadoc>
            <declaration name="dragSourceMotionListenerK" type="String" line="147"/>
            <javadoc line="148">
                Gets the &lt;code&gt;DragSource&lt;/code&gt; object associated with
                  the underlying platform.                
                <return>
                    the platform DragSource                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getDefaultDragSource" type="DragSource" line="156">
                <scope line="157"/>
                <scope line="160"/>
            </method>
            <javadoc line="164">
                Reports
                  whether or not drag
                  &lt;code&gt;Image&lt;/code&gt; support
                  is available on the underlying platform.
                  &lt;P&gt;                
                <return>
                    if the Drag Image support is available on this platform                    
                </return>
            </javadoc>
            <method name="isDragImageSupported" type="boolean" line="172">
                <declaration name="t" type="Toolkit" line="173"/>
                <declaration name="supported" type="Boolean" line="174"/>
                <scope line="175"/>
                <scope line="179"/>
            </method>
            <javadoc line="183">
                Creates a new &lt;code&gt;DragSource&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DragSource" type="constructor" line="189">
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Start a drag, given the &lt;code&gt;DragGestureEvent&lt;/code&gt;
                  that initiated the drag, the initial
                  &lt;code&gt;Cursor&lt;/code&gt; to use,
                  the &lt;code&gt;Image&lt;/code&gt; to drag,
                  the offset of the &lt;code&gt;Image&lt;/code&gt; origin
                  from the hotspot of the &lt;code&gt;Cursor&lt;/code&gt; at
                  the instant of the trigger,
                  the &lt;code&gt;Transferable&lt;/code&gt; subject data
                  of the drag, the &lt;code&gt;DragSourceListener&lt;/code&gt;,
                  and the &lt;code&gt;FlavorMap&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    trigger        the &lt;code&gt;DragGestureEvent&lt;/code&gt; that initiated the drag                    
                </param>
                <param>
                    dragCursor     the initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see &lt;a href=&quot;DragSourceContext.html#defaultCursor&quot;&gt;DragSourceContext&lt;/a&gt;
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    dragImage      the image to drag or {@code null}                    
                </param>
                <param>
                    imageOffset    the offset of the &lt;code&gt;Image&lt;/code&gt; origin from the hotspot
                      of the &lt;code&gt;Cursor&lt;/code&gt; at the instant of the trigger                    
                </param>
                <param>
                    transferable   the subject data of the drag                    
                </param>
                <param>
                    dsl            the &lt;code&gt;DragSourceListener&lt;/code&gt;                    
                </param>
                <param>
                    flavorMap      the &lt;code&gt;FlavorMap&lt;/code&gt; to use, or &lt;code&gt;null&lt;/code&gt;
                      &lt;P&gt;                    
                </param>
                <throws>
                    java.awt.dnd.InvalidDnDOperationExceptionif the Drag and Drop
                      system is unable to initiate a drag operation, or if the user
                      attempts to start a drag while an existing drag operation
                      is still executing                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="223">
                <params>
                    <param name="trigger" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="dragImage" type="Image"/>
                    <param name="imageOffset" type="Point"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                    <param name="flavorMap" type="FlavorMap"/>
                </params>
                <scope line="225">
                    <declaration name="dscp" type="DragSourceContextPeer" line="227"/>
                    <declaration name="dsc" type="DragSourceContext" line="228"/>
                    <scope line="229"/>
                </scope>
                <scope line="234"/>
            </method>
            <javadoc line="239">
                Start a drag, given the &lt;code&gt;DragGestureEvent&lt;/code&gt;
                  that initiated the drag, the initial
                  &lt;code&gt;Cursor&lt;/code&gt; to use,
                  the &lt;code&gt;Transferable&lt;/code&gt; subject data
                  of the drag, the &lt;code&gt;DragSourceListener&lt;/code&gt;,
                  and the &lt;code&gt;FlavorMap&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    trigger        the &lt;code&gt;DragGestureEvent&lt;/code&gt; that
                      initiated the drag                    
                </param>
                <param>
                    dragCursor     the initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see &lt;a href=&quot;DragSourceContext.html#defaultCursor&quot;&gt;DragSourceContext&lt;/a&gt;
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    transferable   the subject data of the drag                    
                </param>
                <param>
                    dsl            the &lt;code&gt;DragSourceListener&lt;/code&gt;                    
                </param>
                <param>
                    flavorMap      the &lt;code&gt;FlavorMap&lt;/code&gt; to use or &lt;code&gt;null&lt;/code&gt;
                      &lt;P&gt;                    
                </param>
                <throws>
                    java.awt.dnd.InvalidDnDOperationExceptionif the Drag and Drop
                      system is unable to initiate a drag operation, or if the user
                      attempts to start a drag while an existing drag operation
                      is still executing                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="262">
                <params>
                    <param name="trigger" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                    <param name="flavorMap" type="FlavorMap"/>
                </params>
            </method>
            <javadoc line="265">
                Start a drag, given the &lt;code&gt;DragGestureEvent&lt;/code&gt;
                  that initiated the drag, the initial &lt;code&gt;Cursor&lt;/code&gt;
                  to use,
                  the &lt;code&gt;Image&lt;/code&gt; to drag,
                  the offset of the &lt;code&gt;Image&lt;/code&gt; origin
                  from the hotspot of the &lt;code&gt;Cursor&lt;/code&gt;
                  at the instant of the trigger,
                  the subject data of the drag, and
                  the &lt;code&gt;DragSourceListener&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    trigger           the &lt;code&gt;DragGestureEvent&lt;/code&gt; that initiated the drag                    
                </param>
                <param>
                    dragCursor     the initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see &lt;a href=&quot;DragSourceContext.html#defaultCursor&quot;&gt;DragSourceContext&lt;/a&gt;
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    dragImage         the &lt;code&gt;Image&lt;/code&gt; to drag or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    dragOffset        the offset of the &lt;code&gt;Image&lt;/code&gt; origin from the hotspot
                      of the &lt;code&gt;Cursor&lt;/code&gt; at the instant of the trigger                    
                </param>
                <param>
                    transferable      the subject data of the drag                    
                </param>
                <param>
                    dsl               the &lt;code&gt;DragSourceListener&lt;/code&gt;
                      &lt;P&gt;                    
                </param>
                <throws>
                    java.awt.dnd.InvalidDnDOperationExceptionif the Drag and Drop
                      system is unable to initiate a drag operation, or if the user
                      attempts to start a drag while an existing drag operation
                      is still executing                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="292">
                <params>
                    <param name="trigger" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="dragImage" type="Image"/>
                    <param name="dragOffset" type="Point"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="295">
                Start a drag, given the &lt;code&gt;DragGestureEvent&lt;/code&gt;
                  that initiated the drag, the initial
                  &lt;code&gt;Cursor&lt;/code&gt; to
                  use,
                  the &lt;code&gt;Transferable&lt;/code&gt; subject data
                  of the drag, and the &lt;code&gt;DragSourceListener&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    trigger           the &lt;code&gt;DragGestureEvent&lt;/code&gt; that initiated the drag                    
                </param>
                <param>
                    dragCursor     the initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see &lt;a href=&quot;DragSourceContext.html#defaultCursor&quot;&gt;DragSourceContext&lt;/a&gt; class
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    transferable      the subject data of the drag                    
                </param>
                <param>
                    dsl               the &lt;code&gt;DragSourceListener&lt;/code&gt;
                      &lt;P&gt;                    
                </param>
                <throws>
                    java.awt.dnd.InvalidDnDOperationExceptionif the Drag and Drop
                      system is unable to initiate a drag operation, or if the user
                      attempts to start a drag while an existing drag operation
                      is still executing                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="316">
                <params>
                    <param name="trigger" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="319">
                Creates the {@code DragSourceContext} to handle the current drag
                  operation.
                  &lt;p&gt;
                  To incorporate a new &lt;code&gt;DragSourceContext&lt;/code&gt;
                  subclass, subclass &lt;code&gt;DragSource&lt;/code&gt; and
                  override this method.
                  &lt;p&gt;
                  If &lt;code&gt;dragImage&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no image is used
                  to represent the drag over feedback for this drag operation, but
                  &lt;code&gt;NullPointerException&lt;/code&gt; is not thrown.
                  &lt;p&gt;
                  If &lt;code&gt;dsl&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no drag source listener
                  is registered with the created &lt;code&gt;DragSourceContext&lt;/code&gt;,
                  but &lt;code&gt;NullPointerException&lt;/code&gt; is not thrown.                
                <param>
                    dscp          The &lt;code&gt;DragSourceContextPeer&lt;/code&gt; for this drag                    
                </param>
                <param>
                    dgl           The &lt;code&gt;DragGestureEvent&lt;/code&gt; that triggered the
                      drag                    
                </param>
                <param>
                    dragCursor     The initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see &lt;a href=&quot;DragSourceContext.html#defaultCursor&quot;&gt;DragSourceContext&lt;/a&gt; class
                      for more details on the cursor handling mechanism during drag and drop                    
                </param>
                <param>
                    dragImage     The &lt;code&gt;Image&lt;/code&gt; to drag or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    imageOffset   The offset of the &lt;code&gt;Image&lt;/code&gt; origin from the
                      hotspot of the cursor at the instant of the trigger                    
                </param>
                <param>
                    t             The subject data of the drag                    
                </param>
                <param>
                    dsl           The &lt;code&gt;DragSourceListener&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;DragSourceContext&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;dscp&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;dgl&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;dragImage&lt;/code&gt; is not
                      &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;imageOffset&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;t&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;Component&lt;/code&gt;
                      associated with the trigger event is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;DragSource&lt;/code&gt; for the
                      trigger event is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if the drag action for the
                      trigger event is &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if the source actions for the
                      &lt;code&gt;DragGestureRecognizer&lt;/code&gt; associated with the trigger
                      event are equal to &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="createDragSourceContext" type="DragSourceContext" line="362">
                <params>
                    <param name="dscp" type="DragSourceContextPeer"/>
                    <param name="dgl" type="DragGestureEvent"/>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="dragImage" type="Image"/>
                    <param name="imageOffset" type="Point"/>
                    <param name="t" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="365">
                This method returns the
                  &lt;code&gt;FlavorMap&lt;/code&gt; for this &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the &lt;code&gt;FlavorMap&lt;/code&gt; for this &lt;code&gt;DragSource&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getFlavorMap" type="FlavorMap" line="371"/>
            <javadoc line="374">
                Creates a new &lt;code&gt;DragGestureRecognizer&lt;/code&gt;
                  that implements the specified
                  abstract subclass of
                  &lt;code&gt;DragGestureRecognizer&lt;/code&gt;, and
                  sets the specified &lt;code&gt;Component&lt;/code&gt;
                  and &lt;code&gt;DragGestureListener&lt;/code&gt; on
                  the newly created object.
                  &lt;P&gt;                
                <param>
                    recognizerAbstractClass the requested abstract type                    
                </param>
                <param>
                    actions                 the permitted source drag actions                    
                </param>
                <param>
                    c                       the &lt;code&gt;Component&lt;/code&gt; target                    
                </param>
                <param>
                    dgl        the &lt;code&gt;DragGestureListener&lt;/code&gt; to notify
                      &lt;P&gt;                    
                </param>
                <return>
                    the new &lt;code&gt;DragGestureRecognizer&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;
                      if the &lt;code&gt;Toolkit.createDragGestureRecognizer&lt;/code&gt; method
                      has no implementation available for
                      the requested &lt;code&gt;DragGestureRecognizer&lt;/code&gt;
                      subclass and returns &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createDragGestureRecognizer" type="T" line="394">
                <params>
                    <param name="recognizerAbstractClass" type="Class&lt;T&gt;"/>
                    <param name="c" type="Component"/>
                    <param name="actions" type="int"/>
                    <param name="dgl" type="DragGestureListener"/>
                </params>
            </method>
            <javadoc line="397">
                Creates a new &lt;code&gt;DragGestureRecognizer&lt;/code&gt;
                  that implements the default
                  abstract subclass of &lt;code&gt;DragGestureRecognizer&lt;/code&gt;
                  for this &lt;code&gt;DragSource&lt;/code&gt;,
                  and sets the specified &lt;code&gt;Component&lt;/code&gt;
                  and &lt;code&gt;DragGestureListener&lt;/code&gt; on the
                  newly created object.
                  For this &lt;code&gt;DragSource&lt;/code&gt;
                  the default is &lt;code&gt;MouseDragGestureRecognizer&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    c       the &lt;code&gt;Component&lt;/code&gt; target for the recognizer                    
                </param>
                <param>
                    actions the permitted source actions                    
                </param>
                <param>
                    dgl     the &lt;code&gt;DragGestureListener&lt;/code&gt; to notify
                      &lt;P&gt;                    
                </param>
                <return>
                    the new &lt;code&gt;DragGestureRecognizer&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;
                      if the &lt;code&gt;Toolkit.createDragGestureRecognizer&lt;/code&gt; method
                      has no implementation available for
                      the requested &lt;code&gt;DragGestureRecognizer&lt;/code&gt;
                      subclass and returns &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createDefaultDragGestureRecognizer" type="DragGestureRecognizer" line="418">
                <params>
                    <param name="c" type="Component"/>
                    <param name="actions" type="int"/>
                    <param name="dgl" type="DragGestureListener"/>
                </params>
            </method>
            <javadoc line="421">
                Adds the specified &lt;code&gt;DragSourceListener&lt;/code&gt; to this
                  &lt;code&gt;DragSource&lt;/code&gt; to receive drag source events during drag
                  operations intiated with this &lt;code&gt;DragSource&lt;/code&gt;.
                  If a &lt;code&gt;null&lt;/code&gt; listener is specified, no action is taken and no
                  exception is thrown.                
                <param>
                    dsl the &lt;code&gt;DragSourceListener&lt;/code&gt; to add                    
                </param>
                <see>
                    #removeDragSourceListener                    
                </see>
                <see>
                    #getDragSourceListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addDragSourceListener" type="void" line="432">
                <params>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
                <scope line="433">
                    <scope line="434"/>
                </scope>
            </method>
            <javadoc line="439">
                Removes the specified &lt;code&gt;DragSourceListener&lt;/code&gt; from this
                  &lt;code&gt;DragSource&lt;/code&gt;.
                  If a &lt;code&gt;null&lt;/code&gt; listener is specified, no action is taken and no
                  exception is thrown.
                  If the listener specified by the argument was not previously added to
                  this &lt;code&gt;DragSource&lt;/code&gt;, no action is taken and no exception
                  is thrown.                
                <param>
                    dsl the &lt;code&gt;DragSourceListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    #addDragSourceListener                    
                </see>
                <see>
                    #getDragSourceListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeDragSourceListener" type="void" line="452">
                <params>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
                <scope line="453">
                    <scope line="454"/>
                </scope>
            </method>
            <javadoc line="459">
                Gets all the &lt;code&gt;DragSourceListener&lt;/code&gt;s
                  registered with this &lt;code&gt;DragSource&lt;/code&gt;.                
                <return>
                    all of this &lt;code&gt;DragSource&lt;/code&gt;&apos;s
                      &lt;code&gt;DragSourceListener&lt;/code&gt;s or an empty array if no
                      such listeners are currently registered                    
                </return>
                <see>
                    #addDragSourceListener                    
                </see>
                <see>
                    #removeDragSourceListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragSourceListeners" type="DragSourceListener[]" line="469"/>
            <javadoc line="472">
                Adds the specified &lt;code&gt;DragSourceMotionListener&lt;/code&gt; to this
                  &lt;code&gt;DragSource&lt;/code&gt; to receive drag motion events during drag
                  operations intiated with this &lt;code&gt;DragSource&lt;/code&gt;.
                  If a &lt;code&gt;null&lt;/code&gt; listener is specified, no action is taken and no
                  exception is thrown.                
                <param>
                    dsml the &lt;code&gt;DragSourceMotionListener&lt;/code&gt; to add                    
                </param>
                <see>
                    #removeDragSourceMotionListener                    
                </see>
                <see>
                    #getDragSourceMotionListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addDragSourceMotionListener" type="void" line="483">
                <params>
                    <param name="dsml" type="DragSourceMotionListener"/>
                </params>
                <scope line="484">
                    <scope line="485"/>
                </scope>
            </method>
            <javadoc line="490">
                Removes the specified &lt;code&gt;DragSourceMotionListener&lt;/code&gt; from this
                  &lt;code&gt;DragSource&lt;/code&gt;.
                  If a &lt;code&gt;null&lt;/code&gt; listener is specified, no action is taken and no
                  exception is thrown.
                  If the listener specified by the argument was not previously added to
                  this &lt;code&gt;DragSource&lt;/code&gt;, no action is taken and no exception
                  is thrown.                
                <param>
                    dsml the &lt;code&gt;DragSourceMotionListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    #addDragSourceMotionListener                    
                </see>
                <see>
                    #getDragSourceMotionListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeDragSourceMotionListener" type="void" line="503">
                <params>
                    <param name="dsml" type="DragSourceMotionListener"/>
                </params>
                <scope line="504">
                    <scope line="505"/>
                </scope>
            </method>
            <javadoc line="510">
                Gets all of the  &lt;code&gt;DragSourceMotionListener&lt;/code&gt;s
                  registered with this &lt;code&gt;DragSource&lt;/code&gt;.                
                <return>
                    all of this &lt;code&gt;DragSource&lt;/code&gt;&apos;s
                      &lt;code&gt;DragSourceMotionListener&lt;/code&gt;s or an empty array if no
                      such listeners are currently registered                    
                </return>
                <see>
                    #addDragSourceMotionListener                    
                </see>
                <see>
                    #removeDragSourceMotionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragSourceMotionListeners" type="DragSourceMotionListener[]" line="520"/>
            <javadoc line="523">
                Gets all the objects currently registered as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s upon this &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this
                      &lt;code&gt;DragSource&lt;/code&gt;, or an empty array if no such listeners
                      have been added                    
                </return>
                <exception>
                    &lt;code&gt;ClassCastException&lt;/code&gt; if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getDragSourceListeners                    
                </see>
                <see>
                    #getDragSourceMotionListeners                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="542">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
                <declaration name="l" type="EventListener" line="543"/>
                <scope line="544"/>
                <scope line="547"/>
            </method>
            <javadoc line="552">
                This method calls &lt;code&gt;dragEnter&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the &lt;code&gt;DragSourceDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDragEnter" type="void" line="559">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="560"/>
                <scope line="561"/>
            </method>
            <javadoc line="565">
                This method calls &lt;code&gt;dragOver&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the &lt;code&gt;DragSourceDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDragOver" type="void" line="572">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="573"/>
                <scope line="574"/>
            </method>
            <javadoc line="578">
                This method calls &lt;code&gt;dropActionChanged&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the &lt;code&gt;DragSourceDragEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDropActionChanged" type="void" line="585">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="586"/>
                <scope line="587"/>
            </method>
            <javadoc line="591">
                This method calls &lt;code&gt;dragExit&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceEvent&lt;/code&gt;.                
                <param>
                    dse the &lt;code&gt;DragSourceEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDragExit" type="void" line="598">
                <params>
                    <param name="dse" type="DragSourceEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="599"/>
                <scope line="600"/>
            </method>
            <javadoc line="604">
                This method calls &lt;code&gt;dragDropEnd&lt;/code&gt; on the
                  &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDropEvent&lt;/code&gt;.                
                <param>
                    dsde the &lt;code&gt;DragSourceEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDragDropEnd" type="void" line="611">
                <params>
                    <param name="dsde" type="DragSourceDropEvent"/>
                </params>
                <declaration name="dsl" type="DragSourceListener" line="612"/>
                <scope line="613"/>
            </method>
            <javadoc line="617">
                This method calls &lt;code&gt;dragMouseMoved&lt;/code&gt; on the
                  &lt;code&gt;DragSourceMotionListener&lt;/code&gt;s registered with this
                  &lt;code&gt;DragSource&lt;/code&gt;, and passes them the specified
                  &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.                
                <param>
                    dsde the &lt;code&gt;DragSourceEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processDragMouseMoved" type="void" line="624">
                <params>
                    <param name="dsde" type="DragSourceDragEvent"/>
                </params>
                <declaration name="dsml" type="DragSourceMotionListener" line="625"/>
                <scope line="626"/>
            </method>
            <javadoc line="630">
                Serializes this &lt;code&gt;DragSource&lt;/code&gt;. This method first performs
                  default serialization. Next, it writes out this object&apos;s
                  &lt;code&gt;FlavorMap&lt;/code&gt; if and only if it can be serialized. If not,
                  &lt;code&gt;null&lt;/code&gt; is written instead. Next, it writes out
                  &lt;code&gt;Serializable&lt;/code&gt; listeners registered with this
                  object. Listeners are written in a &lt;code&gt;null&lt;/code&gt;-terminated sequence
                  of 0 or more pairs. The pair consists of a &lt;code&gt;String&lt;/code&gt; and an
                  &lt;code&gt;Object&lt;/code&gt;; the &lt;code&gt;String&lt;/code&gt; indicates the type of the
                  &lt;code&gt;Object&lt;/code&gt; and is one of the following:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;dragSourceListenerK&lt;/code&gt; indicating a
                  &lt;code&gt;DragSourceListener&lt;/code&gt; object;
                  &lt;li&gt;&lt;code&gt;dragSourceMotionListenerK&lt;/code&gt; indicating a
                  &lt;code&gt;DragSourceMotionListener&lt;/code&gt; object.
                  &lt;/ul&gt;                
                <serialData>
                    Either a &lt;code&gt;FlavorMap&lt;/code&gt; instance, or
                      &lt;code&gt;null&lt;/code&gt;, followed by a &lt;code&gt;null&lt;/code&gt;-terminated
                      sequence of 0 or more pairs; the pair consists of a
                      &lt;code&gt;String&lt;/code&gt; and an &lt;code&gt;Object&lt;/code&gt;; the
                      &lt;code&gt;String&lt;/code&gt; indicates the type of the &lt;code&gt;Object&lt;/code&gt;
                      and is one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;dragSourceListenerK&lt;/code&gt; indicating a
                      &lt;code&gt;DragSourceListener&lt;/code&gt; object;
                      &lt;li&gt;&lt;code&gt;dragSourceMotionListenerK&lt;/code&gt; indicating a
                      &lt;code&gt;DragSourceMotionListener&lt;/code&gt; object.
                      &lt;/ul&gt;.                    
                </serialData>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="660">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="667">
                Deserializes this &lt;code&gt;DragSource&lt;/code&gt;. This method first performs
                  default deserialization. Next, this object&apos;s &lt;code&gt;FlavorMap&lt;/code&gt; is
                  deserialized by using the next object in the stream.
                  If the resulting &lt;code&gt;FlavorMap&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this
                  object&apos;s &lt;code&gt;FlavorMap&lt;/code&gt; is set to the default FlavorMap for
                  this thread&apos;s &lt;code&gt;ClassLoader&lt;/code&gt;.
                  Next, this object&apos;s listeners are deserialized by reading a
                  &lt;code&gt;null&lt;/code&gt;-terminated sequence of 0 or more key/value pairs
                  from the stream:
                  &lt;ul&gt;
                  &lt;li&gt;If a key object is a &lt;code&gt;String&lt;/code&gt; equal to
                  &lt;code&gt;dragSourceListenerK&lt;/code&gt;, a &lt;code&gt;DragSourceListener&lt;/code&gt; is
                  deserialized using the corresponding value object and added to this
                  &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;li&gt;If a key object is a &lt;code&gt;String&lt;/code&gt; equal to
                  &lt;code&gt;dragSourceMotionListenerK&lt;/code&gt;, a
                  &lt;code&gt;DragSourceMotionListener&lt;/code&gt; is deserialized using the
                  corresponding value object and added to this &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;li&gt;Otherwise, the key/value pair is skipped.
                  &lt;/ul&gt;                
                <see>
                    java.awt.datatransfer.SystemFlavorMap#getDefaultFlavorMap                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="691">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="694"/>
                <declaration name="keyOrNull" type="Object" line="697"/>
                <scope line="698">
                    <declaration name="key" type="String" line="699"/>
                    <scope line="700"/>
                    <scope line="703"/>
                    <scope line="706"/>
                </scope>
            </method>
            <javadoc line="711">
                Returns the drag gesture motion threshold. The drag gesture motion threshold
                  defines the recommended behavior for {@link MouseDragGestureRecognizer}s.
                  &lt;p&gt;
                  If the system property &lt;code&gt;awt.dnd.drag.threshold&lt;/code&gt; is set to
                  a positive integer, this method returns the value of the system property;
                  otherwise if a pertinent desktop property is available and supported by
                  the implementation of the Java platform, this method returns the value of
                  that property; otherwise this method returns some default value.
                  The pertinent desktop property can be queried using
                  &lt;code&gt;java.awt.Toolkit.getDesktopProperty(&quot;DnD.gestureMotionThreshold&quot;)&lt;/code&gt;.                
                <return>
                    the drag gesture motion threshold                    
                </return>
                <see>
                    MouseDragGestureRecognizer                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDragThreshold" type="int" line="726">
                <declaration name="ts" type="int" line="727"/>
                <scope line="728"/>
                <scope line="731">
                    <declaration name="td" type="Integer" line="732"/>
                    <scope line="733"/>
                </scope>
            </method>
            <declaration name="flavorMap" type="FlavorMap" line="739"/>
            <declaration name="listener" type="DragSourceListener" line="740"/>
            <declaration name="motionListener" type="DragSourceMotionListener" line="741"/>
        </class>
    </source>