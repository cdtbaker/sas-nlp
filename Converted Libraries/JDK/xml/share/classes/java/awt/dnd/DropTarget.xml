<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.util.TooManyListenersException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.datatransfer.FlavorMap"/>
        <import package="java.awt.datatransfer.SystemFlavorMap"/>
        <import package="javax.swing.Timer"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.awt.dnd.peer.DropTargetPeer"/>
        <class name="DropTarget" line="53">
            <comment line="258">
                Called by DropTargetContext.setTargetActions()
                 with appropriate synchronization.                
            </comment>
            <comment line="623">
                                
            </comment>
            <comment line="755">
                                
            </comment>
            <comment line="815">
                That Component&apos;s  Peer                
            </comment>
            <comment line="820">
                That Component&apos;s &quot;native&quot; Peer                
            </comment>
            <comment line="842">
                the auto scrolling object                
            </comment>
            <comment line="848">
                The delegate                
            </comment>
            <comment line="854">
                The FlavorMap                
            </comment>
            <implements interface="DropTargetListener"/>
            <implements interface="Serializable"/>
            <javadoc line="53">
                The &lt;code&gt;DropTarget&lt;/code&gt; is associated
                  with a &lt;code&gt;Component&lt;/code&gt; when that &lt;code&gt;Component&lt;/code&gt;
                  wishes
                  to accept drops during Drag and Drop operations.
                  &lt;P&gt;
                  Each
                  &lt;code&gt;DropTarget&lt;/code&gt; is associated with a &lt;code&gt;FlavorMap&lt;/code&gt;.
                  The default &lt;code&gt;FlavorMap&lt;/code&gt; hereafter designates the
                  &lt;code&gt;FlavorMap&lt;/code&gt; returned by &lt;code&gt;SystemFlavorMap.getDefaultFlavorMap()&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="69"/>
            <javadoc line="71">
                Creates a new DropTarget given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s) to
                  support, a &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing, a &lt;code&gt;boolean&lt;/code&gt; indicating
                  if the &lt;code&gt;DropTarget&lt;/code&gt; is currently accepting drops, and
                  a &lt;code&gt;FlavorMap&lt;/code&gt; to use (or null for the default &lt;CODE&gt;FlavorMap&lt;/CODE&gt;).
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The <code>Component</code> with which this <code>DropTarget</code> is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this <code>DropTarget</code>                    
                </param>
                <param>
                    dtl       The <code>DropTargetListener</code> for this <code>DropTarget</code>                    
                </param>
                <param>
                    act       Is the <code>DropTarget</code> accepting drops.                    
                </param>
                <param>
                    fm        The <code>FlavorMap</code> to use, or null for the default <CODE>FlavorMap</CODE>                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="93">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                    <param name="act" type="boolean"/>
                    <param name="fm" type="FlavorMap"/>
                </params>
                <comment line="106">
                    do nothing!                    
                </comment>
                <scope line="94"/>
                <scope line="102"/>
                <scope line="104"/>
                <scope line="108"/>
                <scope line="113"/>
                <scope line="115"/>
            </method>
            <javadoc line="120">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s)
                  to support, a &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing, and a &lt;code&gt;boolean&lt;/code&gt; indicating
                  if the &lt;code&gt;DropTarget&lt;/code&gt; is currently accepting drops.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The <code>Component</code> with which this <code>DropTarget</code> is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this <code>DropTarget</code>                    
                </param>
                <param>
                    dtl       The <code>DropTargetListener</code> for this <code>DropTarget</code>                    
                </param>
                <param>
                    act       Is the <code>DropTarget</code> accepting drops.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="140">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                    <param name="act" type="boolean"/>
                </params>
            </method>
            <javadoc line="144">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="150"/>
            <javadoc line="154">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, and the &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The <code>Component</code> with which this <code>DropTarget</code> is associated                    
                </param>
                <param>
                    dtl       The <code>DropTargetListener</code> for this <code>DropTarget</code>                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="168">
                <params>
                    <param name="c" type="Component"/>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="172">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s) to support, and a
                  &lt;code&gt;DropTargetListener&lt;/code&gt; to handle event processing.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The <code>Component</code> with which this <code>DropTarget</code> is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this <code>DropTarget</code>                    
                </param>
                <param>
                    dtl       The <code>DropTargetListener</code> for this <code>DropTarget</code>                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="188">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="192">
                Note: this interface is required to permit the safe association
                  of a DropTarget with a Component in one of two ways, either:
                  &lt;code&gt; component.setDropTarget(droptarget); &lt;/code&gt;
                  or &lt;code&gt; droptarget.setComponent(component); &lt;/code&gt;
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c The new <code>Component</code> this <code>DropTarget</code>
                      is to be associated with.<P>                    
                </param>
            </javadoc>
            <method name="setComponent" type="void" line="203">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <comment line="227">
                    undo the change                    
                </comment>
                <declaration name="old" type="Component" line="207"/>
                <declaration name="oldPeer" type="ComponentPeer" line="208"/>
                <scope line="210">
                    <scope line="215"/>
                </scope>
                <scope line="224"/>
                <scope line="226">
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="234">
                Gets the &lt;code&gt;Component&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the current <code>Component</code>                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="241"/>
            <javadoc line="245">
                Sets the default acceptable actions for this &lt;code&gt;DropTarget&lt;/code&gt;
                  &lt;P&gt;                
                <param>
                    ops the default actions
                      <P>                    
                </param>
                <see>
                    java.awt.dnd.DnDConstants                    
                </see>
            </javadoc>
            <method name="setDefaultActions" type="void" line="253">
                <params>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <method name="doSetDefaultActions" type="void" line="261">
                <params>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                Gets an &lt;code&gt;int&lt;/code&gt; representing the
                  current action(s) supported by this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the current default actions                    
                </return>
            </javadoc>
            <method name="getDefaultActions" type="int" line="272"/>
            <javadoc line="276">
                Sets the DropTarget active if &lt;code&gt;true&lt;/code&gt;,
                  inactive if &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    isActive sets the <code>DropTarget</code> (in)active.                    
                </param>
            </javadoc>
            <method name="setActive" type="void" line="283">
                <params>
                    <param name="isActive" type="boolean"/>
                </params>
                <scope line="284"/>
            </method>
            <javadoc line="291">
                Reports whether or not
                  this &lt;code&gt;DropTarget&lt;/code&gt;
                  is currently active (ready to accept drops).
                  &lt;P&gt;                
                <return>
                    <CODE>true</CODE> if active, <CODE>false</CODE> if not                    
                </return>
            </javadoc>
            <method name="isActive" type="boolean" line="299"/>
            <javadoc line="303">
                Adds a new &lt;code&gt;DropTargetListener&lt;/code&gt; (UNICAST SOURCE).
                  &lt;P&gt;                
                <param>
                    dtl The new <code>DropTargetListener</code>
                      <P>                    
                </param>
                <throws>
                    <code>TooManyListenersException</code> if a
                      <code>DropTargetListener</code> is already added to this
                      <code>DropTarget</code>.                    
                </throws>
            </javadoc>
            <method name="addDropTargetListener" type="void" line="313">
                <params>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="324">
                Removes the current &lt;code&gt;DropTargetListener&lt;/code&gt; (UNICAST SOURCE).
                  &lt;P&gt;                
                <param>
                    dtl the DropTargetListener to deregister.                    
                </param>
            </javadoc>
            <method name="removeDropTargetListener" type="void" line="330">
                <params>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
                <scope line="331"/>
            </method>
            <javadoc line="339">
                Calls &lt;code&gt;dragEnter&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
                <throws>
                    NullPointerException if this <code>DropTarget</code>
                      is active and <code>dtde</code> is <code>null</code>                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragEnter" type="void" line="353">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
                <scope line="356"/>
            </method>
            <javadoc line="364">
                Calls &lt;code&gt;dragOver&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
                <throws>
                    NullPointerException if this <code>DropTarget</code>
                      is active and <code>dtde</code> is <code>null</code>                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragOver" type="void" line="378">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="386">
                Calls &lt;code&gt;dropActionChanged&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the <code>DropTargetDragEvent</code>                    
                </param>
                <throws>
                    NullPointerException if this <code>DropTarget</code>
                      is active and <code>dtde</code> is <code>null</code>                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dropActionChanged" type="void" line="400">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="408">
                Calls &lt;code&gt;dragExit&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.
                  &lt;p&gt;
                  This method itself does not throw any exception
                  for null parameter but for exceptions thrown by
                  the respective method of the listener.                
                <param>
                    dte the <code>DropTargetEvent</code>                    
                </param>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragExit" type="void" line="423">
                <params>
                    <param name="dte" type="DropTargetEvent"/>
                </params>
            </method>
            <javadoc line="431">
                Calls &lt;code&gt;drop&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDropEvent&lt;/code&gt;
                  if this &lt;code&gt;DropTarget&lt;/code&gt; is active.                
                <param>
                    dtde the <code>DropTargetDropEvent</code>                    
                </param>
                <throws>
                    NullPointerException if <code>dtde</code> is null
                      and at least one of the following is true: this
                      <code>DropTarget</code> is not active, or there is
                      no a <code>DropTargetListener</code> registered.                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="drop" type="void" line="446">
                <params>
                    <param name="dtde" type="DropTargetDropEvent"/>
                </params>
                <comment line="452">
                    we should&apos;nt get here ...                    
                </comment>
                <scope line="451"/>
            </method>
            <javadoc line="456">
                Gets the &lt;code&gt;FlavorMap&lt;/code&gt;
                  associated with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  If no &lt;code&gt;FlavorMap&lt;/code&gt; has been set for this
                  &lt;code&gt;DropTarget&lt;/code&gt;, it is associated with the default
                  &lt;code&gt;FlavorMap&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the FlavorMap for this DropTarget                    
                </return>
            </javadoc>
            <method name="getFlavorMap" type="FlavorMap" line="466"/>
            <javadoc line="468">
                Sets the &lt;code&gt;FlavorMap&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    fm the new <code>FlavorMap</code>, or null to
                      associate the default FlavorMap with this DropTarget.                    
                </param>
            </javadoc>
            <method name="setFlavorMap" type="void" line="476">
                <params>
                    <param name="fm" type="FlavorMap"/>
                </params>
            </method>
            <javadoc line="480">
                Notify the DropTarget that it has been associated with a Component
                  This method is usually called from java.awt.Component.addNotify() of
                  the Component associated with this DropTarget to notify the DropTarget
                  that a ComponentPeer has been associated with that Component.
                  Calling this method, other than to notify this DropTarget of the
                  association of the ComponentPeer with the Component may result in
                  a malfunction of the DnD system.
                  &lt;P&gt;                
                <param>
                    peer The Peer of the Component we are associated with!                    
                </param>
            </javadoc>
            <method name="addNotify" type="void" line="497">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
                <scope line="503"/>
                <scope line="507"/>
                <scope line="510"/>
            </method>
            <javadoc line="515">
                Notify the DropTarget that it has been disassociated from a Component
                  This method is usually called from java.awt.Component.removeNotify() of
                  the Component associated with this DropTarget to notify the DropTarget
                  that a ComponentPeer has been disassociated with that Component.
                  Calling this method, other than to notify this DropTarget of the
                  disassociation of the ComponentPeer from the Component may result in
                  a malfunction of the DnD system.
                  &lt;P&gt;                
                <param>
                    peer The Peer of the Component we are being disassociated from!                    
                </param>
            </javadoc>
            <method name="removeNotify" type="void" line="531">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
            </method>
            <javadoc line="538">
                Gets the &lt;code&gt;DropTargetContext&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the <code>DropTargetContext</code> associated with this <code>DropTarget</code>.                    
                </return>
            </javadoc>
            <method name="getDropTargetContext" type="DropTargetContext" line="545"/>
            <javadoc line="549">
                Creates the DropTargetContext associated with this DropTarget.
                  Subclasses may override this method to instantiate their own
                  DropTargetContext subclass.
                  This call is typically only called by the platform&apos;s
                  DropTargetContextPeer as a drag operation encounters this
                  DropTarget. Accessing the Context while no Drag is current
                  has undefined results.                
            </javadoc>
            <method name="createDropTargetContext" type="DropTargetContext" line="560"/>
            <javadoc line="564">
                Serializes this &lt;code&gt;DropTarget&lt;/code&gt;. Performs default serialization,
                  and then writes out this object&apos;s &lt;code&gt;DropTargetListener&lt;/code&gt; if and
                  only if it can be serialized. If not, &lt;code&gt;null&lt;/code&gt; is written
                  instead.                
                <serialData>
                    The default serializable fields, in alphabetical order,
                      followed by either a <code>DropTargetListener</code>
                      instance, or <code>null</code>.                    
                </serialData>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="575">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="582">
                Deserializes this &lt;code&gt;DropTarget&lt;/code&gt;. This method first performs
                  default deserialization for all non-&lt;code&gt;transient&lt;/code&gt; fields. An
                  attempt is then made to deserialize this object&apos;s
                  &lt;code&gt;DropTargetListener&lt;/code&gt; as well. This is first attempted by
                  deserializing the field &lt;code&gt;dtListener&lt;/code&gt;, because, in releases
                  prior to 1.4, a non-&lt;code&gt;transient&lt;/code&gt; field of this name stored the
                  &lt;code&gt;DropTargetListener&lt;/code&gt;. If this fails, the next object in the
                  stream is used instead.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="596">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="604">
                    Pre-1.4 support. &apos;dropTargetContext&apos; was previoulsy transient                    
                </comment>
                <comment line="614">
                    Pre-1.4 support. &apos;dtListener&apos; was previously non-transient                    
                </comment>
                <comment line="618">
                    1.4-compatible byte stream. &apos;dtListener&apos; was written explicitly                    
                </comment>
                <declaration name="f" type="ObjectInputStream.GetField" line="597"/>
                <scope line="599"/>
                <scope line="602"/>
                <scope line="605"/>
                <scope line="614"/>
                <scope line="616"/>
            </method>
            <class name="DropTargetAutoScroller" line="624">
                <comment line="737">
                    fields                    
                </comment>
                <implements interface="ActionListener"/>
                <javadoc line="624">
                    this protected nested class implements autoscrolling                    
                </javadoc>
                <javadoc line="630">
                    construct a DropTargetAutoScroller
                      &lt;P&gt;                    
                    <param>
                        c the <code>Component</code>                        
                    </param>
                    <param>
                        p the <code>Point</code>                        
                    </param>
                </javadoc>
                <method name="DropTargetAutoScroller" type="constructor" line="637">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="652">
                        ignore                        
                    </comment>
                    <comment line="658">
                        ignore                        
                    </comment>
                    <comment line="672">
                        ignore                        
                    </comment>
                    <declaration name="t" type="Toolkit" line="643"/>
                    <declaration name="initial" type="Integer" line="645"/>
                    <declaration name="interval" type="Integer" line="646"/>
                    <scope line="648"/>
                    <scope line="650"/>
                    <scope line="654"/>
                    <scope line="656"/>
                    <scope line="668"/>
                    <scope line="670"/>
                </method>
                <javadoc line="677">
                    update the geometry of the autoscroll region                    
                </javadoc>
                <method name="updateRegion" type="void" line="681">
                    <declaration name="i" type="Insets" line="682"/>
                    <declaration name="size" type="Dimension" line="683"/>
                    <declaration name="newWidth" type="int" line="691"/>
                    <declaration name="newHeight" type="int" line="692"/>
                </method>
                <javadoc line="699">
                    cause autoscroll to occur
                      &lt;P&gt;                    
                    <param>
                        newLocn the <code>Point</code>                        
                    </param>
                </javadoc>
                <method name="updateLocation" type="void" line="705">
                    <params>
                        <param name="newLocn" type="Point"/>
                    </params>
                    <scope line="710"/>
                    <scope line="712"/>
                </method>
                <javadoc line="717">
                    cause autoscrolling to stop                    
                </javadoc>
                <method name="stop" type="void" line="721"/>
                <javadoc line="723">
                    cause autoscroll to occur
                      &lt;P&gt;                    
                    <param>
                        e the <code>ActionEvent</code>                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="729">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
                <declaration name="component" type="Component" line="740"/>
                <declaration name="autoScroll" type="Autoscroll" line="741"/>
                <declaration name="timer" type="Timer" line="743"/>
                <declaration name="locn" type="Point" line="745"/>
                <declaration name="prev" type="Point" line="746"/>
                <declaration name="outer" type="Rectangle" line="748"/>
                <declaration name="inner" type="Rectangle" line="749"/>
                <declaration name="hysteresis" type="int" line="751"/>
            </class>
            <javadoc line="756">
                create an embedded autoscroller
                  &lt;P&gt;                
                <param>
                    c the <code>Component</code>                    
                </param>
                <param>
                    p the <code>Point</code>                    
                </param>
            </javadoc>
            <method name="createDropTargetAutoScroller" type="DropTargetAutoScroller" line="763">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="767">
                initialize autoscrolling
                  &lt;P&gt;                
                <param>
                    p the <code>Point</code>                    
                </param>
            </javadoc>
            <method name="initializeAutoscrolling" type="void" line="773">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="779">
                update autoscrolling with current cursor locn
                  &lt;P&gt;                
                <param>
                    dragCursorLocn the <code>Point</code>                    
                </param>
            </javadoc>
            <method name="updateAutoscroll" type="void" line="785">
                <params>
                    <param name="dragCursorLocn" type="Point"/>
                </params>
            </method>
            <javadoc line="789">
                clear autoscrolling                
            </javadoc>
            <method name="clearAutoscroll" type="void" line="793">
                <scope line="794"/>
            </method>
            <declaration name="dropTargetContext" type="DropTargetContext" line="800"/>
            <javadoc line="800">
                The DropTargetContext associated with this DropTarget.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="component" type="Component" line="807"/>
            <javadoc line="807">
                The Component associated with this DropTarget.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="componentPeer" type="ComponentPeer" line="817"/>
            <declaration name="nativePeer" type="ComponentPeer" line="822"/>
            <declaration name="actions" type="int" line="825"/>
            <javadoc line="825">
                Default permissible actions supported by this DropTarget.                
                <see>
                    #setDefaultActions                    
                </see>
                <see>
                    #getDefaultActions                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="active" type="boolean" line="834"/>
            <javadoc line="834">
                &lt;code&gt;true&lt;/code&gt; if the DropTarget is accepting Drag &amp; Drop operations.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="autoScroller" type="DropTargetAutoScroller" line="845"/>
            <declaration name="dtListener" type="DropTargetListener" line="851"/>
            <declaration name="flavorMap" type="FlavorMap" line="857"/>
        </class>
    </source>