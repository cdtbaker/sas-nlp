<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.util.TooManyListenersException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.datatransfer.FlavorMap"/>
        <import package="java.awt.datatransfer.SystemFlavorMap"/>
        <import package="javax.swing.Timer"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.awt.peer.LightweightPeer"/>
        <import package="java.awt.dnd.peer.DropTargetPeer"/>
        <class name="DropTarget" line="23">
            <implements interface="DropTargetListener"/>
            <implements interface="Serializable"/>
            <javadoc line="23">
                The &lt;code&gt;DropTarget&lt;/code&gt; is associated
                  with a &lt;code&gt;Component&lt;/code&gt; when that &lt;code&gt;Component&lt;/code&gt;
                  wishes
                  to accept drops during Drag and Drop operations.
                  &lt;P&gt;
                  Each
                  &lt;code&gt;DropTarget&lt;/code&gt; is associated with a &lt;code&gt;FlavorMap&lt;/code&gt;.
                  The default &lt;code&gt;FlavorMap&lt;/code&gt; hereafter designates the
                  &lt;code&gt;FlavorMap&lt;/code&gt; returned by &lt;code&gt;SystemFlavorMap.getDefaultFlavorMap()&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="36"/>
            <javadoc line="37">
                Creates a new DropTarget given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s) to
                  support, a &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing, a &lt;code&gt;boolean&lt;/code&gt; indicating
                  if the &lt;code&gt;DropTarget&lt;/code&gt; is currently accepting drops, and
                  a &lt;code&gt;FlavorMap&lt;/code&gt; to use (or null for the default &lt;CODE&gt;FlavorMap&lt;/CODE&gt;).
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The &lt;code&gt;Component&lt;/code&gt; with which this &lt;code&gt;DropTarget&lt;/code&gt; is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <param>
                    dtl       The &lt;code&gt;DropTargetListener&lt;/code&gt; for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <param>
                    act       Is the &lt;code&gt;DropTarget&lt;/code&gt; accepting drops.                    
                </param>
                <param>
                    fm        The &lt;code&gt;FlavorMap&lt;/code&gt; to use, or null for the default &lt;CODE&gt;FlavorMap&lt;/CODE&gt;                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="56">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                    <param name="act" type="boolean"/>
                    <param name="fm" type="FlavorMap"/>
                </params>
                <scope line="57"/>
                <scope line="62"/>
                <scope line="65"/>
                <scope line="67"/>
                <scope line="71"/>
                <scope line="74"/>
            </method>
            <javadoc line="78">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s)
                  to support, a &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing, and a &lt;code&gt;boolean&lt;/code&gt; indicating
                  if the &lt;code&gt;DropTarget&lt;/code&gt; is currently accepting drops.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The &lt;code&gt;Component&lt;/code&gt; with which this &lt;code&gt;DropTarget&lt;/code&gt; is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <param>
                    dtl       The &lt;code&gt;DropTargetListener&lt;/code&gt; for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <param>
                    act       Is the &lt;code&gt;DropTarget&lt;/code&gt; accepting drops.                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="95">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                    <param name="act" type="boolean"/>
                </params>
            </method>
            <javadoc line="98">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="104"/>
            <javadoc line="107">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, and the &lt;code&gt;DropTargetListener&lt;/code&gt;
                  to handle event processing.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The &lt;code&gt;Component&lt;/code&gt; with which this &lt;code&gt;DropTarget&lt;/code&gt; is associated                    
                </param>
                <param>
                    dtl       The &lt;code&gt;DropTargetListener&lt;/code&gt; for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="119">
                <params>
                    <param name="c" type="Component"/>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="122">
                Creates a &lt;code&gt;DropTarget&lt;/code&gt; given the &lt;code&gt;Component&lt;/code&gt;
                  to associate itself with, an &lt;code&gt;int&lt;/code&gt; representing
                  the default acceptable action(s) to support, and a
                  &lt;code&gt;DropTargetListener&lt;/code&gt; to handle event processing.
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c         The &lt;code&gt;Component&lt;/code&gt; with which this &lt;code&gt;DropTarget&lt;/code&gt; is associated                    
                </param>
                <param>
                    ops       The default acceptable actions for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <param>
                    dtl       The &lt;code&gt;DropTargetListener&lt;/code&gt; for this &lt;code&gt;DropTarget&lt;/code&gt;                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="DropTarget" type="constructor" line="136">
                <params>
                    <param name="c" type="Component"/>
                    <param name="ops" type="int"/>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="139">
                Note: this interface is required to permit the safe association
                  of a DropTarget with a Component in one of two ways, either:
                  &lt;code&gt; component.setDropTarget(droptarget); &lt;/code&gt;
                  or &lt;code&gt; droptarget.setComponent(component); &lt;/code&gt;
                  &lt;P&gt;
                  The Component will receive drops only if it is enabled.                
                <param>
                    c The new &lt;code&gt;Component&lt;/code&gt; this &lt;code&gt;DropTarget&lt;/code&gt;
                      is to be associated with.&lt;P&gt;                    
                </param>
            </javadoc>
            <method name="setComponent" type="void" line="149">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="old" type="Component" line="151"/>
                <declaration name="oldPeer" type="ComponentPeer" line="152"/>
                <scope line="153">
                    <scope line="156"/>
                </scope>
                <scope line="162"/>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="172">
                Gets the &lt;code&gt;Component&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the current &lt;code&gt;Component&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="178"/>
            <javadoc line="181">
                Sets the default acceptable actions for this &lt;code&gt;DropTarget&lt;/code&gt;
                  &lt;P&gt;                
                <param>
                    ops the default actions
                      &lt;P&gt;                    
                </param>
                <see>
                    java.awt.dnd.DnDConstants                    
                </see>
            </javadoc>
            <method name="setDefaultActions" type="void" line="188">
                <params>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <method name="doSetDefaultActions" type="void" line="191">
                <params>
                    <param name="ops" type="int"/>
                </params>
            </method>
            <javadoc line="194">
                Gets an &lt;code&gt;int&lt;/code&gt; representing the
                  current action(s) supported by this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the current default actions                    
                </return>
            </javadoc>
            <method name="getDefaultActions" type="int" line="200"/>
            <javadoc line="203">
                Sets the DropTarget active if &lt;code&gt;true&lt;/code&gt;,
                  inactive if &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    isActive sets the &lt;code&gt;DropTarget&lt;/code&gt; (in)active.                    
                </param>
            </javadoc>
            <method name="setActive" type="void" line="209">
                <params>
                    <param name="isActive" type="boolean"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Reports whether or not
                  this &lt;code&gt;DropTarget&lt;/code&gt;
                  is currently active (ready to accept drops).
                  &lt;P&gt;                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if active, &lt;CODE&gt;false&lt;/CODE&gt; if not                    
                </return>
            </javadoc>
            <method name="isActive" type="boolean" line="222"/>
            <javadoc line="225">
                Adds a new &lt;code&gt;DropTargetListener&lt;/code&gt; (UNICAST SOURCE).
                  &lt;P&gt;                
                <param>
                    dtl The new &lt;code&gt;DropTargetListener&lt;/code&gt;
                      &lt;P&gt;                    
                </param>
                <throws>
                    &lt;code&gt;TooManyListenersException&lt;/code&gt; if a
                      &lt;code&gt;DropTargetListener&lt;/code&gt; is already added to this
                      &lt;code&gt;DropTarget&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="addDropTargetListener" type="void" line="234">
                <params>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
            </method>
            <javadoc line="240">
                Removes the current &lt;code&gt;DropTargetListener&lt;/code&gt; (UNICAST SOURCE).
                  &lt;P&gt;                
                <param>
                    dtl the DropTargetListener to deregister.                    
                </param>
            </javadoc>
            <method name="removeDropTargetListener" type="void" line="245">
                <params>
                    <param name="dtl" type="DropTargetListener"/>
                </params>
                <scope line="246"/>
            </method>
            <javadoc line="251">
                Calls &lt;code&gt;dragEnter&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if this &lt;code&gt;DropTarget&lt;/code&gt;
                      is active and &lt;code&gt;dtde&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragEnter" type="void" line="262">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="270">
                Calls &lt;code&gt;dragOver&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if this &lt;code&gt;DropTarget&lt;/code&gt;
                      is active and &lt;code&gt;dtde&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragOver" type="void" line="281">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="286">
                Calls &lt;code&gt;dropActionChanged&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDragEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.                
                <param>
                    dtde the &lt;code&gt;DropTargetDragEvent&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if this &lt;code&gt;DropTarget&lt;/code&gt;
                      is active and &lt;code&gt;dtde&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dropActionChanged" type="void" line="297">
                <params>
                    <param name="dtde" type="DropTargetDragEvent"/>
                </params>
            </method>
            <javadoc line="302">
                Calls &lt;code&gt;dragExit&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetEvent&lt;/code&gt;.
                  Has no effect if this &lt;code&gt;DropTarget&lt;/code&gt;
                  is not active.
                  &lt;p&gt;
                  This method itself does not throw any exception
                  for null parameter but for exceptions thrown by
                  the respective method of the listener.                
                <param>
                    dte the &lt;code&gt;DropTargetEvent&lt;/code&gt;                    
                </param>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="dragExit" type="void" line="315">
                <params>
                    <param name="dte" type="DropTargetEvent"/>
                </params>
            </method>
            <javadoc line="320">
                Calls &lt;code&gt;drop&lt;/code&gt; on the registered
                  &lt;code&gt;DropTargetListener&lt;/code&gt; and passes it
                  the specified &lt;code&gt;DropTargetDropEvent&lt;/code&gt;
                  if this &lt;code&gt;DropTarget&lt;/code&gt; is active.                
                <param>
                    dtde the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;dtde&lt;/code&gt; is null
                      and at least one of the following is true: this
                      &lt;code&gt;DropTarget&lt;/code&gt; is not active, or there is
                      no a &lt;code&gt;DropTargetListener&lt;/code&gt; registered.                    
                </throws>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="drop" type="void" line="332">
                <params>
                    <param name="dtde" type="DropTargetDropEvent"/>
                </params>
                <scope line="335"/>
            </method>
            <javadoc line="339">
                Gets the &lt;code&gt;FlavorMap&lt;/code&gt;
                  associated with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  If no &lt;code&gt;FlavorMap&lt;/code&gt; has been set for this
                  &lt;code&gt;DropTarget&lt;/code&gt;, it is associated with the default
                  &lt;code&gt;FlavorMap&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the FlavorMap for this DropTarget                    
                </return>
            </javadoc>
            <method name="getFlavorMap" type="FlavorMap" line="348"/>
            <javadoc line="351">
                Sets the &lt;code&gt;FlavorMap&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <param>
                    fm the new &lt;code&gt;FlavorMap&lt;/code&gt;, or null to
                      associate the default FlavorMap with this DropTarget.                    
                </param>
            </javadoc>
            <method name="setFlavorMap" type="void" line="358">
                <params>
                    <param name="fm" type="FlavorMap"/>
                </params>
            </method>
            <javadoc line="361">
                Notify the DropTarget that it has been associated with a Component
                  This method is usually called from java.awt.Component.addNotify() of
                  the Component associated with this DropTarget to notify the DropTarget
                  that a ComponentPeer has been associated with that Component.
                  Calling this method, other than to notify this DropTarget of the
                  association of the ComponentPeer with the Component may result in
                  a malfunction of the DnD system.
                  &lt;P&gt;                
                <param>
                    peer The Peer of the Component we are associated with!                    
                </param>
            </javadoc>
            <method name="addNotify" type="void" line="372">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
                <scope line="375"/>
                <scope line="378"/>
                <scope line="382"/>
            </method>
            <javadoc line="386">
                Notify the DropTarget that it has been disassociated from a Component
                  This method is usually called from java.awt.Component.removeNotify() of
                  the Component associated with this DropTarget to notify the DropTarget
                  that a ComponentPeer has been disassociated with that Component.
                  Calling this method, other than to notify this DropTarget of the
                  disassociation of the ComponentPeer from the Component may result in
                  a malfunction of the DnD system.
                  &lt;P&gt;                
                <param>
                    peer The Peer of the Component we are being disassociated from!                    
                </param>
            </javadoc>
            <method name="removeNotify" type="void" line="397">
                <params>
                    <param name="peer" type="ComponentPeer"/>
                </params>
            </method>
            <javadoc line="401">
                Gets the &lt;code&gt;DropTargetContext&lt;/code&gt; associated
                  with this &lt;code&gt;DropTarget&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the &lt;code&gt;DropTargetContext&lt;/code&gt; associated with this &lt;code&gt;DropTarget&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getDropTargetContext" type="DropTargetContext" line="407"/>
            <javadoc line="410">
                Creates the DropTargetContext associated with this DropTarget.
                  Subclasses may override this method to instantiate their own
                  DropTargetContext subclass.
                  This call is typically only called by the platform&apos;s
                  DropTargetContextPeer as a drag operation encounters this
                  DropTarget. Accessing the Context while no Drag is current
                  has undefined results.                
            </javadoc>
            <method name="createDropTargetContext" type="DropTargetContext" line="419"/>
            <javadoc line="422">
                Serializes this &lt;code&gt;DropTarget&lt;/code&gt;. Performs default serialization,
                  and then writes out this object&apos;s &lt;code&gt;DropTargetListener&lt;/code&gt; if and
                  only if it can be serialized. If not, &lt;code&gt;null&lt;/code&gt; is written
                  instead.                
                <serialData>
                    The default serializable fields, in alphabetical order,
                      followed by either a &lt;code&gt;DropTargetListener&lt;/code&gt;
                      instance, or &lt;code&gt;null&lt;/code&gt;.                    
                </serialData>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="432">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="436">
                Deserializes this &lt;code&gt;DropTarget&lt;/code&gt;. This method first performs
                  default deserialization for all non-&lt;code&gt;transient&lt;/code&gt; fields. An
                  attempt is then made to deserialize this object&apos;s
                  &lt;code&gt;DropTargetListener&lt;/code&gt; as well. This is first attempted by
                  deserializing the field &lt;code&gt;dtListener&lt;/code&gt;, because, in releases
                  prior to 1.4, a non-&lt;code&gt;transient&lt;/code&gt; field of this name stored the
                  &lt;code&gt;DropTargetListener&lt;/code&gt;. If this fails, the next object in the
                  stream is used instead.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="447">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="f" type="ObjectInputStream.GetField" line="448"/>
                <scope line="449"/>
                <scope line="452"/>
                <scope line="454"/>
                <scope line="460"/>
                <scope line="463"/>
            </method>
            <class name="DropTargetAutoScroller" line="467">
                <implements interface="ActionListener"/>
                <javadoc line="467">
                    this protected nested class implements autoscrolling                    
                </javadoc>
                <javadoc line="471">
                    construct a DropTargetAutoScroller
                      &lt;P&gt;                    
                    <param>
                        c the &lt;code&gt;Component&lt;/code&gt;                        
                    </param>
                    <param>
                        p the &lt;code&gt;Point&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="DropTargetAutoScroller" type="constructor" line="477">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="t" type="Toolkit" line="481"/>
                    <declaration name="initial" type="Integer" line="482"/>
                    <declaration name="interval" type="Integer" line="483"/>
                    <scope line="484"/>
                    <scope line="487"/>
                    <scope line="489"/>
                    <scope line="492"/>
                    <scope line="499"/>
                    <scope line="502"/>
                </method>
                <javadoc line="506">
                    update the geometry of the autoscroll region                    
                </javadoc>
                <method name="updateRegion" type="void" line="509">
                    <declaration name="i" type="Insets" line="510"/>
                    <declaration name="size" type="Dimension" line="511"/>
                    <declaration name="newWidth" type="int" line="514"/>
                    <declaration name="newHeight" type="int" line="515"/>
                </method>
                <javadoc line="518">
                    cause autoscroll to occur
                      &lt;P&gt;                    
                    <param>
                        newLocn the &lt;code&gt;Point&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="updateLocation" type="void" line="523">
                    <params>
                        <param name="newLocn" type="Point"/>
                    </params>
                    <scope line="526"/>
                    <scope line="529"/>
                </method>
                <javadoc line="533">
                    cause autoscrolling to stop                    
                </javadoc>
                <method name="stop" type="void" line="536"/>
                <javadoc line="539">
                    cause autoscroll to occur
                      &lt;P&gt;                    
                    <param>
                        e the &lt;code&gt;ActionEvent&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="544">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
                <declaration name="component" type="Component" line="548"/>
                <declaration name="autoScroll" type="Autoscroll" line="549"/>
                <declaration name="timer" type="Timer" line="550"/>
                <declaration name="locn" type="Point" line="551"/>
                <declaration name="prev" type="Point" line="552"/>
                <declaration name="outer" type="Rectangle" line="553"/>
                <declaration name="inner" type="Rectangle" line="554"/>
                <declaration name="hysteresis" type="int" line="555"/>
            </class>
            <javadoc line="557">
                create an embedded autoscroller
                  &lt;P&gt;                
                <param>
                    c the &lt;code&gt;Component&lt;/code&gt;                    
                </param>
                <param>
                    p the &lt;code&gt;Point&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="createDropTargetAutoScroller" type="DropTargetAutoScroller" line="563">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="566">
                initialize autoscrolling
                  &lt;P&gt;                
                <param>
                    p the &lt;code&gt;Point&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="initializeAutoscrolling" type="void" line="571">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="575">
                update autoscrolling with current cursor locn
                  &lt;P&gt;                
                <param>
                    dragCursorLocn the &lt;code&gt;Point&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="updateAutoscroll" type="void" line="580">
                <params>
                    <param name="dragCursorLocn" type="Point"/>
                </params>
            </method>
            <javadoc line="583">
                clear autoscrolling                
            </javadoc>
            <method name="clearAutoscroll" type="void" line="586">
                <scope line="587"/>
            </method>
            <declaration name="dropTargetContext" type="DropTargetContext" line="592"/>
            <javadoc line="592">
                The DropTargetContext associated with this DropTarget.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="component" type="Component" line="597"/>
            <javadoc line="597">
                The Component associated with this DropTarget.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="componentPeer" type="ComponentPeer" line="602"/>
            <declaration name="nativePeer" type="ComponentPeer" line="603"/>
            <declaration name="actions" type="int" line="604"/>
            <javadoc line="604">
                Default permissible actions supported by this DropTarget.                
                <see>
                    #setDefaultActions                    
                </see>
                <see>
                    #getDefaultActions                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="active" type="boolean" line="611"/>
            <javadoc line="611">
                &lt;code&gt;true&lt;/code&gt; if the DropTarget is accepting Drag &amp; Drop operations.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="autoScroller" type="DropTargetAutoScroller" line="616"/>
            <declaration name="dtListener" type="DropTargetListener" line="617"/>
            <declaration name="flavorMap" type="FlavorMap" line="618"/>
        </class>
    </source>