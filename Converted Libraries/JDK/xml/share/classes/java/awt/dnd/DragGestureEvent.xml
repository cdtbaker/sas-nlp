<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Component"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.util.EventObject"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <class name="DragGestureEvent" line="50">
            <extends class="EventObject"/>
            <comment line="352">
                fields                
            </comment>
            <javadoc line="50">
                A &lt;code&gt;DragGestureEvent&lt;/code&gt; is passed
                  to &lt;code&gt;DragGestureListener&lt;/code&gt;&apos;s
                  dragGestureRecognized() method
                  when a particular &lt;code&gt;DragGestureRecognizer&lt;/code&gt; detects that a
                  platform dependent drag initiating gesture has occurred
                  on the &lt;code&gt;Component&lt;/code&gt; that it is tracking.
                  The {@code action} field of any {@code DragGestureEvent} instance should take one of the following
                  values:
                  &lt;ul&gt;
                  &lt;li&gt; {@code DnDConstants.ACTION_COPY}&lt;li&gt; {@code DnDConstants.ACTION_MOVE}&lt;li&gt; {@code DnDConstants.ACTION_LINK}&lt;/ul&gt;
                  Assigning the value different from listed above will cause an unspecified behavior.                
                <see>
                    java.awt.dnd.DragGestureRecognizer                    
                </see>
                <see>
                    java.awt.dnd.DragGestureListener                    
                </see>
                <see>
                    java.awt.dnd.DragSource                    
                </see>
                <see>
                    java.awt.dnd.DnDConstants                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="77">
                Constructs a &lt;code&gt;DragGestureEvent&lt;/code&gt; object given by the
                  &lt;code&gt;DragGestureRecognizer&lt;/code&gt; instance firing this event,
                  an {@code act} parameter representing
                  the user&apos;s preferred action, an {@code ori} parameter
                  indicating the origin of the drag, and a {@code List} of
                  events that comprise the gesture({@code evs} parameter).
                  &lt;P&gt;                
                <param>
                    dgr The <code>DragGestureRecognizer</code> firing this event                    
                </param>
                <param>
                    act The user's preferred action.
                      For information on allowable values, see
                      the class description for {@link DragGestureEvent}                    
                </param>
                <param>
                    ori The origin of the drag                    
                </param>
                <param>
                    evs The <code>List</code> of events that comprise the gesture
                      <P>                    
                </param>
                <throws>
                    IllegalArgumentException if any parameter equals {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if the act parameter does not comply with
                      the values given in the class
                      description for {@link DragGestureEvent}                    
                </throws>
                <see>
                    java.awt.dnd.DnDConstants                    
                </see>
            </javadoc>
            <method name="DragGestureEvent" type="constructor" line="101">
                <params>
                    <param name="dgr" type="DragGestureRecognizer"/>
                    <param name="act" type="int"/>
                    <param name="ori" type="Point"/>
                    <param name="evs" type="List<? extends InputEvent>"/>
                </params>
            </method>
            <javadoc line="124">
                Returns the source as a &lt;code&gt;DragGestureRecognizer&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the source as a <code>DragGestureRecognizer</code>                    
                </return>
            </javadoc>
            <method name="getSourceAsDragGestureRecognizer" type="DragGestureRecognizer" line="130"/>
            <javadoc line="134">
                Returns the &lt;code&gt;Component&lt;/code&gt; associated
                  with this &lt;code&gt;DragGestureEvent&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the Component                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="141"/>
            <javadoc line="143">
                Returns the &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    the <code>DragSource</code>                    
                </return>
            </javadoc>
            <method name="getDragSource" type="DragSource" line="149"/>
            <javadoc line="151">
                Returns a &lt;code&gt;Point&lt;/code&gt; in the coordinates
                  of the &lt;code&gt;Component&lt;/code&gt; over which the drag originated.
                  &lt;P&gt;                
                <return>
                    the Point where the drag originated in Component coords.                    
                </return>
            </javadoc>
            <method name="getDragOrigin" type="Point" line="158"/>
            <javadoc line="162">
                Returns an &lt;code&gt;Iterator&lt;/code&gt; for the events
                  comprising the gesture.
                  &lt;P&gt;                
                <return>
                    an Iterator for the events comprising the gesture                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator<InputEvent>" line="169"/>
            <javadoc line="171">
                Returns an &lt;code&gt;Object&lt;/code&gt; array of the
                  events comprising the drag gesture.
                  &lt;P&gt;                
                <return>
                    an array of the events comprising the gesture                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="178"/>
            <javadoc line="180">
                Returns an array of the events comprising the drag gesture.
                  &lt;P&gt;                
                <param>
                    array the array of <code>EventObject</code> sub(types)
                      <P>                    
                </param>
                <return>
                    an array of the events comprising the gesture                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="188">
                <params>
                    <param name="array" type="Object[]"/>
                </params>
            </method>
            <javadoc line="190">
                Returns an &lt;code&gt;int&lt;/code&gt; representing the
                  action selected by the user.
                  &lt;P&gt;                
                <return>
                    the action selected by the user                    
                </return>
            </javadoc>
            <method name="getDragAction" type="int" line="197"/>
            <javadoc line="199">
                Returns the initial event that triggered the gesture.
                  &lt;P&gt;                
                <return>
                    the first "triggering" event in the sequence of the gesture                    
                </return>
            </javadoc>
            <method name="getTriggerEvent" type="InputEvent" line="205"/>
            <javadoc line="209">
                Starts the drag operation given the &lt;code&gt;Cursor&lt;/code&gt; for this drag
                  operation and the &lt;code&gt;Transferable&lt;/code&gt; representing the source data
                  for this drag operation.
                  &lt;br&gt;
                  If a &lt;code&gt;null&lt;/code&gt; &lt;code&gt;Cursor&lt;/code&gt; is specified no exception will
                  be thrown and default drag cursors will be used instead.
                  &lt;br&gt;
                  If a &lt;code&gt;null&lt;/code&gt; &lt;code&gt;Transferable&lt;/code&gt; is specified
                  &lt;code&gt;NullPointerException&lt;/code&gt; will be thrown.                
                <param>
                    dragCursor     The initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see
                      <a href="DragSourceContext.html#defaultCursor">DragSourceContext</a>
                      for more details on the cursor handling mechanism
                      during drag and drop                    
                </param>
                <param>
                    transferable The <code>Transferable</code> representing the source
                      data for this drag operation.                    
                </param>
                <throws>
                    InvalidDnDOperationException if the Drag and Drop
                      system is unable to initiate a drag operation, or if the user
                      attempts to start a drag while an existing drag operation is
                      still executing.                    
                </throws>
                <throws>
                    NullPointerException if the {@code Transferable} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="startDrag" type="void" line="236">
                <params>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="transferable" type="Transferable"/>
                </params>
            </method>
            <javadoc line="240">
                Starts the drag given the initial &lt;code&gt;Cursor&lt;/code&gt; to display,
                  the &lt;code&gt;Transferable&lt;/code&gt; object,
                  and the &lt;code&gt;DragSourceListener&lt;/code&gt; to use.
                  &lt;P&gt;                
                <param>
                    dragCursor     The initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see
                      <a href="DragSourceContext.html#defaultCursor">DragSourceContext</a>
                      for more details on the cursor handling mechanism
                      during drag and drop                    
                </param>
                <param>
                    transferable The source's Transferable                    
                </param>
                <param>
                    dsl          The source's DragSourceListener
                      <P>                    
                </param>
                <throws>
                    InvalidDnDOperationException if
                      the Drag and Drop system is unable to
                      initiate a drag operation, or if the user
                      attempts to start a drag while an existing
                      drag operation is still executing.                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="261">
                <params>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="265">
                Start the drag given the initial &lt;code&gt;Cursor&lt;/code&gt; to display,
                  a drag &lt;code&gt;Image&lt;/code&gt;, the offset of
                  the &lt;code&gt;Image&lt;/code&gt;,
                  the &lt;code&gt;Transferable&lt;/code&gt; object, and
                  the &lt;code&gt;DragSourceListener&lt;/code&gt; to use.
                  &lt;P&gt;                
                <param>
                    dragCursor     The initial {@code Cursor} for this drag operation
                      or {@code null} for the default cursor handling;
                      see
                      <a href="DragSourceContext.html#defaultCursor">DragSourceContext</a>
                      for more details on the cursor handling mechanism
                      during drag and drop                    
                </param>
                <param>
                    dragImage    The source's dragImage                    
                </param>
                <param>
                    imageOffset  The dragImage's offset                    
                </param>
                <param>
                    transferable The source's Transferable                    
                </param>
                <param>
                    dsl          The source's DragSourceListener
                      <P>                    
                </param>
                <throws>
                    InvalidDnDOperationException if
                      the Drag and Drop system is unable to
                      initiate a drag operation, or if the user
                      attempts to start a drag while an existing
                      drag operation is still executing.                    
                </throws>
            </javadoc>
            <method name="startDrag" type="void" line="290">
                <params>
                    <param name="dragCursor" type="Cursor"/>
                    <param name="dragImage" type="Image"/>
                    <param name="imageOffset" type="Point"/>
                    <param name="transferable" type="Transferable"/>
                    <param name="dsl" type="DragSourceListener"/>
                </params>
            </method>
            <javadoc line="294">
                Serializes this &lt;code&gt;DragGestureEvent&lt;/code&gt;. Performs default
                  serialization and then writes out this object&apos;s &lt;code&gt;List&lt;/code&gt; of
                  gesture events if and only if the &lt;code&gt;List&lt;/code&gt; can be serialized.
                  If not, &lt;code&gt;null&lt;/code&gt; is written instead. In this case, a
                  &lt;code&gt;DragGestureEvent&lt;/code&gt; created from the resulting deserialized
                  stream will contain an empty &lt;code&gt;List&lt;/code&gt; of gesture events.                
                <serialData>
                    The default serializable fields, in alphabetical order,
                      followed by either a <code>List</code> instance, or
                      <code>null</code>.                    
                </serialData>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="307">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="313">
                Deserializes this &lt;code&gt;DragGestureEvent&lt;/code&gt;. This method first
                  performs default deserialization for all non-&lt;code&gt;transient&lt;/code&gt;
                  fields. An attempt is then made to deserialize this object&apos;s
                  &lt;code&gt;List&lt;/code&gt; of gesture events as well. This is first attempted
                  by deserializing the field &lt;code&gt;events&lt;/code&gt;, because, in releases
                  prior to 1.4, a non-&lt;code&gt;transient&lt;/code&gt; field of this name stored the
                  &lt;code&gt;List&lt;/code&gt; of gesture events. If this fails, the next object in
                  the stream is used instead. If the resulting &lt;code&gt;List&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, this object&apos;s &lt;code&gt;List&lt;/code&gt; of gesture events
                  is set to an empty &lt;code&gt;List&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="329">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="338">
                    Pre-1.4 support. &apos;events&apos; was previously non-transient                    
                </comment>
                <comment line="342">
                    1.4-compatible byte stream. &apos;events&apos; was written explicitly                    
                </comment>
                <comment line="346">
                    Implementation assumes &apos;events&apos; is never null.                    
                </comment>
                <declaration name="f" type="ObjectInputStream.GetField" line="330"/>
                <scope line="338"/>
                <scope line="340"/>
                <scope line="346"/>
            </method>
            <declaration name="events" type="List" line="355"/>
            <declaration name="dragSource" type="DragSource" line="357"/>
            <javadoc line="357">
                The DragSource associated with this DragGestureEvent.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="component" type="Component" line="364"/>
            <javadoc line="364">
                The Component associated with this DragGestureEvent.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="origin" type="Point" line="371"/>
            <javadoc line="371">
                The origin of the drag.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="action" type="int" line="378"/>
            <javadoc line="378">
                The user&apos;s preferred action.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>