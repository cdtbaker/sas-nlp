<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.event.InputEvent"/>
        <class name="DragSourceDragEvent" line="3">
            <extends class="DragSourceEvent"/>
            <javadoc line="3">
                The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; is
                  delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;,
                  via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;DragSourceListener&lt;/code&gt;
                  registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated
                  &lt;code&gt;DragSource&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; reports the &lt;i&gt;target drop action&lt;/i&gt;
                  and the &lt;i&gt;user drop action&lt;/i&gt; that reflect the current state of
                  the drag operation.
                  &lt;p&gt;
                  &lt;i&gt;Target drop action&lt;/i&gt; is one of &lt;code&gt;DnDConstants&lt;/code&gt; that represents
                  the drop action selected by the current drop target if this drop action is
                  supported by the drag source or &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt; if this
                  drop action is not supported by the drag source.
                  &lt;p&gt;
                  &lt;i&gt;User drop action&lt;/i&gt; depends on the drop actions supported by the drag
                  source and the drop action selected by the user. The user can select a drop
                  action by pressing modifier keys during the drag operation:
                  &lt;pre&gt;
                  Ctrl + Shift -&gt; ACTION_LINK
                  Ctrl         -&gt; ACTION_COPY
                  Shift        -&gt; ACTION_MOVE
                  &lt;/pre&gt;
                  If the user selects a drop action, the &lt;i&gt;user drop action&lt;/i&gt; is one of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the selected drop action if this
                  drop action is supported by the drag source or
                  &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt; if this drop action is not supported
                  by the drag source.
                  &lt;p&gt;
                  If the user doesn&apos;t select a drop action, the set of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the set of drop actions supported
                  by the drag source is searched for &lt;code&gt;DnDConstants.ACTION_MOVE&lt;/code&gt;,
                  then for &lt;code&gt;DnDConstants.ACTION_COPY&lt;/code&gt;, then for
                  &lt;code&gt;DnDConstants.ACTION_LINK&lt;/code&gt; and the &lt;i&gt;user drop action&lt;/i&gt; is the
                  first constant found. If no constant is found the &lt;i&gt;user drop action&lt;/i&gt;
                  is &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <javadoc line="44">
                Constructs a &lt;code&gt;DragSourceDragEvent&lt;/code&gt;.
                  This class is typically
                  instantiated by the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;
                  rather than directly
                  by client code.
                  The coordinates for this &lt;code&gt;DragSourceDragEvent&lt;/code&gt;
                  are not specified, so &lt;code&gt;getLocation&lt;/code&gt; will return
                  &lt;code&gt;null&lt;/code&gt; for this event.
                  &lt;p&gt;
                  The arguments &lt;code&gt;dropAction&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; should
                  be one of &lt;code&gt;DnDConstants&lt;/code&gt; that represents a single action.
                  The argument &lt;code&gt;modifiers&lt;/code&gt; should be either a bitwise mask
                  of old &lt;code&gt;java.awt.event.InputEvent._MASK&lt;/code&gt; constants or a
                  bitwise mask of extended &lt;code&gt;java.awt.event.InputEvent._DOWN_MASK&lt;/code&gt;
                  constants.
                  This constructor does not throw any exception for invalid &lt;code&gt;dropAction&lt;/code&gt;,
                  &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;modifiers&lt;/code&gt;.                
                <param>
                    dsc the <code>DragSourceContext</code> that is to manage
                      notifications for this event.                    
                </param>
                <param>
                    dropAction the user drop action.                    
                </param>
                <param>
                    action the target drop action.                    
                </param>
                <param>
                    modifiers the modifier keys down during event (shift, ctrl,
                      alt, meta)
                      Either extended _DOWN_MASK or old _MASK modifiers
                      should be used, but both models should not be mixed
                      in one event. Use of the extended modifiers is
                      preferred.                    
                </param>
                <throws>
                    <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.                    
                </throws>
                <see>
                    java.awt.event.InputEvent                    
                </see>
                <see>
                    DragSourceEvent#getLocation                    
                </see>
            </javadoc>
            <method name="DragSourceDragEvent" type="constructor" line="76">
                <params>
                    <param name="dsc" type="DragSourceContext"/>
                    <param name="dropAction" type="int"/>
                    <param name="action" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="81"/>
                <scope line="84"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <javadoc line="94">
                Constructs a &lt;code&gt;DragSourceDragEvent&lt;/code&gt; given the specified
                  &lt;code&gt;DragSourceContext&lt;/code&gt;, user drop action, target drop action,
                  modifiers and coordinates.
                  &lt;p&gt;
                  The arguments &lt;code&gt;dropAction&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; should
                  be one of &lt;code&gt;DnDConstants&lt;/code&gt; that represents a single action.
                  The argument &lt;code&gt;modifiers&lt;/code&gt; should be either a bitwise mask
                  of old &lt;code&gt;java.awt.event.InputEvent._MASK&lt;/code&gt; constants or a
                  bitwise mask of extended &lt;code&gt;java.awt.event.InputEvent._DOWN_MASK&lt;/code&gt;
                  constants.
                  This constructor does not throw any exception for invalid &lt;code&gt;dropAction&lt;/code&gt;,
                  &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;modifiers&lt;/code&gt;.                
                <param>
                    dsc the <code>DragSourceContext</code> associated with this
                      event.                    
                </param>
                <param>
                    dropAction the user drop action.                    
                </param>
                <param>
                    action the target drop action.                    
                </param>
                <param>
                    modifiers the modifier keys down during event (shift, ctrl,
                      alt, meta)
                      Either extended _DOWN_MASK or old _MASK modifiers
                      should be used, but both models should not be mixed
                      in one event. Use of the extended modifiers is
                      preferred.                    
                </param>
                <param>
                    x   the horizontal coordinate for the cursor location                    
                </param>
                <param>
                    y   the vertical coordinate for the cursor location                    
                </param>
                <throws>
                    <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.                    
                </throws>
                <see>
                    java.awt.event.InputEvent                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="DragSourceDragEvent" type="constructor" line="123">
                <params>
                    <param name="dsc" type="DragSourceContext"/>
                    <param name="dropAction" type="int"/>
                    <param name="action" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="128"/>
                <scope line="131"/>
                <scope line="134"/>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                This method returns the target drop action.                
                <return>
                    the target drop action.                    
                </return>
            </javadoc>
            <method name="getTargetActions" type="int" line="145"/>
            <declaration name="JDK_1_3_MODIFIERS" type="int" line="148"/>
            <declaration name="JDK_1_4_MODIFIERS" type="int" line="149"/>
            <javadoc line="150">
                This method returns an &lt;code&gt;int&lt;/code&gt; representing
                  the current state of the input device modifiers
                  associated with the user&apos;s gesture. Typically these
                  would be mouse buttons or keyboard modifiers.
                  &lt;P&gt;
                  If the &lt;code&gt;modifiers&lt;/code&gt; passed to the constructor
                  are invalid, this method returns them unchanged.                
                <return>
                    the current state of the input device modifiers                    
                </return>
            </javadoc>
            <method name="getGestureModifiers" type="int" line="160"/>
            <javadoc line="163">
                This method returns an &lt;code&gt;int&lt;/code&gt; representing
                  the current state of the input device extended modifiers
                  associated with the user&apos;s gesture.
                  See {@link InputEvent#getModifiersEx}&lt;P&gt;
                  If the &lt;code&gt;modifiers&lt;/code&gt; passed to the constructor
                  are invalid, this method returns them unchanged.                
                <return>
                    the current state of the input device extended modifiers                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGestureModifiersEx" type="int" line="173"/>
            <javadoc line="176">
                This method returns the user drop action.                
                <return>
                    the user drop action.                    
                </return>
            </javadoc>
            <method name="getUserAction" type="int" line="180"/>
            <javadoc line="183">
                This method returns the logical intersection of
                  the target drop action and the set of drop actions supported by
                  the drag source.                
                <return>
                    the logical intersection of the target drop action and
                      the set of drop actions supported by the drag source.                    
                </return>
            </javadoc>
            <method name="getDropAction" type="int" line="190"/>
            <declaration name="targetActions" type="int" line="193"/>
            <javadoc line="193">
                The target drop action.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dropAction" type="int" line="198"/>
            <javadoc line="198">
                The user drop action.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="gestureModifiers" type="int" line="203"/>
            <javadoc line="203">
                The state of the input device modifiers associated with the user
                  gesture.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="invalidModifiers" type="boolean" line="209"/>
            <javadoc line="209">
                Indicates whether the &lt;code&gt;gestureModifiers&lt;/code&gt; are invalid.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="214">
                Sets new modifiers by the old ones.
                  The mouse modifiers have higher priority than overlaying key
                  modifiers.                
            </javadoc>
            <method name="setNewModifiers" type="void" line="219">
                <scope line="220"/>
                <scope line="223"/>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="239">
                Sets old modifiers by the new ones.                
            </javadoc>
            <method name="setOldModifiers" type="void" line="242">
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249"/>
                <scope line="252"/>
                <scope line="255"/>
                <scope line="258"/>
            </method>
        </class>
    </source>