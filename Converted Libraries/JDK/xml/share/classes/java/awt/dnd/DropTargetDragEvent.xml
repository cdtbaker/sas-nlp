<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.dnd">
        <import package="java.awt.Point"/>
        <import package="java.awt.datatransfer.DataFlavor"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.util.List"/>
        <class name="DropTargetDragEvent" line="35">
            <extends class="DropTargetEvent"/>
            <comment line="220">
                fields                
            </comment>
            <javadoc line="35">
                The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; is delivered to a
                  &lt;code&gt;DropTargetListener&lt;/code&gt; via its
                  dragEnter() and dragOver() methods.
                  &lt;p&gt;
                  The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; reports the &lt;i&gt;source drop actions&lt;/i&gt;
                  and the &lt;i&gt;user drop action&lt;/i&gt; that reflect the current state of
                  the drag operation.
                  &lt;p&gt;
                  &lt;i&gt;Source drop actions&lt;/i&gt; is a bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt;
                  that represents the set of drop actions supported by the drag source for
                  this drag operation.
                  &lt;p&gt;
                  &lt;i&gt;User drop action&lt;/i&gt; depends on the drop actions supported by the drag
                  source and the drop action selected by the user. The user can select a drop
                  action by pressing modifier keys during the drag operation:
                  &lt;pre&gt;
                  Ctrl + Shift -&gt; ACTION_LINK
                  Ctrl         -&gt; ACTION_COPY
                  Shift        -&gt; ACTION_MOVE
                  &lt;/pre&gt;
                  If the user selects a drop action, the &lt;i&gt;user drop action&lt;/i&gt; is one of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the selected drop action if this
                  drop action is supported by the drag source or
                  &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt; if this drop action is not supported
                  by the drag source.
                  &lt;p&gt;
                  If the user doesn&apos;t select a drop action, the set of
                  &lt;code&gt;DnDConstants&lt;/code&gt; that represents the set of drop actions supported
                  by the drag source is searched for &lt;code&gt;DnDConstants.ACTION_MOVE&lt;/code&gt;,
                  then for &lt;code&gt;DnDConstants.ACTION_COPY&lt;/code&gt;, then for
                  &lt;code&gt;DnDConstants.ACTION_LINK&lt;/code&gt; and the &lt;i&gt;user drop action&lt;/i&gt; is the
                  first constant found. If no constant is found the &lt;i&gt;user drop action&lt;/i&gt;
                  is &lt;code&gt;DnDConstants.ACTION_NONE&lt;/code&gt;.                
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="77">
                Construct a &lt;code&gt;DropTargetDragEvent&lt;/code&gt; given the
                  &lt;code&gt;DropTargetContext&lt;/code&gt; for this operation,
                  the location of the &quot;Drag&quot; &lt;code&gt;Cursor&lt;/code&gt;&apos;s hotspot
                  in the &lt;code&gt;Component&lt;/code&gt;&apos;s coordinates, the
                  user drop action, and the source drop actions.
                  &lt;P&gt;                
                <param>
                    dtc        The DropTargetContext for this operation                    
                </param>
                <param>
                    cursorLocn The location of the &quot;Drag&quot; Cursor&apos;s
                      hotspot in Component coordinates                    
                </param>
                <param>
                    dropAction The user drop action                    
                </param>
                <param>
                    srcActions The source drop actions                    
                </param>
                <throws>
                    NullPointerException if cursorLocn is null                    
                </throws>
                <throws>
                    &lt;code&gt;IllegalArgumentException&lt;/code&gt; if dropAction is not one of
                      &lt;code&gt;DnDConstants&lt;/code&gt;.                    
                </throws>
                <throws>
                    &lt;code&gt;IllegalArgumentException&lt;/code&gt; if srcActions is not
                      a bitwise mask of &lt;code&gt;DnDConstants&lt;/code&gt;.                    
                </throws>
                <throws>
                    &lt;code&gt;IllegalArgumentException&lt;/code&gt; if dtc is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="DropTargetDragEvent" type="constructor" line="98">
                <params>
                    <param name="dtc" type="DropTargetContext"/>
                    <param name="cursorLocn" type="Point"/>
                    <param name="dropAction" type="int"/>
                    <param name="srcActions" type="int"/>
                </params>
            </method>
            <javadoc line="116">
                This method returns a &lt;code&gt;Point&lt;/code&gt;
                  indicating the &lt;code&gt;Cursor&lt;/code&gt;&apos;s current
                  location within the &lt;code&gt;Component&apos;&lt;/code&gt;s
                  coordinates.
                  &lt;P&gt;                
                <return>
                    the current cursor location in
                      &lt;code&gt;Component&lt;/code&gt;&apos;s coords.                    
                </return>
            </javadoc>
            <method name="getLocation" type="Point" line="126"/>
            <javadoc line="131">
                This method returns the current &lt;code&gt;DataFlavor&lt;/code&gt;s from the
                  &lt;code&gt;DropTargetContext&lt;/code&gt;.
                  &lt;P&gt;                
                <return>
                    current DataFlavors from the DropTargetContext                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavors" type="DataFlavor[]" line="138"/>
            <javadoc line="142">
                This method returns the current &lt;code&gt;DataFlavor&lt;/code&gt;s
                  as a &lt;code&gt;java.util.List&lt;/code&gt;
                  &lt;P&gt;                
                <return>
                    a &lt;code&gt;java.util.List&lt;/code&gt; of the Current &lt;code&gt;DataFlavor&lt;/code&gt;s                    
                </return>
            </javadoc>
            <method name="getCurrentDataFlavorsAsList" type="List<DataFlavor>" line="149"/>
            <javadoc line="153">
                This method returns a &lt;code&gt;boolean&lt;/code&gt; indicating
                  if the specified &lt;code&gt;DataFlavor&lt;/code&gt; is supported.
                  &lt;P&gt;                
                <param>
                    df the &lt;code&gt;DataFlavor&lt;/code&gt; to test
                      &lt;P&gt;                    
                </param>
                <return>
                    if a particular DataFlavor is supported                    
                </return>
            </javadoc>
            <method name="isDataFlavorSupported" type="boolean" line="162">
                <params>
                    <param name="df" type="DataFlavor"/>
                </params>
            </method>
            <javadoc line="166">
                This method returns the source drop actions.                
                <return>
                    the source drop actions                    
                </return>
            </javadoc>
            <method name="getSourceActions" type="int" line="171"/>
            <javadoc line="173">
                This method returns the user drop action.                
                <return>
                    the user drop action                    
                </return>
            </javadoc>
            <method name="getDropAction" type="int" line="178"/>
            <javadoc line="180">
                This method returns the Transferable object that represents
                  the data associated with the current drag operation.                
                <return>
                    the Transferable associated with the drag operation                    
                </return>
                <throws>
                    InvalidDnDOperationException if the data associated with the drag
                      operation is not available                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTransferable" type="Transferable" line="190"/>
            <javadoc line="194">
                Accepts the drag.
                  This method should be called from a
                  &lt;code&gt;DropTargetListeners&lt;/code&gt; &lt;code&gt;dragEnter&lt;/code&gt;,
                  &lt;code&gt;dragOver&lt;/code&gt;, and &lt;code&gt;dropActionChanged&lt;/code&gt;
                  methods if the implementation wishes to accept an operation
                  from the srcActions other than the one selected by
                  the user as represented by the &lt;code&gt;dropAction&lt;/code&gt;.                
                <param>
                    dragOperation the operation accepted by the target                    
                </param>
            </javadoc>
            <method name="acceptDrag" type="void" line="206">
                <params>
                    <param name="dragOperation" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Rejects the drag as a result of examining either the
                  &lt;code&gt;dropAction&lt;/code&gt; or the available &lt;code&gt;DataFlavor&lt;/code&gt;
                  types.                
            </javadoc>
            <method name="rejectDrag" type="void" line="215"/>
            <declaration name="location" type="Point" line="223"/>
            <javadoc line="223">
                The location of the drag cursor&apos;s hotspot in Component coordinates.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="actions" type="int" line="230"/>
            <javadoc line="230">
                The source drop actions.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dropAction" type="int" line="237"/>
            <javadoc line="237">
                The user drop action.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>