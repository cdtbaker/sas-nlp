<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt">
        <import package="java.util"/>
        <import package="java.awt.peer.ChoicePeer"/>
        <import package="java.awt.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <class name="Choice" line="37">
            <extends class="Component"/>
            <comment line="101">
                JDK 1.1 serialVersionUID                
            </comment>
            <comment line="177">
                This is called by the native code, so client code can&apos;t
                 be called on the toolkit thread.                
            </comment>
            <comment line="561">
                REMIND: remove when filtering is done at lower level                
            </comment>
            <comment line="640">
                Serialization support.                
            </comment>
            <comment line="643">
                Choice Serial Data Version.
                 @serial                
            </comment>
            <comment line="712">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="810">
                inner class AccessibleAWTChoice                
            </comment>
            <implements interface="ItemSelectable"/>
            <implements interface="Accessible"/>
            <javadoc line="37">
                The &lt;code&gt;Choice&lt;/code&gt; class presents a pop-up menu of choices.
                  The current choice is displayed as the title of the menu.
                  &lt;p&gt;
                  The following code example produces a pop-up menu:
                  &lt;p&gt;
                  &lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
                  Choice ColorChooser = new Choice();
                  ColorChooser.add(&quot;Green&quot;);
                  ColorChooser.add(&quot;Red&quot;);
                  ColorChooser.add(&quot;Blue&quot;);
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
                  &lt;p&gt;
                  After this choice menu has been added to a panel,
                  it appears as follows in its normal state:
                  &lt;p&gt;
                  &lt;img src=&quot;doc-files/Choice-1.gif&quot; alt=&quot;The following text describes the graphic&quot;
                  ALIGN=center HSPACE=10 VSPACE=7&gt;
                  &lt;p&gt;
                  In the picture, &lt;code&gt;&quot;Green&quot;&lt;/code&gt; is the current choice.
                  Pushing the mouse button down on the object causes a menu to
                  appear with the current choice highlighted.
                  &lt;p&gt;
                  Some native platforms do not support arbitrary resizing of
                  &lt;code&gt;Choice&lt;/code&gt; components and the behavior of
                  &lt;code&gt;setSize()/getSize()&lt;/code&gt; is bound by
                  such limitations.
                  Native GUI &lt;code&gt;Choice&lt;/code&gt; components&apos; size are often bound by such
                  attributes as font size and length of items contained within
                  the &lt;code&gt;Choice&lt;/code&gt;.
                  &lt;p&gt;                
                <author>
                    Sami Shaio                    
                </author>
                <author>
                    Arthur van Hoff                    
                </author>
                <since>
                    JDK1.0                    
                </since>
            </javadoc>
            <declaration name="pItems" type="Vector" line="73"/>
            <javadoc line="73">
                The items for the &lt;code&gt;Choice&lt;/code&gt;.
                  This can be a &lt;code&gt;null&lt;/code&gt; value.                
                <serial>
                                        
                </serial>
                <see>
                    #add(String)                    
                </see>
                <see>
                    #addItem(String)                    
                </see>
                <see>
                    #getItem(int)                    
                </see>
                <see>
                    #getItemCount()                    
                </see>
                <see>
                    #insert(String,int)                    
                </see>
                <see>
                    #remove(String)                    
                </see>
            </javadoc>
            <declaration name="selectedIndex" type="int" line="86"/>
            <javadoc line="86">
                The index of the current choice for this &lt;code&gt;Choice&lt;/code&gt;
                  or -1 if nothing is selected.                
                <serial>
                                        
                </serial>
                <see>
                    #getSelectedItem()                    
                </see>
                <see>
                    #select(int)                    
                </see>
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="95"/>
            <declaration name="base" type="String" line="97"/>
            <declaration name="nameCounter" type="int" line="98"/>
            <declaration name="serialVersionUID" type="long" line="103"/>
            <javadoc line="105">
                Creates a new choice menu. The menu initially has no items in it.
                  &lt;p&gt;
                  By default, the first item added to the choice menu becomes the
                  selected item, until a different selection is made by the user
                  by calling one of the &lt;code&gt;select&lt;/code&gt; methods.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #select(int)                    
                </see>
                <see>
                    #select(java.lang.String)                    
                </see>
            </javadoc>
            <method name="Choice" type="constructor" line="117"/>
            <javadoc line="122">
                Constructs a name for this component.  Called by
                  &lt;code&gt;getName&lt;/code&gt; when the name is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="constructComponentName" type="String" line="126">
                <scope line="127"/>
            </method>
            <javadoc line="132">
                Creates the &lt;code&gt;Choice&lt;/code&gt;&apos;s peer.  This peer allows us
                  to change the look
                  of the &lt;code&gt;Choice&lt;/code&gt; without changing its functionality.                
                <see>
                    java.awt.Toolkit#createChoice(java.awt.Choice)                    
                </see>
                <see>
                    java.awt.Component#getToolkit()                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="139">
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Returns the number of items in this &lt;code&gt;Choice&lt;/code&gt; menu.                
                <return>
                    the number of items in this <code>Choice</code> menu                    
                </return>
                <see>
                    #getItem                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="getItemCount" type="int" line="153"/>
            <javadoc line="157">
                @deprecated As of JDK version 1.1,
                  replaced by &lt;code&gt;getItemCount()&lt;/code&gt;.                
            </javadoc>
            <method name="countItems" type="int" line="162"/>
            <javadoc line="166">
                Gets the string at the specified index in this
                  &lt;code&gt;Choice&lt;/code&gt; menu.                
                <param>
                    index the index at which to begin                    
                </param>
                <see>
                    #getItemCount                    
                </see>
            </javadoc>
            <method name="getItem" type="String" line="172">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getItemImpl" type="String" line="180">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="184">
                Adds an item to this &lt;code&gt;Choice&lt;/code&gt; menu.                
                <param>
                    item    the item to be added                    
                </param>
                <exception>
                    NullPointerException   if the item's value is
                      <code>null</code>                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="add" type="void" line="191">
                <params>
                    <param name="item" type="String"/>
                </params>
            </method>
            <javadoc line="195">
                Obsolete as of Java 2 platform v1.1.  Please use the
                  &lt;code&gt;add&lt;/code&gt; method instead.
                  &lt;p&gt;
                  Adds an item to this &lt;code&gt;Choice&lt;/code&gt; menu.                
                <param>
                    item the item to be added                    
                </param>
                <exception>
                    NullPointerException if the item's value is equal to
                      <code>null</code>                    
                </exception>
            </javadoc>
            <method name="addItem" type="void" line="204">
                <params>
                    <param name="item" type="String"/>
                </params>
                <comment line="210">
                    This could change the preferred size of the Component.                    
                </comment>
                <scope line="205"/>
            </method>
            <javadoc line="213">
                Inserts an item to this &lt;code&gt;Choice&lt;/code&gt;,
                  but does not invalidate the &lt;code&gt;Choice&lt;/code&gt;.
                  Client methods must provide their own synchronization before
                  invoking this method.                
                <param>
                    item the item to be added                    
                </param>
                <param>
                    index the new item position                    
                </param>
                <exception>
                    NullPointerException if the item's value is equal to
                      <code>null</code>                    
                </exception>
            </javadoc>
            <method name="insertNoInvalidate" type="void" line="223">
                <params>
                    <param name="item" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="234">
                    no selection or selection shifted up                    
                </comment>
                <scope line="224"/>
                <declaration name="peer" type="ChoicePeer" line="229"/>
                <scope line="230"/>
                <scope line="234"/>
            </method>
            <javadoc line="240">
                Inserts the item into this choice at the specified position.
                  Existing items at an index greater than or equal to
                  &lt;code&gt;index&lt;/code&gt; are shifted up by one to accommodate
                  the new item.  If &lt;code&gt;index&lt;/code&gt; is greater than or
                  equal to the number of items in this choice,
                  &lt;code&gt;item&lt;/code&gt; is added to the end of this choice.
                  &lt;p&gt;
                  If the item is the first one being added to the choice,
                  then the item becomes selected.  Otherwise, if the
                  selected item was one of the items shifted, the first
                  item in the choice becomes the selected item.  If the
                  selected item was no among those shifted, it remains
                  the selected item.                
                <param>
                    item the non-<code>null</code> item to be inserted                    
                </param>
                <param>
                    index the position at which the item should be inserted                    
                </param>
                <exception>
                    IllegalArgumentException if index is less than 0                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="258">
                <params>
                    <param name="item" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="264">
                                        
                </comment>
                <comment line="270">
                    This could change the preferred size of the Component.                    
                </comment>
                <scope line="259">
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="273">
                Removes the first occurrence of &lt;code&gt;item&lt;/code&gt;
                  from the &lt;code&gt;Choice&lt;/code&gt; menu.  If the item
                  being removed is the currently selected item,
                  then the first item in the choice becomes the
                  selected item.  Otherwise, the currently selected
                  item remains selected (and the selected index is
                  updated accordingly).                
                <param>
                    item  the item to remove from this <code>Choice</code> menu                    
                </param>
                <exception>
                    IllegalArgumentException  if the item doesn't
                      exist in the choice menu                    
                </exception>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="286">
                <params>
                    <param name="item" type="String"/>
                </params>
                <comment line="298">
                    This could change the preferred size of the Component.                    
                </comment>
                <scope line="287">
                    <declaration name="index" type="int" line="288"/>
                    <scope line="289"/>
                    <scope line="292"/>
                </scope>
            </method>
            <javadoc line="301">
                Removes an item from the choice menu
                  at the specified position.  If the item
                  being removed is the currently selected item,
                  then the first item in the choice becomes the
                  selected item.  Otherwise, the currently selected
                  item remains selected (and the selected index is
                  updated accordingly).                
                <param>
                    position the position of the item                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the specified
                      position is out of bounds                    
                </throws>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="314">
                <params>
                    <param name="position" type="int"/>
                </params>
                <comment line="320">
                    This could change the preferred size of the Component.                    
                </comment>
                <scope line="315"/>
            </method>
            <javadoc line="323">
                Removes an item from the &lt;code&gt;Choice&lt;/code&gt; at the
                  specified position, but does not invalidate the &lt;code&gt;Choice&lt;/code&gt;.
                  Client methods must provide their
                  own synchronization before invoking this method.                
                <param>
                    position   the position of the item                    
                </param>
            </javadoc>
            <method name="removeNoInvalidate" type="void" line="330">
                <params>
                    <param name="position" type="int"/>
                </params>
                <comment line="337">
                                        
                </comment>
                <declaration name="peer" type="ChoicePeer" line="332"/>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="339"/>
                <scope line="341"/>
            </method>
            <javadoc line="347">
                Removes all items from the choice menu.                
                <see>
                    #remove                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="352">
                <comment line="362">
                    This could change the preferred size of the Component.                    
                </comment>
                <scope line="353">
                    <scope line="354"/>
                </scope>
            </method>
            <javadoc line="365">
                Gets a representation of the current choice as a string.                
                <return>
                    a string representation of the currently
                      selected item in this choice menu                    
                </return>
                <see>
                    #getSelectedIndex                    
                </see>
            </javadoc>
            <method name="getSelectedItem" type="String" line="371"/>
            <javadoc line="375">
                Returns an array (length 1) containing the currently selected
                  item.  If this choice has no items, returns &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    ItemSelectable                    
                </see>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="380">
                <scope line="381">
                    <declaration name="items" type="Object[]" line="382"/>
                </scope>
            </method>
            <javadoc line="389">
                Returns the index of the currently selected item.
                  If nothing is selected, returns -1.                
                <return>
                    the index of the currently selected item, or -1 if nothing
                      is currently selected                    
                </return>
                <see>
                    #getSelectedItem                    
                </see>
            </javadoc>
            <method name="getSelectedIndex" type="int" line="397"/>
            <javadoc line="401">
                Sets the selected item in this &lt;code&gt;Choice&lt;/code&gt; menu to be the
                  item at the specified position.
                  &lt;p&gt;Note that this method should be primarily used to
                  initially select an item in this component.
                  Programmatically calling this method will &lt;i&gt;not&lt;/i&gt; trigger
                  an &lt;code&gt;ItemEvent&lt;/code&gt;.  The only way to trigger an
                  &lt;code&gt;ItemEvent&lt;/code&gt; is by user interaction.                
                <param>
                    pos      the positon of the selected item                    
                </param>
                <exception>
                    IllegalArgumentException if the specified
                      position is greater than the
                      number of items or less than zero                    
                </exception>
                <see>
                    #getSelectedItem                    
                </see>
                <see>
                    #getSelectedIndex                    
                </see>
            </javadoc>
            <method name="select" type="void" line="418">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="419"/>
                <scope line="422">
                    <declaration name="peer" type="ChoicePeer" line="424"/>
                    <scope line="425"/>
                </scope>
            </method>
            <javadoc line="431">
                Sets the selected item in this &lt;code&gt;Choice&lt;/code&gt; menu
                  to be the item whose name is equal to the specified string.
                  If more than one item matches (is equal to) the specified string,
                  the one with the smallest index is selected.
                  &lt;p&gt;Note that this method should be primarily used to
                  initially select an item in this component.
                  Programmatically calling this method will &lt;i&gt;not&lt;/i&gt; trigger
                  an &lt;code&gt;ItemEvent&lt;/code&gt;.  The only way to trigger an
                  &lt;code&gt;ItemEvent&lt;/code&gt; is by user interaction.                
                <param>
                    str     the specified string                    
                </param>
                <see>
                    #getSelectedItem                    
                </see>
                <see>
                    #getSelectedIndex                    
                </see>
            </javadoc>
            <method name="select" type="void" line="447">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="index" type="int" line="448"/>
                <scope line="449"/>
            </method>
            <javadoc line="454">
                Adds the specified item listener to receive item events from
                  this &lt;code&gt;Choice&lt;/code&gt; menu.  Item events are sent in response
                  to user input, but not in response to calls to &lt;code&gt;select&lt;/code&gt;.
                  If l is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and no action
                  is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l    the item listener                    
                </param>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    #select                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="addItemListener" type="void" line="470">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="471"/>
            </method>
            <javadoc line="478">
                Removes the specified item listener so that it no longer receives
                  item events from this &lt;code&gt;Choice&lt;/code&gt; menu.
                  If l is &lt;code&gt;null&lt;/code&gt;, no exception is thrown and no
                  action is performed.
                  &lt;p&gt;Refer to &lt;a href=&quot;doc-files/AWTThreadIssues.html#ListenersThreads&quot;
                  &gt;AWT Threading Issues&lt;/a&gt; for details on AWT&apos;s threading model.                
                <param>
                    l    the item listener                    
                </param>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="removeItemListener" type="void" line="492">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
                <scope line="493"/>
            </method>
            <javadoc line="499">
                Returns an array of all the item listeners
                  registered on this choice.                
                <return>
                    all of this choice's <code>ItemListener</code>s
                      or an empty array if no item
                      listeners are currently registered                    
                </return>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #removeItemListener                    
                </see>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="513"/>
            <javadoc line="517">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;Choice&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;Choice&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its item listeners with the following code:
                  &lt;pre&gt;ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this choice,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getItemListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="550">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
                <declaration name="l" type="EventListener" line="551"/>
                <scope line="552"/>
                <scope line="554"/>
            </method>
            <method name="eventEnabled" type="boolean" line="561">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="562">
                    <scope line="564"/>
                </scope>
            </method>
            <javadoc line="572">
                Processes events on this choice. If the event is an
                  instance of &lt;code&gt;ItemEvent&lt;/code&gt;, it invokes the
                  &lt;code&gt;processItemEvent&lt;/code&gt; method. Otherwise, it calls its
                  superclass&apos;s &lt;code&gt;processEvent&lt;/code&gt; method.
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    #processItemEvent                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processEvent" type="void" line="586">
                <params>
                    <param name="e" type="AWTEvent"/>
                </params>
                <scope line="587"/>
            </method>
            <javadoc line="594">
                Processes item events occurring on this &lt;code&gt;Choice&lt;/code&gt;
                  menu by dispatching them to any registered
                  &lt;code&gt;ItemListener&lt;/code&gt; objects.
                  &lt;p&gt;
                  This method is not called unless item events are
                  enabled for this component. Item events are enabled
                  when one of the following occurs:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt;An &lt;code&gt;ItemListener&lt;/code&gt; object is registered
                  via &lt;code&gt;addItemListener&lt;/code&gt;.
                  &lt;li&gt;Item events are enabled via &lt;code&gt;enableEvents&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;Note that if the event parameter is &lt;code&gt;null&lt;/code&gt;
                  the behavior is unspecified and may result in an
                  exception.                
                <param>
                    e the item event                    
                </param>
                <see>
                    java.awt.event.ItemEvent                    
                </see>
                <see>
                    java.awt.event.ItemListener                    
                </see>
                <see>
                    #addItemListener(ItemListener)                    
                </see>
                <see>
                    java.awt.Component#enableEvents                    
                </see>
                <since>
                    JDK1.1                    
                </since>
            </javadoc>
            <method name="processItemEvent" type="void" line="618">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <declaration name="listener" type="ItemListener" line="619"/>
                <scope line="620"/>
            </method>
            <javadoc line="625">
                Returns a string representing the state of this &lt;code&gt;Choice&lt;/code&gt;
                  menu. This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not be
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parameter string of this <code>Choice</code> menu                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="634"/>
            <declaration name="choiceSerializedDataVersion" type="int" line="646"/>
            <javadoc line="648">
                Writes default serializable fields to stream.  Writes
                  a list of serializable &lt;code&gt;ItemListeners&lt;/code&gt;
                  as optional data. The non-serializable
                  &lt;code&gt;ItemListeners&lt;/code&gt; are detected and
                  no attempt is made to serialize them.                
                <param>
                    s the <code>ObjectOutputStream</code> to write                    
                </param>
                <serialData>
                    <code>null</code> terminated sequence of 0
                      or more pairs; the pair consists of a <code>String</code>
                      and an <code>Object</code>; the <code>String</code> indicates
                      the type of object and is one of the following:
                      <code>itemListenerK</code> indicating an
                      <code>ItemListener</code> object                    
                </serialData>
                <see>
                    AWTEventMulticaster#save(ObjectOutputStream,String,EventListener)                    
                </see>
                <see>
                    java.awt.Component#itemListenerK                    
                </see>
                <see>
                    #readObject(ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="669">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="676">
                Reads the &lt;code&gt;ObjectInputStream&lt;/code&gt; and if it
                  isn&apos;t &lt;code&gt;null&lt;/code&gt; adds a listener to receive
                  item events fired by the &lt;code&gt;Choice&lt;/code&gt; item.
                  Unrecognized keys or values will be ignored.                
                <param>
                    s the <code>ObjectInputStream</code> to read                    
                </param>
                <exception>
                    HeadlessException if
                      <code>GraphicsEnvironment.isHeadless</code> returns
                      <code>true</code>                    
                </exception>
                <serial>
                                        
                </serial>
                <see>
                    #removeItemListener(ItemListener)                    
                </see>
                <see>
                    #addItemListener(ItemListener)                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #writeObject(ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="694">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="706">
                    skip value for unrecognized key                    
                </comment>
                <declaration name="keyOrNull" type="Object" line="698"/>
                <scope line="699">
                    <declaration name="key" type="String" line="700"/>
                </scope>
            </method>
            <javadoc line="716">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;Choice&lt;/code&gt;. For &lt;code&gt;Choice&lt;/code&gt; components,
                  the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleAWTChoice&lt;/code&gt;. A new &lt;code&gt;AccessibleAWTChoice&lt;/code&gt;
                  instance is created if necessary.                
                <return>
                    an <code>AccessibleAWTChoice</code> that serves as the
                      <code>AccessibleContext</code> of this <code>Choice</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="727">
                <scope line="728"/>
            </method>
            <class name="AccessibleAWTChoice" line="734">
                <extends class="AccessibleAWTComponent"/>
                <comment line="744">
                    JDK 1.3 serialVersionUID                    
                </comment>
                <implements interface="AccessibleAction"/>
                <javadoc line="734">
                    This class implements accessibility support for the
                      &lt;code&gt;Choice&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to choice user-interface elements.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="746"/>
                <method name="AccessibleAWTChoice" type="constructor" line="748"/>
                <javadoc line="752">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                    <see>
                        AccessibleAction                        
                    </see>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="761"/>
                <javadoc line="765">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="772"/>
                <javadoc line="776">
                    Returns the number of accessible actions available in this object
                      If there are more than one, the first one is considered the &quot;default&quot;
                      action of the object.                    
                    <return>
                        the zero-based number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="783">
                    <comment line="785">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="787">
                    Returns a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                    <return>
                        a String description of the action                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="794">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="796">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
                <javadoc line="798">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the action was performed; otherwise false.                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="805">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="807">
                        To be fully implemented in a future release                        
                    </comment>
                </method>
            </class>
        </class>
    </source>