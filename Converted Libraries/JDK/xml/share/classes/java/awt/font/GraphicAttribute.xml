<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.awt.font">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="GraphicAttribute" line="7">
            <javadoc line="7">
                This class is used with the CHAR_REPLACEMENT attribute.
                  &lt;p&gt;
                  The &lt;code&gt;GraphicAttribute&lt;/code&gt; class represents a graphic embedded
                  in text. Clients subclass this class to implement their own char
                  replacement graphics.  Clients wishing to embed shapes and images in
                  text need not subclass this class.  Instead, clients can use the{@link ShapeGraphicAttribute} and {@link ImageGraphicAttribute}classes.
                  &lt;p&gt;
                  Subclasses must ensure that their objects are immutable once they
                  are constructed.  Mutating a &lt;code&gt;GraphicAttribute&lt;/code&gt; that
                  is used in a {@link TextLayout} results in undefined behavior from the
                  &lt;code&gt;TextLayout&lt;/code&gt;.                
            </javadoc>
            <declaration name="fAlignment" type="int" line="21"/>
            <declaration name="TOP_ALIGNMENT" type="int" line="22"/>
            <javadoc line="22">
                Aligns top of graphic to top of line.                
            </javadoc>
            <declaration name="BOTTOM_ALIGNMENT" type="int" line="26"/>
            <javadoc line="26">
                Aligns bottom of graphic to bottom of line.                
            </javadoc>
            <declaration name="ROMAN_BASELINE" type="int" line="30"/>
            <javadoc line="30">
                Aligns origin of graphic to roman baseline of line.                
            </javadoc>
            <declaration name="CENTER_BASELINE" type="int" line="34"/>
            <javadoc line="34">
                Aligns origin of graphic to center baseline of line.                
            </javadoc>
            <declaration name="HANGING_BASELINE" type="int" line="38"/>
            <javadoc line="38">
                Aligns origin of graphic to hanging baseline of line.                
            </javadoc>
            <javadoc line="42">
                Constructs a &lt;code&gt;GraphicAttribute&lt;/code&gt;.
                  Subclasses use this to define the alignment of the graphic.                
                <param>
                    alignment an int representing one of the
                      &lt;code&gt;GraphicAttribute&lt;/code&gt; alignment fields                    
                </param>
                <throws>
                    IllegalArgumentException if alignment is not one of the
                      five defined values.                    
                </throws>
            </javadoc>
            <method name="GraphicAttribute" type="constructor" line="50">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <scope line="51"/>
            </method>
            <method name="getAscent" type="float" line="56"/>
            <javadoc line="56">
                Returns the ascent of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.  A
                  graphic can be rendered above its ascent.                
                <return>
                    the ascent of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
                <see>
                    #getBounds()                    
                </see>
            </javadoc>
            <method name="getDescent" type="float" line="63"/>
            <javadoc line="63">
                Returns the descent of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.  A
                  graphic can be rendered below its descent.                
                <return>
                    the descent of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
                <see>
                    #getBounds()                    
                </see>
            </javadoc>
            <method name="getAdvance" type="float" line="70"/>
            <javadoc line="70">
                Returns the advance of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.  The
                  &lt;code&gt;GraphicAttribute&lt;/code&gt; object&apos;s advance is the distance
                  from the point at which the graphic is rendered and the point where
                  the next character or graphic is rendered.  A graphic can be
                  rendered beyond its advance                
                <return>
                    the advance of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
                <see>
                    #getBounds()                    
                </see>
            </javadoc>
            <javadoc line="80">
                Returns a {@link Rectangle2D} that encloses all of the
                  bits drawn by this &lt;code&gt;GraphicAttribute&lt;/code&gt; relative to the
                  rendering position.
                  A graphic may be rendered beyond its origin, ascent, descent,
                  or advance;  but if it is, this method&apos;s implementation must
                  indicate where the graphic is rendered.
                  Default bounds is the rectangle (0, -ascent, advance, ascent+descent).                
                <return>
                    a &lt;code&gt;Rectangle2D&lt;/code&gt; that encloses all of the bits
                      rendered by this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle2D" line="91">
                <declaration name="ascent" type="float" line="92"/>
            </method>
            <javadoc line="95">
                Return a {@link java.awt.Shape} that represents the region that
                  this &lt;code&gt;GraphicAttribute&lt;/code&gt; renders.  This is used when a{@link TextLayout} is requested to return the outline of the text.
                  The (untransformed) shape must not extend outside the rectangular
                  bounds returned by &lt;code&gt;getBounds&lt;/code&gt;.
                  The default implementation returns the rectangle returned by{@link #getBounds}, transformed by the provided {@link AffineTransform}if present.                
                <param>
                    tx an optional {@link AffineTransform} to apply to the
                      outline of this &lt;code&gt;GraphicAttribute&lt;/code&gt;. This can be null.                    
                </param>
                <return>
                    a &lt;code&gt;Shape&lt;/code&gt; representing this graphic attribute,
                      suitable for stroking or filling.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getOutline" type="Shape" line="107">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
                <declaration name="b" type="Shape" line="108"/>
                <scope line="109"/>
            </method>
            <method name="draw" type="void" line="114"/>
            <javadoc line="114">
                Renders this &lt;code&gt;GraphicAttribute&lt;/code&gt; at the specified
                  location.                
                <param>
                    graphics the {@link Graphics2D} into which to render the
                      graphic                    
                </param>
                <param>
                    x the user-space X coordinate where the graphic is rendered                    
                </param>
                <param>
                    y the user-space Y coordinate where the graphic is rendered                    
                </param>
            </javadoc>
            <javadoc line="123">
                Returns the alignment of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.
                  Alignment can be to a particular baseline, or to the absolute top
                  or bottom of a line.                
                <return>
                    the alignment of this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getAlignment" type="int" line="129"/>
            <javadoc line="132">
                Returns the justification information for this
                  &lt;code&gt;GraphicAttribute&lt;/code&gt;.  Subclasses
                  can override this method to provide different justification
                  information.                
                <return>
                    a {@link GlyphJustificationInfo} object that contains the
                      justification information for this &lt;code&gt;GraphicAttribute&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getJustificationInfo" type="GlyphJustificationInfo" line="140">
                <declaration name="advance" type="float" line="141"/>
            </method>
        </class>
    </source>